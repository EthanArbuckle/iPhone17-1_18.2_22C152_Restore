BOOL TOpaqueObject<AudioConverterAPI,OpaqueAudioConverter *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AudioConverterAPI>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

uint64_t CreateACQDispatchID@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = atomic_fetch_add(CreateACQDispatchID::s_dispatchSeqNum, 1u);
  return clock_gettime(_CLOCK_REALTIME, (timespec *)(a1 + 8));
}

OSStatus AudioComponentGetDescription(AudioComponent inComponent, AudioComponentDescription *outDesc)
{
  return Impl_AudioGetComponentInfo(inComponent, outDesc, 0);
}

void ___ZN22AudioComponentMgr_Base41postLocalRegistrationsChangedNotificationEv_block_invoke()
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"com.apple.coreaudio.AudioComponentLocalRegistrationsChanged", 0, 0, 1u);
}

void AddACQEventWithIDImpl(long long *a1, int a2, __darwin_time_t a3, uint64_t a4, __darwin_time_t a5, int a6, __darwin_time_t a7, uint64_t a8)
{
  if (a3 && a4 && a5)
  {
    if (a2 == 2 || a2 == 1) {
      kdebug_trace();
    }
    clock_gettime(_CLOCK_REALTIME, &__tp);
    __uint64_t v29 = 0;
    pthread_threadid_np(0, &v29);
    GetACQEventManager();
    if (byte_1E9296318)
    {
      v16 = &qword_1E9278300[15 * (atomic_fetch_add(qword_1E9278300, 1uLL) & 0x3FF)];
      v17 = (os_unfair_lock_s *)(v16 + 15);
      os_unfair_lock_lock((os_unfair_lock_t)v16 + 30);
      int v19 = *((unsigned __int8 *)v16 + 112);
      v18 = (timespec *)(v16 + 14);
      v18[-3] = __tp;
      LODWORD(v18[-7].tv_nsec) = a2;
      v18[-6].tv_sec = a3;
      v18[-6].tv_nsec = a4;
      v18[-5].tv_sec = a5;
      LODWORD(v18[-5].tv_nsec) = a6;
      v18[-4].tv_sec = a7;
      v18[-4].tv_nsec = a8;
      v18[-2].tv_sec = v29;
      if (v19) {
        LOBYTE(v18->tv_sec) = 0;
      }
      if (a1)
      {
        p_tv_nsec = &v18[-2].tv_nsec;
        long long v21 = *a1;
        p_tv_nsec[2] = *((void *)a1 + 2);
        *(_OWORD *)p_tv_nsec = v21;
        LOBYTE(v18->tv_sec) = 1;
      }
      os_unfair_lock_unlock(v17);
      caulk::semaphore::signal((caulk::semaphore *)&byte_1E92782F0);
    }
    unsigned __int8 v22 = atomic_load((unsigned __int8 *)GetACQEventManager(void)::sACQEventManager);
    if ((v22 & 1) == 0)
    {
      uint64_t v23 = 1936;
      if (!a2) {
        uint64_t v23 = 8;
      }
      unint64_t v24 = atomic_fetch_add((atomic_ullong *volatile)&GetACQEventManager(void)::sACQEventManager[v23], 1uLL) & 0xF;
      v25 = (char *)&unk_1E92773E8;
      if (a2) {
        v25 = (char *)&unk_1E9277B70;
      }
      v26 = &v25[120 * v24];
      os_unfair_lock_lock((os_unfair_lock_t)v26 + 28);
      *(timespec *)(v26 + 56) = __tp;
      *(_DWORD *)v26 = a2;
      *((void *)v26 + 1) = a3;
      *((void *)v26 + 2) = a4;
      *((void *)v26 + 3) = a5;
      *((_DWORD *)v26 + 8) = a6;
      *((void *)v26 + 5) = a7;
      *((void *)v26 + 6) = a8;
      *((void *)v26 + 9) = v29;
      v27 = v26 + 104;
      if (v26[104]) {
        unsigned char *v27 = 0;
      }
      if (a1)
      {
        long long v28 = *a1;
        *((void *)v26 + 12) = *((void *)a1 + 2);
        *((_OWORD *)v26 + 5) = v28;
        unsigned char *v27 = 1;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v26 + 28);
    }
  }
}

void GetACQEventManager(void)
{
  {
    if (v0)
    {
      ACQEventManager::ACQEventManager(v0);
    }
  }
}

void sub_18FEC1CB4(_Unwind_Exception *a1)
{
}

void DSPGraph::Interpreter::~Interpreter(DSPGraph::Interpreter *this)
{
  *(void *)this = &unk_1EDF97248;
  v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  *((void *)this + 2) = &unk_1EDF98158;
  v4 = (void **)((char *)this + 104);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 24);
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t vars8;

  DSPGraph::Interpreter::~Interpreter(this);
  JUMPOUT(0x192FC8940);
}

void std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0) {
          operator delete(*(v4 - 6));
        }
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void *)*v1;
      uint64_t v3 = v1[2];
      v1[2] = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void DSPGraph::IsoGroup::~IsoGroup(DSPGraph::IsoGroup *this)
{
  *(void *)this = &unk_1EDF9DEA8;
  v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1EDF9DEA8;
  v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
}

uint64_t std::unordered_map<anonymous namespace'::FormatID,anonymous namespace'::FormatID>::~unordered_map[abi:ne180100](uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

DSPGraph::NewBoxRegistry *DSPGraph::NewBoxRegistry::NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDF98158;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "gain");
  long long v3 = xmmword_1901C62A0;
  int v4 = 0;
  v7[0] = &unk_1EDFA15C0;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "amul");
  long long v3 = xmmword_1901C62B0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1608;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "adiv");
  long long v3 = xmmword_1901C62C0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1650;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "amin");
  long long v3 = xmmword_1901C62D0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1698;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "amax");
  long long v3 = xmmword_1901C62E0;
  int v4 = 0;
  v7[0] = &unk_1EDFA16E0;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "adif");
  long long v3 = xmmword_1901C62F0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1728;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "asum");
  long long v3 = xmmword_1901C6300;
  int v4 = 0;
  v7[0] = &unk_1EDFA1770;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "aabs");
  long long v3 = xmmword_1901C6310;
  int v4 = 0;
  v7[0] = &unk_1EDFA17B8;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "vcgn");
  long long v3 = xmmword_1901C6320;
  int v4 = 0;
  v7[0] = &unk_1EDFA1800;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dbgn");
  long long v3 = xmmword_1901C6330;
  int v4 = 0;
  v7[0] = &unk_1EDFA1848;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  long long v3 = xmmword_1901C6340;
  int v4 = 0;
  v7[0] = &unk_1EDFA1890;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sum");
  long long v3 = xmmword_1901C6350;
  int v4 = 0;
  v7[0] = &unk_1EDFA18D8;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mix");
  long long v3 = xmmword_1901C6360;
  int v4 = 0;
  v7[0] = &unk_1EDFA1920;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "average");
  long long v3 = xmmword_1901C6370;
  int v4 = 0;
  v7[0] = &unk_1EDFA1968;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "test");
  long long v3 = xmmword_1901C6380;
  int v4 = 0;
  v7[0] = &unk_1EDFA19B0;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "src");
  long long v3 = xmmword_1901C6390;
  int v4 = 0;
  v7[0] = &unk_1EDFA19F8;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reblocker");
  long long v3 = xmmword_1901C63A0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1A40;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "freqsrc");
  long long v3 = xmmword_1901C63B0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1A88;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fft");
  long long v3 = xmmword_1901C6280;
  int v4 = 0;
  v7[0] = &unk_1EDFA1AD0;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "join");
  long long v3 = xmmword_1901C63C0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1B18;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "split");
  long long v3 = xmmword_1901C63D0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1B60;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "chancopy");
  long long v3 = xmmword_1901C63E0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1BA8;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "delay");
  long long v3 = xmmword_1901C63F0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1BF0;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dead");
  long long v3 = xmmword_1901C6400;
  int v4 = 0;
  v7[0] = &unk_1EDFA1C38;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "constant");
  long long v3 = xmmword_1901C6410;
  int v4 = 0;
  v7[0] = &unk_1EDFA1C80;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dbcontrol");
  long long v3 = xmmword_1901C6420;
  int v4 = 0;
  v7[0] = &unk_1EDFA1CC8;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "denormalzero");
  long long v3 = xmmword_1901C6430;
  int v4 = 0;
  v7[0] = &unk_1EDFA1D10;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mantissarandom");
  long long v3 = xmmword_1901C60A0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1D58;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "volumecurve");
  long long v3 = xmmword_1901C5FF0;
  int v4 = 0;
  v7[0] = &unk_1EDFA1DA0;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nfnp");
  long long v3 = xmmword_1901C6440;
  int v4 = 0;
  v7[0] = &unk_1EDFA1DE8;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "srlconverter");
  long long v3 = xmmword_1901C6450;
  int v4 = 0;
  v7[0] = &unk_1EDFA1E30;
  v8 = v7;
  DSPGraph::NewBoxRegistry::add((uint64_t)this, (uint64_t)__p, (unsigned int *)&v3, (uint64_t)v7);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_add", 0x705F5F2Bu, 0, 0, 0);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_subtract", 0x705F5F2Du, 0, 0, 1);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_multiply", 0x705F5F2Au, 0, 0, 2);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_divide", 0x705F5F2Fu, 0, 0, 3);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_negate", 0x705F5F6Eu, 0, 0, 4);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_logical_and", 0x705F2626u, 0, 0, 5);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_logical_or", 0x705F7C7Cu, 0, 0, 6);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_logical_not", 0x705F5F21u, 0, 0, 7);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_equal", 0x705F3D3Du, 0, 0, 9);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_not_equal", 0x705F213Du, 0, 0, 10);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_greater_or_equal", 0x705F3E3Du, 0, 0, 11);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_greater", 0x705F5F3Eu, 0, 0, 12);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_less_or_equal", 0x705F3C3Du, 0, 0, 13);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_less", 0x705F5F3Cu, 0, 0, 14);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_min", 0x705F5F6Du, 0, 0, 15);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_max", 0x705F5F4Du, 0, 0, 16);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "parameter_cast", 0x705F3C2Du, 1, 0, 8);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_add", 0x765F5F2Bu, 1, 1, 0);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_subtract", 0x765F5F2Du, 1, 1, 1);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_multiply", 0x765F5F2Au, 1, 1, 2);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_divide", 0x765F5F2Fu, 1, 1, 3);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_negate", 0x765F5F6Eu, 1, 1, 4);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_logical_and", 0x765F2626u, 1, 1, 5);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_logical_or", 0x765F7C7Cu, 1, 1, 6);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_not", 0x765F5F21u, 1, 1, 7);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_logical_not", 0x765F5F21u, 1, 1, 7);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_equal", 0x765F3D3Du, 1, 1, 9);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_not_equal", 0x765F213Du, 1, 1, 10);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_greater_or_equal", 0x765F3E3Du, 1, 1, 11);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_greater", 0x765F5F3Eu, 1, 1, 12);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_less_or_equal", 0x765F3C3Du, 1, 1, 13);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_less", 0x765F5F3Cu, 1, 1, 14);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_min", 0x765F5F6Du, 1, 1, 15);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_max", 0x765F5F4Du, 1, 1, 16);
  DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>((uint64_t)this, "property_cast", 0x765F3C2Du, 0, 1, 8);
  return this;
}

void sub_18FEC32C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(v20);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(v19);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v2 + 5);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,0>(uint64_t a1)
{
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(void **)a1;
    operator delete(v2);
  }
}

void DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_0::operator()<char const*,int,DSPGraph::CalculationBox::OperatorDomain,DSPGraph::CalculationBox::OperatorCodomain,DSPGraph::CalculationBox::Operator>(uint64_t a1, char *a2, unsigned int a3, int a4, int a5, int a6)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v13[0] = 1668183148;
  v13[1] = a3;
  uint64_t v14 = 1633841016;
  int v15 = 0;
  v12 = operator new(0x20uLL);
  void *v12 = &unk_1EDFA2070;
  v12[1] = a2;
  *((_DWORD *)v12 + 4) = a3;
  *((_DWORD *)v12 + 5) = a4;
  *((_DWORD *)v12 + 6) = a5;
  *((_DWORD *)v12 + 7) = a6;
  v18[3] = v12;
  DSPGraph::NewBoxRegistry::add(a1, (uint64_t)__p, v13, (uint64_t)v18);
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18FEC3608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    char v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void DSPGraph::NewBoxRegistry::add(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v9 = (uint64_t *)(a1 + 8);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    int v15 = *(void ***)(*v9 + 8 * v4);
    if (v15)
    {
      v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = *((void *)v16 + 1);
          if (v17 == v11)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              goto LABEL_43;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4) {
              break;
            }
          }
          v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  v18 = (void *)(a1 + 24);
  v16 = (char *)operator new(0x48uLL);
  v70 = v16;
  v71.i64[0] = a1 + 24;
  v71.i8[8] = 0;
  *(void *)v16 = 0;
  *((void *)v16 + 1) = v11;
  uint64_t v19 = (std::string *)(v16 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v16 + 4) = *(void *)(a2 + 16);
  }
  *((void *)v16 + 8) = 0;
  v71.i8[8] = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v21 = *(float *)(a1 + 40);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)v9, v25);
    unint64_t v12 = *(void *)(a1 + 16);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v26 = *v9;
  v27 = *(void **)(*v9 + 8 * v4);
  if (v27)
  {
    *(void *)v16 = *v27;
LABEL_41:
    void *v27 = v16;
    goto LABEL_42;
  }
  *(void *)v16 = *v18;
  void *v18 = v16;
  *(void *)(v26 + 8 * v4) = v18;
  if (*(void *)v16)
  {
    unint64_t v28 = *(void *)(*(void *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12) {
        v28 %= v12;
      }
    }
    else
    {
      v28 &= v12 - 1;
    }
    v27 = (void *)(*v9 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v70 = 0;
  ++*(void *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v70);
LABEL_43:
  std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator=((void *)v16 + 5, a4);
  __uint64_t v29 = (uint64_t *)(a1 + 48);
  unint64_t v30 = a3[1] + (unint64_t)*a3 + a3[2];
  unint64_t v31 = *(void *)(a1 + 56);
  if (v31)
  {
    uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      unint64_t v4 = a3[1] + (unint64_t)*a3 + a3[2];
      if (v30 >= v31) {
        unint64_t v4 = v30 % v31;
      }
    }
    else
    {
      unint64_t v4 = (v31 - 1) & v30;
    }
    v33 = *(void ***)(*v29 + 8 * v4);
    if (v33)
    {
      v34 = *v33;
      if (*v33)
      {
        do
        {
          unint64_t v35 = v34[1];
          if (v35 == v30)
          {
            if (v34[2] == *(void *)a3 && *((_DWORD *)v34 + 6) == (unint64_t)a3[2]) {
              goto LABEL_86;
            }
          }
          else
          {
            if (v32.u32[0] > 1uLL)
            {
              if (v35 >= v31) {
                v35 %= v31;
              }
            }
            else
            {
              v35 &= v31 - 1;
            }
            if (v35 != v4) {
              break;
            }
          }
          v34 = (void *)*v34;
        }
        while (v34);
      }
    }
  }
  v37 = (void *)(a1 + 64);
  v34 = operator new(0x48uLL);
  v70 = (char *)v34;
  v71.i64[0] = a1 + 64;
  void *v34 = 0;
  v34[1] = v30;
  *((_OWORD *)v34 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v34 + 8) = a3[4];
  v34[8] = 0;
  v71.i8[8] = 1;
  float v38 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
  float v39 = *(float *)(a1 + 80);
  if (!v31 || (float)(v39 * (float)v31) < v38)
  {
    BOOL v40 = 1;
    if (v31 >= 3) {
      BOOL v40 = (v31 & (v31 - 1)) != 0;
    }
    unint64_t v41 = v40 | (2 * v31);
    unint64_t v42 = vcvtps_u32_f32(v38 / v39);
    if (v41 <= v42) {
      size_t v43 = v42;
    }
    else {
      size_t v43 = v41;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1 + 48, v43);
    unint64_t v31 = *(void *)(a1 + 56);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v30 >= v31) {
        unint64_t v4 = v30 % v31;
      }
      else {
        unint64_t v4 = v30;
      }
    }
    else
    {
      unint64_t v4 = (v31 - 1) & v30;
    }
  }
  uint64_t v44 = *v29;
  v45 = *(void **)(*v29 + 8 * v4);
  if (v45)
  {
    void *v34 = *v45;
LABEL_84:
    void *v45 = v34;
    goto LABEL_85;
  }
  void *v34 = *v37;
  void *v37 = v34;
  *(void *)(v44 + 8 * v4) = v37;
  if (*v34)
  {
    unint64_t v46 = *(void *)(*v34 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v46 >= v31) {
        v46 %= v31;
      }
    }
    else
    {
      v46 &= v31 - 1;
    }
    v45 = (void *)(*v29 + 8 * v46);
    goto LABEL_84;
  }
LABEL_85:
  v70 = 0;
  ++*(void *)(a1 + 72);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v70);
LABEL_86:
  std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator=(v34 + 5, a4);
  unint64_t v47 = *(void *)(a1 + 104);
  unint64_t v48 = *(void *)(a1 + 96);
  if (v48 >= v47)
  {
    uint64_t v50 = *(void *)(a1 + 88);
    unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v50) >> 4);
    if (v51 + 1 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v50) >> 4);
    uint64_t v53 = 2 * v52;
    if (2 * v52 <= v51 + 1) {
      uint64_t v53 = v51 + 1;
    }
    if (v52 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v54 = 0x555555555555555;
    }
    else {
      unint64_t v54 = v53;
    }
    uint64_t v73 = a1 + 104;
    if (v54)
    {
      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v54);
    }
    else
    {
      v56 = 0;
      uint64_t v55 = 0;
    }
    v59 = (std::string *)&v56[48 * v51];
    v70 = v56;
    v71.i64[0] = (uint64_t)v59;
    v71.i64[1] = (uint64_t)v59;
    v72 = &v56[48 * v55];
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      v61 = (char *)v71.i64[1];
      v59 = (std::string *)v71.i64[0];
    }
    else
    {
      long long v60 = *(_OWORD *)a2;
      v59->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
      v61 = &v56[48 * v51];
    }
    v62 = &v56[48 * v51];
    long long v63 = *(_OWORD *)a3;
    *((_DWORD *)v62 + 10) = a3[4];
    *(_OWORD *)(v62 + 24) = v63;
    v58 = v61 + 48;
    uint64_t v64 = *(void *)(a1 + 88);
    unint64_t v65 = *(void *)(a1 + 96);
    if (v65 == v64)
    {
      int64x2_t v68 = vdupq_n_s64(v65);
    }
    else
    {
      do
      {
        long long v66 = *(_OWORD *)(v65 - 48);
        v59[-2].__r_.__value_.__r.__words[2] = *(void *)(v65 - 32);
        *(_OWORD *)&v59[-2].__r_.__value_.__l.__data_ = v66;
        *(void *)(v65 - 40) = 0;
        *(void *)(v65 - 32) = 0;
        *(void *)(v65 - 48) = 0;
        long long v67 = *(_OWORD *)(v65 - 24);
        LODWORD(v59[-1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v65 - 8);
        *(_OWORD *)&v59[-1].__r_.__value_.__l.__data_ = v67;
        v59 -= 2;
        v65 -= 48;
      }
      while (v65 != v64);
      int64x2_t v68 = *(int64x2_t *)(a1 + 88);
    }
    *(void *)(a1 + 88) = v59;
    *(void *)(a1 + 96) = v58;
    int64x2_t v71 = v68;
    v69 = *(char **)(a1 + 104);
    *(void *)(a1 + 104) = v72;
    v72 = v69;
    v70 = (char *)v68.i64[0];
    std::__split_buffer<std::pair<std::string,AudioComponentDescription>>::~__split_buffer((uint64_t)&v70);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 96), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v49 = *(_OWORD *)a2;
      *(void *)(v48 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v48 = v49;
    }
    long long v57 = *(_OWORD *)a3;
    *(_DWORD *)(v48 + 40) = a3[4];
    *(_OWORD *)(v48 + 24) = v57;
    v58 = (char *)(v48 + 48);
    *(void *)(a1 + 96) = v48 + 48;
  }
  *(void *)(a1 + 96) = v58;
}

void sub_18FEC3D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,AudioComponentDescription>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator=(void *a1, uint64_t a2)
{
  v8[3] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    long long v3 = v7;
    unint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_18FEC3FF0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    unint64_t v4 = (uint64_t *)a1;
  }
  else {
    unint64_t v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      uint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN8DSPGraph14NewBoxRegistryC1EvENK3__0clIPKciNS2_14CalculationBox14OperatorDomainENS8_16OperatorCodomainENS8_8OperatorEEEDaT_T0_T1_T2_T3_EUljjE_NS_9allocatorISI_EEFPNS2_3BoxEjjEE7__cloneEv(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_1EDFA2070;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v1 + 5);
    }
    operator delete(v1);
  }
}

AudioComponent AudioComponentRegister(const AudioComponentDescription *inDesc, CFStringRef inName, UInt32 inVersion, AudioComponentFactoryFunction inFactory)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  if (inDesc && inName && inFactory)
  {
    GlobalComponentPluginMgr((uint64_t *)&v10);
    if (EmbeddedComponentManager::isComponentDescriptionVisible((EmbeddedComponentManager *)inDesc->componentFlags, v7))
    {
      CFRetain(inName);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, inName);
      v11[0] = &unk_1EDF9E440;
      v11[1] = inFactory;
      v11[3] = v11;
      operator new();
    }
    if (v10) {
      std::recursive_mutex::unlock(v10);
    }
  }
  return 0;
}

void sub_18FEC4874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void GlobalComponentPluginMgr(uint64_t *a1)
{
  unint64_t v2 = (void *)MEMORY[0x192FC9400]();
  {
    operator new();
  }
  uint64_t v3 = GlobalComponentPluginMgr(void)::sImpl;
  uint64_t v4 = GlobalComponentPluginMgr(void)::sImpl + 64;
  std::recursive_mutex::lock((std::recursive_mutex *)GlobalComponentPluginMgr(void)::sImpl);
  *a1 = v3;
  a1[1] = v4;
  if ((GlobalComponentPluginMgr(void)::initialized & 1) == 0)
  {
    GlobalComponentPluginMgr(void)::initialized = 1;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v3 + 64);
  }
}

void sub_18FEC4B28(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A0C40F084F79CLL);
  _Unwind_Resume(a1);
}

BOOL EmbeddedComponentManager::isComponentDescriptionVisible(EmbeddedComponentManager *this, const AudioComponentDescription *a2)
{
  if ((this & ~tkqMjk4y) == 0) {
    return 1;
  }
  int AppBooleanValue = gAllCodecsOK;
  if (gAllCodecsOK < 0)
  {
    int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"AllCodecsOK", @"com.apple.coreaudio", 0);
    gAllCodecsOK = AppBooleanValue;
  }
  return AppBooleanValue != 0;
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_18FEC4C5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t APComponent::APComponent(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, CFTypeRef *a6, int a7, uint64_t a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDF8C370;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  int v10 = *(_DWORD *)(a4 + 16);
  int v11 = *(_DWORD *)(a4 + 8);
  unsigned int v12 = *(_DWORD *)(a4 + 12) & 0xFFFFFFE3 | (4 * ((a5 >> 2) & 7));
  *(void *)(a1 + 36) = *(void *)a4;
  *(_DWORD *)(a1 + 44) = v11;
  *(_DWORD *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 52) = v10;
  *(_DWORD *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 60) = a3;
  CFTypeRef v13 = *a6;
  if (*a6) {
    CFRetain(*a6);
  }
  *(void *)(a1 + 64) = v13;
  *(unsigned char *)(a1 + 72) = 0;
  std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__value_func[abi:ne180100](a1 + 80, a8);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  return a1;
}

void sub_18FEC4D4C(_Unwind_Exception *a1)
{
  applesauce::CF::StringRef::~StringRef(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__func<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*),std::allocator<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*)>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDF9E440;
  a2[1] = v2;
  return result;
}

uint64_t AudioComponentMgr_Base::addComponentLocally(uint64_t a1, void *a2)
{
  uint64_t v3 = AudioComponentMgr_Base::_addComponent((char **)a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  while (v6 != v7)
  {
    uint64_t v8 = *v6;
    v6 += 2;
    void *v5 = v8;
    uint64_t v5 = (void *)(v8 + 24);
  }
  void *v5 = 0;
  if (v3) {
    dispatch_async(MEMORY[0x1E4F14428], &__block_literal_global_84);
  }
  return v4;
}

uint64_t AudioComponentMgr_Base::_addComponent(char **a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  int v3 = *(_DWORD *)(*a2 + 36);
  if (v3 == 1145392463 || *(_DWORD *)(*a2 + 40) == 1145392463 || *(_DWORD *)(*a2 + 44) == 1145392463)
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    uint64_t v17 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "AudioComponentPluginMgr.mm";
      __int16 v21 = 1024;
      int v22 = 1139;
      _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Can't register component with 'DEMO' type, subtype, or manufacturer.", (uint8_t *)&v19, 0x12u);
    }
    return 0;
  }
  if (v3 == 1635087216)
  {
    if (!(*((unsigned int (**)(char **))*a1 + 14))(a1)) {
      return 0;
    }
    uint64_t v2 = *a2;
  }
  uint64_t v8 = (uint64_t *)(a1 + 2);
  SortedPosition = AudioComponentVector::findSortedPosition(a1[2], a1[3], (long long *)(v2 + 36));
  int v10 = (long long *)SortedPosition;
  if (a1[3] == SortedPosition
    || (int v11 = *(_DWORD **)SortedPosition,
        unsigned int v12 = (_DWORD *)*a2,
        *(_DWORD *)(*(void *)SortedPosition + 36) != *(_DWORD *)(*a2 + 36))
    || v11[10] != v12[10]
    || v11[11] != v12[11]
    || v11[14] != v12[14])
  {
    v16 = (uint64_t *)(a1 + 2);
    unint64_t v15 = (unint64_t)v10;
    goto LABEL_23;
  }
  uint64_t result = (*((uint64_t (**)(char **, char *, void *))*a1 + 12))(a1, SortedPosition, a2);
  if (result) {
    return result;
  }
  if (*(_DWORD *)(*a2 + 60) > *(_DWORD *)(*(void *)v10 + 60))
  {
    uint64_t v14 = (char *)v10 - *v8;
    std::vector<std::shared_ptr<APComponent>>::erase[abi:ne180100]((uint64_t)v8, v10);
    unint64_t v15 = (unint64_t)&v14[*v8];
    v16 = v8;
LABEL_23:
    AudioComponentVector::insertSorted(v16, v15, a2);
    return *a2;
  }
  return 0;
}

char *AudioComponentVector::findSortedPosition(char *a1, char *a2, long long *a3)
{
  long long v10 = *a3;
  uint64_t v11 = *((void *)a3 + 2);
  int v12 = 100;
  if (a2 != a1)
  {
    int v3 = a1;
    unint64_t v4 = (a2 - a1) >> 4;
    do
    {
      uint64_t v5 = (uint64_t *)&v3[16 * (v4 >> 1)];
      uint64_t v7 = *v5;
      uint64_t v6 = (char *)(v5 + 2);
      int v8 = APComponent::Key::sortCompare((_DWORD *)(v7 + 36), &v10, 0);
      if (v8 >= 0) {
        v4 >>= 1;
      }
      else {
        v4 += ~(v4 >> 1);
      }
      if (v8 < 0) {
        int v3 = v6;
      }
    }
    while (v4);
    return v3;
  }
  return a2;
}

uint64_t APComponent::Key::sortCompare(_DWORD *a1, _DWORD *a2, char a3)
{
  if (*a1 < *a2) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = *a1 > *a2;
  }
  if (!result)
  {
    unsigned int v6 = a1[1];
    unsigned int v7 = a2[1];
    BOOL v20 = v6 >= v7;
    BOOL v8 = v6 > v7;
    uint64_t result = v20 ? v8 : 0xFFFFFFFFLL;
    if (!result)
    {
      unsigned int v10 = a1[2];
      unsigned int v11 = a2[2];
      BOOL v20 = v10 >= v11;
      BOOL v12 = v10 > v11;
      if (v20) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = -1;
      }
      int AppBooleanValue = reverseManufacturerSort(void)::gHWCodecsFirst;
      if (reverseManufacturerSort(void)::gHWCodecsFirst < 0)
      {
        int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"hw_codecs_first", @"com.apple.coreaudio", 0);
        reverseManufacturerSort(void)::gHWCodecsFirst = AppBooleanValue;
      }
      if (AppBooleanValue) {
        uint64_t result = -v13;
      }
      else {
        uint64_t result = v13;
      }
      if (!result)
      {
        if (a3) {
          goto LABEL_23;
        }
        unsigned int v15 = a1[5];
        unsigned int v16 = a2[5];
        BOOL v20 = v15 >= v16;
        int v17 = v15 > v16;
        if (!v20) {
          int v17 = -1;
        }
        if (!v17)
        {
LABEL_23:
          unsigned int v18 = a1[6];
          unsigned int v19 = a2[6];
          BOOL v20 = v18 >= v19;
          if (v18 <= v19) {
            unsigned int v21 = 0;
          }
          else {
            unsigned int v21 = -1;
          }
          if (v20) {
            return v21;
          }
          else {
            return 1;
          }
        }
        else
        {
          return -v17;
        }
      }
    }
  }
  return result;
}

void AudioComponentVector::insertSorted(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a2 - *a1;
  uint64_t v9 = v8 >> 4;
  unsigned int v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v7;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    unint64_t v38 = v11;
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    unsigned int v21 = (void *)(v18 + 16 * v9);
    unint64_t v35 = (char *)v18;
    *(void *)&long long v36 = v21;
    *((void *)&v36 + 1) = v21;
    unint64_t v37 = (char *)(v18 + 16 * v19);
    if (v9 == v19)
    {
      if (v8 < 1)
      {
        if (v7 == a2) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v8 >> 3;
        }
        unint64_t v42 = v11;
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v23);
        uint64_t v26 = v36;
        uint64_t v27 = *((void *)&v36 + 1) - v36;
        if (*((void *)&v36 + 1) == (void)v36)
        {
          int64x2_t v32 = vdupq_n_s64(v36);
          unint64_t v29 = (unint64_t)&v24[16 * (v23 >> 2)];
        }
        else
        {
          uint64_t v28 = v27 >> 4;
          unint64_t v29 = (unint64_t)&v24[16 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v30 = 16 * v28;
          uint64_t v31 = &v24[16 * (v23 >> 2)];
          do
          {
            *(_OWORD *)uint64_t v31 = *(_OWORD *)v26;
            v31 += 16;
            *(void *)uint64_t v26 = 0;
            *(void *)(v26 + 8) = 0;
            v26 += 16;
            v30 -= 16;
          }
          while (v30);
          int64x2_t v32 = (int64x2_t)v36;
        }
        uint64_t v33 = v37;
        uint64_t v39 = v35;
        unint64_t v35 = v24;
        *(void *)&long long v36 = &v24[16 * (v23 >> 2)];
        int64x2_t v40 = v32;
        *((void *)&v36 + 1) = v29;
        unint64_t v37 = &v24[16 * v25];
        unint64_t v41 = v33;
        std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v39);
        unsigned int v21 = (void *)*((void *)&v36 + 1);
      }
      else
      {
        unint64_t v22 = v9 + 2;
        if (v9 >= -1) {
          unint64_t v22 = v9 + 1;
        }
        v21 -= 2 * (v22 >> 1);
        *(void *)&long long v36 = v21;
        *((void *)&v36 + 1) = v21;
      }
    }
    *unsigned int v21 = *a3;
    uint64_t v34 = a3[1];
    v21[1] = v34;
    if (v34)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      unsigned int v21 = (void *)*((void *)&v36 + 1);
    }
    *((void *)&v36 + 1) = v21 + 2;
    std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer(a1, &v35, (void *)a2);
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v35);
  }
  else if (a2 == v6)
  {
    long long v20 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((void *)&v20 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<APComponent>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    if (a2 <= (unint64_t)a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)a2 = v13;
    uint64_t v14 = v7 + 16 * v9;
    unsigned int v15 = *(std::__shared_weak_count **)(v14 + 8);
    *(void *)(v14 + 8) = v12;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_18FEC54E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::shared_ptr<APComponent>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  unint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = (char *)(a2 + v4 - a4);
  unint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v5;
    v6 += 16;
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    v5 += 16;
  }
  *(void *)(a1 + 8) = v6;
  if (v4 != a4)
  {
    uint64_t v7 = (std::__shared_weak_count **)(v4 - 8);
    uint64_t v8 = 16 * ((v4 - a4) >> 4);
    uint64_t v9 = a2 - 16;
    do
    {
      unint64_t v10 = (void *)(v9 + v8);
      long long v11 = *(_OWORD *)(v9 + v8);
      *unint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v12 = *v7;
      *(_OWORD *)(v7 - 1) = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v7 -= 2;
      v8 -= 16;
    }
    while (v8);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *uint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

uint64_t std::__split_buffer<std::pair<std::string,AudioComponentDescription>>::~__split_buffer(uint64_t a1)
{
  int v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int8x8_t v4 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v4);
        int8x8_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1E30;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1DE8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1D10;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1C80;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1BF0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1B18;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1A88;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1A40;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA19B0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1848;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1800;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA17B8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1770;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1728;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA16E0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1698;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1650;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1608;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA15C0;
}

uint64_t std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    int8x8_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1DA0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1D58;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1C38;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1BA8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1AD0;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA19F8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1968;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA18D8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1CC8;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1B60;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1920;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1890;
}

uint64_t std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  std::string::size_type v7 = a1 + 2;
  a2[1] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<APComponent>>,std::reverse_iterator<std::shared_ptr<APComponent>*>,std::reverse_iterator<std::shared_ptr<APComponent>*>,std::reverse_iterator<std::shared_ptr<APComponent>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  uint64_t v8 = a1[1];
  size_t v9 = (_OWORD *)a2[2];
  unint64_t v16 = v9;
  uint64_t v17 = v9;
  v14[0] = v7;
  v14[1] = &v16;
  v14[2] = &v17;
  if ((void *)v8 != v3)
  {
    do
    {
      *v9++ = *(_OWORD *)v3;
      *uint64_t v3 = 0;
      v3[1] = 0;
      v3 += 2;
    }
    while (v3 != (void *)v8);
    uint64_t v17 = v9;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<APComponent>>,std::shared_ptr<APComponent>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  a2[2] = v9;
  uint64_t v10 = *a1;
  *a1 = a2[1];
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<APComponent>>,std::shared_ptr<APComponent>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<APComponent>>,std::reverse_iterator<std::shared_ptr<APComponent>*>,std::reverse_iterator<std::shared_ptr<APComponent>*>,std::reverse_iterator<std::shared_ptr<APComponent>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  while (a3 != a5)
  {
    long long v8 = *((_OWORD *)a3 - 1);
    a3 -= 2;
    *(_OWORD *)(result - 16) = v8;
    result -= 16;
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t std::__function::__func<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0,std::allocator<APComponent_NSExtension::APComponent_NSExtension(AudioComponentRegistrationInfo const&,NSString *,NSExtension *)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA09F0;
  a2[1] = v2;
  return result;
}

uint64_t AudioComponentMgr_NSExtension::hasSpeechSynthesizerSupport(AudioComponentMgr_NSExtension *this)
{
  return 1;
}

uint64_t std::__shared_ptr_pointer<APComponent *,std::shared_ptr<APComponent>::__shared_ptr_default_delete<APComponent,APComponent>,std::allocator<APComponent>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t caulk::synchronized<AudioComponentMgr_NSExtension,std::recursive_mutex,caulk::empty_atomic_interface<AudioComponentMgr_NSExtension>>::synchronized<>(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x192FC8690]();
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(void *)(v2 + 64) = &unk_1EDF936C0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(unsigned char *)(v2 + 104) = 1;
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  out_token[0] = 0;
  uint64_t v3 = dispatch_get_global_queue(0, 0);
  notify_register_dispatch("com.apple.coreaudio.list_components", out_token, v3, &__block_literal_global_1627);

  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(unsigned char *)(a1 + 200) = 1;
  *(void *)(a1 + 64) = &unk_1EDF943F8;
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  return a1;
}

void sub_18FEC60F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 80);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v10);
  _Unwind_Resume(a1);
}

uint64_t AudioComponentMgr_RegistrarService::initPhase2(AudioComponentMgr_RegistrarService *this)
{
  uint64_t v2 = (EmbeddedComponentManager *)EmbeddedComponentManager::registerInternalAudioUnits(this);
  EmbeddedComponentManager::registerInternalAudioCodecs(v2);
  *((unsigned char *)this + 80) = dyld_program_sdk_at_least();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  if (AudioComponentMgr_RegistrarService::connectToRegistrationServer(void)::onceToken != -1) {
    dispatch_once(&AudioComponentMgr_RegistrarService::connectToRegistrationServer(void)::onceToken, block);
  }
  uint64_t v3 = *(uint64_t (**)(AudioComponentMgr_RegistrarService *, void, void))(*(void *)this + 120);
  return v3(this, 0, 0);
}

void EmbeddedComponentManager::registerInternalAudioCodecs(EmbeddedComponentManager *this)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  memcpy(__dst, "/System/Library/Frameworks/AudioToolbox.framework", sizeof(__dst));
  int v1 = strlen((const char *)__dst);
  uint64_t v2 = (v1 + 1);
  __dst[v1] = 47;
  uint64_t v3 = (char *)&__dst[v2];
  size_t v4 = 1024 - v2;
  strncpy((char *)&__dst[v2], "Codecs.plist", 1024 - v2);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  size_t v6 = strlen((const char *)__dst);
  CFURLRef v7 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], __dst, v6, 0);
  if (!v7)
  {
    size_t v9 = 0;
    goto LABEL_9;
  }
  CFURLRef v8 = v7;
  size_t v9 = CFReadStreamCreateWithFile(v5, v7);
  CFRelease(v8);
  if (!v9)
  {
LABEL_9:
    uint64_t v13 = 0;
    goto LABEL_10;
  }
  if (!CFReadStreamOpen(v9))
  {
LABEL_33:
    uint64_t v13 = 0;
    goto LABEL_34;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)CFPropertyListCreateWithStream(v5, v9, 0, 0, 0, 0);
  if (v10)
  {
    CFDictionaryRef v11 = v10;
    Value = CFDictionaryGetValue(v10, @"codecList");
    uint64_t v13 = Value;
    if (Value)
    {
      CFRetain(Value);
    }
    else
    {
      uint64_t v30 = CADefaultLog();
      if (v30)
      {
        uint64_t v31 = v30;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buffer = 136315394;
          unint64_t v42 = "EmbeddedAudioCodecLoader.cpp";
          __int16 v43 = 1024;
          int v44 = 67;
          _os_log_impl(&dword_18FEC0000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d couldn't get codec array from Codec plist property list\n", (uint8_t *)buffer, 0x12u);
        }
      }
    }
    CFRelease(v11);
    goto LABEL_34;
  }
  uint64_t v28 = CADefaultLog();
  uint64_t v13 = v28;
  if (v28)
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buffer = 136315394;
      unint64_t v42 = "EmbeddedAudioCodecLoader.cpp";
      __int16 v43 = 1024;
      int v44 = 61;
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d couldn't get property list from Codec plist read stream\n", (uint8_t *)buffer, 0x12u);
    }
    goto LABEL_33;
  }
LABEL_34:
  CFReadStreamClose(v9);
  CFRelease(v9);
  if (v13)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)v13);
    if (Count < 0)
    {
LABEL_28:
      CFRelease(v13);
      return;
    }
    size_t v9 = (__CFReadStream *)Count;
    char v32 = 0;
    goto LABEL_11;
  }
  size_t v9 = 0;
LABEL_10:
  char v32 = 1;
LABEL_11:
  unsigned int v14 = 1;
  do
  {
    char v15 = "AudioCodecs";
    if (v14 != 1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v14 - 2);
      if (!ValueAtIndex) {
        break;
      }
      char v15 = buffer;
      if (!CFStringGetCString(ValueAtIndex, buffer, 256, 0x600u)) {
        break;
      }
    }
    strncpy(v3, v15, v4);
    uint64_t v17 = dlopen((const char *)__dst, 0);
    if (!v17)
    {
      uint64_t v19 = CADefaultLog();
      if (!v19) {
        continue;
      }
      long long v20 = v19;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        continue;
      }
      unsigned int v21 = dlerror();
      *(_DWORD *)buf = 136315906;
      uint64_t v34 = "EmbeddedAudioCodecLoader.cpp";
      __int16 v35 = 1024;
      int v36 = 102;
      __int16 v37 = 2080;
      unint64_t v38 = (const char *)__dst;
      __int16 v39 = 2080;
      int64x2_t v40 = v21;
      unint64_t v22 = v20;
      unint64_t v23 = "%25s:%-5d couldn't open library %s:\n%s";
LABEL_24:
      _os_log_impl(&dword_18FEC0000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x26u);
      continue;
    }
    unint64_t v18 = (void (*)(void))dlsym(v17, "RegisterExternalAudioCodecs");
    if (!v18)
    {
      uint64_t v24 = CADefaultLog();
      if (!v24) {
        continue;
      }
      uint64_t v25 = v24;
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        continue;
      }
      uint64_t v26 = dlerror();
      *(_DWORD *)buf = 136315906;
      uint64_t v34 = "EmbeddedAudioCodecLoader.cpp";
      __int16 v35 = 1024;
      int v36 = 108;
      __int16 v37 = 2080;
      unint64_t v38 = "RegisterExternalAudioCodecs";
      __int16 v39 = 2080;
      int64x2_t v40 = v26;
      unint64_t v22 = v25;
      unint64_t v23 = "%25s:%-5d couldn't lookup symbol %s:\n%s";
      goto LABEL_24;
    }
    v18(0);
  }
  while ((uint64_t)v9 >= v14++);
  if ((v32 & 1) == 0) {
    goto LABEL_28;
  }
}

uint64_t DSPGraph::Graph::numOutputs(DSPGraph::Graph *this)
{
  return (*((void *)this + 39) - *((void *)this + 38)) >> 3;
}

void AddACQEvent(int a1, __darwin_time_t a2, uint64_t a3, __darwin_time_t a4, int a5, __darwin_time_t a6, uint64_t a7)
{
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioStreamBasicDescription *a2)
{
}

{
  int16x8_t v3;
  void **v4;
  _OWORD v5[2];
  uint64_t v6;
  void *__p[2];
  char v8;

  uint64_t v3 = *(int16x8_t *)&a2->mBytesPerPacket;
  v5[0] = *(_OWORD *)&a2->mSampleRate;
  v5[1] = v3;
  size_t v6 = *(void *)&a2->mBitsPerChannel;
  CA::StreamDescription::AsString((CA::StreamDescription *)__p, v5, *(double *)v5, v3);
  if (v8 >= 0) {
    size_t v4 = __p;
  }
  else {
    size_t v4 = (void **)__p[0];
  }
  CAFormatter::Init(this, (const char *)v4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t DSPGraph::Graph::numInputs(DSPGraph::Graph *this)
{
  return (*((void *)this + 36) - *((void *)this + 35)) >> 3;
}

uint64_t ExtendedAudioBufferList_Create(_anonymous_namespace_::EABLImpl *a1, int a2)
{
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return AudioConverterNewWithOptions((AudioStreamBasicDescription *)inSourceFormat, (AudioStreamBasicDescription *)inDestinationFormat, 0, outAudioConverter);
}

BOOL TOpaqueObject<AudioFileHandle,OpaqueAudioFileID *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AudioFileHandle>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

AudioComponent AudioComponentInstanceGetComponent(AudioComponentInstance inInstance)
{
  if (!inInstance) {
    return 0;
  }
  int v1 = (uint64_t (***)(void))(*(uint64_t (**)(AudioComponentInstance))(*(void *)inInstance + 8))(inInstance);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = **v1;
  return (AudioComponent)v2();
}

void DSPGraph::Graph::initialize(DSPGraph::Graph *this, int a2)
{
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  DSPGraph::Graph::initializeWithFlags(this, v2);
}

BOOL in_audio_mx_server_process()
{
  return iEjr08d2 > 0;
}

uint64_t *AT::RingBuffer::GetTimeBounds@<X0>(AT::RingBuffer *this@<X0>, uint64_t *a2@<X8>)
{
  return AT::RingBuffer::Impl::GetTimeBounds(a2, *((void *)this + 6));
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  UInt32 v9 = inNumberPCMFrames;
  CFURLRef v7 = outOutputData;
  CFURLRef v8 = inInputData;
  v5[0] = &v9;
  v5[1] = &v8;
  v5[2] = &v7;
  v6[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
  v6[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return with_resolved((int)inAudioConverter, v6);
}

uint64_t DSPGraph::SingleRateLPCMConverterBox::process(DSPGraph::SingleRateLPCMConverterBox *this, int a2)
{
  size_t v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "out");
    char v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      char v32 = (void *)*v32;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v31, v32, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  size_t v6 = *(_DWORD **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 56) + 80);
  if (*v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 3;
    do
    {
      uint64_t v9 = *((void *)this + 11);
      if (*((void *)this + 12) == v9)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v46, "out");
        uint64_t v30 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v30 = (void *)*v30;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v29, v30, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
      }
      v6[v8] = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 120) + 24)
             * a2;
      ++v7;
      v8 += 4;
    }
    while (v7 < *v6);
  }
  uint64_t v10 = *((void *)this + 8);
  if (*((void *)this + 9) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "in");
    uint64_t v34 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v34 = (void *)*v34;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v33, v34, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v11 = *((void *)this + 97);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  uint64_t v13 = *((void *)this + 11);
  if (*((void *)this + 12) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "out");
    int v36 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v36 = (void *)*v36;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v35, v36, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v14 = *(void *)(*(void *)(v12 + 56) + 80);
  uint64_t v15 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13) + 56) + 80);
  int v49 = a2;
  uint64_t v45 = v14;
  uint64_t v48 = v15;
  v46[0] = &v49;
  v46[1] = &v45;
  v46[2] = &v48;
  v47[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
  v47[1] = (uint64_t (*)(uint64_t, uint64_t))v46;
  with_resolved(v11, v47);
  uint64_t v16 = *((void *)this + 8);
  if (*((void *)this + 9) == v16)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "in");
    unint64_t v38 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v38 = (void *)*v38;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v37, v38, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
  uint64_t v18 = *((void *)this + 11);
  if (*((void *)this + 12) == v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "out");
    int64x2_t v40 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int64x2_t v40 = (void *)*v40;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v39, v40, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v19 = *(void *)(v17 + 56);
  uint64_t v20 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v18 + 40))(v18) + 56);
  long long v21 = *(_OWORD *)(v19 + 8);
  long long v22 = *(_OWORD *)(v19 + 24);
  long long v23 = *(_OWORD *)(v19 + 40);
  *(_OWORD *)(v20 + 56) = *(_OWORD *)(v19 + 56);
  *(_OWORD *)(v20 + 40) = v23;
  *(_OWORD *)(v20 + 24) = v22;
  *(_OWORD *)(v20 + 8) = v21;
  uint64_t v24 = *((void *)this + 8);
  if (*((void *)this + 9) == v24)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "in");
    unint64_t v42 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24);
  uint64_t v26 = *((void *)this + 11);
  if (*((void *)this + 12) == v26)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "out");
    int v44 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v44 = (void *)*v44;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  int v27 = *(_DWORD *)(*(void *)(v25 + 56) + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v27;
  return result;
}

void sub_18FEC6E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioConverterConvertBuffer(AudioConverterRef inAudioConverter, UInt32 inInputDataSize, const void *inInputData, UInt32 *ioOutputDataSize, void *outOutputData)
{
  UInt32 v11 = inInputDataSize;
  uint64_t v9 = ioOutputDataSize;
  uint64_t v10 = inInputData;
  uint64_t v8 = outOutputData;
  v6[0] = &v11;
  v6[1] = &v10;
  v6[2] = &v9;
  void v6[3] = &v8;
  v7[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertBuffer::$_0>;
  v7[1] = (uint64_t (*)(uint64_t, uint64_t))v6;
  return with_resolved((int)inAudioConverter, v7);
}

uint64_t with_resolved(int a1, uint64_t (**a2)(uint64_t, uint64_t))
{
  ResolvedOpaqueRef<AudioConverterAPI>::ResolvedOpaqueRef((uint64_t)v5, a1);
  uint64_t v3 = v8;
  if (v8) {
    LODWORD(a2) = (*a2)((uint64_t)(a2 + 1), v8);
  }
  if (v7 && v6) {
    atomic_fetch_add(v6, 0xFFFFFFFF);
  }
  if (v3) {
    return a2;
  }
  else {
    return 4294967246;
  }
}

void sub_18FEC6F74(void *a1)
{
}

void sub_18FEC6F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, char a15)
{
  if (a15)
  {
    if (a14) {
      atomic_fetch_add(a14, 0xFFFFFFFF);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ResolvedOpaqueRef<AudioConverterAPI>::ResolvedOpaqueRef(uint64_t a1, int a2)
{
  int v4 = a2;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (*MEMORY[0x1E4FB9460])
  {
    std::optional<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::scoped_lookup>::emplace[abi:ne180100]<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>&,unsigned int const&,void>(a1, *MEMORY[0x1E4FB9460], &v4);
    if (*(unsigned char *)(a1 + 24)) {
      *(void *)(a1 + 48) = BaseOpaqueObject::checkRTTI();
    }
  }
  return a1;
}

void sub_18FEC702C(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 40))
  {
    int v2 = *(atomic_uint **)(v1 + 32);
    if (v2)
    {
      atomic_fetch_add(v2, 0xFFFFFFFF);
      if (*(unsigned char *)(v1 + 24)) {
        *(unsigned char *)(v1 + 24) = 0;
      }
      *(void *)(v1 + 32) = 0;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::scoped_lookup>::emplace[abi:ne180100]<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>&,unsigned int const&,void>(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(unsigned char *)(a1 + 40))
  {
    int v4 = *(atomic_uint **)(a1 + 32);
    if (v4) {
      atomic_fetch_add(v4, 0xFFFFFFFF);
    }
    *(unsigned char *)(a1 + 40) = 0;
  }
  int v5 = *a3;
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 48), 1u);
  unint64_t v6 = atomic_load((unint64_t *)(*(void *)a1 + 40));
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 8);
    uint64_t v8 = *(void *)v6;
    int v19 = v5;
    uint64_t v9 = *(void *)(v8 + 24);
    if (v9)
    {
      signed int v10 = (*(unsigned int (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v19) % *(_DWORD *)(v6 + 8);
      if (v10 >= 3) {
        int v11 = 0;
      }
      else {
        int v11 = v7;
      }
      int v12 = v10 + v11 - 3;
      int v13 = -1;
      unsigned int v14 = v10;
      do
      {
        int v15 = v12;
        uint64_t v16 = (atomic_uint *)atomic_load((unint64_t *)(v6 + 8 * v14 + 16));
        if (v16 == (atomic_uint *)-1)
        {
          if (v13 < 0) {
            int v13 = v14;
          }
        }
        else
        {
          if (!v16) {
            goto LABEL_22;
          }
          if (v16[1] == v5)
          {
            *(void *)(a1 + 32) = v16;
            atomic_fetch_add(v16, 1u);
            *(void *)(a1 + 16) = *(void *)(*(void *)(a1 + 32) + 8);
            *(unsigned char *)(a1 + 24) = 1;
            goto LABEL_23;
          }
        }
        if (v15 >= 3) {
          int v17 = 0;
        }
        else {
          int v17 = v7;
        }
        int v12 = v15 + v17 - 3;
        unsigned int v14 = v15;
      }
      while (v15 != v10);
      if ((v13 & 0x80000000) == 0)
      {
LABEL_22:
        *(void *)(a1 + 32) = 0;
        goto LABEL_23;
      }
      __break(1u);
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_23:
  atomic_fetch_add((atomic_uint *volatile)(*(void *)a1 + 48), 0xFFFFFFFF);
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertBuffer::$_0>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)a2 + 64))(a2, ***a1, *(void *)(*a1)[1], *(void *)(*a1)[2], *(void *)(*a1)[3]);
  if (isRenderStatusConcerning(v3))
  {
    uint64_t v4 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2) ? 15 : 11;
    uint64_t v5 = _os_log_pack_size() + 88;
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v4, 16);
    if (message)
    {
      int v7 = (caulk::concurrent::message *)message;
      uint64_t v8 = (char *)(message + v5);
      uint64_t v9 = _os_log_pack_fill();
      if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2)) {
        signed int v10 = "out-of-process";
      }
      else {
        signed int v10 = "in-process";
      }
      stpcpy(v8, v10);
      *(_DWORD *)uint64_t v9 = 134218498;
      *(void *)(v9 + 4) = a2;
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v8;
      *(_WORD *)(v9 + 22) = 1024;
      *(_DWORD *)(v9 + 24) = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v7);
    }
  }
  return v3;
}

uint64_t isRenderStatusConcerning(int a1)
{
  uint64_t result = 1;
  if (a1 > 561145202)
  {
    if (a1 != 561145203 && a1 != 1869627199)
    {
      int v3 = 2003329396;
LABEL_8:
      if (a1 != v3) {
        return 0;
      }
    }
  }
  else if (a1 != -50 && a1 != -4)
  {
    int v3 = 560164718;
    goto LABEL_8;
  }
  return result;
}

unint64_t acv2::AudioConverterV2::convertBuffer(acv2::AudioConverterV2 *this, unsigned int a2, const void *a3, unsigned int *a4, void *a5)
{
  __int16 v43 = a4;
  if (*((unsigned char *)this + 12))
  {
    unint64_t v41 = this;
    unint64_t v42 = &v43;
    goto LABEL_4;
  }
  int v9 = *((unsigned __int8 *)this + 12);
  unint64_t v41 = this;
  unint64_t v42 = &v43;
  if (v9 || !*((unsigned char *)this + 13))
  {
LABEL_4:
    v34[0] = 0;
    char v40 = 0;
    if (a3) {
      goto LABEL_5;
    }
LABEL_30:
    uint64_t v25 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v25 + 88, 16);
    if (!message) {
      goto LABEL_51;
    }
LABEL_50:
    uint64_t v33 = (caulk::concurrent::message *)message;
    *(_WORD *)_os_log_pack_fill() = 0;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v33);
    goto LABEL_51;
  }
  uint64_t v23 = *((unsigned int *)this + 4);
  uint64_t v24 = *((unsigned int *)this + 5);
  int v46 = 2740;
  uint64_t v47 = v23;
  uint64_t v48 = v24;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  kdebug_trace();
  v34[0] = 1;
  int v35 = 2740;
  uint64_t v36 = v23;
  uint64_t v37 = v24;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  v45[0] = 0;
  char v40 = 1;
  AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v45);
  if (!a3) {
    goto LABEL_30;
  }
LABEL_5:
  signed int v10 = v43;
  if (!v43)
  {
    uint64_t v30 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v30 + 88, 16);
    if (message) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  if (!a5)
  {
    uint64_t v31 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v31 + 88, 16);
    if (message) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  uint64_t v11 = *((void *)this + 4);
  if (*(unsigned char *)(v11 + 82))
  {
    uint64_t v32 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v32 + 88, 16);
    if (!message) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (*(unsigned char *)(v11 + 80) || *(unsigned char *)(v11 + 81))
  {
    uint64_t v29 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v29 + 88, 16);
    if (message) {
      goto LABEL_50;
    }
LABEL_51:
    unint64_t v15 = 4294967246;
    goto LABEL_25;
  }
  v58[0] = a3;
  v58[1] = a2;
  int v12 = *(unsigned __int8 *)(v11 + 449);
  if (*(unsigned char *)(v11 + 449)) {
    uint64_t v13 = mach_absolute_time();
  }
  else {
    uint64_t v13 = 0;
  }
  unsigned int v14 = *v10;
  if (*v10)
  {
    unint64_t v15 = 1869627199;
    unsigned int v16 = *(_DWORD *)(v11 + 16);
    if (v16)
    {
      if (*(_DWORD *)(v11 + 24))
      {
        unsigned int v17 = *(_DWORD *)(v11 + 56);
        if (v17)
        {
          if (*(_DWORD *)(v11 + 64))
          {
            int v18 = a2 / v16;
            int v57 = a2 / v16;
            if (v14 / v17 >= a2 / v16)
            {
              char v56 = 0;
              v55[0] = &v56;
              v55[1] = v58;
              v55[2] = &v57;
              *(void *)&v54.mNumberBuffers = 1;
              v54.mBuffers[0].mNumberChannels = *(_DWORD *)(v11 + 68);
              v54.mBuffers[0].mDataByteSize = v17 * v18;
              v54.mBuffers[0].mData = a5;
              ACBaseAudioSpan::ACBaseAudioSpan((ACBaseAudioSpan *)v45, v18, &v54, 0);
              *(void *)&long long v44 = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterChain::ConvertBuffer(std::span<unsigned char const,18446744073709551615ul>,void *,unsigned int &)::$_0>;
              *((void *)&v44 + 1) = v55;
              unint64_t v15 = acv2::AudioConverterChain::ProduceOutput(v11, &v44, (ACBaseAudioSpan *)v45);
              *signed int v10 = v47;
              if (v12)
              {
                uint64_t v27 = mach_absolute_time() - v13;
                ++*(_DWORD *)(v11 + 456);
                uint64_t v28 = *(void *)(v11 + 472);
                *(void *)(v11 + 464) += v27;
                if (v28 > v27) {
                  *(void *)(v11 + 472) = v27;
                }
                if (*(void *)(v11 + 480) < v27) {
                  *(void *)(v11 + 480) = v27;
                }
              }
              if ((v15 & 0xFF00000000) != 0) {
                unint64_t v15 = 0;
              }
              else {
                unint64_t v15 = v15;
              }
              if (v53 && v51)
              {
                unint64_t v52 = v51;
                std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v51);
              }
            }
            else
            {
              unint64_t v15 = 1768846202;
            }
          }
        }
      }
    }
  }
  else
  {
    unint64_t v15 = 1869902714;
    uint64_t v19 = _os_log_pack_size();
    uint64_t v20 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v19 + 88, 16);
    if (v20)
    {
      long long v21 = (caulk::concurrent::message *)v20;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v21);
    }
  }
  if (*((unsigned char *)this + 28) && *v43)
  {
    *((unsigned char *)this + 28) = 0;
    kdebug_trace();
  }
LABEL_25:
  if (v40) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v34);
  }
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  return v15;
}

void sub_18FEC78E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a15) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  }
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  _Unwind_Resume(a1);
}

unint64_t acv2::AudioConverterChain::ProduceOutput(uint64_t a1, long long *a2, ACBaseAudioSpan *this)
{
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112))
  {
    LOBYTE(v21) = 0;
    unint64_t v19 = 0;
    LODWORD(v18) = 1869627199;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 256) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 240) = v5;
    LOBYTE(v37) = 0;
    BYTE4(v37) = 1;
    if (*(_DWORD *)this < *((_DWORD *)this + 1))
    {
      unint64_t v6 = (unsigned int *)(a1 + 128);
      while (1)
      {
        ACBaseAudioSpan::setAfter(a1 + 128, (unsigned int *)this);
        ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)(a1 + 128), this);
        uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 112) - 8) + 112))(*(void *)(*(void *)(a1 + 112) - 8), a1 + 128);
        __p[0] = (void *)v7;
        if ((v7 & 0xFF00000000) == 0) {
          break;
        }
        caulk::expected<BOOL,int>::value((uint64_t)__p);
        if (LOBYTE(__p[0]))
        {
          BOOL v8 = 1;
        }
        else
        {
          caulk::expected<BOOL,int>::value((uint64_t)&v37);
          BOOL v8 = (_BYTE)v37 != 0;
        }
        LOBYTE(v37) = v8;
        if (!BYTE4(v37))
        {
          char v9 = 1;
LABEL_12:
          BYTE4(v37) = v9;
        }
LABEL_13:
        if (BYTE4(__p[0]))
        {
          caulk::expected<BOOL,int>::value((uint64_t)__p);
          BOOL v10 = LOBYTE(__p[0]) != 0;
        }
        else
        {
          BOOL v10 = 0;
        }
        int v11 = *v6;
        if (v10 || v11)
        {
          int v12 = *(_DWORD *)(a1 + 136);
          unsigned int v13 = *(_DWORD *)this;
          uint64_t v14 = *((unsigned int *)this + 2);
          if (v11)
          {
            uint64_t v15 = *((void *)this + 4);
            if (v15)
            {
              unsigned int v16 = *(_DWORD *)this;
              uint64_t v17 = *v6;
              do
              {
                *(void *)(v15 + 16 * v16++) += v14;
                --v17;
              }
              while (v17);
            }
          }
          *(_DWORD *)this = v13 + v11;
          *((_DWORD *)this + 2) = v14 + v12;
          ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)this, a1 + 128, 0);
          if (BYTE4(v37))
          {
            if (*(_DWORD *)this < *((_DWORD *)this + 1)) {
              continue;
            }
          }
        }
        goto LABEL_24;
      }
      LODWORD(v37) = v7;
      if (!BYTE4(v37)) {
        goto LABEL_13;
      }
      char v9 = 0;
      goto LABEL_12;
    }
LABEL_24:
    ACBaseAudioSpan::completeMetadataFrame((uint64_t *)this);
    unint64_t v18 = v37;
    unint64_t v19 = v37 >> 40;
    unsigned int v20 = *(_DWORD *)this;
    *(_DWORD *)(a1 + 404) += *(_DWORD *)this;
    if ((v18 & 0xFF00000000) != 0)
    {
      unint64_t v21 = HIDWORD(v18);
      if (v20 < *((_DWORD *)this + 1) && !*(unsigned char *)(a1 + 401) && !*(unsigned char *)(a1 + 402))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v37);
        uint64_t v23 = *(void *)(a1 + 104);
        for (uint64_t i = *(void *)(a1 + 112); v23 != i; v23 += 8)
        {
          (*(void (**)(void **__return_ptr))(**(void **)v23 + 64))(__p);
          if ((v36 & 0x80u) == 0) {
            uint64_t v24 = __p;
          }
          else {
            uint64_t v24 = (void **)__p[0];
          }
          if ((v36 & 0x80u) == 0) {
            uint64_t v25 = v36;
          }
          else {
            uint64_t v25 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)v24, v25);
          if ((char)v36 < 0) {
            operator delete(__p[0]);
          }
        }
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v38);
        if ((char)v36 < 0)
        {
          size_t v26 = strlen((const char *)__p[0]);
          operator delete(__p[0]);
        }
        else
        {
          size_t v26 = strlen((const char *)__p);
        }
        uint64_t v28 = _os_log_pack_size() + 88;
        uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v26 + v28 + 1, 17);
        if (message)
        {
          uint64_t v30 = (caulk::concurrent::message *)message;
          uint64_t v31 = _os_log_pack_fill();
          unsigned int v32 = *(_DWORD *)this;
          int v33 = *((_DWORD *)this + 1);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v38);
          if ((v36 & 0x80u) == 0) {
            uint64_t v34 = __p;
          }
          else {
            uint64_t v34 = (void **)__p[0];
          }
          stpcpy((char *)v30 + v28, (const char *)v34);
          *(_DWORD *)uint64_t v31 = 67109634;
          *(_DWORD *)(v31 + 4) = v32;
          *(_WORD *)(v31 + 8) = 1024;
          *(_DWORD *)(v31 + 10) = v33;
          *(_WORD *)(v31 + 14) = 2080;
          *(void *)(v31 + 16) = (char *)v30 + v28;
          if ((char)v36 < 0) {
            operator delete(__p[0]);
          }
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v30);
        }
        unint64_t v37 = *MEMORY[0x1E4FBA418];
        *(void *)((char *)&v38[-1] + *(void *)(v37 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        v38[0] = MEMORY[0x1E4FBA470] + 16;
        if (v39 < 0) {
          operator delete((void *)v38[8]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x192FC8840](&v40);
      }
    }
    else
    {
      LOBYTE(v21) = 0;
    }
  }
  return ((unint64_t)v21 << 32) | (v19 << 40) | v18;
}

void sub_18FEC7DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t caulk::expected<BOOL,int>::value(uint64_t result)
{
  if (!*(unsigned char *)(result + 4))
  {
    uint64_t v1 = (int *)result;
    exception = __cxa_allocate_exception(0x10uLL);
    int v3 = *v1;
    *(void *)exception = &unk_1EDF96318;
    exception[2] = v3;
  }
  return result;
}

uint64_t ACBaseAudioSpan::setAfter(uint64_t result, unsigned int *a2)
{
  *(_DWORD *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  uint64_t v2 = **(unsigned int **)(result + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2[2];
    uint64_t v5 = 16 * v2;
    do
    {
      *(void *)(*(void *)(result + 16) + v3 + 16) = *(void *)(*((void *)a2 + 2) + v3 + 16) + v4;
      v3 += 16;
    }
    while (v5 != v3);
  }
  uint64_t v6 = *((void *)a2 + 4);
  uint64_t v7 = *a2;
  if (v6) {
    *(void *)(result + 32) = v6 + 16 * v7;
  }
  uint64_t v8 = *((void *)a2 + 5);
  if (v8) {
    *(void *)(result + 40) = v8 + 16 * v7;
  }
  unsigned int v9 = a2[2];
  *(_DWORD *)(result + 4) = a2[1] - v7;
  *(_DWORD *)(result + 12) = a2[3] - v9;
  return result;
}

uint64_t *ACBaseAudioSpan::copyEmptyMetadataEventsFrom(uint64_t *this, const ACBaseAudioSpan *a2)
{
  if (*((unsigned char *)this + 88)) {
    BOOL v2 = *((unsigned char *)a2 + 88) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (*((unsigned char *)this + 28))
    {
      uint64_t v3 = (unsigned int *)this[2];
      if (v3[4 * *v3 + 2] == 1094863915)
      {
        uint64_t v4 = *(v3 - 9);
        if (v4)
        {
          uint64_t v6 = this + 6;
          uint64_t v7 = (uint64_t *)((char *)v3 + v4 - 48);
          memset(v10, 0, 44);
          BYTE8(v10[1]) = 1;
          *(void *)&v10[2] = 0x10000002CLL;
          AudioMetadataFrame::begin_new(v7, (unsigned int *)v10);
          if (*((_DWORD *)a2 + 20))
          {
            unsigned int v8 = 0;
            uint64_t v9 = *((void *)a2 + 9);
            do
            {
              AudioMetadataFrame_AppendEvent(v7, (char *)v9);
              v9 += *(unsigned int *)(v9 + 8);
              ++v8;
            }
            while (v8 < *((_DWORD *)a2 + 20));
          }
          return ACMetadataContainer::resetMetadataEvents(v6, (AudioMetadataFrame *)v7);
        }
      }
    }
  }
  return this;
}

uint64_t *ACBaseAudioSpan::completeMetadataFrame(uint64_t *this)
{
  if (*((unsigned char *)this + 88))
  {
    if (*((unsigned char *)this + 28))
    {
      uint64_t v1 = (unsigned int *)this[2];
      if (v1[4 * *v1 + 2] == 1094863915)
      {
        uint64_t v2 = *(v1 - 9);
        if (v2)
        {
          uint64_t v3 = (char *)v1 + v2;
          uint64_t v6 = *((void *)v3 - 6);
          uint64_t v5 = *((void *)v3 - 5);
          uint64_t v4 = (uint64_t *)(v3 - 48);
          if ((unint64_t)(v5 - v6) >= 0x2C && v6 != 0)
          {
            unsigned int v8 = (unsigned int *)this[6];
            if ((unint64_t)(this[7] - (void)v8) >= 0x2C)
            {
              if (v8) {
                return AudioMetadataFrame::begin_new(v4, v8);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t ACBaseAudioSpan::copyFilledMetadataEventsFrom(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 88)) {
    BOOL v3 = *(unsigned char *)(a2 + 88) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && *(unsigned char *)(a2 + 28) != 0)
  {
    uint64_t v5 = *(unsigned int **)(a2 + 16);
    if (v5[4 * *v5 + 2] == 1094863915)
    {
      uint64_t v6 = *(v5 - 9);
      if (v6)
      {
        uint64_t v7 = (char *)v5 + v6;
        uint64_t v8 = *((void *)v7 - 6);
        BOOL v9 = (unint64_t)(*((void *)v7 - 5) - v8) < 0x2C || v8 == 0;
        if (!v9 && *(_DWORD *)(v8 + 40))
        {
          int v10 = a3;
          uint64_t v11 = result;
          unsigned int v12 = 0;
          unsigned int v13 = (uint64_t *)(result + 48);
          uint64_t v14 = (long long *)(v8 + 44);
          uint64_t v15 = a3 & 0xFF00000000;
          do
          {
            long long v16 = *v14;
            long long v17 = v14[1];
            uint64_t v20 = *((void *)v14 + 4);
            long long v18 = v16;
            long long v19 = v17;
            if (v15) {
              DWORD1(v19) = v10;
            }
            uint64_t result = AudioMetadataFrame_AppendEvent(v13, (char *)&v18);
            uint64_t v14 = (long long *)((char *)v14 + *((unsigned int *)v14 + 2));
            *(void *)(v11 + 72) += *(unsigned int *)(*(void *)(v11 + 72) + 8);
            --*(_DWORD *)(v11 + 80);
            ++v12;
          }
          while (v12 < *(_DWORD *)(v8 + 40));
        }
      }
    }
  }
  return result;
}

void ACBaseAudioSpan::ACBaseAudioSpan(ACBaseAudioSpan *this, int a2, AudioBufferList *a3, AudioStreamPacketDescription *a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  UInt32 mNumberBuffers = a3->mNumberBuffers;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 2) = a3;
  *((_DWORD *)this + 6) = mNumberBuffers;
  *((unsigned char *)this + 28) = (_BYTE)a4;
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (a4) {
    _ZNSt3__18optionalI19ACMetadataContainerE7emplaceB8ne180100IJEvEERS1_DpOT_((uint64_t)this + 48);
  }
  mDataByteSize = (AudioStreamPacketDescription *)a3->mBuffers[0].mDataByteSize;
  *((void *)this + 5) = 0;
  ACBaseAudioSpan::set((uint64_t *)this, a3, 0, a2, mDataByteSize);
}

void sub_18FEC821C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v4 = *v2;
    if (*v2)
    {
      *(void *)(v1 + 56) = v4;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::ObtainInput(acv2::AudioConverterChain *this, acv2::AudioConverterBase *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v7 = this;
  uint64_t v8 = *(void *)(a3 + 104);
  if (!v8)
  {
    uint64_t v26 = *(void *)(a3 + 112);
    if (v26)
    {
      *(_DWORD *)uint64_t v26 = 0;
      *(_DWORD *)(v26 + 8) = 0;
      ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v26);
      int v27 = *(_DWORD *)(a3 + 32) * v4;
      *(_DWORD *)(v26 + 4) = v4;
      *(_DWORD *)(v26 + 12) = v27;
    }
LABEL_29:
    uint64_t v28 = *(_DWORD **)(a3 + 96);
    if (v28)
    {
      if (*(void *)(a3 + 104)) {
        goto LABEL_53;
      }
      unint64_t v29 = (int)v28[30];
      uint64_t v30 = *((void *)a2 + 34);
      if (v29 < (*((void *)a2 + 35) - v30) >> 3)
      {
        uint64_t v31 = *(void *)(v30 + 8 * v29);
        if (*(_DWORD *)v31 >= v4) {
          unsigned int v32 = v4;
        }
        else {
          unsigned int v32 = *(_DWORD *)v31;
        }
        LODWORD(v33) = v28[21];
        if ((v28[17] & 0x20) != 0) {
          uint64_t v33 = v33;
        }
        else {
          uint64_t v33 = 1;
        }
        uint64_t v34 = (v28[20] * v32 + 15) & 0xFFFFFFF0;
        **(_DWORD **)(v31 + 24) = v33;
        uint64_t v35 = *(void *)(v31 + 112);
        uint64_t v75 = v35;
        if (v33 < 2)
        {
          uint64_t v76 = v35;
          if (!v33)
          {
LABEL_52:
            *(_DWORD *)(v31 + 8) = 0;
            uint64_t v26 = v31 + 8;
            *(_DWORD *)(v26 + 8) = 0;
            ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v26);
            *(_DWORD *)(v26 + 4) = v32;
            *(_DWORD *)(v26 + 12) = v34;
            unsigned int v4 = *(_DWORD *)v26;
LABEL_53:
            uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v28 + 112))(v28, v26);
            if ((result & 0xFF00000000) != 0
              || (int v40 = result, (v49 = *(void *)(a3 + 104)) != 0) && (*(_DWORD *)(v49 + 24) || *(_DWORD *)(v49 + 128))
              || *(_DWORD *)v26)
            {
LABEL_58:
              if (v8)
              {
                uint64_t result = (uint64_t)ACSpanningInputBuffer::consolidateInput((ACSpanningInputBuffer *)v8, v4);
                uint64_t v26 = result;
              }
              *(void *)uint64_t v7 = v26;
              goto LABEL_61;
            }
LABEL_76:
            *(_DWORD *)uint64_t v26 = 0;
            *(_DWORD *)(v26 + 8) = 0;
            uint64_t result = (uint64_t)ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v26);
            *(void *)uint64_t v7 = 0;
            *((void *)v7 + 1) = 0;
            *((_DWORD *)v7 + 4) = v40;
            return result;
          }
        }
        else
        {
          uint64_t v76 = v35 + ((v33 + 1) >> 1) * v34 + 32;
        }
        uint64_t v46 = 0;
        uint64_t v47 = 16;
        do
        {
          uint64_t v48 = *(&v75 + (v46 & 1));
          *(void *)(*(void *)(v31 + 24) + v47) = v48;
          *(&v75 + (v46++ & 1)) = v48 + v34;
          v47 += 16;
        }
        while (v33 != v46);
        goto LABEL_52;
      }
LABEL_108:
      std::vector<std::unique_ptr<ACOutputBuffer>>::__throw_out_of_range[abi:ne180100]();
    }
    int v36 = 1;
    *((unsigned char *)a2 + 400) = 1;
    uint64_t v37 = (*((uint64_t (**)(char *, uint64_t))a2 + 30))((char *)a2 + 248, v26);
    int v39 = v37;
    *((unsigned char *)a2 + 400) = 0;
    if ((v37 & 0xFF00000000) != 0)
    {
      int v40 = v37 != 0;
      if (v37 || *((unsigned char *)a2 + 401))
      {
        if (v37)
        {
          unsigned int v42 = *((_DWORD *)a2 + 4);
          if (v42)
          {
            unsigned int v43 = v4;
            long long v44 = v7;
            unsigned int v45 = *(_DWORD *)(*(void *)(v26 + 16) + 12);
            int v41 = v45 / v42;
            if (v45 / v42 == v37)
            {
              int v41 = v37;
            }
            else
            {
              uint64_t v73 = _os_log_pack_size();
              uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v73 + 88, 16);
              if (message)
              {
                uint64_t v70 = (caulk::concurrent::message *)message;
                uint64_t v51 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v51 = 67109888;
                *(_DWORD *)(v51 + 4) = v39;
                *(_WORD *)(v51 + 8) = 1024;
                *(_DWORD *)(v51 + 10) = v45;
                *(_WORD *)(v51 + 14) = 1024;
                *(_DWORD *)(v51 + 16) = v42;
                *(_WORD *)(v51 + 20) = 1024;
                *(_DWORD *)(v51 + 22) = v41;
                caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v70);
              }
            }
            uint64_t v7 = v44;
            unsigned int v4 = v43;
          }
          else
          {
            int v41 = v37;
          }
        }
        else
        {
          int v41 = 0;
        }
      }
      else
      {
        int v41 = 0;
        *((unsigned char *)a2 + 401) = 1;
      }
      uint64_t v52 = *((void *)a2 + 43);
      if (v52) {
        uint64_t v53 = *(unsigned int *)(v52 + 356) | 0x100000000;
      }
      else {
        uint64_t v53 = 0;
      }
      int v54 = validateInputProcData((uint64_t)a2, *(unsigned int **)(v26 + 16), v41, *(void *)(v26 + 32), v53);
      if (v54)
      {
        int v36 = 1;
        int v40 = v54;
      }
      else
      {
        *(_DWORD *)uint64_t v26 = v41;
        *(_DWORD *)(v26 + 4) = v41;
        if (v41) {
          int v55 = *(_DWORD *)(*(void *)(v26 + 16) + 12);
        }
        else {
          int v55 = 0;
        }
        int v36 = 0;
        *(_DWORD *)(v26 + 8) = v55;
        *(_DWORD *)(v26 + 12) = v55;
        if (v8)
        {
          if (*(void *)(v26 + 32))
          {
            int v36 = 0;
            if (!*(_DWORD *)(v8 + 4) && v8 + 128 == v26)
            {
              char v56 = *(char **)(v8 + 160);
              if (v56 == *(char **)(v8 + 232))
              {
                int v36 = 0;
              }
              else
              {
                uint64_t v74 = v7;
                unint64_t v57 = *(unsigned int *)(v8 + 128);
                uint64_t v58 = *(void *)(v8 + 272);
                uint64_t v59 = *(char **)(v8 + 256);
                unint64_t v60 = (v58 - (uint64_t)v59) >> 4;
                if (v60 >= v57)
                {
                  uint64_t v65 = *(unsigned char **)(v8 + 264);
                  uint64_t v38 = (const ACAudioSpan *)(v65 - v59);
                  unint64_t v66 = (v65 - v59) >> 4;
                  if (v66 >= v57)
                  {
                    uint64_t v64 = 16 * v57;
                    if (v57) {
                      memmove(*(void **)(v8 + 256), v56, 16 * v57);
                    }
                    uint64_t v7 = v74;
                  }
                  else
                  {
                    unsigned int v71 = v4;
                    uint64_t v68 = &v56[16 * v66];
                    if (v65 != v59)
                    {
                      memmove(v59, v56, (size_t)v38);
                      uint64_t v68 = &v56[16 * v66];
                      uint64_t v59 = *(char **)(v8 + 264);
                    }
                    uint64_t v67 = &v56[16 * v57];
                    uint64_t v64 = v67 - v68;
                    if (v66 != v57) {
                      memmove(v59, v68, v67 - v68);
                    }
                    uint64_t v7 = v74;
                    unsigned int v4 = v71;
                  }
                }
                else
                {
                  unsigned int v61 = v4;
                  if (v59)
                  {
                    *(void *)(v8 + 264) = v59;
                    std::allocator_traits<caulk::rt_allocator<AudioStreamPacketDescription>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v59, v60);
                    uint64_t v58 = 0;
                    *(void *)(v8 + 256) = 0;
                    *(void *)(v8 + 264) = 0;
                    *(void *)(v8 + 272) = 0;
                  }
                  uint64_t v62 = v58 >> 3;
                  if (v58 >> 3 <= v57) {
                    uint64_t v62 = v57;
                  }
                  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v63 = v62;
                  }
                  if (v63 >> 60) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if (!*MEMORY[0x1E4FB7E88])
                  {
                    __break(1u);
                    goto LABEL_108;
                  }
                  uint64_t v59 = (char *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88]);
                  *(void *)(v8 + 256) = v59;
                  *(void *)(v8 + 264) = v59;
                  *(void *)(v8 + 272) = &v59[16 * v63];
                  uint64_t v64 = 16 * v57;
                  memmove(v59, v56, 16 * v57);
                  uint64_t v7 = v74;
                  unsigned int v4 = v61;
                }
                int v36 = 0;
                *(void *)(v8 + 264) = &v59[v64];
                *(void *)(v8 + 160) = *(void *)(v8 + 256);
              }
            }
          }
        }
      }
    }
    else
    {
      int v40 = v37;
    }
    *((_DWORD *)a2 + 102) += *(_DWORD *)v26;
    uint64_t result = *((void *)a2 + 61);
    if (result) {
      uint64_t result = (uint64_t)acv2::AudioConverterBase::writeCapture((acv2::AudioConverterBase *)result, (AudioConverterCapturer *)v26, v38);
    }
    if (!v36) {
      goto LABEL_58;
    }
    goto LABEL_76;
  }
  if (*(_DWORD *)v8 >= a4) {
    unsigned int v9 = a4;
  }
  else {
    unsigned int v9 = *(_DWORD *)v8;
  }
  unsigned int v10 = *(_DWORD *)(v8 + 24);
  if (v10 >= v9)
  {
    uint64_t result = v8 + 24;
  }
  else
  {
    if (!v10 && !*(_DWORD *)(v8 + 128))
    {
      ACBaseAudioSpan::set((uint64_t *)(v8 + 128), (const AudioBufferList *)(*(void *)(v8 + 16) + 48), *(void *)(v8 + 232), v9, (AudioStreamPacketDescription *)(*(_DWORD *)(v8 + 8) * v9));
LABEL_28:
      uint64_t v26 = v8 + 128;
      goto LABEL_29;
    }
    uint64_t v11 = *(void *)(v8 + 16);
    unsigned int v12 = *(void **)(v8 + 232);
    int v13 = *(_DWORD *)(v8 + 12);
    *(_DWORD *)(v8 + 28) = *(_DWORD *)v8;
    *(_DWORD *)(v8 + 36) = v13;
    uint64_t v14 = **(unsigned int **)(v8 + 40);
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v11 + 64;
      uint64_t v17 = 16 * v14;
      do
      {
        uint64_t v18 = *(void *)(v8 + 40) + v15;
        long long v19 = *(const void **)(v18 + 16);
        uint64_t v20 = *(void **)(v16 + v15);
        if (v19 != v20)
        {
          memmove(v20, v19, *(unsigned int *)(v8 + 32));
          long long v19 = *(const void **)(v16 + v15);
        }
        *(void *)(v18 + 16) = v19;
        v15 += 16;
      }
      while (v17 != v15);
    }
    unint64_t v21 = *(const void **)(v8 + 56);
    if (v21) {
      BOOL v22 = v21 == v12;
    }
    else {
      BOOL v22 = 1;
    }
    if (!v22)
    {
      memmove(v12, v21, 16 * *(unsigned int *)(v8 + 24));
      *(void *)(v8 + 56) = v12;
    }
    uint64_t result = (uint64_t)ACSpanningInputBuffer::consolidateInput((ACSpanningInputBuffer *)v8, v9);
    uint64_t v7 = this;
    if (*(_DWORD *)result < v9)
    {
      if (v9 - *(_DWORD *)(v8 + 24) >= *(_DWORD *)v8) {
        unsigned int v24 = *(_DWORD *)v8;
      }
      else {
        unsigned int v24 = v9 - *(_DWORD *)(v8 + 24);
      }
      ACBaseAudioSpan::setAfter(v8 + 128, (unsigned int *)(v8 + 24));
      int v25 = *(_DWORD *)(v8 + 8) * v24;
      *(_DWORD *)(v8 + 132) = v24;
      *(_DWORD *)(v8 + 140) = v25;
      unsigned int v4 = a4;
      goto LABEL_28;
    }
  }
  *(void *)uint64_t v7 = result;
LABEL_61:
  *((void *)v7 + 1) = v8;
  *((_DWORD *)v7 + 4) = 0;
  return result;
}

uint64_t *ACBaseAudioSpan::resetMetadataEvents(uint64_t *this)
{
  if (*((unsigned char *)this + 88))
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v2 = this + 6;
    if (*(unsigned char *)(v1 + 28) && (BOOL v3 = *(unsigned int **)(v1 + 16), v3[4 * *v3 + 2] == 1094863915))
    {
      uint64_t v4 = *(v3 - 9);
      uint64_t v5 = (uint64_t)v3 + v4 - 48;
      if (v4) {
        uint64_t v6 = (AudioMetadataFrame *)v5;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    return ACMetadataContainer::resetMetadataEvents(v2, v6);
  }
  return this;
}

uint64_t *ACBaseAudioSpan::set(uint64_t *this, const AudioBufferList *a2, uint64_t a3, int a4, AudioStreamPacketDescription *a5)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  uint64_t v5 = *(unsigned int *)this[2];
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 16 * v5;
    do
    {
      *(void *)(this[2] + v6 + 16) = a2->mBuffers[v6 / 0x10].mData;
      v6 += 16;
    }
    while (v7 != v6);
  }
  this[4] = a3;
  *((_DWORD *)this + 1) = a4;
  *((_DWORD *)this + 3) = a5;
  return ACBaseAudioSpan::resetMetadataEvents(this);
}

uint64_t validateInputProcData(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5)
{
  CrashIfClientProvidedBogusAudioBufferList();
  uint64_t v10 = *a2;
  int v11 = *(_DWORD *)(a1 + 28);
  if ((*(unsigned char *)(a1 + 12) & 0x20) == 0) {
    int v11 = 1;
  }
  if (v10 != v11)
  {
    uint64_t v24 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v24 + 88, 16);
    if (!message) {
      return 4294967246;
    }
    uint64_t v26 = (caulk::concurrent::message *)message;
    *(_WORD *)_os_log_pack_fill() = 0;
LABEL_29:
    uint64_t v31 = *(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16);
    unsigned int v32 = v26;
LABEL_30:
    caulk::concurrent::messenger::enqueue(v31, v32);
    return 4294967246;
  }
  uint64_t v12 = a2[3];
  if (v10 >= 2)
  {
    int v13 = (int *)(a2 + 7);
    uint64_t v14 = 1;
    while (*v13 == v12)
    {
      ++v14;
      v13 += 4;
      if (v10 == v14) {
        goto LABEL_8;
      }
    }
    uint64_t v27 = _os_log_pack_size();
    uint64_t v28 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v27 + 88, 16);
    if (!v28) {
      return 4294967246;
    }
    uint64_t v26 = (caulk::concurrent::message *)v28;
    uint64_t v29 = _os_log_pack_fill();
    int v30 = *v13;
    *(_DWORD *)uint64_t v29 = 67109632;
    *(_DWORD *)(v29 + 4) = v12;
    *(_WORD *)(v29 + 8) = 1024;
    *(_DWORD *)(v29 + 10) = v30;
    *(_WORD *)(v29 + 14) = 1024;
    *(_DWORD *)(v29 + 16) = v14;
    goto LABEL_29;
  }
LABEL_8:
  if (!a4) {
    return 0;
  }
  if (a3)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = (unsigned int *)(a4 + 12);
    while (1)
    {
      uint64_t v18 = *v17;
      if ((a5 & 0xFF00000000) != 0 && v18 > a5)
      {
        uint64_t v42 = _os_log_pack_size();
        uint64_t v43 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v42 + 88, 16);
        if (!v43) {
          return 4294967246;
        }
        int v39 = (caulk::concurrent::message *)v43;
        uint64_t v44 = _os_log_pack_fill();
        int v45 = *v17;
        *(_DWORD *)uint64_t v44 = 67109888;
        *(_DWORD *)(v44 + 4) = v15;
        *(_WORD *)(v44 + 8) = 1024;
        *(_DWORD *)(v44 + 10) = a3;
        *(_WORD *)(v44 + 14) = 1024;
        *(_DWORD *)(v44 + 16) = v45;
        *(_WORD *)(v44 + 20) = 1024;
        *(_DWORD *)(v44 + 22) = a5;
        uint64_t v41 = gAudioConverterDeferredLog;
        goto LABEL_42;
      }
      uint64_t v19 = *(void *)(v17 - 3);
      uint64_t v20 = v19 + v18;
      BOOL v21 = v19 >= v16 && v19 <= v12;
      if (!v21 || v20 > v12) {
        break;
      }
      ++v15;
      v17 += 4;
      uint64_t v16 = v19 + v18;
      if (a3 == v15)
      {
        if (v20 >= v12) {
          return 0;
        }
        if (a3 == 1)
        {
          uint64_t result = 0;
          a2[3] = v20;
          return result;
        }
        goto LABEL_34;
      }
    }
    uint64_t v37 = _os_log_pack_size();
    uint64_t v38 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v37 + 88, 16);
    if (v38)
    {
      int v39 = (caulk::concurrent::message *)v38;
      uint64_t v40 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v40 = 67110144;
      *(_DWORD *)(v40 + 4) = v15;
      *(_WORD *)(v40 + 8) = 1024;
      *(_DWORD *)(v40 + 10) = a3;
      *(_WORD *)(v40 + 14) = 2048;
      *(void *)(v40 + 16) = v19;
      *(_WORD *)(v40 + 24) = 2048;
      *(void *)(v40 + 26) = v20;
      *(_WORD *)(v40 + 34) = 1024;
      *(_DWORD *)(v40 + 36) = v12;
      uint64_t v41 = gAudioConverterDeferredLog;
LABEL_42:
      uint64_t v31 = *(caulk::concurrent::messenger **)(v41 + 16);
      unsigned int v32 = v39;
      goto LABEL_30;
    }
    return 4294967246;
  }
  if (!v12) {
    return 0;
  }
  uint64_t v20 = 0;
LABEL_34:
  uint64_t v33 = _os_log_pack_size();
  uint64_t result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v33 + 88, 16);
  if (result)
  {
    uint64_t v34 = (caulk::concurrent::message *)result;
    uint64_t v35 = _os_log_pack_fill();
    unsigned int v36 = a2[3];
    *(_DWORD *)uint64_t v35 = 67109632;
    *(_DWORD *)(v35 + 4) = v36;
    *(_WORD *)(v35 + 8) = 1024;
    *(_DWORD *)(v35 + 10) = a3;
    *(_WORD *)(v35 + 14) = 2048;
    *(void *)(v35 + 16) = v20;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v34);
    return 0;
  }
  return result;
}

unsigned int *ACSpanningInputBuffer::consolidateInput(ACSpanningInputBuffer *this, unsigned int a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 24);
  int v3 = *((_DWORD *)this + 6);
  unint64_t v6 = (ACSpanningInputBuffer *)((char *)this + 128);
  unsigned int v5 = *((_DWORD *)this + 32);
  if (v3) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 >= a2;
  }
  if (v7 && !*((void *)this + 20)) {
    return (unsigned int *)((char *)this + 128);
  }
  if (*(_DWORD *)this >= a2) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = *(_DWORD *)this;
  }
  unsigned int v9 = v8 - v3;
  if (v9 >= v5) {
    unsigned int v10 = *((_DWORD *)this + 32);
  }
  else {
    unsigned int v10 = v9;
  }
  if (v10)
  {
    if (!v3) {
      ACBaseAudioSpan::set((uint64_t *)this + 3, (const AudioBufferList *)(*((void *)this + 2) + 48), *((void *)this + 29), *(_DWORD *)this, (AudioStreamPacketDescription *)*((unsigned int *)this + 3));
    }
    ACBaseAudioSpan::append(v4, v6, v10, *((_DWORD *)this + 1));
    ACBaseAudioSpan::advanceConsume((unint64_t)v6, v10, *((_DWORD *)this + 1));
  }
  return v4;
}

uint64_t caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterChain::ConvertBuffer(std::span<unsigned char const,18446744073709551615ul>,void *,unsigned int &)::$_0>(void **a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char **)*a1;
  int v3 = (unsigned char *)**a1;
  int v4 = *v3;
  *int v3 = 1;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1852139886;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    unsigned int v9 = (uint64_t *)v2[1];
    unsigned int v8 = (unsigned int *)v2[2];
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    *(void *)(v7 + 16) = v11;
    *(_DWORD *)(v7 + 12) = v10;
    uint64_t v6 = *v8;
    uint64_t v5 = 0x100000000;
  }
  return v5 | v6;
}

uint64_t acv2::CBRConverter::ProduceOutput(acv2::AudioConverterBase **this, ACAudioSpan *a2)
{
  acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)&v14, this[1], (uint64_t)this, *((_DWORD *)a2 + 1));
  int v4 = v16;
  if (!v16)
  {
    uint64_t v7 = v14;
    unsigned int v8 = *((_DWORD *)a2 + 1);
    if (v8 >= *v14) {
      uint64_t v9 = *v14;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v9)
    {
      (*((void (**)(acv2::AudioConverterBase **, uint64_t, unsigned int *, char *))*this + 20))(this, v9, v14 + 4, (char *)a2 + 16);
      int v10 = *((_DWORD *)this + 18);
      *(_DWORD *)a2 = v9;
      *((_DWORD *)a2 + 2) = ACBaseAudioSpan::sizeOfFirstPackets(a2, v9, v10);
      uint64_t v12 = this[19];
      if (v12) {
        acv2::AudioConverterBase::writeCapture(v12, a2, v11);
      }
      int v4 = acv2::AudioConverterChain::ConsumedInput(this[1], *v7, *(uint64_t *)v15, v9);
      if (v4) {
        goto LABEL_2;
      }
      unsigned int v6 = 0;
      LOBYTE(v4) = 1;
    }
    else
    {
      LOBYTE(v4) = 0;
      unsigned int v6 = 0;
    }
    uint64_t v5 = 0x100000000;
    return v5 | v6 | v4;
  }
LABEL_2:
  uint64_t v5 = 0;
  unsigned int v6 = v4 & 0xFFFFFF00;
  return v5 | v6 | v4;
}

uint64_t acv2::AudioConverterChain::ConsumedInput(void *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (a3 || a2 <= a4)
  {
    uint64_t v6 = 0;
    if (a3 && a4)
    {
      int v8 = *(_DWORD *)(a3 + 24);
      unint64_t v7 = a3 + 24;
      if (v8) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = v7 + 104;
      }
      ACBaseAudioSpan::advanceConsume(v9, a4, *(_DWORD *)(v7 - 20));
      return 0;
    }
  }
  else
  {
    acv2::AudioConverterChain::description((acv2::AudioConverterChain *)__s, a1);
    if (v18 < 0)
    {
      size_t v5 = strlen(*(const char **)__s);
      operator delete(*(void **)__s);
    }
    else
    {
      size_t v5 = strlen(__s);
    }
    uint64_t v6 = 2003329396;
    uint64_t v10 = _os_log_pack_size() + 88;
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v10 + 1, 17);
    if (message)
    {
      uint64_t v12 = (caulk::concurrent::message *)message;
      int v13 = (char *)(message + v10);
      uint64_t v14 = _os_log_pack_fill();
      acv2::AudioConverterChain::description((acv2::AudioConverterChain *)__s, a1);
      if (v18 >= 0) {
        uint64_t v15 = __s;
      }
      else {
        uint64_t v15 = *(char **)__s;
      }
      stpcpy(v13, v15);
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v13;
      if (v18 < 0) {
        operator delete(*(void **)__s);
      }
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v12);
    }
  }
  return v6;
}

void sub_18FEC90A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ACBaseAudioSpan::advanceConsume(unint64_t this, unsigned int a2, int a3)
{
  if (a2)
  {
    unint64_t v4 = this;
    this = ACBaseAudioSpan::sizeOfFirstPackets((ACBaseAudioSpan *)this, a2, a3);
    size_t v5 = *(unsigned int **)(v4 + 16);
    uint64_t v6 = 16 * *v5;
    if (v6)
    {
      unint64_t v7 = v5 + 4;
      do
      {
        *v7 += this;
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    int v8 = *(_DWORD *)v4;
    uint64_t v9 = *(_DWORD *)v4 - a2;
    *(_DWORD *)unint64_t v4 = v9;
    *(_DWORD *)(v4 + 8) -= this;
    uint64_t v10 = *(void *)(v4 + 32);
    if (v10)
    {
      uint64_t v11 = (void *)(v10 + 16 * a2);
      *(void *)(v4 + 32) = v11;
      if (v8 != a2)
      {
        do
        {
          *v11 -= this;
          v11 += 2;
          --v9;
        }
        while (v9);
      }
    }
  }
  return this;
}

unint64_t ACBaseAudioSpan::sizeOfFirstPackets(ACBaseAudioSpan *this, unsigned int a2, int a3)
{
  if (!a2) {
    return 0;
  }
  if (a3) {
    return a3 * a2;
  }
  uint64_t v4 = *((void *)this + 4);
  unsigned int v5 = *(_DWORD *)this;
  if (!v4)
  {
    if (v5 == a2) {
      return *((unsigned int *)this + 2);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing packet descriptions");
LABEL_14:
    int v8 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
LABEL_15:
    __cxa_throw(exception, v7, v8);
  }
  if (v5 < a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid packet count");
    goto LABEL_14;
  }
  unint64_t result = *(void *)(v4 + 16 * (a2 - 1)) + *(unsigned int *)(v4 + 16 * (a2 - 1) + 12);
  if (HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
    int v8 = (void (*)(void *))MEMORY[0x1E4FBA1E0];
    goto LABEL_15;
  }
  return result;
}

void sub_18FEC9258(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t acv2::BlockCopyConverter::ProduceOutput(acv2::BlockCopyConverter *this, ACAudioSpan *a2)
{
  if (!*((_DWORD *)this + 8)) {
    std::terminate();
  }
  acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)&v10, *((acv2::AudioConverterBase **)this + 1), (uint64_t)this, *((_DWORD *)a2 + 1));
  int v4 = v12;
  if (v12
    || ((unsigned int v5 = (unsigned int *)v10, *((_DWORD *)a2 + 1) >= *(_DWORD *)v10)
      ? (unsigned int v6 = *(_DWORD *)v10)
      : (unsigned int v6 = *((_DWORD *)a2 + 1)),
        ACBaseAudioSpan::append((unsigned int *)a2, v10, v6, *((_DWORD *)this + 18)),
        (int v4 = acv2::AudioConverterChain::ConsumedInput(*((void **)this + 1), *v5, *(uint64_t *)v11, v6)) != 0))
  {
    uint64_t v7 = 0;
    unsigned int v8 = v4 & 0xFFFFFF00;
  }
  else
  {
    unsigned int v8 = 0;
    LOBYTE(v4) = v6 != 0;
    uint64_t v7 = 0x100000000;
  }
  return v7 | v8 | v4;
}

unsigned int *ACBaseAudioSpan::append(unsigned int *this, const ACBaseAudioSpan *a2, unsigned int a3, int a4)
{
  unsigned int v6 = this;
  uint64_t v7 = *((void *)this + 4);
  if (v7 && (uint64_t v8 = *((void *)a2 + 4)) != 0)
  {
    uint64_t v9 = *((void *)this + 2);
    if (*(_DWORD *)v9 != 1) {
      std::terminate();
    }
    if (a3)
    {
      uint64_t v10 = *(void *)(*((void *)a2 + 2) + 16);
      uint64_t v11 = *(void *)(v9 + 16);
      uint64_t v12 = this[2];
      int v13 = (char *)(v11 + v12);
      uint64_t v14 = v7 + 16 * *this;
      uint64_t v15 = (unsigned int *)(v8 + 12);
      unsigned int v16 = a3;
      do
      {
        size_t v17 = *v15;
        *(void *)uint64_t v14 = v12;
        *(_DWORD *)(v14 + 8) = *(v15 - 1);
        *(_DWORD *)(v14 + 12) = v17;
        this = (unsigned int *)memmove(v13, (const void *)(v10 + *(void *)(v15 - 3)), v17);
        LODWORD(v12) = v6[2] + v17;
        v6[2] = v12;
        v13 += v17;
        v15 += 4;
        v14 += 16;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    this = (unsigned int *)ACBaseAudioSpan::sizeOfFirstPackets(a2, a3, a4);
    unsigned int v18 = this;
    uint64_t v19 = **((unsigned int **)v6 + 2);
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 16 * v19;
      do
      {
        BOOL v22 = *(unsigned int **)(*((void *)a2 + 2) + v20 + 16);
        this = (unsigned int *)(*(void *)(*((void *)v6 + 2) + v20 + 16) + v6[2]);
        if (v22 != this) {
          this = (unsigned int *)memmove(this, v22, v18);
        }
        v20 += 16;
      }
      while (v21 != v20);
    }
    v6[2] += v18;
  }
  *v6 += a3;
  return this;
}

void acv2::Reinterleaver::ConvertBufferList(uint64_t a1, acv2::Reinterleaver *this, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 80);
  if (!v8) {
    goto LABEL_4;
  }
  if ((*(unsigned char *)(a1 + 68) & 0x20) != 0)
  {
    unsigned int v9 = 1;
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(a1 + 84);
    if (!v9)
    {
LABEL_4:
      uint64_t v10 = 0;
      goto LABEL_7;
    }
  }
  uint64_t v10 = (unsigned __int8 *)(v8 / v9);
LABEL_7:
  uint64_t v11 = *(void *)(*(void *)a3 + 16);
  uint64_t v12 = *(__int32 **)(*(void *)a4 + 16);
  if (*(unsigned char *)(a1 + 272))
  {
    int v13 = *(_DWORD *)(a1 + 268);
    switch(v13)
    {
      case 3:
        uint64_t v24 = *(int **)(*(void *)a3 + 16);
        int v25 = *(_DWORD **)(*(void *)a4 + 16);
        DownmixStereoInterleavedInt32ToMono_Portable(v24, v25, this);
        break;
      case 2:
        uint64_t v26 = *(__int16 **)(*(void *)a3 + 16);
        uint64_t v27 = *(int16x8_t **)(*(void *)a4 + 16);
        DownmixStereoInterleavedInt16ToMono_ARM(v26, v27, this);
        break;
      case 1:
        if (this >= 2)
        {
          unsigned int v14 = this >> 1;
          float32x2_t v15 = (float32x2_t)vdup_n_s32(0x3F3504F3u);
          do
          {
            v16.i32[0] = *(_DWORD *)v11;
            uint64_t v17 = v11 + 16;
            v16.i32[1] = *(_DWORD *)(v11 + 12);
            *(float32x2_t *)uint64_t v12 = vmul_f32(vadd_f32(*(float32x2_t *)(v11 + 4), v16), v15);
            v12 += 2;
            v11 += 16;
            --v14;
          }
          while (v14);
          uint64_t v11 = v17;
        }
        if (this) {
          *(float *)uint64_t v12 = (float)(*(float *)v11 + *(float *)(v11 + 4)) * 0.70711;
        }
        break;
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 276))
    {
      case 0:
        if ((*(unsigned char *)(a1 + 68) & 0x20) != 0)
        {
          int v19 = *(_DWORD *)(a1 + 40);
          int v18 = 1;
        }
        else
        {
          int v18 = *(_DWORD *)(a1 + 84);
          int v19 = *(_DWORD *)(a1 + 40);
          if (v18 == 2)
          {
            uint64_t v20 = *(int **)(a1 + 192);
            int v21 = *v20;
            int v22 = v20[1];
            if (v21 != -1 && v21 == v22)
            {
              if (v10 == 4)
              {
                UpmixMonoToStereoInterleaved32_ARM((int32x4_t *)(v11 + 4 * v21), v12, this);
                return;
              }
              if (v10 == 2)
              {
                UpmixMonoToStereoInterleaved16_ARM((int16x8_t *)(v11 + 2 * v21), (__int16 *)v12, this);
                return;
              }
            }
            int v18 = 2;
          }
          else if (v18 < 1)
          {
            return;
          }
        }
        int v56 = 0;
        do
        {
          LODWORD(v57) = v56 + 1;
          int v58 = v56;
          uint64_t v59 = *(void *)(a1 + 192);
          int v60 = *(_DWORD *)(v59 + 4 * v56);
          if (v60 == -1)
          {
            if ((int)v57 < v18)
            {
              uint64_t v57 = (int)v57;
              while (*(_DWORD *)(v59 + 4 * v57) == -1)
              {
                if (v18 == ++v57)
                {
                  LODWORD(v57) = v18;
                  break;
                }
              }
            }
            acv2::Reinterleaver::Zero((uint64_t)this, (uint64_t)v12 + v58 * (uint64_t)(int)v10, (unsigned __int8 *)((v57 - v58) * v10), v8);
          }
          else
          {
            if ((int)v57 < v18)
            {
              uint64_t v57 = (int)v57;
              while (*(_DWORD *)(v59 + 4 * v57) == *(_DWORD *)(v59 + 4 * v57 - 4) + 1)
              {
                if (v18 == ++v57)
                {
                  LODWORD(v57) = v18;
                  break;
                }
              }
            }
            acv2::Reinterleaver::Blit((uint64_t)this, v11 + v60 * (uint64_t)(int)v10, (const unsigned __int8 *)v12 + v58 * (uint64_t)(int)v10, (unsigned __int8 *)((v57 - v58) * v10), v19, v8);
          }
          int v56 = v57;
        }
        while ((int)v57 < v18);
        break;
      case 1:
        if ((*(unsigned char *)(a1 + 68) & 0x20) != 0) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = *(unsigned int *)(a1 + 84);
        }
        if (v10 <= 8 && ((1 << (char)v10) & 0x114) != 0)
        {
          if ((int)v28 >= 1)
          {
            uint64_t v31 = 0;
            do
            {
              uint64_t v32 = *(unsigned int *)(*(void *)(a1 + 192) + 4 * v31);
              if (v32 == -1)
              {
                uint64_t v33 = &acv2::Reinterleaver::sTempZeroBuffer;
                if ((v10 * this) > 0x2000) {
                  goto LABEL_89;
                }
              }
              else
              {
                uint64_t v33 = (uint64_t *)(*(void *)a3 + 16 * v32 + 16);
              }
              *(void *)(*(void *)(a1 + 168) + 8 * v31++) = *v33;
            }
            while (v28 != v31);
          }
          switch(v10)
          {
            case 8:
              unsigned int v61 = *(const void ***)(a1 + 168);
              TInterleaver_SIMD<PCMFloat64_SIMD>::Interleave(v28, v61, (char *)v12, (int)this);
              break;
            case 4:
              uint64_t v62 = *(float32x2_t ***)(a1 + 168);
              if (v28 == 2)
              {
                uint64_t v64 = *v62;
                unint64_t v63 = v62[1];
                if (this >= 2)
                {
                  unsigned int v65 = this >> 1;
                  do
                  {
                    float32x2_t v66 = *v64++;
                    v72.val[0] = v66;
                    float32x2_t v67 = *v63++;
                    v72.val[1] = v67;
                    vst2_f32((float *)v12, v72);
                    v12 += 4;
                    --v65;
                  }
                  while (v65);
                }
                if (this)
                {
                  __int32 *v12 = v64->i32[0];
                  v12[1] = v63->i32[0];
                }
              }
              else
              {
                TInterleaver_SIMD<PCMSInt32_SIMD>::Interleave(v28, (const void **)v62, (char *)v12, (int)this);
              }
              break;
            case 2:
              uint64_t v34 = *(const void ***)(a1 + 168);
              TInterleaver_SIMD<PCMSInt16_SIMD>::Interleave(v28, v34, (char *)v12, (int)this);
              break;
          }
        }
        else
        {
LABEL_89:
          if ((int)v28 >= 1)
          {
            int v51 = 0;
            do
            {
              LODWORD(v52) = v51 + 1;
              int v53 = v51;
              uint64_t v54 = *(void *)(a1 + 192);
              uint64_t v55 = *(unsigned int *)(v54 + 4 * v51);
              if (v55 == -1)
              {
                if ((int)v52 < (int)v28)
                {
                  uint64_t v52 = (int)v52;
                  while (*(_DWORD *)(v54 + 4 * v52) == -1)
                  {
                    if (v28 == ++v52)
                    {
                      LODWORD(v52) = v28;
                      break;
                    }
                  }
                }
                acv2::Reinterleaver::Zero((uint64_t)this, (uint64_t)v12 + v53 * (uint64_t)(int)v10, (unsigned __int8 *)((v52 - v53) * v10), v8);
              }
              else
              {
                acv2::Reinterleaver::Blit((uint64_t)this, *(void *)(*(void *)a3 + 16 * v55 + 16), (const unsigned __int8 *)v12 + v53 * (uint64_t)(int)v10, v10, (int)v10, v8);
              }
              int v51 = v52;
            }
            while ((int)v52 < (int)v28);
          }
        }
        return;
      case 2:
        if ((*(unsigned char *)(a1 + 68) & 0x20) != 0) {
          int v29 = *(_DWORD *)(a1 + 84);
        }
        else {
          int v29 = 1;
        }
        if ((*(unsigned char *)(a1 + 28) & 0x20) != 0) {
          unint64_t v35 = 1;
        }
        else {
          unint64_t v35 = *(unsigned int *)(a1 + 44);
        }
        int v42 = *(_DWORD *)(a1 + 40);
        size_t v43 = (v10 * this);
        if (v10 <= 8 && ((1 << (char)v10) & 0x114) != 0 && *(unsigned char *)(a1 + 265))
        {
          if ((int)v35 >= 1)
          {
            uint64_t v44 = 0;
            do
            {
              uint64_t v45 = *(unsigned int *)(*(void *)(a1 + 240) + 4 * v44);
              if (v45 == -1)
              {
                uint64_t v46 = &acv2::Reinterleaver::sTempScratchBuffer;
                if (v43 > 0x2000) {
                  goto LABEL_82;
                }
              }
              else
              {
                uint64_t v46 = (uint64_t *)(*(void *)a4 + 16 * v45 + 16);
              }
              *(void *)(*(void *)(a1 + 168) + 8 * v44++) = *v46;
            }
            while (v35 != v44);
          }
          switch(v10)
          {
            case 8:
              TDeinterleaver_SIMD<PCMFloat64_SIMD>::Deinterleave(v35, (char *)v11, *(void ***)(a1 + 168), (int)this);
              break;
            case 4:
              uint64_t v68 = *(int ***)(a1 + 168);
              if (v35 == 2) {
                StereoDeinterleave32_Portable((int *)v11, *v68, v68[1], this);
              }
              else {
                TDeinterleaver_SIMD<PCMSInt32_SIMD>::Deinterleave(v35, (char *)v11, (void **)v68, (int)this);
              }
              break;
            case 2:
              TDeinterleaver_SIMD<PCMSInt16_SIMD>::Deinterleave(v35, (char *)v11, *(void ***)(a1 + 168), (int)this);
              break;
          }
          if (v29 >= 1)
          {
            uint64_t v69 = 0;
            uint64_t v70 = 16;
            do
            {
              if (*(_DWORD *)(*(void *)(a1 + 192) + v69) == -1) {
                bzero(*(void **)(*(void *)a4 + v70), v43);
              }
              v69 += 4;
              v70 += 16;
            }
            while (4 * v29 != v69);
          }
        }
        else
        {
LABEL_82:
          if (v29 >= 1)
          {
            uint64_t v47 = 0;
            uint64_t v48 = 4 * v29;
            uint64_t v49 = 16;
            do
            {
              int v50 = *(_DWORD *)(*(void *)(a1 + 192) + v47);
              if (v50 == -1) {
                bzero(*(void **)(*(void *)a4 + v49), (v10 * this));
              }
              else {
                acv2::Reinterleaver::Blit((uint64_t)this, v11 + v50 * (uint64_t)(int)v10, *(const unsigned __int8 **)(*(void *)a4 + v49), v10, v42, (int)v10);
              }
              v47 += 4;
              v49 += 16;
            }
            while (v48 != v47);
          }
        }
        return;
      case 3:
        if ((*(unsigned char *)(a1 + 68) & 0x20) != 0)
        {
          int v30 = *(_DWORD *)(a1 + 84);
          if (v30 < 1) {
            return;
          }
        }
        else
        {
          int v30 = 1;
        }
        uint64_t v36 = 0;
        size_t v37 = (v10 * this);
        uint64_t v38 = 16;
        uint64_t v39 = v30;
        do
        {
          uint64_t v40 = *(void **)(*(void *)a4 + v38);
          uint64_t v41 = *(unsigned int *)(*(void *)(a1 + 192) + 4 * v36);
          if (v41 == -1) {
            bzero(v40, v37);
          }
          else {
            memcpy(v40, *(const void **)(*(void *)a3 + 16 * v41 + 16), v37);
          }
          ++v36;
          v38 += 16;
        }
        while (v39 != v36);
        return;
      default:
        return;
    }
  }
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 88))(a2, ***a1, *(void *)(*a1)[1], *(void *)(*a1)[2]);
  if (isRenderStatusConcerning(v3))
  {
    uint64_t v4 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2) ? 15 : 11;
    uint64_t v5 = _os_log_pack_size() + 88;
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v4, 16);
    if (message)
    {
      uint64_t v7 = (caulk::concurrent::message *)message;
      unsigned int v8 = (char *)(message + v5);
      uint64_t v9 = _os_log_pack_fill();
      if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2)) {
        uint64_t v10 = "out-of-process";
      }
      else {
        uint64_t v10 = "in-process";
      }
      stpcpy(v8, v10);
      *(_DWORD *)uint64_t v9 = 134218498;
      *(void *)(v9 + 4) = a2;
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v8;
      *(_WORD *)(v9 + 22) = 1024;
      *(_DWORD *)(v9 + 24) = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v7);
    }
  }
  return v3;
}

uint64_t acv2::AudioConverterV2::convertComplexBuffer(acv2::AudioConverterV2 *this, int a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  int v81 = a2;
  unint64_t v80 = a3;
  if (*((unsigned char *)this + 12))
  {
    unint64_t v78 = this;
    unint64_t v79 = &v81;
    goto LABEL_4;
  }
  int v7 = *((unsigned __int8 *)this + 12);
  unint64_t v78 = this;
  unint64_t v79 = &v81;
  if (v7 || !*((unsigned char *)this + 13))
  {
LABEL_4:
    v71[0] = 0;
    char v77 = 0;
    if (a3) {
      goto LABEL_5;
    }
LABEL_55:
    uint64_t v35 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v35 + 88, 16);
    if (message) {
      goto LABEL_65;
    }
    goto LABEL_61;
  }
  uint64_t v33 = *((unsigned int *)this + 4);
  uint64_t v34 = (unsigned int *)*((unsigned int *)this + 5);
  v61[1] = 2740;
  uint64_t v62 = v33;
  unint64_t v63 = v34;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  kdebug_trace();
  v71[0] = 1;
  int v72 = 2740;
  uint64_t v73 = v33;
  uint64_t v74 = v34;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  LOBYTE(v61[0]) = 0;
  char v77 = 1;
  AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v61);
  if (!a3) {
    goto LABEL_55;
  }
LABEL_5:
  if (!a4)
  {
    uint64_t v49 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v49 + 88, 16);
    if (message) {
      goto LABEL_65;
    }
    goto LABEL_61;
  }
  uint64_t v8 = *((void *)this + 4);
  if (*(unsigned char *)(v8 + 82))
  {
    uint64_t v50 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v50 + 88, 16);
    if (message)
    {
LABEL_65:
      int v51 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v51);
    }
LABEL_61:
    uint64_t v31 = 4294967246;
    goto LABEL_50;
  }
  if ((*(unsigned char *)(v8 + 12) & 0x20) == 0)
  {
    if (a3->mNumberBuffers == 1)
    {
      int v9 = 1;
      goto LABEL_11;
    }
LABEL_66:
    uint64_t v52 = _os_log_pack_size();
    uint64_t v53 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v52 + 88, 16);
    if (v53)
    {
      uint64_t v54 = (caulk::concurrent::message *)v53;
      uint64_t v55 = _os_log_pack_fill();
      uint64_t v56 = *((void *)this + 4);
      if ((*(unsigned char *)(v56 + 12) & 0x20) != 0) {
        int v57 = *(_DWORD *)(v56 + 28);
      }
      else {
        int v57 = 1;
      }
      UInt32 mNumberBuffers = a3->mNumberBuffers;
      *(_DWORD *)uint64_t v55 = 67109376;
      *(_DWORD *)(v55 + 4) = v57;
      *(_WORD *)(v55 + 8) = 1024;
      *(_DWORD *)(v55 + 10) = mNumberBuffers;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v54);
    }
    goto LABEL_61;
  }
  int v9 = *(_DWORD *)(v8 + 28);
  if (v9 != a3->mNumberBuffers) {
    goto LABEL_66;
  }
LABEL_11:
  if ((*(unsigned char *)(v8 + 52) & 0x20) != 0)
  {
    UInt32 v10 = *(_DWORD *)(v8 + 68);
    if (v10 != a4->mNumberBuffers)
    {
LABEL_13:
      uint64_t v11 = _os_log_pack_size();
      uint64_t v12 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v11 + 88, 16);
      if (v12)
      {
        int v13 = (caulk::concurrent::message *)v12;
        uint64_t v14 = _os_log_pack_fill();
        uint64_t v15 = *((void *)this + 4);
        if ((*(unsigned char *)(v15 + 52) & 0x20) != 0) {
          int v16 = *(_DWORD *)(v15 + 68);
        }
        else {
          int v16 = 1;
        }
        UInt32 v59 = a4->mNumberBuffers;
        *(_DWORD *)uint64_t v14 = 67109376;
        *(_DWORD *)(v14 + 4) = v16;
        *(_WORD *)(v14 + 8) = 1024;
        *(_DWORD *)(v14 + 10) = v59;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v13);
      }
      goto LABEL_61;
    }
  }
  else
  {
    UInt32 v10 = a4->mNumberBuffers;
    if (a4->mNumberBuffers != 1) {
      goto LABEL_13;
    }
  }
  if (v9)
  {
    uint64_t v17 = 0;
    unsigned int v18 = *(_DWORD *)(v8 + 24) * v81;
    p_mData = &a3->mBuffers[0].mData;
    while (*p_mData && *((_DWORD *)p_mData - 1) >= v18)
    {
      ++v17;
      p_mData += 2;
      if (v9 == v17) {
        goto LABEL_22;
      }
    }
    uint64_t v37 = _os_log_pack_size();
    uint64_t v38 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v37 + 88, 16);
    if (v38)
    {
      uint64_t v39 = (caulk::concurrent::message *)v38;
      uint64_t v40 = _os_log_pack_fill();
      uint64_t v41 = *p_mData;
      UInt32 mDataByteSize = a3->mBuffers[v17].mDataByteSize;
      *(_DWORD *)uint64_t v40 = 67109888;
      *(_DWORD *)(v40 + 4) = v17;
      *(_WORD *)(v40 + 8) = 2048;
      *(void *)(v40 + 10) = v41;
      *(_WORD *)(v40 + 18) = 1024;
      *(_DWORD *)(v40 + 20) = mDataByteSize;
      *(_WORD *)(v40 + 24) = 1024;
      *(_DWORD *)(v40 + 26) = v18;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v39);
    }
    goto LABEL_61;
  }
LABEL_22:
  if (v10)
  {
    uint64_t v20 = 0;
    unsigned int v21 = *(_DWORD *)(v8 + 64) * v81;
    int v22 = &a4->mBuffers[0].mData;
    while (*v22 && *((_DWORD *)v22 - 1) >= v21)
    {
      ++v20;
      v22 += 2;
      if (v10 == v20) {
        goto LABEL_27;
      }
    }
    uint64_t v43 = _os_log_pack_size();
    uint64_t v44 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v43 + 88, 16);
    if (v44)
    {
      uint64_t v45 = (caulk::concurrent::message *)v44;
      uint64_t v46 = _os_log_pack_fill();
      uint64_t v47 = *v22;
      UInt32 v48 = a4->mBuffers[v20].mDataByteSize;
      *(_DWORD *)uint64_t v46 = 67109888;
      *(_DWORD *)(v46 + 4) = v20;
      *(_WORD *)(v46 + 8) = 2048;
      *(void *)(v46 + 10) = v47;
      *(_WORD *)(v46 + 18) = 1024;
      *(_DWORD *)(v46 + 20) = v48;
      *(_WORD *)(v46 + 24) = 1024;
      *(_DWORD *)(v46 + 26) = v21;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v45);
    }
    goto LABEL_61;
  }
LABEL_27:
  CrashIfClientProvidedBogusAudioBufferList();
  CrashIfClientProvidedBogusAudioBufferList();
  if (*(_DWORD *)(*((void *)this + 4) + 48) == 1885564203
    && a4->mBuffers[a4->mNumberBuffers].mNumberChannels == 1094863915)
  {
    uint64_t v23 = (AudioStreamPacketDescription *)(a4[-2].mBuffers[0].mDataByteSize != 0);
  }
  else
  {
    uint64_t v23 = 0;
  }
  char v70 = 0;
  v69[0] = &v70;
  v69[1] = &v80;
  v69[2] = &v81;
  ACBaseAudioSpan::ACBaseAudioSpan((ACBaseAudioSpan *)v61, v81, a4, v23);
  uint64_t v24 = *((void *)this + 4);
  *(void *)&long long v60 = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_1>;
  *((void *)&v60 + 1) = v69;
  unint64_t v25 = acv2::AudioConverterChain::ProduceOutput(v24, &v60, (ACBaseAudioSpan *)v61);
  if ((v25 & 0xFF00000000) != 0) {
    unsigned int v26 = 0;
  }
  else {
    unsigned int v26 = v25;
  }
  uint64_t v27 = *v63;
  if (v27)
  {
    int v28 = v62;
    int v29 = v63 + 3;
    do
    {
      *int v29 = v28;
      v29 += 4;
      --v27;
    }
    while (v27);
  }
  if (v61[0] == v81) {
    unsigned int v30 = 0;
  }
  else {
    unsigned int v30 = 1768846202;
  }
  if (v26) {
    uint64_t v31 = v26;
  }
  else {
    uint64_t v31 = v30;
  }
  if (*((unsigned char *)this + 28) && a4->mNumberBuffers && a4->mBuffers[0].mDataByteSize)
  {
    *((unsigned char *)this + 28) = 0;
    kdebug_trace();
  }
  if (v68 && v66)
  {
    float32x2_t v67 = v66;
    std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v66);
  }
LABEL_50:
  if (v77) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v71);
  }
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  return v31;
}

void sub_18FECA490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (*(unsigned char *)(v24 - 104)) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)(v24 - 144));
  }
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_1>(unsigned char ***a1, ACBaseAudioSpan *this)
{
  uint64_t v2 = *a1;
  if (***a1)
  {
    *(_DWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    ACBaseAudioSpan::resetMetadataEvents((uint64_t *)this);
    return 0x100000000;
  }
  else
  {
    memcpy(*((void **)this + 2), *(const void **)v2[1], 16 * (**(_DWORD **)v2[1] - 1) + 24);
    uint64_t v4 = *(unsigned int *)v2[2];
    *uint64_t *v2 = 1;
    return v4 | 0x100000000;
  }
}

uint64_t acv2::PCMConverter2::ConvertBufferList(uint64_t result, int a2, void *a3, void *a4)
{
  uint64_t v6 = result;
  if ((*(unsigned char *)(result + 28) & 0x20) != 0) {
    int v7 = 1;
  }
  else {
    int v7 = *(_DWORD *)(result + 44);
  }
  uint64_t v8 = *(unsigned int *)*a3;
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (v7 * a2);
    uint64_t v11 = 16 * v8;
    do
    {
      unint64_t result = (*(uint64_t (**)(void, void, uint64_t))(v6 + 168))(*(void *)(*a3 + v9 + 16), *(void *)(*a4 + v9 + 16), v10);
      v9 += 16;
    }
    while (v11 != v9);
  }
  return result;
}

uint64_t caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(unsigned int **)(a2 + 16);
  uint64_t v5 = *v4;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 16 * v5;
    do
    {
      size_t v8 = *(unsigned int *)(a2 + 12);
      uint64_t v9 = *(void *)(a2 + 16) + v6;
      *(_DWORD *)(v9 + 12) = v8;
      bzero(*(void **)(v9 + 16), v8);
      v6 += 16;
    }
    while (v7 != v6);
    uint64_t v4 = *(unsigned int **)(a2 + 16);
  }
  unsigned int v15 = *(_DWORD *)(a2 + 4);
  uint64_t v14 = *(void *)(a2 + 32);
  if (v14) {
    uint64_t v10 = &v14;
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v11 = (*(uint64_t (**)(void, unsigned int *, unsigned int *, uint64_t *, void))v3)(*(void *)(v3 + 16), &v15, v4, v10, *(void *)(v3 + 8));
  if (v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v14;
    uint64_t v12 = 0x100000000;
    unsigned int v11 = v15;
  }
  return v12 | v11;
}

int16x8_t *NativeInt16ToFloat32_ARM(int16x8_t *a1, float32x4_t *a2, unsigned int a3)
{
  return NativeInt16ToFloat32Scaled_ARM(a1, a2, a3, 0.000030518);
}

int16x8_t *NativeInt16ToFloat32Scaled_ARM(int16x8_t *result, float32x4_t *a2, unsigned int a3, float a4)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v4 = (_BYTE)a2 + 4;
    do
    {
      int v5 = result->i16[0];
      unint64_t result = (int16x8_t *)((char *)result + 2);
      a2->f32[0] = (float)v5 * a4;
      a2 = (float32x4_t *)((char *)a2 + 4);
      unsigned int v6 = a3 - 1;
      if ((v4 & 0xF) == 0) {
        break;
      }
      v4 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v6 = a3;
  }
  if (v6 >= 8)
  {
    unsigned int v7 = v6 >> 3;
    do
    {
      int16x8_t v8 = *result++;
      *a2 = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v8.i8)), a4);
      a2[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v8)), a4);
      a2 += 2;
      --v7;
    }
    while (v7);
  }
  for (int i = v6 & 7; i; --i)
  {
    int v10 = result->i16[0];
    unint64_t result = (int16x8_t *)((char *)result + 2);
    a2->f32[0] = (float)v10 * a4;
    a2 = (float32x4_t *)((char *)a2 + 4);
  }
  return result;
}

int *StereoDeinterleave32_Portable(int *result, int *a2, _DWORD *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    unsigned int v4 = a4 >> 1;
    do
    {
      int v5 = *result;
      int v6 = result[1];
      int v7 = result[2];
      int v8 = result[3];
      result += 4;
      *a2 = v5;
      *a3 = v6;
      a2[1] = v7;
      a3[1] = v8;
      a2 += 2;
      a3 += 2;
      --v4;
    }
    while (v4);
  }
  if (a4)
  {
    *a2 = *result;
    *a3 = result[1];
  }
  return result;
}

unint64_t TDeinterleaver_SIMD<PCMSInt32_SIMD>::Deinterleave(unint64_t result, char *a2, void **a3, int a4)
{
  if (!result) {
    return result;
  }
  if (result == 1)
  {
    int v5 = *a3;
    return (unint64_t)memcpy(v5, a2, 4 * a4);
  }
  uint64_t v6 = 0;
  unsigned int v7 = a4 + 3;
  if (a4 >= 0) {
    int v8 = a4;
  }
  else {
    int v8 = a4 + 3;
  }
  int v9 = v8 >> 2;
  uint64_t v10 = (int)result;
  uint64_t v11 = 2 * (int)result;
  uint64_t v12 = 4 * (int)result;
  while ((int)result >= 8)
  {
    int v13 = (int32x4_t *)&a2[4 * v6];
    uint64_t v14 = &a3[v6];
    unsigned int v15 = *v14;
    int v16 = *(void **)((char *)a3 + ((8 * v6) | 8));
    unsigned int v18 = v14[2];
    uint64_t v17 = v14[3];
    int v19 = v14[4];
    uint64_t v20 = v14[5];
    unsigned int v21 = v14[6];
    int v22 = v14[7];
    if (v7 >= 7)
    {
      uint64_t v23 = 0;
      int v24 = v9;
      do
      {
        unint64_t v25 = v13;
        int32x4_t v26 = *v13;
        int32x4_t v27 = v13[1];
        int v28 = (int32x4_t *)((char *)v13 + v12);
        int32x4_t v29 = *v28;
        int32x4_t v30 = v28[1];
        uint64_t v31 = &v28->i8[v12];
        long long v32 = *(_OWORD *)v31;
        long long v33 = *((_OWORD *)v31 + 1);
        uint64_t v34 = &v31[v12];
        *(void *)&long long v35 = vzip1q_s32(v26, v29).u64[0];
        DWORD2(v35) = v32;
        HIDWORD(v35) = *(_OWORD *)v34;
        *(void *)&long long v36 = vtrn2q_s32(v26, v29).u64[0];
        DWORD2(v36) = DWORD1(v32);
        HIDWORD(v36) = HIDWORD(*(void *)v34);
        *(void *)&long long v37 = vzip2q_s32(v26, v29).u64[0];
        DWORD2(v37) = DWORD2(v32);
        HIDWORD(v37) = *((void *)v34 + 1);
        v26.i64[0] = vuzp2q_s32(vuzp2q_s32(v26, v29), v26).u64[0];
        v26.i32[2] = HIDWORD(v32);
        v26.i32[3] = HIDWORD(*(_OWORD *)v34);
        v29.i64[0] = vzip1q_s32(v27, v30).u64[0];
        v29.i32[2] = v33;
        v29.i32[3] = *((_OWORD *)v34 + 1);
        *(void *)&long long v32 = vtrn2q_s32(v27, v30).u64[0];
        DWORD2(v32) = DWORD1(v33);
        HIDWORD(v32) = HIDWORD(*((void *)v34 + 2));
        *(void *)&long long v38 = vzip2q_s32(v27, v30).u64[0];
        DWORD2(v38) = DWORD2(v33);
        HIDWORD(v38) = *((void *)v34 + 3);
        v27.i64[0] = vuzp2q_s32(vuzp2q_s32(v27, v30), v27).u64[0];
        v27.i64[1] = __PAIR64__(HIDWORD(*((_OWORD *)v34 + 1)), HIDWORD(v33));
        *(_OWORD *)&v15[v23] = v35;
        *(_OWORD *)&v16[v23] = v36;
        *(_OWORD *)&v18[v23] = v37;
        *(int32x4_t *)&v17[v23] = v26;
        *(int32x4_t *)&v19[v23] = v29;
        *(_OWORD *)&v20[v23] = v32;
        *(_OWORD *)&v21[v23] = v38;
        *(int32x4_t *)&v22[v23] = v27;
        v23 += 4;
        int v13 = (int32x4_t *)&v34[v12];
        --v24;
      }
      while (v24);
      int v13 = &v25[(unint64_t)v11 / 2];
      unsigned int v15 = (_DWORD *)((char *)v15 + v23 * 4);
      int v16 = (_DWORD *)((char *)v16 + v23 * 4);
      unsigned int v18 = (_DWORD *)((char *)v18 + v23 * 4);
      uint64_t v17 = (_DWORD *)((char *)v17 + v23 * 4);
      int v19 = (_DWORD *)((char *)v19 + v23 * 4);
      uint64_t v20 = (_DWORD *)((char *)v20 + v23 * 4);
      unsigned int v21 = (_DWORD *)((char *)v21 + v23 * 4);
      int v22 = (_DWORD *)((char *)v22 + v23 * 4);
    }
    if ((a4 & 3) != 0)
    {
      uint64_t v39 = v13 + 1;
      int v40 = a4 & 3;
      do
      {
        int32x4_t v41 = v39[-1];
        int32x4_t v42 = *v39;
        *v15++ = v41.i32[0];
        *v16++ = v41.i32[1];
        *v18++ = v41.i32[2];
        *v17++ = v41.i32[3];
        *v19++ = v42.i32[0];
        *v20++ = v42.i32[1];
        *v21++ = v42.i32[2];
        *v22++ = v42.i32[3];
        uint64_t v39 = (int32x4_t *)((char *)v39 + v12);
        --v40;
      }
      while (v40);
    }
    int v43 = -8;
    uint64_t v44 = 8;
LABEL_34:
    v6 += v44;
    unint64_t result = (result + v43);
    if (!result) {
      return result;
    }
  }
  if ((int)result >= 4)
  {
    uint64_t v45 = (int32x4_t *)&a2[4 * v6];
    uint64_t v46 = &a3[v6];
    uint64_t v47 = *v46;
    UInt32 v48 = *(void **)((char *)a3 + ((8 * v6) | 8));
    uint64_t v50 = v46[2];
    uint64_t v49 = v46[3];
    if (v7 >= 7)
    {
      uint64_t v51 = 0;
      int v52 = v9;
      do
      {
        uint64_t v53 = v45;
        int32x4_t v54 = *v45;
        uint64_t v55 = (int32x4_t *)((char *)v45 + v12);
        int32x4_t v56 = *v55;
        int v57 = &v55->i8[v12];
        long long v58 = *(_OWORD *)v57;
        UInt32 v59 = &v57[v12];
        *(void *)&long long v60 = vzip1q_s32(v54, v56).u64[0];
        DWORD2(v60) = v58;
        HIDWORD(v60) = *(_OWORD *)v59;
        *(void *)&long long v61 = vtrn2q_s32(v54, v56).u64[0];
        DWORD2(v61) = DWORD1(v58);
        HIDWORD(v61) = HIDWORD(*(void *)v59);
        *(void *)&long long v62 = vzip2q_s32(v54, v56).u64[0];
        DWORD2(v62) = DWORD2(v58);
        HIDWORD(v62) = *((void *)v59 + 1);
        v54.i64[0] = vuzp2q_s32(vuzp2q_s32(v54, v56), v54).u64[0];
        v54.i32[2] = HIDWORD(v58);
        v54.i32[3] = HIDWORD(*(_OWORD *)v59);
        *(_OWORD *)&v47[v51] = v60;
        *(_OWORD *)&v48[v51] = v61;
        *(_OWORD *)&v50[v51] = v62;
        *(int32x4_t *)&v49[v51] = v54;
        v51 += 4;
        uint64_t v45 = (int32x4_t *)&v59[v12];
        --v52;
      }
      while (v52);
      uint64_t v45 = &v53[(unint64_t)v11 / 2];
      uint64_t v49 = (_DWORD *)((char *)v49 + v51 * 4);
      uint64_t v50 = (_DWORD *)((char *)v50 + v51 * 4);
      UInt32 v48 = (_DWORD *)((char *)v48 + v51 * 4);
      uint64_t v47 = (_DWORD *)((char *)v47 + v51 * 4);
    }
    int v63 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        int32x4_t v64 = *v45;
        *v47++ = *v45;
        *v48++ = v64.i32[1];
        *v50++ = v64.i32[2];
        *v49++ = v64.i32[3];
        uint64_t v45 = (int32x4_t *)((char *)v45 + v12);
        --v63;
      }
      while (v63);
    }
    int v43 = -4;
    uint64_t v44 = 4;
    goto LABEL_34;
  }
  if ((int)result >= 2)
  {
    uint64_t v65 = (int32x2_t *)&a2[4 * v6];
    float32x2_t v66 = a3[v6];
    float32x2_t v67 = *(void **)((char *)a3 + ((8 * v6) | 8));
    int v68 = v9;
    if (v7 >= 7)
    {
      do
      {
        uint64_t v69 = v65;
        int32x2_t v70 = *v65;
        unsigned int v71 = (int32x2_t *)((char *)v65 + v12);
        int32x2_t v72 = *v71;
        uint64_t v73 = (int32x2_t *)((char *)v71 + v12);
        int32x2_t v74 = *v73;
        uint64_t v75 = (unint64_t *)((char *)v73 + v12);
        *(int32x2_t *)&long long v76 = vzip1_s32(v70, v72);
        DWORD2(v76) = v74.i32[0];
        HIDWORD(v76) = *v75;
        *(int32x2_t *)&long long v77 = vzip2_s32(v70, v72);
        DWORD2(v77) = vdup_lane_s32(v74, 1).u32[0];
        HIDWORD(v77) = HIDWORD(*v75);
        *v66++ = v76;
        *v67++ = v77;
        uint64_t v65 = (int32x2_t *)((char *)v75 + v12);
        --v68;
      }
      while (v68);
      uint64_t v65 = &v69[v11];
    }
    int v78 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        int32x2_t v79 = *v65;
        *(_DWORD *)float32x2_t v66 = *v65;
        float32x2_t v66 = (_OWORD *)((char *)v66 + 4);
        *(_DWORD *)float32x2_t v67 = v79.i32[1];
        float32x2_t v67 = (_OWORD *)((char *)v67 + 4);
        uint64_t v65 = (int32x2_t *)((char *)v65 + v12);
        --v78;
      }
      while (v78);
    }
    int v43 = -2;
    uint64_t v44 = 2;
    goto LABEL_34;
  }
  if (a4)
  {
    unint64_t v80 = a3[v6];
    uint64_t v81 = 4 * v10;
    int v82 = &a2[4 * v6];
    do
    {
      *v80++ = *(_DWORD *)v82;
      v82 += v81;
      --a4;
    }
    while (a4);
  }
  return result;
}

_OWORD *Float32ToNativeInt16_ARM(float *a1, __n128 *a2, unsigned int a3, double a4, int32x4_t a5)
{
  return Float32ToNativeInt16Scaled_ARM(a1, a2, a3, 32768.0, a5);
}

_OWORD *Float32ToNativeInt16Scaled_ARM(_OWORD *result, __n128 *a2, unsigned int a3, float a4, int32x4_t a5)
{
  if (a3 >= 8)
  {
    unsigned int v5 = a3 >> 3;
    do
    {
      float32x4_t v6 = *(float32x4_t *)result;
      float32x4_t v7 = *((float32x4_t *)result + 1);
      result += 2;
      a5 = (int32x4_t)vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(v6, a4))), vcvtaq_s32_f32(vmulq_n_f32(v7, a4)));
      *a2++ = (__n128)a5;
      --v5;
    }
    while (v5);
  }
  int v8 = a3 & 7;
  if ((a3 & 7) != 0)
  {
    do
    {
      float v9 = *(float *)result;
      unint64_t result = (_OWORD *)((char *)result + 4);
      a5.i32[0] = llroundf(v9 * a4);
      *(int16x4_t *)a5.i8 = vqmovn_s32(a5);
      a2->n128_u16[0] = a5.i16[0];
      a2 = (__n128 *)((char *)a2 + 2);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>(unsigned int ***a1, uint64_t *a2)
{
  uint64_t v3 = ***a1;
  uint64_t v4 = *(void *)(*a1)[1];
  uint64_t v5 = *(void *)(*a1)[2];
  uint64_t v6 = *a2;
  if (v3 == 1869574207) {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 112))(a2, v4, v5);
  }
  else {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v6 + 48))(a2, v3, v4, v5);
  }
}

uint64_t acv2::SampleRateConverter::ProduceOutput(acv2::SampleRateConverter *this, ACAudioSpan *a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 16))(*((void *)this + 20));
  uint64_t v6 = (acv2::AudioConverterBase *)*((void *)this + 19);
  if (v6) {
    acv2::AudioConverterBase::writeCapture(v6, a2, v4);
  }
  return v5;
}

uint64_t acv2::PCMConverterI1::ConvertBufferList(uint64_t result, int a2, void *a3, void *a4)
{
  uint64_t v6 = result;
  if ((*(unsigned char *)(result + 28) & 0x20) != 0) {
    int v7 = 1;
  }
  else {
    int v7 = *(_DWORD *)(result + 44);
  }
  uint64_t v8 = *(unsigned int *)*a3;
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (v7 * a2);
    uint64_t v11 = 16 * v8;
    do
    {
      unint64_t result = (*(uint64_t (**)(void, void, uint64_t, void))(v6 + 168))(*(void *)(*a3 + v9 + 16), *(void *)(*a4 + v9 + 16), v10, *(unsigned int *)(v6 + 176));
      v9 += 16;
    }
    while (v11 != v9);
  }
  return result;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = ***a1;
  uint64_t v4 = *(uint64_t **)(*a1)[2];
  if (!v4)
  {
    uint64_t v13 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v13 + 88, 16);
    if (message)
    {
      unsigned int v15 = (caulk::concurrent::message *)message;
      int v16 = (_DWORD *)_os_log_pack_fill();
      _DWORD *v16 = 67109120;
      v16[1] = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v15);
    }
    return 4294967246;
  }
  uint64_t v6 = *v2[1];
  if (v3 == 1668309874)
  {
    if (v6 < 8) {
      return 561211770;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2))
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 56))(a2, 1668309874, v6, v4);
    }
    else
    {
      uint64_t v7 = 2003329396;
      CFTypeRef cf = 0;
      uint64_t v10 = *v4;
      if (!MediaToolboxLibraryCore(0) || !getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc()) {
        goto LABEL_14;
      }
      CryptorFromSerializedRecipeSymbolLoc = (uint64_t (*)(void, uint64_t, CFTypeRef *))getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc();
      if (!CryptorFromSerializedRecipeSymbolLoc)
      {
        dlerror();
        abort_report_np();
      }
      uint64_t v7 = CryptorFromSerializedRecipeSymbolLoc(*MEMORY[0x1E4F1CF80], v10, &cf);
      if (!v7)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(void *)a2 + 56))(a2, 1668310371, 8, &cf);
        CFRelease(cf);
      }
      else
      {
LABEL_14:
        AudioConverterLog();
        uint64_t v12 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          int v19 = "AudioConverterInternal.cpp";
          __int16 v20 = 1024;
          int v21 = 132;
          _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a limited Cryptor from the context, returning kAudioConverterErr_UnspecifiedError", buf, 0x12u);
        }
      }
    }
    if (v7 != 1886547824) {
      return v7;
    }
    uint64_t v3 = **v2;
    uint64_t v6 = *v2[1];
    uint64_t v4 = *(uint64_t **)v2[2];
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 56);
  return v8(a2, v3, v6, v4);
}

uint32x4_t *NativeLowAlignedInt32ToFloat32_ARM(uint32x4_t *result, float32x4_t *a2, unsigned int a3, int a4)
{
  uint32x4_t v4 = (uint32x4_t)vdupq_n_s32(32 - a4);
  if (a3 < 0x10)
  {
    if (a3 >= 4)
    {
      do
      {
        uint32x4_t v10 = *result++;
        *a2++ = vcvtq_n_f32_s32((int32x4_t)vshlq_u32(v10, v4), 0x1FuLL);
        a3 -= 4;
      }
      while (a3 > 3);
    }
  }
  else
  {
    a3 -= 12;
    float32x4_t v5 = vcvtq_n_f32_s32((int32x4_t)vshlq_u32(*result, v4), 0x1FuLL);
    int32x4_t v6 = (int32x4_t)vshlq_u32(result[1], v4);
    uint32x4_t v7 = result[2];
    result += 3;
    do
    {
      uint64_t v8 = a2;
      *a2++ = v5;
      float32x4_t v5 = vcvtq_n_f32_s32(v6, 0x1FuLL);
      int32x4_t v6 = (int32x4_t)vshlq_u32(v7, v4);
      uint32x4_t v9 = *result++;
      uint32x4_t v7 = v9;
      a3 -= 4;
    }
    while (a3 > 3);
    *a2 = v5;
    a2[1] = vcvtq_n_f32_s32(v6, 0x1FuLL);
    a2[2] = vcvtq_n_f32_s32((int32x4_t)vshlq_u32(v7, v4), 0x1FuLL);
    a2 = v8 + 4;
  }
  for (; a3; --a3)
  {
    __int32 v11 = result->i32[0];
    unint64_t result = (uint32x4_t *)((char *)result + 4);
    a2->f32[0] = (float)(v11 << (32 - a4)) * 4.6566e-10;
    a2 = (float32x4_t *)((char *)a2 + 4);
  }
  return result;
}

float32x4_t *Float32ToNativeLowAlignedInt32_ARM(float32x4_t *result, uint32x4_t *a2, unsigned int a3, int a4, double a5)
{
  LODWORD(a5) = 1065353216 - (a4 << 23);
  float32x4_t v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  uint32x4_t v6 = (uint32x4_t)vdupq_n_s32(a4 - 32);
  if (a3 < 0x18)
  {
    if (a3 >= 4)
    {
      do
      {
        float32x4_t v19 = *result++;
        int32x4_t v20 = vcvtq_n_s32_f32(vaddq_f32(v5, v19), 0x1FuLL);
        *a2++ = vshlq_u32((uint32x4_t)vqaddq_s32(v20, vcltzq_s32(v20)), v6);
        a3 -= 4;
      }
      while (a3 > 3);
    }
  }
  else
  {
    a3 -= 20;
    int32x4_t v7 = vcvtq_n_s32_f32(vaddq_f32(v5, *result), 0x1FuLL);
    int32x4_t v8 = vcvtq_n_s32_f32(vaddq_f32(v5, result[1]), 0x1FuLL);
    uint32x4_t v9 = vshlq_u32((uint32x4_t)vqaddq_s32(v7, vcltzq_s32(v7)), v6);
    uint32x4_t v10 = (uint32x4_t)vqaddq_s32(v8, vcltzq_s32(v8));
    int32x4_t v11 = vcvtq_n_s32_f32(vaddq_f32(v5, result[2]), 0x1FuLL);
    float32x4_t v12 = vaddq_f32(v5, result[3]);
    float32x4_t v13 = result[4];
    result += 5;
    int32x4_t v14 = vcltzq_s32(v11);
    do
    {
      unsigned int v15 = a2;
      *a2++ = v9;
      uint32x4_t v9 = vshlq_u32(v10, v6);
      uint32x4_t v10 = (uint32x4_t)vqaddq_s32(v11, v14);
      int32x4_t v11 = vcvtq_n_s32_f32(v12, 0x1FuLL);
      float32x4_t v12 = vaddq_f32(v5, v13);
      float32x4_t v16 = *result++;
      float32x4_t v13 = v16;
      int32x4_t v14 = vcltzq_s32(v11);
      a3 -= 4;
    }
    while (a3 > 3);
    int32x4_t v17 = vcvtq_n_s32_f32(v12, 0x1FuLL);
    *a2 = v9;
    a2[1] = vshlq_u32(v10, v6);
    int32x4_t v18 = vcvtq_n_s32_f32(vaddq_f32(v5, v13), 0x1FuLL);
    a2[2] = vshlq_u32((uint32x4_t)vqaddq_s32(v11, v14), v6);
    a2[3] = vshlq_u32((uint32x4_t)vqaddq_s32(v17, vcltzq_s32(v17)), v6);
    a2[4] = vshlq_u32((uint32x4_t)vqaddq_s32(v18, vcltzq_s32(v18)), v6);
    a2 = v15 + 6;
  }
  for (; a3; --a3)
  {
    float v21 = result->f32[0];
    unint64_t result = (float32x4_t *)((char *)result + 4);
    unsigned int v22 = vcvts_n_s32_f32(v21 + *(float *)&a5, 0x1FuLL);
    a2->i32[0] = (v22 - (v22 > 0x80000000)) >> (32 - a4);
    a2 = (uint32x4_t *)((char *)a2 + 4);
  }
  return result;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
}

uint64_t acv2::AudioConverterV2::reset(acv2::AudioConverterV2 *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (*(unsigned char *)(v1 + 400)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 112);
  while (v3 != v4)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 72))();
    if (result) {
      return result;
    }
    uint64_t v5 = *(void *)(*(void *)v3 + 104);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      ACBaseAudioSpan::resetMetadataEvents((uint64_t *)(v5 + 24));
      *(_DWORD *)(v5 + 128) = 0;
      uint64_t v6 = v5 + 128;
      *(_DWORD *)(v6 + 8) = 0;
      ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v6);
    }
    v3 += 8;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 400) = 0;
  *(unsigned char *)(v1 + 402) = 0;
  return result;
}

uint64_t acv2::CBRConverter::Reset(acv2::CBRConverter *this)
{
  return 0;
}

uint64_t acv2::SampleRateConverter::Reset(acv2::SampleRateConverter *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 96))();
}

uint64_t acv2::Resampler2Wrapper::Reset(acv2::Resampler2Wrapper *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 3);
  uint64_t v3 = (uint64_t *)*((void *)this + 4);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 88))(v4);
  }
  *((unsigned char *)this + 52) = 0;
  return 0;
}

uint64_t Resampler2::Reset(void **this)
{
  bzero(this[10], 4 * *((unsigned int *)this + 19));
  bzero(this[11], 4 * *((unsigned int *)this + 19));
  *((_DWORD *)this + 18) = 0;
  this[20] = 0;
  *((_DWORD *)this + 26) = 0;
  *((unsigned char *)this + 132) = 0;
  uint64_t result = (*((uint64_t (**)(void **, void))*this + 12))(this, *((unsigned int *)this + 30));
  double v3 = 0.0;
  if (!*((unsigned char *)this + 264))
  {
    double v4 = *((double *)this + 20);
    uint64_t result = (*((uint64_t (**)(void **, double))*this + 19))(this, 0.0);
    double v3 = -1.0 - (v4 + (double)(result >> 1));
  }
  *((double *)this + 17) = v3;
  this[34] = 0;
  return result;
}

void *DSPGraph::Graph::reset(void *this)
{
  this[88] = 0;
  this[91] = 0;
  uint64_t v1 = (void *)this[32];
  uint64_t v2 = (void *)this[33];
  while (v1 != v2)
  {
    double v3 = (void *)*v1;
    v3[32] = 0;
    v3[36] = 0;
    double v4 = (uint64_t *)v3[28];
    uint64_t v5 = (uint64_t *)v3[29];
    while (v4 != v5)
    {
      uint64_t v6 = *v4++;
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 632))(v6);
    }
    ++v1;
  }
  return this;
}

uint64_t DSPGraph::AUBox::reset(AudioUnit *this)
{
  return DSPGraph::AUBox::reset(this, 0, 0);
}

uint64_t DSPGraph::AUBox::reset(AudioUnit *this, AudioUnitScope a2, AudioUnitElement a3)
{
  uint64_t result = AudioUnitReset(this[106], a2, a3);
  if (result)
  {
    int v4 = result;
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "reset");
    std::string::basic_string[abi:ne180100]<0>(&v5, "AudioUnitReset");
    DSPGraph::ThrowException(v4, &v7, 1854, &v6, &v5);
  }
  return result;
}

void sub_18FECB654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioUnitReset(AudioUnit inUnit, AudioUnitScope inScope, AudioUnitElement inElement)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v3 = *(void *)&inElement;
  uint64_t v4 = *(void *)&inScope;
  long long v5 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v5) {
    return 560947818;
  }
  long long v6 = v5;
  if (*(_WORD *)((**v5)(v5) + 38) != 24949) {
    return -3000;
  }
  long long v7 = *(uint64_t (**)(uint64_t (**)(void), uint64_t, uint64_t))(*(void *)((**v6)(v6) + 112)
                                                                                   + 104);
  if (!v7) {
    return -4;
  }
  int32x4_t v8 = v6[3];
  return v7(v8, v4, v3);
}

void DSPGraph::IsoGroup::initializeBoxes(DSPGraph::IsoGroup *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *((void *)this + 32) = 0;
  *((void *)this + 36) = 0;
  uint64_t v2 = *((unsigned int *)this + 67);
  uint64_t v3 = v2;
  if (v2 == 1) {
    uint64_t v3 = *((unsigned int *)this + 68);
  }
  if (DSPGraph::getLog(void)::onceToken != -1) {
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10594);
  }
  os_signpost_id_t v4 = os_signpost_id_make_with_pointer((os_log_t)DSPGraph::getLog(void)::gLog, this);
  long long v5 = (char **)*((void *)this + 28);
  long long v6 = (char **)*((void *)this + 29);
  if (v5 != v6)
  {
    os_signpost_id_t v7 = v4;
    unint64_t v8 = v4 - 1;
    do
    {
      uint32x4_t v9 = *v5;
      (*(void (**)(char *, uint64_t))(*(void *)*v5 + 112))(*v5, v3);
      if (v2 >= 2) {
        (*(void (**)(char *, uint64_t))(*(void *)v9 + 120))(v9, 1);
      }
      if (DSPGraph::getLog(void)::onceToken != -1) {
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10594);
      }
      if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint32x4_t v10 = DSPGraph::getLog(void)::gLog;
        if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
        {
          int32x4_t v11 = v9 + 32;
          if (v9[55] < 0) {
            int32x4_t v11 = (void *)*v11;
          }
          *(_DWORD *)buf = 136315138;
          unsigned int v15 = v11;
          _os_signpost_emit_with_name_impl(&dword_18FEC0000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Box::initialize", "%s", buf, 0xCu);
        }
      }
      (*(void (**)(char *))(*(void *)v9 + 576))(v9);
      if (DSPGraph::getLog(void)::onceToken != -1) {
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10594);
      }
      if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        float32x4_t v12 = DSPGraph::getLog(void)::gLog;
        if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
        {
          float32x4_t v13 = v9 + 32;
          if (v9[55] < 0) {
            float32x4_t v13 = (void *)*v13;
          }
          *(_DWORD *)buf = 136315138;
          unsigned int v15 = v13;
          _os_signpost_emit_with_name_impl(&dword_18FEC0000, v12, OS_SIGNPOST_INTERVAL_END, v7, "Box::initialize", "%s", buf, 0xCu);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

uint64_t DSPGraph::AUBox::setMaxFrames(DSPGraph::AUBox *this, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, void, void, uint64_t, int *))(*(void *)this + 312))(this, 14, 0, 0, 4, &v3);
}

uint64_t DSPGraph::AUBox::initialize(AudioUnit *this)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)this);
  uint64_t v2 = (long long *)this[97];
  AudioUnit v4 = this[8];
  AudioUnit v3 = this[9];
  *(void *)&long long v56 = 0;
  uint64_t v5 = v3 - v4;
  if (v5)
  {
    unint64_t v6 = v5 >> 5;
    AudioUnit v7 = this[99];
    AudioUnit v8 = this[98];
    unint64_t v9 = (v8 - (AudioUnit)v2) >> 3;
    if (v6 > (v7 - v8) >> 3)
    {
      unint64_t v10 = v9 + v6;
      if ((v9 + v6) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v7 - (AudioUnit)v2;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          goto LABEL_79;
        }
        float32x4_t v13 = (OpaqueAudioComponentInstance *)operator new(8 * v12);
      }
      else
      {
        float32x4_t v13 = 0;
      }
      uint64_t v23 = 0;
      uint64_t v24 = 8 * v6;
      unint64_t v25 = (char *)v13 + 8 * v6;
      do
      {
        *(void *)((char *)v13 + v23) = 0;
        v23 += 8;
      }
      while (v24 != v23);
      int32x4_t v26 = (OpaqueAudioComponentInstance *)((char *)v13 + 8 * v12);
      if (v8 != (AudioUnit)v2) {
        memmove(v25, v2, v8 - (AudioUnit)v2);
      }
      this[97] = v13;
      this[98] = (AudioUnit)&v25[8 * v9];
      this[99] = v26;
      if (v2) {
        operator delete(v2);
      }
      goto LABEL_38;
    }
    if (v6 <= v9)
    {
      unsigned int v15 = this[98];
      unint64_t v9 = v6;
    }
    else
    {
      uint64_t v14 = 0;
      unsigned int v15 = (AudioUnit)((char *)v8 + 8 * (v6 - v9));
      do
      {
        *(void *)((char *)v8 + v14) = v56;
        v14 += 8;
      }
      while (8 * v6 - 8 * v9 != v14);
      this[98] = v15;
      if (v8 == (AudioUnit)v2) {
        goto LABEL_38;
      }
    }
    uint64_t v16 = (OpaqueAudioComponentInstance *)((char *)v2 + 8 * v6);
    int32x4_t v17 = (uint64_t *)((char *)v15 - 8 * v6);
    int32x4_t v18 = v15;
    if (v17 < (uint64_t *)v8)
    {
      int32x4_t v18 = v15;
      do
      {
        uint64_t v19 = *v17++;
        *(void *)int32x4_t v18 = v19;
        int32x4_t v18 = (OpaqueAudioComponentInstance *)((char *)v18 + 8);
      }
      while (v17 < (uint64_t *)v8);
    }
    this[98] = v18;
    if (v15 != v16) {
      memmove((char *)v15 - 8 * ((v15 - v16) >> 3), v2, v15 - v16);
    }
    int32x4_t v20 = &v56;
    if (v2 <= &v56)
    {
      if (this[98] <= (AudioUnit)&v56) {
        unint64_t v21 = 0;
      }
      else {
        unint64_t v21 = v6;
      }
      int32x4_t v20 = (long long *)((char *)&v56 + 8 * v21);
    }
    uint64_t v22 = *(void *)v20;
    do
    {
      *(void *)uint64_t v2 = v22;
      uint64_t v2 = (long long *)((char *)v2 + 8);
      --v9;
    }
    while (v9);
  }
LABEL_38:
  int32x4_t v27 = (long long *)this[100];
  AudioUnit v29 = this[11];
  AudioUnit v28 = this[12];
  *(void *)&long long v56 = 0;
  uint64_t v30 = v28 - v29;
  if (!v30) {
    goto LABEL_71;
  }
  unint64_t v31 = v30 >> 5;
  AudioUnit v32 = this[102];
  AudioUnit v33 = this[101];
  unint64_t v34 = (v33 - (AudioUnit)v27) >> 3;
  if (v31 > (v32 - v33) >> 3)
  {
    unint64_t v35 = v34 + v31;
    if ((v34 + v31) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v36 = v32 - (AudioUnit)v27;
    if (v36 >> 2 > v35) {
      unint64_t v35 = v36 >> 2;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (!v37)
    {
      long long v38 = 0;
LABEL_65:
      uint64_t v46 = 0;
      uint64_t v47 = 8 * v31;
      UInt32 v48 = (char *)v38 + 8 * v31;
      do
      {
        *(void *)((char *)v38 + v46) = 0;
        v46 += 8;
      }
      while (v47 != v46);
      uint64_t v49 = (OpaqueAudioComponentInstance *)((char *)v38 + 8 * v37);
      if (v33 != (AudioUnit)v27) {
        memmove(v48, v27, v33 - (AudioUnit)v27);
      }
      this[100] = v38;
      this[101] = (AudioUnit)&v48[8 * v34];
      this[102] = v49;
      if (v27) {
        operator delete(v27);
      }
      goto LABEL_71;
    }
    if (!(v37 >> 61))
    {
      long long v38 = (OpaqueAudioComponentInstance *)operator new(8 * v37);
      goto LABEL_65;
    }
LABEL_79:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  if (v31 <= v34)
  {
    int v40 = this[101];
    unint64_t v34 = v31;
  }
  else
  {
    uint64_t v39 = 0;
    int v40 = (AudioUnit)((char *)v33 + 8 * (v31 - v34));
    do
    {
      *(void *)((char *)v33 + v39) = 0;
      v39 += 8;
    }
    while (8 * v31 - 8 * v34 != v39);
    this[101] = v40;
    if (v33 == (AudioUnit)v27) {
      goto LABEL_71;
    }
  }
  int32x4_t v41 = (OpaqueAudioComponentInstance *)((char *)v27 + 8 * v31);
  int32x4_t v42 = (uint64_t *)((char *)v40 - 8 * v31);
  int v43 = v40;
  if (v42 < (uint64_t *)v33)
  {
    int v43 = v40;
    do
    {
      uint64_t v44 = *v42++;
      *(void *)int v43 = v44;
      int v43 = (OpaqueAudioComponentInstance *)((char *)v43 + 8);
    }
    while (v42 < (uint64_t *)v33);
  }
  this[101] = v43;
  if (v40 != v41) {
    memmove((char *)v40 - 8 * ((v40 - v41) >> 3), v27, v40 - v41);
  }
  uint64_t v45 = v56;
  if (v27 > &v56) {
    uint64_t v45 = 0;
  }
  do
  {
    *(void *)int32x4_t v27 = v45;
    int32x4_t v27 = (long long *)((char *)v27 + 8);
    --v34;
  }
  while (v34);
LABEL_71:
  if (((this[9] - this[8]) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v50 = 0;
    do
    {
      LODWORD(v56) = 0;
      (*((void (**)(AudioUnit *, uint64_t, uint64_t, uint64_t, uint64_t, long long *))*this + 39))(this, 51, 1, v50, 4, &v56);
      uint64_t v50 = (v50 + 1);
    }
    while (v50 < ((unint64_t)(this[9] - this[8]) >> 5));
  }
  if (((this[12] - this[11]) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v51 = 0;
    do
    {
      LODWORD(v56) = 0;
      (*((void (**)(AudioUnit *, uint64_t, uint64_t, uint64_t, uint64_t, long long *))*this + 39))(this, 51, 2, v51, 4, &v56);
      uint64_t v51 = (v51 + 1);
    }
    while (v51 < ((unint64_t)(this[12] - this[11]) >> 5));
  }
  uint64_t result = AudioUnitInitialize(this[106]);
  if (result)
  {
    int v53 = result;
    std::string::basic_string[abi:ne180100]<0>(&v56, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v55, "initialize");
    std::operator+<char>();
    DSPGraph::ThrowException(v53, &v56, 1997, &v55, &v54);
  }
  return result;
}

void sub_18FECBF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::setProperty(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, UInt32 inDataSize, const void *inData)
{
  return AudioUnitSetProperty(this[106], a2, a3, a4, inData, inDataSize);
}

uint64_t DSPGraph::Box::initialize(DSPGraph::Box *this)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*((void *)this + 25);
  CFAllocatorRef v2 = (CFAllocatorRef)*((void *)this + 26);
  if (v1 != v2)
  {
    AudioUnit v3 = (void *)&unk_1E9299000;
    CFAllocatorRef allocator = (CFAllocatorRef)*((void *)this + 26);
    do
    {
      uint64_t v4 = *(void *)v1;
      uint64_t v5 = *(void *)(*(void *)v1 + 8);
      unint64_t v6 = *(uint64_t **)(v5 + 120);
      if (*((_DWORD *)v6 + 2) == 1718773105)
      {
        unsigned int v7 = *((_DWORD *)v6 + 7);
        std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::reserve((void *)(v4 + 48), v7);
        if (v7)
        {
          *(void *)&v80[0] = 0;
          VPTimeFreqConverter_Create();
        }
        uint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v4 + 8) + 32) + 16) + 8) + 16);
        int v9 = *(_DWORD *)(v8 + 268);
        if (v9 == 1) {
          int v9 = *(_DWORD *)(v8 + 272);
        }
        DSPGraph::SimpleABL::alloc((DSPGraph::SimpleABL *)(v4 + 72), 0, 4 * v9, 0);
        uint64_t v5 = *(void *)(v4 + 8);
        unint64_t v6 = *(uint64_t **)(v5 + 120);
        CFAllocatorRef v2 = allocator;
        AudioUnit v3 = &unk_1E9299000;
      }
      unint64_t v10 = (void *)(v4 + 24);
      if (*(char *)(v4 + 47) < 0) {
        unint64_t v10 = (void *)*v10;
      }
      uint64_t v74 = 0;
      memset(v73, 0, sizeof(v73));
      uint64_t v11 = *v6;
      int v12 = *((_DWORD *)v6 + 7);
      if (*((_DWORD *)v6 + 2) == 1718773105)
      {
        *((void *)&v73[0] + 1) = 0x296C70636DLL;
        *(void *)&v73[1] = 0x100000004;
        DWORD2(v73[1]) = 4;
        LODWORD(v74) = 32;
        uint64_t v5 = *(void *)(v4 + 8);
      }
      else
      {
        uint64_t v13 = v6[4];
        DWORD2(v73[0]) = *((_DWORD *)v6 + 2);
        *(long long *)((char *)v73 + 12) = *(_OWORD *)((char *)v6 + 12);
        uint64_t v74 = v13;
      }
      *(void *)&v73[0] = v11;
      HIDWORD(v73[1]) = v12;
      uint64_t v14 = *(void *)(v4 + 96);
      uint64_t v15 = *(unsigned int *)(*(void *)(*(void *)(*(void *)(v5 + 8) + 8) + 8) + 940);
      if (v3[126] != -1) {
        dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_6218);
      }
      if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction) {
        uint64_t v16 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v14, 0, v10, v15, 0, v73);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void *)(v4 + 16);
      *(void *)(v4 + 16) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        uint64_t v16 = *(void *)(v4 + 16);
      }
      if (!v16)
      {
        std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v79, "initialize");
        std::string::basic_string[abi:ne180100]<0>(inURL, "NewAudioCapturer returned null");
        DSPGraph::ThrowException(1852204065, v80, 259, &v79, (long long *)inURL);
      }
      CFAllocatorRef v1 = (const __CFAllocator *)((char *)v1 + 8);
    }
    while (v1 != v2);
  }
  int32x4_t v18 = (uint64_t *)*((void *)this + 28);
  unsigned int v71 = (uint64_t *)*((void *)this + 29);
  if (v18 != v71)
  {
    CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t v19 = *v18;
      uint64_t v20 = *(void *)(*(void *)(*v18 + 8) + 120);
      if (*(_DWORD *)(v20 + 8) == 1718773105)
      {
        unsigned int v21 = *(_DWORD *)(v20 + 28);
        std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::reserve((void *)(v19 + 80), v21);
        if (v21)
        {
          *(void *)&v80[0] = 0;
          VPTimeFreqConverter_Create();
        }
      }
      if (*(char *)(v19 + 71) < 0)
      {
        uint64_t v22 = *(const UInt8 **)(v19 + 48);
        CFIndex v23 = *(void *)(v19 + 56);
      }
      else
      {
        uint64_t v22 = (const UInt8 *)(v19 + 48);
        CFIndex v23 = *(unsigned __int8 *)(v19 + 71);
      }
      CFURLRef v24 = CFURLCreateFromFileSystemRepresentation(allocatora, v22, v23, 0);
      applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)inURL, v24);
      if (!inURL[0])
      {
        std::string::basic_string[abi:ne180100]<0>(v73, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v80, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v79, "couldn't convert path to CFURLRef");
        DSPGraph::ThrowException(-4960, v73, 100, v80, &v79);
      }
      ExtAudioFileRef outExtAudioFile = 0;
      OSStatus v25 = ExtAudioFileOpenURL(inURL[0], &outExtAudioFile);
      if (v25)
      {
        std::string::basic_string[abi:ne180100]<0>(v73, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v80, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v79, "ExtAudioFileOpenURL failed");
        DSPGraph::ThrowException(v25, v73, 105, v80, &v79);
      }
      int32x4_t v26 = outExtAudioFile;
      unint64_t outPropertyData = 0;
      UInt32 ioPropertyDataSize = 8;
      OSStatus Property = ExtAudioFileGetProperty(outExtAudioFile, 0x2366726Du, &ioPropertyDataSize, &outPropertyData);
      if (Property)
      {
        std::string::basic_string[abi:ne180100]<0>(v73, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v80, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v79, "ExtAudioFileGetProperty(FileLengthFrames) failed");
        DSPGraph::ThrowException(Property, v73, 113, v80, &v79);
      }
      unint64_t v28 = outPropertyData;
      if ((outPropertyData & 0x8000000000000000) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "numerical cast overflow: could not retain value in conversion type");
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
      }
      uint64_t v29 = *(void *)(v19 + 8);
      uint64_t v30 = *(void *)(v29 + 120);
      *(_DWORD *)(v19 + 36) = *(_DWORD *)(v30 + 24);
      uint64_t v31 = *(void *)(*(void *)(*(void *)(*(void *)(v29 + 32) + 16) + 8) + 16);
      uint64_t v32 = *(unsigned int *)(v31 + 268);
      if (v32 == 1) {
        uint64_t v32 = *(unsigned int *)(v31 + 272);
      }
      unsigned int v33 = *(_DWORD *)(v30 + 28);
      int v34 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(v28);
      unint64_t v35 = v28 + v32;
      *(_DWORD *)(v19 + 40) = v34;
      unsigned int v36 = *(_DWORD *)(v19 + 36);
      unsigned int v37 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(v35);
      unsigned int v38 = caulk::numeric::exceptional_mul<unsigned int>(v36, v37);
      uint64_t v39 = (unsigned int **)(v19 + 16);
      DSPGraph::SimpleABL::alloc((DSPGraph::SimpleABL *)(v19 + 16), v33, v38, 0);
      OSStatus v40 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, *(const void **)(*(void *)(v19 + 8) + 120));
      if (v40)
      {
        std::string::basic_string[abi:ne180100]<0>(v73, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v80, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v79, "ExtAudioFileSetProperty(ClientDataFormat) failed");
        DSPGraph::ThrowException(v40, v73, 120, v80, &v79);
      }
      UInt32 ioNumberFrames = *(_DWORD *)(v19 + 40);
      OSStatus v41 = ExtAudioFileRead(outExtAudioFile, &ioNumberFrames, *(AudioBufferList **)(v19 + 16));
      if (v41)
      {
        std::string::basic_string[abi:ne180100]<0>(v73, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(v80, "readFile");
        std::string::basic_string[abi:ne180100]<0>(&v79, "ExtAudioFileRead failed");
        DSPGraph::ThrowException(v41, v73, 127, v80, &v79);
      }
      UInt32 v42 = ioNumberFrames;
      *(_DWORD *)(v19 + 40) = ioNumberFrames;
      uint64_t v43 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v19 + 8) + 32) + 16) + 8) + 16);
      int v44 = *(_DWORD *)(v43 + 268);
      if (v44 == 1) {
        int v44 = *(_DWORD *)(v43 + 272);
      }
      uint64_t v45 = *v39;
      if (*v39 && *v45)
      {
        unint64_t v46 = 0;
        int v47 = *(_DWORD *)(v19 + 36);
        uint64_t v48 = v47 * v42;
        size_t v49 = (v44 * v47);
        uint64_t v50 = 4;
        do
        {
          bzero((void *)(*(void *)&v45[v50] + v48), v49);
          ++v46;
          uint64_t v45 = *v39;
          v50 += 4;
        }
        while (v46 < **v39);
      }
      if (v26) {
        ExtAudioFileDispose(v26);
      }
      if (inURL[0]) {
        CFRelease(inURL[0]);
      }
      *(_DWORD *)(v19 + 32) = 0;
      ++v18;
    }
    while (v18 != v71);
  }
  (*(void (**)(DSPGraph::Box *))(*(void *)this + 592))(this);
  uint64_t v51 = (uint64_t *)*((void *)this + 39);
  int v52 = (uint64_t *)*((void *)this + 40);
  while (v51 != v52)
  {
    uint64_t v53 = *v51++;
    (*(void (**)(uint64_t))(*(void *)v53 + 128))(v53);
  }
  uint64_t result = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 440))(this);
  if ((result & 1) == 0)
  {
    uint64_t v55 = *((void *)this + 8);
    uint64_t v56 = *((void *)this + 9);
    if (v55 != v56)
    {
      uint64_t v57 = *((void *)this + 8);
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 40))(v57);
        if (*(_DWORD *)(*(void *)(result + 120) + 8) == 1718773105)
        {
          std::string::basic_string[abi:ne180100]<0>(v73, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(v80, "initialize");
          long long v62 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            long long v62 = (void *)*v62;
          }
          uint64_t v63 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 16))(this);
          DSPGraph::strprintf((DSPGraph *)"frequency data is passed through a No Frequency Safe Box-> %s %s", v64, v62, v63);
        }
        v57 += 32;
        v55 += 32;
      }
      while (v57 != v56);
    }
    uint64_t v58 = *((void *)this + 11);
    uint64_t v59 = *((void *)this + 12);
    if (v58 != v59)
    {
      uint64_t v60 = *((void *)this + 11);
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 40))(v60);
        if (*(_DWORD *)(*(void *)(result + 120) + 8) == 1718773105)
        {
          std::string::basic_string[abi:ne180100]<0>(v73, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(v80, "initialize");
          uint64_t v65 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            uint64_t v65 = (void *)*v65;
          }
          uint64_t v66 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 16))(this);
          DSPGraph::strprintf((DSPGraph *)"frequency data is passed through a No Frequency Safe Box-> %s %s", v67, v65, v66);
        }
        v60 += 32;
        v58 += 32;
      }
      while (v60 != v59);
    }
  }
  return result;
}

void sub_18FECCAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 105) < 0) {
    operator delete(*(void **)(v38 - 128));
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (v37) {
    ExtAudioFileDispose(v37);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::initializeAnalysis(DSPGraph::Box *this)
{
  unint64_t v46 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  CFAllocatorRef v2 = (uint64_t *)*((void *)this + 39);
  size_t v49 = (uint64_t *)*((void *)this + 40);
  uint64_t v50 = this;
  if (v2 == v49) {
    goto LABEL_53;
  }
  AudioUnit v3 = (char *)this + 336;
  uint64_t v4 = (char *)this + 560;
  uint64_t v48 = (char *)this + 560;
  do
  {
    int v5 = *(_DWORD *)(*v2 + 24);
    caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
    LODWORD(v53) = v5;
    int v6 = *(_DWORD *)(caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>((unint64_t)v3, &v53, 0)+ 8);
    caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((unint64_t)v4, v7);
    if (v6 == v5) {
      goto LABEL_52;
    }
    unint64_t v8 = *(unsigned int *)(*v2 + 80);
    uint64_t v9 = *((void *)v50 + 11);
    if (v8 >= (*((void *)v50 + 12) - v9) >> 5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v52, "out");
      uint64_t v43 = (void *)((char *)v50 + 32);
      if (*((char *)v50 + 55) < 0) {
        uint64_t v43 = (void *)*v43;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v42, v43, (uint64_t)(*((void *)v50 + 12) - *((void *)v50 + 11)) >> 5, v8);
    }
    if (!(*(uint64_t (**)(unint64_t))(*(void *)(v9 + 32 * v8) + 40))(v9 + 32 * v8))
    {
      std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v52, "initializeAnalysis");
      std::string::basic_string[abi:ne180100]<0>(&v51, "Box::initializeAnalysis, Port Not Connected to Box.");
      DSPGraph::ThrowException(1970168609, &v53, 153, &v52, &v51);
    }
    *(void *)(*v2 + 16) = v50;
    uint64_t v10 = *((void *)v50 + 11);
    if (v8 >= (*((void *)v50 + 12) - v10) >> 5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v53, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v52, "out");
      uint64_t v45 = (void *)((char *)v50 + 32);
      if (*((char *)v50 + 55) < 0) {
        uint64_t v45 = (void *)*v45;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v44, v45, (uint64_t)(*((void *)v50 + 12) - *((void *)v50 + 11)) >> 5, v8);
    }
    uint64_t v11 = *v2;
    *(void *)(v11 + 8) = (*(uint64_t (**)(unint64_t))(*(void *)(v10 + 32 * v8) + 40))(v10 + 32 * v8);
    uint64_t v12 = *v2;
    unsigned int v13 = *(_DWORD *)(*v2 + 24);
    if (*((_DWORD *)v50 + 86) >= v13 || (uint64_t v14 = v50, *((_DWORD *)v50 + 132) <= v13))
    {
      __break(1u);
      return;
    }
    caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
    LODWORD(v53) = v13;
    unint64_t v15 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>((unint64_t)v3, &v53, 0);
    unint64_t v17 = *(unsigned int *)(v15 + 8);
    if (v17 == v13) {
      goto LABEL_51;
    }
    unint64_t v18 = v15;
    unint64_t v19 = v16;
    int v20 = 0;
    int value = 0;
    for (uint64_t i = 1; i != 9; ++i)
    {
      if (i == 1)
      {
        caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine();
        int value = caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::next_value((uint64_t)&caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine);
        int v20 = 3;
      }
      if ((v20 & ~value) != 0) {
        break;
      }
      v20 *= 4;
    }
    uint64_t v23 = 0;
    while (1)
    {
      unint64_t v24 = *(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v23];
      if (v24 >= *(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * i - 8]) {
        break;
      }
      if (++v23 == 10)
      {
        unint64_t v25 = 0;
        goto LABEL_22;
      }
    }
    uint64_t v26 = *((void *)v50 + 72) + 64 + 32 * v23;
    uint64_t v47 = *((void *)v50 + 72);
    int32x4_t v27 = caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop();
    if (v27)
    {
      unint64_t v25 = (unint64_t)v27;
      atomic_fetch_add((atomic_ullong *volatile)(v26 + 16), 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v14 = v50;
    }
    else
    {
      uint64_t v14 = v50;
      unint64_t v25 = caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::allocate(v47, v24);
    }
LABEL_22:
    *(unsigned char *)(v25 + 12) = i;
    *(_WORD *)(v25 + 13) = 1;
    *(unsigned char *)(v25 + 15) = i;
    *(_DWORD *)(v25 + 8) = v13;
    *(void *)unint64_t v25 = v12;
    *(void *)(v25 + 24) = 0;
    *(void *)(v25 + 32) = 0;
    *(void *)(v25 + 16) = 0;
    if ((_BYTE)i)
    {
      unint64_t v28 = (unint64_t *)(v25 + 32);
      uint64_t v29 = i;
      do
      {
        atomic_store(0, v28 - 1);
        atomic_store(0, v28);
        v28 += 2;
        --v29;
      }
      while (v29);
    }
    unint64_t v30 = 0;
    __dmb(0xBu);
    while (2)
    {
      if (*(_DWORD *)(v18 + 8) == *(_DWORD *)(v25 + 8))
      {
        unint64_t v31 = 0;
        goto LABEL_46;
      }
      while (1)
      {
        uint64_t v32 = (unint64_t *)(v18 + 16 * v30 + 24);
        unint64_t v33 = atomic_load(v32);
        if ((v33 & 2) == 0) {
          break;
        }
        caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged((unint64_t)v3, v30, v18, v33 & 0xFFFFFFFFFFFFFFFCLL);
LABEL_36:
        unsigned int v37 = *(_DWORD *)(v25 + 8);
        while (1)
        {
          unint64_t v40 = atomic_load((unint64_t *)(v18 + 16 * v30 + 24));
          unint64_t v19 = v40 & 0xFFFFFFFFFFFFFFFCLL;
          if (v37 < *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFFCLL) + 8)) {
            break;
          }
          char v38 = atomic_load((unint64_t *)(v19 + 24));
          if (v38)
          {
            unint64_t v18 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node((unint64_t)v3, v30, v18, v19);
            if (!v39) {
              caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged((unint64_t)v3, v30, v18, v19);
            }
          }
          else
          {
            unint64_t v18 = v19;
          }
        }
        if (*(_DWORD *)(v18 + 8) == *(_DWORD *)(v25 + 8))
        {
          unint64_t v31 = 0;
          goto LABEL_45;
        }
      }
      atomic_store(v19, (unint64_t *)(v25 + 16 * v30 + 24));
      unint64_t v34 = v19;
      atomic_compare_exchange_strong((atomic_ullong *volatile)v32, &v34, v25);
      if (v34 != v19)
      {
        if ((v34 & 2) != 0) {
          caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged((unint64_t)v3, v30, v18, v34 & 0xFFFFFFFFFFFFFFFCLL);
        }
        char v35 = atomic_load(v32);
        if (v35)
        {
          do
          {
            unint64_t v18 = atomic_load((unint64_t *)(v18 + 16 * v30 + 32));
            char v36 = atomic_load((unint64_t *)(v18 + 16 * v30 + 24));
          }
          while ((v36 & 1) != 0);
        }
        goto LABEL_36;
      }
      unint64_t v31 = v25;
LABEL_45:
      uint64_t v14 = v50;
LABEL_46:
      if (v31 | v30)
      {
        unint64_t v17 = atomic_load((unint64_t *)(v25 + 24));
        if ((v17 & 1) == 0 && ++v30 != i)
        {
          LODWORD(v53) = v13;
          unint64_t v18 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>((unint64_t)v3, &v53, v30);
          unint64_t v19 = v41;
          continue;
        }
      }
      else
      {
        caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::deallocate(*((caulk::alloc::base_allocator **)v14 + 72), (unint64_t *)v25, *(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * *(unsigned __int8 *)(v25 + 12) - 8]);
      }
      break;
    }
LABEL_51:
    uint64_t v4 = v48;
    caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((unint64_t)v48, v17);
LABEL_52:
    ++v2;
  }
  while (v2 != v49);
LABEL_53:
  std::mutex::unlock(v46);
}

void sub_18FECD248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 81) < 0) {
    operator delete(*(void **)(v29 - 104));
  }
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::isFrequencySafe(DSPGraph::Box *this)
{
  return 1;
}

OSStatus AudioUnitInitialize(AudioUnit inUnit)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!inUnit) {
    return -50;
  }
  CFAllocatorRef v1 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v1) {
    return 560947818;
  }
  CFAllocatorRef v2 = v1;
  if (*(_WORD *)((**v1)(v1) + 38) != 24949) {
    return -3000;
  }
  AudioUnit v3 = **(uint64_t (***)(void))((**v2)(v2) + 112);
  if (!v3) {
    return -4;
  }
  OSStatus result = v3(v2[3]);
  if (result) {
    return result;
  }
  if (!v2[3]) {
    return -66740;
  }
  uint64_t v5 = *(void *)((**v2)(v2) + 112);
  if (*(void *)(v5 + 160) | *(void *)(v5 + 192))
  {
    int v18 = 0;
    int v19 = 4;
    int v6 = (*(uint64_t (**)(uint64_t (**)(void), uint64_t, void, void, int *, int *))(v5 + 24))(v2[3], 64, 0, 0, &v18, &v19);
    int v7 = v18;
    if (v6) {
      int v7 = 0;
    }
    int v18 = v7;
    *((_DWORD *)v2 + 27) = v7;
    v2[12] = (uint64_t (**)(void))v5;
    if (*(void *)(v5 + 192))
    {
      v2[28][3](v2 + 29);
      v2[28] = (uint64_t (**)(void))&caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::empty;
    }
    else
    {
      int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_0>;
      caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 28, (uint64_t *)&v20);
      ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
    }
    int v8 = *((_DWORD *)v2 + 27);
    if ((v8 - 1) <= 1) {
      operator new();
    }
    if (v8 == 2)
    {
      uint64_t v11 = (std::__shared_weak_count *)operator new(0x840uLL);
      v11->__shared_weak_owners_ = 0;
      v11->__shared_owners_ = 0;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2930;
      bzero(&v11[1], 0x824uLL);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_5>;
      unsigned int v21 = v11 + 1;
      uint64_t v22 = v11;
      caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 23, (uint64_t *)&v20);
      ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
      unint64_t v15 = v2[28];
      uint64_t v14 = (uint64_t *)(v2 + 28);
      if (!*((unsigned char *)v15 + 32))
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>;
        unsigned int v21 = v11 + 1;
        uint64_t v22 = v11;
        caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v14, (uint64_t *)&v20);
        ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
      }
    }
    else
    {
      if (v8 != 1)
      {
        if (v8)
        {
          int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_7>;
          caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 23, (uint64_t *)&v20);
          ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
          unint64_t v17 = v2[28];
          unint64_t v16 = (uint64_t *)(v2 + 28);
          if (!*((unsigned char *)v17 + 32))
          {
            int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_8>;
            caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v16, (uint64_t *)&v20);
            ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
          }
        }
        else
        {
          int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_1>;
          caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 23, (uint64_t *)&v20);
          ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
          uint64_t v10 = v2[28];
          uint64_t v9 = (uint64_t *)(v2 + 28);
          if (!*((unsigned char *)v10 + 32))
          {
            int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_2>;
            caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v9, (uint64_t *)&v20);
            ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
          }
        }
        return 0;
      }
      uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
      v11->__shared_weak_owners_ = 0;
      v11->__shared_owners_ = 0;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA28F8;
      LOBYTE(v11[1].__vftable) = 0;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_3>;
      unsigned int v21 = v11 + 1;
      uint64_t v22 = v11;
      caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=((uint64_t *)v2 + 23, (uint64_t *)&v20);
      ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
      unsigned int v13 = v2[28];
      uint64_t v12 = (uint64_t *)(v2 + 28);
      if (!*((unsigned char *)v13 + 32))
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        int v20 = caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_4>;
        unsigned int v21 = v11 + 1;
        uint64_t v22 = v11;
        caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v12, (uint64_t *)&v20);
        ((void (*)(std::__shared_weak_count **))v20[3])(&v21);
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 0;
}

void sub_18FECD7B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioUnitGetPropertyInfo(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, UInt32 *outDataSize, Boolean *outWritable)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v8 = *(void *)&inElement;
  uint64_t v9 = *(void *)&inScope;
  uint64_t v10 = *(void *)&inID;
  uint64_t v11 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v11) {
    return 560947818;
  }
  uint64_t v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949) {
    return -3000;
  }
  if (!*(void *)(*(void *)((**v12)(v12) + 112) + 16)) {
    return -4;
  }
  if (!v12[3]) {
    return -66740;
  }
  uint64_t v13 = (**v12)(v12);
  if (v10 == 62)
  {
    OSStatus result = 0;
    *outDataSize = 4;
  }
  else if (*((unsigned char *)v12 + 88) && v10 == 65)
  {
    if (outDataSize) {
      *outDataSize = 4;
    }
    OSStatus result = 0;
    if (outWritable) {
      *outWritable = 1;
    }
  }
  else
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t, UInt32 *, Boolean *))(*(void *)(v13 + 112) + 16);
    unint64_t v15 = v12[3];
    return v14(v15, v10, v9, v8, outDataSize, outWritable);
  }
  return result;
}

OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v6 = *(void *)&inBufferOffsetInFrames;
  uint64_t v8 = *(void *)&inElement;
  uint64_t v9 = *(void *)&inScope;
  uint64_t v10 = *(void *)&inID;
  uint64_t v11 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v11) {
    return 560947818;
  }
  uint64_t v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949) {
    return -3000;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)((**v12)(v12) + 112) + 88);
  if (!v13) {
    return -4;
  }
  unint64_t v15 = v12[3];
  v14.n128_f32[0] = inValue;
  return v13(v15, v10, v9, v8, v6, v14);
}

OSStatus AudioUnitProcess(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v6 = *(void *)&inNumberFrames;
  uint64_t v9 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v9) {
    return -4;
  }
  uint64_t v10 = v9;
  if (*(_WORD *)((**v9)(v9) + 38) != 24949) {
    return -3000;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t (**)(void), AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, AudioBufferList *))(*(void *)((**v10)(v10) + 112) + 128);
  if (!v11) {
    return -4;
  }
  uint64_t v12 = v10[3];
  return v11(v12, ioActionFlags, inTimeStamp, v6, ioData);
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v8 = *(void *)&inElement;
  uint64_t v9 = *(void *)&inScope;
  uint64_t v10 = *(void *)&inID;
  uint64_t v11 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v11) {
    return 560947818;
  }
  uint64_t v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949) {
    return -3000;
  }
  if (!*(void *)(*(void *)((**v12)(v12) + 112) + 24)) {
    return -4;
  }
  if (!v12[3]) {
    return -66740;
  }
  uint64_t v13 = (**v12)(v12);
  if (v10 == 62)
  {
    OSStatus result = 0;
    int v17 = *((unsigned __int8 *)v12 + 80);
    goto LABEL_20;
  }
  if (*((unsigned char *)v12 + 88) && v10 == 65)
  {
    if (*ioDataSize != 4) {
      return -10851;
    }
    OSStatus result = 0;
    int v17 = *((_DWORD *)v12 + 26);
LABEL_20:
    *(_DWORD *)outData = v17;
    return result;
  }
  __n128 v14 = *(uint64_t (**)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t, void *, UInt32 *))(*(void *)(v13 + 112) + 24);
  unint64_t v15 = v12[3];
  return v14(v15, v10, v9, v8, outData, ioDataSize);
}

OSStatus AudioUnitGetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue *outValue)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v6 = *(void *)&inElement;
  uint64_t v7 = *(void *)&inScope;
  uint64_t v8 = *(void *)&inID;
  uint64_t v9 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v9) {
    return 560947818;
  }
  uint64_t v10 = v9;
  if (*(_WORD *)((**v9)(v9) + 38) != 24949) {
    return -3000;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t, AudioUnitParameterValue *))(*(void *)((**v10)(v10) + 112) + 80);
  if (!v11) {
    return -4;
  }
  uint64_t v12 = v10[3];
  return v11(v12, v8, v7, v6, outValue);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v6 = *(void *)&inDataSize;
  uint64_t v8 = *(void *)&inElement;
  uint64_t v9 = *(void *)&inScope;
  uint64_t v10 = *(void *)&inID;
  uint64_t v11 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v11) {
    return 560947818;
  }
  uint64_t v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949) {
    return -3000;
  }
  if (!*(void *)(*(void *)((**v12)(v12) + 112) + 32)) {
    return -4;
  }
  if (!v12[3]) {
    return -66740;
  }
  uint64_t v13 = *(void *)((**v12)(v12) + 112);
  if (*((unsigned char *)v12 + 88) && (v10 - 48) <= 0x11 && ((0x28001u >> (v10 - 48)) & 1) != 0)
  {
    __n128 v14 = v12[3];
    if (v10 == 48)
    {
      int v18 = v12 + 15;
      if (inData)
      {
        _OWORD *v18 = *(_OWORD *)inData;
      }
      else
      {
        *(void *)int v18 = 0;
        v12[16] = 0;
      }
    }
    else
    {
      if (v10 != 63)
      {
        if (v10 == 65)
        {
          if (v6 != 4) {
            return -10851;
          }
          *((_DWORD *)v12 + 26) = *(_DWORD *)inData;
          (*(void (**)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t, const void *, uint64_t))(v13 + 32))(v14, 65, v9, v8, inData, 4);
        }
        return 0;
      }
      if (inData)
      {
        int v19 = (uint64_t (**)(void))_Block_copy(*(const void **)inData);
        int v20 = v12[17];
        v12[17] = v19;
      }
      else
      {
        int v20 = v12[17];
        v12[17] = 0;
      }
    }
    if (v12[17])
    {
      if (*((_DWORD *)v12 + 26))
      {
        unsigned int v21 = (std::__shared_weak_count *)operator new(0xB40uLL);
        v21->__shared_weak_owners_ = 0;
        v21->__shared_owners_ = 0;
        v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2968;
        bzero(&v21[1], 0xB24uLL);
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v30 = 3321888768;
        unint64_t v31 = ___ZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvj_block_invoke_2;
        uint64_t v32 = &__block_descriptor_56_ea8_40c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE_e61_i28__0q8C16r__MIDIEventList_iI_1_MIDIEventPacket_QI_64I____20l;
        unint64_t v33 = v12 + 11;
        unint64_t v34 = v21 + 1;
        char v35 = v21;
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = (uint64_t (**)(void))_Block_copy(&aBlock);
        uint64_t v23 = v12[20];
        v12[20] = v22;

        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        BOOL v24 = 1;
        goto LABEL_39;
      }
      unint64_t v25 = v12[15];
      BOOL v24 = 1;
    }
    else
    {
      unint64_t v25 = v12[15];
      BOOL v24 = v25 != 0;
      if (*((_DWORD *)v12 + 26)) {
        goto LABEL_39;
      }
    }
    if (!v25) {
      return -4;
    }
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v30 = 3221225472;
    unint64_t v31 = ___ZN12APMIDIRouter17handleSetPropertyEPvRK23AudioUnitPluginDispatchjjjPKvj_block_invoke;
    uint64_t v32 = &__block_descriptor_40_e61_i28__0q8C16r__MIDIEventList_iI_1_MIDIEventPacket_QI_64I____20l;
    unint64_t v33 = v12 + 11;
    uint64_t v26 = (uint64_t (**)(void))_Block_copy(&aBlock);
    int32x4_t v27 = v12[20];
    v12[20] = v26;

LABEL_39:
    (*(void (**)(uint64_t (**)(void), uint64_t, void, uint64_t, uint64_t (***)(void), uint64_t))(v13 + 32))(v14, 63, 0, v8, v12 + 20, 8);
    int v28 = *((_DWORD *)v12 + 26);
    switch(v28)
    {
      case 2:
        if (v12[17]) {
          operator new();
        }
        return -4;
      case 1:
        if (v12[17]) {
          operator new();
        }
        return -4;
      case 0:
        if (!v12[15]) {
          return -4;
        }
        v12[18] = (uint64_t (**)(void))APMIDIRouter::handleSetProperty(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::__invoke;
        v12[19] = (uint64_t (**)(void))(v12 + 11);
        break;
    }
    if (v24) {
      (*(void (**)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t, uint64_t (***)(void), uint64_t))(v13 + 32))(v14, 48, v9, v8, v12 + 18, 16);
    }
    return 0;
  }
  unint64_t v16 = *(uint64_t (**)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t, const void *, uint64_t))(v13 + 32);
  int v17 = v12[3];
  return v16(v17, v10, v9, v8, inData, v6);
}

uint64_t APComponentInstance::GetComponent(APComponentInstance *this)
{
  return *((void *)this + 1);
}

BOOL DSPGraph::RingBufferBox::isFrequencySafe(DSPGraph::RingBufferBox *this)
{
  return *((_DWORD *)this + 194) == 0;
}

void DSPGraph::RingBufferBox::initialize(DSPGraph::RingBufferBox *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  DSPGraph::Box::initialize(this);
  if (DSPGraph::getLog(void)::onceToken != -1) {
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_9991);
  }
  CFAllocatorRef v2 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v15 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 648))(this);
    int v16 = *((_DWORD *)this + 194);
    int v17 = *((_DWORD *)this + 193);
    int v18 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v18 = (void *)*v18;
    }
    int v19 = 134219010;
    int v20 = (char *)this + 808;
    __int16 v21 = 1024;
    int v22 = v15;
    __int16 v23 = 1024;
    int v24 = v16;
    __int16 v25 = 1024;
    int v26 = v17;
    __int16 v27 = 2080;
    int v28 = v18;
    _os_log_debug_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "RingBufferBox::initialize %p   ch %u   nz %4u   cap %4u  %s", (uint8_t *)&v19, 0x28u);
  }
  int v3 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 696))(this);
  unsigned int v4 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 648))(this);
  uint64_t v5 = *((unsigned int *)this + 193);
  if (v3)
  {
    uint64_t v6 = *((unsigned int *)this + 194);
    unsigned int v7 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 656))(this);
    int v8 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 640))(this);
    uint64_t v9 = (DSPGraph::RingBufferBox *)((char *)this + 808);
    unsigned int v10 = v4;
    uint64_t v11 = v5;
    uint64_t v12 = v6;
    unsigned int v13 = v7;
  }
  else
  {
    unsigned int v14 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 656))(this);
    int v8 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 640))(this);
    uint64_t v9 = (DSPGraph::RingBufferBox *)((char *)this + 808);
    unsigned int v10 = v4;
    uint64_t v11 = v5;
    uint64_t v12 = 0;
    unsigned int v13 = v14;
  }
  DSPGraph::RingBuffer::alloc(v9, v10, v11, v12, v13, v8);
}

uint64_t DSPGraph::RingBufferBox::shouldAddRingBufferZeros(DSPGraph::RingBufferBox *this)
{
  return 1;
}

void DSPGraph::RingBuffer::alloc(DSPGraph::RingBuffer *this, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  if (a4 > a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(v16, "alloc");
    DSPGraph::strprintf((DSPGraph *)"numZeroes is greater than buffer capacity %u > %u", v15, a4, a3);
  }
  *((_DWORD *)this + 4) = a3;
  unsigned int v11 = caulk::numeric::exceptional_add<unsigned int>(a3, 1);
  *((_DWORD *)this + 5) = v11;
  *((_DWORD *)this + 6) = a5;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 7) = 0;
  unsigned int v12 = caulk::numeric::exceptional_mul<unsigned int>(v11, a5);
  if (a6) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = a2;
  }
  DSPGraph::SimpleABL::alloc(this, v13, v12, 0);
  if (a4)
  {
    DSPGraph::RingBuffer::initialize(this, a4);
  }
}

void sub_18FECE7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::numeric::exceptional_add<unsigned int>(int a1, int a2)
{
  BOOL v2 = __CFADD__(a1, a2);
  uint64_t result = (a1 + a2);
  if (v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic addition overflow");
  }
  return result;
}

void sub_18FECE8A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::RingBufferBox::reset(DSPGraph::RingBufferBox *this)
{
  if ((*(unsigned int (**)(DSPGraph::RingBufferBox *))(*(void *)this + 696))(this)) {
    int v2 = *((_DWORD *)this + 194);
  }
  else {
    int v2 = 0;
  }
  DSPGraph::RingBuffer::initialize((DSPGraph::RingBufferBox *)((char *)this + 808), v2);
}

void DSPGraph::RingBuffer::initialize(DSPGraph::RingBuffer *this, int a2)
{
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 9) = a2;
  *((_DWORD *)this + 7) = a2;
  int v2 = *(_DWORD **)this;
  if (*(void *)this && *v2)
  {
    unint64_t v4 = 0;
    size_t v5 = (*((_DWORD *)this + 6) * a2);
    uint64_t v6 = 4;
    do
    {
      bzero(*(void **)&v2[v6], v5);
      ++v4;
      int v2 = *(_DWORD **)this;
      v6 += 4;
    }
    while (v4 < **(unsigned int **)this);
  }
}

uint64_t DSPGraph::GraphOutput::numChannels(DSPGraph::GraphOutput *this)
{
  int v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 28);
}

void sub_18FECEA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::GraphOutput::interleaved(DSPGraph::GraphOutput *this)
{
  int v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return (*(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 12) & 0x20) == 0;
}

void sub_18FECEB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphInput::numChannels(DSPGraph::GraphInput *this)
{
  int v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 28);
}

void sub_18FECECB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::GraphInput::interleaved(DSPGraph::GraphInput *this)
{
  int v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return (*(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 12) & 0x20) == 0;
}

void sub_18FECEDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelSplitterBox::initialize(DSPGraph::ChannelSplitterBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v50, "in");
    unint64_t v46 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v46 = (void *)*v46;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v45, v46, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  unint64_t v4 = *(_DWORD **)(result + 120);
  uint64_t v5 = v4[7];
  uint64_t v6 = *((void *)this + 11);
  uint64_t v7 = *((void *)this + 12);
  if (((v7 - v6) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    LODWORD(v10) = 0;
    unint64_t v11 = (v7 - v6) >> 5;
    do
    {
      if (v11 <= v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v50, "out");
        unint64_t v34 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          unint64_t v34 = (void *)*v34;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v33, v34, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v9);
      }
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 + v8) + 40))();
      uint64_t v10 = (*(_DWORD *)(*(void *)(result + 120) + 28) + v10);
      ++v9;
      uint64_t v6 = *((void *)this + 11);
      uint64_t v7 = *((void *)this + 12);
      unint64_t v11 = (v7 - v6) >> 5;
      v8 += 32;
    }
    while (v9 < v11);
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v12 = v4[2];
  if (v12 == 1819304813)
  {
    int v13 = v4[3];
    if ((v13 & 1) == 0) {
      goto LABEL_67;
    }
    int v14 = v4[8];
    if (v14 != 32) {
      goto LABEL_67;
    }
  }
  else
  {
    if (v12 != 1718773105 || (int v14 = v4[8], v14 != 64))
    {
LABEL_67:
      std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v50, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v49, "ChannelSplitterBox input format must be non-interleaved float");
      DSPGraph::ThrowException(1718449215, &v51, 3483, &v50, &v49);
    }
    int v13 = v4[3];
  }
  if ((v13 & 0x20) == 0) {
    goto LABEL_67;
  }
  if (v5 != v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v50, "initialize");
    uint64_t v48 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v48 = (void *)*v48;
    }
    DSPGraph::strprintf((DSPGraph *)"ChannelSplitterBox %s input has %u channels but output has %u channels", v47, v48, v5, v10);
  }
  uint64_t v15 = v7 - v6;
  uint64_t v16 = v15 & 0x1FFFFFFFE0;
  if ((v15 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    unint64_t v19 = v15 >> 5;
    do
    {
      if (v19 <= v18)
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v50, "out");
        char v36 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          char v36 = (void *)*v36;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v35, v36, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v18);
      }
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 + v17) + 40))();
      int v20 = *(_DWORD **)(result + 120);
      int v21 = v20[2];
      if (v21 == 1819304813)
      {
        int v22 = v20[3];
        if ((v22 & 1) == 0 || v20[8] != 32) {
          goto LABEL_46;
        }
      }
      else
      {
        if (v21 != 1718773105 || v20[8] != 64)
        {
LABEL_46:
          std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v50, "initialize");
          uint64_t v32 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            uint64_t v32 = (void *)*v32;
          }
          DSPGraph::strprintf((DSPGraph *)"ChannelSplitterBox %s output format must be non-interleaved float in time- of frequency-domain", v31, v32);
        }
        int v22 = v20[3];
      }
      if ((v22 & 0x20) == 0) {
        goto LABEL_46;
      }
      ++v18;
      uint64_t v6 = *((void *)this + 11);
      uint64_t v15 = *((void *)this + 12) - v6;
      unint64_t v19 = v15 >> 5;
      v17 += 32;
    }
    while (v18 < (v15 >> 5));
    int v12 = v4[2];
    int v14 = v4[8];
    uint64_t v16 = v15 & 0x1FFFFFFFE0;
  }
  if (v12 == 1718773105 && v14 == 64)
  {
    if (v16)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      unint64_t v25 = v15 >> 5;
      do
      {
        if (v25 <= v24)
        {
          std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v50, "out");
          int v44 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            int v44 = (void *)*v44;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v24);
        }
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 + v23) + 40))();
        uint64_t v26 = *(void *)(result + 120);
        if (*(_DWORD *)(v26 + 8) != 1718773105 || *(_DWORD *)(v26 + 32) != 64)
        {
          std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v50, "initialize");
          unint64_t v40 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            unint64_t v40 = (void *)*v40;
          }
          DSPGraph::strprintf((DSPGraph *)"ChannelSplitterBox %s output is in time-domain but input is in frequency-domain", v39, v40);
        }
        ++v24;
        uint64_t v6 = *((void *)this + 11);
        unint64_t v25 = (*((void *)this + 12) - v6) >> 5;
        v23 += 32;
      }
      while (v24 < v25);
    }
  }
  else if (v16)
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    unint64_t v29 = v15 >> 5;
    do
    {
      if (v29 <= v28)
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v50, "out");
        UInt32 v42 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          UInt32 v42 = (void *)*v42;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v41, v42, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v28);
      }
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 + v27) + 40))();
      uint64_t v30 = *(void *)(result + 120);
      if (*(_DWORD *)(v30 + 8) == 1718773105 && *(_DWORD *)(v30 + 32) == 64)
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v50, "initialize");
        char v38 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          char v38 = (void *)*v38;
        }
        DSPGraph::strprintf((DSPGraph *)"ChannelSplitterBox %s output is in frequency-domain but input is in time-domain", v37, v38);
      }
      ++v28;
      uint64_t v6 = *((void *)this + 11);
      unint64_t v29 = (*((void *)this + 12) - v6) >> 5;
      v27 += 32;
    }
    while (v28 < v29);
  }
  return result;
}

void sub_18FECF558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelJoinerBox::initialize(DSPGraph::ChannelJoinerBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v22, "out");
    unint64_t v19 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v19 = (void *)*v19;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v18, v19, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  unint64_t v4 = *(_DWORD **)(result + 120);
  int v5 = v4[3];
  if ((v5 & 0x20) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v22, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v21, "ChannelJoinerBox output format must be de-interleaved");
    DSPGraph::ThrowException(1718449215, &v23, 3392, &v22, &v21);
  }
  int v6 = v4[2];
  if (v6 == 1819304813)
  {
    if ((v5 & 1) == 0 || v4[8] != 32) {
      goto LABEL_38;
    }
  }
  else if (v6 != 1718773105 || v4[8] != 64)
  {
LABEL_38:
    std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v22, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v21, "ChannelJoinerBox output format must be 32-bit floating-point PCM or 'freq'");
    DSPGraph::ThrowException(1718449215, &v23, 3395, &v22, &v21);
  }
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = *((void *)this + 9) - v7;
  if ((v8 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    LODWORD(v11) = 0;
    unint64_t v12 = v8 >> 5;
    while (1)
    {
      if (v12 <= v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v22, "in");
        uint64_t v17 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v17 = (void *)*v17;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v16, v17, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, v10);
      }
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v7 + v9) + 40))();
      int v13 = *(_DWORD **)(result + 120);
      int v14 = v13[3];
      if ((v14 & 0x20) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v22, "initialize");
        std::string::basic_string[abi:ne180100]<0>(&v21, "ChannelJoinerBox input format must be de-interleaved");
        DSPGraph::ThrowException(1718449215, &v23, 3403, &v22, &v21);
      }
      int v15 = v13[2];
      if (v15 == 1819304813)
      {
        if ((v14 & 1) == 0 || v13[8] != 32) {
          goto LABEL_30;
        }
        if (v4[2] == 1718773105 && v4[8] == 64) {
          goto LABEL_29;
        }
      }
      else
      {
        if (v15 != 1718773105 || v13[8] != 64)
        {
LABEL_30:
          std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v22, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v21, "ChannelJoinerBox input format must be 32-bit floating-point PCM or 'freq'");
          DSPGraph::ThrowException(1718449215, &v23, 3406, &v22, &v21);
        }
        if (v4[2] != 1718773105 || v4[8] != 64)
        {
LABEL_29:
          std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v22, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v21, "ChannelJoinerBox input and output formats must be compatible");
          DSPGraph::ThrowException(1718449215, &v23, 3410, &v22, &v21);
        }
      }
      uint64_t v11 = (v13[7] + v11);
      ++v10;
      uint64_t v7 = *((void *)this + 8);
      unint64_t v12 = (*((void *)this + 9) - v7) >> 5;
      v9 += 32;
      if (v10 >= v12) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v11 = 0;
LABEL_26:
  if (v4[7] != v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v22, "initialize");
    DSPGraph::strprintf((DSPGraph *)"ChannelJoinerBox channel mismatch: can't join %u input channels into %u output channels", v20, v11, v4[7]);
  }
  return result;
}

void sub_18FECFA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::GraphInput::initialize(DSPGraph::GraphInput *this)
{
  if (*((unsigned char *)this + 913))
  {
    if (*((void *)this + 115)) {
      uint64_t v2 = *((void *)this + 115);
    }
    else {
      uint64_t v2 = 4130;
    }
    int v3 = (void *)((char *)this + 888);
    if (*((char *)this + 911) < 0) {
      int v3 = (void *)*v3;
    }
    uint64_t v4 = *((void *)this + 11);
    if (*((void *)this + 12) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v12, "out");
      unint64_t v10 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        unint64_t v10 = (void *)*v10;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v9, v10, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v5 = *(unsigned int *)(*((void *)this + 1) + 940);
    uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 120);
    if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1) {
      dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_6426);
    }
    if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction) {
      uint64_t v7 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v2, 0, v3, v5, 0, v6);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *((void *)this + 110);
    *((void *)this + 110) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t v7 = *((void *)this + 110);
    }
    if (!v7)
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_GraphIOBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v11, "NewAudioCapturer for DSP graph raw input returned null");
      DSPGraph::ThrowException(1852204065, &v13, 105, &v12, &v11);
    }
  }
  DSPGraph::RingBufferBox::initialize(this);
}

void sub_18FECFD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticSumBox>::initialize(uint64_t a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) == 0x40 && ((*(void *)(a1 + 96) - *(void *)(a1 + 88)) & 0x1FFFFFFFE0) == 0x20)
  {
    if (v3 != v2)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      uint64_t v5 = *(void *)(a1 + 64);
      if ((unint64_t)(*(void *)(a1 + 72) - v5) > 0x20)
      {
        int v6 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
        if (v6 == *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v5 + 32) + 40))() + 120) + 28))
        {
          uint64_t v7 = *(void *)(a1 + 64);
          if (*(void *)(a1 + 72) != v7)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
            uint64_t v9 = *(void *)(a1 + 88);
            if (*(void *)(a1 + 96) != v9)
            {
              int v10 = *(_DWORD *)(*(void *)(v8 + 120) + 28);
              if (v10 == *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 120)
                                    + 28))
              {
                uint64_t v11 = *(void *)(a1 + 64);
                if (*(void *)(a1 + 72) != v11)
                {
                  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
                  uint64_t v13 = *(void *)(a1 + 64);
                  if ((unint64_t)(*(void *)(a1 + 72) - v13) > 0x20)
                  {
                    int v14 = *(_DWORD *)(*(void *)(v12 + 120) + 8);
                    int v15 = *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v13 + 32) + 40))() + 120) + 8);
                    if (v14 != 1819304813 || v15 != 1819304813)
                    {
                      if (v14 == 1819304813 && v15 != 1819304813) {
                        operator new();
                      }
                      operator new();
                    }
                    operator new();
                  }
                  std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                  std::string::basic_string[abi:ne180100]<0>(v53, "in");
                  char v36 = (void *)(a1 + 32);
                  if (*(char *)(a1 + 55) < 0) {
                    char v36 = (void *)*v36;
                  }
                  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v35, v36, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
                }
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "in");
                unint64_t v34 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  unint64_t v34 = (void *)*v34;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v33, v34, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v51, "initialize");
              uint64_t v30 = *(void *)(a1 + 64);
              if (*(void *)(a1 + 72) == v30)
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "in");
                uint64_t v32 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v32 = (void *)*v32;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v31, v32, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
              uint64_t v43 = *(void *)(a1 + 88);
              if (*(void *)(a1 + 96) == v43)
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "out");
                uint64_t v45 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v45 = (void *)*v45;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v44, v45, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
              }
              uint64_t v48 = *(unsigned int *)(*(void *)(v42 + 120) + 28);
              uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 40))(v43);
              DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v50, v48, *(unsigned int *)(*(void *)(v49 + 120) + 28));
            }
            std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(v53, "out");
            unint64_t v29 = (void *)(a1 + 32);
            if (*(char *)(a1 + 55) < 0) {
              unint64_t v29 = (void *)*v29;
            }
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v28, v29, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
          }
          std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v53, "in");
          uint64_t v27 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v27 = (void *)*v27;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v26, v27, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v51, "initialize");
        uint64_t v23 = *(void *)(a1 + 64);
        if (*(void *)(a1 + 72) == v23)
        {
          std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v53, "in");
          unint64_t v25 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            unint64_t v25 = (void *)*v25;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v24, v25, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
        uint64_t v38 = *(void *)(a1 + 64);
        if ((unint64_t)(*(void *)(a1 + 72) - v38) > 0x20)
        {
          uint64_t v39 = *(unsigned int *)(*(void *)(v37 + 120) + 28);
          uint64_t v40 = (*(uint64_t (**)(void))(*(void *)(v38 + 32) + 40))();
          DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v41, v39, *(unsigned int *)(*(void *)(v40 + 120) + 28));
        }
        std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v53, "in");
        uint64_t v47 = (void *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          uint64_t v47 = (void *)*v47;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
      }
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "in");
      long long v22 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        long long v22 = (void *)*v22;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v21, v22, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v53, "in");
    int v20 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v20 = (void *)*v20;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v19, v20, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v53, "initialize");
  DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", v18, (*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, (*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5);
}

void sub_18FED072C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::initialize(uint64_t a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    uint64_t v37 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v36, v37, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v4 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "out");
    uint64_t v39 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v39 = (void *)*v39;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v5 = *(void *)(v3 + 120);
  uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 120);
  *(unsigned char *)(a1 + 813) = 1;
  int v7 = *(_DWORD *)(v5 + 8);
  if (v7 == 1819304813)
  {
    int v8 = *(_DWORD *)(v5 + 12);
    if ((v8 & 1) == 0) {
      goto LABEL_62;
    }
    int v9 = *(_DWORD *)(v5 + 32);
    if (v9 != 32) {
      goto LABEL_62;
    }
  }
  else
  {
    if (v7 != 1718773105 || (int v9 = *(_DWORD *)(v5 + 32), v9 != 64))
    {
LABEL_62:
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v46, "GainBox input format must be non-interleaved float or 'freq'");
      DSPGraph::ThrowException(1718449215, &v48, 2630, &v47, (long long *)&v46);
    }
    int v8 = *(_DWORD *)(v5 + 12);
  }
  if ((v8 & 0x20) == 0) {
    goto LABEL_62;
  }
  int v10 = *(_DWORD *)(v6 + 8);
  if (v10 == 1819304813)
  {
    int v11 = *(_DWORD *)(v6 + 12);
    if ((v11 & 1) == 0) {
      goto LABEL_63;
    }
    int v12 = *(_DWORD *)(v6 + 32);
    if (v12 != 32) {
      goto LABEL_63;
    }
  }
  else
  {
    if (v10 != 1718773105 || (int v12 = *(_DWORD *)(v6 + 32), v12 != 64))
    {
LABEL_63:
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v46, "GainBox output format must be non-interleaved float or 'freq'");
      DSPGraph::ThrowException(1718449215, &v48, 2633, &v47, (long long *)&v46);
    }
    int v11 = *(_DWORD *)(v6 + 12);
  }
  if ((v11 & 0x20) == 0) {
    goto LABEL_63;
  }
  if (*(double *)v5 == 0.0)
  {
    if (v7 != v10) {
      goto LABEL_55;
    }
  }
  else
  {
    BOOL v13 = *(double *)v6 == 0.0;
    if (*(double *)v5 == *(double *)v6) {
      BOOL v13 = 1;
    }
    if (v7 != v10 || !v13)
    {
LABEL_55:
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      CA::StreamDescription::AsString((CA::StreamDescription *)&v42, (void *)v5, v28, v29);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v43, "GainBox input and output formats don't match (", &v42);
      *(void *)&double v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v44, &v43, " != ").n128_u64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)v40, (void *)v6, v30, v31);
      if ((v41 & 0x80u) == 0) {
        uint64_t v32 = (const std::string::value_type *)v40;
      }
      else {
        uint64_t v32 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v33 = v41;
      }
      else {
        std::string::size_type v33 = v40[1];
      }
      unint64_t v34 = std::string::append(&v44, v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v46, &v45, ")");
      DSPGraph::ThrowException(1718449215, &v48, 2638, &v47, (long long *)&v46);
    }
  }
  int v14 = *(_DWORD *)(v5 + 16);
  if (v14)
  {
    int v15 = *(_DWORD *)(v6 + 16);
    if (v15 && v14 != v15) {
      goto LABEL_55;
    }
  }
  int v17 = *(_DWORD *)(v5 + 20);
  if (v17)
  {
    int v18 = *(_DWORD *)(v6 + 20);
    if (v18 && v17 != v18) {
      goto LABEL_55;
    }
  }
  int v20 = *(_DWORD *)(v5 + 24);
  if (v20)
  {
    int v21 = *(_DWORD *)(v6 + 24);
    if (v21 && v20 != v21) {
      goto LABEL_55;
    }
  }
  int v23 = *(_DWORD *)(v5 + 28);
  if (v23)
  {
    int v24 = *(_DWORD *)(v6 + 28);
    if (v23 != v24 && v24 != 0 || v9 != v12) {
      goto LABEL_55;
    }
  }
  else if (v9 != v12)
  {
    goto LABEL_55;
  }
  BOOL result = CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v5, (const AudioStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)1, 1);
  if (!result) {
    goto LABEL_55;
  }
  return result;
}

void sub_18FED0CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 97) < 0) {
    operator delete(*(void **)(v42 - 120));
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (*(char *)(v42 - 49) < 0) {
    operator delete(*(void **)(v42 - 72));
  }
  _Unwind_Resume(exception_object);
}

BOOL CA::Implementation::EquivalentFormatFlags(CA::Implementation *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, char a4)
{
  if (a4)
  {
    int v4 = *((_DWORD *)this + 3);
    int32x4_t v5 = *(int32x4_t *)&a2->mFormatID;
    v5.i64[1] = *((void *)this + 1);
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5)))) {
      return 1;
    }
  }
  else
  {
    int v4 = *((_DWORD *)this + 3);
  }
  if (*((_DWORD *)this + 2) != 1819304813) {
    return v4 == a2->mFormatFlags;
  }
  int v7 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) == 0) {
    int v7 = v4;
  }
  if (a3) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v7 & 0xFFFFFFBF;
  }
  unsigned int v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    int v10 = *((_DWORD *)this + 7);
    if ((v4 & 0x20) != 0) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = *((_DWORD *)this + 7);
    }
    if (v11)
    {
      unsigned int v9 = 8 * (v9 / v11);
      unsigned int v12 = *((_DWORD *)this + 8);
      int v13 = v8 | 8;
      BOOL v14 = v9 == v12;
      goto LABEL_21;
    }
    unsigned int v9 = 0;
    unsigned int v12 = *((_DWORD *)this + 8);
    int v13 = v8 | 8;
  }
  else
  {
    int v13 = v8 | 8;
    int v10 = *((_DWORD *)this + 7);
    unsigned int v12 = *((_DWORD *)this + 8);
  }
  BOOL v14 = v12 == 0;
LABEL_21:
  if (v14) {
    unsigned int v8 = v13;
  }
  BOOL v16 = (v12 & 7) == 0 && v9 == v12;
  unsigned int v17 = v8 & 0xFFFFFFEF;
  if (!v16) {
    unsigned int v17 = v8;
  }
  if (v17) {
    v17 &= ~4u;
  }
  BOOL v18 = (v17 & 8) == 0 || v12 > 8;
  int v19 = v17 & 2;
  if (v18) {
    int v19 = v17;
  }
  if (v10 == 1) {
    unsigned int v20 = v19 & 0xFFFFFFDF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (!v20) {
    unsigned int v20 = 0x80000000;
  }
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  if (a2->mFormatID != 1819304813) {
    return v20 == mFormatFlags;
  }
  AudioFormatFlags v22 = mFormatFlags & 0x7FFFFFFF;
  if ((mFormatFlags & 0x7FFFFFFF) == 0) {
    AudioFormatFlags v22 = a2->mFormatFlags;
  }
  if (a3) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v22 & 0xFFFFFFBF;
  }
  UInt32 mBytesPerFrame = a2->mBytesPerFrame;
  if (!mBytesPerFrame)
  {
    int v28 = v23 | 8;
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
LABEL_54:
    BOOL v29 = mBitsPerChannel == 0;
    goto LABEL_55;
  }
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 v26 = 1;
  }
  else {
    UInt32 v26 = a2->mChannelsPerFrame;
  }
  if (!v26)
  {
    UInt32 mBytesPerFrame = 0;
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
    int v28 = v23 | 8;
    goto LABEL_54;
  }
  UInt32 mBytesPerFrame = 8 * (mBytesPerFrame / v26);
  UInt32 mBitsPerChannel = a2->mBitsPerChannel;
  int v28 = v23 | 8;
  BOOL v29 = mBytesPerFrame == mBitsPerChannel;
LABEL_55:
  if (v29) {
    unsigned int v23 = v28;
  }
  BOOL v30 = (mBitsPerChannel & 7) == 0 && mBytesPerFrame == mBitsPerChannel;
  unsigned int v31 = v23 & 0xFFFFFFEF;
  if (!v30) {
    unsigned int v31 = v23;
  }
  if (v31) {
    v31 &= ~4u;
  }
  BOOL v32 = (v31 & 8) == 0 || mBitsPerChannel > 8;
  int v33 = v31 & 2;
  if (v32) {
    int v33 = v31;
  }
  if (mChannelsPerFrame == 1) {
    unsigned int v34 = v33 & 0xFFFFFFDF;
  }
  else {
    unsigned int v34 = v33;
  }
  if (v34) {
    AudioFormatFlags mFormatFlags = v34;
  }
  else {
    AudioFormatFlags mFormatFlags = 0x80000000;
  }
  return v20 == mFormatFlags;
}

void DSPGraph::GraphOutput::reset(DSPGraph::GraphOutput *this)
{
  *((void *)this + 107) = 0;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

float DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::reset(uint64_t a1)
{
  float v1 = 0.0;
  if (!*(unsigned char *)(a1 + 780)) {
    float v1 = 1.0;
  }
  float result = *(float *)(a1 + 776) * v1;
  *(float *)(a1 + 804) = result;
  *(_WORD *)(a1 + 812) = 257;
  return result;
}

CFNumberRef ___ZN14IPCAURegistrar43ApplicationStateChangedNotificationCallbackEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);
  *(void *)uint64_t v6 = 0;
  CFNumberRef result = GetNumber(v2, (const __CFString *)*MEMORY[0x1E4FA6CE0], &v6[1]);
  if (v6[1] == 8)
  {
    CFNumberRef result = GetNumber(v2, (const __CFString *)*MEMORY[0x1E4FA6CF8], v6);
    if (v6[0])
    {
      for (uint64_t i = *(void *)(v1 + 232); i != *(void *)(v1 + 240); i += 8)
      {
        if (*(_DWORD *)(*(void *)i + 12) == v6[0])
        {
          int32x4_t v5 = 0;
          CFNumberRef result = (const __CFNumber *)GetString(v2, (const __CFString *)*MEMORY[0x1E4FA6CF0], (const __CFString **)&v5);
          if (v5) {
            return (const __CFNumber *)IPCAURegistrar::RecordApplicationActiveTime((CFMutableDictionaryRef *)v1, v5);
          }
          return result;
        }
      }
    }
  }
  return result;
}

CFNumberRef GetNumber(const __CFDictionary *a1, const __CFString *a2, unsigned int *a3)
{
  *a3 = 0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberRef v5 = result;
    CFTypeID v6 = CFGetTypeID(result);
    if (v6 == CFNumberGetTypeID()) {
      return (const __CFNumber *)(CFNumberGetValue(v5, kCFNumberSInt32Type, a3) != 0);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t acv2::CodecConverterFactory::GetAvailableEncodeSampleRatesInfo(AudioComponent *this, unsigned int *a2)
{
  AudioComponentInstance outInstance = 0;
  uint64_t PropertyInfo = AudioComponentInstanceNew(this[4], &outInstance);
  if (!PropertyInfo)
  {
    Boolean outWritable = 0;
    uint64_t PropertyInfo = AudioCodecGetPropertyInfo(outInstance, 0x616F7372u, a2, &outWritable);
    AudioComponentInstanceDispose(outInstance);
  }
  return PropertyInfo;
}

uint64_t acv2::CodecConverterFactory::GetAvailableEncodeSampleRates(AudioComponent *this, unsigned int *a2, void *a3)
{
  AudioComponentInstance outInstance = 0;
  uint64_t Property = AudioComponentInstanceNew(this[4], &outInstance);
  if (!Property)
  {
    uint64_t Property = AudioCodecGetProperty(outInstance, 0x616F7372u, a2, a3);
    AudioComponentInstanceDispose(outInstance);
  }
  return Property;
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  if (!inInstance) {
    return -50;
  }
  uint64_t v1 = (*(uint64_t (**)(AudioComponentInstance))(*(void *)inInstance + 8))(inInstance);
  if (!v1) {
    return -50;
  }
  CFDictionaryRef v2 = (void *)v1;
  uint64_t v3 = (void *)MEMORY[0x192FC9400]();
  uint64_t v4 = v2[3];
  if (v4) {
    (*(void (**)(void))(v4 + 8))();
  }
  atomic_fetch_add((atomic_uint *volatile)(v2[1] + 136), 0xFFFFFFFF);
  (*(void (**)(void *))(*v2 + 24))(v2);
  return 0;
}

void APComponentInstance::~APComponentInstance(RenderContextChangeGenerator *this)
{
  this->mLastWorkgroup = &unk_1EDF92810;
  APMIDIRouter::~APMIDIRouter((APMIDIRouter *)&this[5].mObserver);
  mObserver = (std::__shared_weak_count *)this[4].mObserver;
  if (mObserver) {
    std::__shared_weak_count::__release_shared[abi:ne180100](mObserver);
  }
  if (LOBYTE(this[3].mLastWorkgroup)) {
    RenderContextChangeGenerator::~RenderContextChangeGenerator(this + 2);
  }
  mLastWorkgroup = (std::__shared_weak_count *)this[1].mLastWorkgroup;
  if (mLastWorkgroup) {
    std::__shared_weak_count::__release_shared[abi:ne180100](mLastWorkgroup);
  }
  JUMPOUT(0x192FC8940);
}

{
  std::__shared_weak_count *mObserver;
  std::__shared_weak_count *mLastWorkgroup;

  this->mLastWorkgroup = &unk_1EDF92810;
  APMIDIRouter::~APMIDIRouter((APMIDIRouter *)&this[5].mObserver);
  mObserver = (std::__shared_weak_count *)this[4].mObserver;
  if (mObserver) {
    std::__shared_weak_count::__release_shared[abi:ne180100](mObserver);
  }
  if (LOBYTE(this[3].mLastWorkgroup)) {
    RenderContextChangeGenerator::~RenderContextChangeGenerator(this + 2);
  }
  mLastWorkgroup = (std::__shared_weak_count *)this[1].mLastWorkgroup;
  if (mLastWorkgroup) {
    std::__shared_weak_count::__release_shared[abi:ne180100](mLastWorkgroup);
  }
}

void APMIDIRouter::~APMIDIRouter(APMIDIRouter *this)
{
  (*(void (**)(char *))(*((void *)this + 17) + 24))((char *)this + 144);
  (*(void (**)(char *))(*((void *)this + 12) + 24))((char *)this + 104);
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    MEMORY[0x192FC8940](v2, 0x1000C40C4F964E4);
  }
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    MEMORY[0x192FC8940](v3, 0xC400A2AC0F1);
  }

  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    MEMORY[0x192FC8940](v4, 0x1000C40F03D91BDLL);
  }
}

OSStatus AudioCodecGetPropertyInfo(AudioCodec inCodec, AudioCodecPropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  if (!inCodec) {
    return -50;
  }
  uint64_t v6 = *(void *)&inPropertyID;
  int v7 = (uint64_t (***)(void))(*(uint64_t (**)(AudioCodec))(*(void *)inCodec + 8))(inCodec);
  if (!v7) {
    return 560947818;
  }
  unsigned int v8 = v7;
  unsigned int v9 = **(uint64_t (***)(uint64_t (**)(void), uint64_t, UInt32 *, Boolean *))((**v7)(v7) + 112);
  if (!v9) {
    return -4;
  }
  int v10 = v8[3];
  return v9(v10, v6, outSize, outWritable);
}

OSStatus AudioCodecGetProperty(AudioCodec inCodec, AudioCodecPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  if (!inCodec) {
    return -50;
  }
  uint64_t v6 = *(void *)&inPropertyID;
  int v7 = (uint64_t (***)(void))(*(uint64_t (**)(AudioCodec))(*(void *)inCodec + 8))(inCodec);
  if (!v7) {
    return 560947818;
  }
  unsigned int v8 = v7;
  unsigned int v9 = *(uint64_t (**)(uint64_t (**)(void), uint64_t, UInt32 *, void *))(*(void *)((**v7)(v7) + 112)
                                                                                            + 8);
  if (!v9) {
    return 0;
  }
  int v10 = v8[3];
  return v9(v10, v6, ioPropertyDataSize, outPropertyData);
}

uint64_t acv2::ConverterRegistry::MakeFactories(acv2::ConverterRegistry *this, const AudioClassDescription *a2, int a3, double a4)
{
  uint64_t v6 = 0;
  char v7 = 0;
  *(double *)&inDesc.componentType = a4;
  inDesc.componentFlags = 0;
  inDesc.componentFlagsMask = 0;
  inDesc.componentManufacturer = a2;
  while (1)
  {
    Next = AudioComponentFindNext(v6, &inDesc);
    if (!Next) {
      break;
    }
    uint64_t v6 = Next;
    if (Impl_AudioGetComponentInfo(Next, &v14, 0)) {
      break;
    }
    CFTypeRef cf = 0;
    if (Impl_AudioGetComponentInfo(v6, 0, (const __CFString **)&cf))
    {
      if (cf) {
        CFRelease(cf);
      }
      return v7 & 1;
    }
    uint64_t v9 = *((void *)this + 1);
    uint64_t v10 = *((void *)this + 2);
    if (v9 == v10)
    {
LABEL_14:
      if (v14.componentType == 1634037347) {
        operator new();
      }
      if (v14.componentType == 1633969507) {
        operator new();
      }
      char v7 = 1;
    }
    else
    {
      while (1)
      {
        unsigned int v11 = *(_DWORD **)v9;
        if (*(_DWORD *)(*(void *)v9 + 12) == a3
          && (!v14.componentType || v11[4] == v14.componentType)
          && (!v14.componentSubType || v11[5] == v14.componentSubType)
          && (!v14.componentManufacturer || v11[6] == v14.componentManufacturer))
        {
          break;
        }
        v9 += 8;
        if (v9 == v10) {
          goto LABEL_14;
        }
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  return v7 & 1;
}

void sub_18FED17CC(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10E1C40DADF1D27);
  _Unwind_Resume(a1);
}

void RegistryAccess::RegistryAccess(RegistryAccess *this)
{
  RegistryAccess::instance(void)::inst = 0;
  qword_1EB3D4FB0 = 0;
  operator new();
}

void sub_18FED1888(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FC8940](v2, 0x1081C408399A26FLL);
  uint64_t v4 = qword_1EB3D4FB0;
  qword_1EB3D4FB0 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

acv2::ConverterRegistry *acv2::ConverterRegistry::ConverterRegistry(acv2::ConverterRegistry *this)
{
  *(void *)this = &unk_1EDF956D8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  qmemcpy((char *)this + 40, "mcplmcplvnocmcpllppa", 20);
  *((void *)this + 4) = &unk_1EDF95B28;
  *((_WORD *)this + 32) = 0;
  acv2::ConverterRegistry::AddFactory(this, (acv2::ConverterRegistry *)((char *)this + 32));
  return this;
}

void sub_18FED1978(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  CFNumberRef v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void acv2::ConverterRegistry::AddFactory(acv2::ConverterRegistry *this, acv2::ConverterFactory *a2)
{
  CFNumberRef v5 = (void *)*((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *((void *)this + 1);
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    *int v13 = a2;
    uint64_t v6 = v13 + 1;
    BOOL v16 = (char *)*((void *)this + 1);
    int v15 = (char *)*((void *)this + 2);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--int v13 = v17;
      }
      while (v15 != v16);
      int v15 = (char *)*((void *)this + 1);
    }
    *((void *)this + 1) = v13;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  *((void *)this + 2) = v6;
}

acv2::CodecConverterFactory *acv2::CodecConverterFactory::CodecConverterFactory(acv2::CodecConverterFactory *this, int a2, int a3, OpaqueAudioComponent *a4, AudioComponentDescription *a5, CFTypeRef cf)
{
  OSType componentManufacturer = a5->componentManufacturer;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((void *)this + 2) = *(void *)&a5->componentType;
  *((_DWORD *)this + 6) = componentManufacturer;
  *(void *)this = &unk_1EDF95F48;
  *((void *)this + 4) = a4;
  if (cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((acv2::CodecConverterFactory *)((char *)this + 40), cf);
  }
  else
  {
    *((void *)this + 5) = 0;
  }
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 52) = 0;
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 60) = 0;
  *((unsigned char *)this + 64) = 0;
  *((unsigned char *)this + 68) = 0;
  *((unsigned char *)this + 72) = 0;
  return this;
}

void sub_18FED1DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<APComponent>>,std::reverse_iterator<std::shared_ptr<APComponent>*>,std::reverse_iterator<std::shared_ptr<APComponent>*>,std::reverse_iterator<std::shared_ptr<APComponent>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

OpaqueAudioComponent *__AudioConverterPrepare_block_invoke_2()
{
  uint64_t result = 0;
  *(_OWORD *)&v1.componentType = xmmword_1901C6160;
  v1.componentFlagsMask = 0;
  do
    uint64_t result = AudioComponentFindNext(result, &v1);
  while (result);
  return result;
}

double DSPGraph::Box::totalLatencyInSeconds(DSPGraph::Box *this)
{
  uint64_t v2 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 72))(this);
  return (double)(DSPGraph::Box::upstreamLatencyInTicks(this) + v2)
       / (double)*(unint64_t *)(*((void *)this + 1) + 696);
}

void DSPGraph::AUBox::open(DSPGraph::AUBox *this)
{
  if (*((void *)this + 106)) {
    return;
  }
  Next = AudioComponentFindNext(0, (const AudioComponentDescription *)((char *)this + 824));
  if (!Next)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v17, "open");
    std::operator+<char>();
    DSPGraph::ThrowException(1633906209, &v18, 1940, &v17, &v16);
  }
  uint64_t v3 = (AudioComponentInstance *)((char *)this + 848);
  OSStatus v4 = AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 106);
  if (v4)
  {
    int v12 = v4;
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v17, "open");
    std::operator+<char>();
    DSPGraph::ThrowException(v12, &v18, 1945, &v17, &v16);
  }
  if (!*v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v17, "open");
    std::operator+<char>();
    DSPGraph::ThrowException(1633906209, &v18, 1948, &v17, &v16);
  }
  BOOL v5 = AudioComponentInstanceCanDo(*v3, 20)
    && ((*((void *)this + 9) - *((void *)this + 8)) & 0x1FFFFFFFE0) == 0x20
    && ((*((void *)this + 12) - *((void *)this + 11)) & 0x1FFFFFFFE0) == 32;
  *((unsigned char *)this + 856) = v5;
  CFStringRef v6 = (CFStringRef)((char *)this + 32);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    size_t v7 = strlen((const char *)this + 32);
    goto LABEL_12;
  }
  CFStringRef v6 = (CFStringRef)v6->isa;
  size_t v7 = strlen((const char *)v6);
  if (v6)
  {
LABEL_12:
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)v6, v7, 0x8000100u, 0);
    CFStringRef v15 = v6;
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    goto LABEL_13;
  }
  CFStringRef v15 = 0;
LABEL_13:
  CFStringRef v14 = v6;
  (*(void (**)(DSPGraph::AUBox *, uint64_t, void, void, uint64_t, CFStringRef *))(*(void *)this + 312))(this, 54, 0, 0, 8, &v14);
  uint64_t v8 = (*((void *)this + 9) - *((void *)this + 8)) >> 5;
  uint64_t v9 = (*((void *)this + 12) - *((void *)this + 11)) >> 5;
  int v21 = v9;
  int v22 = v8;
  uint64_t v20 = 0;
  int v19 = 4;
  (*(void (**)(DSPGraph::AUBox *, uint64_t, uint64_t, void, int *, char *))(*(void *)this + 304))(this, 11, 1, 0, &v19, (char *)&v20 + 4);
  (*(void (**)(DSPGraph::AUBox *, uint64_t, uint64_t, void, int *, uint64_t *))(*(void *)this + 304))(this, 11, 2, 0, &v19, &v20);
  if (HIDWORD(v20) != v8)
  {
    int v10 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, uint64_t, void, uint64_t, int *))(*(void *)this
                                                                                                 + 312))(this, 11, 1, 0, 4, &v22);
    if (v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v17, "setElementCountOnUnit");
      std::string::basic_string[abi:ne180100]<0>(&v16, "setProperty failed");
      DSPGraph::ThrowException(v10, &v18, 2075, &v17, &v16);
    }
  }
  if (v20 != v9)
  {
    int v11 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, uint64_t, void, uint64_t, int *))(*(void *)this
                                                                                                 + 312))(this, 11, 2, 0, 4, &v21);
    if (v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v17, "setElementCountOnUnit");
      std::string::basic_string[abi:ne180100]<0>(&v16, "setProperty failed");
      DSPGraph::ThrowException(v11, &v18, 2082, &v17, &v16);
    }
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_18FED23A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

double DSPGraph::Graph::getLatencyInSeconds(DSPGraph::Graph *this)
{
  if (((*((void *)this + 39) - *((void *)this + 38)) & 0x7FFFFFFF8) == 0) {
    return 0.0;
  }
  unsigned int v2 = 0;
  double v3 = 0.0;
  do
  {
    OSStatus v4 = (DSPGraph::Box *)DSPGraph::Graph::out(this, v2);
    uint64_t v5 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)v4 + 72))(v4);
    unint64_t v6 = DSPGraph::Box::upstreamLatencyInTicks(v4);
    double v7 = (double)*(unint64_t *)(*((void *)v4 + 1) + 696);
    if ((double)(v6 + v5) / v7 >= v3) {
      double v3 = (double)(v6 + v5) / v7;
    }
    ++v2;
  }
  while (v2 < ((*((void *)this + 39) - *((void *)this + 38)) >> 3));
  return v3;
}

uint64_t DSPGraph::InputPort::upstreamLatencyInTicks(DSPGraph::InputPort *this)
{
  AudioComponentDescription v1 = *(DSPGraph::Box **)(*(void *)((*(uint64_t (**)(DSPGraph::InputPort *))(*(void *)this + 40))(this)
                                     + 8)
                         + 8);
  uint64_t v2 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)v1 + 72))(v1);
  return DSPGraph::Box::upstreamLatencyInTicks(v1) + v2;
}

unint64_t DSPGraph::Box::upstreamLatencyInTicks(DSPGraph::Box *this)
{
  if (*((unsigned char *)this + 760)) {
    return *((void *)this + 94);
  }
  double v3 = (DSPGraph::InputPort *)*((void *)this + 8);
  OSStatus v4 = (DSPGraph::InputPort *)*((void *)this + 9);
  if (v3 == v4)
  {
    unint64_t v2 = 0;
  }
  else
  {
    unint64_t v2 = 0;
    do
    {
      unint64_t v5 = DSPGraph::InputPort::upstreamLatencyInTicks(v3);
      if (v2 <= v5) {
        unint64_t v2 = v5;
      }
      double v3 = (DSPGraph::InputPort *)((char *)v3 + 32);
    }
    while (v3 != v4);
  }
  *((void *)this + 94) = v2;
  *((unsigned char *)this + 760) = 1;
  return v2;
}

uint64_t DSPGraph::Box::selfLatencyInTicks(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::AUBox::selfLatencyInTicks(DSPGraph::AUBox *this)
{
  double v8 = 0.0;
  int v7 = 8;
  int v2 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, void, void, int *, double *))(*(void *)this + 304))(this, 12, 0, 0, &v7, &v8);
  double v3 = v8;
  if (v2) {
    double v3 = 0.0;
  }
  uint64_t v4 = llround(v3 * (double)*(unint64_t *)(*((void *)this + 1) + 696));
  if (v4 <= 0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (v4 >= 0) {
    return v4;
  }
  else {
    return v5;
  }
}

uint64_t DSPGraph::AUBox::getProperty(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, unsigned int *a5, void *outData)
{
  UInt32 ioDataSize = *a5;
  uint64_t result = AudioUnitGetProperty(this[106], a2, a3, a4, outData, &ioDataSize);
  *a5 = ioDataSize;
  return result;
}

unint64_t DSPGraph::RingBufferBox::selfLatencyInTicks(DSPGraph::RingBufferBox *this)
{
  uint64_t v1 = *((unsigned int *)this + 194);
  unint64_t v2 = *(void *)(*((void *)this + 1) + 696);
  return v2 / (*(unsigned int (**)(DSPGraph::RingBufferBox *))(*(void *)this + 664))(this) * v1;
}

uint64_t DSPGraph::GraphOutput::ringBufferSampleRate(DSPGraph::GraphOutput *this)
{
  double v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    unint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
}

void sub_18FED2870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

Boolean AudioComponentInstanceCanDo(AudioComponentInstance inInstance, SInt16 inSelectorID)
{
  if (inInstance)
  {
    uint64_t v2 = inSelectorID;
    inInstance = (AudioComponentInstance)(*(uint64_t (**)(AudioComponentInstance))(*(void *)inInstance + 8))(inInstance);
    if (inInstance)
    {
      AudioComponentInstance v3 = inInstance;
      uint64_t v4 = (void *)APComponentInstance::selectorToMethodPtr(*((APComponentInstance **)inInstance + 1), *((std::__shared_weak_count **)inInstance + 2), v2);
      if (v4)
      {
        BOOL v5 = *v4 == 0;
      }
      else
      {
        uint64_t v6 = *((void *)v3 + 3);
        if (!v6)
        {
          LOBYTE(inInstance) = 0;
          return inInstance;
        }
        BOOL v5 = (*(uint64_t (**)(uint64_t))(v6 + 16))(v2) == 0;
      }
      LOBYTE(inInstance) = !v5;
    }
  }
  return inInstance;
}

uint64_t APComponentInstance::selectorToMethodPtr(APComponentInstance *this, std::__shared_weak_count *a2, int a3)
{
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((_WORD *)this + 19) == 24949)
  {
    uint64_t v3 = *((void *)this + 14);
    switch(a3)
    {
      case 1:
        break;
      case 2:
        v3 += 8;
        break;
      case 3:
        v3 += 16;
        break;
      case 4:
        v3 += 24;
        break;
      case 5:
        v3 += 32;
        break;
      case 6:
        v3 += 80;
        break;
      case 7:
        v3 += 88;
        break;
      case 9:
        v3 += 104;
        break;
      case 10:
        v3 += 40;
        break;
      case 11:
        v3 += 48;
        break;
      case 14:
        v3 += 112;
        break;
      case 15:
        v3 += 64;
        break;
      case 16:
        v3 += 72;
        break;
      case 17:
        v3 += 96;
        break;
      case 18:
        v3 += 56;
        break;
      case 20:
        v3 += 128;
        break;
      case 21:
        v3 += 136;
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    uint64_t v3 = 0;
  }
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  return v3;
}

uint64_t OpenCodecComponent(OSType a1, OpaqueAudioComponentInstance **a2, OSType a3)
{
  inDesc.componentFlagsMask = 0;
  inDesc.componentType = a3;
  inDesc.componentSubType = a1;
  *(void *)&inDesc.OSType componentManufacturer = 1634758764;
  Next = AudioComponentFindNext(0, &inDesc);
  if (!Next)
  {
    inDesc.OSType componentManufacturer = 0;
    Next = AudioComponentFindNext(0, &inDesc);
    if (!Next) {
      return 4294957891;
    }
  }
  *a2 = 0;
  OSStatus v5 = AudioComponentInstanceNew(Next, a2);
  if (*a2) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = -9405;
  }
  if (v5) {
    return 4294957891;
  }
  else {
    return v6;
  }
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  if (!inDesc) {
    return 0;
  }
  AudioComponentDescription v7 = *inDesc;
  if (inComponent)
  {
    if (!(**(uint64_t (***)(AudioComponent))inComponent)(inComponent)) {
      return 0;
    }
  }
  GlobalComponentPluginMgr((uint64_t *)&v5);
  uint64_t v3 = (OpaqueAudioComponent *)(*(uint64_t (**)(uint64_t, AudioComponent, AudioComponentDescription *))(*(void *)v6 + 40))(v6, inComponent, &v7);
  if (v5) {
    std::recursive_mutex::unlock(v5);
  }
  return v3;
}

void sub_18FED2B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9) {
    std::recursive_mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioComponentMgr_NSExtension::findNext(AudioComponentMgr_NSExtension *this, OpaqueAudioComponent *a2, const AudioClassDescription *a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  OSType mType = a3->mType;
  if (a3->mType) {
    BOOL v7 = a3->mSubType == 0;
  }
  else {
    BOOL v7 = 1;
  }
  BOOL v8 = v7 || a3->mManufacturer == 0;
  if (*((unsigned char *)this + 96)) {
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  qmemcpy(buf, "cedacneaxruagruamruairuacedsmocs", sizeof(buf));
  int v10 = (char *)v18;
  while (buf[v9] != mType)
  {
    if (++v9 == 8) {
      goto LABEL_13;
    }
  }
  int v10 = (char *)&buf[v9];
LABEL_13:
  if (v10 - (char *)buf != 32)
  {
LABEL_16:
    uint64_t Next = AudioComponentMgr_Base::findNext(this, a2, a3);
    if (!v8) {
      return Next;
    }
    goto LABEL_17;
  }
  if (v8)
  {
    (*(void (**)(AudioComponentMgr_NSExtension *, uint64_t, BOOL))(*(void *)this + 120))(this, 1, mType == 1635087216);
    uint64_t Next = AudioComponentMgr_Base::findNext(this, a2, a3);
LABEL_17:
    if (!*((unsigned char *)this + 144) && a3->mType != 1633969507 && a3->mType != 1634037347)
    {
      if (!gAudioComponentLogCategory) {
        operator new();
      }
      int v13 = *(id *)gAudioComponentLogCategory;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        to_string(a3, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "AudioComponentPluginMgr.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 906;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = p_p;
        _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d First wildcard component search: %s", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      *((unsigned char *)this + 144) = 1;
    }
    return Next;
  }
  uint64_t Next = AudioComponentMgr_Base::findNext(this, a2, a3);
  if (!Next)
  {
    (*(void (**)(AudioComponentMgr_NSExtension *, uint64_t, BOOL))(*(void *)this + 120))(this, 1, mType == 1635087216);
    return AudioComponentMgr_Base::findNext(this, a2, a3);
  }
  return Next;
}

void sub_18FED2EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioComponentMgr_Base::findNext(AudioComponentMgr_Base *this, OpaqueAudioComponent *a2, const AudioClassDescription *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2) {
    uint64_t v5 = (**(uint64_t (***)(OpaqueAudioComponent *))a2)(a2);
  }
  else {
    uint64_t v5 = 0;
  }
  if (a3->mType) {
    BOOL v6 = a3->mSubType == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    BOOL v8 = 1;
    if (!v5) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v7 = *(void *)(v5 + 24);
    goto LABEL_33;
  }
  BOOL v8 = a3->mManufacturer == 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v7 = *((void *)this + 1);
  (*(void (**)(AudioComponentMgr_Base *, const AudioClassDescription *))(*(void *)this + 32))(this, a3);
  if (!v8)
  {
    long long v19 = *(_OWORD *)&a3->mType;
    UInt32 mSubType = a3[1].mSubType;
    uint64_t v21 = 0x64FFFFFFFFLL;
    SortedPosition = AudioComponentVector::findSortedPosition(*((char **)this + 2), *((char **)this + 3), &v19);
    int v10 = SortedPosition;
    if (*((char **)this + 3) == SortedPosition) {
      int v11 = 0;
    }
    else {
      int v11 = *(const AudioClassDescription **)SortedPosition;
    }
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    int v12 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v14 = &v18;
      to_string(a3, &v18);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        CFStringRef v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      if (v11)
      {
        to_string(v11 + 3, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316162;
        uint64_t v23 = "AudioComponentPluginMgr.mm";
        __int16 v24 = 1024;
        int v25 = 1213;
        __int16 v26 = 2080;
        uint64_t v27 = v14;
        __int16 v28 = 2048;
        BOOL v29 = v11;
        __int16 v30 = 2080;
        unsigned int v31 = (const char *)p_p;
        _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d findNext %s -> %p %s", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *(_DWORD *)buf = 136316162;
        uint64_t v23 = "AudioComponentPluginMgr.mm";
        __int16 v24 = 1024;
        int v25 = 1213;
        __int16 v26 = 2080;
        uint64_t v27 = v14;
        __int16 v28 = 2048;
        BOOL v29 = 0;
        __int16 v30 = 2080;
        unsigned int v31 = "";
        _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d findNext %s -> %p %s", buf, 0x30u);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
    }

    if (*((char **)this + 3) == v10) {
      return 0;
    }
    uint64_t v7 = *(void *)v10;
  }
LABEL_33:
  while (v7)
  {
    if ((!v8 || (*(unsigned char *)(v7 + 48) & 1) == 0)
      && AudioComponentMgr_Base::match((AudioComponentMgr_Base *)v7, (const AudioComponentDescription *)a3, (const AudioComponentDescription *)a3))
    {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 24);
  }
  return v7;
}

void sub_18FED3210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL AudioComponentMgr_Base::match(AudioComponentMgr_Base *this, const AudioComponentDescription *a2, const AudioComponentDescription *a3)
{
  if (a2->componentType) {
    BOOL v3 = a2->componentType == *((_DWORD *)this + 9);
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    return 0;
  }
  OSType componentSubType = a2->componentSubType;
  if (componentSubType && componentSubType != *((_DWORD *)this + 10)) {
    return 0;
  }
  OSType componentManufacturer = a2->componentManufacturer;
  if (componentManufacturer && componentManufacturer != *((_DWORD *)this + 11)) {
    return 0;
  }
  BOOL result = EmbeddedComponentManager::isComponentDescriptionVisible((EmbeddedComponentManager *)*((unsigned int *)this + 12), a2);
  if (result) {
    return *((unsigned char *)this + 72) == 0;
  }
  return result;
}

uint64_t AudioComponentMgr_iOS::checkDeferredInitialization(AudioComponentMgr_iOS *this, const AudioComponentDescription *a2)
{
  if ((a2->componentType - 1635086951 <= 0x11 && ((1 << (a2->componentType - 103)) & 0x20045) != 0
     || a2->componentType == 0)
    && !CADeprecated::TSingleton<IPCAUClient>::sInstance)
  {
    return CADeprecated::TSingleton<IPCAUClient>::instance();
  }
  return result;
}

void sub_18FED3314(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (outInstance)
  {
    AudioComponent v3 = inComponent;
    *AudioComponentInstance outInstance = 0;
    memset(&v17, 0, sizeof(v17));
    uint64_t v13 = 0;
    CFStringRef v14 = &v13;
    uint64_t v15 = 0x2000000000;
    int v16 = 0;
    Impl_AudioGetComponentInfo(inComponent, &v17, 0);
    if ((v17.componentFlags & 8) != 0)
    {
      if (v3
        && (uint64_t v6 = (**(uint64_t (***)(AudioComponent))v3)(v3)) != 0
        && (uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6)) != 0
        && *(void *)(v7 + 200))
      {
        int v4 = 0;
        AudioComponent v3 = *(AudioComponent *)(v7 + 200);
      }
      else
      {
        if (!AllowUnsafeMainThreadServicing("AudioComponentInstanceNew"))
        {
          OSStatus v5 = -10863;
LABEL_23:
          _Block_object_dispose(&v13, 8);
          return v5;
        }
        int v4 = 1;
      }
    }
    else
    {
      int v4 = 0;
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    v12[2] = __AudioComponentInstanceNew_block_invoke;
    v12[3] = &unk_1E56884F0;
    v12[5] = v3;
    v12[6] = outInstance;
    v12[4] = &v13;
    if (v4) {
      BOOL v8 = Synchronously_ServicingMainRunLoop((uint64_t)v12);
    }
    else {
      BOOL v8 = Synchronously((uint64_t)v12);
    }
    if (!v8)
    {
      if (!gAudioComponentLogCategory) {
        operator new();
      }
      uint64_t v9 = *(NSObject **)gAudioComponentLogCategory;
      if (os_log_type_enabled(*(os_log_t *)gAudioComponentLogCategory, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        long long v19 = "AudioComponentAPI.cpp";
        __int16 v20 = 1024;
        int v21 = 358;
        _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Timeout running task synchronously", buf, 0x12u);
      }
    }
    OSStatus v5 = *((_DWORD *)v14 + 6);
    goto LABEL_23;
  }
  return -50;
}

void sub_18FED3598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t Impl_AudioGetComponentInfo(OpaqueAudioComponent *a1, AudioComponentDescription *a2, const __CFString **a3)
{
  if (!a1) {
    return 4294964296;
  }
  OSStatus v5 = (uint64_t (***)(void))(**(uint64_t (***)(OpaqueAudioComponent *))a1)(a1);
  if (!v5) {
    return 4294964296;
  }
  uint64_t v6 = (**v5)(v5);
  if (a2)
  {
    long long v7 = *(_OWORD *)(v6 + 36);
    a2->componentFlagsMask = *(_DWORD *)(v6 + 52);
    *(_OWORD *)&a2->componentType = v7;
  }
  if (!a3) {
    return 0;
  }
  uint64_t result = *(void *)(v6 + 64);
  if (result)
  {
    *a3 = (const __CFString *)result;
    CFRetain((CFTypeRef)result);
    return 0;
  }
  *a3 = 0;
  return result;
}

BOOL Synchronously(uint64_t a1)
{
  uint64_t v2 = dispatch_semaphore_create(0);
  dispatch_retain(v2);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __Synchronously_block_invoke;
  void v5[3] = &__block_descriptor_tmp_1070;
  v5[4] = v2;
  (*(void (**)(uint64_t, void *))(a1 + 16))(a1, v5);
  BOOL v3 = dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL) == 0;
  dispatch_release(v2);
  return v3;
}

void __AudioComponentInstanceNew_block_invoke(void *a1, uint64_t a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __AudioComponentInstanceNew_block_invoke_2;
  v4[3] = &unk_1E56884C8;
  uint64_t v2 = (uint64_t (***)(void))a1[5];
  uint64_t v3 = a1[6];
  v4[5] = a1[4];
  v4[6] = v3;
  v4[4] = a2;
  instantiate(v2, 0, 0, (uint64_t)v4);
}

void instantiate(uint64_t (***a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && (uint64_t v7 = (**a1)(a1)) != 0)
  {
    BOOL v8 = (const void **)v7;
    uint64_t v9 = (const AudioComponentDescription *)(v7 + 36);
    (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v7 + 104))(&v12);
    if (shouldLoadV2OutOfProcess(v9, a2, (id *)&v12))
    {
      APComponent::name((APComponent *)&cf, v8[8]);
      create_shared_APComponent_RemoteV2();
    }
    (*((void (**)(const void **, uint64_t, uint64_t, uint64_t))*v8 + 11))(v8, a2, a3, a4);
    if (v12) {
      CFRelease(v12);
    }
  }
  else
  {
    int v10 = *(void (**)(uint64_t, void, uint64_t))(a4 + 16);
    v10(a4, 0, 4294964296);
  }
}

void sub_18FED396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

void APComponent::architectures(APComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
}

void APComponent::newInstance(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  OSStatus v5 = a4;
  uint64_t v6 = (void *)MEMORY[0x192FC9400]();
  if (*(unsigned char *)(a1 + 72))
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    BOOL v8 = *(id *)gAudioComponentLogCategory;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "APComponent.mm";
    __int16 v20 = 1024;
    int v21 = 322;
    int v10 = "%25s:%-5d component is a zombie and cannot be instantiated";
LABEL_9:
    _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
LABEL_10:
    uint64_t v7 = 0xFFFFFFFFLL;
    goto LABEL_15;
  }
  GlobalComponentPluginMgr((uint64_t *)buf);
  if (*(void *)(a1 + 104)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  }
  if (*(void *)buf) {
    std::recursive_mutex::unlock(*(std::recursive_mutex **)buf);
  }
  if (!v7)
  {
    *(void *)buf = a1 + 36;
    uint64_t v11 = *(void *)(a1 + 104);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v11 + 48))(v11, buf);
    if (!v12)
    {
      if (!gAudioComponentLogCategory) {
        operator new();
      }
      BOOL v8 = *(id *)gAudioComponentLogCategory;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "APComponent.mm";
      __int16 v20 = 1024;
      int v21 = 334;
      int v10 = "%25s:%-5d null from factory proc";
      goto LABEL_9;
    }
    GlobalComponentPluginMgr((uint64_t *)buf);
    if (*(void *)(a1 + 112))
    {
      uint64_t v7 = 0;
    }
    else
    {
      unsigned int v13 = *(_DWORD *)(a1 + 36);
      if (HIWORD(v13) == 24949)
      {
        CFStringRef v14 = malloc_type_malloc(0xC8uLL, 0x8004055C35419uLL);
        *CFStringRef v14 = (*(uint64_t (**)(uint64_t))(v12 + 16))(1);
        v14[1] = (*(uint64_t (**)(uint64_t))(v12 + 16))(2);
        v14[2] = (*(uint64_t (**)(uint64_t))(v12 + 16))(3);
        void v14[3] = (*(uint64_t (**)(uint64_t))(v12 + 16))(4);
        v14[4] = (*(uint64_t (**)(uint64_t))(v12 + 16))(5);
        v14[5] = (*(uint64_t (**)(uint64_t))(v12 + 16))(10);
        v14[6] = (*(uint64_t (**)(uint64_t))(v12 + 16))(11);
        v14[7] = (*(uint64_t (**)(uint64_t))(v12 + 16))(18);
        v14[8] = (*(uint64_t (**)(uint64_t))(v12 + 16))(15);
        v14[9] = (*(uint64_t (**)(uint64_t))(v12 + 16))(16);
        v14[10] = (*(uint64_t (**)(uint64_t))(v12 + 16))(6);
        v14[11] = (*(uint64_t (**)(uint64_t))(v12 + 16))(7);
        v14[12] = (*(uint64_t (**)(uint64_t))(v12 + 16))(17);
        v14[14] = (*(uint64_t (**)(uint64_t))(v12 + 16))(14);
        v14[13] = (*(uint64_t (**)(uint64_t))(v12 + 16))(9);
        v14[15] = (*(uint64_t (**)(uint64_t))(v12 + 16))(19);
        v14[16] = (*(uint64_t (**)(uint64_t))(v12 + 16))(20);
        v14[17] = (*(uint64_t (**)(uint64_t))(v12 + 16))(21);
        v14[18] = (*(uint64_t (**)(uint64_t))(v12 + 16))(513);
        v14[19] = (*(uint64_t (**)(uint64_t))(v12 + 16))(514);
        v14[20] = (*(uint64_t (**)(uint64_t))(v12 + 16))(257);
        v14[21] = (*(uint64_t (**)(uint64_t))(v12 + 16))(258);
        v14[22] = (*(uint64_t (**)(uint64_t))(v12 + 16))(261);
        v14[23] = (*(uint64_t (**)(uint64_t))(v12 + 16))(262);
        v14[24] = (*(uint64_t (**)(uint64_t))(v12 + 16))(263);
      }
      else
      {
        if (v13 != 1633903715 && v13 != 1634037347 && v13 != 1633969507)
        {
          char v16 = 0;
          uint64_t v7 = 4294967292;
          goto LABEL_33;
        }
        CFStringRef v14 = malloc_type_malloc(0x60uLL, 0x800408F261F10uLL);
        *CFStringRef v14 = (*(uint64_t (**)(uint64_t))(v12 + 16))(1);
        v14[1] = (*(uint64_t (**)(uint64_t))(v12 + 16))(2);
        v14[2] = (*(uint64_t (**)(uint64_t))(v12 + 16))(3);
        void v14[3] = (*(uint64_t (**)(uint64_t))(v12 + 16))(4);
        v14[4] = (*(uint64_t (**)(uint64_t))(v12 + 16))(5);
        v14[5] = (*(uint64_t (**)(uint64_t))(v12 + 16))(6);
        v14[6] = (*(uint64_t (**)(uint64_t))(v12 + 16))(7);
        v14[7] = (*(uint64_t (**)(uint64_t))(v12 + 16))(8);
        v14[8] = (*(uint64_t (**)(uint64_t))(v12 + 16))(9);
        v14[9] = (*(uint64_t (**)(uint64_t))(v12 + 16))(10);
        v14[10] = (*(uint64_t (**)(uint64_t))(v12 + 16))(11);
        v14[11] = (*(uint64_t (**)(uint64_t))(v12 + 16))(12);
      }
      uint64_t v7 = 0;
      *(void *)(a1 + 112) = v14;
    }
    char v16 = 1;
LABEL_33:
    if (*(void *)buf) {
      std::recursive_mutex::unlock(*(std::recursive_mutex **)buf);
    }
    if (v16) {
      operator new();
    }
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    AudioComponentDescription v17 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "APComponent.mm";
      __int16 v20 = 1024;
      int v21 = 341;
      __int16 v22 = 1024;
      int v23 = v7;
      _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d returned from createDispatchTable", buf, 0x18u);
    }
  }
LABEL_15:
  v5[2](v5, 0, v7);
}

void sub_18FED4280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::recursive_mutex *a17)
{
  _Unwind_Resume(a1);
}

void __Synchronously_block_invoke(uint64_t a1)
{
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  uint64_t v2 = *(NSObject **)(a1 + 32);
  dispatch_release(v2);
}

uint64_t __AudioComponentInstanceNew_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  **(void **)(a1 + 48) = a2;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

uint64_t std::__function::__func<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*),std::allocator<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*)>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void APComponentInstance::postOpen(RenderContextChangeGenerator *this)
{
  if (*((_WORD *)this->mObserver + 19) == 24949)
  {
    outData = 0;
    UInt32 ioDataSize = 8;
    OSStatus Property = AudioUnitGetProperty((AudioUnit)this, 0x3Cu, 0, 0, &outData, &ioDataSize);
    uint64_t v3 = outData;
    if (!Property)
    {
      if (outData)
      {
        std::optional<RenderContextChangeGenerator>::emplace[abi:ne180100]<void({block_pointer} {__strong}&)(AudioUnitRenderContext const*),void>(this + 2, &outData);
        uint64_t v3 = outData;
      }
    }
  }
}

void sub_18FED443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__SecTask *shouldLoadV2OutOfProcess(const AudioComponentDescription *a1, char a2, id *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if ((a2 & 2) != 0) {
    return 0;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_3;
  }
  uint64_t result = SecTaskCreateFromSelf(0);
  if (!result) {
    return result;
  }
  CFStringRef v14 = result;
  CFTypeRef v15 = SecTaskCopyValueForEntitlement(result, @"com.apple.coreaudio.allow-oop-v2-au", 0);
  if (!v15)
  {
LABEL_40:
    CFRelease(v14);
    return 0;
  }
  char v16 = v15;
  CFTypeID v17 = CFGetTypeID(v15);
  if (v17 != CFBooleanGetTypeID())
  {
    CFRelease(v16);
    goto LABEL_40;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)v16);
  CFRelease(v16);
  CFRelease(v14);
  if (!Value) {
    return 0;
  }
LABEL_3:
  uint64_t v6 = getenv("CoreAudio_AUHostingService_mismatchMode");
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v7 = *a3;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (!v8)
  {

    char v10 = 0;
    char v9 = 0;
    goto LABEL_22;
  }
  uint64_t v42 = v6;
  char v9 = 0;
  char v10 = 0;
  uint64_t v11 = *(void *)v44;
  do
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v44 != v11) {
        objc_enumerationMutation(v7);
      }
      unsigned int v13 = *(void **)(*((void *)&v43 + 1) + 8 * i);
      if ([v13 intValue] == 16777228) {
        char v10 = 1;
      }
      else {
        v9 |= [v13 intValue] == 16777223;
      }
    }
    uint64_t v8 = [v7 countByEnumeratingWithState:&v43 objects:v47 count:16];
  }
  while (v8);

  uint64_t v6 = v42;
  if (v10 & 1 | ((v9 & 1) == 0))
  {
LABEL_22:
    if ((a1->componentFlags & 4) == 0)
    {
      uint64_t v19 = 0;
      int v20 = a2 & 1;
      do
      {
        int v21 = *(_DWORD *)&aUoua[v19];
        if (v21) {
          BOOL v22 = v21 == a1->componentType;
        }
        else {
          BOOL v22 = 1;
        }
        if (v22)
        {
          int v23 = *(_DWORD *)&aUoua[v19 + 4];
          BOOL v24 = v23 == a1->componentSubType || v23 == 0;
          if (v24 && a1->componentManufacturer == 1634758764) {
            return 0;
          }
        }
        v19 += 20;
      }
      while (v19 != 140);
      if (((v6 != 0) & (v10 & v9)) != 0)
      {
        int v20 = 1;
        return (__SecTask *)(v20 != 0);
      }
      __int16 v28 = getenv("CoreAudio_loadV2AudioUnitsOutOfProcess");
      if (v28)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, v28);
        uint64_t v29 = v49;
        int v30 = (char)v49;
        if ((v49 & 0x80u) != 0) {
          uint64_t v29 = *(void *)&buf[8];
        }
        if (v29 == 3)
        {
          unsigned int v31 = *(void **)buf;
          int v33 = (unsigned __int16 *)buf;
          if ((v49 & 0x80u) != 0) {
            int v33 = *(unsigned __int16 **)buf;
          }
          int v34 = *v33;
          int v35 = *((unsigned __int8 *)v33 + 2);
          if (v34 == 17753 && v35 == 83) {
            goto LABEL_54;
          }
        }
        else if (v29 == 1)
        {
          unsigned int v31 = *(void **)buf;
          uint64_t v32 = buf;
          if ((v49 & 0x80u) != 0) {
            uint64_t v32 = *(unsigned char **)buf;
          }
          if (*v32 == 49)
          {
LABEL_54:
            int v20 = 1;
            goto LABEL_70;
          }
        }
        int v37 = isInternalBuild();
        uint64_t v38 = v49;
        int v30 = (char)v49;
        if (v37)
        {
          if ((v49 & 0x80u) != 0) {
            uint64_t v38 = *(void *)&buf[8];
          }
          if (v38 == 2)
          {
            unsigned int v31 = *(void **)buf;
            uint64_t v40 = buf;
            if ((v49 & 0x80u) != 0) {
              uint64_t v40 = *(_WORD **)buf;
            }
            if (*v40 == 20302) {
              goto LABEL_69;
            }
          }
          else if (v38 == 1)
          {
            unsigned int v31 = *(void **)buf;
            uint64_t v39 = buf;
            if ((v49 & 0x80u) != 0) {
              uint64_t v39 = *(unsigned char **)buf;
            }
            if (*v39 == 48)
            {
LABEL_69:
              int v20 = 0;
LABEL_70:
              if (v30 < 0) {
                operator delete(v31);
              }
              return (__SecTask *)(v20 != 0);
            }
          }
        }
        if ((char)v49 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (isInternalBuild())
      {
        buf[0] = 0;
        int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"loadV2AudioUnitsOutOfProcess", @"com.apple.coreaudio", buf);
        if (buf[0]) {
          int v20 = AppBooleanValue;
        }
      }
      return (__SecTask *)(v20 != 0);
    }
    return 0;
  }
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  __int16 v26 = *(id *)gAudioComponentLogCategory;
  uint64_t result = (__SecTask *)os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "APComponent.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 285;
    _os_log_impl(&dword_18FEC0000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Requested AU does not contain native architecture and translation is not available!", buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_18FED48BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t isInternalBuild(void)
{
  {
    isInternalBuild(void)::sIsInternalBuild = os_variant_has_internal_diagnostics();
  }
  return isInternalBuild(void)::sIsInternalBuild;
}

void sub_18FED4958(_Unwind_Exception *a1)
{
}

uint64_t DSPGraph::GraphInput::ringBufferSampleRate(DSPGraph::GraphInput *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
}

void sub_18FED4A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void AudioComponentMgr_RegistrarService::retrieveComponents(id *this, uint64_t a2, uint64_t a3)
{
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  void v14[3] = CFAbsoluteTimeGetCurrent();
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  uint64_t v6 = [this[11] synchronousRemoteObjectProxyWithErrorHandler:&__block_literal_global_69];
  id v7 = (*((void (**)(id *))*this + 16))(this);
  uint64_t v8 = *((unsigned __int8 *)this + 80);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN34AudioComponentMgr_RegistrarService18retrieveComponentsEbb_block_invoke_70;
  v9[3] = &unk_1E5680C78;
  v9[4] = v14;
  v9[5] = &v10;
  v9[6] = this;
  [v6 getComponentList:v7 linkedSDKRequiresEntitlement:v8 includeExtensions:a2 forceWaitForExtensions:a3 reply:v9];

  if (*((unsigned char *)v11 + 24) && a2) {
    *((unsigned char *)this + 96) = 1;
  }

  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(v14, 8);
}

void sub_18FED4BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void to_string(const AudioClassDescription *a1@<X0>, std::string *a2@<X8>)
{
  to_string(a1, (uint64_t)a2);
  if (*(void *)&a1[1].mType)
  {
    caulk::make_string((caulk *)"/0x%x/0x%x", (uint64_t)__p, a1[1].mType, a1[1].mSubType);
    if ((v7 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if ((v7 & 0x80u) == 0) {
      std::string::size_type v5 = v7;
    }
    else {
      std::string::size_type v5 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v4, v5);
    if ((char)v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_18FED4CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void to_string(const AudioClassDescription *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  OSType mType = a1->mType;
  int v5 = bswap32(mType);
  LODWORD(v15.__r_.__value_.__l.__data_) = v5;
  if (((char)v5 - 32) > 0x5E
    || (((__int16)v5 >> 8) - 32) > 0x5E
    || ((v5 << 8 >> 24) - 32) > 0x5E
    || ((v5 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v13, mType);
  }
  else
  {
    v15.__r_.__value_.__s.__data_[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v13, (char *)&v15);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v13;
  }
  else {
    uint64_t v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  OSType mSubType = a1->mSubType;
  int v8 = bswap32(mSubType);
  LODWORD(v14.__r_.__value_.__l.__data_) = v8;
  if (((char)v8 - 32) > 0x5E
    || (((__int16)v8 >> 8) - 32) > 0x5E
    || ((v8 << 8 >> 24) - 32) > 0x5E
    || ((v8 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v15, mSubType);
  }
  else
  {
    v14.__r_.__value_.__s.__data_[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v15, (char *)&v14);
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v9 = &v15;
  }
  else {
    char v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  OSType mManufacturer = a1->mManufacturer;
  int v11 = bswap32(mManufacturer);
  *(_DWORD *)__s = v11;
  if (((char)v11 - 32) > 0x5E
    || (((__int16)v11 >> 8) - 32) > 0x5E
    || ((v11 << 8 >> 24) - 32) > 0x5E
    || ((v11 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v14, mManufacturer);
  }
  else
  {
    char v17 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v14, __s);
  }
  uint64_t v12 = &v14;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  caulk::make_string((caulk *)"%s/%s/%s", a2, v6, v9, v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_18FED4EF4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void DSPGraph::Graph::configure(DSPGraph::Graph *this)
{
  if (*((unsigned char *)this + 761)) {
    return;
  }
  if (!*((_DWORD *)this + 172) || !*((_DWORD *)this + 173))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(v270, "configure");
    std::string::basic_string[abi:ne180100]<0>(&v269, "slice duration must be set before configure.");
    DSPGraph::ThrowException(1718775073, (long long *)__p, 718, v270, (long long *)&v269);
  }
  uint64_t v2 = (void *)*((void *)this + 3);
  for (i = (void *)((char *)this + 24); v2; uint64_t v2 = (void *)*v2)
  {
    uint64_t v3 = v2[2];
    uint64_t v4 = *(void *)(v3 + 64);
    uint64_t v5 = *(void *)(v3 + 72);
    if (((v5 - v4) & 0x1FFFFFFFE0) != 0)
    {
      if (v5 == v4)
      {
        unint64_t v7 = 0;
LABEL_368:
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v270, "in");
        v243 = (void *)(v3 + 32);
        if (*(char *)(v3 + 55) < 0) {
          v243 = (void *)*v243;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v242, v243, (uint64_t)(*(void *)(v3 + 72) - *(void *)(v3 + 64)) >> 5, v7);
      }
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      while (1)
      {
        if (!(*(uint64_t (**)(void))(*(void *)(v4 + v6) + 40))())
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(v270, "checkConnectivity");
          std::to_string(&v262, v7);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v263, "input port ", &v262);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v264, &v263, " on '");
          uint64_t v238 = v2[2];
          v239 = (char *)(v238 + 32);
          if (*(char *)(v238 + 55) < 0) {
            v239 = *(char **)v239;
          }
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v265, &v264, v239);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v269, &v265, "' box is not connected to anything");
          DSPGraph::ThrowException(1970168609, (long long *)__p, 2659, v270, (long long *)&v269);
        }
        ++v7;
        uint64_t v3 = v2[2];
        uint64_t v4 = *(void *)(v3 + 64);
        unint64_t v8 = (*(void *)(v3 + 72) - v4) >> 5;
        if (v7 >= v8) {
          break;
        }
        v6 += 32;
        if (v8 <= v7) {
          goto LABEL_368;
        }
      }
    }
    uint64_t v9 = *(void *)(v3 + 88);
    uint64_t v10 = *(void *)(v3 + 96);
    if (((v10 - v9) & 0x1FFFFFFFE0) != 0)
    {
      if (v10 == v9)
      {
        unint64_t v12 = 0;
LABEL_371:
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v270, "out");
        v245 = (void *)(v3 + 32);
        if (*(char *)(v3 + 55) < 0) {
          v245 = (void *)*v245;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v244, v245, (uint64_t)(*(void *)(v3 + 96) - *(void *)(v3 + 88)) >> 5, v12);
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        if (!(*(uint64_t (**)(void))(*(void *)(v9 + v11) + 40))())
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(v270, "checkConnectivity");
          std::to_string(&v262, v12);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v263, "output port ", &v262);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v264, &v263, " on '");
          uint64_t v240 = v2[2];
          v241 = (char *)(v240 + 32);
          if (*(char *)(v240 + 55) < 0) {
            v241 = *(char **)v241;
          }
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v265, &v264, v241);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v269, &v265, "' box is not connected to anything");
          DSPGraph::ThrowException(1970168609, (long long *)__p, 2664, v270, (long long *)&v269);
        }
        ++v12;
        uint64_t v3 = v2[2];
        uint64_t v9 = *(void *)(v3 + 88);
        unint64_t v13 = (*(void *)(v3 + 96) - v9) >> 5;
        if (v12 >= v13) {
          break;
        }
        v11 += 32;
        if (v13 <= v12) {
          goto LABEL_371;
        }
      }
    }
  }
  for (j = (uint64_t **)*((void *)this + 8); j; j = (uint64_t **)*j)
    DSPGraph::Wire::initializeFormat((DSPGraph::Wire *)j[2]);
  *(_OWORD *)std::string __p = 0u;
  long long v267 = 0u;
  float v268 = 1.0;
  for (unint64_t k = *((void *)this + 43); k; unint64_t k = *(void *)k)
  {
    if (!std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>((uint64_t)__p[0], (unint64_t)__p[1], *(void *)(k + 16)))operator new(); {
  }
    }
  char v16 = (void *)*((void *)this + 48);
  if (v16)
  {
    unint64_t k = 1065353216;
    do
    {
      unint64_t v17 = v16[2];
      if (((*(uint64_t (**)(unint64_t))(*(void *)v17 + 712))(v17) & 1) == 0
        && !std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>((uint64_t)__p[0], (unint64_t)__p[1], v17))
      {
        operator new();
      }
      char v16 = (void *)*v16;
    }
    while (v16);
  }
  v261 = this;
  for (m = (void *)*((void *)this + 29); m; m = (void *)*m)
  {
    uint64_t v19 = *(void **)(m[2] + 32);
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 1;
      do
      {
        uint64_t v23 = v19[2];
        uint64_t v24 = *(void *)(v23 + 64);
        uint64_t v25 = *(void *)(v23 + 72);
        if (v24 == v25)
        {
          uint64_t v28 = v22;
        }
        else
        {
          uint64_t v26 = *(void *)(v23 + 64);
          do
          {
            if (!(*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26))
            {
              std::string::basic_string[abi:ne180100]<0>(v270, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v269, "createIsoGroups");
              v219 = (void *)(v23 + 32);
              if (*(char *)(v23 + 55) < 0) {
                v219 = (void *)*v219;
              }
              uint64_t v220 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
              DSPGraph::strprintf((DSPGraph *)"box %s %s input port is not connected.", v221, v219, v220);
            }
            uint64_t v27 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26) + 120);
            if (v22)
            {
              uint64_t v20 = *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26) + 120)
                                    + 40);
              uint64_t v21 = v27;
            }
            else
            {
              if (v21 != v27)
              {
                std::string::basic_string[abi:ne180100]<0>(v270, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v269, "createIsoGroups");
                v228 = (void *)(v23 + 32);
                if (*(char *)(v23 + 55) < 0) {
                  v228 = (void *)*v228;
                }
                uint64_t v229 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26);
                DSPGraph::strprintf((DSPGraph *)"boxes within a group have different sample rates! group has sample rate %u, but box %s has sample rate %u on one of its input ports", v230, v21, v228, **(double **)(v229 + 120));
              }
              if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26) + 120)
                             + 40) != v20)
              {
                std::string::basic_string[abi:ne180100]<0>(v270, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v269, "createIsoGroups");
                v225 = (void *)(v23 + 32);
                if (*(char *)(v23 + 55) < 0) {
                  v225 = (void *)*v225;
                }
                uint64_t v226 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26);
                DSPGraph::strprintf((DSPGraph *)"boxes within a group have different block sizes! group has block size %u, but box %s has block size %u on one of its input ports", v227, v20, v225, *(unsigned int *)(*(void *)(v226 + 120) + 40));
              }
            }
            uint64_t v28 = 0;
            LOBYTE(v22) = 0;
            v26 += 32;
            v24 += 32;
          }
          while (v26 != v25);
        }
        unint64_t k = *(void *)(v23 + 88);
        uint64_t v29 = *(void *)(v23 + 96);
        if (k == v29)
        {
          uint64_t v22 = v28;
        }
        else
        {
          uint64_t v30 = *(void *)(v23 + 88);
          do
          {
            if (!(*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30))
            {
              std::string::basic_string[abi:ne180100]<0>(v270, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v269, "createIsoGroups");
              v222 = (void *)(v23 + 32);
              if (*(char *)(v23 + 55) < 0) {
                v222 = (void *)*v222;
              }
              uint64_t v223 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
              DSPGraph::strprintf((DSPGraph *)"box %s %s output port is not connected.", v224, v222, v223);
            }
            if (v28)
            {
              uint64_t v21 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30) + 120);
              uint64_t v20 = *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30) + 120)
                                    + 40);
            }
            else if (!(*(uint64_t (**)(uint64_t))(*(void *)v23 + 272))(v23))
            {
              if (v21 != **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30)
                                                            + 120))
              {
                std::string::basic_string[abi:ne180100]<0>(v270, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v269, "createIsoGroups");
                v231 = (void *)(v23 + 32);
                if (*(char *)(v23 + 55) < 0) {
                  v231 = (void *)*v231;
                }
                uint64_t v232 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
                uint64_t v233 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
                DSPGraph::strprintf((DSPGraph *)"boxes within a group have different sample rates! group has sample rate %u, but box %s %s has sample rate %u on one of its output ports", v234, v21, v231, v232, **(double **)(v233 + 120));
              }
              if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30) + 120)
                             + 40) != v20)
              {
                std::string::basic_string[abi:ne180100]<0>(v270, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v269, "createIsoGroups");
                v235 = (void *)(v23 + 32);
                if (*(char *)(v23 + 55) < 0) {
                  v235 = (void *)*v235;
                }
                uint64_t v236 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
                DSPGraph::strprintf((DSPGraph *)"boxes within a group have different block sizes! group has block size %u, but box %s has block size %u on one of its output ports", v237, v20, v235, *(unsigned int *)(*(void *)(v236 + 120) + 40));
              }
            }
            uint64_t v22 = 0;
            LOBYTE(v28) = 0;
            v30 += 32;
            k += 32;
          }
          while (v30 != v29);
        }
        uint64_t v19 = (void *)*v19;
      }
      while (v19);
    }
  }
  *(_OWORD *)std::string __p = 0u;
  long long v267 = 0u;
  float v268 = 1.0;
  unsigned int v31 = i;
  uint64_t v32 = (void *)*i;
  if (*i)
  {
    do
    {
      *(_WORD *)(v32[2] + 745) = 0;
      uint64_t v32 = (void *)*v32;
    }
    while (v32);
  }
  int v33 = v261;
  int v34 = (void *)*((void *)v261 + 29);
  if (!v34)
  {
    *((void *)v261 + 33) = *((void *)v261 + 32);
    goto LABEL_150;
  }
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  do
  {
    unint64_t v37 = v34[2];
    *(_WORD *)(v37 + 248) = 0;
    if (*(void *)(v37 + 160)) {
      goto LABEL_135;
    }
    unint64_t v38 = 0x9DDFEA08EB382D69 * (((8 * v37) + 8) ^ HIDWORD(v37));
    unint64_t v39 = 0x9DDFEA08EB382D69 * (HIDWORD(v37) ^ (v38 >> 47) ^ v38);
    unint64_t v40 = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
    if (v35)
    {
      uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
      v41.i16[0] = vaddlv_u8(v41);
      if (v41.u32[0] > 1uLL)
      {
        unint64_t k = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
        if (v40 >= v35) {
          unint64_t k = v40 % v35;
        }
      }
      else
      {
        unint64_t k = v40 & (v35 - 1);
      }
      uint64_t v42 = (void *)*((void *)__p[0] + k);
      if (v42)
      {
        for (n = (void *)*v42; n; n = (void *)*n)
        {
          unint64_t v44 = n[1];
          if (v44 == v40)
          {
            if (n[2] == v37) {
              goto LABEL_135;
            }
          }
          else
          {
            if (v41.u32[0] > 1uLL)
            {
              if (v44 >= v35) {
                v44 %= v35;
              }
            }
            else
            {
              v44 &= v35 - 1;
            }
            if (v44 != k) {
              break;
            }
          }
        }
      }
    }
    long long v45 = operator new(0x18uLL);
    void *v45 = 0;
    v45[1] = v40;
    v45[2] = v37;
    float v46 = (float)(unint64_t)(v36 + 1);
    if (!v35 || (float)(v268 * (float)v35) < v46)
    {
      BOOL v47 = (v35 & (v35 - 1)) != 0;
      if (v35 < 3) {
        BOOL v47 = 1;
      }
      unint64_t v48 = v47 | (2 * v35);
      unint64_t v49 = vcvtps_u32_f32(v46 / v268);
      if (v48 <= v49) {
        int8x8_t prime = (int8x8_t)v49;
      }
      else {
        int8x8_t prime = (int8x8_t)v48;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v35 = (unint64_t)__p[1];
      }
      if (*(void *)&prime > v35) {
        goto LABEL_91;
      }
      if (*(void *)&prime < v35)
      {
        unint64_t v57 = vcvtps_u32_f32((float)*((unint64_t *)&v267 + 1) / v268);
        if (v35 < 3 || (uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
        {
          unint64_t v57 = std::__next_prime(v57);
        }
        else
        {
          uint64_t v59 = 1 << -(char)__clz(v57 - 1);
          if (v57 >= 2) {
            unint64_t v57 = v59;
          }
        }
        if (*(void *)&prime <= v57) {
          int8x8_t prime = (int8x8_t)v57;
        }
        if (*(void *)&prime >= v35)
        {
          unint64_t v35 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_91:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v51 = operator new(8 * *(void *)&prime);
            long long v52 = __p[0];
            __p[0] = v51;
            if (v52) {
              operator delete(v52);
            }
            uint64_t v53 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v53++) = 0;
            while (*(void *)&prime != v53);
            long long v54 = (void **)v267;
            if ((void)v267)
            {
              unint64_t v55 = *(void *)(v267 + 8);
              uint8x8_t v56 = (uint8x8_t)vcnt_s8(prime);
              v56.i16[0] = vaddlv_u8(v56);
              if (v56.u32[0] > 1uLL)
              {
                if (v55 >= *(void *)&prime) {
                  v55 %= *(void *)&prime;
                }
              }
              else
              {
                v55 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v55) = &v267;
              for (ii = *v54; ii; unint64_t v55 = v61)
              {
                unint64_t v61 = ii[1];
                if (v56.u32[0] > 1uLL)
                {
                  if (v61 >= *(void *)&prime) {
                    v61 %= *(void *)&prime;
                  }
                }
                else
                {
                  v61 &= *(void *)&prime - 1;
                }
                if (v61 != v55)
                {
                  if (!*((void *)__p[0] + v61))
                  {
                    *((void *)__p[0] + v61) = v54;
                    goto LABEL_116;
                  }
                  *long long v54 = (void *)*ii;
                  *iuint64_t i = **((void **)__p[0] + v61);
                  **((void **)__p[0] + v61) = ii;
                  iuint64_t i = v54;
                }
                unint64_t v61 = v55;
LABEL_116:
                long long v54 = (void **)ii;
                iuint64_t i = (void *)*ii;
              }
            }
            unint64_t v35 = (unint64_t)prime;
            goto LABEL_120;
          }
          uint64_t v65 = __p[0];
          __p[0] = 0;
          if (v65) {
            operator delete(v65);
          }
          unint64_t v35 = 0;
          __p[1] = 0;
        }
      }
LABEL_120:
      if ((v35 & (v35 - 1)) != 0)
      {
        if (v40 >= v35) {
          unint64_t k = v40 % v35;
        }
        else {
          unint64_t k = v40;
        }
      }
      else
      {
        unint64_t k = (v35 - 1) & v40;
      }
    }
    long long v62 = __p[0];
    uint64_t v63 = (void *)*((void *)__p[0] + k);
    if (v63)
    {
      void *v45 = *v63;
LABEL_133:
      *uint64_t v63 = v45;
      goto LABEL_134;
    }
    void *v45 = v267;
    *(void *)&long long v267 = v45;
    v62[k] = &v267;
    if (*v45)
    {
      unint64_t v64 = *(void *)(*v45 + 8);
      if ((v35 & (v35 - 1)) != 0)
      {
        if (v64 >= v35) {
          v64 %= v35;
        }
      }
      else
      {
        v64 &= v35 - 1;
      }
      uint64_t v63 = (char *)__p[0] + 8 * v64;
      goto LABEL_133;
    }
LABEL_134:
    uint64_t v36 = ++*((void *)&v267 + 1);
LABEL_135:
    int v34 = (void *)*v34;
  }
  while (v34);
  uint64_t v66 = (void *)v267;
  int v33 = v261;
  for (*((void *)v261 + 33) = *((void *)v261 + 32); v66; uint64_t v66 = (void *)*v66)
    DSPGraph::IsoGroup::topologicalSort(v66[2], (char **)v261 + 32);
LABEL_150:
  while (1)
  {
    unsigned int v31 = (void *)*v31;
    if (!v31) {
      break;
    }
    if (!*(unsigned char *)(v31[2] + 745))
    {
      std::string::basic_string[abi:ne180100]<0>(v270, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v269, "topologicalSort");
      float32x2_t v67 = (char *)v31[2];
      int v68 = v67 + 32;
      if (v67[55] < 0) {
        int v68 = (void *)*v68;
      }
      uint64_t v69 = (*(uint64_t (**)(char *))(*(void *)v67 + 16))(v67);
      DSPGraph::strprintf((DSPGraph *)"%s %s box not connected", v70, v68, v69);
    }
  }
  unsigned int v71 = (DSPGraph::IsoGroup **)*((void *)v33 + 32);
  int32x2_t v72 = (DSPGraph::IsoGroup **)*((void *)v33 + 33);
  if (v71 == v72)
  {
    BOOL v75 = 1;
    uint64_t v74 = (DSPGraph::IsoGroup **)*((void *)v33 + 32);
LABEL_165:
    *((unsigned char *)v33 + 766) = 1;
    goto LABEL_166;
  }
  do
  {
    uint64_t v73 = *v71++;
    DSPGraph::IsoGroup::checkIsochronicity(v73);
  }
  while (v71 != v72);
  unsigned int v71 = (DSPGraph::IsoGroup **)*((void *)v33 + 32);
  uint64_t v74 = (DSPGraph::IsoGroup **)*((void *)v33 + 33);
  BOOL v75 = v71 == v74;
  if (v71 == v74) {
    goto LABEL_165;
  }
  unsigned __int8 v76 = 0;
  unint64_t v77 = 0;
  unint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v80 = (DSPGraph::IsoGroup **)*((void *)v33 + 32);
  do
  {
    if (*((_DWORD *)*v80 + 66))
    {
      unint64_t v78 = *((unsigned int *)*v80 + 67);
      v76 |= v78 > 1;
      ++v77;
      uint64_t v79 = *((unsigned int *)*v80 + 66);
    }
    ++v80;
  }
  while (v80 != v74);
  if (v77 == 1)
  {
    BOOL v81 = v78 * *((unsigned int *)v33 + 173) == v79 * *((unsigned int *)v33 + 172);
    unint64_t v77 = 1;
  }
  else
  {
    BOOL v81 = 0;
  }
  if (((v77 < 2) & v76) == 1)
  {
    if (*((unsigned char *)v33 + 760)) {
      BOOL v89 = 0;
    }
    else {
      BOOL v89 = v81;
    }
    *((unsigned char *)v33 + 766) = v89;
    if (!v89)
    {
LABEL_187:
      *((unsigned char *)v33 + 763) = 0;
      unint64_t v85 = v74;
      uint64_t v74 = v71;
      goto LABEL_188;
    }
  }
  else
  {
    *((unsigned char *)v33 + 766) = v77 < 2;
    if (v77 > 1) {
      goto LABEL_187;
    }
  }
LABEL_166:
  if (((*((void *)v33 + 36) - *((void *)v33 + 35)) & 0x7FFFFFFF8) != 8
    || ((*((void *)v33 + 39) - *((void *)v33 + 38)) & 0x7FFFFFFF8) != 8)
  {
    goto LABEL_187;
  }
  *((unsigned char *)v33 + 763) = 1;
  if (v75)
  {
    unint64_t v82 = *((unsigned int *)v33 + 173);
    uint64_t v83 = (unint64_t *)((char *)v33 + 696);
    *((void *)v33 + 87) = v82;
    BOOL v84 = 1;
    unint64_t v85 = v74;
    goto LABEL_203;
  }
  do
  {
    uint64_t v86 = *((void *)*v71 + 28);
    uint64_t v87 = *((void *)*v71 + 29);
    while (v86 != v87)
    {
      v88 = *(void **)v86;
      if (((*(void *)(*(void *)v86 + 72) - *(void *)(*(void *)v86 + 64)) & 0x1FFFFFFFC0) != 0
        || ((v88[12] - v88[11]) & 0x1FFFFFFFC0) != 0
        || ((*(uint64_t (**)(void *))(*v88 + 64))(v88) & 1) == 0)
      {
        *((unsigned char *)v33 + 763) = 0;
        break;
      }
      v86 += 8;
    }
    ++v71;
  }
  while (v71 != v74);
  uint64_t v74 = (DSPGraph::IsoGroup **)*((void *)v33 + 32);
  unint64_t v85 = (DSPGraph::IsoGroup **)*((void *)v33 + 33);
LABEL_188:
  unint64_t v82 = *((unsigned int *)v33 + 173);
  uint64_t v83 = (unint64_t *)((char *)v33 + 696);
  *((void *)v33 + 87) = v82;
  BOOL v84 = v74 == v85;
  if (v74 == v85)
  {
LABEL_203:
    *((double *)v33 + 94) = 24000000.0 / (double)v82;
    unint64_t v96 = 1;
    *((void *)v33 + 92) = 1;
    unint64_t v90 = v82;
  }
  else
  {
    unint64_t v90 = v82;
    v91 = v74;
    do
    {
      uint64_t v92 = *((unsigned int *)*v91 + 66);
      if (v92)
      {
        unint64_t v93 = v90;
        unint64_t v94 = *((unsigned int *)*v91 + 66);
        do
        {
          unint64_t v95 = v94;
          unint64_t v94 = v93 % v94;
          unint64_t v93 = v95;
        }
        while (v94);
        unint64_t v90 = v90 / v95 * v92;
        *uint64_t v83 = v90;
      }
      ++v91;
    }
    while (v91 != v85);
    *((double *)v33 + 94) = 24000000.0 / (double)v90;
    unint64_t v96 = 1;
    *((void *)v33 + 92) = 1;
    v97 = v74;
    do
    {
      v98 = *v97;
      unint64_t v99 = *((unsigned int *)*v97 + 66);
      if (v99)
      {
        unint64_t v100 = v90 / v99;
        unint64_t v101 = v90 / v99 * *((unsigned int *)v98 + 67);
        *((void *)v98 + 37) = v101;
        *((void *)v98 + 38) = v100;
        unint64_t v102 = v96;
        if (v101)
        {
          unint64_t v103 = v96;
          unint64_t v104 = v101;
          do
          {
            unint64_t v102 = v104;
            unint64_t v104 = v103 % v104;
            unint64_t v103 = v102;
          }
          while (v104);
        }
        unint64_t v96 = v96 / v102 * v101;
        *((void *)v33 + 92) = v96;
      }
      ++v97;
    }
    while (v97 != v85);
  }
  unint64_t v105 = v82 + v90 * *((unsigned int *)v33 + 172) - 1;
  unint64_t v106 = v105 / v82;
  *((void *)v33 + 90) = v105 / v82;
  v107 = (uint64_t *)((char *)v33 + 712);
  *((void *)v33 + 89) = v105 / v82;
  unint64_t v108 = v96;
  if (v105 >= v82)
  {
    unint64_t v109 = v96;
    do
    {
      unint64_t v108 = v106;
      unint64_t v106 = v109 % v106;
      unint64_t v109 = v108;
    }
    while (v106);
  }
  *((void *)v33 + 93) = v96 / v108;
  if (!v84)
  {
    do
    {
      v110 = *v74;
      if (*((_DWORD *)*v74 + 66))
      {
        unint64_t v111 = *((void *)v110 + 37);
        int v112 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(*v107 / v111);
        unsigned int v113 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((v111 + *v107 - 1) / v111);
        *((_DWORD *)v110 + 70) = v112;
        *((_DWORD *)v110 + 69) = v113;
        *((void *)v110 + 39) = v111 * v113;
        uint64_t v114 = *((void *)v110 + 37);
        v115 = (void *)*((void *)v110 + 14);
        if (v115)
        {
          unint64_t v116 = 0;
          do
          {
            unint64_t v117 = *(void *)(*(void *)(v115[2] + 848) + 296);
            unint64_t v118 = *((void *)v110 + 37);
            if (v117)
            {
              unint64_t v119 = *((void *)v110 + 37);
              do
              {
                unint64_t v118 = v117;
                unint64_t v117 = v119 % v117;
                unint64_t v119 = v118;
              }
              while (v117);
            }
            if (v116 <= v114 - v118) {
              unint64_t v116 = v114 - v118;
            }
            v115 = (void *)*v115;
          }
          while (v115);
        }
        else
        {
          unint64_t v116 = 0;
        }
        if (*((void *)v110 + 23) != *((void *)v110 + 22))
        {
          v120 = *((unsigned char *)v33 + 760)
               ? (DSPGraph::IsoGroup *)((char *)v110 + 304)
               : (DSPGraph::Graph *)((char *)v33 + 712);
          unint64_t v121 = *(void *)v120;
          if (v121)
          {
            unint64_t v122 = *((void *)v110 + 37);
            do
            {
              unint64_t v123 = v121;
              unint64_t v121 = v122 % v121;
              unint64_t v122 = v123;
            }
            while (v121);
          }
          else
          {
            unint64_t v123 = *((void *)v110 + 37);
          }
          unint64_t v124 = v114 - v123;
          if (v116 <= v124) {
            unint64_t v116 = v124;
          }
        }
      }
      else
      {
        unint64_t v116 = 0;
        *(void *)((char *)v110 + 276) = 0;
        *((void *)v110 + 39) = 0;
      }
      *((void *)v110 + 40) = v116;
      *((void *)v110 + 36) = 0;
      ++v74;
    }
    while (v74 != v85);
  }
  if (!*((unsigned char *)v33 + 766))
  {
    if (*((unsigned char *)v261 + 765))
    {
      v125 = (uint64_t *)*((void *)v261 + 32);
      i5 = (uint64_t *)*((void *)v261 + 33);
      if (!*((unsigned char *)v261 + 760))
      {
        *((void *)v261 + 88) = 0;
        *((void *)v261 + 90) = *((void *)v261 + 89);
        if (v125 == i5)
        {
          v138 = v125;
        }
        else
        {
          do
          {
            v127 = (void *)*v125;
            v127[36] = 0;
            v128 = (uint64_t *)v127[22];
            v129 = (uint64_t *)v127[23];
            while (v128 != v129)
            {
              uint64_t v130 = *v128++;
              *(void *)(v130 + 800) = 0;
              *(_OWORD *)(v130 + 784) = 0uLL;
            }
            v131 = (uint64_t *)v127[25];
            v132 = (uint64_t *)v127[26];
            while (v131 != v132)
            {
              uint64_t v133 = *v131++;
              *(void *)(v133 + 800) = 0;
              *(_OWORD *)(v133 + 784) = 0uLL;
            }
            for (jj = (void *)v127[14]; jj; jj = (void *)*jj)
            {
              uint64_t v135 = jj[2];
              *(void *)(v135 + 800) = 0;
              *(_OWORD *)(v135 + 784) = 0uLL;
            }
            for (kunint64_t k = (void *)v127[19]; kk; kunint64_t k = (void *)*kk)
            {
              uint64_t v137 = kk[2];
              *(void *)(v137 + 800) = 0;
              *(_OWORD *)(v137 + 784) = 0uLL;
            }
            ++v125;
          }
          while (v125 != i5);
          v138 = (uint64_t *)*((void *)v261 + 32);
          v125 = (uint64_t *)*((void *)v261 + 33);
        }
        uint64_t v163 = *((void *)v261 + 93);
        if (v163)
        {
          uint64_t v164 = 0;
          v165 = (uint64_t *)*((void *)v261 + 35);
          v166 = (uint64_t *)*((void *)v261 + 36);
          do
          {
            if (v165 != v166)
            {
              uint64_t v167 = *v107;
              v168 = v165;
              do
              {
                uint64_t v170 = *v168++;
                uint64_t v169 = v170;
                uint64_t v171 = *(void *)(v170 + 784) + v167;
                *(void *)(v170 + 784) = v171;
                uint64_t v172 = *(void *)(v170 + 800);
                if (v172 > v171) {
                  uint64_t v171 = v172;
                }
                *(void *)(v169 + 800) = v171;
              }
              while (v168 != v166);
            }
            for (mm = v138; mm != v125; ++mm)
            {
              uint64_t v174 = *mm;
              if (*(_DWORD *)(*mm + 264))
              {
                unint64_t v175 = *(void *)(*(void *)(v174 + 8) + 720) + *(void *)(*(void *)(v174 + 8) + 704);
                unint64_t v176 = *(void *)(v174 + 288);
                if (v175 <= v176) {
                  unint64_t v177 = 0;
                }
                else {
                  unint64_t v177 = (v175 + ~v176 + *(void *)(v174 + 296)) / *(void *)(v174 + 296);
                }
                if (v177 < *(_DWORD *)(v174 + 280) || v177 > *(_DWORD *)(v174 + 276))
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
                  std::string::basic_string[abi:ne180100]<0>(v270, "dryRunProcess");
                  DSPGraph::strprintf((DSPGraph *)"number of blocks to process is out of range  %u   %u %u", v257, v177, *(unsigned int *)(v174 + 280), *(unsigned int *)(v174 + 276));
                }
                uint64_t v178 = *(void *)(v174 + 296) * v177;
                v179 = *(uint64_t **)(v174 + 176);
                v180 = *(uint64_t **)(v174 + 184);
                while (v179 != v180)
                {
                  uint64_t v182 = *v179++;
                  uint64_t v181 = v182;
                  uint64_t v183 = *(void *)(v182 + 784) - v178;
                  *(void *)(v182 + 784) = v183;
                  uint64_t v184 = *(void *)(v182 + 792);
                  if (v183 >= v184) {
                    uint64_t v183 = v184;
                  }
                  *(void *)(v181 + 792) = v183;
                }
                for (nn = *(void **)(v174 + 112); nn; nn = (void *)*nn)
                {
                  uint64_t v186 = nn[2];
                  uint64_t v187 = *(void *)(v186 + 784) - v178;
                  *(void *)(v186 + 784) = v187;
                  if (v187 >= *(void *)(v186 + 792)) {
                    uint64_t v187 = *(void *)(v186 + 792);
                  }
                  *(void *)(v186 + 792) = v187;
                }
                for (i1 = *(void **)(v174 + 152); i1; i1 = (void *)*i1)
                {
                  uint64_t v189 = i1[2];
                  uint64_t v190 = *(void *)(v189 + 784) + v178;
                  *(void *)(v189 + 784) = v190;
                  if (*(void *)(v189 + 800) > v190) {
                    uint64_t v190 = *(void *)(v189 + 800);
                  }
                  *(void *)(v189 + 800) = v190;
                }
                v191 = *(uint64_t **)(v174 + 200);
                v192 = *(uint64_t **)(v174 + 208);
                while (v191 != v192)
                {
                  uint64_t v194 = *v191++;
                  uint64_t v193 = v194;
                  uint64_t v195 = *(void *)(v194 + 784) + v178;
                  *(void *)(v194 + 784) = v195;
                  uint64_t v196 = *(void *)(v194 + 800);
                  if (v196 > v195) {
                    uint64_t v195 = v196;
                  }
                  *(void *)(v193 + 800) = v195;
                }
                *(void *)(v174 + 288) = v176 + v178;
              }
            }
            v197 = (uint64_t *)*((void *)v261 + 38);
            v198 = (uint64_t *)*((void *)v261 + 39);
            if (v197 != v198)
            {
              uint64_t v199 = *v107;
              do
              {
                uint64_t v201 = *v197++;
                uint64_t v200 = v201;
                uint64_t v202 = *(void *)(v201 + 784) - v199;
                *(void *)(v201 + 784) = v202;
                uint64_t v203 = *(void *)(v201 + 792);
                if (v202 >= v203) {
                  uint64_t v202 = v203;
                }
                *(void *)(v200 + 792) = v202;
              }
              while (v197 != v198);
            }
            *((void *)v261 + 88) += *((void *)v261 + 90);
            ++v164;
          }
          while (v164 != v163);
        }
        while (v138 != v125)
        {
          v204 = (void *)*v138;
          if (*(_DWORD *)(*v138 + 264))
          {
            v205 = (DSPGraph::RingBufferBox **)v204[22];
            v206 = (DSPGraph::RingBufferBox **)v204[23];
            while (v205 != v206)
            {
              v207 = *v205++;
              DSPGraph::RingBufferBox::configureFromDryRun(v207);
            }
            for (i2 = (uint64_t **)v204[14]; i2; i2 = (uint64_t **)*i2)
              DSPGraph::RingBufferBox::configureFromDryRun((DSPGraph::RingBufferBox *)i2[2]);
            for (i3 = (uint64_t **)v204[19]; i3; i3 = (uint64_t **)*i3)
              DSPGraph::RingBufferBox::configureFromDryRun((DSPGraph::RingBufferBox *)i3[2]);
            v210 = (DSPGraph::RingBufferBox **)v204[25];
            v211 = (DSPGraph::RingBufferBox **)v204[26];
            while (v210 != v211)
            {
              v212 = *v210++;
              DSPGraph::RingBufferBox::configureFromDryRun(v212);
            }
            v204[36] = 0;
          }
          ++v138;
        }
        *((void *)v261 + 88) = 0;
        goto LABEL_326;
      }
    }
    else
    {
      v125 = (uint64_t *)*((void *)v261 + 32);
      i5 = (uint64_t *)*((void *)v261 + 33);
    }
    if (v125 != i5)
    {
      v258 = i5;
      do
      {
        v139 = (void *)*v125;
        uint64_t v140 = *(unsigned int *)(*v125 + 264);
        if (v140)
        {
          int v260 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((*v83 + v139[40] * v140 - 1) / *v83);
          v141 = (uint64_t *)v139[22];
          for (i4 = (uint64_t *)v139[23]; v141 != i4; ++v141)
          {
            uint64_t v143 = *v141;
            uint64_t v144 = *(void *)(*v141 + 88);
            if (*(void *)(*v141 + 96) == v144)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v270, "out");
              v248 = (void *)(v143 + 32);
              if (*(char *)(v143 + 55) < 0) {
                v248 = (void *)*v248;
              }
              DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v247, v248, (uint64_t)(*(void *)(v143 + 96) - *(void *)(v143 + 88)) >> 5, 0);
            }
            unsigned int v145 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v144 + 40))(v144) + 120)
                             + 20);
            if (*((unsigned char *)v261 + 760)) {
              unint64_t v146 = 1;
            }
            else {
              unint64_t v146 = *((void *)v261 + 89);
            }
            int v147 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((*((void *)v261 + 87)+ *((unsigned int *)v139 + 66)+ *((unsigned int *)v139 + 66)* (*((void *)v261 + 89) + v139[40] + (*((void *)v261 + 89) - 1) % v146)- 1)/ *((void *)v261 + 87));
            uint64_t v148 = *(void *)(v143 + 88);
            if (*(void *)(v143 + 96) == v148)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v270, "out");
              v250 = (void *)(v143 + 32);
              if (*(char *)(v143 + 55) < 0) {
                v250 = (void *)*v250;
              }
              DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v249, v250, (uint64_t)(*(void *)(v143 + 96) - *(void *)(v143 + 88)) >> 5, 0);
            }
            uint64_t v149 = (*(uint64_t (**)(uint64_t))(*(void *)v148 + 40))(v148);
            (*(void (**)(uint64_t, void, void))(*(void *)v143 + 680))(v143, (v147 + *(_DWORD *)(*(void *)(v149 + 120) + 20) - 1)/ *(_DWORD *)(*(void *)(v149 + 120) + 20), (v260 - 1 + v145) / v145);
          }
          v150 = (void *)v139[14];
          for (i5 = v258; v150; v150 = (void *)*v150)
          {
            uint64_t v151 = v150[2];
            uint64_t v152 = *(void *)(v151 + 88);
            if (*(void *)(v151 + 96) == v152)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v270, "out");
              v252 = (void *)(v151 + 32);
              if (*(char *)(v151 + 55) < 0) {
                v252 = (void *)*v252;
              }
              DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v251, v252, (uint64_t)(*(void *)(v151 + 96) - *(void *)(v151 + 88)) >> 5, 0);
            }
            unsigned int v153 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v152 + 40))(v152) + 120)
                             + 20);
            int v154 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((*v83+ *((unsigned int *)v139 + 66)+ *((unsigned int *)v139 + 66)* (*(void *)(*(void *)(v151 + 848) + 312)+ v139[40]+ (unint64_t)(*v107 - 1) % *(void *)(*(void *)(v151 + 848) + 296))- 1)/ *v83);
            uint64_t v155 = *(void *)(v151 + 88);
            if (*(void *)(v151 + 96) == v155)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v270, "out");
              v256 = (void *)(v151 + 32);
              if (*(char *)(v151 + 55) < 0) {
                v256 = (void *)*v256;
              }
              DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v255, v256, (uint64_t)(*(void *)(v151 + 96) - *(void *)(v151 + 88)) >> 5, 0);
            }
            uint64_t v156 = (*(uint64_t (**)(uint64_t))(*(void *)v155 + 40))(v155);
            (*(void (**)(uint64_t, void, void))(*(void *)v151 + 680))(v151, (v154 + *(_DWORD *)(*(void *)(v156 + 120) + 20) - 1)/ *(_DWORD *)(*(void *)(v156 + 120) + 20), (v260 - 1 + v153) / v153);
          }
          v157 = (uint64_t *)v139[25];
          v158 = (uint64_t *)v139[26];
          while (v157 != v158)
          {
            uint64_t v159 = *v157;
            int v160 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>((*v83+ *((unsigned int *)v139 + 66)+ *((unsigned int *)v139 + 66) * (v139[39] + (unint64_t)(*v107 - 1) % v139[37])- 1)/ *v83);
            uint64_t v161 = *(void *)(v159 + 64);
            if (*(void *)(v159 + 72) == v161)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v270, "in");
              v254 = (void *)(v159 + 32);
              if (*(char *)(v159 + 55) < 0) {
                v254 = (void *)*v254;
              }
              DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v253, v254, (uint64_t)(*(void *)(v159 + 72) - *(void *)(v159 + 64)) >> 5, 0);
            }
            uint64_t v162 = (*(uint64_t (**)(uint64_t))(*(void *)v161 + 40))(v161);
            (*(void (**)(uint64_t, void, void))(*(void *)v159 + 680))(v159, (v160 + *(_DWORD *)(*(void *)(v162 + 120) + 20) - 1)/ *(_DWORD *)(*(void *)(v162 + 120) + 20), 0);
            ++v157;
          }
        }
        ++v125;
      }
      while (v125 != i5);
    }
  }
LABEL_326:
  for (i6 = (uint64_t *)*((void *)v261 + 72); i6; i6 = (uint64_t *)*i6)
  {
    v214 = (unsigned int *)i6[9];
    v215 = (unsigned int *)i6[10];
    while (v214 != v215)
    {
      if (!*((unsigned char *)i6 + 64) && *((unsigned char *)i6 + 56))
      {
        if ((unint64_t)(i6[5] - i6[4]) >> 32)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(v270, "setGraphPropertiesInitialValues");
          DSPGraph::strprintf((DSPGraph *)"graph property size is too large to accept: %zu bytes > %u", v246, i6[5] - i6[4], 0xFFFFFFFFLL);
        }
        (*(void (**)(void, void, void, void))(**(void **)v214 + 312))(*(void *)v214, v214[2], v214[3], v214[4]);
      }
      v214 += 6;
    }
  }
  for (i7 = (float *)*((void *)v261 + 67); i7; i7 = *(float **)i7)
  {
    v217 = (unsigned int *)*((void *)i7 + 5);
    v218 = (unsigned int *)*((void *)i7 + 6);
    while (v217 != v218)
    {
      if (!*((unsigned char *)i7 + 32)) {
        (*(void (**)(void, void, void, void, void, float))(**(void **)v217 + 80))(*(void *)v217, v217[2], v217[3], v217[4], 0, i7[7]);
      }
      v217 += 6;
    }
  }
  *((unsigned char *)v261 + 761) = 1;
}

void sub_18FED7044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v46 - 113) < 0) {
    operator delete(*(void **)(v46 - 136));
  }
  if (*(char *)(v46 - 89) < 0) {
    operator delete(*(void **)(v46 - 112));
  }
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::Box::doProcess(DSPGraph::Box *this, uint64_t a2)
{
  unsigned int v31 = (char *)this + 640;
  if (*((void *)this + 83)) {
    uint64_t CurrentTimeInNanos = DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::GetCurrentTimeInNanos();
  }
  else {
    uint64_t CurrentTimeInNanos = 0;
  }
  uint64_t v32 = CurrentTimeInNanos;
  if (*((unsigned char *)this + 744))
  {
    uint64_t v5 = *((void *)this + 11);
    uint64_t v6 = *((void *)this + 12) - v5;
    if ((v6 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      unint64_t v9 = v6 >> 5;
      do
      {
        if (v9 <= v8)
        {
          std::string::basic_string[abi:ne180100]<0>(&v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v33, "out");
          uint64_t v30 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            uint64_t v30 = (void *)*v30;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v29, v30, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v8, v31, v32);
        }
        uint64_t v10 = v5 + v7;
        uint64_t v11 = *(DSPGraph::Buffer **)((*(uint64_t (**)(uint64_t))(*(void *)(v5 + v7) + 40))(v5 + v7) + 56);
        int v12 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 120) + 8);
        uint64_t v13 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 120);
        if (v12 == 1819304813)
        {
          int v14 = *(_DWORD *)(v13 + 24);
          int v15 = a2;
        }
        else
        {
          if (*(_DWORD *)(v13 + 8) != 1718773105)
          {
            unsigned int v16 = *((_DWORD *)v11 + 25);
            goto LABEL_14;
          }
          int v15 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 120) + 24);
          int v14 = 2 * a2;
        }
        unsigned int v16 = v14 * v15;
LABEL_14:
        DSPGraph::Buffer::setByteSize(v11, v16);
        ++v8;
        uint64_t v5 = *((void *)this + 11);
        unint64_t v9 = (*((void *)this + 12) - v5) >> 5;
        v7 += 32;
      }
      while (v8 < v9);
    }
    unsigned int v17 = atomic_fetch_or((atomic_uint *volatile)this + 192, 0x80000000);
    uint64_t v18 = *(void *)this;
    if (v17)
    {
      (*(void (**)(DSPGraph::Box *))(v18 + 480))(this);
      (*(void (**)(DSPGraph::Box *))(*(void *)this + 488))(this);
      uint64_t v19 = (caulk::concurrent::details::lf_read_sync_write_impl *)*((void *)this + 92);
      int v34 = this;
      int v35 = a2;
      _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v19, (uint64_t *)&v34);
      (*(void (**)(DSPGraph::Box *, uint64_t))(*(void *)this + 472))(this, a2);
      uint64_t v20 = (uint64_t *)*((void *)this + 25);
      uint64_t v21 = (uint64_t *)*((void *)this + 26);
      while (v20 != v21)
      {
        if (((*((void *)this + 12) - *((void *)this + 11)) & 0x1FFFFFFFE0) != 0
          || ((*((void *)this + 9) - *((void *)this + 8)) & 0x1FFFFFFFE0) != 0)
        {
          DSPGraph::FileRecorder::record(*v20, a2);
        }
        ++v20;
      }
      uint64_t v22 = (DSPGraph::FileInjector **)*((void *)this + 28);
      uint64_t v23 = (DSPGraph::FileInjector **)*((void *)this + 29);
      while (v22 != v23)
        DSPGraph::FileInjector::inject(*v22++, a2);
      caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
      for (unint64_t i = atomic_load((unint64_t *)this + 45); ; unint64_t i = atomic_load(v26))
      {
        uint64_t v25 = (unint64_t *)(i & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t *)((char *)this + 520) == v25) {
          break;
        }
        uint64_t v26 = v25 + 3;
        atomic_load(v25 + 3);
        if (*(unsigned char *)(*v25 + 28)) {
          (*(void (**)(unint64_t, void, uint64_t))(*(void *)*v25 + 64))(*v25, *(void *)(*(void *)(*v25 + 8) + 56), a2);
        }
      }
      caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((unint64_t)this + 560, (unint64_t)v25);
      uint64_t v27 = (caulk::concurrent::details::lf_read_sync_write_impl *)(*((void *)this + 92) + 64);
      int v34 = this;
      int v35 = a2;
      _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v27, (uint64_t *)&v34);
    }
    else
    {
      (*(void (**)(DSPGraph::Box *, uint64_t))(v18 + 472))(this, a2);
    }
    atomic_fetch_and((atomic_uint *volatile)this + 192, 0x7FFFFFFFu);
  }
  return DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(&v31);
}

void sub_18FED7728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  atomic_fetch_and((atomic_uint *volatile)(v31 + 768), 0x7FFFFFFFu);
  DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(&a12);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Port::wire(DSPGraph::Port *this)
{
  return *((void *)this + 2);
}

unsigned int **DSPGraph::SimpleABL::setByteSize(unsigned int **this, int a2)
{
  uint64_t v2 = *this;
  if (!*this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "setByteSize");
    std::string::basic_string[abi:ne180100]<0>(&v5, "null internal ABL");
    DSPGraph::ThrowException(1768843553, &v7, 588, &v6, &v5);
  }
  uint64_t v3 = *v2;
  if (v3)
  {
    uint64_t v4 = v2 + 3;
    do
    {
      _DWORD *v4 = a2;
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return this;
}

void sub_18FED7854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

unsigned int **DSPGraph::Buffer::setByteSize(DSPGraph::Buffer *this, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 25) < a2)
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10372);
    }
    long long v6 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      int v7 = *((_DWORD *)this + 25);
      *(_DWORD *)buf = 67109376;
      unsigned int v9 = a2;
      __int16 v10 = 1024;
      int v11 = v7;
      _os_log_fault_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: DSPGraph buffer byte size %u is larger than byte capacity %u", buf, 0xEu);
    }
    snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: DSPGraph buffer byte size %u is larger than byte capacity %u", a2, *((_DWORD *)this + 25));
    __break(1u);
  }
  uint64_t v4 = (unsigned int **)((char *)this + 80);
  return DSPGraph::SimpleABL::setByteSize(v4, a2);
}

void *DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(void *a1)
{
  uint64_t v2 = *a1;
  if (*(void *)(*a1 + 24))
  {
    double v5 = (double)(unint64_t)(DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::GetCurrentTimeInNanos()
                                  - a1[1]);
    uint64_t v3 = *(void *)(v2 + 24);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, double *))(*(void *)v3 + 48))(v3, &v5);
  }
  return a1;
}

void DSPGraph::AUBox::process(DSPGraph::AUBox *this, UInt32 a2)
{
  int v4 = (*(uint64_t (**)(DSPGraph::AUBox *))(*(void *)this + 64))(this);
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = *((void *)this + 9);
  if (v4)
  {
    if (v6 == v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v57, "in");
      uint64_t v46 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v46 = (void *)*v46;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v45, v46, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v8 = *((void *)this + 11);
    if (*((void *)this + 12) == v8)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v57, "out");
      uint64_t v50 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v50 = (void *)*v50;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v49, v50, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v9 = *(void *)(v7 + 56);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v11 = *(void *)(v10 + 56);
    if (v11 != v9)
    {
      DSPGraph::Buffer::copyFrom(*(DSPGraph::Buffer **)(v10 + 56), (DSPGraph::Buffer *)v9);
      long long v12 = *(_OWORD *)(v9 + 8);
      long long v13 = *(_OWORD *)(v9 + 24);
      long long v14 = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v11 + 40) = v14;
      *(_OWORD *)(v11 + 24) = v13;
      *(_OWORD *)(v11 + 8) = v12;
      *(_DWORD *)(v11 + 72) = *(_DWORD *)(v9 + 72);
    }
    *(void *)(v11 + 8) = *(void *)(*((void *)this + 2) + 256);
    uint64_t v15 = v11 + 8;
    unsigned int v16 = *(AudioBufferList **)(v15 + 72);
    unsigned int v17 = (_DWORD *)(v15 + 64);
    OSStatus v18 = AudioUnitProcess(*((AudioUnit *)this + 106), (AudioUnitRenderActionFlags *)(v15 + 64), (const AudioTimeStamp *)v15, a2, v16);
    if (v18)
    {
      int v52 = v18;
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v57, "process");
      std::operator+<char>();
      DSPGraph::ThrowException(v52, (long long *)&__C, 1892, &v57, &v56);
    }
    if ((*(unsigned char *)v17 & 0x10) != 0 && v16->mNumberBuffers)
    {
      uint64_t v19 = 0;
      vDSP_Length v20 = a2;
      for (uint64_t i = 16; ; i += 16)
      {
        LODWORD(__C.mSampleTime) = 0;
        vDSP_maxmgv(*(const float **)((char *)&v16->mNumberBuffers + i), 1, (float *)&__C, v20);
        if (*(float *)&__C.mSampleTime != 0.0) {
          break;
        }
        if (++v19 >= (unint64_t)v16->mNumberBuffers) {
          return;
        }
      }
      *v17 &= ~0x10u;
    }
  }
  else
  {
    if (v6 == v5)
    {
      uint64_t v5 = *((void *)this + 9);
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      do
      {
        *(void *)(*((void *)this + 97) + 8 * v23++) = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)(v5 + v22) + 40))(v5 + v22)
                                                                                + 56)
                                                                    + 80);
        uint64_t v5 = *((void *)this + 8);
        uint64_t v6 = *((void *)this + 9);
        v22 += 32;
      }
      while (v23 < (v6 - v5) >> 5);
    }
    uint64_t v24 = *((void *)this + 11);
    if (*((void *)this + 12) != v24)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      do
      {
        uint64_t v27 = v24 + v25;
        uint64_t v28 = *(DSPGraph::Buffer **)((*(uint64_t (**)(uint64_t))(*(void *)(v24 + v25) + 40))(v24 + v25) + 56);
        *(void *)(*((void *)this + 100) + 8 * v26) = *((void *)v28 + 10);
        uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27);
        DSPGraph::Buffer::setByteSize(v28, *(_DWORD *)(*(void *)(v29 + 120) + 24) * a2);
        ++v26;
        uint64_t v24 = *((void *)this + 11);
        v25 += 32;
      }
      while (v26 < (*((void *)this + 12) - v24) >> 5);
      uint64_t v5 = *((void *)this + 8);
      uint64_t v6 = *((void *)this + 9);
    }
    if (v6 == v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v57, "in");
      unint64_t v48 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        unint64_t v48 = (void *)*v48;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v47, v48, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v30 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5) + 56);
    AudioUnitRenderActionFlags ioActionFlags = 0;
    long long v31 = *(_OWORD *)(v30 + 24);
    long long v32 = *(_OWORD *)(v30 + 56);
    long long v33 = *(_OWORD *)(v30 + 8);
    *(_OWORD *)&__C.mSMPTETime.mSubframes = *(_OWORD *)(v30 + 40);
    *(_OWORD *)&__C.mSMPTETime.mHours = v32;
    *(_OWORD *)&__C.mSampleTime = v33;
    *(_OWORD *)&__C.mRateScalar = v31;
    __C.mSampleTime = *(Float64 *)(*((void *)this + 2) + 256);
    OSStatus v34 = AudioUnitProcessMultiple(*((AudioUnit *)this + 106), &ioActionFlags, &__C, a2, (*((void *)this + 9) - *((void *)this + 8)) >> 5, *((const AudioBufferList ***)this + 97), (*((void *)this + 12) - *((void *)this + 11)) >> 5, *((AudioBufferList ***)this + 100));
    if (v34)
    {
      int v51 = v34;
      std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v56, "process");
      std::operator+<char>();
      DSPGraph::ThrowException(v51, &v57, 1926, &v56, &v53);
    }
    uint64_t v36 = (void *)*((void *)this + 11);
    int v35 = (void *)*((void *)this + 12);
    if (v36 != v35)
    {
      AudioUnitRenderActionFlags v37 = ioActionFlags;
      unint64_t v38 = v36;
      unint64_t v39 = v36;
      do
      {
        uint64_t v40 = *v39;
        v39 += 4;
        uint64_t v41 = *(void *)((*(uint64_t (**)(void *))(v40 + 40))(v38) + 56);
        long long v43 = *(_OWORD *)&__C.mSMPTETime.mSubframes;
        long long v42 = *(_OWORD *)&__C.mSMPTETime.mHours;
        long long v44 = *(_OWORD *)&__C.mRateScalar;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)&__C.mSampleTime;
        *(_OWORD *)(v41 + 24) = v44;
        *(_OWORD *)(v41 + 40) = v43;
        *(_OWORD *)(v41 + 56) = v42;
        *(_DWORD *)(v41 + 72) = v37;
        v36 += 4;
        unint64_t v38 = v39;
      }
      while (v39 != v35);
    }
  }
}

void sub_18FED8008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 73) < 0) {
    operator delete(*(void **)(v23 - 96));
  }
  if (*(char *)(v23 - 49) < 0) {
    operator delete(*(void **)(v23 - 72));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::canProcessInPlace(DSPGraph::AUBox *this)
{
  return *((unsigned __int8 *)this + 856);
}

uint64_t DSPGraph::Wire::initializeFormat(DSPGraph::Wire *this)
{
  if (!*((unsigned char *)this + 64))
  {
    if (!*((void *)this + 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
      std::string::basic_string[abi:ne180100]<0>(v12, "initializeFormat");
      int v4 = *(char **)(*((void *)this + 1) + 8);
      uint64_t v5 = v4 + 32;
      if (v4[55] < 0) {
        uint64_t v5 = (void *)*v5;
      }
      uint64_t v6 = (*(uint64_t (**)(char *))(*(void *)v4 + 16))(v4);
      DSPGraph::strprintf((DSPGraph *)"box %s %s output %u is not connected", v7, v5, v6, *(unsigned int *)(*((void *)this + 1) + 24));
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
    std::string::basic_string[abi:ne180100]<0>(v12, "initializeFormat");
    uint64_t v8 = *(char **)(*((void *)this + 1) + 8);
    uint64_t v9 = v8 + 32;
    if (v8[55] < 0) {
      uint64_t v9 = (void *)*v9;
    }
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)v8 + 16))(v8);
    DSPGraph::strprintf((DSPGraph *)"no format was ever set on the wire from box %s %s output %u", v11, v9, v10, *(unsigned int *)(*((void *)this + 1) + 24));
  }
  uint64_t result = (*(uint64_t (**)(void, void))(**((void **)this + 1) + 48))(*((void *)this + 1), *((void *)this + 15));
  for (uint64_t i = (uint64_t **)*((void *)this + 4); i; uint64_t i = (uint64_t **)*i)
    uint64_t result = (*(uint64_t (**)(uint64_t *, void))(*i[2] + 48))(i[2], *((void *)this + 15));
  return result;
}

void sub_18FED829C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::InputPort::setFormatOnUnit(DSPGraph::InputPort *this, const AudioStreamBasicDescription *a2)
{
  return (*(uint64_t (**)(void, const AudioStreamBasicDescription *, uint64_t, void))(**((void **)this + 1)
                                                                                                 + 448))(*((void *)this + 1), a2, 1, *((unsigned int *)this + 6));
}

uint64_t DSPGraph::OutputPort::setFormatOnUnit(DSPGraph::OutputPort *this, const AudioStreamBasicDescription *a2)
{
  return (*(uint64_t (**)(void, const AudioStreamBasicDescription *, uint64_t, void))(**((void **)this + 1)
                                                                                                 + 448))(*((void *)this + 1), a2, 2, *((unsigned int *)this + 6));
}

uint64_t DSPGraph::AUBox::setFormatOnUnit(AudioUnit *this, const AudioStreamBasicDescription *inData, AudioUnitScope a3, AudioUnitElement a4)
{
  uint64_t result = AudioUnitSetProperty(this[106], 8u, a3, a4, inData, 0x28u);
  if (result)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v14, "setFormatOnUnit");
    uint64_t v7 = (*((uint64_t (**)(AudioUnit *))*this + 2))(this);
    uint64_t v8 = this + 4;
    if (*((char *)this + 55) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    int16x8_t v9 = *(int16x8_t *)&inData->mBytesPerPacket;
    v16[0] = *(_OWORD *)&inData->mSampleRate;
    v16[1] = v9;
    uint64_t v17 = *(void *)&inData->mBitsPerChannel;
    CA::StreamDescription::AsString((CA::StreamDescription *)v12, v16, *(double *)v16, v9);
    if (v13 >= 0) {
      uint64_t v11 = v12;
    }
    else {
      uint64_t v11 = (void *)v12[0];
    }
    DSPGraph::strprintf((DSPGraph *)"AUBox::setFormatOnUnit %s %s : %s", v10, v7, v8, v11);
  }
  return result;
}

void sub_18FED8480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v31 - 57) < 0) {
    operator delete(*(void **)(v31 - 80));
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(caulk::concurrent::details::lf_read_sync_write_impl *a1, uint64_t *a2)
{
  uint64_t result = caulk::concurrent::details::lf_read_sync_write_impl::begin_access(a1);
  if (*((unsigned char *)a1 + result + 8))
  {
    uint64_t v5 = (char *)a1 + 24 * result;
    uint64_t v6 = *((void *)v5 + 2);
    uint64_t v7 = *((void *)v5 + 3);
    if (v6 == v7) {
      goto LABEL_6;
    }
    do
    {
      int v8 = *((_DWORD *)a2 + 2);
      uint64_t v11 = *a2;
      int v10 = v8;
      uint64_t v9 = *(void *)(v6 + 32);
      if (!v9) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v9 + 48))(v9, &v11, &v10);
      v6 += 48;
    }
    while (v6 != v7);
    if (a1)
    {
LABEL_6:
      return caulk::concurrent::details::lf_read_sync_write_impl::end_access(a1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

OSStatus AudioUnitProcessMultiple(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, UInt32 inNumberInputBufferLists, const AudioBufferList **inInputBufferLists, UInt32 inNumberOutputBufferLists, AudioBufferList **ioOutputBufferLists)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v9 = *(void *)&inNumberOutputBufferLists;
  uint64_t v11 = *(void *)&inNumberInputBufferLists;
  uint64_t v12 = *(void *)&inNumberFrames;
  uint64_t v15 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v15) {
    return -4;
  }
  unsigned int v16 = v15;
  if (*(_WORD *)((**v15)(v15) + 38) != 24949) {
    return -3000;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t (**)(void), AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **))(*(void *)((**v16)(v16) + 112) + 136);
  if (!v17) {
    return -4;
  }
  OSStatus v18 = v16[3];
  return v17(v18, ioActionFlags, inTimeStamp, v12, v11, inInputBufferLists, v9, ioOutputBufferLists);
}

void DSPGraph::GraphInput::process(DSPGraph::GraphInput *this, uint64_t a2, double a3, double a4)
{
  unsigned int v4 = a2;
  uint64_t v6 = *((void *)this + 110);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, void, void, uint64_t))(*(void *)v6 + 96))(v6, a2, *(void *)(*((void *)this + 106) + 72), *((unsigned __int8 *)this + 912), (uint64_t)*(double *)(*((void *)this + 106) + 8));
  }
  if (*(unsigned char *)(*((void *)this + 1) + 764)) {
    goto LABEL_4;
  }
  unsigned int v11 = v4 / (*(unsigned int (**)(DSPGraph::GraphInput *))(*(void *)this + 672))(this);
  if (!*(unsigned char *)(*((void *)this + 1) + 766))
  {
    uint64_t v30 = *((void *)this + 11);
    if (*((void *)this + 12) == v30)
    {
      std::string::basic_string[abi:ne180100]<0>(v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v42, "out");
      unint64_t v39 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        unint64_t v39 = (void *)*v39;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
    DSPGraph::RingBuffer::read((DSPGraph::GraphInput *)((char *)this + 808), v11, v11, (unsigned int **)(*(void *)(v31 + 56) + 80));
LABEL_4:
    uint64_t v7 = *((void *)this + 2);
    double v8 = *(double *)(v7 + 256);
    if (*((unsigned char *)this + 856))
    {
      LODWORD(a4) = *(_DWORD *)(v7 + 264);
      unint64_t v9 = llround((v8 - *((double *)this + 109)) / (double)*(unint64_t *)&a4 * 24000000.0)
         + *((void *)this + 108);
      int v10 = 3;
    }
    else
    {
      unint64_t v9 = 0;
      int v10 = 1;
    }
    uint64_t v23 = (void *)*((void *)this + 11);
    uint64_t v24 = (void *)*((void *)this + 12);
    if (v23 != v24)
    {
      int v25 = *(_DWORD *)(*((void *)this + 106) + 4);
      unint64_t v26 = v23;
      uint64_t v27 = v23;
      do
      {
        uint64_t v28 = *v27;
        v27 += 4;
        uint64_t v29 = *(void *)((*(uint64_t (**)(void *))(v28 + 40))(v26) + 56);
        *(double *)(v29 + 8) = v8;
        *(void *)(v29 + 16) = v9;
        *(void *)(v29 + 56) = 0;
        *(_OWORD *)(v29 + 40) = 0u;
        *(_OWORD *)(v29 + 24) = 0u;
        *(_DWORD *)(v29 + 64) = v10;
        *(_DWORD *)(v29 + 68) = 0;
        *(_DWORD *)(v29 + 72) = v25;
        v23 += 4;
        unint64_t v26 = v27;
      }
      while (v27 != v24);
    }
    return;
  }
  uint64_t v40 = *(unsigned int **)(*((void *)this + 106) + 72);
  LOBYTE(v41) = 0;
  uint64_t v12 = *((void *)this + 11);
  if (*((void *)this + 12) == v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v42, "out");
    long long v33 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v33 = (void *)*v33;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v32, v33, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0, v40, v41);
  }
  uint64_t v13 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 56);
  int v14 = (*(uint64_t (**)(DSPGraph::GraphInput *))(*(void *)this + 656))(this);
  DSPGraph::SimpleABL::copy(&v40, (unsigned int **)(v13 + 80), 0, 0, v14 * v11, 1);
  uint64_t v15 = *((void *)this + 11);
  if (*((void *)this + 12) == v15)
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v42, "out");
    int v35 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v35 = (void *)*v35;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v34, v35, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0, v40, v41);
  }
  uint64_t v16 = *((void *)this + 106);
  uint64_t v17 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15) + 56);
  long long v18 = *(_OWORD *)(v16 + 8);
  long long v19 = *(_OWORD *)(v16 + 24);
  long long v20 = *(_OWORD *)(v16 + 40);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(v16 + 56);
  *(_OWORD *)(v17 + 40) = v20;
  *(_OWORD *)(v17 + 24) = v19;
  *(_OWORD *)(v17 + 8) = v18;
  uint64_t v21 = *((void *)this + 11);
  if (*((void *)this + 12) == v21)
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v42, "out");
    AudioUnitRenderActionFlags v37 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      AudioUnitRenderActionFlags v37 = (void *)*v37;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v36, v37, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0, v40, v41);
  }
  int v22 = *(_DWORD *)(*((void *)this + 106) + 4);
  *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v21 + 40))(v21) + 56) + 72) = v22;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&v40);
}

void sub_18FED8BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&a12);
  _Unwind_Resume(a1);
}

DSPGraph::ParameterTap **DSPGraph::Box::processParameterTaps(DSPGraph::ParameterTap **this)
{
  uint64_t v1 = this[19];
  uint64_t v2 = this[20];
  if (v1 != v2)
  {
    uint64_t v3 = (DSPGraph::Box *)this;
    do
    {
      this = (DSPGraph::ParameterTap **)DSPGraph::ParameterTap::process(v1, v3);
      uint64_t v1 = (DSPGraph::ParameterTap *)((char *)v1 + 40);
    }
    while (v1 != v2);
  }
  return this;
}

DSPGraph::PropertyTap **DSPGraph::Box::processPropertyTaps(DSPGraph::PropertyTap **this)
{
  uint64_t v1 = this[22];
  uint64_t v2 = this[23];
  if (v1 != v2)
  {
    uint64_t v3 = (DSPGraph::Box *)this;
    do
    {
      this = (DSPGraph::PropertyTap **)DSPGraph::PropertyTap::process(v1, v3);
      uint64_t v1 = (DSPGraph::PropertyTap *)((char *)v1 + 64);
    }
    while (v1 != v2);
  }
  return this;
}

unint64_t caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal@<X0>(unint64_t result@<X0>, unint64_t a2@<X8>)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X0] }
  unint64_t v9 = 0;
  for (unint64_t i = _X2; ; unint64_t i = _X2)
  {
    uint64_t v11 = (_X3 - 1);
    a2 = a2 & 0xFFFFFFFF00000000 | v11;
    _X6 = (int)_X3 <= 1 ? 0 : i;
    _X3 = _X3 | (v9 << 32);
    __asm { CASPAL          X2, X3, X6, X7, [X0] }
    if (_X2 == i) {
      break;
    }
    unint64_t v9 = HIDWORD(_X3);
  }
  if (!v11)
  {
    if (i) {
      return caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now(result, i);
    }
  }
  return result;
}

void caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal()
{
  _X4 = 0;
  _X5 = 0;
  __asm { CASPAL          X4, X5, X4, X5, [X0] }
  _X6 = _X4;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X6, X7, [X0] }
  if (_X2 != _X4)
  {
    do
    {
      _X4 = _X2;
      _X7 = 0;
      __asm { CASPAL          X6, X7, X4, X5, [X0] }
      uint64_t v13 = _X6 ^ _X2;
      _X2 = _X6;
    }
    while (v13);
  }
}

uint64_t DSPGraph::GraphOutput::process(DSPGraph::GraphOutput *this, unsigned int a2)
{
  if (!*(unsigned char *)(*((void *)this + 1) + 764))
  {
    uint64_t v3 = a2 / (*(unsigned int (**)(DSPGraph::GraphOutput *))(*(void *)this + 672))(this);
    if (*(unsigned char *)(*((void *)this + 1) + 766))
    {
      uint64_t v17 = *(unsigned int **)(*((void *)this + 106) + 72);
      LOBYTE(v18) = 0;
      uint64_t v4 = *((void *)this + 8);
      if (*((void *)this + 9) == v4)
      {
        std::string::basic_string[abi:ne180100]<0>(v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v19, "in");
        int v14 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          int v14 = (void *)*v14;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v13, v14, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0, v17, v18);
      }
      uint64_t v5 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 56);
      int v6 = (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(void *)this + 656))(this);
      DSPGraph::SimpleABL::copy((unsigned int **)(v5 + 80), &v17, 0, 0, (v6 * v3), 1);
      DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&v17);
    }
    else
    {
      uint64_t v7 = *((void *)this + 8);
      if (*((void *)this + 9) == v7)
      {
        std::string::basic_string[abi:ne180100]<0>(v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v19, "in");
        uint64_t v16 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v16 = (void *)*v16;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v15, v16, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
      DSPGraph::RingBuffer::write((DSPGraph::GraphOutput *)((char *)this + 808), v3, v3, (unsigned int **)(*(void *)(v8 + 56) + 80));
    }
  }
  uint64_t v9 = *((void *)this + 8);
  if (*((void *)this + 9) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v19, "in");
    uint64_t v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0, v17, v18);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
  *(_DWORD *)(*((void *)this + 106) + 4) = *(_DWORD *)(*(void *)(result + 56) + 72);
  return result;
}

void sub_18FED9134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&a12);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::ParameterTap::process(DSPGraph::ParameterTap *this, DSPGraph::Box *a2)
{
  (*(void (**)(void, void, void, void))(**(void **)this + 88))(*(void *)this, *((unsigned int *)this + 2), *((unsigned int *)this + 3), *((unsigned int *)this + 4));
  uint64_t v4 = *((unsigned int *)this + 6);
  uint64_t v5 = *((unsigned int *)this + 7);
  uint64_t v6 = *((unsigned int *)this + 8);
  uint64_t v7 = *(uint64_t (**)(DSPGraph::Box *, uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 80);
  return v7(a2, v4, v5, v6, 0);
}

void *std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__emplace_unique_key_args<std::unique_ptr<DSPGraph::IsoGroup>,std::unique_ptr<DSPGraph::IsoGroup>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  int v14 = a1 + 2;
  unint64_t i = operator new(0x18uLL);
  *unint64_t i = 0;
  i[1] = v8;
  uint64_t v15 = *a3;
  *a3 = 0;
  i[2] = v15;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = a1[1];
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint64_t v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v26) = v14;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  void *v25 = *v31;
                  *uint64_t v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                uint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        AudioUnitRenderActionFlags v37 = (void *)*a1;
        *a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v33 = *a1;
  OSStatus v34 = *(void **)(*a1 + 8 * v3);
  if (v34)
  {
    *unint64_t i = *v34;
LABEL_72:
    void *v34 = i;
    goto LABEL_73;
  }
  *unint64_t i = *v14;
  *int v14 = i;
  *(void *)(v33 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v35 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    OSStatus v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_18FED9698(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<DSPGraph::IsoGroup>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void DSPGraph::IsoGroup::checkIsochronicity(DSPGraph::IsoGroup *this)
{
  if (DSPGraph::getLog(void)::onceToken != -1) {
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10594);
  }
  uint64_t v2 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "IsoGroup::checkIsochronicity", buf, 2u);
  }
  for (unint64_t i = (void *)*((void *)this + 4); i; unint64_t i = (void *)*i)
  {
    uint64_t v4 = (void *)i[2];
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    if (v5 != v6)
    {
      uint64_t v7 = v4[8];
      do
      {
        int v8 = *((_DWORD *)this + 66);
        if (v8 != **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 120))
        {
          if (*((_DWORD *)this + 66))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
            std::string::basic_string[abi:ne180100]<0>(v32, "checkIsochronicity");
            uint64_t v20 = *((unsigned int *)this + 66);
            uint64_t v21 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 120);
            uint64_t v22 = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
            DSPGraph::strprintf((DSPGraph *)"sample rates in group do not match  %u %u %s", v23, v20, v21, v22);
          }
          *((_DWORD *)this + 66) = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7)
                                                             + 120);
        }
        int v9 = *((_DWORD *)this + 67);
        if (v9 != *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 120) + 40))
        {
          if (*((_DWORD *)this + 67) != 1)
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
            std::string::basic_string[abi:ne180100]<0>(v32, "checkIsochronicity");
            uint64_t v16 = *((unsigned int *)this + 67);
            uint64_t v17 = *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 120)
                                  + 40);
            uint64_t v18 = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
            DSPGraph::strprintf((DSPGraph *)"block sizes in group do not match  %u %u %s", v19, v16, v17, v18);
          }
          *((_DWORD *)this + 67) = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7)
                                                         + 120)
                                             + 40);
        }
        v7 += 32;
        v5 += 32;
      }
      while (v7 != v6);
    }
    uint64_t v10 = v4[11];
    uint64_t v11 = v4[12];
    if (v10 != v11)
    {
      uint64_t v12 = v4[11];
      do
      {
        int v13 = *((_DWORD *)this + 66);
        if (v13 != **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 120)
          && !(*(uint64_t (**)(void *))(*v4 + 280))(v4)
          && !(*(uint64_t (**)(void *))(*v4 + 288))(v4))
        {
          if (*((_DWORD *)this + 66))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
            std::string::basic_string[abi:ne180100]<0>(v32, "checkIsochronicity");
            uint64_t v28 = *((unsigned int *)this + 66);
            uint64_t v29 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 120);
            uint64_t v30 = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
            DSPGraph::strprintf((DSPGraph *)"sample rates in group do not match  %u %u %s", v31, v28, v29, v30);
          }
          *((_DWORD *)this + 66) = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12)
                                                             + 120);
        }
        int v14 = *((_DWORD *)this + 67);
        if (v14 != *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 120)
                              + 40)
          && !(*(uint64_t (**)(void *))(*v4 + 272))(v4))
        {
          if (*((_DWORD *)this + 67) != 1)
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
            std::string::basic_string[abi:ne180100]<0>(v32, "checkIsochronicity");
            uint64_t v24 = *((unsigned int *)this + 67);
            uint64_t v25 = *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 120)
                                  + 40);
            uint64_t v26 = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
            DSPGraph::strprintf((DSPGraph *)"block sizes in group do not match  %u %u %s", v27, v24, v25, v26);
          }
          *((_DWORD *)this + 67) = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12)
                                                         + 120)
                                             + 40);
        }
        v12 += 32;
        v10 += 32;
      }
      while (v12 != v11);
    }
  }
  unsigned int v15 = *((_DWORD *)this + 67);
  if (v15 == 1) {
    unsigned int v15 = (*(_DWORD *)(*((void *)this + 1) + 692)
  }
                       + *(_DWORD *)(*((void *)this + 1) + 688) * *((_DWORD *)this + 66)
                       - 1)
        / *(_DWORD *)(*((void *)this + 1) + 692);
  *((_DWORD *)this + 68) = v15;
  *((void *)this + 36) = 0;
}

void sub_18FED9D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelSplitterBox::process(DSPGraph::ChannelSplitterBox *this, int a2)
{
  uint64_t v4 = (char *)this + 64;
  uint64_t v3 = *((void *)this + 8);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "in");
    long long v43 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v43 = (void *)*v43;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v42, v43, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 8);
  if (*((void *)this + 9) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v46, "in");
    long long v45 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v45 = (void *)*v45;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v44, v45, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v8 = *(void *)(*(void *)(v6 + 56) + 80);
  unint64_t v9 = *((void *)this + 12) - *((void *)this + 11);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if ((v9 & 0x1FFFFFFFE0) != 0)
  {
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    size_t v13 = ((4 * a2) << (*(_DWORD *)(*(void *)(result + 120) + 8) == 1718773105));
    uint64_t v14 = (v9 >> 5);
    do
    {
      uint64_t v15 = *((void *)this + 11);
      if (v11 >= (*((void *)this + 12) - v15) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v46, "out");
        uint64_t v41 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v41 = (void *)*v41;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v40, v41, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v11);
      }
      uint64_t v16 = *(unsigned int **)(*(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v15 + 32 * v11)
                                                                                       + 40))(v15 + 32 * v11)
                                         + 56)
                             + 80);
      uint64_t v17 = *v16;
      if (v17)
      {
        uint64_t v18 = (void **)(v16 + 4);
        do
        {
          *((_DWORD *)v18 - 1) = v13;
          unint64_t v19 = *(void **)(v8 + 16 * v12 + 16);
          if (v19 != *v18) {
            memcpy(*v18, v19, v13);
          }
          ++v12;
          v18 += 2;
          --v17;
        }
        while (v17);
      }
      uint64_t v20 = *((void *)this + 8);
      if (*((void *)this + 9) == v20)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v46, "in");
        uint64_t v33 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v33 = (void *)*v33;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v32, v33, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 40))(v20);
      uint64_t v22 = *((void *)this + 11);
      if (v11 >= (*((void *)this + 12) - v22) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v46, "out");
        unint64_t v39 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          unint64_t v39 = (void *)*v39;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v11);
      }
      uint64_t v23 = *(void *)(v21 + 56);
      uint64_t v24 = *(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v22 + 32 * v11) + 40))(v22 + 32 * v11)
                      + 56);
      long long v25 = *(_OWORD *)(v23 + 8);
      long long v26 = *(_OWORD *)(v23 + 24);
      long long v27 = *(_OWORD *)(v23 + 40);
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(v23 + 56);
      *(_OWORD *)(v24 + 40) = v27;
      *(_OWORD *)(v24 + 24) = v26;
      *(_OWORD *)(v24 + 8) = v25;
      uint64_t v28 = *((void *)this + 8);
      if (*((void *)this + 9) == v28)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v46, "in");
        unint64_t v35 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          unint64_t v35 = (void *)*v35;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v34, v35, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
      }
      uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 40))(v28);
      uint64_t v30 = *((void *)this + 11);
      if (v11 >= (*((void *)this + 12) - v30) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v46, "out");
        AudioUnitRenderActionFlags v37 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          AudioUnitRenderActionFlags v37 = (void *)*v37;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v36, v37, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v11);
      }
      int v31 = *(_DWORD *)(*(void *)(v29 + 56) + 72);
      uint64_t result = (*(uint64_t (**)(unint64_t))(*(void *)(v30 + 32 * v11) + 40))(v30 + 32 * v11);
      *(_DWORD *)(*(void *)(result + 56) + 72) = v31;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

void sub_18FEDA364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelJoinerBox::process(DSPGraph::ChannelJoinerBox *this, unsigned int a2)
{
  uint64_t v2 = this;
  uint64_t v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  uint64_t v60 = v2;
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v61, "out");
    BOOL v47 = (void *)((char *)v2 + 32);
    if (*((char *)v2 + 55) < 0) {
      BOOL v47 = (void *)*v47;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v46, v47, (uint64_t)(*((void *)v2 + 12) - *((void *)v2 + 11)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)v2 + 11);
  if (*((void *)v2 + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v61, "out");
    unint64_t v49 = (void *)((char *)v2 + 32);
    if (*((char *)v2 + 55) < 0) {
      unint64_t v49 = (void *)*v49;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v48, v49, (uint64_t)(*((void *)v2 + 12) - *((void *)v2 + 11)) >> 5, 0);
  }
  uint64_t v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  char v9 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 120) + 8) == 1718773105;
  uint64_t v10 = *((void *)v2 + 8);
  uint64_t v11 = *((void *)v2 + 9);
  if (((v11 - v10) & 0x1FFFFFFFE0) != 0)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    size_t v14 = (4 * a2) << v9;
    unint64_t v15 = (v11 - v10) >> 5;
    LOBYTE(v16) = 1;
    do
    {
      if (v15 <= v12)
      {
        std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v61, "in");
        long long v43 = (void *)((char *)v60 + 32);
        if (*((char *)v60 + 55) < 0) {
          long long v43 = (void *)*v43;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v42, v43, (uint64_t)(*((void *)v60 + 9) - *((void *)v60 + 8)) >> 5, v12);
      }
      uint64_t v17 = (*(uint64_t (**)(unint64_t))(*(void *)(v10 + 32 * v12) + 40))(v10 + 32 * v12);
      uint64_t v18 = *((void *)v2 + 8);
      if (v12 >= (*((void *)v2 + 9) - v18) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v61, "in");
        long long v45 = (void *)((char *)v60 + 32);
        if (*((char *)v60 + 55) < 0) {
          long long v45 = (void *)*v45;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v44, v45, (uint64_t)(*((void *)v60 + 9) - *((void *)v60 + 8)) >> 5, v12);
      }
      uint64_t v19 = *(void *)(*(void *)(v17 + 56) + 80);
      uint64_t v20 = (*(uint64_t (**)(unint64_t))(*(void *)(v18 + 32 * v12) + 40))(v18 + 32 * v12);
      uint64_t v21 = *((void *)v2 + 8);
      if (v12 >= (*((void *)v2 + 9) - v21) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v61, "in");
        uint64_t v41 = (void *)((char *)v60 + 32);
        if (*((char *)v60 + 55) < 0) {
          uint64_t v41 = (void *)*v41;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v40, v41, (uint64_t)(*((void *)v60 + 9) - *((void *)v60 + 8)) >> 5, v12);
      }
      uint64_t v22 = *(void *)(v20 + 120);
      int v23 = *(_DWORD *)(*(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v21 + 32 * v12) + 40))(v21 + 32 * v12)
                                  + 56)
                      + 72);
      if (*(_DWORD *)(v22 + 28))
      {
        unint64_t v24 = 0;
        long long v25 = (void **)&v8[4 * v13 + 4];
        long long v26 = (const void **)(v19 + 16);
        do
        {
          if (v13 + v24 >= *v8) {
            __assert_rtn("process", "DSPGraph_Box.cpp", 3441, "outBufferIndex < outABL->mNumberBuffers");
          }
          *((_DWORD *)v25 - 1) = v14;
          if ((v23 & 0x10) != 0)
          {
            bzero(*v25, v14);
          }
          else if (*v26 != *v25)
          {
            memcpy(*v25, *v26, v14);
          }
          ++v24;
          v25 += 2;
          v26 += 2;
        }
        while (v24 < *(unsigned int *)(v22 + 28));
        uint64_t v13 = (v13 + v24);
        uint64_t v2 = v60;
      }
      v16 &= (v23 & 0x10) >> 4;
      ++v12;
      uint64_t v10 = *((void *)v2 + 8);
      uint64_t v11 = *((void *)v2 + 9);
      unint64_t v15 = (v11 - v10) >> 5;
    }
    while (v12 < v15);
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  if (v11 == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v61, "in");
    int v51 = (void *)((char *)v60 + 32);
    if (*((char *)v60 + 55) < 0) {
      int v51 = (void *)*v51;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v50, v51, (uint64_t)(*((void *)v60 + 9) - *((void *)v60 + 8)) >> 5, 0);
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  uint64_t v28 = *((void *)v2 + 11);
  if (*((void *)v2 + 12) == v28)
  {
    std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v61, "out");
    long long v53 = (void *)((char *)v60 + 32);
    if (*((char *)v60 + 55) < 0) {
      long long v53 = (void *)*v53;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v52, v53, (uint64_t)(*((void *)v60 + 12) - *((void *)v60 + 11)) >> 5, 0);
  }
  uint64_t v29 = *(void *)(v27 + 56);
  uint64_t v30 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v28 + 40))(v28) + 56);
  long long v31 = *(_OWORD *)(v29 + 8);
  long long v32 = *(_OWORD *)(v29 + 24);
  long long v33 = *(_OWORD *)(v29 + 40);
  *(_OWORD *)(v30 + 56) = *(_OWORD *)(v29 + 56);
  *(_OWORD *)(v30 + 40) = v33;
  *(_OWORD *)(v30 + 24) = v32;
  *(_OWORD *)(v30 + 8) = v31;
  uint64_t v34 = *((void *)v2 + 8);
  if (*((void *)v2 + 9) == v34)
  {
    std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v61, "in");
    unint64_t v55 = (void *)((char *)v60 + 32);
    if (*((char *)v60 + 55) < 0) {
      unint64_t v55 = (void *)*v55;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v54, v55, (uint64_t)(*((void *)v60 + 9) - *((void *)v60 + 8)) >> 5, 0);
  }
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 40))(v34);
  uint64_t v36 = *((void *)v2 + 11);
  if (*((void *)v2 + 12) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v61, "out");
    long long v57 = (void *)((char *)v60 + 32);
    if (*((char *)v60 + 55) < 0) {
      long long v57 = (void *)*v57;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v56, v57, (uint64_t)(*((void *)v60 + 12) - *((void *)v60 + 11)) >> 5, 0);
  }
  int v37 = *(_DWORD *)(*(void *)(v35 + 56) + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v37;
  if ((v16 & 1) == 0)
  {
    uint64_t v39 = *((void *)v2 + 11);
    if (*((void *)v2 + 12) == v39)
    {
      std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v61, "out");
      uint64_t v59 = (void *)((char *)v60 + 32);
      if (*((char *)v60 + 55) < 0) {
        uint64_t v59 = (void *)*v59;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v58, v59, (uint64_t)(*((void *)v60 + 12) - *((void *)v60 + 11)) >> 5, 0);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 40))(v39);
    *(_DWORD *)(*(void *)(result + 56) + 72) &= ~0x10u;
  }
  return result;
}

void sub_18FEDAC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

unint64_t caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(unint64_t result)
{
  if (HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
  }
  return result;
}

void sub_18FEDADA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::PropertyTap::process(DSPGraph::PropertyTap *this, DSPGraph::Box *a2)
{
  uint64_t v4 = *((void *)this + 5);
  unsigned int v12 = *((_DWORD *)this + 12) - v4;
  int v5 = (*(uint64_t (**)(void, void, void, void, unsigned int *, uint64_t))(**(void **)this + 304))(*(void *)this, *((unsigned int *)this + 2), *((unsigned int *)this + 3), *((unsigned int *)this + 4), &v12, v4);
  if (v5)
  {
    int v7 = v5;
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "process");
    std::string::basic_string[abi:ne180100]<0>(&v9, "getProperty failed");
    DSPGraph::ThrowException(v7, &v11, 830, &v10, &v9);
  }
  uint64_t result = (*(uint64_t (**)(DSPGraph::Box *, void, void, void, void, uint64_t))(*(void *)a2 + 312))(a2, *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8), v12, v4);
  if (result)
  {
    int v8 = result;
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "process");
    std::string::basic_string[abi:ne180100]<0>(&v9, "setProperty failed");
    DSPGraph::ThrowException(v8, &v11, 835, &v10, &v9);
  }
  return result;
}

void sub_18FEDAF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticSumBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  if (*(void *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v40 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v40 = (void *)*v40;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v39, v40, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    long long v42 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      long long v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  int v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 40))();
  uint64_t v10 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    long long v44 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      long long v44 = (void *)*v44;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  long long v11 = *(_DWORD **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v45 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v45)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      BOOL v47 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        BOOL v47 = (void *)*v47;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 40))(v45);
    uint64_t v66 = *(void *)(a1 + 64);
    if ((unint64_t)(*(void *)(a1 + 72) - v66) > 0x20)
    {
      uint64_t v67 = *(unsigned int *)(*(void *)(v65 + 120) + 28);
      uint64_t v68 = (*(uint64_t (**)(void))(*(void *)(v66 + 32) + 40))();
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v69, v67, *(unsigned int *)(*(void *)(v68 + 120) + 28));
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    BOOL v75 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      BOOL v75 = (void *)*v75;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v74, v75, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v13 = *(_DWORD **)(*(void *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v48 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v48)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v50 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v50 = (void *)*v50;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
    uint64_t v71 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) == v71)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "out");
      uint64_t v73 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v73 = (void *)*v73;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v72, v73, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
    }
    uint64_t v76 = *(unsigned int *)(*(void *)(v70 + 120) + 28);
    uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 40))(v71);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v78, v76, *(unsigned int *)(*(void *)(v77 + 120) + 28));
  }
  unsigned int v14 = v8[3];
  if (v14 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v51 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", v52, (v51 * a2), v8[3]);
  }
  unsigned int v15 = v11[3];
  if (v15 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v53 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", v54, (v53 * a2), v11[3]);
  }
  uint64_t v16 = *v8;
  if (v16)
  {
    uint64_t v17 = v13 + 4;
    uint64_t v18 = (uint64_t *)(v11 + 4);
    uint64_t v19 = (uint64_t *)(v8 + 4);
    do
    {
      uint64_t v21 = *v19;
      v19 += 2;
      uint64_t v20 = v21;
      uint64_t v22 = *v18;
      v18 += 2;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 776) + 16))(*(void *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 40))(*(void *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  uint64_t v23 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    long long v56 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      long long v56 = (void *)*v56;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v55, v56, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
  uint64_t v25 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint8x8_t v58 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint8x8_t v58 = (void *)*v58;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v26 = *(void *)(v24 + 56);
  uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25) + 56);
  long long v28 = *(_OWORD *)(v26 + 8);
  long long v29 = *(_OWORD *)(v26 + 24);
  long long v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  uint64_t v31 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v60 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v60 = (void *)*v60;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v59, v60, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
  uint64_t v33 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    long long v62 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      long long v62 = (void *)*v62;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v61, v62, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  int v34 = *(_DWORD *)(*(void *)(v32 + 56) + 72);
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)(v33 + 32) + 40))();
  uint64_t v36 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    unint64_t v64 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v64 = (void *)*v64;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v63, v64, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  unsigned int v37 = (*(_DWORD *)(*(void *)(v35 + 56) + 72) | 0xFFFFFFEF) & v34;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v37;
  return result;
}

void sub_18FEDBADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::process(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1;
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v69 = v2;
  if (*(void *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    long long v56 = (void *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0) {
      long long v56 = (void *)*v56;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v55, v56, (uint64_t)(*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *(void *)(v2 + 88);
  if (*(void *)(v2 + 96) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "out");
    uint8x8_t v58 = (void *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0) {
      uint8x8_t v58 = (void *)*v58;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (uint64_t)(*(void *)(v2 + 96) - *(void *)(v2 + 88)) >> 5, 0);
  }
  int v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  uint64_t v10 = *(void *)(v2 + 88);
  if (*(void *)(v2 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "out");
    uint64_t v60 = (void *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0) {
      uint64_t v60 = (void *)*v60;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v59, v60, (uint64_t)(*(void *)(v2 + 96) - *(void *)(v2 + 88)) >> 5, 0);
  }
  uint64_t v11 = *(void *)(*(void *)(v9 + 56) + 80);
  int v70 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 120) + 8);
  uint64_t v12 = *v8;
  if (*(unsigned char *)(v2 + 812)) {
    *(unsigned char *)(v2 + 812) = 0;
  }
  if (*(unsigned char *)(v2 + 813))
  {
    float v13 = 0.0;
    if (!*(unsigned char *)(v2 + 780)) {
      float v13 = 1.0;
    }
    *(float *)(v2 + 808) = *(float *)(v2 + 776) * v13;
  }
  uint64_t v14 = *(void *)(v2 + 64);
  if (*(void *)(v2 + 72) == v14)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    long long v62 = (void *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0) {
      long long v62 = (void *)*v62;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v61, v62, (uint64_t)(*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 5, 0);
  }
  size_t v15 = (4 * a2) << (v70 == 1718773105);
  if ((*(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14) + 56) + 72) & 0x10) != 0)
  {
    if (v12)
    {
      uint64_t v24 = (void **)(v11 + 16);
      do
      {
        bzero(*v24, v15);
        *((_DWORD *)v24 - 1) = v15;
        v24 += 2;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    vDSP_Length v16 = a2;
    float v17 = *(float *)(v2 + 804);
    uint64_t v18 = (const float *)(v2 + 808);
    float v19 = *(float *)(v2 + 808);
    if (v17 == v19)
    {
      if (v12)
      {
        uint64_t v20 = (float **)(v11 + 16);
        uint64_t v21 = (const float **)(v8 + 4);
        do
        {
          uint64_t v22 = *v21;
          uint64_t v23 = *v20;
          vDSP_vsmul(*v21, 1, (const float *)(v2 + 808), *v20, 1, v16);
          if (v70 == 1718773105) {
            vDSP_vsmul(&v22[v16], 1, (const float *)(v2 + 808), &v23[v16], 1, v16);
          }
          *((_DWORD *)v20 - 1) = v15;
          v20 += 2;
          v21 += 2;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      if (*(unsigned char *)(v2 + 813))
      {
        double v25 = *(double *)(v2 + 784);
        float v26 = (float)(v19 - v17)
            / (float)(v25 * (double)DSPGraph::Box::sampleRate((DSPGraph::Box *)v2));
        *(float *)(v2 + 800) = v26;
        float v17 = *(float *)(v2 + 804);
      }
      else
      {
        float v26 = *(float *)(v2 + 800);
      }
      *(unsigned char *)(v2 + 813) = 0;
      uint64_t v27 = (const float *)(v2 + 800);
      float v28 = v17 + (float)(v26 * (float)a2);
      if ((v26 <= 0.0 || (float v29 = *v18, v28 <= *v18)) && (v26 >= 0.0 || (float v29 = *v18, v28 >= *v18)))
      {
        if (v12)
        {
          uint64_t v35 = (float **)(v11 + 16);
          uint64_t v36 = (const float **)(v8 + 4);
          do
          {
            unsigned int v37 = *v36;
            unint64_t v38 = *v35;
            LODWORD(__Start[0]) = *(_DWORD *)(v2 + 804);
            vDSP_vrampmul(v37, 1, (float *)__Start, (const float *)(v2 + 800), v38, 1, v16);
            if (v70 == 1718773105)
            {
              LODWORD(__Start[0]) = *(_DWORD *)(v2 + 804);
              vDSP_vrampmul(&v37[v16], 1, (float *)__Start, (const float *)(v2 + 800), &v38[v16], 1, v16);
            }
            v35 += 2;
            v36 += 2;
            --v12;
          }
          while (v12);
        }
      }
      else if (v12)
      {
        vDSP_Length v30 = fabsf((float)(v29 - v17) / v26);
        vDSP_Length __N = a2 - v30;
        uint64_t v68 = (const float *)(v2 + 800);
        uint64_t v31 = (float **)(v11 + 16);
        uint64_t v32 = (const float **)(v8 + 4);
        do
        {
          uint64_t v33 = *v32;
          int v34 = *v31;
          LODWORD(__Start[0]) = *(_DWORD *)(v2 + 804);
          vDSP_vrampmul(v33, 1, (float *)__Start, v27, v34, 1, v30);
          vDSP_vsmul(&v33[v30], 1, v18, &v34[v30], 1, __N);
          if (v70 == 1718773105)
          {
            LODWORD(__Start[0]) = *(_DWORD *)(v69 + 804);
            vDSP_vrampmul(&v33[v16], 1, (float *)__Start, v68, &v34[v16], 1, v30);
            vDSP_vsmul(&v33[v30 + v16], 1, v18, &v34[v30 + v16], 1, __N);
          }
          v31 += 2;
          v32 += 2;
          --v12;
          uint64_t v27 = v68;
          uint64_t v2 = v69;
        }
        while (v12);
        float v28 = *v18;
      }
      else
      {
        float v28 = v29;
      }
      *(float *)(v2 + 804) = v28;
    }
  }
  if (*(unsigned char *)(v2 + 813)) {
    int v39 = 16 * (*(float *)(v2 + 808) == 0.0);
  }
  else {
    int v39 = 0;
  }
  uint64_t v40 = *(void *)(v2 + 64);
  if (*(void *)(v2 + 72) == v40)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    unint64_t v64 = (void *)(v69 + 32);
    if (*(char *)(v69 + 55) < 0) {
      unint64_t v64 = (void *)*v64;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v63, v64, (uint64_t)(*(void *)(v69 + 72) - *(void *)(v69 + 64)) >> 5, 0);
  }
  uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40);
  uint64_t v42 = *(void *)(v2 + 64);
  if (*(void *)(v2 + 72) == v42)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    uint64_t v66 = (void *)(v69 + 32);
    if (*(char *)(v69 + 55) < 0) {
      uint64_t v66 = (void *)*v66;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v65, v66, (uint64_t)(*(void *)(v69 + 72) - *(void *)(v69 + 64)) >> 5, 0);
  }
  int v43 = *(_DWORD *)(*(void *)(v41 + 56) + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 40))(v42);
  uint64_t v45 = *(uint64_t **)(v2 + 88);
  uint64_t v46 = *(uint64_t **)(v2 + 96);
  if (v45 != v46)
  {
    int v47 = v43 | v39;
    uint64_t v48 = (_OWORD *)(*(void *)(result + 56) + 8);
    uint64_t result = *(void *)(v2 + 88);
    unint64_t v49 = (uint64_t *)result;
    do
    {
      uint64_t v50 = *v49;
      v49 += 4;
      uint64_t v51 = *(void *)((*(uint64_t (**)(uint64_t))(v50 + 40))(result) + 56);
      long long v53 = v48[2];
      long long v52 = v48[3];
      long long v54 = v48[1];
      *(_OWORD *)(v51 + 8) = *v48;
      *(_OWORD *)(v51 + 24) = v54;
      *(_OWORD *)(v51 + 40) = v53;
      *(_OWORD *)(v51 + 56) = v52;
      *(_DWORD *)(v51 + 72) = v47;
      v45 += 4;
      uint64_t result = (uint64_t)v49;
    }
    while (v49 != v46);
  }
  if (*(float *)(v2 + 804) == *(float *)(v2 + 808)) {
    *(unsigned char *)(v2 + 813) = 1;
  }
  return result;
}

void sub_18FEDC480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *__A, const float *__B, float *a5)
{
}

void DSPGraph::strprintf(DSPGraph *this, const char *a2, ...)
{
}

void sub_18FEDC640(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8910](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::asOperativeFreqSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asOperativeSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::NonFiniteProtectionBox::process(int64x2_t *this, unsigned int a2)
{
  unsigned __int8 v3 = atomic_load(&this[50].u8[9]);
  uint64_t v6 = this + 4;
  uint64_t v4 = this[4].i64[0];
  uint64_t v5 = v6->i64[1];
  if (v3)
  {
    if (v5 == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(__B, "in");
      long long v56 = this + 2;
      if (this[3].i8[7] < 0) {
        long long v56 = (int64x2_t *)v56->i64[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v55, v56, (this[4].i64[1] - this[4].i64[0]) >> 5, 0);
    }
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v29 = this[5].i64[1];
    if (this[6].i64[0] == v29)
    {
      std::string::basic_string[abi:ne180100]<0>(__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(__B, "out");
      uint64_t v60 = this + 2;
      if (this[3].i8[7] < 0) {
        uint64_t v60 = (int64x2_t *)v60->i64[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v59, v60, (this[6].i64[0] - this[5].i64[1]) >> 5, 0);
    }
    vDSP_Length v30 = (void *)(*(void *)(v28 + 56) + 80);
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 40))(v29);
    DSPGraph::SimpleABL::copy(v30, (DSPGraph::SimpleABL *)(*(void *)(v31 + 56) + 80), 1);
  }
  else
  {
    if (v5 == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(__B, "in");
      long long v54 = this + 2;
      if (this[3].i8[7] < 0) {
        long long v54 = (int64x2_t *)v54->i64[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v53, v54, (this[4].i64[1] - this[4].i64[0]) >> 5, 0);
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v8 = this[5].i64[1];
    if (this[6].i64[0] == v8)
    {
      std::string::basic_string[abi:ne180100]<0>(__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(__B, "out");
      uint8x8_t v58 = this + 2;
      if (this[3].i8[7] < 0) {
        uint8x8_t v58 = (int64x2_t *)v58->i64[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (this[6].i64[0] - this[5].i64[1]) >> 5, 0);
    }
    uint64_t v9 = *(unsigned int **)(*(void *)(v7 + 56) + 80);
    uint64_t v10 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8) + 56) + 80);
    uint64_t v11 = *v9;
    float v12 = COERCE_FLOAT(atomic_load(&this[48].u32[1]));
    v13.n128_f32[0] = __exp10f(v12 * 0.05);
    if (v11)
    {
      unsigned __int32 v14 = v13.n128_u32[0];
      char v61 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      float v17 = -v13.n128_f32[0];
      do
      {
        uint64_t v18 = *(const float **)&v9[4 * v15 + 4];
        float v19 = *(float **)(v10 + 16 * v15 + 16);
        LODWORD(__C[0]) = 0;
        vDSP_sve(v18, 1, (float *)__C, a2);
        if ((__C[0] & 0x7FFFFFFF) >= 0x7F800000)
        {
          if (a2)
          {
            uint64_t v20 = 4 * a2;
            uint64_t v21 = v18;
            do
            {
              if ((*(_DWORD *)v21 & 0x7FFFFFFFu) >= 0x7F800000) {
                *uint64_t v21 = 0.0;
              }
              ++v21;
              v20 -= 4;
            }
            while (v20);
          }
          char v16 = 1;
        }
        LODWORD(__C[0]) = v14;
        *(float *)__B = v17;
        v63[0] = 0.0;
        vDSP_maxmgv(v18, 1, v63, a2);
        v13.n128_f32[0] = v63[0];
        if (v63[0] <= *(float *)__C)
        {
          if (v18 != v19) {
            memcpy(v19, v18, 4 * a2);
          }
        }
        else
        {
          char v61 = 1;
          vDSP_vclip(v18, 1, (const float *)__B, (const float *)__C, v19, 1, a2);
        }
        ++v15;
      }
      while (v15 != v11);
      if (v16)
      {
        ++this[50].i32[0];
        unsigned __int8 v22 = atomic_load(&this[50].u8[10]);
        if (v22)
        {
          unsigned __int32 v23 = this[50].u32[0];
          unsigned int v24 = atomic_load(&this[50].u32[3]);
          if (!(v23 % v24)) {
            DSPGraph::NonFiniteProtectionBox::addEvent(this, 0);
          }
        }
      }
      if (v61)
      {
        ++this[50].i32[1];
        unsigned __int8 v25 = atomic_load(&this[50].u8[10]);
        if (v25)
        {
          unsigned __int32 v26 = this[50].u32[1];
          unsigned int v27 = atomic_load(&this[50].u32[3]);
          if (!(v26 % v27)) {
            DSPGraph::NonFiniteProtectionBox::addEvent(this, 1);
          }
        }
      }
    }
  }
  uint64_t v32 = this[4].i64[0];
  if (this[4].i64[1] == v32)
  {
    std::string::basic_string[abi:ne180100]<0>(__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__B, "in");
    uint64_t v46 = this + 2;
    if (this[3].i8[7] < 0) {
      uint64_t v46 = (int64x2_t *)v46->i64[0];
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v45, v46, (this[4].i64[1] - this[4].i64[0]) >> 5, 0);
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v32 + 40))(v32, v13);
  uint64_t v34 = this[5].i64[1];
  if (this[6].i64[0] == v34)
  {
    std::string::basic_string[abi:ne180100]<0>(__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__B, "out");
    uint64_t v48 = this + 2;
    if (this[3].i8[7] < 0) {
      uint64_t v48 = (int64x2_t *)v48->i64[0];
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v47, v48, (this[6].i64[0] - this[5].i64[1]) >> 5, 0);
  }
  uint64_t v35 = *(void *)(v33 + 56);
  uint64_t v36 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v34 + 40))(v34) + 56);
  long long v37 = *(_OWORD *)(v35 + 8);
  long long v38 = *(_OWORD *)(v35 + 24);
  long long v39 = *(_OWORD *)(v35 + 40);
  *(_OWORD *)(v36 + 56) = *(_OWORD *)(v35 + 56);
  *(_OWORD *)(v36 + 40) = v39;
  *(_OWORD *)(v36 + 24) = v38;
  *(_OWORD *)(v36 + 8) = v37;
  uint64_t v40 = this[4].i64[0];
  if (this[4].i64[1] == v40)
  {
    std::string::basic_string[abi:ne180100]<0>(__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__B, "in");
    uint64_t v50 = this + 2;
    if (this[3].i8[7] < 0) {
      uint64_t v50 = (int64x2_t *)v50->i64[0];
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (this[4].i64[1] - this[4].i64[0]) >> 5, 0);
  }
  uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40);
  uint64_t v42 = this[5].i64[1];
  if (this[6].i64[0] == v42)
  {
    std::string::basic_string[abi:ne180100]<0>(__C, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(__B, "out");
    long long v52 = this + 2;
    if (this[3].i8[7] < 0) {
      long long v52 = (int64x2_t *)v52->i64[0];
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v51, v52, (this[6].i64[0] - this[5].i64[1]) >> 5, 0);
  }
  int v43 = *(_DWORD *)(*(void *)(v41 + 56) + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 40))(v42);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v43;
  return result;
}

void sub_18FEDCE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::RingBufferBox::configureFromDryRun(DSPGraph::RingBufferBox *this)
{
  uint64_t v2 = *((void *)this + 99);
  uint64_t v3 = v2 * (*(unsigned int (**)(DSPGraph::RingBufferBox *))(*(void *)this + 664))(this);
  uint64_t v4 = *(void *)(*((void *)this + 1) + 696);
  unsigned int v5 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 672))(this);
  unint64_t v6 = (v4 * v5 + ~v3) / (v4 * v5);
  if (v6 >= 0x100000000) {
    unsigned __int8 v7 = 0;
  }
  else {
    unsigned __int8 v7 = (v4 * v5 + ~v3) / (v4 * v5);
  }
  BOOL v8 = (uint64_t)v6 <= 0;
  unint64_t v9 = HIDWORD(v6);
  int v10 = v6 & 0xFFFFFF00 | v7;
  if (v8) {
    int v11 = 0;
  }
  else {
    int v11 = -1;
  }
  if (v9) {
    int v10 = v11;
  }
  *((_DWORD *)this + 194) = v10;
  uint64_t v12 = *((void *)this + 100) - *((void *)this + 99);
  uint64_t v13 = (*(unsigned int (**)(DSPGraph::RingBufferBox *))(*(void *)this + 664))(this);
  uint64_t v14 = *(void *)(*((void *)this + 1) + 696);
  uint64_t result = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(void *)this + 672))(this);
  unint64_t v16 = (v14 * result + v12 * v13 - 1) / (v14 * result);
  if (v16 >= 0x100000000) {
    unsigned __int8 v17 = 0;
  }
  else {
    unsigned __int8 v17 = (v14 * result + v12 * v13 - 1) / (v14 * result);
  }
  BOOL v8 = (uint64_t)v16 <= 0;
  unint64_t v18 = HIDWORD(v16);
  int v19 = v16 & 0xFFFFFF00 | v17;
  if (v8) {
    int v20 = 0;
  }
  else {
    int v20 = -1;
  }
  if (v18) {
    int v19 = v20;
  }
  *((_DWORD *)this + 193) = v19;
  return result;
}

__n128 DSPGraph::AUBox::desc@<Q0>(DSPGraph::AUBox *this@<X0>, __n128 *a2@<X8>)
{
  a2[1].n128_u32[0] = *((_DWORD *)this + 210);
  __n128 result = *(__n128 *)((char *)this + 824);
  *a2 = result;
  return result;
}

void IPCAURegistrar::ApplicationStateChangedNotificationCallback(IPCAURegistrar *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  unint64_t v6 = *((void *)a2 + 28);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN14IPCAURegistrar43ApplicationStateChangedNotificationCallbackEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
  void v7[3] = &__block_descriptor_48_e5_v8__0l;
  v7[4] = a2;
  v7[5] = a5;
  dispatch_sync(v6, v7);
}

void *DSPGraph::Graph::propagateFlagsAndTimeStamp(void *this, uint64_t a2)
{
  if (((this[39] - this[38]) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v2 = (uint64_t)this;
    unint64_t v3 = 0;
    uint64_t v4 = (_OWORD *)(a2 + 8);
    do
    {
      uint64_t v5 = DSPGraph::Graph::out((DSPGraph::Graph *)v2, v3);
      uint64_t v6 = *(void *)(v5 + 64);
      if (*(void *)(v5 + 72) == v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v13, "in");
        uint64_t v12 = (void *)(v5 + 32);
        if (*(char *)(v5 + 55) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v11, v12, (uint64_t)(*(void *)(v5 + 72) - *(void *)(v5 + 64)) >> 5, 0);
      }
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
      uint64_t v7 = this[7];
      *((_DWORD *)v4 - 1) = *(_DWORD *)(v7 + 72);
      long long v8 = *(_OWORD *)(v7 + 8);
      long long v9 = *(_OWORD *)(v7 + 24);
      long long v10 = *(_OWORD *)(v7 + 56);
      v4[2] = *(_OWORD *)(v7 + 40);
      v4[3] = v10;
      _OWORD *v4 = v8;
      v4[1] = v9;
      if (!*(unsigned char *)(v2 + 766)) {
        *(void *)uint64_t v4 = *(void *)(v5 + 856);
      }
      ++v3;
      v4 += 5;
    }
    while (v3 < ((*(void *)(v2 + 312) - *(void *)(v2 + 304)) >> 3));
  }
  return this;
}

void sub_18FEDD254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::GraphOutput::copyOutput(DSPGraph::GraphOutput *this)
{
  uint64_t v2 = (DSPGraph::GraphOutput *)((char *)this + 808);
  int v3 = *((_DWORD *)this + 209);
  unsigned int v4 = (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(void *)this + 672))(this) * v3;
  uint64_t v5 = (unsigned int *)*((void *)this + 106);
  unsigned int v6 = DSPGraph::GraphOutput::preflight(this);
  unsigned int v7 = *v5;
  if (v6 < *v5) {
    unsigned int v7 = v6;
  }
  if (v4 >= v7) {
    unsigned int v4 = v7;
  }
  *((double *)this + 107) = *((double *)this + 107) + (double)v4;
  **((_DWORD **)this + 106) = v4;
  unsigned int v8 = (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(void *)this + 672))(this);
  long long v9 = *(unsigned int **)(*((void *)this + 106) + 72);
  char v10 = 0;
  DSPGraph::RingBuffer::read(v2, v4 / v8, v4 / v8, &v9);
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&v9);
}

void sub_18FEDD3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DSPGraph::GraphInput::copyInput(DSPGraph::GraphInput *this)
{
  uint64_t v2 = *((void *)this + 106);
  int v3 = *(_DWORD *)(v2 + 64);
  *((unsigned char *)this + 856) = (v3 & 2) != 0;
  if ((v3 & 2) != 0)
  {
    *((void *)this + 108) = *(void *)(v2 + 16);
    *((void *)this + 109) = *(void *)(v2 + 8);
  }
  int v4 = *((_DWORD *)this + 206) - *((_DWORD *)this + 209);
  unsigned int v5 = (*(uint64_t (**)(DSPGraph::GraphInput *))(*(void *)this + 672))(this) * v4;
  unsigned int v6 = (unsigned int *)*((void *)this + 106);
  unsigned int v7 = DSPGraph::GraphInput::preflight(this);
  unsigned int v8 = *v6;
  if (v7 < *v6) {
    unsigned int v8 = v7;
  }
  if (v5 >= v8) {
    unsigned int v5 = v8;
  }
  **((_DWORD **)this + 106) = v5;
  unsigned int v9 = (*(uint64_t (**)(DSPGraph::GraphInput *))(*(void *)this + 672))(this);
  char v10 = *(unsigned int **)(*((void *)this + 106) + 72);
  char v11 = 0;
  DSPGraph::RingBuffer::write((DSPGraph::GraphInput *)((char *)this + 808), v5 / v9, v5 / v9, &v10);
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)&v10);
}

void sub_18FEDD4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned int **DSPGraph::RingBuffer::write(DSPGraph::RingBuffer *this, uint64_t a2, unsigned int a3, unsigned int **a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a3 > a2)
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_868);
    }
    uint64_t v12 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      unsigned int v19 = a3;
      __int16 v20 = 1024;
      int v21 = a2;
      _os_log_fault_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: RingBuffer::write advancing write by more packets than provided with %u > %u", buf, 0xEu);
    }
    snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: RingBuffer::write advancing write by more packets than provided with %u > %u");
LABEL_17:
    __break(1u);
  }
  if (*((_DWORD *)this + 4) - *((_DWORD *)this + 7) < a2)
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_868);
    }
    uint64_t v13 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      int v14 = *((_DWORD *)this + 4);
      int v15 = *((_DWORD *)this + 7);
      int v16 = *((_DWORD *)this + 8);
      int v17 = *((_DWORD *)this + 9);
      *(_DWORD *)buf = 67110400;
      unsigned int v19 = a2;
      __int16 v20 = 1024;
      int v21 = v14 - v15;
      __int16 v22 = 1024;
      int v23 = v14;
      __int16 v24 = 1024;
      int v25 = v15;
      __int16 v26 = 1024;
      int v27 = v16;
      __int16 v28 = 1024;
      int v29 = v17;
      _os_log_fault_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: RingBuffer::write overflow %u > %u (capacity = %u, readAvail = %u, readPos = %u, writePos = %u)", buf, 0x26u);
    }
    snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: RingBuffer::write overflow %u > %u (capacity = %u, readAvail = %u, readPos = %u, writePos = %u)", a2);
    goto LABEL_17;
  }
  __n128 result = DSPGraph::SimpleABL::dstWrapCopy(a4, (unsigned int **)this, 0, (*((_DWORD *)this + 9) * *((_DWORD *)this + 6)), (*((_DWORD *)this + 6) * a2));
  unsigned int v8 = *((_DWORD *)this + 9) + a3;
  *((_DWORD *)this + 9) = v8;
  unsigned int v9 = *((_DWORD *)this + 5);
  BOOL v10 = v8 >= v9;
  unsigned int v11 = v8 - v9;
  if (v10) {
    *((_DWORD *)this + 9) = v11;
  }
  *((_DWORD *)this + 7) += a3;
  return result;
}

unsigned int **DSPGraph::SimpleABL::dstWrapCopy(unsigned int **this, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = *a2;
  if (!*a2 || !*v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "dstWrapCopy");
    std::string::basic_string[abi:ne180100]<0>(&v17, "empty destination ABL");
    DSPGraph::ThrowException(1768843553, &v19, 729, &v18, &v17);
  }
  uint64_t v6 = a4;
  uint64_t v7 = v5[3];
  uint64_t v8 = (v7 - a4);
  if (v7 <= a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "dstWrapCopy");
    DSPGraph::strprintf((DSPGraph *)"copy destination position exceeds bounds %u >= %u", v14, v6, v7);
  }
  if (v7 < a5)
  {
    uint64_t v15 = a5;
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "dstWrapCopy");
    DSPGraph::strprintf((DSPGraph *)"copy size exceeds destination size %u > %u", v16, v15, v7);
  }
  int v9 = a3;
  BOOL v10 = (DSPGraph::SimpleABL *)a2;
  unsigned int v11 = (DSPGraph::SimpleABL *)this;
  if ((int)a5 + (int)a4 > v7)
  {
    uint64_t v12 = (a5 - v8);
    DSPGraph::SimpleABL::copy(this, a2, a3, a4, v8, 0);
    a3 = (v8 + v9);
    this = (unsigned int **)v11;
    a2 = (unsigned int **)v10;
    a4 = 0;
    a5 = v12;
  }
  return DSPGraph::SimpleABL::copy(this, a2, a3, a4, a5, 0);
}

void sub_18FEDD904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

unsigned int **DSPGraph::RingBuffer::read(DSPGraph::RingBuffer *this, unsigned int a2, int a3, unsigned int **a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 7) < a2)
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_868);
    }
    uint64_t v13 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      int v14 = *((_DWORD *)this + 4);
      int v15 = *((_DWORD *)this + 7);
      int v16 = *((_DWORD *)this + 8);
      int v17 = *((_DWORD *)this + 9);
      *(_DWORD *)buf = 67110144;
      unsigned int v19 = a2;
      __int16 v20 = 1024;
      int v21 = v15;
      __int16 v22 = 1024;
      int v23 = v14;
      __int16 v24 = 1024;
      int v25 = v16;
      __int16 v26 = 1024;
      int v27 = v17;
      _os_log_fault_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: RingBuffer::read underflow %u > %u (capacity = %u, readPos = %u, writePos = %u)", buf, 0x20u);
    }
    snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: RingBuffer::read underflow %u > %u (capacity = %u, readPos = %u, writePos = %u)", a2, *((_DWORD *)this + 7), *((_DWORD *)this + 4), *((_DWORD *)this + 8), *((_DWORD *)this + 9));
    __break(1u);
  }
  __n128 result = DSPGraph::SimpleABL::srcWrapCopy((unsigned int **)this, a4, (*((_DWORD *)this + 8) * *((_DWORD *)this + 6)), 0, *((_DWORD *)this + 6) * a2, 1);
  unsigned int v8 = *((_DWORD *)this + 8) + a3;
  *((_DWORD *)this + 8) = v8;
  unsigned int v9 = *((_DWORD *)this + 5);
  BOOL v10 = v8 >= v9;
  unsigned int v11 = v8 - v9;
  if (v10) {
    *((_DWORD *)this + 8) = v11;
  }
  int v12 = *((_DWORD *)this + 7) - a3;
  *((_DWORD *)this + 7) = v12;
  if (!v12) {
    *((void *)this + 4) = 0;
  }
  return result;
}

unsigned int **DSPGraph::SimpleABL::copy(unsigned int **this, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6 = *this;
  if (!*this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v22, "null internal ABL");
    DSPGraph::ThrowException(1768843553, &v24, 667, &v23, &v22);
  }
  uint64_t v7 = *a2;
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v22, "null destination ABL");
    DSPGraph::ThrowException(1768843553, &v24, 671, &v23, &v22);
  }
  unsigned int v8 = this;
  if (*v6 != *v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "copy");
    DSPGraph::strprintf((DSPGraph *)"mABL->mNumberBuffers (%u) != toABL->mNumberBuffers (%u)", v16, **v8, *v7);
  }
  if (*v6)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unsigned int v11 = a5 + a3;
    unsigned int v12 = a5 + a4;
    do
    {
      if (v11 > v6[v9 + 3])
      {
        std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v23, "copy");
        DSPGraph::strprintf((DSPGraph *)"fromBytePos (%u) + numBytesToCopy (%u) > mABL->mBuffers[%u].mDataByteSize (%u)", v14, a3, a5, v10, (*v8)[4 * v10 + 3]);
      }
      uint64_t v13 = &v7[v9];
      if (v12 > v7[v9 + 3])
      {
        std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v23, "copy");
        DSPGraph::strprintf((DSPGraph *)"toBytePos (%u) + numBytesToCopy (%u) > toABL->mBuffers[%u].mDataByteSize (%u)", v15, a4, a5, v10, v13[3]);
      }
      this = (unsigned int **)memmove((void *)(*((void *)v13 + 2) + a4), (const void *)(*(void *)&v6[v9 + 4] + a3), a5);
      ++v10;
      uint64_t v6 = *v8;
      v9 += 4;
    }
    while (v10 < **v8);
  }
  if (a6)
  {
    return DSPGraph::SimpleABL::setByteSize(a2, (int)a5 + (int)a4);
  }
  return this;
}

void sub_18FEDDE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 81) < 0) {
    operator delete(*(void **)(v29 - 104));
  }
  _Unwind_Resume(exception_object);
}

unsigned int **DSPGraph::SimpleABL::srcWrapCopy(unsigned int **this, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6 = *this;
  if (!*this || !*v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "srcWrapCopy");
    std::string::basic_string[abi:ne180100]<0>(&v19, "empty internal ABL");
    DSPGraph::ThrowException(1768843553, &v21, 702, &v20, &v19);
  }
  uint64_t v7 = a3;
  uint64_t v8 = v6[3];
  uint64_t v9 = (v8 - a3);
  if (v8 <= a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "srcWrapCopy");
    DSPGraph::strprintf((DSPGraph *)"copy source position exceeds bounds %u >= %u", v16, v7, v8);
  }
  if (v8 < a5)
  {
    uint64_t v17 = a5;
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "srcWrapCopy");
    DSPGraph::strprintf((DSPGraph *)"copy size exceeds source size %u > %u", v18, v17, v8);
  }
  int v11 = a4;
  unsigned int v12 = (DSPGraph::SimpleABL *)a2;
  uint64_t v13 = (DSPGraph::SimpleABL *)this;
  if ((int)a5 + (int)a3 > v8)
  {
    uint64_t v14 = (a5 - v9);
    DSPGraph::SimpleABL::copy(this, a2, a3, a4, v9, 0);
    a4 = (v9 + v11);
    this = (unsigned int **)v13;
    a2 = (unsigned int **)v12;
    a3 = 0;
    a5 = v14;
  }
  return DSPGraph::SimpleABL::copy(this, a2, a3, a4, a5, a6);
}

void sub_18FEDE060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::Graph::processMultiple(DSPGraph::Graph *this, unsigned int *a2, unsigned int *a3)
{
  if (!*((unsigned char *)this + 762))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "processMultiple");
    std::string::basic_string[abi:ne180100]<0>(&v11, "not initialized");
    DSPGraph::ThrowException(1768843553, &v13, 576, &v12, &v11);
  }
  if (*((unsigned char *)this + 764))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "processMultiple");
    std::string::basic_string[abi:ne180100]<0>(&v11, "Graph::processMultiple. Graph must be processed in-place");
    DSPGraph::ThrowException(1836084257, &v13, 580, &v12, &v11);
  }
  if (((*((void *)this + 36) - *((void *)this + 35)) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a2;
    do
    {
      *(void *)(DSPGraph::Graph::in(this, v6++) + 848) = v7;
      v7 += 20;
    }
    while (v6 < ((*((void *)this + 36) - *((void *)this + 35)) >> 3));
  }
  if (((*((void *)this + 39) - *((void *)this + 38)) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a3;
    do
    {
      *(void *)(DSPGraph::Graph::out(this, v8++) + 848) = v9;
      v9 += 20;
    }
    while (v8 < ((*((void *)this + 39) - *((void *)this + 38)) >> 3));
  }
  DSPGraph::Graph::checkCurSliceTicks((uint64_t)this, a2, a3);
  DSPGraph::Graph::processAll(this);
  return DSPGraph::Graph::propagateFlagsAndTimeStamp(this, (uint64_t)a3);
}

void sub_18FEDE26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::Graph::processAll(DSPGraph::Graph *this)
{
  v25[0] = (char *)this + 1024;
  if (*((void *)this + 131)) {
    uint64_t CurrentTimeInNanos = DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::GetCurrentTimeInNanos();
  }
  else {
    uint64_t CurrentTimeInNanos = 0;
  }
  v25[1] = CurrentTimeInNanos;
  __int16 v26 = this;
  atomic_store(1u, (unsigned __int8 *)this + 464);
  int v3 = (caulk::concurrent::details::lf_read_sync_write_impl *)*((void *)this + 85);
  int v27 = *((_DWORD *)this + 172);
  _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_5GraphEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v3, (uint64_t *)&v26);
  int v4 = (DSPGraph::Buffer **)*((void *)this + 24);
  unsigned int v5 = (DSPGraph::Buffer **)*((void *)this + 25);
  while (v4 != v5)
  {
    DSPGraph::Buffer::setByteSize(*v4, *((_DWORD *)*v4 + 25));
    ++v4;
  }
  if (*((unsigned char *)this + 766))
  {
    unint64_t v6 = (DSPGraph::IsoGroup **)*((void *)this + 32);
    uint64_t v7 = (DSPGraph::IsoGroup **)*((void *)this + 33);
    while (v6 != v7)
      DSPGraph::IsoGroup::processAll(*v6++);
  }
  else
  {
    unint64_t v8 = (DSPGraph::GraphInput **)*((void *)this + 35);
    uint64_t v9 = (DSPGraph::GraphInput **)*((void *)this + 36);
    while (v8 != v9)
      DSPGraph::GraphInput::copyInput(*v8++);
    unint64_t v10 = (DSPGraph::IsoGroup **)*((void *)this + 32);
    long long v11 = (DSPGraph::IsoGroup **)*((void *)this + 33);
    while (v10 != v11)
      DSPGraph::IsoGroup::processAll(*v10++);
    long long v12 = (DSPGraph::GraphOutput **)*((void *)this + 38);
    long long v13 = (DSPGraph::GraphOutput **)*((void *)this + 39);
    while (v12 != v13)
      DSPGraph::GraphOutput::copyOutput(*v12++);
  }
  int v14 = *((_DWORD *)this + 172);
  int v15 = (caulk::concurrent::details::lf_read_sync_write_impl *)(*((void *)this + 85) + 64);
  __int16 v26 = this;
  int v27 = v14;
  _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_5GraphEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v15, (uint64_t *)&v26);
  int v16 = (void *)*((void *)this + 124);
  uint64_t v17 = (void *)*((void *)this + 125);
  while (v16 != v17)
  {
    long long v18 = (unsigned int *)v16[1];
    long long v19 = (unsigned int *)v16[2];
    while (v18 != v19)
    {
      uint64_t v20 = *v18;
      (*(void (**)(DSPGraph::Graph *, uint64_t))(*(void *)this + 48))(this, v20);
      (*(void (**)(void, uint64_t))(*(void *)*v16 + 40))(*v16, v20);
      ++v18;
    }
    long long v21 = (unsigned int *)v16[4];
    long long v22 = (unsigned int *)v16[5];
    while (v21 != v22)
    {
      uint64_t v23 = *((void *)v21 + 1);
      LODWORD(v26) = v21[4] - v23;
      (*(void (**)(DSPGraph::Graph *, void, DSPGraph::Graph **, uint64_t))(*(void *)this + 72))(this, *v21, &v26, v23);
      (*(void (**)(void, void, void, uint64_t))(*(void *)*v16 + 56))(*v16, *v21, v26, v23);
      v21 += 8;
    }
    v16 += 7;
  }
  *((void *)this + 88) += *((void *)this + 90);
  atomic_store(0, (unsigned __int8 *)this + 464);
  return DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(v25);
}

void sub_18FEDE524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  atomic_store(0, (unsigned __int8 *)(v9 + 464));
  DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::~DoTimePoint(&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_5GraphEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(caulk::concurrent::details::lf_read_sync_write_impl *a1, uint64_t *a2)
{
  uint64_t result = caulk::concurrent::details::lf_read_sync_write_impl::begin_access(a1);
  if (*((unsigned char *)a1 + result + 8))
  {
    unsigned int v5 = (char *)a1 + 24 * result;
    uint64_t v6 = *((void *)v5 + 2);
    uint64_t v7 = *((void *)v5 + 3);
    if (v6 == v7) {
      goto LABEL_6;
    }
    do
    {
      int v8 = *((_DWORD *)a2 + 2);
      uint64_t v11 = *a2;
      int v10 = v8;
      uint64_t v9 = *(void *)(v6 + 32);
      if (!v9) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v9 + 48))(v9, &v11, &v10);
      v6 += 48;
    }
    while (v6 != v7);
    if (a1)
    {
LABEL_6:
      return caulk::concurrent::details::lf_read_sync_write_impl::end_access(a1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DSPGraph::IsoGroup::processAll(DSPGraph::IsoGroup *this)
{
  if (*((_DWORD *)this + 66))
  {
    unint64_t v2 = *(void *)(*((void *)this + 1) + 720) + *(void *)(*((void *)this + 1) + 704);
    unint64_t v3 = *((void *)this + 36);
    if (v2 <= v3)
    {
      if (*((_DWORD *)this + 67) != 1) {
        return;
      }
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = (v2 + ~v3 + *((void *)this + 37)) / *((void *)this + 37);
      if (*((_DWORD *)this + 67) != 1)
      {
        for (; v4; LODWORD(v4) = v4 - 1)
        {
          DSPGraph::IsoGroup::process(this, *((unsigned int *)this + 67));
          *((void *)this + 36) += *((void *)this + 37);
        }
        return;
      }
    }
    DSPGraph::IsoGroup::process(this, v4);
    *((void *)this + 36) += *((void *)this + 37) * v4;
    return;
  }
  DSPGraph::IsoGroup::process(this, 1);
}

double DSPGraph::IsoGroup::process(DSPGraph::IsoGroup *this, uint64_t a2)
{
  for (unint64_t i = (uint64_t **)*((void *)this + 14); i; unint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[2] + 704))(i[2], a2);
  unsigned int v5 = (uint64_t *)*((void *)this + 28);
  uint64_t v6 = (uint64_t *)*((void *)this + 29);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 464))(v7, a2);
  }
  double result = *((double *)this + 32) + (double)a2;
  *((double *)this + 32) = result;
  return result;
}

__n128 DSPGraph::Graph::preflight(__n128 *this, _DWORD *a2, _DWORD *a3, unsigned int a4, unsigned int a5, char a6)
{
  if (!this[47].n128_u8[10])
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "preflight");
    std::string::basic_string[abi:ne180100]<0>(&v17, "not initialized");
    DSPGraph::ThrowException(1768843553, &v19, 422, &v18, &v17);
  }
  uint64_t v7 = a3;
  int v8 = a2;
  if (a2 == a3 && !this[47].n128_u8[11])
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "preflight");
    std::string::basic_string[abi:ne180100]<0>(&v17, "input and output data are identical, but graph cannot process in-place");
    DSPGraph::ThrowException(1768975393, &v19, 427, &v18, &v17);
  }
  __n128 result = this[45];
  if (!this[47].n128_u8[8])
  {
    if (a4 && this[43].n128_u32[0] != a4 || a5 && this[43].n128_u32[1] != a5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v18, "preflight");
      std::string::basic_string[abi:ne180100]<0>(&v17, "the slice duration cannot vary, yet a different duration was supplied to preflight.");
      DSPGraph::ThrowException(1718775073, &v19, 445, &v18, &v17);
    }
    goto LABEL_14;
  }
  if (!a4 || !a5)
  {
LABEL_14:
    unint64_t v11 = this[44].n128_u64[1];
    this[45].n128_u64[1] = v11;
    goto LABEL_15;
  }
  unint64_t v11 = this[43].n128_u64[1] * a4 / a5;
  this[45].n128_u64[1] = v11;
  if ((a6 & 1) == 0 && v11 > this[44].n128_u64[1])
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "preflight");
    std::string::basic_string[abi:ne180100]<0>(&v17, "preflight slice duration is greater than the graph's maximum slice duration.");
    DSPGraph::ThrowException(1718775073, &v19, 437, &v18, &v17);
  }
LABEL_15:
  __n128 v16 = result;
  this[45].n128_u64[0] = v11;
  if (((this[18].n128_u64[0] - this[17].n128_u64[1]) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v12 = 0;
    do
    {
      long long v13 = (DSPGraph::GraphInput *)DSPGraph::Graph::in((DSPGraph::Graph *)this, v12);
      _DWORD *v8 = DSPGraph::GraphInput::preflight(v13);
      v8 += 20;
      ++v12;
    }
    while (v12 < ((this[18].n128_u64[0] - this[17].n128_u64[1]) >> 3));
  }
  if (((this[19].n128_u64[1] - this[19].n128_u64[0]) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v14 = 0;
    do
    {
      int v15 = (DSPGraph::GraphOutput *)DSPGraph::Graph::out((DSPGraph::Graph *)this, v14);
      *uint64_t v7 = DSPGraph::GraphOutput::preflight(v15);
      v7 += 20;
      ++v14;
    }
    while (v14 < ((this[19].n128_u64[1] - this[19].n128_u64[0]) >> 3));
  }
  if (a6)
  {
    __n128 result = v16;
    this[45] = v16;
  }
  return result;
}

void sub_18FEDEA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::checkCurSliceTicks(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 760))
  {
    uint64_t v6 = *(void *)(this + 728);
    if (!v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v56, "checkCurSliceTicks");
      std::string::basic_string[abi:ne180100]<0>(&v55, "preflighting is required if slice duration can vary.");
      DSPGraph::ThrowException(1718775073, &v57, 471, &v56, &v55);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(this + 712);
  }
  *(void *)(this + 720) = v6;
  *(void *)(this + 728) = 0;
  if (((*(void *)(this + 288) - *(void *)(this + 280)) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v7 = 0;
    int v8 = a2;
    do
    {
      int v9 = *v8;
      int v10 = (DSPGraph::GraphInput *)DSPGraph::Graph::in((DSPGraph::Graph *)v5, v7);
      this = DSPGraph::GraphInput::preflight(v10);
      if (v9 != this)
      {
        std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v56, "checkCurSliceTicks");
        uint64_t v43 = *v8;
        long long v44 = (DSPGraph::GraphInput *)DSPGraph::Graph::in((DSPGraph::Graph *)v5, v7);
        uint64_t v45 = DSPGraph::GraphInput::preflight(v44);
        DSPGraph::strprintf((DSPGraph *)"input %u packet count %u is inconsistent with preflight %u", v46, v7, v43, v45);
      }
      ++v7;
      v8 += 20;
    }
    while (v7 < ((*(void *)(v5 + 288) - *(void *)(v5 + 280)) >> 3));
  }
  uint64_t v12 = *(void *)(v5 + 304);
  uint64_t v11 = *(void *)(v5 + 312);
  if (((v11 - v12) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v13 = 0;
    unint64_t v14 = a3;
    do
    {
      int v15 = *v14;
      __n128 v16 = (DSPGraph::GraphOutput *)DSPGraph::Graph::out((DSPGraph::Graph *)v5, v13);
      this = DSPGraph::GraphOutput::preflight(v16);
      if (v15 != this)
      {
        std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v56, "checkCurSliceTicks");
        uint64_t v47 = *v14;
        uint64_t v48 = (DSPGraph::GraphOutput *)DSPGraph::Graph::out((DSPGraph::Graph *)v5, v13);
        uint64_t v49 = DSPGraph::GraphOutput::preflight(v48);
        DSPGraph::strprintf((DSPGraph *)"output %u frame count %u is inconsistent with preflight %u", v50, v13, v47, v49);
      }
      ++v13;
      uint64_t v12 = *(void *)(v5 + 304);
      uint64_t v11 = *(void *)(v5 + 312);
      v14 += 20;
    }
    while (v13 < ((unint64_t)(v11 - v12) >> 3));
  }
  if (*(unsigned char *)(v5 + 766))
  {
    if (a2 == a3)
    {
      if (!*(unsigned char *)(v5 + 763))
      {
        std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v56, "checkCurSliceTicks");
        std::string::basic_string[abi:ne180100]<0>(&v55, "graph cannot process in-place.");
        DSPGraph::ThrowException(1768975393, &v57, 497, &v56, &v55);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(v5 + 280);
      uint64_t v17 = *(void *)(v5 + 288);
      if (((v17 - v18) & 0x7FFFFFFF8) != 0)
      {
        long long v53 = a3;
        unint64_t v19 = 0;
        uint64_t v20 = 0;
        char v21 = 1;
        do
        {
          long long v22 = &a2[20 * v19];
          if (v21)
          {
            uint64_t v20 = *v22;
          }
          else if (*v22 != v20)
          {
            std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v56, "checkCurSliceTicks");
            DSPGraph::strprintf((DSPGraph *)"number of frames are different in different ports though the sample rates are the same. %u %u", v52, *v22, v20);
          }
          uint64_t v23 = *(_DWORD **)&a2[20 * v19 + 18];
          if (*v23)
          {
            unint64_t v24 = 0;
            int v25 = v23 + 3;
            do
            {
              uint64_t v26 = DSPGraph::Graph::in((DSPGraph::Graph *)v5, v19);
              unsigned int v27 = *v22;
              unsigned int v28 = v27 / (*(unsigned int (**)(uint64_t))(*(void *)v26 + 672))(v26);
              this = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 656))(v26);
              uint64_t v29 = this * v28;
              if (*v25 < v29)
              {
                std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v56, "checkCurSliceTicks");
                DSPGraph::strprintf((DSPGraph *)"AudioBufferList mDataByteSize is too small for the number of packets for input %u.  mDataByteSize %u   expectedByteSize %u", v42, v19, *v25, v29);
              }
              ++v24;
              v25 += 4;
            }
            while (v24 < *v23);
            uint64_t v18 = *(void *)(v5 + 280);
            uint64_t v17 = *(void *)(v5 + 288);
          }
          char v21 = 0;
          ++v19;
        }
        while (v19 < ((unint64_t)(v17 - v18) >> 3));
        uint64_t v54 = v20;
        uint64_t v12 = *(void *)(v5 + 304);
        uint64_t v11 = *(void *)(v5 + 312);
        int v30 = 1;
        a3 = v53;
        goto LABEL_29;
      }
    }
    uint64_t v54 = 0;
    int v30 = 0;
LABEL_29:
    if (((v11 - v12) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v31 = 0;
      do
      {
        uint64_t v32 = &a3[20 * v31];
        if (v30)
        {
          if (*v32 != v54)
          {
            std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v56, "checkCurSliceTicks");
            DSPGraph::strprintf((DSPGraph *)"number of frames are different in different ports though the sample rates are the same. %u %u", v51, *v32, v54);
          }
        }
        else
        {
          uint64_t v54 = *v32;
        }
        uint64_t v33 = *(_DWORD **)&a3[20 * v31 + 18];
        if (*v33)
        {
          uint64_t v34 = a3;
          unint64_t v35 = 0;
          uint64_t v36 = v33 + 3;
          do
          {
            uint64_t v37 = DSPGraph::Graph::out((DSPGraph::Graph *)v5, v31);
            unsigned int v38 = *v32;
            unsigned int v39 = v38 / (*(unsigned int (**)(uint64_t))(*(void *)v37 + 672))(v37);
            this = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 656))(v37);
            uint64_t v40 = this * v39;
            if (*v36 < v40)
            {
              std::string::basic_string[abi:ne180100]<0>(&v57, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v56, "checkCurSliceTicks");
              DSPGraph::strprintf((DSPGraph *)"AudioBufferList mDataByteSize is too small for the number of frames for output %u.  mDataByteSize %u   expectedByteSize %u", v41, v31, *v36, v40);
            }
            ++v35;
            v36 += 4;
          }
          while (v35 < *v33);
          uint64_t v12 = *(void *)(v5 + 304);
          uint64_t v11 = *(void *)(v5 + 312);
          a3 = v34;
        }
        ++v31;
        int v30 = 1;
      }
      while (v31 < ((unint64_t)(v11 - v12) >> 3));
    }
  }
  return this;
}

void sub_18FEDF13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::in(DSPGraph::Graph *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 35);
  if (a2 >= (unint64_t)((*((void *)this + 36) - v2) >> 3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "in");
    std::string::basic_string[abi:ne180100]<0>(&v4, "Graph::in inIndex out of range");
    DSPGraph::ThrowException(1919837985, &v6, 1355, &v5, &v4);
  }
  return *(void *)(v2 + 8 * a2);
}

void sub_18FEDF268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::out(DSPGraph::Graph *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 38);
  if (a2 >= (unint64_t)((*((void *)this + 39) - v2) >> 3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "out");
    std::string::basic_string[abi:ne180100]<0>(&v4, "Graph::out inIndex out of range");
    DSPGraph::ThrowException(1919837985, &v6, 1364, &v5, &v4);
  }
  return *(void *)(v2 + 8 * a2);
}

void sub_18FEDF340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphInput::preflight(DSPGraph::GraphInput *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 704);
  uint64_t v3 = *(void *)(*((void *)this + 2) + 304);
  unint64_t v4 = v3 * (*(unsigned int (**)(DSPGraph::GraphInput *))(*(void *)this + 672))(this);
  LODWORD(v2) = (v2 + v4 - 1) / v4 * (*(uint64_t (**)(DSPGraph::GraphInput *))(*(void *)this + 672))(this);
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *(void *)(v5 + 704);
  uint64_t v7 = *(void *)(v5 + 720);
  uint64_t v8 = *(void *)(*((void *)this + 2) + 304);
  unint64_t v9 = v8 * (*(unsigned int (**)(DSPGraph::GraphInput *))(*(void *)this + 672))(this);
  return ((v6 + v7 + v9 - 1) / v9)
       * (*(unsigned int (**)(DSPGraph::GraphInput *))(*(void *)this + 672))(this)
       - v2;
}

uint64_t DSPGraph::GraphInput::ringBufferFramesPerPacket(DSPGraph::GraphInput *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 20);
}

void sub_18FEDF5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphInput::bytesPerPacket(DSPGraph::GraphInput *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 16);
}

void sub_18FEDF6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphOutput::bytesPerPacket(DSPGraph::GraphOutput *this)
{
  uint64_t v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 16);
}

void sub_18FEDF804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphOutput::preflight(DSPGraph::GraphOutput *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 704);
  uint64_t v3 = *(void *)(*((void *)this + 2) + 304);
  unint64_t v4 = v3 * (*(unsigned int (**)(DSPGraph::GraphOutput *))(*(void *)this + 672))(this);
  LODWORD(v2) = (v2 + v4 - 1)
              / v4
              * (*(uint64_t (**)(DSPGraph::GraphOutput *))(*(void *)this + 672))(this);
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *(void *)(v5 + 704);
  uint64_t v7 = *(void *)(v5 + 720);
  uint64_t v8 = *(void *)(*((void *)this + 2) + 304);
  unint64_t v9 = v8 * (*(unsigned int (**)(DSPGraph::GraphOutput *))(*(void *)this + 672))(this);
  return ((v6 + v7 + v9 - 1) / v9)
       * (*(unsigned int (**)(DSPGraph::GraphOutput *))(*(void *)this + 672))(this)
       - v2;
}

uint64_t DSPGraph::GraphOutput::ringBufferFramesPerPacket(DSPGraph::GraphOutput *this)
{
  uint64_t v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 20);
}

void sub_18FEDFA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ABIVersion(DSPGraph *this)
{
  return 4;
}

OSStatus AudioConverterFillComplexBuffer(AudioConverterRef inAudioConverter, AudioConverterComplexInputDataProc inInputDataProc, void *inInputDataProcUserData, UInt32 *ioOutputDataPacketSize, AudioBufferList *outOutputData, AudioStreamPacketDescription *outPacketDescription)
{
  uint64_t v12 = inInputDataProcUserData;
  AudioConverterComplexInputDataProc v13 = inInputDataProc;
  int v10 = outOutputData;
  uint64_t v11 = ioOutputDataPacketSize;
  unint64_t v9 = outPacketDescription;
  v7[0] = &v13;
  v7[1] = &v12;
  v7[2] = &v11;
  void v7[3] = &v10;
  v7[4] = &v9;
  v8[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterFillComplexBuffer::$_0>;
  v8[1] = (uint64_t (*)(uint64_t, uint64_t))v7;
  return with_resolved((int)inAudioConverter, v8);
}

OSStatus AudioFormatGetPropertyInfo(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *outPropertyDataSize)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (!outPropertyDataSize) {
    return -50;
  }
  uint64_t v6 = (unsigned __int8 *)inSpecifier;
  uint64_t v7 = *(void *)&inSpecifierSize;
  OSStatus DecoderSpecificBitStreamFromESDS = 1886547824;
  if ((int)inPropertyID > 1702060907)
  {
    if ((int)inPropertyID <= 1819242092)
    {
      if ((int)inPropertyID > 1719034481)
      {
        if ((int)inPropertyID <= 1768187245)
        {
          if ((int)inPropertyID > 1768174435)
          {
            if (inPropertyID == 1768174436) {
              goto LABEL_197;
            }
            if (inPropertyID == 1768174451) {
              goto LABEL_193;
            }
            if (inPropertyID != 1768186734) {
              return DecoderSpecificBitStreamFromESDS;
            }
            if (!inSpecifier) {
              return -50;
            }
            OSStatus DecoderSpecificBitStreamFromESDS = 561213539;
            if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize) {
              return DecoderSpecificBitStreamFromESDS;
            }
            return AudioFormatProperty_DecodeFormatIDsForCodingName((int *)inSpecifier, outPropertyDataSize, 0);
          }
          if (inPropertyID == 1719034482) {
            goto LABEL_193;
          }
          if (inPropertyID == 1752589411)
          {
LABEL_163:
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
            *outPropertyDataSize = 0;
            return DecoderSpecificBitStreamFromESDS;
          }
          int v11 = 1752589667;
LABEL_162:
          if (inPropertyID != v11) {
            return DecoderSpecificBitStreamFromESDS;
          }
          goto LABEL_163;
        }
        if ((int)inPropertyID <= 1769172322)
        {
          if (inPropertyID == 1768187246)
          {
            if (!inSpecifier) {
              return -50;
            }
            OSStatus DecoderSpecificBitStreamFromESDS = 561213539;
            if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize) {
              return DecoderSpecificBitStreamFromESDS;
            }
            return AudioFormatProperty_DecodeFormatIDsForEncapsulatedMagicCookieName((int *)inSpecifier, outPropertyDataSize, 0);
          }
          if (inPropertyID != 1768780388)
          {
            int v29 = 1769170537;
            goto LABEL_192;
          }
          if (!inSpecifier) {
            return -50;
          }
          if (inSpecifierSize < 0x38) {
            return 561213539;
          }
          AudioCodecPropertyID v12 = 1768780388;
          return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
        }
        if (inPropertyID == 1769172323)
        {
          return GetMagicCookieSizeFromISOSampleEntry((uint64_t)inSpecifier, inSpecifierSize, (int *)outPropertyDataSize);
        }
        if (inPropertyID == 1818389604) {
          goto LABEL_197;
        }
        int v33 = 1818520674;
LABEL_196:
        if (inPropertyID != v33) {
          return DecoderSpecificBitStreamFromESDS;
        }
        goto LABEL_197;
      }
      if ((int)inPropertyID <= 1717925989)
      {
        if ((int)inPropertyID <= 1702061672)
        {
          if (inPropertyID == 1702060908)
          {
            if (!inSpecifier) {
              return -50;
            }
            OSStatus v41 = AudioFormatProperty_ChannelLayoutFromESDS((unsigned __int8 *)inSpecifier, inSpecifierSize, v79);
            goto LABEL_281;
          }
          if (inPropertyID != 1702061157) {
            return DecoderSpecificBitStreamFromESDS;
          }
          return AudioFormatProperty_ESDSFromESDSize((unsigned __int8 *)inSpecifier, inSpecifierSize, outPropertyDataSize);
        }
        if (inPropertyID == 1702061673)
        {
          OSStatus DecoderSpecificBitStreamFromESDS = 0;
          UInt32 v34 = 56;
          goto LABEL_198;
        }
        if (inPropertyID == 1702064996) {
          goto LABEL_139;
        }
        int v29 = 1717855600;
LABEL_192:
        if (inPropertyID != v29) {
          return DecoderSpecificBitStreamFromESDS;
        }
        goto LABEL_193;
      }
      if ((int)inPropertyID <= 1718449256)
      {
        if (inPropertyID == 1717925990) {
          goto LABEL_193;
        }
        if (inPropertyID == 1718183273)
        {
          if (inSpecifierSize != 4) {
            return 561213539;
          }
          if (!inSpecifier) {
            return -50;
          }
          goto LABEL_197;
        }
        if (inPropertyID != 1718383476) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (!inSpecifier) {
          return 2003329396;
        }
        if (!inSpecifierSize) {
          return 561213539;
        }
        return AudioFormatProperty_FormatListSize((const AudioFormatInfo *)inSpecifier, inSpecifierSize, outPropertyDataSize);
      }
      if (inPropertyID != 1718449257)
      {
        if (inPropertyID == 1718509933) {
          goto LABEL_197;
        }
        int v29 = 1718642284;
        goto LABEL_192;
      }
      goto LABEL_139;
    }
    if ((int)inPropertyID <= 1935893601)
    {
      if ((int)inPropertyID <= 1852008556)
      {
        if ((int)inPropertyID > 1835230309)
        {
          if (inPropertyID == 1835230310)
          {
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
            UInt32 v34 = 50;
            goto LABEL_198;
          }
          if (inPropertyID != 1835230563)
          {
            if (inPropertyID == 1835884912)
            {
              if (inSpecifierSize == 16)
              {
                if (inSpecifier) {
                  SanitizeClientAudioChannelLayout(v79);
                }
                return -50;
              }
              return 561213539;
            }
            return DecoderSpecificBitStreamFromESDS;
          }
          if (!inSpecifier) {
            return -50;
          }
          if (inSpecifierSize < 0x18) {
            return 561213539;
          }
          return AudioFormatProperty_CanonicalMagicCookieFromEncapsulatedMagicCookie((unsigned int *)inSpecifier, outPropertyDataSize, 0);
        }
        if (inPropertyID == 1819242093) {
          goto LABEL_197;
        }
        int v33 = 1819504237;
        goto LABEL_196;
      }
      if ((int)inPropertyID <= 1885433452)
      {
        if (inPropertyID == 1852008557 || inPropertyID == 1852992877) {
          goto LABEL_193;
        }
        if (inPropertyID != 1868983411) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (!inSpecifier) {
          return 2003329396;
        }
        if (!inSpecifierSize) {
          return 561213539;
        }
        *outPropertyDataSize = 0;
        return FetchFormatListFromCodecs((uint64_t (*)(void))GetOutputFormatListFromCodec, (const AudioFormatInfo *)inSpecifier, inSpecifierSize, outPropertyDataSize, 0);
      }
      if (inPropertyID == 1885433453)
      {
        if (inSpecifierSize == 32)
        {
          if (inSpecifier)
          {
            v81[0] = 0;
            SanitizeClientAudioChannelLayout(v79);
          }
          return -50;
        }
        return 561213539;
      }
      if (inPropertyID != 1885565796)
      {
        if (inPropertyID != 1886677364) {
          return DecoderSpecificBitStreamFromESDS;
        }
LABEL_138:
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        UInt32 v34 = 16;
        goto LABEL_198;
      }
LABEL_139:
      OSStatus DecoderSpecificBitStreamFromESDS = 0;
      UInt32 v34 = 40;
      goto LABEL_198;
    }
    if ((int)inPropertyID <= 1986946670)
    {
      if ((int)inPropertyID <= 1936745323)
      {
        if (inPropertyID == 1935893602) {
          goto LABEL_193;
        }
        if (inPropertyID == 1935962211)
        {
          OSStatus DecoderSpecificBitStreamFromESDS = 0;
          UInt32 v34 = 14;
          goto LABEL_198;
        }
        if (inPropertyID != 1936286825) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inSpecifierSize < 0x38) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        AudioCodecPropertyID v12 = 1936286825;
        return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
      }
      if (inPropertyID == 1936745324)
      {
        if (inSpecifierSize < 0x20) {
          return 561213539;
        }
        goto LABEL_298;
      }
      if (inPropertyID == 1952540515)
      {
        if (inSpecifierSize != 4) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        int64x2_t v48 = (int64x2_t)xmmword_1901C5F60;
        int32x4_t v49 = (int32x4_t)vld1q_dup_f32((const float *)inSpecifier);
        int64x2_t v50 = (int64x2_t)xmmword_1901C5F70;
        int32x4_t v51 = 0uLL;
        uint64_t v52 = 2u;
        int64x2_t v53 = vdupq_n_s64(0x31uLL);
        v54.i64[0] = 0xFFFF0000FFFFLL;
        v54.i64[1] = 0xFFFF0000FFFFLL;
        int64x2_t v55 = vdupq_n_s64(4uLL);
        do
        {
          int32x4_t v51 = vsubq_s32(v51, (int32x4_t)vbicq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8(*(int8x16_t *)&gAllLayoutTags[v52], v54), v49), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v50, v53), (int32x4_t)vceqq_s64(v48, v53))));
          int64x2_t v48 = vaddq_s64(v48, v55);
          int64x2_t v50 = vaddq_s64(v50, v55);
          v52 += 4;
        }
        while (v52 != 122);
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        UInt32 v34 = 4 * vaddvq_s32(v51);
        goto LABEL_198;
      }
      int v11 = 1986093932;
      goto LABEL_162;
    }
    if ((int)inPropertyID <= 2020107115)
    {
      if (inPropertyID == 1986946671)
      {
        if (!inSpecifier) {
          return -50;
        }
        if (inSpecifierSize < 0x38) {
          return 561213539;
        }
        if (*((_DWORD *)inSpecifier + 2) != 1987015266) {
          return 1718449215;
        }
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        UInt32 v34 = 24;
        goto LABEL_198;
      }
      if (inPropertyID != 1987076466)
      {
        int v30 = 2020106611;
LABEL_98:
        if (inPropertyID != v30) {
          return DecoderSpecificBitStreamFromESDS;
        }
        goto LABEL_139;
      }
      if (!inSpecifier) {
        return -50;
      }
      if (inSpecifierSize < 0x38) {
        return 561213539;
      }
      AudioCodecPropertyID v12 = 1987076466;
      return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
    }
    if (inPropertyID == 2020107116)
    {
      OSStatus DecoderSpecificBitStreamFromESDS = 0;
      UInt32 v34 = 32;
      goto LABEL_198;
    }
    if (inPropertyID != 2020109667)
    {
      int v29 = 2020110438;
      goto LABEL_192;
    }
    if (inSpecifierSize < 8) {
      return 561213539;
    }
    if (!inSpecifier) {
      return -50;
    }
    int v57 = bswap32(*(_DWORD *)inSpecifier);
    if (v57 > 1902207330)
    {
      if (v57 > 2053202274)
      {
        if (v57 > 2053202791)
        {
          if (v57 == 2053202792) {
            goto LABEL_358;
          }
          if (v57 == 2053464883) {
            goto LABEL_345;
          }
          int v59 = 2053202800;
          goto LABEL_348;
        }
        if (v57 == 2053202275) {
          goto LABEL_358;
        }
        int v61 = 2053202739;
      }
      else
      {
        if (v57 > 1902207847)
        {
          if (v57 == 1902207848 || v57 == 1902207856) {
            goto LABEL_358;
          }
          int v58 = 1902469939;
          goto LABEL_329;
        }
        if (v57 == 1902207331) {
          goto LABEL_358;
        }
        int v61 = 1902207795;
      }
    }
    else
    {
      if (v57 <= 1885430114)
      {
        if (v57 > 1633772399)
        {
          if (v57 != 1633772400)
          {
            if (v57 != 1633889587)
            {
              int v58 = 1700998451;
              goto LABEL_329;
            }
LABEL_357:
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
            UInt32 v34 = 11;
            goto LABEL_198;
          }
LABEL_358:
          DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v81);
          memset(&v78, 0, sizeof(v78));
          uint64_t v62 = v6[7] + 2;
          MEMORY[0x1F4188790](v63);
          uint64_t v65 = (char *)&v76[-1] - v64;
          bzero(v81, 0x4C8uLL);
          *uint64_t v65 = 5;
          size_t v66 = v6[7];
          v65[1] = v66;
          memcpy(v65 + 2, v6 + 8, v66);
          uint64_t v67 = &v65[v62];
          v76[0] = v65;
          v76[1] = &v65[v62];
          uint64_t v77 = 0;
          if ((v65 & 3) != 0)
          {
            int v68 = 0;
            char v69 = (_BYTE)v65 + 1;
            int v70 = -8;
            do
            {
              int v71 = v70;
              int v72 = *v65++;
              int v68 = v72 | (v68 << 8);
              v70 += 8;
              if ((v69 & 3) == 0) {
                break;
              }
              ++v69;
            }
            while (v65 < v67);
            v76[0] = v65;
            LODWORD(v77) = v68 << (24 - v70);
            HIDWORD(v77) = v71 + 16;
          }
          DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload(v81, (uint64_t)v76, 0);
          if (DecoderConfigDescr::GetASBD((DecoderConfigDescr *)v81, &v78)) {
            OSStatus DecoderSpecificBitStreamFromESDS = 1718449215;
          }
          else {
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
          }
          v81[2] = 64;
          uint64_t v82 = 5;
          int v84 = 0;
          uint64_t v83 = 6144 * v78.mChannelsPerFrame;
          DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v80);
          MP4AudioESDS::SetDecoderConfigDescriptor((uint64_t)v79, (long long *)v81);
          if (v80[2] == 64) {
            UInt32 v73 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount((DecoderConfigDescr *)v80) + 37;
          }
          else {
            UInt32 v73 = 19;
          }
          *outPropertyDataSize = v73;
          MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)v79);
          DecoderConfigDescr::~DecoderConfigDescr((DecoderConfigDescr *)v81);
          return DecoderSpecificBitStreamFromESDS;
        }
        if (v57 == 1633772320) {
          goto LABEL_358;
        }
        int v59 = 1633772392;
LABEL_348:
        if (v57 != v59) {
          goto LABEL_163;
        }
        goto LABEL_358;
      }
      if (v57 > 1885430631)
      {
        if (v57 == 1885430632 || v57 == 1885430640) {
          goto LABEL_358;
        }
        int v58 = 1885692723;
LABEL_329:
        if (v57 != v58) {
          goto LABEL_163;
        }
LABEL_345:
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        UInt32 v34 = *((unsigned __int8 *)inSpecifier + 7) + 8;
        goto LABEL_198;
      }
      if (v57 == 1885430115) {
        goto LABEL_358;
      }
      int v61 = 1885430579;
    }
    if (v57 != v61) {
      goto LABEL_163;
    }
    goto LABEL_357;
  }
  if ((int)inPropertyID <= 1668048488)
  {
    if ((int)inPropertyID > 1635148900)
    {
      if ((int)inPropertyID <= 1667786096)
      {
        if ((int)inPropertyID <= 1650551909)
        {
          if (inPropertyID == 1635148901)
          {
            if (inSpecifierSize == 4)
            {
              if (inSpecifier)
              {
                uint64_t v44 = *(unsigned int *)inSpecifier;
                RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
                uint64_t v45 = qword_1EB3D4FB0;
                os_unfair_recursive_lock_lock_with_options();
                OSStatus v14 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(void *)v45 + 32))(v45, v44, outPropertyDataSize);
                goto LABEL_268;
              }
              return -50;
            }
            return 561213539;
          }
          if (inPropertyID == 1635149166)
          {
            if (inSpecifierSize == 4)
            {
              if (inSpecifier)
              {
                uint64_t v46 = *(unsigned int *)inSpecifier;
                RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
                uint64_t v47 = qword_1EB3D4FB0;
                os_unfair_recursive_lock_lock_with_options();
                OSStatus v14 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(void *)v47 + 24))(v47, v46, outPropertyDataSize);
                goto LABEL_268;
              }
              return -50;
            }
            return 561213539;
          }
          int v10 = 1635151459;
LABEL_104:
          if (inPropertyID == v10)
          {
            if (inSpecifierSize == 40)
            {
              if (inSpecifier)
              {
                RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
                uint64_t v31 = qword_1EB3D4FB0;
                os_unfair_recursive_lock_lock_with_options();
                OSStatus v14 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, UInt32 *, BOOL))(*(void *)v31 + 80))(v31, v6, outPropertyDataSize, inPropertyID == 1635151459);
                goto LABEL_268;
              }
              return -50;
            }
            return 561213539;
          }
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inPropertyID == 1650551910)
        {
          if (inSpecifierSize == 24)
          {
            if (inSpecifier)
            {
              v81[0] = 0;
              SanitizeClientAudioChannelLayout(v79);
            }
            return -50;
          }
          return 561213539;
        }
        if (inPropertyID != 1651340391)
        {
          if (inPropertyID != 1667523440) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (!inSpecifier) {
            return -50;
          }
          if (inSpecifierSize < 0x10) {
            return 561213539;
          }
        }
        goto LABEL_193;
      }
      if ((int)inPropertyID <= 1667788143)
      {
        if (inPropertyID != 1667786097 && inPropertyID != 1667786849)
        {
          if (inPropertyID != 1667787891) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (inSpecifierSize < 0x51) {
            return 561213539;
          }
          if (!inSpecifier) {
            return -50;
          }
          uint64_t v18 = *((void *)inSpecifier + 10);
          uint64_t v19 = *((unsigned int *)inSpecifier + 19);
          unint64_t v20 = v18 + v19;
          *(void *)&v79[0].mChannelLayoutTag = v18;
          *(void *)&v79[0].mNumberChannelDescriptions = v18 + v19;
          *(void *)&v79[0].mChannelDescriptions[0].mChannelFlags = 0;
          if ((v18 & 3) != 0 && v19)
          {
            AudioChannelFlags v21 = 0;
            unint64_t v22 = v18 + 1;
            int v23 = -8;
            unint64_t v24 = v22;
            do
            {
              LODWORD(v79[0].mChannelDescriptions[0].mCoordinates[0]) = v23 + 16;
              *(void *)&v79[0].mChannelLayoutTag = v24;
              AudioChannelFlags v21 = *(unsigned __int8 *)(v24 - 1) | (v21 << 8);
              v79[0].mChannelDescriptions[0].mChannelFlags = v21;
              v23 += 8;
              if ((v22 & 3) == 0) {
                break;
              }
              LOBYTE(v22) = v22 + 1;
            }
            while (v24++ < v20);
            v79[0].mChannelDescriptions[0].mChannelFlags = v21 << (24 - v23);
          }
          v81[0] = v19;
          LODWORD(v78.mSampleRate) = 0;
          int v26 = *((_DWORD *)inSpecifier + 2);
          UInt32 v27 = 18;
          if (v26 > 1902207330)
          {
            if (v26 > 2053202274)
            {
              if (v26 > 2053202791)
              {
                if (v26 == 2053202792) {
                  goto LABEL_382;
                }
                UInt32 v27 = v19;
                if (v26 == 2053464883) {
                  goto LABEL_384;
                }
                int v60 = 2053202800;
                goto LABEL_372;
              }
              if (v26 == 2053202275) {
                goto LABEL_382;
              }
              int v74 = 2053202739;
            }
            else
            {
              if (v26 > 1902207847)
              {
                if (v26 == 1902207848 || v26 == 1902207856) {
                  goto LABEL_382;
                }
                int v28 = 1902469939;
                goto LABEL_339;
              }
              if (v26 == 1902207331) {
                goto LABEL_382;
              }
              int v74 = 1902207795;
            }
          }
          else
          {
            if (v26 <= 1885430114)
            {
              if (v26 > 1633772399)
              {
                if (v26 != 1633772400)
                {
                  if (v26 == 1633889587) {
                    goto LABEL_384;
                  }
                  int v28 = 1700998451;
                  goto LABEL_339;
                }
LABEL_382:
                OSStatus DecoderSpecificBitStreamFromESDS = ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS((uint64_t)v79, v81, (int *)&v78);
                if (DecoderSpecificBitStreamFromESDS) {
                  return DecoderSpecificBitStreamFromESDS;
                }
                UInt32 v27 = v81[0] + 8;
                goto LABEL_384;
              }
              if (v26 == 1633772320) {
                goto LABEL_382;
              }
              int v60 = 1633772392;
LABEL_372:
              if (v26 != v60) {
                goto LABEL_381;
              }
              goto LABEL_382;
            }
            if (v26 > 1885430631)
            {
              if (v26 == 1885430632 || v26 == 1885430640) {
                goto LABEL_382;
              }
              int v28 = 1885692723;
LABEL_339:
              UInt32 v27 = v19;
              if (v26 != v28) {
                goto LABEL_381;
              }
              goto LABEL_384;
            }
            if (v26 == 1885430115) {
              goto LABEL_382;
            }
            int v74 = 1885430579;
          }
          if (v26 != v74) {
LABEL_381:
          }
            UInt32 v27 = 0;
LABEL_384:
          OSStatus DecoderSpecificBitStreamFromESDS = 0;
          *outPropertyDataSize = v27;
          return DecoderSpecificBitStreamFromESDS;
        }
LABEL_193:
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        UInt32 v34 = 4;
        goto LABEL_198;
      }
      if (inPropertyID == 1667788144)
      {
        if (inSpecifierSize == 16)
        {
          if (inSpecifier)
          {
            v81[0] = 0;
            SanitizeClientAudioChannelLayout(v79);
          }
          return -50;
        }
        return 561213539;
      }
      if (inPropertyID != 1668047725)
      {
        if (inPropertyID != 1668047726) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (!inSpecifier) {
          return -50;
        }
        UInt32 v35 = AudioFormatProperty_ISOChannelLayoutSizeForChannelLayout((const AudioChannelLayout *)inSpecifier, inSpecifierSize, (unsigned __int8 *)v79);
LABEL_313:
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        *outPropertyDataSize = v35;
        return DecoderSpecificBitStreamFromESDS;
      }
      if (inSpecifier)
      {
        if (inSpecifierSize == 4)
        {
          unsigned int v56 = 0;
        }
        else
        {
          if (inSpecifierSize != 8) {
            return 561213539;
          }
          unsigned int v56 = *((_DWORD *)inSpecifier + 1);
        }
        UInt32 v35 = AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(*(_DWORD *)inSpecifier, v56, v4);
        goto LABEL_313;
      }
      return 2003329396;
    }
    if ((int)inPropertyID <= 1634034289)
    {
      if ((int)inPropertyID <= 1633906533)
      {
        if (inPropertyID == 1633776744) {
          goto LABEL_193;
        }
        if (inPropertyID != 1633904998) {
          return DecoderSpecificBitStreamFromESDS;
        }
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        uint64_t v37 = qword_1EB3D4FB0;
        os_unfair_recursive_lock_lock_with_options();
        UInt32 v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 40))(v37);
      }
      else
      {
        if (inPropertyID != 1633906534)
        {
          if (inPropertyID != 1633969004)
          {
            int v10 = 1633971811;
            goto LABEL_104;
          }
          goto LABEL_199;
        }
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        uint64_t v40 = qword_1EB3D4FB0;
        os_unfair_recursive_lock_lock_with_options();
        UInt32 v38 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 48))(v40);
      }
      *outPropertyDataSize = v38;
      os_unfair_recursive_lock_unlock();
      return 0;
    }
    if ((int)inPropertyID <= 1634100077)
    {
      if (inPropertyID == 1634034290)
      {
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        uint64_t v43 = qword_1EB3D4FB0;
        os_unfair_recursive_lock_lock_with_options();
        OSStatus v14 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, UInt32 *))(*(void *)v43 + 56))(v43, v7, v6, outPropertyDataSize);
        goto LABEL_268;
      }
      if (inPropertyID != 1634034540)
      {
        if (inPropertyID != 1634038642) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inSpecifierSize != 4 || !inSpecifier || *(_DWORD *)inSpecifier != 1819304813)
        {
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          uint64_t v13 = qword_1EB3D4FB0;
          os_unfair_recursive_lock_lock_with_options();
          OSStatus v14 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, UInt32 *))(*(void *)v13 + 64))(v13, v7, v6, outPropertyDataSize);
LABEL_268:
          OSStatus DecoderSpecificBitStreamFromESDS = v14;
          os_unfair_recursive_lock_unlock();
          return DecoderSpecificBitStreamFromESDS;
        }
        goto LABEL_138;
      }
LABEL_199:
      if (inSpecifierSize == 40)
      {
        if (inSpecifier)
        {
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          uint64_t v39 = qword_1EB3D4FB0;
          os_unfair_recursive_lock_lock_with_options();
          OSStatus v14 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, UInt32 *, BOOL))(*(void *)v39 + 72))(v39, v6, outPropertyDataSize, inPropertyID == 1634034540);
          goto LABEL_268;
        }
        return -50;
      }
      return 561213539;
    }
    if (inPropertyID != 1634100078)
    {
      if (inPropertyID != 1634100080)
      {
        int v33 = 1634496373;
        goto LABEL_196;
      }
      if (!inSpecifier) {
        return -50;
      }
      if (inSpecifierSize < 0x10) {
        return 561213539;
      }
    }
LABEL_197:
    OSStatus DecoderSpecificBitStreamFromESDS = 0;
    UInt32 v34 = 8;
    goto LABEL_198;
  }
  if ((int)inPropertyID <= 1668509292)
  {
    if ((int)inPropertyID > 1668116595)
    {
      if ((int)inPropertyID <= 1668180323)
      {
        if (inPropertyID == 1668116596) {
          goto LABEL_193;
        }
        if (inPropertyID == 1668178285) {
          goto LABEL_197;
        }
        if (inPropertyID != 1668178796) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (!inSpecifier) {
          return -50;
        }
        UInt32 v16 = inSpecifierSize;
        uint64_t v17 = (unsigned int *)inSpecifier;
        inSpecifier = 0;
LABEL_272:
        return AudioFormatProperty_ChannelLayoutSizeForISOChannelLayout(v16, v17, (uint64_t)inSpecifier, outPropertyDataSize, 0);
      }
      if (inPropertyID == 1668180324)
      {
        if (inSpecifierSize < 0xC) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        return AudioFormatProperty_CodingNameForDecodeFormatID((int *)inSpecifier, (int *)outPropertyDataSize, 0);
      }
      if (inPropertyID == 1668309350)
      {
        if (!inSpecifier) {
          return -50;
        }
        if (inSpecifierSize < 0x40) {
          return 561213539;
        }
        goto LABEL_197;
      }
      int v29 = 1668446576;
      goto LABEL_192;
    }
    if ((int)inPropertyID > 1668113259)
    {
      switch(inPropertyID)
      {
        case 0x636D636Cu:
          goto LABEL_193;
        case 0x636D7062u:
          if (inSpecifierSize != 4) {
            return 561213539;
          }
          if (!inSpecifier) {
            return -50;
          }
          unsigned int v42 = (*(_DWORD *)inSpecifier >> 11) & 0x800 | *(_DWORD *)inSpecifier & 0xFFA3FFFF | (*(_DWORD *)inSpecifier >> 6) & 0x7000;
          v79[0].mChannelLayoutTag = 0x10000;
          *(void *)&v79[0].mChannelBitmap = v42;
          break;
        case 0x636D706Cu:
          if (inSpecifierSize != 4) {
            return 561213539;
          }
          if (!inSpecifier) {
            return -50;
          }
          AudioChannelLayoutTag v32 = *(_DWORD *)inSpecifier;
          v79[0].mChannelBitmap = 0;
          v79[0].mNumberChannelDescriptions = 0;
          v79[0].mChannelLayoutTag = v32;
          break;
        default:
          return DecoderSpecificBitStreamFromESDS;
      }
      v81[0] = 0;
      OSStatus DecoderSpecificBitStreamFromESDS = AudioFormatProperty_NumberOfChannelsForLayout(v79, (unsigned int *)v81);
      UInt32 v34 = 20 * v81[0] + 12;
      goto LABEL_198;
    }
    if (inPropertyID != 1668048489)
    {
      int v29 = 1668051811;
      goto LABEL_192;
    }
    if (inSpecifierSize < 0x38) {
      return 561213539;
    }
    if (!inSpecifier) {
      return -50;
    }
    AudioCodecPropertyID v12 = 1868786720;
    return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
  }
  if ((int)inPropertyID <= 1701014882)
  {
    if ((int)inPropertyID <= 1685218163)
    {
      if (inPropertyID == 1668509293) {
        goto LABEL_197;
      }
      if (inPropertyID != 1684235116)
      {
        if (inPropertyID != 1684369510) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (!inSpecifier) {
          return -50;
        }
        if (inSpecifierSize < 0x38) {
          return 561213539;
        }
        AudioCodecPropertyID v12 = 1684369510;
        return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, outPropertyDataSize, 0, v12);
      }
      if (!inSpecifier) {
        return -50;
      }
      if (inSpecifierSize != 56) {
        return 561213539;
      }
      UInt32 v16 = *((_DWORD *)inSpecifier + 12);
      uint64_t v17 = (unsigned int *)*((void *)inSpecifier + 5);
      goto LABEL_272;
    }
    if (inPropertyID == 1685218164 || inPropertyID == 1685220460) {
      goto LABEL_193;
    }
    if (inPropertyID != 1685283692) {
      return DecoderSpecificBitStreamFromESDS;
    }
    if (inSpecifierSize != 4) {
      return 561213539;
    }
    if (!inSpecifier) {
      return -50;
    }
    OSStatus DecoderSpecificBitStreamFromESDS = 0;
    UInt32 v34 = 20;
LABEL_198:
    *outPropertyDataSize = v34;
    return DecoderSpecificBitStreamFromESDS;
  }
  if ((int)inPropertyID > 1701147491)
  {
    if (inPropertyID != 1701147492)
    {
      if (inPropertyID != 1701406313)
      {
        if (inPropertyID != 1701733230) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (!inSpecifier) {
          return -50;
        }
        OSStatus DecoderSpecificBitStreamFromESDS = 561213539;
        if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize) {
          return DecoderSpecificBitStreamFromESDS;
        }
        return AudioFormatProperty_EncapsulatedMagicCookieNameForCodingName((int *)inSpecifier, outPropertyDataSize, 0);
      }
      if (inSpecifierSize != 8) {
        return 561213539;
      }
LABEL_298:
      if (!inSpecifier) {
        return -50;
      }
      goto LABEL_193;
    }
    return AudioFormatProperty_ESDFromESDSSize((unsigned __int8 *)inSpecifier, inSpecifierSize, outPropertyDataSize);
  }
  if (inPropertyID != 1701014883)
  {
    if (inPropertyID != 1701077868)
    {
      int v30 = 1701081956;
      goto LABEL_98;
    }
    if (!inSpecifier) {
      return -50;
    }
    OSStatus v41 = AudioFormatProperty_ChannelLayoutFromESD((unsigned __int8 *)inSpecifier, inSpecifierSize, v79);
LABEL_281:
    OSStatus DecoderSpecificBitStreamFromESDS = v41;
    UInt32 v34 = 32 * (v41 == 0);
    goto LABEL_198;
  }
  if (!inSpecifier) {
    return -50;
  }
  if (inSpecifierSize < 0x18) {
    return 561213539;
  }
  return AudioFormatProperty_EncapsulatedMagicCookieFromCanonicalMagicCookie((unsigned int *)inSpecifier, outPropertyDataSize, 0);
}

void sub_18FEE1450(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_18FEE14B4(void *a1, int a2)
{
  if (a2)
  {
    if (v4) {
      (*(void (**)(uint64_t))(v2 + 1608))(v4);
    }
    if (v3) {
      (*(void (**)(uint64_t))(v2 + 88))(v3);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18FEE0F5CLL);
  }
  JUMPOUT(0x18FEE14A4);
}

void sub_18FEE1548(void *a1, int a2)
{
  if (a2)
  {
    os_unfair_recursive_lock_unlock();
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18FEE0F5CLL);
  }
  JUMPOUT(0x18FEE14A4);
}

void sub_18FEE156C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18FEE0F5CLL);
  }
  JUMPOUT(0x18FEE14A4);
}

void sub_18FEE157C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18FEE1588);
  }
  JUMPOUT(0x18FEE14A4);
}

void sub_18FEE15B0()
{
}

uint64_t FetchFormatListFromCodecs(uint64_t (*a1)(void), const AudioFormatInfo *a2, unsigned int a3, unsigned int *a4, AudioFormatListItem *a5)
{
  int v25 = 0;
  if (a3 < 0x40)
  {
    LODWORD(v22) = 1969977198;
    OSType v10 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(a2->mASBD.mFormatID, (int *)&v22);
    *(void *)&inDesc.componentType = 0;
    uint64_t v11 = OpenCodecComponent(v10, (OpaqueAudioComponentInstance **)&inDesc, 0x61646563u);
    if (v11) {
      goto LABEL_6;
    }
    AudioComponentInstance outInstance = *(AudioComponentInstance *)&inDesc.componentType;
    int v25 = *a4;
    uint64_t v9 = a1();
    AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&outInstance);
    if (v9) {
      return v9;
    }
    if (!v25)
    {
LABEL_6:
      if (a5) {
        int v12 = *a4;
      }
      else {
        int v12 = 0;
      }
      int v21 = v12;
      if (OpenCodecComponent(v10, (OpaqueAudioComponentInstance **)&inDesc, 0x61636463u))
      {
        int v13 = 0;
        char v14 = 1;
      }
      else
      {
        AudioComponentInstance outInstance = *(AudioComponentInstance *)&inDesc.componentType;
        uint64_t v9 = a1();
        AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&outInstance);
        if (v9) {
          return v9;
        }
        char v14 = 0;
        int v13 = v21;
      }
    }
    else
    {
      int v13 = 0;
      char v14 = 0;
    }
    unsigned int v15 = v13 + v25;
    *a4 = v15;
    if (a5)
    {
      int v16 = (int)v22;
      if (v22 != 1969977198 && v15 >= 0x30)
      {
        unint64_t v17 = 0;
        p_mFormatID = (signed int *)&a5->mASBD.mFormatID;
        do
        {
          signed int *p_mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(*p_mFormatID, v16);
          p_mFormatID += 12;
          ++v17;
        }
        while (v17 < *a4 / 0x30uLL);
      }
    }
    char v19 = v14 ^ 1;
    if (!v11) {
      char v19 = 1;
    }
    uint64_t v9 = v11;
    if (v19) {
      return 0;
    }
  }
  else
  {
    inDesc.componentFlags = 0;
    inDesc.componentFlagsMasunint64_t k = 0;
    *(void *)&inDesc.componentType = *(void *)(&a2->mMagicCookieSize + 1);
    inDesc.OSType componentManufacturer = HIDWORD(a2[1].mASBD.mSampleRate);
    uint64_t Next = AudioComponentFindNext(0, &inDesc);
    if (Next && (AudioComponentInstance outInstance = 0, !AudioComponentInstanceNew(Next, &outInstance)))
    {
      AudioComponentInstance v22 = outInstance;
      uint64_t v9 = a1();
      AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&v22);
    }
    else
    {
      return 4294957891;
    }
  }
  return v9;
}

void sub_18FEE17FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatEncryptedFormatTranslator::DecryptFormatID(uint64_t result, int *a2)
{
  uint64_t v2 = 1633772320;
  *a2 = 1969977198;
  if ((int)result > 1902211170)
  {
    if ((int)result > 2053202274)
    {
      if ((int)result > 2053202799)
      {
        if ((int)result <= 2053464882)
        {
          if (result != 2053202800)
          {
            if (result != 2053319475) {
              return result;
            }
            int v3 = 2053467747;
            goto LABEL_47;
          }
          uint64_t v2 = 1633772400;
LABEL_63:
          int v3 = 2053467747;
          goto LABEL_64;
        }
        if (result == 2053464883)
        {
          uint64_t v2 = 1700998451;
          goto LABEL_63;
        }
        if (result != 2053923171) {
          return result;
        }
        int v3 = 2053467747;
LABEL_57:
        uint64_t v2 = 1634492771;
        goto LABEL_64;
      }
      if (result == 2053202275) {
        goto LABEL_63;
      }
      if (result != 2053202739)
      {
        if (result != 2053202792) {
          return result;
        }
        uint64_t v2 = 1633772392;
        goto LABEL_63;
      }
      int v3 = 2053467747;
LABEL_59:
      uint64_t v2 = 1633889587;
      goto LABEL_64;
    }
    if ((int)result <= 1902537826)
    {
      switch(result)
      {
        case 0x71617063:
          uint64_t v2 = 1634754915;
          break;
        case 0x71632B33:
          int v3 = 1667392371;
LABEL_47:
          uint64_t v2 = 1700997939;
LABEL_64:
          *a2 = v3;
          return v2;
        case 0x71656333:
          uint64_t v2 = 1700998451;
          break;
        default:
          return result;
      }
      goto LABEL_61;
    }
    if (result == 1902537827)
    {
      uint64_t v2 = 1718378851;
      goto LABEL_61;
    }
    if (result == 1902928227)
    {
      int v3 = 1667392371;
      goto LABEL_57;
    }
    if (result != 1903522657) {
      return result;
    }
    int v3 = 1667392371;
LABEL_50:
    uint64_t v2 = 1970495843;
    goto LABEL_64;
  }
  if ((int)result <= 1885692722)
  {
    if ((int)result > 1885430639)
    {
      switch(result)
      {
        case 0x70616370:
          uint64_t v2 = 1633772400;
          break;
        case 0x70617063:
          uint64_t v2 = 1634754915;
          break;
        case 0x70632B33:
          int v3 = 1885695587;
          goto LABEL_47;
        default:
          return result;
      }
    }
    else if (result != 1885430115)
    {
      if (result == 1885430579)
      {
        int v3 = 1885695587;
        goto LABEL_59;
      }
      if (result != 1885430632) {
        return result;
      }
      uint64_t v2 = 1633772392;
    }
LABEL_54:
    int v3 = 1885695587;
    goto LABEL_64;
  }
  if ((int)result > 1902207794)
  {
    switch(result)
    {
      case 0x71616333:
        int v3 = 1667392371;
        goto LABEL_59;
      case 0x71616368:
        uint64_t v2 = 1633772392;
        break;
      case 0x71616370:
        uint64_t v2 = 1633772400;
        break;
      default:
        return result;
    }
LABEL_61:
    int v3 = 1667392371;
    goto LABEL_64;
  }
  switch(result)
  {
    case 0x70656333:
      uint64_t v2 = 1700998451;
      goto LABEL_54;
    case 0x70757361:
      int v3 = 1885695587;
      goto LABEL_50;
    case 0x71616163:
      goto LABEL_61;
  }
  return result;
}

uint64_t AudioFormatProperty_FormatListSize(const AudioFormatInfo *a1, unsigned int a2, unsigned int *a3)
{
  *a3 = 0;
  if (a1->mASBD.mFormatID == 1836069985)
  {
    unsigned int v13 = 0;
    int v5 = FormatFromESDS((unsigned __int8 *)a1->mMagicCookie, a1->mMagicCookieSize, &v13);
    if (v13)
    {
      int v6 = v5;
      memset(&v12, 0, 40);
      mMagicCookie = (void *)a1->mMagicCookie;
      v12.mMagicCookie = mMagicCookie;
      UInt32 mMagicCookieSize = a1->mMagicCookieSize;
      v12.UInt32 mMagicCookieSize = mMagicCookieSize;
      if (v6)
      {
        unsigned int v10 = 40;
        memset(&v11, 0, sizeof(v11));
        uint64_t result = AudioFormatProperty_AudioFormatInfoFromESDS((unsigned __int8 *)mMagicCookie, mMagicCookieSize, &v10, &v11);
        if (result) {
          return result;
        }
        v12.mASBD.mFormatID = v11.mFormatID;
      }
      else
      {
        v12.mASBD.mFormatID = v13;
      }
      return AudioFormatProperty_FormatListSize(&v12, 0x38u, a3);
    }
    else
    {
      return 560360820;
    }
  }
  else
  {
    return FetchFormatListFromCodecs((uint64_t (*)(void))GetFormatListFromCodec, a1, a2, a3, 0);
  }
}

uint64_t acv2::ConverterRegistry::GetInputFormats(acv2::ConverterRegistry *this, const unsigned int *a2, _DWORD *a3)
{
  AudioFormatInfo v12 = 0;
  uint64_t v13 = 0;
  AudioStreamBasicDescription v11 = &v12;
  acv2::ConverterRegistry::GetInputFormatsSet((uint64_t)this, (uint64_t *)&v11);
  uint64_t v5 = 561211770;
  if (a2 && *a2 == 4 * v13)
  {
    uint64_t v6 = (uint64_t)v11;
    if (v11 != &v12)
    {
      do
      {
        *a3 = *(_DWORD *)(v6 + 28);
        uint64_t v7 = *(void **)(v6 + 8);
        if (v7)
        {
          do
          {
            uint64_t v8 = (void **)v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = *(void ***)(v6 + 16);
            BOOL v9 = *v8 == (void *)v6;
            uint64_t v6 = (uint64_t)v8;
          }
          while (!v9);
        }
        ++a3;
        uint64_t v6 = (uint64_t)v8;
      }
      while (v8 != &v12);
    }
    uint64_t v5 = 0;
  }
  return v5;
}

void sub_18FEE1D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t acv2::ConverterRegistry::GetInputFormatsSize(acv2::ConverterRegistry *this)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int v3 = &v4;
  acv2::ConverterRegistry::GetInputFormatsSet((uint64_t)this, (uint64_t *)&v3);
  uint64_t v1 = (4 * v5);
  return v1;
}

void sub_18FEE1DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t acv2::ConverterRegistry::GetInputFormatsSet(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2 + 1;
  *a2 = (uint64_t)v4;
  a2[2] = 0;
  void *v4 = 0;
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x6C70636Du, 1819304813);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x616C6177u, 1634492791);
  uint64_t result = (uint64_t)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x756C6177u, 1970037111);
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v6 = *(acv2::ConverterRegistry **)(a1 + 8);
    uint64_t v7 = *(acv2::ConverterRegistry **)(a1 + 16);
    if ((acv2::ConverterRegistry::HaveDecoderFactory(v6, v7, 1634492791, 1819304813) & 1) == 0) {
      operator new();
    }
    if ((acv2::ConverterRegistry::HaveDecoderFactory(v6, v7, 1970037111, 1819304813) & 1) == 0) {
      operator new();
    }
    uint64_t result = acv2::ConverterRegistry::MakeFactories((acv2::ConverterRegistry *)a1, 0, 1819304813, COERCE_DOUBLE(1633969507));
    *(unsigned char *)(a1 + 64) = 1;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  while (v9 != v8)
  {
    if (*(_DWORD *)(*(void *)v9 + 12) == 1819304813) {
      uint64_t result = (uint64_t)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, *(_DWORD *)(*(void *)v9 + 8), *(_DWORD *)(*(void *)v9 + 8));
    }
    v9 += 8;
  }
  return result;
}

void std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int>,anonymous namespace'::BlockFormatRef>,std::__map_value_compare<std::tuple<unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int>,anonymous namespace'::BlockFormatRef>,std::less<std::tuple<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int>,anonymous namespace'::BlockFormatRef>>>::destroy(void *a1)
{
  if (a1)
  {
    operator delete(a1);
  }
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,anonymous namespace'::ElementRef<AudioMetadataObject>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,anonymous namespace'::ElementRef<AudioMetadataObject>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,anonymous namespace'::ElementRef<AudioMetadataObject>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            unsigned int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t acv2::ConverterRegistry::GetAvailableEncodeSampleRatesInfo(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t FactoryBySpecifier = acv2::ConverterRegistry::FindFactoryBySpecifier(this, a2, a3);
  if (FactoryBySpecifier)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)FactoryBySpecifier + 56);
    return v5();
  }
  else
  {
    AudioConverterLog();
    uint64_t v7 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "ConverterFactory.cpp";
      __int16 v10 = 1024;
      int v11 = 446;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for encode sample rates info", (uint8_t *)&v8, 0x12u);
    }
    return 1718449215;
  }
}

uint64_t acv2::ConverterRegistry::FindFactoryBySpecifier(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3)
{
  switch(a2)
  {
    case 0u:
      return 0;
    case 0x28u:
      uint64_t v3 = a3[2];
      return (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, void, void))(*(void *)this + 16))(this, 1819304813, v3, 0, 0);
    case 4u:
      uint64_t v3 = *a3;
      return (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, void, void))(*(void *)this + 16))(this, 1819304813, v3, 0, 0);
  }
  if (a2 % 0xC) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, void, unsigned int *, void))(*(void *)this + 16))(this, 1819304813, a3[1], a3, a2 / 0xC);
  }
}

uint64_t DSPGraph::Box::asAUBox(DSPGraph::Box *this)
{
  return 0;
}

void DSPGraph::Graph::addOutput(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 761)) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v3, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v2, "addOutput");
  std::string::basic_string[abi:ne180100]<0>(&v1, "graph is configured");
  DSPGraph::ThrowException(1667655457, &v3, 962, &v2, &v1);
}

void sub_18FEE2674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parseFormat(DSPGraph *a1, uint64_t a2)
{
  DSPGraph::skipspace(a1, (const char **)a2);
  uint64_t v4 = *(void *)a1;
  int v5 = **(unsigned __int8 **)a1;
  if (v5 == 40)
  {
    uint64_t v43 = (char *)(v4 + 1);
    HIBYTE(v42) = 1;
    LODWORD(v42) = 0;
    int v7 = 0;
    if (DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v43, (const char **)&v42, 0))
    {
      if (v42 == 1819304813)
      {
        int v7 = 0;
        LODWORD(v42) = 0;
      }
      else if (v42 == 1718773105)
      {
        LODWORD(v42) = 0;
        int v7 = 1;
      }
      else
      {
        int v7 = 0;
      }
    }
    *(void *)uint64_t v37 = v43;
    v41.__r_.__value_.__r.__words[0] = 0;
    if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v37, (const char **)&v41.__r_.__value_.__l.__data_, v6)|| (data = v41.__r_.__value_.__l.__data_, HIDWORD(v41.__r_.__value_.__r.__words[0]))|| (uint64_t v43 = *(char **)v37, !LODWORD(v41.__r_.__value_.__l.__data_)))
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v41, "parseParenFormat");
      std::string::basic_string[abi:ne180100]<0>(&v40, "expected non-zero sample rate");
      DSPGraph::ThrowException(1886548769, (long long *)v37, 542, (long long *)&v41, &v40);
    }
    unsigned int v19 = v42;
    if (v42)
    {
      v41.__r_.__value_.__r.__words[0] = 0;
      if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v37, (const char **)&v41.__r_.__value_.__l.__data_, v17)|| (int v21 = (int)v41.__r_.__value_.__l.__data_, HIDWORD(v41.__r_.__value_.__r.__words[0]))|| (v43 = *(char **)v37, !DSPGraph::Interpreter::parserInterleavedFlag((DSPGraph::Interpreter *)&v43, (const char **)((char *)&v42 + 7), v20))|| (*(void *)v37 = v43, v41.__r_.__value_.__r.__words[0] = 0, !DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v37, (const char **)&v41.__r_.__value_.__l.__data_, v22))|| (v24 = (int)v41.__r_.__value_.__l.__data_, HIDWORD(v41.__r_.__value_.__r.__words[0]))|| (v41.__r_.__value_.__r.__words[0] = 0, !DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v37,
                             (const char **)&v41.__r_.__value_.__l.__data_,
                             v23))
        || (int v26 = (int)v41.__r_.__value_.__l.__data_, HIDWORD(v41.__r_.__value_.__r.__words[0])))
      {
        std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v41, "parseParenFormat");
        std::string::basic_string[abi:ne180100]<0>(&v40, "constant bit rate formats must have a block size and bytes per packet.");
        DSPGraph::ThrowException(1718449215, (long long *)v37, 547, (long long *)&v41, &v40);
      }
      uint64_t v43 = *(char **)v37;
      goto LABEL_44;
    }
    v41.__r_.__value_.__r.__words[0] = 0;
    if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v37, (const char **)&v41.__r_.__value_.__l.__data_, v17)|| (int v21 = (int)v41.__r_.__value_.__l.__data_, HIDWORD(v41.__r_.__value_.__r.__words[0])))
    {
      int v26 = 0;
      int v21 = 1;
    }
    else
    {
      uint64_t v43 = *(char **)v37;
      if (DSPGraph::Interpreter::parserInterleavedFlag((DSPGraph::Interpreter *)&v43, (const char **)((char *)&v42 + 7), v27))
      {
        *(void *)uint64_t v37 = v43;
        v41.__r_.__value_.__r.__words[0] = 0;
        if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)v37, (const char **)&v41.__r_.__value_.__l.__data_, v28)|| (int v24 = (int)v41.__r_.__value_.__l.__data_, HIDWORD(v41.__r_.__value_.__r.__words[0])))
        {
          int v24 = 1;
        }
        else
        {
          uint64_t v43 = *(char **)v37;
        }
        int v26 = 0;
        goto LABEL_44;
      }
      int v26 = 0;
    }
    int v24 = 1;
LABEL_44:
    DSPGraph::skipspace((DSPGraph *)&v43, v25);
    int v29 = v43;
    if (*v43 != 41)
    {
      UInt32 v35 = v43;
      std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v41, "parseParenFormat");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of format, got '%c'", v36, *v35);
    }
    if (v19)
    {
      if (HIBYTE(v42))
      {
        std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v41, "parseParenFormat");
        std::string::basic_string[abi:ne180100]<0>(&v40, "constant bit rate formats must be de-interleaved.");
        DSPGraph::ThrowException(1718449215, (long long *)v37, 563, (long long *)&v41, &v40);
      }
      int v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = v19;
      int v33 = v24;
    }
    else if (v7)
    {
      if (v24 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v41, "parseParenFormat");
        std::string::basic_string[abi:ne180100]<0>(&v40, "frequency domain formats must have a block size.");
        DSPGraph::ThrowException(1718449215, (long long *)v37, 568, (long long *)&v41, &v40);
      }
      if (HIBYTE(v42))
      {
        std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v41, "parseParenFormat");
        std::string::basic_string[abi:ne180100]<0>(&v40, "frequency domain formats must be de-interleaved.");
        DSPGraph::ThrowException(1718449215, (long long *)v37, 571, (long long *)&v41, &v40);
      }
      uint64_t v32 = 0x2966726571;
      uint64_t v31 = 64;
      int v33 = 1;
      int v26 = 8;
      int v30 = 8;
    }
    else
    {
      uint64_t v31 = 32;
      if (HIBYTE(v42))
      {
        uint64_t v32 = 0x96C70636DLL;
        int v26 = 4 * (v21 & 0x7FFFFFF);
        int v33 = 1;
        int v30 = v26;
      }
      else
      {
        uint64_t v32 = 0x296C70636DLL;
        int v33 = 1;
        int v26 = 4;
        int v30 = 4;
      }
    }
    *(double *)a2 = (double)data;
    *(void *)(a2 + 8) = v32;
    *(_DWORD *)(a2 + 16) = v26;
    *(_DWORD *)(a2 + 20) = v33;
    *(_DWORD *)(a2 + 24) = v30;
    *(_DWORD *)(a2 + 28) = v21;
    *(void *)(a2 + 32) = v31;
    *(_DWORD *)(a2 + 40) = v24;
    *(void *)a1 = v29 + 2;
    return 1;
  }
  memset(&v41, 0, sizeof(v41));
  uint64_t v8 = MEMORY[0x1E4F14390];
  while (1)
  {
    int v9 = (char)v5;
    int v10 = (v5 & 0x80) != 0
        ? __maskrune((char)v5, 0x500uLL)
        : *(_DWORD *)(v8 + 4 * (char)v5 + 60) & 0x500;
    if (!v10 && !memchr("-@/#,", v9, 6uLL)) {
      break;
    }
    std::string::push_back(&v41, v9);
    char v12 = *(unsigned char *)++v4;
    LOBYTE(v5) = v12;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v13 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if (!v41.__r_.__value_.__l.__size_)
    {
      uint64_t v15 = 0;
      goto LABEL_55;
    }
  }
  else
  {
    if (!*((unsigned char *)&v41.__r_.__value_.__s + 23)) {
      return 0;
    }
    uint64_t v13 = &v41;
  }
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v37 = *(_OWORD *)a2;
  long long v38 = v14;
  uint64_t v39 = *(void *)(a2 + 32);
  uint64_t v15 = CAStreamBasicDescription::FromText((CAStreamBasicDescription *)v13, v37, v11);
  if (v15)
  {
    long long v16 = v38;
    *(_OWORD *)a2 = *(_OWORD *)v37;
    *(_OWORD *)(a2 + 16) = v16;
    *(void *)(a2 + 32) = v39;
    *(_DWORD *)(a2 + 40) = 1;
    *(void *)a1 = v4;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v13 = (std::string *)v41.__r_.__value_.__r.__words[0];
LABEL_55:
    operator delete(v13);
  }
  return v15;
}

void sub_18FEE2CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseBoxCommand(DSPGraph::Interpreter *this, const char **a2, unint64_t *a3)
{
  int v30 = 0;
  DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)a2, (const char **)&v30, a3);
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v29 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)v28) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&__p, "parseBoxCommand");
    DSPGraph::strprintf((DSPGraph *)"expected name in 'box' command: %s", v16, *a2);
  }
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 0;
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  int v21 = *a2;
  if (DSPGraph::Interpreter::parseString((DSPGraph *)&v21, (uint64_t)v26)
    && DSPGraph::NewBoxRegistry::has((uint64_t)this + 16, (uint64_t)v26))
  {
    *a2 = v21;
    int v6 = 1;
  }
  else
  {
    if (!DSPGraph::Interpreter::parseCompDesc((DSPGraph::Interpreter *)a2, (const char **)v22, v5))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v24, "parseBoxCommand");
      DSPGraph::strprintf((DSPGraph *)"expected class name or component description in 'box' command: %s", v17, *a2);
    }
    int v6 = 0;
  }
  unsigned int v19 = 0;
  if ((DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)a2, (const char **)((char *)&v19 + 4), &v5->componentType) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "parseBoxCommand");
    std::string::basic_string[abi:ne180100]<0>(&v20, "expected number of inputs in 'box' command");
    DSPGraph::ThrowException(1886548769, (long long *)&__p, 896, &v24, (long long *)&v20);
  }
  if ((DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)a2, (const char **)&v19, v7) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "parseBoxCommand");
    std::string::basic_string[abi:ne180100]<0>(&v20, "expected number of outputs in 'box' command");
    DSPGraph::ThrowException(1886548769, (long long *)&__p, 899, &v24, (long long *)&v20);
  }
  if (v6)
  {
    if (!DSPGraph::NewBoxRegistry::has((uint64_t)this + 16, (uint64_t)v26))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v24, "parseBoxCommand");
      std::operator+<char>();
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, &v18, "' not found");
      DSPGraph::ThrowException(1852204065, (long long *)&__p, 905, &v24, (long long *)&v20);
    }
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<std::string>((void *)this + 3, (unsigned __int8 *)v26);
    if (v8) {
      unint64_t v9 = std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(*((void *)v8 + 8), SHIDWORD(v19), (int)v19);
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v13 = *((void *)this + 1);
    if (v29 >= 0) {
      long long v14 = (char *)v28;
    }
    else {
      long long v14 = (char *)v28[0];
    }
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v22;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v23;
    if (!std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>((void *)this + 8, (unsigned int *)&__p))
    {
      uint64_t v11 = *((void *)this + 1);
      if (v29 >= 0) {
        char v12 = (char *)v28;
      }
      else {
        char v12 = (char *)v28[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v12);
      DSPGraph::Graph::add(v11);
    }
    int v10 = std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>((void *)this + 8, (unsigned int *)v22);
    if (v10) {
      unint64_t v9 = std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(v10[8], SHIDWORD(v19), (int)v19);
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v13 = *((void *)this + 1);
    if (v29 >= 0) {
      long long v14 = (char *)v28;
    }
    else {
      long long v14 = (char *)v28[0];
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v14);
  DSPGraph::Graph::add(v13, v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = *((void *)this + 25);
  if (v15 != *((void *)this + 24)) {
    DSPGraph::Box::setSubset(v9, *(void *)(v15 - 8));
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
}

void sub_18FEE3164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 81) < 0) {
    operator delete(*(void **)(v39 - 104));
  }
  if (*(char *)(v39 - 57) < 0) {
    operator delete(*(void **)(v39 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parseUInt32(DSPGraph::Interpreter *this, const char **a2, unsigned int *a3)
{
  uint64_t v5 = *(void *)this;
  unint64_t v7 = 0;
  uint64_t v8 = v5;
  uint64_t result = DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v8, (const char **)&v7, (unint64_t *)a3);
  if (result)
  {
    if (HIDWORD(v7))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)a2 = v7;
      *(void *)this = v8;
      return 1;
    }
  }
  return result;
}

uint64_t DSPGraph::Interpreter::parseUInt64(DSPGraph::Interpreter *this, const char **a2, unint64_t *a3)
{
  DSPGraph::skipspace(this, a2);
  __endptr = 0;
  unint64_t v5 = strtoul(*(const char **)this, &__endptr, 10);
  int v6 = __endptr;
  if (__endptr == *(char **)this) {
    return 0;
  }
  unint64_t v7 = (const char *)v5;
  if (v5 == -1)
  {
    if (*__error()) {
      return 0;
    }
  }
  *a2 = v7;
  *(void *)this = v6;
  return 1;
}

BOOL DSPGraph::NewBoxRegistry::has(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  long long v3 = std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<std::string>(v2, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3 != 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (unint64_t i = *v10; i; unint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t *std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = a2[1] + (unint64_t)*a2 + a2[2];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2[1] + (unint64_t)*a2 + a2[2];
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v3 == v8)
    {
      if (result[2] == *(void *)a2 && *((_DWORD *)result + 6) == (unint64_t)a2[2]) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void DSPGraph::Graph::add(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 761)) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v3, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v2, "add");
  std::string::basic_string[abi:ne180100]<0>(&v1, "graph is configured");
  DSPGraph::ThrowException(1667655457, &v3, 978, &v2, &v1);
}

void sub_18FEE36CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::addBox(uint64_t result, unint64_t a2, const std::string *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  unint64_t v10 = result + 24;
  uint64_t v11 = (void *)(result + 24);
  while (1)
  {
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      break;
    }
    if (v11[2] == a2) {
      return result;
    }
  }
  int8x8_t prime = operator new(0x18uLL);
  uint64_t v13 = prime;
  unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v14 >> 47) ^ v14);
  unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
  *int8x8_t prime = 0;
  prime[1] = v16;
  prime[2] = a2;
  unint64_t v17 = *(void *)(v9 + 16);
  if (!v17) {
    goto LABEL_21;
  }
  uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    unint64_t v19 = v16;
    if (v17 <= v16) {
      unint64_t v19 = v16 % v17;
    }
  }
  else
  {
    unint64_t v19 = (v17 - 1) & v16;
  }
  std::string v20 = *(void **)(*(void *)(v9 + 8) + 8 * v19);
  if (!v20 || (int v21 = (void *)*v20) == 0)
  {
LABEL_21:
    float v23 = (float)(unint64_t)(*(void *)(v9 + 32) + 1);
    float v24 = *(float *)(v9 + 40);
    if (!v17 || (float)(v24 * (float)v17) < v23)
    {
      BOOL v25 = 1;
      if (v17 >= 3) {
        BOOL v25 = (v17 & (v17 - 1)) != 0;
      }
      unint64_t v26 = v25 | (2 * v17);
      unint64_t v27 = vcvtps_u32_f32(v23 / v24);
      if (v26 <= v27) {
        size_t v28 = v27;
      }
      else {
        size_t v28 = v26;
      }
      if (v28 == 1)
      {
        size_t v28 = 2;
      }
      else if ((v28 & (v28 - 1)) != 0)
      {
        int8x8_t prime = (void *)std::__next_prime(v28);
        size_t v28 = (size_t)prime;
        unint64_t v17 = *(void *)(v9 + 16);
      }
      if (v28 > v17) {
        goto LABEL_267;
      }
      if (v28 >= v17) {
        goto LABEL_62;
      }
      int8x8_t prime = (void *)vcvtps_u32_f32((float)*(unint64_t *)(v9 + 32) / *(float *)(v9 + 40));
      if (v17 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        int8x8_t prime = (void *)std::__next_prime((size_t)prime);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz((unint64_t)prime - 1);
        if ((unint64_t)prime >= 2) {
          int8x8_t prime = (void *)v35;
        }
      }
      if (v28 <= (unint64_t)prime) {
        size_t v28 = (size_t)prime;
      }
      if (v28 >= v17)
      {
        unint64_t v17 = *(void *)(v9 + 16);
        goto LABEL_62;
      }
      if (v28)
      {
LABEL_267:
        if (v28 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v29 = operator new(8 * v28);
        int8x8_t prime = *(void **)(v9 + 8);
        *(void *)(v9 + 8) = v29;
        if (prime) {
          operator delete(prime);
        }
        uint64_t v30 = 0;
        *(void *)(v9 + 16) = v28;
        do
          *(void *)(*(void *)(v9 + 8) + 8 * v30++) = 0;
        while (v28 != v30);
        uint64_t v31 = *(void **)v10;
        if (*(void *)v10)
        {
          size_t v32 = v31[1];
          uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
          v33.i16[0] = vaddlv_u8(v33);
          if (v33.u32[0] > 1uLL)
          {
            if (v32 >= v28) {
              v32 %= v28;
            }
          }
          else
          {
            v32 &= v28 - 1;
          }
          *(void *)(*(void *)(v9 + 8) + 8 * v32) = v10;
          uint64_t v36 = (void *)*v31;
          if (*v31)
          {
            do
            {
              size_t v37 = v36[1];
              if (v33.u32[0] > 1uLL)
              {
                if (v37 >= v28) {
                  v37 %= v28;
                }
              }
              else
              {
                v37 &= v28 - 1;
              }
              if (v37 != v32)
              {
                uint64_t v38 = *(void *)(v9 + 8);
                if (!*(void *)(v38 + 8 * v37))
                {
                  *(void *)(v38 + 8 * v37) = v31;
                  goto LABEL_58;
                }
                *uint64_t v31 = *v36;
                *uint64_t v36 = **(void **)(*(void *)(v9 + 8) + 8 * v37);
                **(void **)(*(void *)(v9 + 8) + 8 * v37) = v36;
                uint64_t v36 = v31;
              }
              size_t v37 = v32;
LABEL_58:
              uint64_t v31 = v36;
              uint64_t v36 = (void *)*v36;
              size_t v32 = v37;
            }
            while (v36);
          }
        }
        unint64_t v17 = v28;
      }
      else
      {
        int8x8_t prime = *(void **)(v9 + 8);
        *(void *)(v9 + 8) = 0;
        if (prime) {
          operator delete(prime);
        }
        unint64_t v17 = 0;
        *(void *)(v9 + 16) = 0;
      }
    }
LABEL_62:
    unint64_t v39 = v13[1];
    uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      if (v39 >= v17) {
        v39 %= v17;
      }
    }
    else
    {
      v39 &= v17 - 1;
    }
    uint64_t v41 = *(void *)(v9 + 8);
    unsigned int v42 = *(void **)(v41 + 8 * v39);
    if (v42)
    {
      *uint64_t v13 = *v42;
    }
    else
    {
      *uint64_t v13 = *(void *)v10;
      *(void *)unint64_t v10 = v13;
      *(void *)(v41 + 8 * v39) = v10;
      if (!*v13)
      {
LABEL_75:
        ++*(void *)(v9 + 32);
        goto LABEL_76;
      }
      unint64_t v43 = *(void *)(*v13 + 8);
      if (v40.u32[0] > 1uLL)
      {
        if (v43 >= v17) {
          v43 %= v17;
        }
      }
      else
      {
        v43 &= v17 - 1;
      }
      unsigned int v42 = (void *)(*(void *)(v9 + 8) + 8 * v43);
    }
    *unsigned int v42 = v13;
    goto LABEL_75;
  }
  while (1)
  {
    unint64_t v22 = v21[1];
    if (v22 == v16) {
      break;
    }
    if (v18.u32[0] > 1uLL)
    {
      if (v22 >= v17) {
        v22 %= v17;
      }
    }
    else
    {
      v22 &= v17 - 1;
    }
    if (v22 != v19) {
      goto LABEL_21;
    }
LABEL_20:
    int v21 = (void *)*v21;
    if (!v21) {
      goto LABEL_21;
    }
  }
  if (v21[2] != a2) {
    goto LABEL_20;
  }
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<DSPGraph::Box>,void *>>>::operator()[abi:ne180100](1, prime);
LABEL_76:
  *(void *)(a2 + 8) = v9;
  unint64_t SerialNumber = DSPGraph::Graph::generateSerialNumber((DSPGraph::Graph *)prime);
  if ((_BYTE)a5) {
    unint64_t v45 = a4;
  }
  else {
    unint64_t v45 = SerialNumber;
  }
  *(void *)(a2 + 56) = v45;
  unint64_t v46 = *(void *)(v9 + 832);
  if (v46)
  {
    uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      a5 = v45;
      if (v45 >= v46) {
        a5 = v45 % v46;
      }
    }
    else
    {
      a5 = (v46 - 1) & v45;
    }
    int64x2_t v48 = *(void ***)(*(void *)(v9 + 824) + 8 * a5);
    if (v48)
    {
      for (unint64_t i = *v48; i; unint64_t i = (void *)*i)
      {
        unint64_t v50 = i[1];
        if (v50 == v45)
        {
          if (i[2] == v45) {
            goto LABEL_152;
          }
        }
        else
        {
          if (v47.u32[0] > 1uLL)
          {
            if (v50 >= v46) {
              v50 %= v46;
            }
          }
          else
          {
            v50 &= v46 - 1;
          }
          if (v50 != a5) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v45;
  i[2] = v45;
  i[3] = 0;
  float v51 = (float)(unint64_t)(*(void *)(v9 + 848) + 1);
  float v52 = *(float *)(v9 + 856);
  if (!v46 || (float)(v52 * (float)v46) < v51)
  {
    BOOL v53 = 1;
    if (v46 >= 3) {
      BOOL v53 = (v46 & (v46 - 1)) != 0;
    }
    unint64_t v54 = v53 | (2 * v46);
    unint64_t v55 = vcvtps_u32_f32(v51 / v52);
    if (v54 <= v55) {
      int8x8_t v56 = (int8x8_t)v55;
    }
    else {
      int8x8_t v56 = (int8x8_t)v54;
    }
    if (*(void *)&v56 == 1)
    {
      int8x8_t v56 = (int8x8_t)2;
    }
    else if ((*(void *)&v56 & (*(void *)&v56 - 1)) != 0)
    {
      int8x8_t v56 = (int8x8_t)std::__next_prime(*(void *)&v56);
      unint64_t v46 = *(void *)(v9 + 832);
    }
    if (*(void *)&v56 <= v46)
    {
      if (*(void *)&v56 < v46)
      {
        unint64_t v63 = vcvtps_u32_f32((float)*(unint64_t *)(v9 + 848) / *(float *)(v9 + 856));
        if (v46 < 3 || (uint8x8_t v64 = (uint8x8_t)vcnt_s8((int8x8_t)v46), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
        {
          unint64_t v63 = std::__next_prime(v63);
        }
        else
        {
          uint64_t v65 = 1 << -(char)__clz(v63 - 1);
          if (v63 >= 2) {
            unint64_t v63 = v65;
          }
        }
        if (*(void *)&v56 <= v63) {
          int8x8_t v56 = (int8x8_t)v63;
        }
        if (*(void *)&v56 >= v46)
        {
          unint64_t v46 = *(void *)(v9 + 832);
        }
        else
        {
          if (v56) {
            goto LABEL_108;
          }
          unint64_t v105 = *(void **)(v9 + 824);
          *(void *)(v9 + 824) = 0;
          if (v105) {
            operator delete(v105);
          }
          unint64_t v46 = 0;
          *(void *)(v9 + 832) = 0;
        }
      }
    }
    else
    {
LABEL_108:
      if (*(void *)&v56 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v57 = operator new(8 * *(void *)&v56);
      int v58 = *(void **)(v9 + 824);
      *(void *)(v9 + 824) = v57;
      if (v58) {
        operator delete(v58);
      }
      uint64_t v59 = 0;
      *(int8x8_t *)(v9 + 832) = v56;
      do
        *(void *)(*(void *)(v9 + 824) + 8 * v59++) = 0;
      while (*(void *)&v56 != v59);
      int v60 = *(void **)(v9 + 840);
      if (v60)
      {
        unint64_t v61 = v60[1];
        uint8x8_t v62 = (uint8x8_t)vcnt_s8(v56);
        v62.i16[0] = vaddlv_u8(v62);
        if (v62.u32[0] > 1uLL)
        {
          if (v61 >= *(void *)&v56) {
            v61 %= *(void *)&v56;
          }
        }
        else
        {
          v61 &= *(void *)&v56 - 1;
        }
        *(void *)(*(void *)(v9 + 824) + 8 * v61) = v9 + 840;
        size_t v66 = (void *)*v60;
        if (*v60)
        {
          do
          {
            unint64_t v67 = v66[1];
            if (v62.u32[0] > 1uLL)
            {
              if (v67 >= *(void *)&v56) {
                v67 %= *(void *)&v56;
              }
            }
            else
            {
              v67 &= *(void *)&v56 - 1;
            }
            if (v67 != v61)
            {
              uint64_t v68 = *(void *)(v9 + 824);
              if (!*(void *)(v68 + 8 * v67))
              {
                *(void *)(v68 + 8 * v67) = v60;
                goto LABEL_133;
              }
              *int v60 = *v66;
              *size_t v66 = **(void **)(*(void *)(v9 + 824) + 8 * v67);
              **(void **)(*(void *)(v9 + 824) + 8 * v67) = v66;
              size_t v66 = v60;
            }
            unint64_t v67 = v61;
LABEL_133:
            int v60 = v66;
            size_t v66 = (void *)*v66;
            unint64_t v61 = v67;
          }
          while (v66);
        }
      }
      unint64_t v46 = (unint64_t)v56;
    }
    if ((v46 & (v46 - 1)) != 0)
    {
      if (v45 >= v46) {
        a5 = v45 % v46;
      }
      else {
        a5 = v45;
      }
    }
    else
    {
      a5 = (v46 - 1) & v45;
    }
  }
  uint64_t v69 = *(void *)(v9 + 824);
  int v70 = *(void **)(v69 + 8 * a5);
  if (v70)
  {
    *unint64_t i = *v70;
    goto LABEL_150;
  }
  *unint64_t i = *(void *)(v9 + 840);
  *(void *)(v9 + 840) = i;
  *(void *)(v69 + 8 * a5) = v9 + 840;
  if (*i)
  {
    unint64_t v71 = *(void *)(*i + 8);
    if ((v46 & (v46 - 1)) != 0)
    {
      if (v71 >= v46) {
        v71 %= v46;
      }
    }
    else
    {
      v71 &= v46 - 1;
    }
    int v70 = (void *)(*(void *)(v9 + 824) + 8 * v71);
LABEL_150:
    void *v70 = i;
  }
  ++*(void *)(v9 + 848);
LABEL_152:
  i[3] = a2;
  std::string::operator=((std::string *)(a2 + 32), a3);
  unint64_t v72 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 32);
  unint64_t v73 = v72;
  unint64_t v74 = *(void *)(v9 + 792);
  if (v74)
  {
    uint8x8_t v75 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
    v75.i16[0] = vaddlv_u8(v75);
    unint64_t v76 = v75.u32[0];
    if (v75.u32[0] > 1uLL)
    {
      unint64_t v10 = v72;
      if (v72 >= v74) {
        unint64_t v10 = v72 % v74;
      }
    }
    else
    {
      unint64_t v10 = (v74 - 1) & v72;
    }
    uint64_t v77 = *(void ***)(*(void *)(v9 + 784) + 8 * v10);
    if (v77)
    {
      AudioStreamBasicDescription v78 = (char *)*v77;
      if (*v77)
      {
        do
        {
          unint64_t v79 = *((void *)v78 + 1);
          if (v79 == v73)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v78 + 16, (unsigned __int8 *)(a2 + 32)))
            {
              goto LABEL_228;
            }
          }
          else
          {
            if (v76 > 1)
            {
              if (v79 >= v74) {
                v79 %= v74;
              }
            }
            else
            {
              v79 &= v74 - 1;
            }
            if (v79 != v10) {
              break;
            }
          }
          AudioStreamBasicDescription v78 = *(char **)v78;
        }
        while (v78);
      }
    }
  }
  AudioStreamBasicDescription v78 = (char *)operator new(0x30uLL);
  *(void *)AudioStreamBasicDescription v78 = 0;
  *((void *)v78 + 1) = v73;
  unint64_t v80 = (std::string *)(v78 + 16);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v80, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&v80->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 32);
    *((void *)v78 + 4) = *(void *)(a2 + 48);
  }
  BOOL v81 = (void *)(v9 + 800);
  *((void *)v78 + 5) = 0;
  float v82 = (float)(unint64_t)(*(void *)(v9 + 808) + 1);
  float v83 = *(float *)(v9 + 816);
  if (!v74 || (float)(v83 * (float)v74) < v82)
  {
    BOOL v84 = 1;
    if (v74 >= 3) {
      BOOL v84 = (v74 & (v74 - 1)) != 0;
    }
    unint64_t v85 = v84 | (2 * v74);
    unint64_t v86 = vcvtps_u32_f32(v82 / v83);
    if (v85 <= v86) {
      int8x8_t v87 = (int8x8_t)v86;
    }
    else {
      int8x8_t v87 = (int8x8_t)v85;
    }
    if (*(void *)&v87 == 1)
    {
      int8x8_t v87 = (int8x8_t)2;
    }
    else if ((*(void *)&v87 & (*(void *)&v87 - 1)) != 0)
    {
      int8x8_t v87 = (int8x8_t)std::__next_prime(*(void *)&v87);
    }
    unint64_t v74 = *(void *)(v9 + 792);
    if (*(void *)&v87 <= v74)
    {
      if (*(void *)&v87 < v74)
      {
        unint64_t v94 = vcvtps_u32_f32((float)*(unint64_t *)(v9 + 808) / *(float *)(v9 + 816));
        if (v74 < 3 || (uint8x8_t v95 = (uint8x8_t)vcnt_s8((int8x8_t)v74), v95.i16[0] = vaddlv_u8(v95), v95.u32[0] > 1uLL))
        {
          unint64_t v94 = std::__next_prime(v94);
        }
        else
        {
          uint64_t v96 = 1 << -(char)__clz(v94 - 1);
          if (v94 >= 2) {
            unint64_t v94 = v96;
          }
        }
        if (*(void *)&v87 <= v94) {
          int8x8_t v87 = (int8x8_t)v94;
        }
        if (*(void *)&v87 >= v74)
        {
          unint64_t v74 = *(void *)(v9 + 792);
        }
        else
        {
          if (v87) {
            goto LABEL_184;
          }
          unint64_t v106 = *(void **)(v9 + 784);
          *(void *)(v9 + 784) = 0;
          if (v106) {
            operator delete(v106);
          }
          unint64_t v74 = 0;
          *(void *)(v9 + 792) = 0;
        }
      }
    }
    else
    {
LABEL_184:
      if (*(void *)&v87 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v88 = operator new(8 * *(void *)&v87);
      BOOL v89 = *(void **)(v9 + 784);
      *(void *)(v9 + 784) = v88;
      if (v89) {
        operator delete(v89);
      }
      uint64_t v90 = 0;
      *(int8x8_t *)(v9 + 792) = v87;
      do
        *(void *)(*(void *)(v9 + 784) + 8 * v90++) = 0;
      while (*(void *)&v87 != v90);
      v91 = (void *)*v81;
      if (*v81)
      {
        unint64_t v92 = v91[1];
        uint8x8_t v93 = (uint8x8_t)vcnt_s8(v87);
        v93.i16[0] = vaddlv_u8(v93);
        if (v93.u32[0] > 1uLL)
        {
          if (v92 >= *(void *)&v87) {
            v92 %= *(void *)&v87;
          }
        }
        else
        {
          v92 &= *(void *)&v87 - 1;
        }
        *(void *)(*(void *)(v9 + 784) + 8 * v92) = v81;
        v97 = (void *)*v91;
        if (*v91)
        {
          do
          {
            unint64_t v98 = v97[1];
            if (v93.u32[0] > 1uLL)
            {
              if (v98 >= *(void *)&v87) {
                v98 %= *(void *)&v87;
              }
            }
            else
            {
              v98 &= *(void *)&v87 - 1;
            }
            if (v98 != v92)
            {
              uint64_t v99 = *(void *)(v9 + 784);
              if (!*(void *)(v99 + 8 * v98))
              {
                *(void *)(v99 + 8 * v98) = v91;
                goto LABEL_209;
              }
              void *v91 = *v97;
              void *v97 = **(void **)(*(void *)(v9 + 784) + 8 * v98);
              **(void **)(*(void *)(v9 + 784) + 8 * v98) = v97;
              v97 = v91;
            }
            unint64_t v98 = v92;
LABEL_209:
            v91 = v97;
            v97 = (void *)*v97;
            unint64_t v92 = v98;
          }
          while (v97);
        }
      }
      unint64_t v74 = (unint64_t)v87;
    }
    if ((v74 & (v74 - 1)) != 0)
    {
      if (v73 >= v74) {
        unint64_t v10 = v73 % v74;
      }
      else {
        unint64_t v10 = v73;
      }
    }
    else
    {
      unint64_t v10 = (v74 - 1) & v73;
    }
  }
  uint64_t v100 = *(void *)(v9 + 784);
  unint64_t v101 = *(void **)(v100 + 8 * v10);
  if (v101)
  {
    *(void *)AudioStreamBasicDescription v78 = *v101;
    goto LABEL_226;
  }
  *(void *)AudioStreamBasicDescription v78 = *v81;
  *BOOL v81 = v78;
  *(void *)(v100 + 8 * v10) = v81;
  if (*(void *)v78)
  {
    unint64_t v102 = *(void *)(*(void *)v78 + 8);
    if ((v74 & (v74 - 1)) != 0)
    {
      if (v102 >= v74) {
        v102 %= v74;
      }
    }
    else
    {
      v102 &= v74 - 1;
    }
    unint64_t v101 = (void *)(*(void *)(v9 + 784) + 8 * v102);
LABEL_226:
    *unint64_t v101 = v78;
  }
  ++*(void *)(v9 + 808);
LABEL_228:
  *((void *)v78 + 5) = a2;
  if (((*(void *)(a2 + 96) - *(void *)(a2 + 88)) & 0x1FFFFFFFE0) == 0) {
    std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>(v9 + 328, a2, a2);
  }
  uint64_t v103 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 248))(a2);
  if (v103) {
    std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>((float *)(v9 + 368), v103, v103);
  }
  unint64_t v104 = *(uint64_t (**)(unint64_t))(*(void *)a2 + 560);
  return v104(a2);
}

void sub_18FEE43C4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

char *DSPGraph::Box::isogroupTraceOutputs(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)result + 11);
  uint64_t v4 = *((void *)result + 12);
  if (v3 != v4)
  {
    uint8x8_t v7 = result;
    unint64_t v8 = (float *)(a3 + 136);
    do
    {
      if (!(*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3))
      {
        std::string::basic_string[abi:ne180100]<0>(v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(v16, "isogroupTraceOutputs");
        uint64_t v13 = v7 + 32;
        if (v7[55] < 0) {
          uint64_t v13 = (void *)*v13;
        }
        uint64_t v14 = (*(uint64_t (**)(char *))(*(void *)v7 + 16))(v7);
        DSPGraph::strprintf((DSPGraph *)"box %s %s output port is not connected.", v15, v13, v14);
      }
      uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
      for (unint64_t i = (void *)*((void *)result + 4); i; unint64_t i = (void *)*i)
      {
        uint64_t v10 = *(void *)(i[2] + 8);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 272))(v10);
        if (v11)
        {
          unint64_t v12 = v11;
          std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>(v8, v12, v12);
          *(void *)(v12 + 848) = a3;
        }
        uint64_t result = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 416))(v10, a2, a3);
      }
      v3 += 32;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_18FEE45F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::isogroupTraceInputs(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 64);
  uint64_t v4 = *(void *)(result + 72);
  if (v3 != v4)
  {
    uint8x8_t v7 = (char *)result;
    unint64_t v8 = (float *)(a3 + 96);
    uint64_t v9 = *(void *)(result + 64);
    do
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      if (!v10)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(v17, "isogroupTraceInputs");
        uint64_t v14 = v7 + 32;
        if (v7[55] < 0) {
          uint64_t v14 = (void *)*v14;
        }
        uint64_t v15 = (*(uint64_t (**)(char *))(*(void *)v7 + 16))(v7);
        DSPGraph::strprintf((DSPGraph *)"box %s %s input port is not connected.", v16, v14, v15);
      }
      uint64_t v11 = *(void *)(*(void *)(v10 + 8) + 8);
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 272))(v11);
      if (v12)
      {
        uint64_t v13 = (void *)v12;
        std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>(v8, (unint64_t)v13, (uint64_t)v13);
        v13[107] = a3;
        uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v13 + 432))(v13, a2, a3);
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 416))(v11, a2, a3);
      }
      v9 += 32;
      v3 += 32;
    }
    while (v9 != v4);
  }
  return result;
}

void sub_18FEE4840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::asOperativeFCBox(DSPGraph::Box *this)
{
  return 0;
}

void *DSPGraph::Box::isogroup(DSPGraph::Box *a1, uint64_t a2, DSPGraph::IsoGroup *a3)
{
  uint64_t result = std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>(*(void *)a2, *(void *)(a2 + 8), (unint64_t)a1);
  if (!result)
  {
    std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box *>(a2, (unint64_t)a1, (uint64_t)a1);
    DSPGraph::IsoGroup::add(a3, a1);
    (*(void (**)(DSPGraph::Box *, uint64_t, DSPGraph::IsoGroup *))(*(void *)a1 + 424))(a1, a2, a3);
    uint8x8_t v7 = *(uint64_t (**)(DSPGraph::Box *, uint64_t, DSPGraph::IsoGroup *))(*(void *)a1 + 432);
    return (void *)v7(a1, a2, a3);
  }
  return result;
}

void *std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= a2) {
      unint64_t v7 = v5 % a2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (a2 - 1);
  }
  unint64_t v8 = *(void **)(a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2) {
            v10 %= a2;
          }
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box *>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = (void *)*v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v14 = *v22;
LABEL_38:
    *unint64_t v22 = v14;
    goto LABEL_39;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_18FEE4C9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::IsoGroup::add(DSPGraph::IsoGroup *this, DSPGraph::Box *a2)
{
  std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>((uint64_t)this + 16, (unint64_t)a2, (uint64_t)a2);
  *((void *)a2 + 2) = this;
  if (((*((void *)a2 + 12) - *((void *)a2 + 11)) & 0x1FFFFFFFE0) == 0
    || (*(uint64_t (**)(DSPGraph::Box *))(*(void *)a2 + 272))(a2))
  {
    std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>((uint64_t)this + 56, (unint64_t)a2, (uint64_t)a2);
  }
  uint64_t v4 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)a2 + 232))(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    unint64_t v7 = (uint64_t *)*((void *)this + 23);
    unint64_t v6 = *((void *)this + 24);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v14 = *((void *)this + 22);
      uint64_t v15 = ((uint64_t)v7 - v14) >> 3;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v6 - v14;
      uint64_t v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
        uint64_t v17 = v15 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v18);
      }
      else {
        uint64_t v19 = 0;
      }
      unint64_t v26 = (uint64_t *)(v18 + 8 * v15);
      unint64_t v27 = v18 + 8 * v19;
      uint64_t *v26 = v5;
      unint64_t v8 = v26 + 1;
      uint64_t v29 = (char *)*((void *)this + 22);
      size_t v28 = (char *)*((void *)this + 23);
      if (v28 != v29)
      {
        do
        {
          uint64_t v30 = *((void *)v28 - 1);
          v28 -= 8;
          *--unint64_t v26 = v30;
        }
        while (v28 != v29);
        size_t v28 = (char *)*((void *)this + 22);
      }
      *((void *)this + 22) = v26;
      *((void *)this + 23) = v8;
      *((void *)this + 24) = v27;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *unint64_t v7 = v4;
      unint64_t v8 = v7 + 1;
    }
    *((void *)this + 23) = v8;
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)a2 + 240))(a2);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v12 = (uint64_t *)*((void *)this + 26);
      unint64_t v11 = *((void *)this + 27);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v20 = *((void *)this + 25);
        uint64_t v21 = ((uint64_t)v12 - v20) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v11 - v20;
        uint64_t v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
          uint64_t v23 = v21 + 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v31 = (uint64_t *)(v24 + 8 * v21);
        unint64_t v32 = v24 + 8 * v25;
        *uint64_t v31 = v10;
        unint64_t v13 = v31 + 1;
        uint8x8_t v34 = (char *)*((void *)this + 25);
        uint8x8_t v33 = (char *)*((void *)this + 26);
        if (v33 != v34)
        {
          do
          {
            uint64_t v35 = *((void *)v33 - 1);
            v33 -= 8;
            *--uint64_t v31 = v35;
          }
          while (v33 != v34);
          uint8x8_t v33 = (char *)*((void *)this + 25);
        }
        *((void *)this + 25) = v31;
        *((void *)this + 26) = v13;
        *((void *)this + 27) = v32;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        uint64_t *v12 = v9;
        unint64_t v13 = v12 + 1;
      }
      *((void *)this + 26) = v13;
    }
  }
}

void std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = (void *)*v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v14 = *v22;
LABEL_38:
    *uint64_t v22 = v14;
    goto LABEL_39;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_18FEE510C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::asGraphInput(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asGraphOutput(DSPGraph::Box *this)
{
  return 0;
}

unint64_t DSPGraph::Graph::generateSerialNumber(DSPGraph::Graph *this)
{
  {
    std::random_device::random_device[abi:ne180100](&v5);
    unsigned int v4 = MEMORY[0x192FC85F0](&v5);
    DSPGraph::Graph::generateSerialNumber(void)::sSerialNo = DSPGraph::intPtrHash((DSPGraph *)v4);
    std::random_device::~random_device(&v5);
  }
  std::mutex::lock(&DSPGraph::Graph::generateSerialNumber(void)::sSerialNoLock);
  unint64_t v1 = atomic_load((unint64_t *)&DSPGraph::Graph::generateSerialNumber(void)::sSerialNo);
  atomic_store(v1 + 1 + (((v1 + 1) / 0x7FFFFFFFFFFFFFFFLL) | (((v1 + 1) / 0x7FFFFFFFFFFFFFFFLL) << 63)), (unint64_t *)&DSPGraph::Graph::generateSerialNumber(void)::sSerialNo);
  unint64_t v2 = atomic_load((unint64_t *)&DSPGraph::Graph::generateSerialNumber(void)::sSerialNo);
  std::mutex::unlock(&DSPGraph::Graph::generateSerialNumber(void)::sSerialNoLock);
  return v2;
}

void sub_18FEE51FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
}

uint64_t DSPGraph::Box::asFCBox(DSPGraph::Box *this)
{
  return 0;
}

void DSPGraph::Box::Box(DSPGraph::Box *this, unsigned int a2, unsigned int a3)
{
  *((_OWORD *)this + 4) = 0u;
  unint64_t v43 = (uint64_t *)((char *)this + 64);
  *((_OWORD *)this + 7) = 0u;
  *(void *)this = &unk_1EDF9C208;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 36) = 1065353216;
  *((void *)this + 31) = 850045863;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  os_unfair_lock_lock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  if (qword_1E9299090)
  {
    unint64_t v6 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1E9299090);
    if (v6)
    {
      unint64_t v7 = v6;
      uint64_t p_shared_owners = qword_1E9299088;
      if (qword_1E9299088) {
        goto LABEL_9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  unint64_t v7 = (std::__shared_weak_count *)operator new(0x1A0uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  *(_OWORD *)&v7[1].__shared_owners_ = 0u;
  uint64_t p_shared_owners = (uint64_t)&v7[1].__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2A80;
  v7[2].std::__shared_count = 0u;
  *(_OWORD *)&v7[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v7[3].__shared_owners_ = 0u;
  v7[4].std::__shared_count = 0u;
  *(_OWORD *)&v7[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v7[5].__shared_owners_ = 0u;
  v7[6].std::__shared_count = 0u;
  *(_OWORD *)&v7[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v7[7].__shared_owners_ = 0u;
  v7[8].std::__shared_count = 0u;
  *(_OWORD *)&v7[8].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v7[9].__shared_owners_ = 0u;
  v7[10].std::__shared_count = 0u;
  *(_OWORD *)&v7[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v7[11].__shared_owners_ = 0u;
  v7[12].std::__shared_count = 0u;
  *(_OWORD *)&v7[12].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v7[13].__shared_owners_ = 0u;
  v7[14].std::__shared_count = 0u;
  *(_OWORD *)&v7[14].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v7[15].__shared_owners_ = 0u;
  v7[16].std::__shared_count = 0u;
  *(_OWORD *)&v7[16].__shared_weak_owners_ = 0u;
  uint64_t v9 = caulk::alloc::global_page_cache::instance((caulk::alloc::global_page_cache *)v7);
  v7[3].__shared_owners_ = 0;
  v7[1].__shared_weak_owners_ = v9 + 16;
  v7[2].__vftable = 0;
  v7[2].__shared_owners_ = 0;
  v7[2].__shared_weak_owners_ = 0;
  uint64_t v10 = 96;
  LODWORD(v7[3].__vftable) = 0;
  do
  {
    unint64_t v11 = (std::__shared_weak_count_vtbl **)((char *)&v7->__vftable + v10);
    *unint64_t v11 = 0;
    v11[1] = 0;
    int v11[2] = 0;
    v10 += 32;
  }
  while (v10 != 416);
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = (std::__shared_weak_count *)qword_1E9299090;
  qword_1E9299088 = (uint64_t)&v7[1].__shared_owners_;
  qword_1E9299090 = (uint64_t)v7;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 72) = p_shared_owners;
  unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 73);
  *((void *)this + 73) = v7;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  *((void *)this + 74) = &caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<unsigned int,DSPGraph::Analyzer *>::layout_vk const&>::empty;
  caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine();
  uint64_t v14 = 0;
  float v15 = (void *)((char *)this + 88);
  *((void *)this + 42) = 0;
  *((_DWORD *)this + 87) = 167837706;
  *((_DWORD *)this + 86) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 44) = 0;
  do
  {
    atomic_store(0, (unint64_t *)((char *)this + v14 + 360));
    atomic_store(0, (unint64_t *)((char *)this + v14 + 368));
    v14 += 16;
  }
  while (v14 != 160);
  *((void *)this + 65) = 0;
  *((_DWORD *)this + 133) = 16908289;
  *((_DWORD *)this + 132) = -1;
  *((void *)this + 67) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 68) = 0;
  atomic_store(0, (unint64_t *)this + 68);
  atomic_store(0, (unint64_t *)this + 69);
  for (uint64_t i = 360; i != 520; i += 16)
    atomic_store((unint64_t)this + 520, (unint64_t *)((char *)this + i));
  __dmb(0xBu);
  unint64_t v18 = (unint64_t *)((char *)this + 80);
  uint64_t v17 = *((void *)this + 10);
  *((void *)this + 83) = 0;
  *((void *)this + 84) = 850045863;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_WORD *)this + 372) = 1;
  *((unsigned char *)this + 746) = 0;
  *((unsigned char *)this + 752) = 0;
  *((unsigned char *)this + 760) = 0;
  *((_DWORD *)this + 192) = 0;
  uint64_t v19 = *((void *)this + 8);
  if (a2 > (unint64_t)((v17 - v19) >> 5))
  {
    uint64_t v20 = *((void *)this + 9);
    int64x2_t v48 = (char *)this + 80;
    uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(a2);
    unint64_t v45 = &v44[v20 - v19];
    unint64_t v46 = v45;
    uint8x8_t v47 = &v44[32 * v21];
    std::vector<DSPGraph::InputPort>::__swap_out_circular_buffer(v43, &v44);
    std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer((uint64_t)&v44);
  }
  uint64_t v22 = (unint64_t *)((char *)this + 104);
  uint64_t v23 = *((void *)this + 11);
  if (a3 > (unint64_t)((*((void *)this + 13) - v23) >> 5))
  {
    uint64_t v24 = *((void *)this + 12);
    int64x2_t v48 = (char *)this + 104;
    uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(a3);
    unint64_t v45 = &v44[v24 - v23];
    unint64_t v46 = v45;
    uint8x8_t v47 = &v44[32 * v25];
    std::vector<DSPGraph::OutputPort>::__swap_out_circular_buffer((uint64_t *)this + 11, &v44);
    std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer((uint64_t)&v44);
  }
  if (a2)
  {
    int v26 = 0;
    unint64_t v27 = *((void *)this + 9);
    do
    {
      if (v27 >= *v18)
      {
        uint64_t v28 = (uint64_t)(v27 - *v43) >> 5;
        if ((unint64_t)(v28 + 1) >> 59) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = *v18 - *v43;
        uint64_t v30 = v29 >> 4;
        if (v29 >> 4 <= (unint64_t)(v28 + 1)) {
          uint64_t v30 = v28 + 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        int64x2_t v48 = (char *)this + 80;
        unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v31);
        uint8x8_t v33 = &v32[32 * v28];
        uint64_t v44 = v32;
        unint64_t v45 = v33;
        uint8x8_t v47 = &v32[32 * v34];
        *((void *)v33 + 1) = this;
        *((void *)v33 + 2) = 0;
        *((_DWORD *)v33 + 6) = v26;
        *((_DWORD *)v33 + 7) = 0;
        *(void *)uint8x8_t v33 = &unk_1EDF9E198;
        unint64_t v46 = v33 + 32;
        std::vector<DSPGraph::InputPort>::__swap_out_circular_buffer(v43, &v44);
        unint64_t v27 = *((void *)this + 9);
        std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer((uint64_t)&v44);
      }
      else
      {
        *(void *)(v27 + 8) = this;
        *(void *)(v27 + 16) = 0;
        *(_DWORD *)(v27 + 24) = v26;
        *(_DWORD *)(v27 + 28) = 0;
        *(void *)unint64_t v27 = &unk_1EDF9E198;
        v27 += 32;
        *((void *)this + 9) = v27;
      }
      *((void *)this + 9) = v27;
      ++v26;
    }
    while (a2 != v26);
  }
  if (a3)
  {
    int v35 = 0;
    unint64_t v36 = *((void *)this + 12);
    do
    {
      if (v36 >= *v22)
      {
        uint64_t v37 = (uint64_t)(v36 - *v15) >> 5;
        if ((unint64_t)(v37 + 1) >> 59) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = *v22 - *v15;
        uint64_t v39 = v38 >> 4;
        if (v38 >> 4 <= (unint64_t)(v37 + 1)) {
          uint64_t v39 = v37 + 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        int64x2_t v48 = (char *)this + 104;
        if (v40) {
          unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v40);
        }
        else {
          uint64_t v41 = 0;
        }
        unint64_t v42 = v40 + 32 * v37;
        uint64_t v44 = (char *)v40;
        unint64_t v45 = (char *)v42;
        uint8x8_t v47 = (char *)(v40 + 32 * v41);
        *(void *)(v42 + 8) = this;
        *(void *)(v42 + 16) = 0;
        *(_DWORD *)(v42 + 24) = v35;
        *(void *)unint64_t v42 = &unk_1EDF96F28;
        unint64_t v46 = (char *)(v42 + 32);
        std::vector<DSPGraph::OutputPort>::__swap_out_circular_buffer((uint64_t *)this + 11, &v44);
        unint64_t v36 = *((void *)this + 12);
        std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer((uint64_t)&v44);
      }
      else
      {
        *(void *)(v36 + 8) = this;
        *(void *)(v36 + 16) = 0;
        *(_DWORD *)(v36 + 24) = v35;
        *(void *)unint64_t v36 = &unk_1EDF96F28;
        v36 += 32;
        *((void *)this + 12) = v36;
      }
      *((void *)this + 12) = v36;
      ++v35;
    }
    while (a3 != v35);
  }
  operator new();
}

void sub_18FEE5848(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  uint64_t v23 = *(std::__shared_weak_count **)(v19 + 584);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  __clang_call_terminate(a1);
}

void sub_18FEE589C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19)
{
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100](a17, 0);
  std::mutex::~mutex(a9);
  std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100]((void *)(v20 + 560));
  caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::clear(a10);
  caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::~node_allocator(v19 + 560);
  a19 = a11;
  std::vector<std::unique_ptr<DSPGraph::Analyzer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::mutex::~mutex(a14);
  a19 = a12;
  std::vector<std::unique_ptr<DSPGraph::Analyzer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = a15;
  std::vector<std::unique_ptr<DSPGraph::Analyzer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = a13;
  std::vector<DSPGraph::PropertyTap>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  uint64_t v22 = *(void **)(v19 + 152);
  if (v22)
  {
    *(void *)(v19 + 160) = v22;
    operator delete(v22);
  }
  std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = a18;
  std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (*(char *)(v19 + 55) < 0) {
    operator delete(*(void **)(v19 + 32));
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::~lf_read_synchronized_write(v2 + 64);
    caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::~lf_read_synchronized_write(v2);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::lf_read_synchronized_write(caulk::concurrent::details::lf_read_sync_write_impl *a1)
{
  uint64_t result = caulk::concurrent::details::lf_read_sync_write_impl::lf_read_sync_write_impl(a1);
  *(_WORD *)(result + 8) = 1;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

uint64_t std::__split_buffer<DSPGraph::OutputPort>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unsigned int v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine()
{
  {
    caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::multi_simple_random((uint64_t)&caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine);
  }
}

void sub_18FEE5B04(_Unwind_Exception *a1)
{
}

uint64_t *std::vector<DSPGraph::InputPort>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 32) = &unk_1EDF9C4D0;
      long long v7 = *(_OWORD *)(v2 + v5 - 24);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 24) = v7;
      *(void *)(v6 - 32) = &unk_1EDF9E198;
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v2 + v5 - 4);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t *std::vector<DSPGraph::OutputPort>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 != *result)
  {
    uint64_t v5 = v4 - 32;
    do
    {
      *(void *)(v4 - 32) = &unk_1EDF9C4D0;
      v4 -= 32;
      long long v6 = *(_OWORD *)(v3 - 24);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v3 - 8);
      *(_OWORD *)(v4 + 8) = v6;
      *(void *)uint64_t v4 = &unk_1EDF96F28;
      v5 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

BOOL DSPGraph::Interpreter::parseCompDesc(DSPGraph::Interpreter *this, const char **a2, AudioComponentDescription *a3)
{
  DSPGraph::skipspace(this, a2);
  float v16 = *(char **)this;
  DSPGraph::skipspace((DSPGraph *)&v16, v5);
  int v6 = *v16;
  if (v6 == 40)
  {
    ++v16;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v16, a2, (unsigned int *)1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v14, "parseCompDesc");
      std::string::basic_string[abi:ne180100]<0>(&v13, "expected component type or subtype");
      DSPGraph::ThrowException(1886548769, &v15, 499, &v14, &v13);
    }
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v16, (const char **)((char *)a2 + 4), (unsigned int *)1) & 1) == 0)
    {
      int v7 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 1635083896;
      *((_DWORD *)a2 + 1) = v7;
    }
    uint64_t v8 = a2 + 1;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v16, v8, (unsigned int *)1) & 1) == 0) {
      *(_DWORD *)uint64_t v8 = 1634758764;
    }
    DSPGraph::skipspace((DSPGraph *)&v16, v9);
    uint64_t v10 = v16;
    if (*v16 != 41)
    {
      std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v14, "parseCompDesc");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of component description, got '%c'", v12, *v10);
    }
    *(void *)this = v16 + 1;
  }
  return v6 == 40;
}

void sub_18FEE5E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parse4cc(DSPGraph::Interpreter *this, const char **a2, unsigned int *a3)
{
  int v3 = (int)a3;
  DSPGraph::skipspace(this, a2);
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = MEMORY[0x1E4F14390];
    while (1)
    {
      int v8 = DSPGraph::is4ccChar(*(char *)(*(void *)this + v6));
      uint64_t v10 = *(unsigned __int8 **)this;
      if (!v8) {
        break;
      }
      unsigned int v11 = (char)v10[v6];
      if ((v11 & 0x80000000) != 0) {
        int v12 = __maskrune(v11, 0x100uLL);
      }
      else {
        int v12 = *(_DWORD *)(v7 + 4 * v11 + 60) & 0x100;
      }
      ++v6;
      if (v12) {
        goto LABEL_15;
      }
    }
    unint64_t v19 = 0;
    uint64_t v20 = v10;
    if (DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v20, (const char **)&v19, v9))
    {
      int v13 = v19;
      if (!HIDWORD(v19))
      {
        long long v14 = v20;
LABEL_20:
        *(_DWORD *)a2 = v13;
        *(void *)this = v14;
        return 1;
      }
    }
  }
  else if ((**(char **)this & 0x80000000) == 0 {
         && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * **(unsigned __int8 **)this + 60) & 0x400) != 0)
  }
  {
    return 0;
  }
LABEL_15:
  uint64_t v15 = 0;
  int v13 = 0;
  uint64_t v16 = *(void *)this;
  while (1)
  {
    unsigned __int8 v17 = *(unsigned char *)(v16 + v15);
    uint64_t result = DSPGraph::is4ccChar((char)v17);
    if (!result) {
      return result;
    }
    int v13 = v17 | (v13 << 8);
    if (++v15 == 4)
    {
      long long v14 = (unsigned __int8 *)(v16 + 4);
      if ((DSPGraph::is4ccChar(*(char *)(v16 + 4)) & 1) == 0) {
        goto LABEL_20;
      }
      return 0;
    }
  }
}

uint64_t DSPGraph::is4ccChar(unsigned int this)
{
  if (this >= 0x80)
  {
    uint64_t result = __maskrune(this, 0x40000uLL);
    if (!result) {
      return result;
    }
    if (!__maskrune(this, 0x4000uLL)) {
      return memchr("()[]{}\";", this, 9uLL) == 0;
    }
    return 0;
  }
  int v3 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * this + 60);
  if ((v3 & 0x40000) == 0 || (v3 & 0x4000) != 0) {
    return 0;
  }
  return memchr("()[]{}\";", this, 9uLL) == 0;
}

uint64_t std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3)
{
  int v5 = a2;
  int v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

unint64_t DSPGraph::Graph::add(uint64_t a1, unint64_t a2, const std::string *a3)
{
  if (*(unsigned char *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "add");
    std::string::basic_string[abi:ne180100]<0>(&v5, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v7, 992, &v6, &v5);
  }
  DSPGraph::Graph::addBox(a1, a2, a3, 0, 0);
  return a2;
}

void sub_18FEE611C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::Interpreter::parserInterleavedFlag(DSPGraph::Interpreter *this, const char **a2, BOOL *a3)
{
  DSPGraph::skipspace(this, a2);
  long long v5 = *(unsigned __int8 **)this;
  int v6 = **(unsigned __int8 **)this;
  if (**(unsigned char **)this)
  {
    if (**(unsigned __int8 **)this > 0x63u)
    {
      if (v6 != 100)
      {
        if (v6 != 105) {
          goto LABEL_5;
        }
LABEL_8:
        *(unsigned char *)a2 = 1;
LABEL_10:
        *(void *)this = v5 + 1;
        return v6 != 0;
      }
    }
    else if (v6 != 68)
    {
      if (v6 != 73)
      {
LABEL_5:
        *(unsigned char *)a2 = 0;
        return v6 != 0;
      }
      goto LABEL_8;
    }
    *(unsigned char *)a2 = 0;
    goto LABEL_10;
  }
  return v6 != 0;
}

void _ZNSt3__110__function6__funcIZZN8DSPGraph14NewBoxRegistryC1EvENK3__0clIPKciNS2_14CalculationBox14OperatorDomainENS8_16OperatorCodomainENS8_8OperatorEEEDaT_T0_T1_T2_T3_EUljjE_NS_9allocatorISI_EEFPNS2_3BoxEjjEEclEOjSP_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!*a2)
  {
    if (!*a3) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "operator()");
    caulk::make_string((caulk *)"wrong number of output for '%s' box (must be 0)", (uint64_t)&v4, *(void *)(a1 + 8));
    DSPGraph::ThrowException(1701602593, &v6, 1683, &v5, &v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v5, "operator()");
  caulk::make_string((caulk *)"wrong number of inputs for '%s' box (must be 0)", (uint64_t)&v4, *(void *)(a1 + 8));
  DSPGraph::ThrowException(1701602593, &v6, 1679, &v5, &v4);
}

void sub_18FEE63AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_18FEE6490(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C40614663B3);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_18FEE651C(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C40614663B3);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for DBGainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1501, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for DBGainBox. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1499, &v4, &v3);
}

void sub_18FEE6694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 2)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for arithmetic sum box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1474, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for arithmetic sum box. must be 2.");
  DSPGraph::ThrowException(1701602593, &v5, 1472, &v4, &v3);
}

void sub_18FEE6844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t *DSPGraph::Graph::setProperty(DSPGraph::Graph *this, unsigned int a2, uint64_t a3, const void *a4)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)this + 70, a2);
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "setProperty");
    std::string::basic_string[abi:ne180100]<0>(&v9, "setProperty : inPropertyID not found");
    DSPGraph::ThrowException(1852204065, &v11, 2242, &v10, &v9);
  }
  long long v7 = (unsigned int *)result[9];
  int v8 = (unsigned int *)result[10];
  while (v7 != v8)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void, void, void, void, uint64_t, const void *))(**(void **)v7 + 312))(*(void *)v7, v7[2], v7[3], v7[4], a3, a4);
    v7 += 6;
  }
  return result;
}

void sub_18FEE69D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseWireGraphPropertyCommand(DSPGraph::Interpreter *this, const char **a2)
{
  LODWORD(v9) = 0;
  if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)a2, (const char **)&v9, (unsigned int *)1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "parseWireGraphPropertyCommand");
    std::string::basic_string[abi:ne180100]<0>(&v5, "expected parameter ID in 'wireGraphProperty' command");
    DSPGraph::ThrowException(1886548769, &v7, 1056, &v6, &v5);
  }
  long long v7 = 0uLL;
  int v8 = 0;
  if (!DSPGraph::Interpreter::parsePropertyEndpoint((uint64_t)this, (DSPGraph *)a2, (uint64_t)&v7))
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "parseWireGraphPropertyCommand");
    std::string::basic_string[abi:ne180100]<0>(&v4, "expected endpoint in 'wireGraphProperty' command");
    DSPGraph::ThrowException(1886548769, &v6, 1061, &v5, &v4);
  }
  DSPGraph::Graph::connectProperty(*((void *)this + 1), v9, &v7);
}

void sub_18FEE6B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::connectProperty(uint64_t a1, unsigned int a2, long long *a3)
{
  if (*(unsigned char *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "connectProperty");
    std::string::basic_string[abi:ne180100]<0>(&v22, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v24, 2227, &v23, &v22);
  }
  long long v4 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)(a1 + 560), a2);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "connectProperty");
    std::string::basic_string[abi:ne180100]<0>(&v22, "connectProperty : inPropertyID not found");
    DSPGraph::ThrowException(1852204065, &v24, 2232, &v23, &v22);
  }
  long long v5 = v4;
  unint64_t v7 = v4[10];
  unint64_t v6 = v4[11];
  if (v7 >= v6)
  {
    uint64_t v10 = v4[9];
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v14 + 24 * v11;
    unint64_t v17 = v14 + 24 * v15;
    long long v18 = *a3;
    *(void *)(v16 + 16) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v16 = v18;
    unint64_t v9 = v16 + 24;
    uint64_t v20 = (char *)v5[9];
    unint64_t v19 = (char *)v5[10];
    if (v19 != v20)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 24);
        *(_DWORD *)(v16 - 8) = *((_DWORD *)v19 - 2);
        *(_OWORD *)(v16 - 24) = v21;
        v16 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)v5[9];
    }
    v5[9] = v16;
    v5[10] = v9;
    v5[11] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v8 = *a3;
    *(void *)(v7 + 16) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    unint64_t v9 = v7 + 24;
  }
  v5[10] = v9;
}

void sub_18FEE6DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::Interpreter::parsePropertyEndpoint(uint64_t a1, DSPGraph *this, uint64_t a3)
{
  DSPGraph::skipspace(this, (const char **)this);
  uint64_t v25 = *(char **)this;
  DSPGraph::skipspace((DSPGraph *)&v25, v6);
  int v7 = *v25;
  if (v7 == 40)
  {
    uint64_t v24 = 0;
    ++v25;
    v23[0] = 0;
    v23[1] = 0;
    if ((DSPGraph::Interpreter::parseString((DSPGraph *)&v25, (uint64_t)v23) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "parsePropertyEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v20, "expected box name for property endpoint");
      DSPGraph::ThrowException(1886548769, &v22, 694, (long long *)v21, &v20);
    }
    long long v8 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 784), (unsigned __int8 *)v23);
    if (!v8 || (uint64_t v9 = *((void *)v8 + 5)) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "parsePropertyEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v20, "property endpoint : box not found");
      DSPGraph::ThrowException(1852204065, &v22, 698, (long long *)v21, &v20);
    }
    HIDWORD(v19) = 0;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v25, (const char **)((char *)&v19 + 4), (unsigned int *)1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "parsePropertyEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v20, "expected property ID for property endpoint");
      DSPGraph::ThrowException(1886548769, &v22, 703, (long long *)v21, &v20);
    }
    LODWORD(v19) = 0;
    if (DSPGraph::Interpreter::parseScope((DSPGraph::Interpreter *)&v25, (const char **)&v19, v10)
      && (*(void *)&long long v22 = v25,
          v21[0] = 0,
          DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v22, (const char **)v21, v12))
      && (int v13 = (int)v21[0], !((unint64_t)v21[0] >> 32)))
    {
      uint64_t v25 = (char *)v22;
    }
    else
    {
      int v13 = 0;
    }
    DSPGraph::skipspace((DSPGraph *)&v25, v11);
    unint64_t v14 = v25;
    if (*v25 != 41)
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "parsePropertyEndpoint");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of property endpoint, got '%c'", v18, *v14);
    }
    int v16 = (int)v19;
    int v15 = HIDWORD(v19);
    *(void *)a3 = v9;
    *(_DWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 12) = v16;
    *(_DWORD *)(a3 + 16) = v13;
    *(void *)this = v14 + 1;
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[0]);
    }
  }
  return v7 == 40;
}

void sub_18FEE708C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::Interpreter::parseParamEndpoint(uint64_t a1, DSPGraph *this, uint64_t a3)
{
  DSPGraph::skipspace(this, (const char **)this);
  uint64_t v25 = *(char **)this;
  DSPGraph::skipspace((DSPGraph *)&v25, v6);
  int v7 = *v25;
  if (v7 == 40)
  {
    uint64_t v24 = 0;
    ++v25;
    v23[0] = 0;
    v23[1] = 0;
    if ((DSPGraph::Interpreter::parseString((DSPGraph *)&v25, (uint64_t)v23) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "parseParamEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v20, "expected box name for parameter endpoint");
      DSPGraph::ThrowException(1886548769, &v22, 653, (long long *)v21, &v20);
    }
    long long v8 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 784), (unsigned __int8 *)v23);
    if (!v8 || (uint64_t v9 = *((void *)v8 + 5)) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "parseParamEndpoint");
      std::operator+<char>();
      DSPGraph::ThrowException(1852204065, &v22, 657, (long long *)v21, &v20);
    }
    HIDWORD(v19) = 0;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v25, (const char **)((char *)&v19 + 4), (unsigned int *)1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "parseParamEndpoint");
      std::string::basic_string[abi:ne180100]<0>(&v20, "expected parameter ID for parameter endpoint");
      DSPGraph::ThrowException(1886548769, &v22, 662, (long long *)v21, &v20);
    }
    LODWORD(v19) = 0;
    if (DSPGraph::Interpreter::parseScope((DSPGraph::Interpreter *)&v25, (const char **)&v19, v10)
      && (*(void *)&long long v22 = v25,
          v21[0] = 0,
          DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v22, (const char **)v21, v12))
      && (int v13 = (int)v21[0], !((unint64_t)v21[0] >> 32)))
    {
      uint64_t v25 = (char *)v22;
    }
    else
    {
      int v13 = 0;
    }
    DSPGraph::skipspace((DSPGraph *)&v25, v11);
    unint64_t v14 = v25;
    if (*v25 != 41)
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v21, "parseParamEndpoint");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of param endpoint, got '%c'", v18, *v14);
    }
    int v16 = (int)v19;
    int v15 = HIDWORD(v19);
    *(void *)a3 = v9;
    *(_DWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 12) = v16;
    *(_DWORD *)(a3 + 16) = v13;
    *(void *)this = v14 + 1;
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[0]);
    }
  }
  return v7 == 40;
}

void sub_18FEE73C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parseScope(DSPGraph::Interpreter *this, const char **a2, unsigned int *a3)
{
  DSPGraph::skipspace(this, a2);
  uint64_t v38 = *(void **)this;
  uint64_t v39 = 0;
  std::string __p = v38;
  if (DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&__p, (const char **)&v39, v5)
    && !((unint64_t)v39 >> 32))
  {
    unint64_t v6 = __p;
    *(_DWORD *)a2 = v39;
    *(void *)this = v6;
    return 1;
  }
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v8 = DSPGraph::Interpreter::parseName((DSPGraph *)&v38, (uint64_t)&__p);
  char v9 = HIBYTE(v37);
  if (v8)
  {
    if (v37 >= 0) {
      uint64_t v10 = HIBYTE(v37);
    }
    else {
      uint64_t v10 = v36;
    }
    switch(v10)
    {
      case 2:
        p_p = &__p;
        if (v37 < 0) {
          p_p = __p;
        }
        if (*p_p != 28265) {
          goto LABEL_51;
        }
        goto LABEL_55;
      case 3:
        long long v22 = (unsigned __int16 *)&__p;
        if (v37 < 0) {
          long long v22 = (unsigned __int16 *)__p;
        }
        int v23 = *v22;
        int v24 = *((unsigned __int8 *)v22 + 2);
        if (v23 != 30063 || v24 != 116) {
          goto LABEL_51;
        }
        goto LABEL_38;
      case 4:
        unint64_t v12 = &__p;
        if (v37 < 0) {
          unint64_t v12 = __p;
        }
        if (*v12 != 1953653104) {
          goto LABEL_51;
        }
        int v13 = 4;
        goto LABEL_57;
      case 5:
        int v26 = (unsigned __int8 *)__p;
        unint64_t v27 = (unsigned __int8 *)&__p;
        if (v37 >= 0) {
          int v26 = (unsigned __int8 *)&__p;
        }
        int v28 = *(_DWORD *)v26;
        int v29 = v26[4];
        if (v28 == 1970302569 && v29 == 116)
        {
LABEL_55:
          int v13 = 1;
          goto LABEL_57;
        }
        if (v37 < 0) {
          unint64_t v27 = (unsigned __int8 *)__p;
        }
        int v31 = *(_DWORD *)v27;
        int v32 = v27[4];
        if (v31 != 1970238055 || v32 != 112) {
          goto LABEL_51;
        }
        int v13 = 3;
        goto LABEL_57;
      case 6:
        unint64_t v14 = (unsigned __int16 *)__p;
        int v15 = (unsigned __int16 *)&__p;
        if (v37 >= 0) {
          unint64_t v14 = (unsigned __int16 *)&__p;
        }
        int v16 = *(_DWORD *)v14;
        int v17 = v14[2];
        if (v16 == 1886680431 && v17 == 29813)
        {
LABEL_38:
          int v13 = 2;
        }
        else
        {
          uint64_t v7 = 0;
          if (v37 < 0) {
            int v15 = (unsigned __int16 *)__p;
          }
          int v19 = *(_DWORD *)v15;
          int v20 = v15[2];
          if (v19 != 1651469415 || v20 != 27745) {
            goto LABEL_52;
          }
          int v13 = 0;
        }
LABEL_57:
        *(_DWORD *)a2 = v13;
        *(void *)this = v38;
        uint64_t v7 = 1;
        if ((v9 & 0x80) == 0) {
          return v7;
        }
        break;
      default:
        goto LABEL_51;
    }
    goto LABEL_53;
  }
LABEL_51:
  uint64_t v7 = 0;
LABEL_52:
  if (v37 < 0) {
LABEL_53:
  }
    operator delete(__p);
  return v7;
}

void sub_18FEE76D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::getProperty(DSPGraph::Graph *this, unsigned int a2, unsigned int *a3, void *a4)
{
  long long v4 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)this + 70, a2);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v9, "getProperty");
    std::string::basic_string[abi:ne180100]<0>(&v8, "getProperty : inPropertyID not found");
    DSPGraph::ThrowException(1852204065, &v10, 2270, &v9, &v8);
  }
  uint64_t v5 = v4[9];
  if (v4[10] == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v9, "getProperty");
    std::string::basic_string[abi:ne180100]<0>(&v8, "getProperty : property is not connected to any box.");
    DSPGraph::ThrowException(1969451041, &v10, 2278, &v9, &v8);
  }
  unint64_t v6 = *(uint64_t (**)(void))(**(void **)v5 + 304);
  return v6();
}

void sub_18FEE7820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::Graph::hasParameter(DSPGraph::Graph *this, unsigned int a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)this + 65, a2) != 0;
}

uint64_t *DSPGraph::Graph::setParameter(DSPGraph::Graph *this, unsigned int a2, float a3)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)this + 65, a2);
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter : inParamID not found");
    DSPGraph::ThrowException(1852204065, &v9, 2334, &v8, &v7);
  }
  *((float *)result + 7) = a3;
  uint64_t v5 = (unsigned int *)result[5];
  unint64_t v6 = (unsigned int *)result[6];
  while (v5 != v6)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void, void, void, void, void, float))(**(void **)v5 + 80))(*(void *)v5, v5[2], v5[3], v5[4], 0, a3);
    v5 += 6;
  }
  return result;
}

void sub_18FEE7978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::setParameter(AudioUnit *this, AudioUnitParameterID a2, AudioUnitScope a3, AudioUnitElement a4, AudioUnitParameterValue a5, UInt32 a6)
{
  uint64_t result = AudioUnitSetParameter(this[106], a2, a3, a4, a5, a6);
  if (result)
  {
    int v11 = result;
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v13, "AudioUnitSetParameter");
    DSPGraph::ThrowException(v11, (long long *)&v12, 1707, &v14, &v13);
  }
  if (*((unsigned char *)this[1] + 767))
  {
    memset(&v12, 0, sizeof(v12));
    v12.mArgument.mParameter.mAudioUnit = this[106];
    *(void *)&v12.mArgument.mProperty.mPropertyID = __PAIR64__(a3, a2);
    v12.mArgument.mParameter.mElement = a4;
    return AUEventListenerNotify(0, 0, &v12);
  }
  return result;
}

void sub_18FEE7A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::CalculationBox::setParameter(DSPGraph::CalculationBox *this, int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a2) {
    DSPGraph::Box::setParameter(this, a5);
  }
  if (a3 != 1 || *((_DWORD *)this + 194))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
    std::to_string(&v16, a3);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v17, "CalculationBox can't get parameter in scope ", &v16);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v18, &v17, " with parameter ID ");
    std::to_string(&v15, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v9 = &v15;
    }
    else {
      long long v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v11 = std::string::append(&v18, (const std::string::value_type *)v9, size);
    std::string v19 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10866, &v21, 178, &v20, (long long *)&v19);
  }
  if (*((void *)this + 103) <= (unint64_t)a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
    std::to_string(&v16, a4);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v17, "CalculationBox can't set input scope element ", &v16);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v18, &v17, " with parameter ID ");
    std::to_string(&v15, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      AudioUnitEvent v12 = &v15;
    }
    else {
      AudioUnitEvent v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = v15.__r_.__value_.__l.__size_;
    }
    long long v14 = std::string::append(&v18, (const std::string::value_type *)v12, v13);
    std::string v19 = *v14;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10877, &v21, 173, &v20, (long long *)&v19);
  }
  unint64_t v6 = (double *)((char *)this + 16 * a4);
  double result = a5;
  v6[99] = result;
  *((_DWORD *)v6 + 200) = 1;
  return result;
}

void sub_18FEE7CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v38 - 41) < 0) {
    operator delete(*(void **)(v38 - 64));
  }
  if (*(char *)(v38 - 17) < 0) {
    operator delete(*(void **)(v38 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::Graph::uninitialize(void *this)
{
  if (*((unsigned char *)this + 762))
  {
    uint64_t v1 = this;
    for (uint64_t i = (uint64_t **)this[3]; i; uint64_t i = (uint64_t **)*i)
    {
      (*(void (**)(uint64_t *))(*i[2] + 584))(i[2]);
      (*(void (**)(void))(*i[2] + 616))();
    }
    for (j = (void *)v1[8]; j; j = (void *)*j)
      *(void *)(j[2] + 56) = 0;
    this = std::vector<std::unique_ptr<DSPGraph::InternalBuffer>>::__clear[abi:ne180100](v1 + 24);
    *((unsigned char *)v1 + 762) = 0;
  }
  return this;
}

uint64_t DSPGraph::Box::uninitializePropertyTaps(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 176);
  uint64_t v2 = *(void *)(this + 184);
  while (v1 != v2)
  {
    *(void *)(v1 + 48) = *(void *)(v1 + 40);
    v1 += 64;
  }
  return this;
}

uint64_t DSPGraph::AUBox::uninitialize(AudioUnit *this)
{
  DSPGraph::Box::uninitialize((DSPGraph::Box *)this);
  this[98] = this[97];
  this[101] = this[100];
  uint64_t result = AudioUnitUninitialize(this[106]);
  if (result)
  {
    int v3 = result;
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "uninitialize");
    std::operator+<char>();
    DSPGraph::ThrowException(v3, &v6, 2010, &v5, &v4);
  }
  return result;
}

void sub_18FEE7F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::uninitialize(DSPGraph::Box *this)
{
  uint64_t v2 = *((void *)this + 25);
  uint64_t v3 = *((void *)this + 26);
  while (v2 != v3)
  {
    long long v4 = *(void **)v2;
    uint64_t v5 = *(void *)(*(void *)v2 + 16);
    *(void *)(*(void *)v2 + 16) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    long long v6 = (void *)v4[6];
    long long v7 = (void *)v4[7];
    while (v7 != v6)
    {
      long long v9 = (void *)*--v7;
      long long v8 = v9;
      *long long v7 = 0;
      if (v9) {
        VPTimeFreqConverter_Dispose(v8);
      }
    }
    void v4[7] = v6;
    DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(v4 + 9));
    v2 += 8;
  }
  long long v10 = (uint64_t *)*((void *)this + 28);
  int v11 = (uint64_t *)*((void *)this + 29);
  while (v10 != v11)
  {
    uint64_t v12 = *v10;
    DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(*v10 + 16));
    std::string::size_type v13 = *(void **)(v12 + 80);
    long long v14 = *(void **)(v12 + 88);
    while (v14 != v13)
    {
      std::string v16 = (void *)*--v14;
      std::string v15 = v16;
      *long long v14 = 0;
      if (v16) {
        VPTimeFreqConverter_Dispose(v15);
      }
    }
    *(void *)(v12 + 88) = v13;
    ++v10;
  }
  uint64_t result = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 600))(this);
  if (*((unsigned char *)this + 760)) {
    *((unsigned char *)this + 760) = 0;
  }
  return result;
}

void DSPGraph::Box::uninitializeAnalysis(DSPGraph::Box *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  uint64_t v3 = (DSPGraph::Analyzer **)*((void *)this + 39);
  long long v4 = (DSPGraph::Analyzer **)*((void *)this + 40);
  if (v3 != v4)
  {
    uint64_t v5 = (char *)this + 336;
    do
    {
      caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove((unint64_t)v5, *((_DWORD *)*v3 + 6));
      DSPGraph::Analyzer::uninitialize(*v3++);
    }
    while (v3 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_18FEE80F4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

OSStatus AudioUnitUninitialize(AudioUnit inUnit)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v1 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v1) {
    return 560947818;
  }
  uint64_t v2 = v1;
  if (*(_WORD *)((**v1)(v1) + 38) != 24949) {
    return -3000;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)((**v2)(v2) + 112) + 8);
  if (!v3) {
    return -4;
  }
  long long v4 = v2[3];
  return v3(v4);
}

void DSPGraph::RingBufferBox::uninitialize(DSPGraph::RingBufferBox *this)
{
  DSPGraph::Box::uninitialize(this);
  DSPGraph::SimpleABL::free((DSPGraph::RingBufferBox *)((char *)this + 808));
}

void *std::vector<std::unique_ptr<DSPGraph::InternalBuffer>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    long long v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void DSPGraph::InternalBuffer::~InternalBuffer(DSPGraph::InternalBuffer *this)
{
  *(void *)this = &unk_1EDF9CB58;
  DSPGraph::SimpleABL::free((DSPGraph::InternalBuffer *)((char *)this + 80));
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF9CB58;
  DSPGraph::SimpleABL::free((DSPGraph::InternalBuffer *)((char *)this + 80));
}

BOOL DSPGraph::Graph::hasProperty(DSPGraph::Graph *this, unsigned int a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)this + 70, a2) != 0;
}

void DSPGraph::Graph::initializeWithFlags(DSPGraph::Graph *this, int a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (DSPGraph::getLog(void)::onceToken != -1) {
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
  }
  long long v4 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_DEBUG, ">>>>>>>>>>>> INITIALIZE GRAPH", buf, 2u);
  }
  if (!*((unsigned char *)this + 762))
  {
    if (!*((unsigned char *)this + 761))
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v67, "initializeWithFlags");
      std::string::basic_string[abi:ne180100]<0>(&v74, "graph is not configured. configure the graph before initializing");
      DSPGraph::ThrowException(1667655457, (long long *)buf, 745, &v67, &v74);
    }
    if ((a2 & 0x30) != 0)
    {
      if ((a2 & 0x30) == 0x30)
      {
        if (DSPGraph::getLog(void)::onceToken != -1) {
          goto LABEL_118;
        }
        while (1)
        {
          uint64_t v65 = DSPGraph::getLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_18FEC0000, v65, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: Init flag error: only one kDSPGraph_EnableNonFiniteValidateMode can be set at a time!", buf, 2u);
            __break(1u);
LABEL_115:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          __break(1u);
LABEL_118:
          dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
        }
      }
      *(void *)buf = &unk_1EDFA1F08;
      *(_DWORD *)&_DWORD buf[8] = a2;
      __p[0] = buf;
      for (uint64_t i = (void *)*((void *)this + 3); i; uint64_t i = (void *)*i)
      {
        uint64_t v6 = i[2];
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v68, (uint64_t)buf);
        DSPGraph::Box::addRenderCallback(v6, (uint64_t)v68, 1u, 1);
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](v68);
      }
      std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](buf);
    }
    *((void *)this + 88) = 0;
    *((void *)this + 91) = 0;
    long long v7 = (DSPGraph::IsoGroup **)*((void *)this + 32);
    long long v8 = (DSPGraph::IsoGroup **)*((void *)this + 33);
    if (v7 != v8)
    {
      do
        DSPGraph::IsoGroup::initializeBoxes(*v7++);
      while (v7 != v8);
      uint64_t v9 = *((void *)this + 32);
      uint64_t v10 = *((void *)this + 33);
      while (v9 != v10)
      {
        int v11 = *(void **)(*(void *)v9 + 224);
        uint64_t v12 = *(void **)(*(void *)v9 + 232);
        while (v11 != v12)
        {
          (*(void (**)(void))(*(void *)*v11 + 608))(*v11);
          ++v11;
        }
        v9 += 8;
      }
    }
    if ((a2 & 2) != 0)
    {
      std::string::size_type v13 = (void *)*((void *)this + 3);
      if (v13)
      {
        long long v14 = 0;
        std::string v15 = 0;
        unint64_t v16 = 0;
        do
        {
          uint64_t v17 = v13[2];
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v18 = (v15 - v14) >> 3;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61) {
              goto LABEL_115;
            }
            if ((uint64_t)(v16 - (void)v14) >> 2 > v19) {
              unint64_t v19 = (uint64_t)(v16 - (void)v14) >> 2;
            }
            if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v20);
            }
            else {
              uint64_t v21 = 0;
            }
            long long v22 = (char *)(v20 + 8 * v18);
            *(void *)long long v22 = v17;
            int v23 = v22 + 8;
            while (v15 != v14)
            {
              uint64_t v24 = *((void *)v15 - 1);
              v15 -= 8;
              *((void *)v22 - 1) = v24;
              v22 -= 8;
            }
            unint64_t v16 = v20 + 8 * v21;
            if (v14) {
              operator delete(v14);
            }
            long long v14 = v22;
            std::string v15 = v23;
          }
          else
          {
            *(void *)std::string v15 = v17;
            v15 += 8;
          }
          std::string::size_type v13 = (void *)*v13;
        }
        while (v13);
        if (v14 != v15)
        {
          uint64_t v25 = (DSPGraph::Box **)v14;
          do
          {
            int v26 = *v25;
            DSPGraph::Box::upstreamLatencyInTicks(*v25);
            (*(void (**)(DSPGraph::Box *))(*(void *)v26 + 384))(v26);
            ++v25;
          }
          while (v25 != (DSPGraph::Box **)v15);
          unint64_t v27 = v14;
          do
          {
            uint64_t v28 = *(void *)v27;
            (*(void (**)(void))(**(void **)v27 + 376))(*(void *)v27);
            if (*(unsigned char *)(v28 + 760)) {
              *(unsigned char *)(v28 + 760) = 0;
            }
            v27 += 8;
          }
          while (v27 != v15);
        }
        if (v14) {
          operator delete(v14);
        }
      }
    }
    BOOL v29 = (a2 & 8) != 0 && *((unsigned char *)this + 763) != 0;
    *((unsigned char *)this + 764) = v29;
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
    }
    os_signpost_id_t v30 = os_signpost_id_make_with_pointer((os_log_t)DSPGraph::getLog(void)::gLog, this);
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
    }
    char v31 = a2;
    unint64_t v32 = v30 - 1;
    if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint8x8_t v33 = DSPGraph::getLog(void)::gLog;
      if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
      {
        uint64_t v34 = (void *)((char *)this + 408);
        if (*((char *)this + 431) < 0) {
          uint64_t v34 = (void *)*v34;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v34;
        _os_signpost_emit_with_name_impl(&dword_18FEC0000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v30, "Graph::initializeBuffers", "%s", buf, 0xCu);
      }
    }
    os_signpost_id_t spid = v30;
    *(void *)buf = this;
    *(_OWORD *)&_DWORD buf[8] = 0u;
    *(_OWORD *)std::string __p = 0u;
    LODWORD(v71) = 1065353216;
    memset(v72, 0, sizeof(v72));
    int v73 = 1065353216;
    uint64_t v35 = *((void *)this + 32);
    uint64_t v36 = *((void *)this + 33);
    while (v35 != v36)
    {
      uint64_t v38 = *(DSPGraph::Box ****)(*(void *)v35 + 224);
      uint64_t v37 = *(DSPGraph::Box ****)(*(void *)v35 + 232);
      while (v38 != v37)
      {
        uint64_t v39 = *v38;
        if ((*((unsigned int (**)(DSPGraph::Box **))**v38 + 8))(*v38))
        {
          DSPGraph::BufferColorist::consumeInputs((DSPGraph::BufferColorist *)buf, (DSPGraph::Box *)v39);
          DSPGraph::BufferColorist::allocOutputs(buf, v39[11], v39[12]);
        }
        else
        {
          DSPGraph::BufferColorist::allocOutputs(buf, v39[11], v39[12]);
          DSPGraph::BufferColorist::consumeInputs((DSPGraph::BufferColorist *)buf, (DSPGraph::Box *)v39);
        }
        ++v38;
      }
      v35 += 8;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::~__hash_table((uint64_t)v72);
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::~__hash_table((uint64_t)&buf[8]);
    unint64_t v40 = (void *)*((void *)this + 8);
    for (j = v31; v40; unint64_t v40 = (void *)*v40)
    {
      unint64_t v42 = (void *)v40[2];
      unint64_t v43 = (_DWORD *)v42[15];
      int v44 = v43[10];
      if (v44 == 1) {
        int v44 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(v42[4] + 16) + 8) + 16) + 272);
      }
      int v45 = v43[2];
      if (v45 == 1718773105)
      {
        unsigned int v46 = 2 * v44 * v43[4];
      }
      else if (v45 == 1819304813)
      {
        unsigned int v46 = v43[4] * v44;
      }
      else
      {
        unsigned int v46 = v43[4];
      }
      uint64_t v47 = v42[7];
      if (v46 <= *(_DWORD *)(v47 + 100)) {
        unsigned int v46 = *(_DWORD *)(v47 + 100);
      }
      *(_DWORD *)(v47 + 100) = v46;
    }
    if (!*((unsigned char *)this + 764))
    {
      unint64_t v61 = (void *)*((void *)this + 24);
      uint8x8_t v62 = (void *)*((void *)this + 25);
      while (v61 != v62)
      {
        uint64_t v63 = *v61;
        uint8x8_t v64 = (DSPGraph::SimpleABL *)(*v61 + 80);
        DSPGraph::SimpleABL::free(v64);
        DSPGraph::SimpleABL::alloc(v64, *(_DWORD *)(v63 + 96), *(_DWORD *)(v63 + 100), *(unsigned __int8 *)(v63 + 108));
        ++v61;
      }
    }
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
    }
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int64x2_t v48 = DSPGraph::getLog(void)::gLog;
      if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
      {
        int32x4_t v49 = (void *)((char *)this + 408);
        if (*((char *)this + 431) < 0) {
          int32x4_t v49 = (void *)*v49;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v49;
        _os_signpost_emit_with_name_impl(&dword_18FEC0000, v48, OS_SIGNPOST_INTERVAL_END, spid, "Graph::initializeBuffers", "%s", buf, 0xCu);
      }
    }
    uint64_t v50 = *((void *)this + 124);
    uint64_t v51 = *((void *)this + 125);
    while (v50 != v51)
    {
      uint64_t v52 = *(void *)(v50 + 32);
      BOOL v53 = *(std::vector<char> **)(v50 + 40);
      if ((std::vector<char> *)v52 != v53)
      {
        unint64_t v54 = (std::vector<char> *)(v52 + 8);
        do
        {
          unsigned int v55 = (*(uint64_t (**)(DSPGraph::Graph *, void))(*(void *)this + 64))(this, LODWORD(v54[-1].__end_cap_.__value_));
          int v56 = v55;
          if (!v57)
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v67, "initializeBridges");
            std::string::basic_string[abi:ne180100]<0>(&v74, "graph bridge property size could not be queried");
            DSPGraph::ThrowException(v56, (long long *)buf, 2439, &v67, &v74);
          }
          unint64_t v58 = v54->__end_ - v54->__begin_;
          if (v55 <= v58)
          {
            if (v55 < v58) {
              v54->__end_ = &v54->__begin_[v55];
            }
          }
          else
          {
            std::vector<unsigned char>::__append(v54, v55 - v58);
          }
          uint64_t v59 = v54 + 1;
          unint64_t v54 = (std::vector<char> *)((char *)v54 + 32);
        }
        while (v59 != v53);
      }
      v50 += 56;
    }
    if ((j & 4) != 0) {
      operator new();
    }
    *((unsigned char *)this + 762) = 1;
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
    }
    int v60 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_18FEC0000, v60, OS_LOG_TYPE_DEBUG, "<<<<<<<<<<<< INITIALIZE GRAPH", buf, 2u);
    }
  }
}

void sub_18FEE9190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v31 - 113) < 0) {
    operator delete(*(void **)(v31 - 136));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::initializePropertyTaps(DSPGraph::Box *this)
{
  uint64_t v1 = (DSPGraph::PropertyTap *)*((void *)this + 22);
  uint64_t v2 = (DSPGraph::PropertyTap *)*((void *)this + 23);
  while (v1 != v2)
  {
    DSPGraph::PropertyTap::initialize(v1);
    uint64_t v1 = (DSPGraph::PropertyTap *)((char *)v1 + 64);
  }
}

void *DSPGraph::BufferColorist::allocOutputs(void *this, DSPGraph::Box *a2, DSPGraph::Box *a3)
{
  long long v14 = this;
  if (a2 != a3)
  {
    long long v4 = a2;
    do
    {
      this = (void *)(*(uint64_t (**)(DSPGraph::Box *))(*(void *)v4 + 40))(v4);
      if (!this[7])
      {
        uint64_t v5 = this;
        uint64_t v6 = this[15];
        int v7 = *(_DWORD *)(v6 + 12);
        unsigned int v8 = *(_DWORD *)(v6 + 28);
        unint64_t v9 = this[5];
        unsigned int v15 = v8;
        if (v9 >> 31)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
        }
        if ((v7 & 0x20) != 0) {
          uint64_t v10 = v14 + 1;
        }
        else {
          uint64_t v10 = v14 + 6;
        }
        if (!std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>(v10, v8)|| (this = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, v8, &v15), uint64_t v11 = this[4], v11 == this[3]))
        {
          operator new();
        }
        uint64_t v12 = *(void *)(v11 - 8);
        this[4] = v11 - 8;
        *(_DWORD *)(v12 + 104) = v9;
        v5[7] = v12;
      }
      long long v4 = (DSPGraph::Box *)((char *)v4 + 32);
    }
    while (v4 != a3);
  }
  return this;
}

void sub_18FEE958C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::BufferColorist::consumeInputs(DSPGraph::BufferColorist *this, DSPGraph::Box *a2)
{
  uint64_t v2 = *((void *)a2 + 8);
  uint64_t v3 = *((void *)a2 + 9);
  if (v2 != v3)
  {
    uint64_t v5 = (uint64_t *)((char *)this + 48);
    uint64_t v6 = (uint64_t *)((char *)this + 8);
    do
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      if (!v7)
      {
        std::string::basic_string[abi:ne180100]<0>(v34, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(v33, "consumeInputs");
        os_signpost_id_t v30 = (void *)((char *)a2 + 32);
        if (*((char *)a2 + 55) < 0) {
          os_signpost_id_t v30 = (void *)*v30;
        }
        uint64_t v31 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)a2 + 16))(a2);
        DSPGraph::strprintf((DSPGraph *)"box %s %s input port is not connected.", v32, v30, v31);
      }
      uint64_t v8 = *(void *)(v7 + 56);
      int v9 = *(_DWORD *)(v8 + 104) - 1;
      *(_DWORD *)(v8 + 104) = v9;
      if (!v9)
      {
        if (*(unsigned char *)(v8 + 108)) {
          uint64_t v10 = v5;
        }
        else {
          uint64_t v10 = v6;
        }
        LODWORD(v34[0]) = *(_DWORD *)(v8 + 96);
        unsigned int v11 = v34[0];
        if (!std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>(v10, v34[0]))
        {
          uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, v11, v34);
          long long v14 = v12 + 3;
          std::string::size_type v13 = (void *)v12[3];
          if (v13)
          {
            v12[4] = v13;
            operator delete(v13);
          }
          *long long v14 = 0;
          v14[1] = 0;
          v14[2] = 0;
        }
        unsigned int v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, v11, v34);
        unint64_t v16 = v15;
        uint64_t v18 = (void *)v15[4];
        unint64_t v17 = v15[5];
        if ((unint64_t)v18 >= v17)
        {
          uint64_t v20 = v15[3];
          uint64_t v21 = ((uint64_t)v18 - v20) >> 3;
          if ((unint64_t)(v21 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v17 - v20;
          uint64_t v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
            uint64_t v23 = v21 + 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24)
          {
            if (v24 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v25 = (char *)operator new(8 * v24);
          }
          else
          {
            uint64_t v25 = 0;
          }
          int v26 = &v25[8 * v21];
          *(void *)int v26 = v8;
          unint64_t v19 = v26 + 8;
          uint64_t v28 = (char *)v16[3];
          unint64_t v27 = (char *)v16[4];
          if (v27 != v28)
          {
            do
            {
              uint64_t v29 = *((void *)v27 - 1);
              v27 -= 8;
              *((void *)v26 - 1) = v29;
              v26 -= 8;
            }
            while (v27 != v28);
            unint64_t v27 = (char *)v16[3];
          }
          void v16[3] = v26;
          v16[4] = v19;
          v16[5] = &v25[8 * v24];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          void *v18 = v8;
          unint64_t v19 = v18 + 1;
        }
        v16[4] = v19;
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_18FEE97F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

float DSPGraph::Graph::getParameter(DSPGraph::Graph *this, unsigned int a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)this + 65, a2);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "getParameter : inParamID not found");
    DSPGraph::ThrowException(1852204065, &v8, 2348, &v7, &v6);
  }
  if (!*((unsigned char *)v2 + 32)) {
    return *((float *)v2 + 7);
  }
  uint64_t v3 = v2[5];
  if (v2[6] == v3) {
    return *((float *)v2 + 7);
  }
  long long v4 = *(void (**)(void))(**(void **)v3 + 88);
  v4();
  return result;
}

void sub_18FEE9924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (float result = *v5; result; float result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 2;
  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  _OWORD v10[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  uint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    uint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *uint64_t v22 = *v28;
          *uint64_t v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          uint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        uint64_t v22 = v28;
        uint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v30 = *a1;
  uint64_t v31 = *(void **)(*a1 + 8 * v6);
  if (v31)
  {
    *uint64_t v10 = *v31;
LABEL_72:
    *uint64_t v31 = v10;
    goto LABEL_73;
  }
  *uint64_t v10 = *v12;
  void *v12 = v10;
  *(void *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_18FEE9E0C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void DSPGraph::SimpleABL::alloc(DSPGraph::SimpleABL *this, unsigned int a2, unsigned int a3, int a4)
{
  DSPGraph::SimpleABL::free(this);
  if (a2 && a3)
  {
    *((unsigned char *)this + 8) = 1;
    if (a4)
    {
      uint8x8_t v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
      *(void *)this = v8;
      if (!v8)
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "alloc");
        std::string::basic_string[abi:ne180100]<0>(&v14, "AudioBufferList allocation failed");
        DSPGraph::ThrowException(-108, &v16, 548, &v15, &v14);
      }
      _DWORD *v8 = 1;
      v8[2] = a2;
      void v8[3] = a3;
      int v9 = malloc_type_calloc(1uLL, a3, 0x1EC2DFE2uLL);
      *(void *)(*(void *)this + 16) = v9;
      if (!v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "alloc");
        std::string::basic_string[abi:ne180100]<0>(&v14, "AudioBufferList data allocation failed");
        DSPGraph::ThrowException(-108, &v16, 555, &v15, &v14);
      }
    }
    else
    {
      uint64_t v10 = malloc_type_calloc(1uLL, 16 * (a2 - 1) + 24, 0x70C25B4FuLL);
      *(void *)this = v10;
      if (!v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v15, "alloc");
        std::string::basic_string[abi:ne180100]<0>(&v14, "AudioBufferList allocation failed");
        DSPGraph::ThrowException(-108, &v16, 560, &v15, &v14);
      }
      uint64_t v11 = 0;
      *uint64_t v10 = a2;
      do
      {
        uint64_t v12 = &v10[v11];
        void v12[2] = 1;
        void v12[3] = a3;
        float v13 = malloc_type_calloc(1uLL, a3, 0xC40F8CC6uLL);
        uint64_t v10 = *(_DWORD **)this;
        *(void *)(*(void *)this + v11 * 4 + 16) = v13;
        if (!v13)
        {
          std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v15, "alloc");
          std::string::basic_string[abi:ne180100]<0>(&v14, "AudioBufferList data allocation failed");
          DSPGraph::ThrowException(-108, &v16, 568, &v15, &v14);
        }
        v11 += 4;
      }
      while (4 * a2 != v11);
    }
  }
}

void sub_18FEEA074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::SimpleABL::free(DSPGraph::SimpleABL *this)
{
  if (*((unsigned char *)this + 8))
  {
    unint64_t v2 = *(_DWORD **)this;
    if (!*(void *)this) {
      return;
    }
    if (*v2)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 4;
      do
      {
        free(*(void **)&v2[v4]);
        ++v3;
        unint64_t v2 = *(_DWORD **)this;
        v4 += 4;
      }
      while (v3 < **(unsigned int **)this);
    }
    free(v2);
    *((unsigned char *)this + 8) = 0;
  }
  *(void *)this = 0;
}

uint64_t DSPGraph::GraphIOBox::canProcessInPlace(DSPGraph::GraphIOBox *this)
{
  return 1;
}

uint64_t DSPGraph::Box::canProcessInPlace(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::CalculationBox::canProcessInPlace(DSPGraph::CalculationBox *this)
{
  return 1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DSPGraph::Buffer *>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void DSPGraph::ThrowException(int a1, long long *a2, int a3, long long *a4, long long *a5)
{
  exception = (char *)__cxa_allocate_exception(0x60uLL);
  uint64_t v11 = exception;
  *(void *)exception = &unk_1EDF9E170;
  *((_DWORD *)exception + 2) = a1;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(exception + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    *((void *)exception + 4) = *((void *)a2 + 2);
    *((_OWORD *)exception + 1) = v12;
  }
  *((_DWORD *)v11 + 10) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v11 + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    *((void *)v11 + 8) = *((void *)a4 + 2);
    *((_OWORD *)v11 + 3) = v13;
  }
  long long v14 = (std::string *)(v11 + 72);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v15 = *a5;
    *((void *)v11 + 11) = *((void *)a5 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
}

void sub_18FEEA2D4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  std::exception::~exception((std::exception *)v1);
  __cxa_free_exception(v5);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::canProcessInPlace()
{
  return 1;
}

void DSPGraph::Interpreter::compileText(DSPGraph::Interpreter *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, long long **a4@<X3>, void *a5@<X8>)
{
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)a1 + 184) = 0;
  *((void *)a1 + 22) = 0;
  int v154 = (int16x8_t **)((char *)a1 + 176);
  (*(void (**)(char **__return_ptr))(*(void *)a1 + 24))(v156);
  uint64_t v10 = v156[0];
  v156[0] = 0;
  uint64_t v11 = *((void *)a1 + 1);
  *((void *)a1 + 1) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    long long v12 = v156[0];
    v156[0] = 0;
    if (v12) {
      (*(void (**)(char *))(*(void *)v12 + 8))(v12);
    }
  }
  memset(&v161, 0, sizeof(v161));
  uint64_t v160 = 0;
  long long v158 = 0u;
  long long v159 = 0u;
  *(_OWORD *)uint64_t v156 = 0u;
  long long v157 = 0u;
  if (&v159 != (long long *)a4)
  {
    long long v14 = *a4;
    long long v13 = a4[1];
    if (v13 == v14)
    {
      *((void *)&v159 + 1) = 0;
    }
    else
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 3);
      if (v15 >= 0xAAAAAAAAAAAAAABLL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      *(void *)&long long v159 = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v15);
      *((void *)&v159 + 1) = v159;
      uint64_t v160 = v159 + 24 * v16;
      *((void *)&v159 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v160, v14, v13, (std::string *)v159);
    }
  }
  for (uint64_t i = *(unsigned __int8 ***)(a3 + 16); i; uint64_t i = (unsigned __int8 **)*i)
    DSPGraph::Preprocessor::def(v156, i + 2);
  std::string::basic_string[abi:ne180100]<0>(&v178, a2);
  DSPGraph::Preprocessor::preprocess(&__str, (DSPGraph::Preprocessor *)v156, (uint64_t)&v178, 0);
  std::string v161 = __str;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v178.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  std::deque<std::unique_ptr<DSPGraph::Macro>>::~deque[abi:ne180100]((uint64_t)v156);
  int v19 = 0;
  if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &v161;
  }
  else {
    uint64_t v20 = (std::string *)v161.__r_.__value_.__r.__words[0];
  }
  uint64_t v155 = a1;
  uint64_t v21 = (DSPGraph::Interpreter *)((char *)a1 + 128);
  while (v20->__r_.__value_.__s.__data_[0])
  {
    ++v19;
    memset(&v167, 0, sizeof(v167));
    while (1)
    {
      int v22 = v20->__r_.__value_.__s.__data_[0];
      if (!v20->__r_.__value_.__s.__data_[0]) {
        break;
      }
      uint64_t v20 = (std::string *)((char *)v20 + 1);
      if (v22 == 10) {
        break;
      }
      std::string::push_back(&v167, v22);
    }
    unint64_t v23 = &v167;
    if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v23 = (std::string *)v167.__r_.__value_.__r.__words[0];
    }
    v166 = (char *)v23;
    DSPGraph::skipspace((DSPGraph *)&v166, v18);
    if (*v166 && *v166 != 59)
    {
      uint64_t v163 = 0;
      uint64_t v164 = 0;
      uint64_t v165 = 0;
      if (DSPGraph::Interpreter::parseName((DSPGraph *)&v166, (uint64_t)&v163))
      {
        DSPGraph::skipspace((DSPGraph *)&v166, v18);
        unint64_t v25 = v166;
        memset(&v162, 0, sizeof(v162));
        while (1)
        {
          unsigned int v26 = *v25;
          if (v26 <= 0x3B && ((1 << v26) & 0x800000000000401) != 0) {
            break;
          }
          std::string::push_back(&v162, v26);
          ++v25;
        }
        uint64_t v28 = (std::string *)v162.__r_.__value_.__r.__words[0];
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v28 = &v162;
        }
        v166 = (char *)v28;
        uint64_t v29 = HIBYTE(v165);
        if (v165 < 0) {
          uint64_t v29 = v164;
        }
        switch(v29)
        {
          case 2:
            uint64_t v30 = &v163;
            if (v165 < 0) {
              uint64_t v30 = v163;
            }
            if (*v30 == 28265) {
              goto LABEL_148;
            }
            goto LABEL_140;
          case 3:
            uint64_t v39 = (unsigned __int16 *)v163;
            if (v165 >= 0) {
              uint64_t v39 = (unsigned __int16 *)&v163;
            }
            int v40 = *v39;
            int v41 = *((unsigned __int8 *)v39 + 2);
            if (v40 == 30063 && v41 == 116) {
              goto LABEL_118;
            }
            unint64_t v43 = (unsigned __int16 *)&v163;
            if (v165 < 0) {
              unint64_t v43 = (unsigned __int16 *)v163;
            }
            int v44 = *v43;
            int v45 = *((unsigned __int8 *)v43 + 2);
            if (v44 != 28514 || v45 != 120) {
              goto LABEL_140;
            }
            (*(void (**)(DSPGraph::Interpreter *, char **))(*(void *)v155 + 16))(v155, &v166);
            goto LABEL_263;
          case 4:
            uint64_t v31 = &v163;
            if (v165 < 0) {
              uint64_t v31 = v163;
            }
            if (*v31 != 1701996919) {
              goto LABEL_140;
            }
            v156[0] = 0;
            v156[1] = 0;
            *(void *)&long long v157 = 0;
            memset(&__str, 0, sizeof(__str));
            v173 = v28;
            uint64_t v174 = 0;
            if ((DSPGraph::Interpreter::parsePortDesc((char **)&v173, (const char **)v156, (const char **)((char *)&v174 + 4)) & 1) == 0)
            {
              memset(&v178, 0, sizeof(v178));
              strlcpy((char *)&v178, (const char *)v173, 0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v172, "parseWireCommand");
              DSPGraph::strprintf((DSPGraph *)"source port description parse failed. {%s}", v139, &v178);
            }
            if ((DSPGraph::Interpreter::parsePortDesc((char **)&v173, (const char **)&__str.__r_.__value_.__l.__data_, &v174) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v178, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireCommand");
              std::string::basic_string[abi:ne180100]<0>(&v172, "destination port description parse failed.");
              DSPGraph::ThrowException(1886548769, (long long *)&v178, 967, &buf, (long long *)&v172);
            }
            uint64_t v152 = v21;
            uint64_t v32 = HIDWORD(v174);
            uint64_t v33 = *((void *)v155 + 1);
            if (HIDWORD(v174))
            {
              uint64_t v34 = 0;
            }
            else
            {
              unint64_t v102 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(v33 + 640), (unsigned __int8 *)v156);
              if (v102) {
                uint64_t v34 = (float **)(v102 + 40);
              }
              else {
                uint64_t v34 = 0;
              }
            }
            uint64_t v103 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(v33 + 784), (unsigned __int8 *)v156);
            if (v103) {
              uint64_t v104 = *((void *)v103 + 5);
            }
            else {
              uint64_t v104 = 0;
            }
            if (!(v104 | (unint64_t)v34))
            {
              std::string::basic_string[abi:ne180100]<0>(&v178, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireCommand");
              std::operator+<char>();
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v170, &v169, "\" index ");
              std::to_string(&v168, v32);
              if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v140 = &v168;
              }
              else {
                uint64_t v140 = (std::string *)v168.__r_.__value_.__r.__words[0];
              }
              if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v168.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v168.__r_.__value_.__l.__size_;
              }
              v142 = std::string::append(&v170, (const std::string::value_type *)v140, size);
              long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v143;
              v142->__r_.__value_.__l.__size_ = 0;
              v142->__r_.__value_.__r.__words[2] = 0;
              v142->__r_.__value_.__r.__words[0] = 0;
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v172, &__p, " not found");
              DSPGraph::ThrowException(1852204065, (long long *)&v178, 972, &buf, (long long *)&v172);
            }
            unsigned int __val = v174;
            if (v174)
            {
              unint64_t v105 = 0;
            }
            else
            {
              unint64_t v106 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(v33 + 640), (unsigned __int8 *)&__str);
              if (v106) {
                unint64_t v105 = (uint64_t *)(v106 + 40);
              }
              else {
                unint64_t v105 = 0;
              }
            }
            v107 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(v33 + 784), (unsigned __int8 *)&__str);
            if (v107) {
              uint64_t v108 = *((void *)v107 + 5);
            }
            else {
              uint64_t v108 = 0;
            }
            if (!(v108 | (unint64_t)v105))
            {
              std::string::basic_string[abi:ne180100]<0>(&v178, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireCommand");
              std::operator+<char>();
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v170, &v169, "\" index ");
              std::to_string(&v168, __val);
              if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v144 = &v168;
              }
              else {
                uint64_t v144 = (std::string *)v168.__r_.__value_.__r.__words[0];
              }
              if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v145 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v145 = v168.__r_.__value_.__l.__size_;
              }
              unint64_t v146 = std::string::append(&v170, (const std::string::value_type *)v144, v145);
              long long v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v147;
              v146->__r_.__value_.__l.__size_ = 0;
              v146->__r_.__value_.__r.__words[2] = 0;
              v146->__r_.__value_.__r.__words[0] = 0;
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v172, &__p, " not found");
              DSPGraph::ThrowException(1852204065, (long long *)&v178, 978, &buf, (long long *)&v172);
            }
            memset(&v178, 0, sizeof(v178));
            v170.__r_.__value_.__r.__words[0] = (std::string::size_type)v173;
            if (DSPGraph::Interpreter::parseString((DSPGraph *)&v170, (uint64_t)&v178)
              && DSPGraph::Graph::getFormat(*((int8x8_t **)v155 + 1), (unsigned __int8 *)&v178, v154))
            {
              *((unsigned char *)v155 + 184) = 0;
              unint64_t v109 = DSPGraph::Graph::connect(*((int8x8_t **)v155 + 1), v104, v108, v32, __val, v34, v105);
              DSPGraph::Wire::setGlobalFormat((uint64_t)v109, *v154);
              v166 = (char *)v170.__r_.__value_.__r.__words[0];
              goto LABEL_201;
            }
            if (DSPGraph::Interpreter::parseFormat((DSPGraph *)&v173, (uint64_t)v152))
            {
              v110 = v155;
              *((unsigned char *)v155 + 184) = 1;
              *((void *)v155 + 22) = 0;
            }
            else
            {
              if (*v154)
              {
                unint64_t v111 = DSPGraph::Graph::connect(*((int8x8_t **)v155 + 1), v104, v108, v32, __val, v34, v105);
                DSPGraph::Wire::setGlobalFormat((uint64_t)v111, *v154);
                goto LABEL_201;
              }
              v110 = v155;
              if (!*((unsigned char *)v155 + 184))
              {
                std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v172, "parseWireCommand");
                std::string::basic_string[abi:ne180100]<0>(&__p, "expected format in 'wire' command");
                DSPGraph::ThrowException(1886548769, &buf, 1003, (long long *)&v172, (long long *)&__p);
              }
            }
            DSPGraph::Graph::connect(*((int8x8_t **)v110 + 1), (const AudioStreamBasicDescription *)v104, v108, v32, __val, v152, v34, v105);
LABEL_201:
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v178.__r_.__value_.__l.__data_);
            }
            uint64_t v21 = v152;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v157) < 0)
            {
              uint64_t v90 = v156[0];
LABEL_155:
              operator delete(v90);
            }
LABEL_263:
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v162.__r_.__value_.__l.__data_);
            }
            break;
          case 5:
            char v57 = (unsigned __int8 *)v163;
            if (v165 >= 0) {
              char v57 = (unsigned __int8 *)&v163;
            }
            int v58 = *(_DWORD *)v57;
            int v59 = v57[4];
            if (v58 == 1970302569 && v59 == 116)
            {
LABEL_148:
              DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v166, (const char **)&v172.__r_.__value_.__l.__data_, v24);
              v156[0] = 0;
              v156[1] = 0;
              *(void *)&long long v157 = 0;
              if (DSPGraph::Interpreter::parseString((DSPGraph *)&v166, (uint64_t)v156))
              {
                uint64_t v88 = *((void *)v155 + 1);
                if ((SBYTE7(v157) & 0x80u) == 0) {
                  BOOL v89 = (char *)v156;
                }
                else {
                  BOOL v89 = v156[0];
                }
                std::string::basic_string[abi:ne180100]<0>(&__str, v89);
                DSPGraph::Graph::addInput(v88);
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v178, "parseGraphInputCommand");
              std::string::basic_string[abi:ne180100]<0>(&buf, "expected name in 'input' command");
              DSPGraph::ThrowException(1886548769, (long long *)&__str, 789, (long long *)&v178, &buf);
            }
            unint64_t v61 = (unsigned __int8 *)&v163;
            if (v165 < 0) {
              unint64_t v61 = (unsigned __int8 *)v163;
            }
            int v62 = *(_DWORD *)v61;
            int v63 = v61[4];
            if (v62 != 1634886000 || v63 != 109) {
              goto LABEL_140;
            }
            LODWORD(v172.__r_.__value_.__l.__data_) = 0;
            if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v166, (const char **)&v172.__r_.__value_.__l.__data_, (unsigned int *)1) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(v156, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&__str, "parseParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&v178, "expected parameter ID in 'param' command");
              DSPGraph::ThrowException(1886548769, (long long *)v156, 810, (long long *)&__str, (long long *)&v178);
            }
            DSPGraph::skipspace((DSPGraph *)&v166, v65);
            v156[0] = 0;
            float v67 = strtof(v166, v156);
            uint64_t v68 = v156[0];
            if (v156[0] == v166) {
              goto LABEL_306;
            }
            float v69 = v67;
            if (fabsf(v67) == INFINITY)
            {
              if (*__error())
              {
LABEL_306:
                std::string::basic_string[abi:ne180100]<0>(v156, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                std::string::basic_string[abi:ne180100]<0>(&__str, "parseParamCommand");
                std::string::basic_string[abi:ne180100]<0>(&v178, "expected parameter initial value in 'param' command");
                DSPGraph::ThrowException(1886548769, (long long *)v156, 814, (long long *)&__str, (long long *)&v178);
              }
              uint64_t v68 = v156[0];
            }
            v166 = v68;
            char v71 = DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v166, (const char **)"out", v66);
            if ((v71 & 1) == 0) {
              DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v166, (const char **)"in", v70);
            }
            DSPGraph::Graph::addParameter(*((DSPGraph::Graph **)v155 + 1), v172.__r_.__value_.__l.__data_, v69, v71);
            goto LABEL_263;
          case 6:
            unint64_t v72 = (unsigned __int16 *)&v163;
            if (v165 < 0) {
              unint64_t v72 = (unsigned __int16 *)v163;
            }
            int v73 = *(_DWORD *)v72;
            int v74 = v72[2];
            if (v73 == 1886680431 && v74 == 29813)
            {
LABEL_118:
              DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v166, (const char **)&v172.__r_.__value_.__l.__data_, v24);
              v156[0] = 0;
              v156[1] = 0;
              *(void *)&long long v157 = 0;
              if (DSPGraph::Interpreter::parseString((DSPGraph *)&v166, (uint64_t)v156))
              {
                uint64_t v76 = *((void *)v155 + 1);
                if ((SBYTE7(v157) & 0x80u) == 0) {
                  uint64_t v77 = (char *)v156;
                }
                else {
                  uint64_t v77 = v156[0];
                }
                std::string::basic_string[abi:ne180100]<0>(&__str, v77);
                DSPGraph::Graph::addOutput(v76);
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v178, "parseGraphOutputCommand");
              std::string::basic_string[abi:ne180100]<0>(&buf, "expected name in 'output' command");
              DSPGraph::ThrowException(1886548769, (long long *)&__str, 801, (long long *)&v178, &buf);
            }
            goto LABEL_140;
          case 8:
            uint64_t v35 = &v163;
            if (v165 < 0) {
              uint64_t v35 = v163;
            }
            if (*v35 != 0x79747265706F7270) {
              goto LABEL_140;
            }
            LODWORD(v170.__r_.__value_.__l.__data_) = 0;
            LOBYTE(v156[0]) = 0;
            BYTE8(v157) = 0;
            memset(&__p, 0, sizeof(__p));
            if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v166, (const char **)&v170.__r_.__value_.__l.__data_, (unsigned int *)1) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v178, "parsePropertyCommand");
              std::string::basic_string[abi:ne180100]<0>(&buf, "expected property ID in 'property' command");
              DSPGraph::ThrowException(1886548769, (long long *)&__str, 836, (long long *)&v178, &buf);
            }
            if (DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v166, (const char **)"out", v36)) {
              goto LABEL_55;
            }
            if (DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v166, (const char **)"in", v37)) {
              goto LABEL_255;
            }
            DSPGraph::skipspace((DSPGraph *)&v166, v92);
            if (!*v166) {
              goto LABEL_255;
            }
            DSPGraph::skipspace((DSPGraph *)&v166, v93);
            unint64_t v94 = v166;
            memset(&v178, 0, sizeof(v178));
            char v95 = *v166;
            if (*v166)
            {
              do
              {
                std::string::value_type v96 = v95;
                if (v95 < 0) {
                  int v97 = __maskrune(v95, 0x4000uLL);
                }
                else {
                  int v97 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v95 + 60) & 0x4000;
                }
                if (v97) {
                  break;
                }
                std::string::push_back(&v178, v96);
                int v98 = *++v94;
                char v95 = v98;
              }
              while (v98);
              unint64_t v99 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
              std::string::size_type v100 = v178.__r_.__value_.__l.__size_;
              std::string::size_type v101 = v178.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v100 = 0;
              std::string::size_type v101 = 0;
              unint64_t v99 = 0;
            }
            v166 = v94;
            if ((v99 & 0x80u) == 0) {
              int v112 = &v178;
            }
            else {
              int v112 = (std::string *)v101;
            }
            if ((v99 & 0x80u) == 0) {
              unint64_t v113 = v99;
            }
            else {
              unint64_t v113 = v100;
            }
            if (v113 < 2) {
              goto LABEL_312;
            }
            if (LOWORD(v112->__r_.__value_.__l.__data_) != 30768 || (v113 & 1) != 0) {
              goto LABEL_312;
            }
            if (v113 != 2)
            {
              v115 = (unsigned __int8 *)&v112->__r_.__value_.__s.__data_[2];
              unint64_t v116 = v113 - 2;
              do
              {
                if ((char)*v115 < 0 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v115 + 60) & 0x10000) == 0)
                {
LABEL_312:
                  std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                  std::string::basic_string[abi:ne180100]<0>(&buf, "parsePropertyValue");
                  std::string::basic_string[abi:ne180100]<0>(&v172, "bad property value hexadecimal formatting");
                  DSPGraph::ThrowException(1886548769, (long long *)&__str, 358, &buf, (long long *)&v172);
                }
                ++v115;
                --v116;
              }
              while (v116);
            }
            unsigned int v153 = v21;
            __p.__r_.__value_.__l.__size_ = 0;
            std::vector<unsigned char>::reserve((unint64_t *)&__p, (v113 - 2) >> 1);
            if (v113 != 2)
            {
              unint64_t v117 = (char *)v112 + v113;
              unint64_t v118 = &v112->__r_.__value_.__s.__data_[2];
              *(void *)__vala = (char *)v112 + v113;
              do
              {
                *((unsigned char *)&__str.__r_.__value_.__s + 23) = 2;
                __str.__r_.__value_.__s.__data_[0] = *v118;
                *(_WORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v118[1];
                unint64_t v119 = std::stoul(&__str, 0, 16);
                char v120 = v119;
                if (v119 >= 0x100)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "numerical cast overflow: could not retain value in conversion type");
                  exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
                }
                unint64_t v121 = (char *)__p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                {
                  std::string::size_type v123 = __p.__r_.__value_.__r.__words[0];
                  std::string::size_type v124 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
                  int64_t v125 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] + 1;
                  if (v125 < 0) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  std::string::size_type v126 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
                  if (2 * (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) > v125) {
                    int64_t v125 = 2 * v126;
                  }
                  if (v126 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v127 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v127 = v125;
                  }
                  if (v127) {
                    std::string::size_type v128 = (std::string::size_type)operator new(v127);
                  }
                  else {
                    std::string::size_type v128 = 0;
                  }
                  std::string::size_type v129 = v128 + v124;
                  uint64_t v130 = (unsigned char *)(v128 + v124);
                  *uint64_t v130 = v120;
                  std::string::size_type v122 = (std::string::size_type)(v130 + 1);
                  if (v121 != (char *)v123)
                  {
                    v131 = &v121[~v123];
                    do
                    {
                      char v132 = *--v121;
                      (v131--)[v128] = v132;
                    }
                    while (v121 != (char *)v123);
                    unint64_t v121 = (char *)__p.__r_.__value_.__r.__words[0];
                    std::string::size_type v129 = v128;
                  }
                  __p.__r_.__value_.__r.__words[0] = v129;
                  __p.__r_.__value_.__r.__words[2] = v128 + v127;
                  unint64_t v117 = *(char **)__vala;
                  if (v121) {
                    operator delete(v121);
                  }
                }
                else
                {
                  *(unsigned char *)__p.__r_.__value_.__l.__size_ = v119;
                  std::string::size_type v122 = (std::string::size_type)(v121 + 1);
                }
                __p.__r_.__value_.__l.__size_ = v122;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                v118 += 2;
              }
              while (v118 != v117);
            }
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v178.__r_.__value_.__l.__data_);
            }
            uint64_t v21 = v153;
            if (BYTE8(v157))
            {
              std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v156, __p.__r_.__value_.__l.__data_, (char *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
            }
            else
            {
              v156[0] = 0;
              v156[1] = 0;
              *(void *)&long long v157 = 0;
              std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v156, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
              BYTE8(v157) = 1;
            }
            if (DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v166, (const char **)"out", v133))
            {
LABEL_55:
              char v38 = 1;
            }
            else
            {
              DSPGraph::Interpreter::match((DSPGraph::Interpreter *)&v166, (const char **)"in", v134);
LABEL_255:
              char v38 = 0;
            }
            uint64_t v135 = *((void *)v155 + 1);
            unsigned int data = v170.__r_.__value_.__l.__data_;
            std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100]((uint64_t)&__str, (uint64_t)v156);
            DSPGraph::Graph::addProperty(v135, data, (uint64_t)&__str, v38);
            if (v176 && __str.__r_.__value_.__r.__words[0])
            {
              __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (__p.__r_.__value_.__r.__words[0]) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (!BYTE8(v157)) {
              goto LABEL_263;
            }
            uint64_t v90 = v156[0];
            if (!v156[0]) {
              goto LABEL_263;
            }
            goto LABEL_155;
          case 9:
            uint64_t v47 = (unsigned __int8 *)&v163;
            if (v165 < 0) {
              uint64_t v47 = (unsigned __int8 *)v163;
            }
            uint64_t v48 = *(void *)v47;
            int v49 = v47[8];
            if (v48 != 0x6172615065726977 || v49 != 109) {
              goto LABEL_140;
            }
            v156[0] = 0;
            v156[1] = 0;
            LODWORD(v157) = 0;
            memset(&__str, 0, 20);
            if (!DSPGraph::Interpreter::parseParamEndpoint((uint64_t)v155, (DSPGraph *)&v166, (uint64_t)v156))
            {
              std::string::basic_string[abi:ne180100]<0>(&v178, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&v172, "expected source endpoint in 'wireParam' command");
              DSPGraph::ThrowException(1886548769, (long long *)&v178, 1011, &buf, (long long *)&v172);
            }
            if (!DSPGraph::Interpreter::parseParamEndpoint((uint64_t)v155, (DSPGraph *)&v166, (uint64_t)&__str))
            {
              std::string::basic_string[abi:ne180100]<0>(&v178, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWireParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&v172, "expected destination endpoint in 'wireParam' command");
              DSPGraph::ThrowException(1886548769, (long long *)&v178, 1014, &buf, (long long *)&v172);
            }
            v178.__r_.__value_.__s.__data_[0] = 0;
            DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)&v166, (const char **)&v178.__r_.__value_.__l.__data_, v51);
            DSPGraph::Graph::connectParams(*((void *)v155 + 1), (uint64_t)v156, (uint64_t)&__str, v178.__r_.__value_.__s.__data_[0]);
            goto LABEL_263;
          case 12:
            uint64_t v52 = &v163;
            if (v165 < 0) {
              uint64_t v52 = v163;
            }
            uint64_t v53 = *(void *)v52;
            int v54 = v52[2];
            if (v53 != 0x706F725065726977 || v54 != 2037674597) {
              goto LABEL_140;
            }
            v156[0] = 0;
            v156[1] = 0;
            LODWORD(v157) = 0;
            memset(&__str, 0, 20);
            if (!DSPGraph::Interpreter::parsePropertyEndpoint((uint64_t)v155, (DSPGraph *)&v166, (uint64_t)v156))
            {
              std::string::basic_string[abi:ne180100]<0>(&v178, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWirePropertyCommand");
              std::string::basic_string[abi:ne180100]<0>(&v172, "expected source endpoint in 'wireProperty' command");
              DSPGraph::ThrowException(1886548769, (long long *)&v178, 1026, &buf, (long long *)&v172);
            }
            if (!DSPGraph::Interpreter::parsePropertyEndpoint((uint64_t)v155, (DSPGraph *)&v166, (uint64_t)&__str))
            {
              std::string::basic_string[abi:ne180100]<0>(&v178, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&buf, "parseWirePropertyCommand");
              std::string::basic_string[abi:ne180100]<0>(&v172, "expected destination endpoint in 'wireProperty' command");
              DSPGraph::ThrowException(1886548769, (long long *)&v178, 1029, &buf, (long long *)&v172);
            }
            v178.__r_.__value_.__s.__data_[0] = 0;
            DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)&v166, (const char **)&v178.__r_.__value_.__l.__data_, v56);
            DSPGraph::Graph::connectProperties(*((void *)v155 + 1), (uint64_t)v156, (uint64_t)&__str, v178.__r_.__value_.__s.__data_[0]);
            goto LABEL_263;
          case 14:
            BOOL v84 = (uint64_t *)&v163;
            if (v165 < 0) {
              BOOL v84 = (uint64_t *)v163;
            }
            uint64_t v85 = *v84;
            uint64_t v86 = *(uint64_t *)((char *)v84 + 6);
            if (v85 != 0x7061724765726977 || v86 != 0x6D61726150687061) {
              goto LABEL_140;
            }
            LODWORD(v172.__r_.__value_.__l.__data_) = 0;
            if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)&v166, (const char **)&v172.__r_.__value_.__l.__data_, (unsigned int *)1) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(v156, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&__str, "parseWireGraphParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&v178, "expected parameter ID in 'wireGraphParam' command");
              DSPGraph::ThrowException(1886548769, (long long *)v156, 1041, (long long *)&__str, (long long *)&v178);
            }
            v156[0] = 0;
            v156[1] = 0;
            LODWORD(v157) = 0;
            if (!DSPGraph::Interpreter::parseParamEndpoint((uint64_t)v155, (DSPGraph *)&v166, (uint64_t)v156))
            {
              std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v178, "parseWireGraphParamCommand");
              std::string::basic_string[abi:ne180100]<0>(&buf, "expected endpoint in 'wireGraphParam' command");
              DSPGraph::ThrowException(1886548769, (long long *)&__str, 1046, (long long *)&v178, &buf);
            }
            DSPGraph::Graph::connectParameter(*((void *)v155 + 1), v172.__r_.__value_.__l.__data_, (long long *)v156);
            goto LABEL_263;
          case 17:
            AudioStreamBasicDescription v78 = (uint64_t *)&v163;
            if (v165 < 0) {
              AudioStreamBasicDescription v78 = (uint64_t *)v163;
            }
            uint64_t v79 = *v78;
            uint64_t v80 = v78[1];
            int v81 = *((unsigned __int8 *)v78 + 16);
            if (v79 != 0x7061724765726977 || v80 != 0x747265706F725068 || v81 != 121) {
              goto LABEL_140;
            }
            DSPGraph::Interpreter::parseWireGraphPropertyCommand(v155, (const char **)&v166);
            goto LABEL_263;
          default:
LABEL_140:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "order"))
            {
              DSPGraph::Interpreter::parseOrderCommand(v155, (const char **)&v166);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "set"))
            {
              DSPGraph::Interpreter::parseSetCommand(v155, (const char **)&v166);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "beginSubset"))
            {
              DSPGraph::Interpreter::parseBeginSubsetCommand(v155, (const char **)&v166);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "endSubset"))
            {
              *((void *)v155 + 25) -= 8;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "graphName"))
            {
              DSPGraph::Interpreter::parseGraphNameCommand(v155, (const char **)&v166);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "componentName"))
            {
              DSPGraph::Interpreter::parseComponentNameCommand((DSPGraph::Interpreter *)&v166, v91);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "format"))
            {
              DSPGraph::Interpreter::parseNamedFormatCommand(v155, (const char **)&v166);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "jack"))
            {
              DSPGraph::Interpreter::parseJackCommand(v155, (const char **)&v166);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "record"))
            {
              DSPGraph::Interpreter::parseRecordCommand(v155, (const char **)&v166);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "inject"))
            {
              DSPGraph::Interpreter::parseInjectCommand(v155, (const char **)&v166);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "analysis"))
            {
              DSPGraph::Interpreter::parseAnalysisCommand(v155, (const char **)&v166);
            }
            else
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v163, "analysisDefine"))
              {
                std::string::basic_string[abi:ne180100]<0>(v156, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
                std::string::basic_string[abi:ne180100]<0>(&__str, "interpretLine");
                uint64_t v149 = &v163;
                if (v165 < 0) {
                  uint64_t v149 = v163;
                }
                DSPGraph::strprintf((DSPGraph *)"unknown command name '%s'\n", v148, v149);
              }
              DSPGraph::Interpreter::parseAnalysisDefineCommand(v155, (const char **)&v166);
            }
            goto LABEL_263;
        }
      }
      if (SHIBYTE(v165) < 0) {
        operator delete(v163);
      }
    }
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v167.__r_.__value_.__l.__data_);
    }
  }
  DSPGraph::Graph::pruneSubsets(*((DSPGraph::Graph **)v155 + 1));
  uint64_t v137 = *((void *)v155 + 1);
  *((void *)v155 + 1) = 0;
  *a5 = v137;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
}

void sub_18FEEC42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_18FEEC454(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18FEEC45CLL);
  }
  __clang_call_terminate(a1);
}

uint64_t DSPGraph::Interpreter::parseString(DSPGraph *a1, uint64_t a2)
{
  DSPGraph::skipspace(a1, (const char **)a2);
  if ((DSPGraph::Interpreter::parseName(a1, a2) & 1) == 0)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
    uint64_t v4 = *(void *)a1;
    if (**(unsigned char **)a1 != 34) {
      return 0;
    }
    for (i = *(void *)a1; ; uint64_t v4 = i)
    {
      int v7 = *(unsigned __int8 *)++i;
      int v6 = v7;
      if (v7 == 34) {
        break;
      }
      if (v6 == 10 || v6 == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v11, "parseString");
        std::string::basic_string[abi:ne180100]<0>(&v10, "unterminated string");
        DSPGraph::ThrowException(1886548769, &v12, 413, &v11, &v10);
      }
      std::string::push_back((std::string *)a2, v6);
    }
    *(void *)a1 = v4 + 2;
  }
  return 1;
}

void sub_18FEEC578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Interpreter::parseName(DSPGraph *a1, uint64_t a2)
{
  DSPGraph::skipspace(a1, (const char **)a2);
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(unsigned char **)a1;
  unsigned int v5 = **(char **)a1;
  if ((v5 & 0x80000000) != 0)
  {
    int v6 = __maskrune(v5, 0x100uLL);
    uint64_t v4 = *(unsigned char **)a1;
    LOBYTE(v5) = **(unsigned char **)a1;
  }
  else
  {
    int v6 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v5 + 60) & 0x100;
  }
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v5 == 95;
  }
  uint64_t v8 = v7;
  if (v7)
  {
    std::string::push_back((std::string *)a2, v5);
    int v11 = v4[1];
    long long v10 = v4 + 1;
    char v9 = v11;
    if (!v11)
    {
LABEL_23:
      *(void *)a1 = v10;
      return v8;
    }
    uint64_t v12 = MEMORY[0x1E4F14390];
    while (1)
    {
      int v13 = v9;
      if (v9 < 0)
      {
        if (!__maskrune(v9, 0x500uLL))
        {
LABEL_21:
          if (!memchr("_-+=|./:!@#$%^&*<>?~", v13, 0x15uLL)) {
            goto LABEL_23;
          }
        }
      }
      else if ((*(_DWORD *)(v12 + 4 * v9 + 60) & 0x500) == 0)
      {
        goto LABEL_21;
      }
      std::string::push_back((std::string *)a2, v13);
      int v14 = *++v10;
      char v9 = v14;
      if (!v14) {
        goto LABEL_23;
      }
    }
  }
  return v8;
}

uint64_t DSPGraph::skipspace(DSPGraph *this, const char **a2)
{
  unint64_t v3 = *(unsigned char **)this;
  uint64_t v4 = MEMORY[0x1E4F14390];
  do
  {
    unsigned int v5 = (char)*v3;
    if ((v5 & 0x80000000) != 0) {
      uint64_t result = __maskrune((char)*v3, 0x4000uLL);
    }
    else {
      uint64_t result = *(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000;
    }
    BOOL v7 = v5 == 10 || result == 0;
    char v8 = !v7;
    if (v7)
    {
      if (v5 != 59) {
        return result;
      }
      unint64_t v3 = *(unsigned char **)this;
      do
      {
        int v9 = *v3;
        if (!*v3) {
          break;
        }
        *(void *)this = ++v3;
      }
      while (v9 != 10);
    }
    else
    {
      unint64_t v3 = (unsigned char *)(*(void *)this + 1);
      *(void *)this = v3;
    }
  }
  while ((v8 & 1) != 0);
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

uint64_t DSPGraph::Interpreter::parsePortDesc(char **a1, const char **a2, const char **a3)
{
  BOOL v14 = *a1;
  *(_DWORD *)a3 = 0;
  DSPGraph::skipspace((DSPGraph *)&v14, a2);
  if (*v14 == 40)
  {
    ++v14;
    uint64_t result = DSPGraph::Interpreter::parseString((DSPGraph *)&v14, (uint64_t)a2);
    if (!result) {
      return result;
    }
    DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)&v14, a3, v7);
    DSPGraph::skipspace((DSPGraph *)&v14, v8);
    int v9 = v14;
    if (*v14 != 41)
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(v12, "parsePortDesc");
      DSPGraph::strprintf((DSPGraph *)"expected ')' at end of port description, got '%c'", v11, *v9);
    }
    int v10 = v14 + 1;
  }
  else
  {
    uint64_t result = DSPGraph::Interpreter::parseString((DSPGraph *)&v14, (uint64_t)a2);
    if (!result) {
      return result;
    }
    int v10 = v14;
  }
  *a1 = v10;
  return 1;
}

void sub_18FEECAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::getFormat(int8x8_t *a1, unsigned __int8 *a2, void *a3)
{
  unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v7 = a1[76];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & v6;
    }
    BOOL v12 = *(unsigned __int8 ***)(*(void *)&a1[75] + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
          {
            *a3 = i + 40;
            return 1;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
          }
          else
          {
            v14 &= *(void *)&v7 - 1;
          }
          if (v14 != v11) {
            return 0;
          }
        }
      }
    }
  }
  return 0;
}

float *DSPGraph::Graph::connect(int8x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float **a6, uint64_t *a7)
{
  if (a1[95].i8[1])
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v31, "connect");
    std::string::basic_string[abi:ne180100]<0>(&v30, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v32, 1164, &v31, &v30);
  }
  if (a6)
  {
    if (a7)
    {
      unint64_t v11 = (float *)*a7;
      BOOL v12 = *a6;
      if (!*a6)
      {
        if (!v11) {
          operator new();
        }
        *a6 = v11;
        return v11;
      }
      if (v11)
      {
        if (v12 != v11)
        {
          if (*((void *)v11 + 1))
          {
            std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v31, "connect");
            std::string::basic_string[abi:ne180100]<0>(&v30, "destination jack already has a source.");
            DSPGraph::ThrowException(1633903905, &v32, 1182, &v31, &v30);
          }
LABEL_15:
          DSPGraph::Wire::addAll((DSPGraph::Wire *)v12, (DSPGraph::Wire *)v11);
          DSPGraph::Graph::removeWire(a1, (unint64_t)v11);
          goto LABEL_16;
        }
        return v11;
      }
LABEL_16:
      *a7 = (uint64_t)v12;
      return v12;
    }
    uint64_t v16 = *(void *)(a3 + 64);
    if (a5 >= (unint64_t)((*(void *)(a3 + 72) - v16) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v31, "in");
      unsigned int v26 = (void *)(a3 + 32);
      if (*(char *)(a3 + 55) < 0) {
        unsigned int v26 = (void *)*v26;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v25, v26, (uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 5, a5);
    }
    unint64_t v17 = (void *)(v16 + 32 * a5);
    if ((*(uint64_t (**)(void *))(*v17 + 40))(v17))
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v31, "connect");
      std::string::basic_string[abi:ne180100]<0>(&v30, "The input port already has a connection.");
      DSPGraph::ThrowException(1633903905, &v32, 1209, &v31, &v30);
    }
    BOOL v12 = *a6;
    if ((*(uint64_t (**)(void *))(*v17 + 40))(v17))
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v31, "connect");
      std::string::basic_string[abi:ne180100]<0>(&v30, "The input port already has a connection.");
      DSPGraph::ThrowException(1633903905, &v32, 1215, &v31, &v30);
    }
    if (!v12) {
      operator new();
    }
LABEL_28:
    std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>(v12 + 4, (unint64_t)v17, (uint64_t)v17);
    v17[2] = v12;
    return v12;
  }
  uint64_t v13 = *(void *)(a2 + 88);
  if (a4 >= (unint64_t)((*(void *)(a2 + 96) - v13) >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v31, "out");
    unint64_t v23 = (void *)(a2 + 32);
    if (*(char *)(a2 + 55) < 0) {
      unint64_t v23 = (void *)*v23;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v22, v23, (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 5, a4);
  }
  unint64_t v14 = (DSPGraph::OutputPort *)(v13 + 32 * a4);
  if (!a7)
  {
    uint64_t v18 = *(void *)(a3 + 64);
    if (a5 >= (unint64_t)((*(void *)(a3 + 72) - v18) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v31, "in");
      uint64_t v29 = (void *)(a3 + 32);
      if (*(char *)(a3 + 55) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v28, v29, (uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 5, a5);
    }
    unint64_t v17 = (void *)(v18 + 32 * a5);
    BOOL v12 = (float *)(*(uint64_t (**)(DSPGraph::OutputPort *))(*(void *)v14 + 40))(v14);
    if ((*(uint64_t (**)(void *))(*v17 + 40))(v17))
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v31, "connect");
      std::string::basic_string[abi:ne180100]<0>(&v30, "The input port already has a connection.");
      DSPGraph::ThrowException(1633903905, &v32, 1267, &v31, &v30);
    }
    if (!v12) {
      operator new();
    }
    goto LABEL_28;
  }
  uint64_t v15 = (*(uint64_t (**)(DSPGraph::OutputPort *))(*(void *)v14 + 40))(v14);
  unint64_t v11 = (float *)*a7;
  if (!v15)
  {
    if (!v11) {
      operator new();
    }
    DSPGraph::Wire::setSource(*a7, v14);
    return v11;
  }
  BOOL v12 = (float *)v15;
  if (!v11) {
    goto LABEL_16;
  }
  if ((float *)v15 != v11)
  {
    if (*((void *)v11 + 1))
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v31, "connect");
      std::string::basic_string[abi:ne180100]<0>(&v30, "The jack already has a source.");
      DSPGraph::ThrowException(1633903905, &v32, 1241, &v31, &v30);
    }
    goto LABEL_15;
  }
  return v12;
}

void sub_18FEED31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          int v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint8x8_t v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            long long v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *uint8x8_t v24 = *v30;
                  *long long v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  long long v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint8x8_t v24 = v30;
                long long v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  long long v32 = *(void **)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *unint64_t v14 = *v33;
LABEL_72:
    *uint64_t v33 = v14;
    goto LABEL_73;
  }
  *unint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_18FEED7F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Wire::setGlobalFormat(uint64_t result, int16x8_t *__s1)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 64))
  {
    int v4 = *(_DWORD **)(result + 120);
    uint64_t result = memcmp(__s1, v4, 0x28uLL);
    if (result || __s1[2].i32[2] != v4[10])
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
      std::string::basic_string[abi:ne180100]<0>(v20, "setGlobalFormat");
      uint64_t v5 = *(void *)(*(void *)(v3 + 8) + 8);
      unint64_t v6 = (void *)(v5 + 32);
      if (*(char *)(v5 + 55) < 0) {
        unint64_t v6 = (void *)*v6;
      }
      int16x8_t v7 = __s1[1];
      int16x8_t v22 = *__s1;
      int16x8_t v23 = v7;
      uint64_t v24 = __s1[2].i64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)v18, &v22, *(double *)v22.i64, v7);
      int v8 = v19;
      unint64_t v9 = (void *)v18[0];
      uint64_t v10 = __s1[2].u32[2];
      unint64_t v11 = *(int16x8_t **)(v3 + 120);
      int16x8_t v22 = *v11;
      int16x8_t v23 = v11[1];
      uint64_t v24 = v11[2].i64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)v16, &v22, *(double *)v23.i64, v12);
      if (v8 >= 0) {
        unint64_t v14 = v18;
      }
      else {
        unint64_t v14 = v9;
      }
      if (v17 >= 0) {
        float v15 = v16;
      }
      else {
        float v15 = (void *)v16[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Wire from box %s: format\n%s, %u block size\ndoes not match the one previously set\n%s, %u block size\n", v13, v6, v14, v10, v15, *(unsigned int *)(*(void *)(v3 + 120) + 40));
    }
  }
  else
  {
    *(unsigned char *)(result + 64) = 1;
  }
  *(void *)(v3 + 120) = __s1;
  return result;
}

void sub_18FEED970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<DSPGraph::Wire *,std::hash<DSPGraph::Wire *>,std::equal_to<DSPGraph::Wire *>,std::allocator<DSPGraph::Wire *>>::__emplace_unique_key_args<DSPGraph::Wire *,DSPGraph::Wire * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          int16x8_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            long long v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *uint64_t v24 = *v30;
                  *long long v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  long long v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                long long v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  long long v32 = *(void **)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *unint64_t v14 = *v33;
LABEL_72:
    *uint64_t v33 = v14;
    goto LABEL_73;
  }
  *unint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_18FEEDDE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

DSPGraph::Wire *DSPGraph::Wire::Wire(DSPGraph::Wire *this, DSPGraph::OutputPort *a2)
{
  *(void *)this = &unk_1EDF9C520;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 1065353216;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 28) = 1;
  *((void *)this + 15) = (char *)this + 72;
  if (a2) {
    DSPGraph::Wire::setSource((uint64_t)this, a2);
  }
  return this;
}

void sub_18FEEDE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Wire::setSource(uint64_t this, DSPGraph::OutputPort *a2)
{
  uint64_t v2 = this;
  unint64_t v3 = *(DSPGraph::OutputPort **)(this + 8);
  if (v3) {
    BOOL v4 = v3 == a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
    std::string::basic_string[abi:ne180100]<0>(v16, "setSource");
    unint64_t v7 = *(char **)(*(void *)(v2 + 8) + 8);
    unint64_t v8 = v7 + 32;
    if (v7[55] < 0) {
      unint64_t v8 = (void *)*v8;
    }
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v7 + 16))(v7);
    DSPGraph::strprintf((DSPGraph *)"wire already has a source: %s %s output %u", v10, v8, v9, *(unsigned int *)(*(void *)(v2 + 8) + 24));
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (v5) {
    BOOL v6 = v5 == this;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
    std::string::basic_string[abi:ne180100]<0>(v16, "setSource");
    int16x8_t v12 = (char *)*((void *)a2 + 1);
    unint64_t v13 = v12 + 32;
    if (v12[55] < 0) {
      unint64_t v13 = (void *)*v13;
    }
    uint64_t v14 = (*(uint64_t (**)(char *))(*(void *)v12 + 16))(v12);
    DSPGraph::strprintf((DSPGraph *)"output port already has a wire: %s %s output %u", v15, v13, v14, *((unsigned int *)a2 + 6));
  }
  *(void *)(this + 8) = a2;
  *((void *)a2 + 2) = this;
  return this;
}

void sub_18FEEE014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::Interpreter::match(DSPGraph::Interpreter *this, const char **a2, const char *a3)
{
  DSPGraph::skipspace(this, a2);
  size_t v5 = strlen((const char *)a2);
  uint64_t v6 = *(void *)this;
  int v7 = strncmp(*(const char **)this, (const char *)a2, v5);
  if (!v7) {
    *(void *)this = v6 + v5;
  }
  return v7 == 0;
}

void DSPGraph::Graph::connectParameter(uint64_t a1, unsigned int a2, long long *a3)
{
  if (*(unsigned char *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "connectParameter");
    std::string::basic_string[abi:ne180100]<0>(&v17, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v19, 2319, &v18, &v17);
  }
  BOOL v4 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)(a1 + 520), a2);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "connectParameter");
    std::string::basic_string[abi:ne180100]<0>(&v17, "connectParameter : inParamID not found");
    DSPGraph::ThrowException(1852204065, &v19, 2324, &v18, &v17);
  }
  size_t v5 = v4;
  int v7 = (void *)v4[6];
  unint64_t v6 = v4[7];
  if ((unint64_t)v7 >= v6)
  {
    uint8x8_t v10 = (void *)v4[5];
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - v10) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v10) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = (char *)operator new(24 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    float v15 = &v14[8 * (v7 - v10)];
    *(_OWORD *)float v15 = *a3;
    *((void *)v15 + 2) = *((void *)a3 + 2);
    uint64_t v9 = v15 + 24;
    if (v7 != v10)
    {
      do
      {
        long long v16 = *(_OWORD *)(v7 - 3);
        *((_DWORD *)v15 - 2) = *((_DWORD *)v7 - 2);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v7 -= 3;
      }
      while (v7 != v10);
      int v7 = (void *)v5[5];
    }
    void v5[5] = (uint64_t)v15;
    v5[6] = (uint64_t)v9;
    v5[7] = (uint64_t)&v14[24 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    long long v8 = *a3;
    v7[2] = *((void *)a3 + 2);
    *(_OWORD *)int v7 = v8;
    uint64_t v9 = v7 + 3;
  }
  v5[6] = (uint64_t)v9;
}

void sub_18FEEE2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::connectParams(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(unsigned char *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v25, "connectParams");
    std::string::basic_string[abi:ne180100]<0>(&v24, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v22, 1286, &v25, &v24);
  }
  long long v22 = *(_OWORD *)a2;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)(a2 + 16);
  *(_OWORD *)&v23[8] = *(_OWORD *)a3;
  *(_DWORD *)&v23[24] = *(_DWORD *)(a3 + 16);
  uint64_t v9 = *(char **)(a1 + 480);
  unint64_t v8 = *(void *)(a1 + 488);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = *(char **)(a1 + 472);
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v11) >> 3) + 1;
    if (v12 > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (void)v11) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v14 = 0x492492492492492;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x492492492492492) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v15 = (char *)operator new(56 * v14);
    }
    else
    {
      float v15 = 0;
    }
    long long v16 = &v15[8 * ((v9 - v11) >> 3)];
    long long v17 = *(_OWORD *)v23;
    *(_OWORD *)long long v16 = v22;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v23[16];
    v16[48] = a4;
    uint8x8_t v10 = v16 + 56;
    if (v9 != v11)
    {
      do
      {
        long long v18 = *(_OWORD *)(v9 - 56);
        long long v19 = *(_OWORD *)(v9 - 40);
        long long v20 = *(_OWORD *)(v9 - 24);
        *(v16 - 8) = *(v9 - 8);
        *(_OWORD *)(v16 - 24) = v20;
        *(_OWORD *)(v16 - 40) = v19;
        *(_OWORD *)(v16 - 56) = v18;
        v16 -= 56;
        v9 -= 56;
      }
      while (v9 != v11);
      uint64_t v9 = *(char **)(a1 + 472);
    }
    *(void *)(a1 + 472) = v16;
    *(void *)(a1 + 480) = v10;
    *(void *)(a1 + 488) = &v15[56 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v9 = v22;
    *((_OWORD *)v9 + 1) = *(_OWORD *)v23;
    *((_OWORD *)v9 + 2) = *(_OWORD *)&v23[16];
    v9[48] = a4;
    uint8x8_t v10 = v9 + 56;
  }
  *(void *)(a1 + 480) = v10;
  long long v22 = *(_OWORD *)a2;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)(a2 + 16);
  uint64_t v21 = *(DSPGraph::Box **)a3;
  *(void *)&v23[8] = *(void *)(a3 + 8);
  *(_DWORD *)&v23[16] = *(_DWORD *)(a3 + 16);
  v23[20] = a4;
  DSPGraph::Box::addParameterTap(v21, (const DSPGraph::ParameterTap *)&v22);
}

void sub_18FEEE550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::addParameterTap(DSPGraph::Box *this, const DSPGraph::ParameterTap *a2)
{
  size_t v5 = (char *)*((void *)this + 20);
  unint64_t v4 = *((void *)this + 21);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v9 = (char *)*((void *)this + 19);
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v9) >> 3) + 1;
    if (v10 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v9) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(40 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * ((v5 - v9) >> 3)];
    long long v15 = *((_OWORD *)a2 + 1);
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((_OWORD *)v14 + 1) = v15;
    *((void *)v14 + 4) = *((void *)a2 + 4);
    unint64_t v8 = v14 + 40;
    if (v5 != v9)
    {
      do
      {
        long long v16 = *(_OWORD *)(v5 - 40);
        long long v17 = *(_OWORD *)(v5 - 24);
        *(void *)(v14 - 11) = *(void *)(v5 - 11);
        *(_OWORD *)(v14 - 24) = v17;
        *(_OWORD *)(v14 - 40) = v16;
        v14 -= 40;
        v5 -= 40;
      }
      while (v5 != v9);
      size_t v5 = (char *)*((void *)this + 19);
    }
    *((void *)this + 19) = v14;
    *((void *)this + 20) = v8;
    *((void *)this + 21) = &v13[40 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
    long long v7 = *((_OWORD *)a2 + 1);
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)size_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    unint64_t v8 = v5 + 40;
  }
  *((void *)this + 20) = v8;
  atomic_fetch_add((atomic_uint *volatile)this + 192, 1u);
}

uint64_t DSPGraph::Interpreter::parseBool(DSPGraph::Interpreter *this, const char **a2, BOOL *a3)
{
  DSPGraph::skipspace(this, a2);
  uint64_t v19 = *(void *)this;
  memset(&__p, 0, sizeof(__p));
  uint64_t v21 = v19;
  *(void *)unsigned int __val = 0;
  if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v21, (const char **)__val, v5)
    || __val[1])
  {
    if ((DSPGraph::Interpreter::parseName((DSPGraph *)&v19, (uint64_t)&__p) & 1) == 0)
    {
      uint64_t v9 = 0;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_28;
      }
      return v9;
    }
  }
  else
  {
    uint64_t v19 = v21;
    std::to_string(&__p, __val[0]);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size != 1)
  {
    if (size != 5)
    {
      if (size == 4)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        if (LODWORD(p_p->__r_.__value_.__l.__data_) == 1702195828) {
          goto LABEL_20;
        }
      }
      goto LABEL_27;
    }
    unint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v13 = &__p;
    }
    int data = (int)v13->__r_.__value_.__l.__data_;
    int v15 = v13->__r_.__value_.__s.__data_[4];
    if (data != 1936482662 || v15 != 101) {
      goto LABEL_27;
    }
LABEL_30:
    char v12 = 0;
LABEL_31:
    *(unsigned char *)a2 = v12;
    *(void *)this = v19;
    uint64_t v9 = 1;
    if ((v7 & 0x80) == 0) {
      return v9;
    }
    goto LABEL_28;
  }
  unint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v10 = &__p;
  }
  int v11 = v10->__r_.__value_.__s.__data_[0];
  if (v11 == 48) {
    goto LABEL_30;
  }
  if (v11 == 49)
  {
LABEL_20:
    char v12 = 1;
    goto LABEL_31;
  }
LABEL_27:
  uint64_t v9 = 0;
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_28:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_18FEEE860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::pruneSubsets(DSPGraph::Graph *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 114);
  uint64_t v2 = (uint64_t *)*((void *)this + 113);
  if (v2 != v1)
  {
    while (*(void *)(*v2 + 48))
    {
      if (++v2 == v1) {
        return;
      }
    }
    if (v2 != v1)
    {
      unint64_t v4 = v2 + 1;
      if (v2 + 1 != v1)
      {
        do
        {
          uint64_t v5 = *v4;
          if (*(void *)(*v4 + 48))
          {
            uint64_t *v4 = 0;
            uint64_t v6 = *v2;
            uint64_t *v2 = v5;
            if (v6) {
              std::default_delete<DSPGraph::Subset>::operator()[abi:ne180100](v6);
            }
            ++v2;
          }
          ++v4;
        }
        while (v4 != v1);
        uint64_t v1 = (uint64_t *)*((void *)this + 114);
      }
    }
    if (v2 != v1)
    {
      while (v1 != v2)
      {
        uint64_t v8 = *--v1;
        uint64_t v7 = v8;
        uint64_t *v1 = 0;
        if (v8) {
          std::default_delete<DSPGraph::Subset>::operator()[abi:ne180100](v7);
        }
      }
      *((void *)this + 114) = v2;
    }
  }
}

void DSPGraph::Interpreter::NewGraph(DSPGraph::Interpreter *this)
{
}

void sub_18FEEE9C4(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10B3C4046E0D9ECLL);
  _Unwind_Resume(a1);
}

void DSPGraph::Graph::addInput(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 761)) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v3, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v2, "addInput");
  std::string::basic_string[abi:ne180100]<0>(&v1, "graph is configured");
  DSPGraph::ThrowException(1667655457, &v3, 947, &v2, &v1);
}

void sub_18FEEEBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::unconfigure(DSPGraph::Graph *this)
{
  if (*((unsigned char *)this + 762))
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, "unconfigure");
    std::string::basic_string[abi:ne180100]<0>(&v15, "graph is initialized. uninitialize before unconfiguring");
    DSPGraph::ThrowException(1768843553, &v17, 816, &v16, &v15);
  }
  for (uint64_t i = (uint64_t **)*((void *)this + 3); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[2] + 624))(i[2]);
  uint64_t v3 = *((void *)this + 32);
  uint64_t v4 = *((void *)this + 33);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *(void **)v3;
      uint64_t v6 = *(uint64_t **)(*(void *)v3 + 176);
      uint64_t v7 = *(uint64_t **)(*(void *)v3 + 184);
      while (v6 != v7)
      {
        uint64_t v8 = *v6++;
        (*(void (**)(uint64_t))(*(void *)v8 + 688))(v8);
      }
      for (char j = (uint64_t **)v5[14]; j; char j = (uint64_t **)*j)
        (*(void (**)(uint64_t *))(*j[2] + 688))(j[2]);
      int v11 = (uint64_t *)v5[25];
      unint64_t v10 = (uint64_t *)v5[26];
      while (v11 != v10)
      {
        uint64_t v12 = *v11++;
        (*(void (**)(uint64_t))(*(void *)v12 + 688))(v12);
      }
      v3 += 8;
    }
    while (v3 != v4);
    uint64_t v3 = *((void *)this + 32);
  }
  *((void *)this + 33) = v3;
  if (*((void *)this + 30))
  {
    std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__deallocate_node(*((void **)this + 29));
    *((void *)this + 29) = 0;
    uint64_t v13 = *((void *)this + 28);
    if (v13)
    {
      for (uint64_t k = 0; k != v13; ++k)
        *(void *)(*((void *)this + 27) + 8 * k) = 0;
    }
    *((void *)this + 30) = 0;
  }
  *((unsigned char *)this + 761) = 0;
}

void sub_18FEEEE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::unconfigure(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t DSPGraph::RingBufferBox::unconfigureRingBuffer(uint64_t this)
{
  *(void *)(this + 772) = 0;
  return this;
}

OSStatus AudioConverterGetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  AudioConverterPropertyID v9 = inPropertyID;
  uint64_t v7 = outPropertyData;
  uint64_t v8 = ioPropertyDataSize;
  v5[0] = &v9;
  v5[1] = &v8;
  v5[2] = &v7;
  v6[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
  v6[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return with_resolved((int)inAudioConverter, v6);
}

OSStatus AudioUnitRender(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inOutputBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v7 = *(void *)&inNumberFrames;
  uint64_t v8 = *(void *)&inOutputBusNumber;
  int v11 = (RenderContextChangeGenerator *)(*(uint64_t (**)(AudioUnit))(*(void *)inUnit + 8))(inUnit);
  if (!v11) {
    return 560947818;
  }
  uint64_t v12 = v11;
  if (*(_WORD *)((*(uint64_t (**)(RenderContextChangeGenerator *))v11->mLastWorkgroup)(v11) + 38) != 24949) {
    return -3000;
  }
  uint64_t v13 = *(void *)((*(uint64_t (**)(RenderContextChangeGenerator *))v12->mLastWorkgroup)(v12) + 112);
  unint64_t v14 = *(uint64_t (**)(uint64_t (**)(void), AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))(v13 + 112);
  if (!v14) {
    return -4;
  }
  if (LOBYTE(v12[3].mLastWorkgroup))
  {
    uint64_t v17 = v13;
    RenderContextChangeGenerator::checkChange(v12 + 2);
    unint64_t v14 = *(uint64_t (**)(uint64_t (**)(void), AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))(v17 + 112);
  }
  mObserver = (uint64_t (**)(void))v12[1].mObserver;
  return v14(mObserver, ioActionFlags, inTimeStamp, v8, v7, ioData);
}

void ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  assertXPCServiceReachable(&cfstr_ComAppleAudioA_0.isa);
  long long v2 = (void *)[objc_alloc(MEMORY[0x1E4F29268]) initWithMachServiceName:@"com.apple.audio.AudioComponentRegistrar" options:4096];
  uint64_t v3 = AudioComponentRegistrarProtocol_XPCInterface();
  [v2 setRemoteObjectInterface:v3];

  uint64_t v4 = objc_opt_new();
  [v2 setExportedObject:v4];

  uint64_t v5 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EDFB3798];
  [v2 setExportedInterface:v5];

  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke_2;
  void v8[3] = &__block_descriptor_40_e5_v8__0l;
  void v8[4] = v1;
  [v2 setInterruptionHandler:v8];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke_3;
  void v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v1;
  [v2 setInvalidationHandler:v7];
  [v2 resume];
  uint64_t v6 = *(void **)(v1 + 88);
  *(void *)(v1 + 88) = v2;
}

void sub_18FEEF1BC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void assertXPCServiceReachable(NSString *a1)
{
  long long v2 = a1;
  int v3 = assertXPCServiceReachable(NSString *)::gAssertReachable;
  if (assertXPCServiceReachable(NSString *)::gAssertReachable < 0)
  {
    CASmartPreferences::Read((CASmartPreferences *)@"AssertComponentRegistrarReachable", @"com.apple.coreaudio", (const __CFString *)&assertXPCServiceReachable(NSString *)::gAssertReachable, v1);
    int v3 = assertXPCServiceReachable(NSString *)::gAssertReachable;
  }
  if (v3 >= 1
    && (*(void *)special_port = 0,
        task_get_special_port(*MEMORY[0x1E4F14960], 4, &special_port[1]),
        bootstrap_look_up(special_port[1], [(NSString *)v2 UTF8String], special_port)))
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  else
  {
  }
}

void sub_18FEEF298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *CASmartPreferences::Read(CASmartPreferences *this, const __CFString *a2, const __CFString *a3, int *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v10[0] = &unk_1EDFA07B0;
  v10[1] = a3;
  _OWORD v10[3] = v10;
  CASmartPreferences::instance(this);
  uint64_t v11 = MEMORY[0x1E4FB9480];
  std::__function::__value_func<void ()(long long)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v10);
  long long v15 = 0;
  uint64_t v4 = operator new(0x30uLL);
  uint64_t v5 = v4;
  uint64_t v6 = v11;
  uint64_t v7 = v13;
  void *v4 = &unk_1EDFA0768;
  v4[1] = v6;
  if (v7)
  {
    if (v7 == v12)
    {
      v4[5] = v4 + 2;
      (*(void (**)(void *))(v12[0] + 24))(v12);
      goto LABEL_7;
    }
    uint64_t v8 = &v13;
    v4[5] = v7;
  }
  else
  {
    uint64_t v8 = v4 + 5;
  }
  void *v8 = 0;
LABEL_7:
  long long v15 = v5;
  CASmartPreferences::_RegisterFirstHandler();
  std::__function::__value_func<BOOL ()(void const*)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](v12);
  return std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](v10);
}

void sub_18FEEF428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1)
{
  long long v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1EDFA0768;
  v2[1] = v3;
  std::__function::__value_func<void ()(long long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_18FEEF54C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA07B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__value_func<BOOL ()(void const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](a1 + 2);
  operator delete(a1);
}

id AudioComponentRegistrarProtocol_XPCInterface(void)
{
  v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EDFB9738];
  uint64_t v1 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_msgSend(v1, "setWithObjects:", v2, v3, v4, objc_opt_class(), 0);
  [v0 setClasses:v5 forSelector:sel_getComponentList_linkedSDKRequiresEntitlement_includeExtensions_forceWaitForExtensions_reply_ argumentIndex:3 ofReply:1];

  return v0;
}

void sub_18FEEF7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FEEFAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_18FEEFBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FEEFCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FEEFF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10)
{
  _Unwind_Resume(a1);
}

APComponent *APComponent::name(APComponent *this, const void *a2)
{
  uint64_t v3 = this;
  if (a2) {
    this = (APComponent *)CFRetain(a2);
  }
  *(void *)uint64_t v3 = a2;
  return this;
}

uint64_t APComponent::asBundleComponent(APComponent *this)
{
  return 0;
}

uint64_t _CheckRPCError(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v6 = CADefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = a1;
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_error_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, "%s is passing a serverPID of %d to CheckRPCError!", (uint8_t *)&v10, 0x12u);
    }
  }
  if (a3 == 268451843 || a3 == 268435460)
  {
    _ReportRPCTimeout(a1, a2);
  }
  else
  {
    BOOL v8 = (a3 & 0x3E00) != 0;
    if ((a3 & 0xFFFFC1FF) != 0) {
      BOOL v8 = 0;
    }
    if (WORD1(a3) == 4096 || v8)
    {
      AudioConverterPropertyID v9 = CADefaultLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        uint64_t v11 = a1;
        __int16 v12 = 1024;
        int v13 = a3;
        _os_log_error_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, "CheckRPCError: %s returned server mach error 0x%x!", (uint8_t *)&v10, 0x12u);
      }
    }
  }
  return a3;
}

void DSPGraph::Macro::~Macro(void **this)
{
  *this = &unk_1EDF9CB28;
  uint64_t v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

BOOL DSPGraph::Preprocessor::parseActualArg(void *a1, std::string::value_type **a2, uint64_t a3)
{
  void v12[2] = *MEMORY[0x1E4F143B8];
  if (DSPGraph::Preprocessor::parseToken(a2, a3) || (DSPGraph::Preprocessor::parseString(a2, a3) & 1) != 0) {
    return 1;
  }
  DSPGraph::skipspace(a2);
  if (**a2 == 40)
  {
    ++*a2;
    DSPGraph::Preprocessor::parseToEnd(a2, 40, 41, (std::string *)a3);
    std::operator+<char>();
    uint64_t v6 = std::string::append(&__p, ")", 1uLL);
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
    v12[0] = v6->__r_.__value_.__l.__size_;
    *(void *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    uint64_t v9 = v12[0];
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v9;
    *(void *)(a3 + 15) = *(void *)((char *)v12 + 7);
    *(unsigned char *)(a3 + 23) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 1;
  }
  DSPGraph::skipspace(a2);
  if (**a2 == 123)
  {
    ++*a2;
    DSPGraph::Preprocessor::parseToEnd(a2, 123, 125, (std::string *)a3);
    return 1;
  }
  return DSPGraph::Preprocessor::parseMacroCall(a1, a2, a3);
}

void sub_18FEF0364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Preprocessor::parseString(std::string::value_type **a1, uint64_t a2)
{
  DSPGraph::skipspace(a1);
  if (DSPGraph::Preprocessor::parseToken(a1, a2)) {
    return 1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  if (**a1 == 34)
  {
    std::string::push_back((std::string *)a2, 34);
    uint64_t v4 = (uint64_t)(*a1 - 1);
    do
    {
      int v5 = *(unsigned __int8 *)(v4 + 2);
      if (v5 == 10 || v5 == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v9, "parseString");
        std::string::basic_string[abi:ne180100]<0>(&v8, "unterminated string");
        DSPGraph::ThrowException(1886548769, &v10, 293, &v9, &v8);
      }
      std::string::push_back((std::string *)a2, v5);
      ++v4;
    }
    while (v5 != 34);
    *a1 = (std::string::value_type *)(v4 + 2);
    return 1;
  }
  return 0;
}

void sub_18FEF04A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Preprocessor::preprocess(std::string *a1, DSPGraph::Preprocessor *a2, uint64_t a3, int a4)
{
  int v4 = a4;
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  std::string::size_type v7 = *(std::string::value_type **)a3;
  if (*(char *)(a3 + 23) >= 0) {
    std::string::size_type v7 = (std::string::value_type *)a3;
  }
  v210 = 0;
  v211 = 0;
  unint64_t v212 = 0;
  v209[0] = a2;
  v209[1] = &v210;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    long long v9 = v7 + 1;
    int v8 = *v7;
    v208 = v7 + 1;
    if (v8 <= 90) {
      break;
    }
    if (v8 != 91)
    {
      if (v8 == 92)
      {
        v208 = v7 + 2;
        int v8 = v7[1];
        if (v8 > 101)
        {
          int v10 = v8 - 110;
          LOBYTE(v8) = 10;
          switch(v10)
          {
            case 0:
              goto LABEL_234;
            case 1:
            case 2:
            case 3:
            case 5:
            case 7:
            case 9:
              LOBYTE(v8) = v7[1];
              goto LABEL_234;
            case 4:
              LOBYTE(v8) = 13;
              goto LABEL_234;
            case 6:
              LOBYTE(v8) = 9;
              goto LABEL_234;
            case 8:
              LOBYTE(v8) = 11;
              goto LABEL_234;
            case 10:
              if (v7[2] < 0
                || (uint64_t v86 = v7[2],
                    int v87 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v86 + 60),
                    (v87 & 0x10000) == 0))
              {
                std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
                std::string::basic_string[abi:ne180100]<0>(&__p, "preprocessor error: expected hex digit");
                DSPGraph::ThrowException(1886548769, (long long *)buf, 433, (long long *)&v197, (long long *)&__p);
              }
              if ((v87 & 0x9000) != 0) {
                char v88 = 9;
              }
              else {
                char v88 = 0;
              }
              v208 = v7 + 4;
              uint64_t v89 = v7[3];
              if (!v89) {
                goto LABEL_541;
              }
              if ((v89 & 0x80000000) != 0
                || (int v90 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v89 + 60), (v90 & 0x10000) == 0))
              {
                std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
                std::string::basic_string[abi:ne180100]<0>(&__p, "preprocessor error: expected hex digit");
                DSPGraph::ThrowException(1886548769, (long long *)buf, 448, (long long *)&v197, (long long *)&__p);
              }
              char v91 = v86 + v88;
              if ((v90 & 0x1000) != 0) {
                char v92 = -87;
              }
              else {
                char v92 = -48;
              }
              if ((v90 & 0x8000) != 0) {
                char v92 = -55;
              }
              std::string::push_back(a1, (v89 + v92) | (16 * v91));
              break;
            default:
              LOBYTE(v8) = v7[1];
              goto LABEL_234;
          }
          goto LABEL_520;
        }
        if (!v7[1]) {
          goto LABEL_520;
        }
        if (v8 == 98) {
          char v23 = 8;
        }
        else {
          char v23 = v7[1];
        }
        if (v8 == 97) {
          LOBYTE(v8) = 7;
        }
        else {
          LOBYTE(v8) = v23;
        }
LABEL_234:
        std::string::push_back(a1, v8);
        goto LABEL_520;
      }
LABEL_32:
      if (v8 != 123 || v4 == 0) {
        goto LABEL_234;
      }
      memset(buf, 0, 24);
      DSPGraph::Preprocessor::parseToEnd(&v208, 123, 125, (std::string *)buf);
      std::string::push_back(a1, 123);
      if (SHIBYTE(buf[0].__end_) >= 0) {
        std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)buf;
      }
      else {
        std::__split_buffer<std::string>::pointer first = buf[0].__first_;
      }
      if (SHIBYTE(buf[0].__end_) >= 0) {
        std::string::size_type end_high = HIBYTE(buf[0].__end_);
      }
      else {
        std::string::size_type end_high = (std::string::size_type)buf[0].__begin_;
      }
      std::string::append(a1, (const std::string::value_type *)first, end_high);
      std::string::push_back(a1, 125);
      if (SHIBYTE(buf[0].__end_) < 0)
      {
        std::__split_buffer<std::string>::pointer v22 = buf[0].__first_;
LABEL_519:
        operator delete(v22);
        goto LABEL_520;
      }
      goto LABEL_520;
    }
    memset(&__p, 0, sizeof(__p));
    DSPGraph::Preprocessor::parseToEnd(&v208, 91, 93, &__p);
    DSPGraph::Preprocessor::preprocess(buf, a2, &__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].__first_;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)buf[0].__end_;
    p_p = &__p;
    if (SHIBYTE(buf[0].__end_) < 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v205 = 0;
    v206 = p_p;
    uint64_t v203 = 0;
    uint64_t v204 = 0;
    if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v203))
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
      std::string::basic_string[abi:ne180100]<0>(&v202, "preprocessor error: expected macro name");
      DSPGraph::ThrowException(1886548769, (long long *)buf, 494, (long long *)&v197, (long long *)&v202);
    }
    uint64_t v14 = HIBYTE(v205);
    if (v205 < 0) {
      uint64_t v14 = v204;
    }
    switch(v14)
    {
      case 1:
        long long v15 = (unsigned __int8 *)v203;
        if (v205 >= 0) {
          long long v15 = (unsigned __int8 *)&v203;
        }
        int v16 = *v15;
        if (v16 == 42)
        {
          memset(buf, 0, 24);
          uint64_t v110 = 1;
          while (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
          {
            uint64_t v111 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"multiplication", 584, "preprocess");
            uint64_t v110 = caulk::numeric::exceptional_mul<long>(v110, v111);
          }
          std::to_string(&v197, v110);
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v52 = &v197;
          }
          else {
            uint64_t v52 = (std::string *)v197.__r_.__value_.__r.__words[0];
          }
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v197.__r_.__value_.__l.__size_;
          }
          goto LABEL_383;
        }
        if (v16 == 43)
        {
          uint64_t v17 = 0;
          memset(buf, 0, 24);
          while (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
          {
            uint64_t v18 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"addition", 576, "preprocess");
            uint64_t v17 = caulk::numeric::exceptional_add<long>(v17, v18);
          }
          std::to_string(&v197, v17);
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v52 = &v197;
          }
          else {
            uint64_t v52 = (std::string *)v197.__r_.__value_.__r.__words[0];
          }
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v197.__r_.__value_.__l.__size_;
          }
          goto LABEL_383;
        }
        BOOL v40 = v14 == 2;
        int v112 = (unsigned __int8 *)v203;
        if (v205 >= 0) {
          int v112 = (unsigned __int8 *)&v203;
        }
        int v113 = *v112;
        if (v113 == 47)
        {
          memset(buf, 0, 24);
          memset(&v197, 0, sizeof(v197));
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
          {
            std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (long long *)&v202, 663, (long long *)&v201, (long long *)&v200);
          }
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197))
          {
            std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (long long *)&v202, 666, (long long *)&v201, (long long *)&v200);
          }
          uint64_t v134 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"division", 668, "preprocess");
          uint64_t v135 = DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"division", 669, "preprocess");
          if (!v135)
          {
            std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v200, "division by zero is not allowed");
            DSPGraph::ThrowException(1886548769, (long long *)&v202, 671, (long long *)&v201, (long long *)&v200);
          }
          std::to_string(&v202, v134 / v135);
          if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v118 = &v202;
          }
          else {
            unint64_t v118 = (std::string *)v202.__r_.__value_.__r.__words[0];
          }
          if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v119 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v119 = v202.__r_.__value_.__l.__size_;
          }
          goto LABEL_460;
        }
        if (v113 == 45)
        {
          memset(buf, 0, 24);
          memset(&v197, 0, sizeof(v197));
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
          {
            std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (long long *)&v202, 651, (long long *)&v201, (long long *)&v200);
          }
          uint64_t v114 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"subtraction", 653, "preprocess");
          if (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197))
          {
            uint64_t v115 = DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"subtraction", 655, "preprocess");
            BOOL v116 = __OFSUB__(v114, v115);
            uint64_t v117 = v114 - v115;
            if (v116)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "arithmetic subtraction overflow");
              exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
            }
            std::to_string(&v202, v117);
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v118 = &v202;
            }
            else {
              unint64_t v118 = (std::string *)v202.__r_.__value_.__r.__words[0];
            }
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v119 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v119 = v202.__r_.__value_.__l.__size_;
            }
          }
          else
          {
            uint64_t v158 = caulk::numeric::exceptional_mul<long>(v114, -1);
            std::to_string(&v202, v158);
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v118 = &v202;
            }
            else {
              unint64_t v118 = (std::string *)v202.__r_.__value_.__r.__words[0];
            }
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v119 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v119 = v202.__r_.__value_.__l.__size_;
            }
          }
          goto LABEL_460;
        }
        BOOL v39 = 1;
        if (v14 == 2) {
          goto LABEL_95;
        }
        goto LABEL_347;
      case 2:
        uint64_t v37 = v203;
        if (v205 >= 0) {
          uint64_t v37 = &v203;
        }
        if (*v37 == 29295)
        {
          BOOL v93 = 0;
          memset(buf, 0, 24);
          while (1)
          {
            BOOL v94 = v93;
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf)) {
              break;
            }
            BOOL v93 = 1;
            if (!v94)
            {
              if (v205 >= 0) {
                char v95 = &v203;
              }
              else {
                char v95 = v203;
              }
              BOOL v93 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)v95, 595, "preprocess") != 0;
            }
          }
          if (v94) {
            unint64_t v109 = "1";
          }
          else {
            unint64_t v109 = "0";
          }
LABEL_333:
          std::string::append(a1, v109, 1uLL);
          if (SHIBYTE(buf[0].__end_) < 0) {
            goto LABEL_477;
          }
          goto LABEL_515;
        }
        uint64_t v38 = v203;
        if (v205 >= 0) {
          uint64_t v38 = &v203;
        }
        if (*v38 == 15677)
        {
          memset(buf, 0, 24);
          memset(&v197, 0, sizeof(v197));
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
          {
            std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (long long *)&v202, 636, (long long *)&v201, (long long *)&v200);
          }
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197))
          {
            std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (long long *)&v202, 639, (long long *)&v201, (long long *)&v200);
          }
          uint64_t v126 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"equality", 641, "preprocess");
          if (v126 == DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"equality", 642, "preprocess")) {
            size_t v127 = "1";
          }
          else {
            size_t v127 = "0";
          }
          goto LABEL_473;
        }
        BOOL v39 = v14 == 1;
        BOOL v40 = 1;
LABEL_95:
        int v41 = v203;
        if (v205 >= 0) {
          int v41 = &v203;
        }
        if (*v41 == 15649)
        {
          memset(buf, 0, 24);
          memset(&v197, 0, sizeof(v197));
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
          {
            std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (long long *)&v202, 677, (long long *)&v201, (long long *)&v200);
          }
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197))
          {
            std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
            DSPGraph::ThrowException(1886548769, (long long *)&v202, 680, (long long *)&v201, (long long *)&v200);
          }
          uint64_t v130 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"inequality", 682, "preprocess");
          if (v130 == DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"inequality", 683, "preprocess")) {
            size_t v127 = "0";
          }
          else {
            size_t v127 = "1";
          }
          goto LABEL_473;
        }
        if (v39)
        {
LABEL_347:
          v136 = v203;
          if (v205 >= 0) {
            v136 = &v203;
          }
          if (*v136 == 60)
          {
            memset(buf, 0, 24);
            memset(&v197, 0, sizeof(v197));
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (long long *)&v202, 692, (long long *)&v201, (long long *)&v200);
            }
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197))
            {
              std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (long long *)&v202, 695, (long long *)&v201, (long long *)&v200);
            }
            uint64_t v137 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"less than", 697, "preprocess");
            if (v137 >= DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"less than", 698, "preprocess")) {
              size_t v127 = "0";
            }
            else {
              size_t v127 = "1";
            }
LABEL_473:
            std::string::append(a1, v127, 1uLL);
            goto LABEL_474;
          }
        }
        if (v40)
        {
          v138 = v203;
          if (v205 >= 0) {
            v138 = &v203;
          }
          if (*v138 == 15676)
          {
            memset(buf, 0, 24);
            memset(&v197, 0, sizeof(v197));
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (long long *)&v202, 707, (long long *)&v201, (long long *)&v200);
            }
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197))
            {
              std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (long long *)&v202, 710, (long long *)&v201, (long long *)&v200);
            }
            uint64_t v159 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"less than or equal", 712, "preprocess");
            if (v159 <= DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"less than or equal", 713, "preprocess")) {
              size_t v127 = "1";
            }
            else {
              size_t v127 = "0";
            }
            goto LABEL_473;
          }
        }
        if (v39)
        {
          v139 = v203;
          if (v205 >= 0) {
            v139 = &v203;
          }
          if (*v139 == 62)
          {
            memset(buf, 0, 24);
            memset(&v197, 0, sizeof(v197));
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (long long *)&v202, 722, (long long *)&v201, (long long *)&v200);
            }
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197))
            {
              std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (long long *)&v202, 725, (long long *)&v201, (long long *)&v200);
            }
            uint64_t v140 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"greater than", 727, "preprocess");
            if (v140 <= DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"greater than", 728, "preprocess")) {
              size_t v127 = "0";
            }
            else {
              size_t v127 = "1";
            }
            goto LABEL_473;
          }
        }
        if (v40)
        {
          v141 = v203;
          if (v205 >= 0) {
            v141 = &v203;
          }
          if (*v141 == 15678)
          {
            memset(buf, 0, 24);
            memset(&v197, 0, sizeof(v197));
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (long long *)&v202, 737, (long long *)&v201, (long long *)&v200);
            }
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197))
            {
              std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: missing argument");
              DSPGraph::ThrowException(1886548769, (long long *)&v202, 740, (long long *)&v201, (long long *)&v200);
            }
            uint64_t v160 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"greater than or equal", 742, "preprocess");
            if (v160 >= DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"greater than or equal", 743, "preprocess")) {
              size_t v127 = "1";
            }
            else {
              size_t v127 = "0";
            }
            goto LABEL_473;
          }
          if (*v141 == 26217)
          {
            memset(buf, 0, 24);
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v202, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocessor error: if: expected condition");
              DSPGraph::ThrowException(1886548769, (long long *)&v197, 752, (long long *)&v202, (long long *)&v201);
            }
            if (v205 >= 0) {
              uint64_t v181 = &v203;
            }
            else {
              uint64_t v181 = v203;
            }
            uint64_t v182 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)v181, 754, "preprocess");
            memset(&v197, 0, sizeof(v197));
            if (v182)
            {
              if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v206, (uint64_t)&v197))
              {
                std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
                std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: ifdef expected thenClause");
                DSPGraph::ThrowException(1886548769, (long long *)&v202, 759, (long long *)&v201, (long long *)&v200);
              }
              DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v206, v184);
              DSPGraph::Preprocessor::preprocess(&v202, a2, &v197, 1);
              if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v118 = &v202;
              }
              else {
                unint64_t v118 = (std::string *)v202.__r_.__value_.__r.__words[0];
              }
              if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v119 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v119 = v202.__r_.__value_.__l.__size_;
              }
LABEL_460:
              std::string::append(a1, (const std::string::value_type *)v118, v119);
              if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v202.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              if ((DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v206, v183) & 1) == 0)
              {
                std::string::basic_string[abi:ne180100]<0>(&v202, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
                std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: ifdef expected thenClause");
                DSPGraph::ThrowException(1886548769, (long long *)&v202, 765, (long long *)&v201, (long long *)&v200);
              }
              if (DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v206, (uint64_t)&v197))
              {
                DSPGraph::Preprocessor::preprocess(&v202, a2, &v197, 1);
                if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v118 = &v202;
                }
                else {
                  unint64_t v118 = (std::string *)v202.__r_.__value_.__r.__words[0];
                }
                if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v119 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v119 = v202.__r_.__value_.__l.__size_;
                }
                goto LABEL_460;
              }
            }
LABEL_474:
            if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v197.__r_.__value_.__l.__data_);
            }
LABEL_476:
            if ((SHIBYTE(buf[0].__end_) & 0x80000000) == 0) {
              goto LABEL_515;
            }
LABEL_477:
            std::__split_buffer<std::string>::pointer v145 = buf[0].__first_;
LABEL_478:
            operator delete(v145);
            goto LABEL_515;
          }
        }
        if (v14 != 5) {
          goto LABEL_134;
        }
LABEL_106:
        if (v205 >= 0) {
          unsigned int v46 = (unsigned __int8 *)&v203;
        }
        else {
          unsigned int v46 = (unsigned __int8 *)v203;
        }
        int v47 = *(_DWORD *)v46;
        int v48 = v46[4];
        if (v47 == 1701078633 && v48 == 102)
        {
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v203))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v202, "preprocessor error: expected name");
            DSPGraph::ThrowException(1886548769, (long long *)buf, 773, (long long *)&v197, (long long *)&v202);
          }
          memset(buf, 0, 24);
          if (DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v203))
          {
            if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v206, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v202, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocessor error: ifdef expected thenClause");
              DSPGraph::ThrowException(1886548769, (long long *)&v197, 779, (long long *)&v202, (long long *)&v201);
            }
            DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v206, v51);
            DSPGraph::Preprocessor::preprocess(&v197, a2, buf, 1);
            if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v52 = &v197;
            }
            else {
              uint64_t v52 = (std::string *)v197.__r_.__value_.__r.__words[0];
            }
            if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v197.__r_.__value_.__l.__size_;
            }
          }
          else
          {
            if ((DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v206, v50) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v202, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocessor error: ifdef expected thenClause");
              DSPGraph::ThrowException(1886548769, (long long *)&v197, 785, (long long *)&v202, (long long *)&v201);
            }
            if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v206, (uint64_t)buf)) {
              goto LABEL_476;
            }
            DSPGraph::Preprocessor::preprocess(&v197, a2, buf, 1);
            if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v52 = &v197;
            }
            else {
              uint64_t v52 = (std::string *)v197.__r_.__value_.__r.__words[0];
            }
            if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v197.__r_.__value_.__l.__size_;
            }
          }
LABEL_383:
          std::string::append(a1, (const std::string::value_type *)v52, size);
          goto LABEL_474;
        }
LABEL_134:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v203, "ifset"))
        {
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v203))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v202, "preprocessor error: expected name");
            DSPGraph::ThrowException(1886548769, (long long *)buf, 793, (long long *)&v197, (long long *)&v202);
          }
          memset(buf, 0, 24);
          uint64_t v59 = DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v203);
          if (!v59) {
            goto LABEL_156;
          }
          memset(&v202, 0, sizeof(v202));
          (*(void (**)(std::string *__return_ptr))(*(void *)v59 + 16))(&v197);
          if (v205 >= 0) {
            unint64_t v61 = &v203;
          }
          else {
            unint64_t v61 = v203;
          }
          uint64_t v62 = DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)v61, 797, "preprocess");
          if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v197.__r_.__value_.__l.__data_);
          }
          v201.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
          if (v62 == 1)
          {
            if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v206, (uint64_t)buf))
            {
              std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v202, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocessor error: ifdef expected thenClause");
              DSPGraph::ThrowException(1886548769, (long long *)&v197, 799, (long long *)&v202, (long long *)&v201);
            }
            DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v206, v63);
            DSPGraph::Preprocessor::preprocess(&v197, a2, buf, 1);
            if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v52 = &v197;
            }
            else {
              uint64_t v52 = (std::string *)v197.__r_.__value_.__r.__words[0];
            }
            if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v197.__r_.__value_.__l.__size_;
            }
          }
          else
          {
LABEL_156:
            if ((DSPGraph::Preprocessor::skipMacroBody((std::string::value_type **)&v206, v60) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v202, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocessor error: ifdef expected thenClause");
              DSPGraph::ThrowException(1886548769, (long long *)&v197, 805, (long long *)&v202, (long long *)&v201);
            }
            if (!DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v206, (uint64_t)buf)) {
              goto LABEL_476;
            }
            DSPGraph::Preprocessor::preprocess(&v197, a2, buf, 1);
            if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v52 = &v197;
            }
            else {
              uint64_t v52 = (std::string *)v197.__r_.__value_.__r.__words[0];
            }
            if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v197.__r_.__value_.__l.__size_;
            }
          }
          goto LABEL_383;
        }
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v203, "include"))
        {
          uint64_t v66 = DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v203);
          if (!v66)
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
            uint64_t v190 = &v203;
            if (v205 < 0) {
              uint64_t v190 = v203;
            }
            DSPGraph::strprintf((DSPGraph *)"preprocessor error: macro %s not found.", v189, v190);
          }
          uint64_t v67 = v66;
          memset(buf, 0, 24);
          memset(&v197, 0, sizeof(v197));
          while (DSPGraph::Preprocessor::parseActualArg(a2, (std::string::value_type **)&v206, (uint64_t)buf))
          {
            uint64_t v68 = (_OWORD *)v197.__r_.__value_.__l.__size_;
            if (v197.__r_.__value_.__l.__size_ >= v197.__r_.__value_.__r.__words[2])
            {
              std::vector<std::string>::pointer v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)&v197, (long long *)buf);
            }
            else
            {
              if (SHIBYTE(buf[0].__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v197.__r_.__value_.__l.__size_, (const std::string::value_type *)buf[0].__first_, (std::string::size_type)buf[0].__begin_);
              }
              else
              {
                long long v69 = *(_OWORD *)&buf[0].__first_;
                *(void *)(v197.__r_.__value_.__l.__size_ + 16) = buf[0].__end_;
                *uint64_t v68 = v69;
              }
              std::vector<std::string>::pointer v70 = (std::vector<std::string>::pointer)((char *)v68 + 24);
            }
            v197.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, DSPGraph::Preprocessor *, std::string *))(*(void *)v67 + 16))(&v202, v67, a2, &v197);
          if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v71 = &v202;
          }
          else {
            char v71 = (std::string *)v202.__r_.__value_.__r.__words[0];
          }
          if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v72 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v72 = v202.__r_.__value_.__l.__size_;
          }
          std::string::append(a1, (const std::string::value_type *)v71, v72);
          if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v202.__r_.__value_.__l.__data_);
          }
          v202.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
          goto LABEL_476;
        }
        memset(&v202, 0, sizeof(v202));
        if ((DSPGraph::Preprocessor::parseString((std::string::value_type **)&v206, (uint64_t)&v202) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v201, "preprocessor error: expected filename");
          DSPGraph::ThrowException(1886548769, (long long *)buf, 814, (long long *)&v197, (long long *)&v201);
        }
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v64 = v202.__r_.__value_.__l.__size_;
          if (v202.__r_.__value_.__l.__size_ < 3)
          {
LABEL_561:
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v201, "preprocessor error: empty filename");
            DSPGraph::ThrowException(1886548769, (long long *)buf, 818, (long long *)&v197, (long long *)&v201);
          }
          uint64_t v65 = (std::string *)v202.__r_.__value_.__r.__words[0];
          if (*v202.__r_.__value_.__l.__data_ == 34) {
            goto LABEL_303;
          }
        }
        else
        {
          std::string::size_type v64 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
          if (HIBYTE(v202.__r_.__value_.__r.__words[2]) <= 2u) {
            goto LABEL_561;
          }
          if (v202.__r_.__value_.__s.__data_[0] == 34)
          {
            uint64_t v65 = &v202;
LABEL_303:
            if (v65->__r_.__value_.__s.__data_[v64 - 1] == 34)
            {
              std::string::erase(&v202, 0, 1uLL);
              if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
              {
                int64_t v125 = (std::string *)v202.__r_.__value_.__r.__words[0];
                uint64_t v124 = --v202.__r_.__value_.__l.__size_;
              }
              else
              {
                uint64_t v124 = HIBYTE(v202.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&v202.__r_.__value_.__s + 23) = v124 & 0x7F;
                int64_t v125 = &v202;
              }
              v125->__r_.__value_.__s.__data_[v124] = 0;
            }
          }
        }
        __ec.__val_ = 0;
        __ec.__cat_ = std::system_category();
        v197.__r_.__value_.__s.__data_[0] = 0;
        char v198 = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v201.__pn_, &v202);
        if (std::__fs::filesystem::path::__root_directory(&v201).__size_)
        {
          if (std::__fs::filesystem::is_regular_file[abi:ne180100](&v201, &__ec) && !__ec.__val_)
          {
            std::ifstream::basic_ifstream((uint64_t *)buf);
            if (!v214)
            {
              std::string::basic_string[abi:ne180100]<0>(&v200, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(v196, "preprocess");
              v192 = &v202;
              if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v192 = (std::string *)v202.__r_.__value_.__r.__words[0];
              }
              DSPGraph::strprintf((DSPGraph *)"preprocessor error: cannot open include file '%s'", v191, v192);
            }
            v200.__r_.__value_.__r.__words[0] = *(std::string::size_type *)((char *)&buf[1].__first_
                                                                          + buf[0].__first_[-1].__r_.__value_.__r.__words[0]);
            v196[0] = 0;
            std::optional<std::string>::emplace[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,void>(&v197, &v200, v196);
            std::ifstream::~ifstream(buf);
          }
        }
        else
        {
          long long v147 = (std::string *)*((void *)a2 + 6);
          unint64_t v146 = (std::string *)*((void *)a2 + 7);
          while (v147 != v146)
          {
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)buf, v147);
            if (SHIBYTE(buf[0].__end_) < 0)
            {
              std::string::__init_copy_ctor_external(&v200, (const std::string::value_type *)buf[0].__first_, (std::string::size_type)buf[0].__begin_);
            }
            else
            {
              *(_OWORD *)&v200.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].__first_;
              v200.__r_.__value_.__r.__words[2] = (std::string::size_type)buf[0].__end_;
            }
            if (std::__fs::filesystem::path::__root_directory(&v201).__size_)
            {
              std::string::operator=(&v200, &v201.__pn_);
            }
            else
            {
              if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&v200).__size_) {
                std::string::push_back(&v200, 47);
              }
              if ((v201.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v148 = &v201;
              }
              else {
                uint64_t v148 = (std::__fs::filesystem::path *)v201.__pn_.__r_.__value_.__r.__words[0];
              }
              if ((v201.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v149 = HIBYTE(v201.__pn_.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v149 = v201.__pn_.__r_.__value_.__l.__size_;
              }
              std::string::append(&v200, (const std::string::value_type *)v148, v149);
            }
            if (SHIBYTE(buf[0].__end_) < 0) {
              operator delete(buf[0].__first_);
            }
            std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v200, &__ec);
            if (LOBYTE(buf[0].__first_) == 1 && !__ec.__val_)
            {
              std::ifstream::basic_ifstream((uint64_t *)buf);
              if (!v214)
              {
                std::string::basic_string[abi:ne180100]<0>(v196, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
                std::string::basic_string[abi:ne180100]<0>(v195, "preprocess");
                uint64_t v186 = &v202;
                if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v186 = (std::string *)v202.__r_.__value_.__r.__words[0];
                }
                DSPGraph::strprintf((DSPGraph *)"preprocessor error: cannot open include file '%s'", v185, v186);
              }
              v196[0] = *(void **)((char *)&buf[1].__first_ + buf[0].__first_[-1].__r_.__value_.__r.__words[0]);
              v195[0] = 0;
              std::optional<std::string>::emplace[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,void>(&v197, v196, v195);
              std::ifstream::~ifstream(buf);
            }
            if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v200.__r_.__value_.__l.__data_);
            }
            ++v147;
          }
        }
        if (SHIBYTE(v201.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v201.__pn_.__r_.__value_.__l.__data_);
        }
        if (!v198)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
          v188 = &v202;
          if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v188 = (std::string *)v202.__r_.__value_.__r.__words[0];
          }
          DSPGraph::strprintf((DSPGraph *)"preprocessor error: cannot find include file '%s'", v187, v188);
        }
        if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v142 = &v197;
        }
        else {
          v142 = (std::string *)v197.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&v201, (char *)v142);
        DSPGraph::Preprocessor::preprocess(buf, a2, &v201, 1);
        if (SHIBYTE(buf[0].__end_) >= 0) {
          std::__split_buffer<std::string>::pointer v143 = (std::__split_buffer<std::string>::pointer)buf;
        }
        else {
          std::__split_buffer<std::string>::pointer v143 = buf[0].__first_;
        }
        if (SHIBYTE(buf[0].__end_) >= 0) {
          std::string::size_type begin = HIBYTE(buf[0].__end_);
        }
        else {
          std::string::size_type begin = (std::string::size_type)buf[0].__begin_;
        }
        std::string::append(a1, (const std::string::value_type *)v143, begin);
        if (SHIBYTE(buf[0].__end_) < 0) {
          operator delete(buf[0].__first_);
        }
        if (SHIBYTE(v201.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v201.__pn_.__r_.__value_.__l.__data_);
        }
        if (v198 && SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v197.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
        {
          std::__split_buffer<std::string>::pointer v145 = (std::__split_buffer<std::string>::pointer)v202.__r_.__value_.__r.__words[0];
          goto LABEL_478;
        }
        goto LABEL_515;
      case 3:
        if (v205 >= 0) {
          long long v24 = (unsigned __int16 *)&v203;
        }
        else {
          long long v24 = (unsigned __int16 *)v203;
        }
        BOOL v25 = *v24 == 25956 && *((unsigned char *)v24 + 2) == 102;
        if (v25 || (*v24 == 25964 ? (BOOL v26 = *((unsigned char *)v24 + 2) == 116) : (BOOL v26 = 0), v26))
        {
          int v73 = *v24;
          int v74 = *((unsigned __int8 *)v24 + 2);
          BOOL v76 = v73 != 25964 || v74 != 116;
          if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v203))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
            std::string::basic_string[abi:ne180100]<0>(&v202, "preprocessor error: expected name");
            DSPGraph::ThrowException(1886548769, (long long *)buf, 503, (long long *)&v197, (long long *)&v202);
          }
          if (DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v203))
          {
            if (DSPGraph::getLog(void)::onceToken != -1) {
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_9530);
            }
            uint64_t v77 = DSPGraph::getLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_INFO))
            {
              if (v205 >= 0) {
                AudioStreamBasicDescription v78 = (std::string *)&v203;
              }
              else {
                AudioStreamBasicDescription v78 = (std::string *)v203;
              }
              LODWORD(buf[0].__first_) = 136315138;
              *(std::__split_buffer<std::string>::pointer *)((char *)&buf[0].__first_ + 4) = v78;
              _os_log_impl(&dword_18FEC0000, v77, OS_LOG_TYPE_INFO, "Preprocessor: redefining macro '%s'", (uint8_t *)buf, 0xCu);
            }
          }
          memset(&v197, 0, sizeof(v197));
          memset(buf, 0, 24);
          while (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
          {
            uint64_t v79 = (_OWORD *)v197.__r_.__value_.__l.__size_;
            if (v197.__r_.__value_.__l.__size_ >= v197.__r_.__value_.__r.__words[2])
            {
              std::vector<std::string>::pointer v81 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)&v197, (long long *)buf);
            }
            else
            {
              if (SHIBYTE(buf[0].__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v197.__r_.__value_.__l.__size_, (const std::string::value_type *)buf[0].__first_, (std::string::size_type)buf[0].__begin_);
              }
              else
              {
                long long v80 = *(_OWORD *)&buf[0].__first_;
                *(void *)(v197.__r_.__value_.__l.__size_ + 16) = buf[0].__end_;
                *uint64_t v79 = v80;
              }
              std::vector<std::string>::pointer v81 = (std::vector<std::string>::pointer)((char *)v79 + 24);
            }
            v197.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
          }
          if (SHIBYTE(buf[0].__end_) < 0) {
            operator delete(buf[0].__first_);
          }
          memset(&v202, 0, sizeof(v202));
          if (DSPGraph::Preprocessor::parseMacroBody(a2, (std::string::value_type **)&v206, (uint64_t)&v202))
          {
            uint64_t v82 = DSPGraph::Preprocessor::def(a2, (unsigned __int8 **)&v203);
            uint64_t v83 = v82;
            if (!v76)
            {
              BOOL v84 = v211;
              if ((unint64_t)v211 >= v212)
              {
                uint64_t v150 = ((char *)v211 - (unsigned char *)v210) >> 3;
                if ((unint64_t)(v150 + 1) >> 61) {
                  goto LABEL_576;
                }
                unint64_t v151 = (uint64_t)(v212 - (void)v210) >> 2;
                if (v151 <= v150 + 1) {
                  unint64_t v151 = v150 + 1;
                }
                if (v212 - (unint64_t)v210 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v152 = v151;
                }
                if (v152) {
                  unint64_t v152 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v152);
                }
                else {
                  uint64_t v153 = 0;
                }
                std::string v161 = (uint64_t *)(v152 + 8 * v150);
                *std::string v161 = v83;
                uint64_t v85 = v161 + 1;
                uint64_t v163 = (char *)v210;
                std::string v162 = (char *)v211;
                if (v211 != v210)
                {
                  do
                  {
                    uint64_t v164 = *((void *)v162 - 1);
                    v162 -= 8;
                    *--std::string v161 = v164;
                  }
                  while (v162 != v163);
                  std::string v162 = (char *)v210;
                }
                v210 = v161;
                v211 = v85;
                unint64_t v212 = v152 + 8 * v153;
                if (v162) {
                  operator delete(v162);
                }
              }
              else
              {
                uint64_t *v211 = v82;
                uint64_t v85 = v84 + 1;
              }
              v211 = v85;
            }
            std::string::size_type v165 = v197.__r_.__value_.__l.__size_;
            std::string::size_type v166 = v197.__r_.__value_.__r.__words[0];
            if (v197.__r_.__value_.__r.__words[0] != v197.__r_.__value_.__l.__size_)
            {
              std::string v167 = (void *)(v83 + 32);
              std::string v168 = (unint64_t *)(v83 + 48);
              unint64_t v169 = *(void *)(v83 + 40);
              do
              {
                if (v169 >= *v168)
                {
                  unint64_t v170 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v169 - *v167) >> 3);
                  unint64_t v171 = v170 + 1;
                  if (v170 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((uint64_t)(*v168 - *v167) >> 3) > v171) {
                    unint64_t v171 = 0x5555555555555556 * ((uint64_t)(*v168 - *v167) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v168 - *v167) >> 3) >= 0x555555555555555) {
                    unint64_t v172 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v172 = v171;
                  }
                  buf[0].__end_cap_.__value_ = (std::allocator<std::string> *)(v83 + 48);
                  if (v172)
                  {
                    uint64_t v174 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v172);
                  }
                  else
                  {
                    uint64_t v174 = 0;
                    uint64_t v173 = 0;
                  }
                  std::__split_buffer<std::string>::pointer end = v174 + v170;
                  buf[0].__first_ = v174;
                  buf[0].__begin_ = end;
                  buf[0].__end_ = end;
                  buf[0].__end_cap_.__value_ = &v174[v173];
                  if (*(char *)(v166 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v166, *(void *)(v166 + 8));
                    std::__split_buffer<std::string>::pointer end = buf[0].__end_;
                  }
                  else
                  {
                    long long v176 = *(_OWORD *)v166;
                    end->__r_.__value_.__r.__words[2] = *(void *)(v166 + 16);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v176;
                  }
                  buf[0].__end_ = end + 1;
                  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v83 + 32), buf);
                  unint64_t v169 = *(void *)(v83 + 40);
                  std::__split_buffer<std::string>::~__split_buffer(buf);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v83 + 32, (long long *)v166);
                  v169 += 24;
                }
                *(void *)(v83 + 40) = v169;
                v166 += 24;
              }
              while (v166 != v165);
            }
          }
          else
          {
            if (v197.__r_.__value_.__l.__size_ - v197.__r_.__value_.__r.__words[0] != 24)
            {
              std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v201, "preprocess");
              std::string::basic_string[abi:ne180100]<0>(&v200, "preprocessor error: expected macro body");
              DSPGraph::ThrowException(1886548769, (long long *)buf, 527, (long long *)&v201, (long long *)&v200);
            }
            uint64_t v120 = DSPGraph::Preprocessor::def(a2, (unsigned __int8 **)&v203);
            if (!v76)
            {
              uint64_t v121 = v120;
              std::string::size_type v122 = v211;
              if ((unint64_t)v211 >= v212)
              {
                uint64_t v154 = ((char *)v211 - (unsigned char *)v210) >> 3;
                if ((unint64_t)(v154 + 1) >> 61) {
LABEL_576:
                }
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                unint64_t v155 = (uint64_t)(v212 - (void)v210) >> 2;
                if (v155 <= v154 + 1) {
                  unint64_t v155 = v154 + 1;
                }
                if (v212 - (unint64_t)v210 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v156 = v155;
                }
                if (v156) {
                  unint64_t v156 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v156);
                }
                else {
                  uint64_t v157 = 0;
                }
                unint64_t v177 = (uint64_t *)(v156 + 8 * v154);
                *unint64_t v177 = v121;
                std::string::size_type v123 = v177 + 1;
                uint64_t v179 = (char *)v210;
                std::string v178 = (char *)v211;
                if (v211 != v210)
                {
                  do
                  {
                    uint64_t v180 = *((void *)v178 - 1);
                    v178 -= 8;
                    *--unint64_t v177 = v180;
                  }
                  while (v178 != v179);
                  std::string v178 = (char *)v210;
                }
                v210 = v177;
                v211 = v123;
                unint64_t v212 = v156 + 8 * v157;
                if (v178) {
                  operator delete(v178);
                }
              }
              else
              {
                uint64_t *v211 = v120;
                std::string::size_type v123 = v122 + 1;
              }
              v211 = v123;
            }
          }
          if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v202.__r_.__value_.__l.__data_);
          }
          buf[0].__first_ = &v197;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          int v4 = a4;
          goto LABEL_515;
        }
        if (*v24 == 28257 && *((unsigned char *)v24 + 2) == 100)
        {
          memset(buf, 0, 24);
          BOOL v131 = 1;
          while (1)
          {
            BOOL v132 = v131;
            if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf)) {
              break;
            }
            BOOL v131 = 0;
            if (v132)
            {
              if (v205 >= 0) {
                uint64_t v133 = &v203;
              }
              else {
                uint64_t v133 = v203;
              }
              BOOL v131 = DSPGraph::strToLong((uint64_t *)buf, (uint64_t)v133, 612, "preprocess") != 0;
            }
          }
          if (v132) {
            unint64_t v109 = "1";
          }
          else {
            unint64_t v109 = "0";
          }
          goto LABEL_333;
        }
        int v28 = *v24;
        int v29 = *((unsigned __int8 *)v24 + 2);
        if (v28 != 28526 || v29 != 116) {
          goto LABEL_134;
        }
        memset(buf, 0, 24);
        if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
        {
          std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v202, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v201, "preprocessor error: not: expected condition");
          DSPGraph::ThrowException(1886548769, (long long *)&v197, 625, (long long *)&v202, (long long *)&v201);
        }
        if (v205 >= 0) {
          unint64_t v31 = &v203;
        }
        else {
          unint64_t v31 = v203;
        }
        if (DSPGraph::strToLong((uint64_t *)buf, (uint64_t)v31, 627, "preprocess")) {
          long long v32 = "0";
        }
        else {
          long long v32 = "1";
        }
        std::string::append(a1, v32, 1uLL);
        goto LABEL_476;
      case 5:
        unint64_t v42 = (unsigned __int8 *)v203;
        if (v205 >= 0) {
          unint64_t v42 = (unsigned __int8 *)&v203;
        }
        int v43 = *(_DWORD *)v42;
        int v44 = v42[4];
        if (v43 != 1701080693 || v44 != 102) {
          goto LABEL_106;
        }
        if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v203))
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v202, "preprocessor error: expected name");
          DSPGraph::ThrowException(1886548769, (long long *)buf, 541, (long long *)&v197, (long long *)&v202);
        }
        uint64_t v96 = *((void *)a2 + 1);
        if (*((void *)a2 + 2) != v96)
        {
          unint64_t v97 = *((void *)a2 + 4);
          int v98 = (uint64_t *)(v96 + 8 * (v97 >> 9));
          uint64_t v99 = *v98;
          uint64_t v100 = *v98 + 8 * (v97 & 0x1FF);
          uint64_t v101 = *(void *)(v96 + (((*((void *)a2 + 5) + v97) >> 6) & 0x3FFFFFFFFFFFFF8))
               + 8 * ((*((void *)a2 + 5) + v97) & 0x1FF);
          while (1)
          {
            if (v100 == v101)
            {
              std::string::size_type v129 = 0;
LABEL_317:
              int v4 = a4;
              goto LABEL_336;
            }
            unint64_t v102 = *(const void ***)v100;
            uint64_t v103 = *(unsigned __int8 *)(*(void *)v100 + 31);
            if ((v103 & 0x80u) == 0) {
              uint64_t v104 = *(unsigned __int8 *)(*(void *)v100 + 31);
            }
            else {
              uint64_t v104 = *(void *)(*(void *)v100 + 16);
            }
            uint64_t v105 = HIBYTE(v205);
            if (v205 < 0) {
              uint64_t v105 = v204;
            }
            if (v104 == v105)
            {
              unint64_t v106 = v102 + 1;
              if (v205 >= 0) {
                v107 = (unsigned __int8 *)&v203;
              }
              else {
                v107 = (unsigned __int8 *)v203;
              }
              if ((v103 & 0x80) != 0)
              {
                if (memcmp(*v106, v107, *(void *)(*(void *)v100 + 16))) {
                  goto LABEL_263;
                }
              }
              else if (*(unsigned char *)(*(void *)v100 + 31))
              {
                while (*(unsigned __int8 *)v106 == *v107)
                {
                  unint64_t v106 = (const void **)((char *)v106 + 1);
                  ++v107;
                  if (!--v103) {
                    goto LABEL_261;
                  }
                }
                goto LABEL_263;
              }
LABEL_261:
              if (!(*((unsigned int (**)(const void **, unsigned __int8 *))*v102 + 3))(v102, v107))
              {
                std::string::size_type v129 = *(const DSPGraph::Macro **)v100;
                goto LABEL_317;
              }
              uint64_t v99 = *v98;
            }
LABEL_263:
            v100 += 8;
            if (v100 - v99 == 4096)
            {
              uint64_t v108 = v98[1];
              ++v98;
              uint64_t v99 = v108;
              uint64_t v100 = v108;
            }
          }
        }
        std::string::size_type v129 = 0;
LABEL_336:
        DSPGraph::Preprocessor::undef(a2, v129);
LABEL_515:
        if (SHIBYTE(v205) < 0) {
          operator delete(v203);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::__split_buffer<std::string>::pointer v22 = (std::__split_buffer<std::string>::pointer)__p.__r_.__value_.__r.__words[0];
          goto LABEL_519;
        }
LABEL_520:
        std::string::size_type v7 = v208;
        break;
      case 7:
        if (v205 >= 0) {
          int v54 = (int *)&v203;
        }
        else {
          int v54 = (int *)v203;
        }
        if (*v54 == 1853189987 && *(int *)((char *)v54 + 3) == 1919251566) {
          goto LABEL_164;
        }
        int v56 = *v54;
        int v57 = *(int *)((char *)v54 + 3);
        if (v56 != 1768318308 || v57 != 1684369001) {
          goto LABEL_134;
        }
        if (!DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v203))
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
          std::string::basic_string[abi:ne180100]<0>(&v202, "preprocessor error: expected name");
          DSPGraph::ThrowException(1886548769, (long long *)buf, 564, (long long *)&v197, (long long *)&v202);
        }
        if (DSPGraph::Preprocessor::find(a2, (unsigned __int8 **)&v203)) {
          std::string::size_type v128 = "1";
        }
        else {
          std::string::size_type v128 = "0";
        }
        std::string::append(a1, v128, 1uLL);
        goto LABEL_515;
      case 10:
        if (v205 >= 0) {
          uint64_t v33 = (unsigned __int16 *)&v203;
        }
        else {
          uint64_t v33 = (unsigned __int16 *)v203;
        }
        uint64_t v34 = *(void *)v33;
        int v35 = v33[4];
        if (v34 != 0x746E756F4374656CLL || v35 != 29285) {
          goto LABEL_134;
        }
LABEL_164:
        if (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v203))
        {
          memset(buf, 0, 24);
          memset(&v197, 0, sizeof(v197));
          if (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)buf))
          {
            DSPGraph::strToLong((uint64_t *)buf, (uint64_t)"counter start value", 551, "preprocess");
            if (DSPGraph::Preprocessor::parseToken((std::string::value_type **)&v206, (uint64_t)&v197)) {
              DSPGraph::strToLong((uint64_t *)&v197, (uint64_t)"counter step", 553, "preprocess");
            }
          }
          operator new();
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v197, "preprocess");
        std::string::basic_string[abi:ne180100]<0>(&v202, "preprocessor error: expected name");
        DSPGraph::ThrowException(1886548769, (long long *)buf, 546, (long long *)&v197, (long long *)&v202);
      default:
        goto LABEL_134;
    }
  }
  if (v8 == 59)
  {
    int v11 = *v9;
    if (*v9)
    {
      __int16 v12 = v7 + 2;
      do
      {
        long long v9 = v12;
        if (v11 == 10) {
          break;
        }
        ++v12;
        int v11 = *v9;
      }
      while (*v9);
    }
    v208 = v9;
    LOBYTE(v8) = 10;
    goto LABEL_234;
  }
  if (v8) {
    goto LABEL_32;
  }
LABEL_541:
  DSPGraph::UndefineLocals::~UndefineLocals((DSPGraph::UndefineLocals *)v209);
  if (v210)
  {
    v211 = (uint64_t *)v210;
    operator delete(v210);
  }
}

void sub_18FEF2FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (*(char *)(v73 + 23) < 0) {
    operator delete(*(void **)v73);
  }
  DSPGraph::UndefineLocals::~UndefineLocals((DSPGraph::UndefineLocals *)&a68);
  if (a70)
  {
    a71 = a70;
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

BOOL DSPGraph::Preprocessor::parseToken(std::string::value_type **a1, uint64_t a2)
{
  DSPGraph::skipspace(a1);
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  BOOL v4 = DSPGraph::endOfWord(**a1);
  if (!v4)
  {
    for (uint64_t i = *a1; ; ++i)
    {
      std::string::value_type v6 = *i;
      if (DSPGraph::endOfWord(*i)) {
        break;
      }
      std::string::push_back((std::string *)a2, v6);
    }
    *a1 = i;
  }
  return !v4;
}

BOOL DSPGraph::endOfWord(unsigned int this)
{
  if (!this) {
    return 1;
  }
  if (this <= 0x7F)
  {
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * this + 60) & 0x4000) != 0) {
      return 1;
    }
  }
  else if (__maskrune(this, 0x4000uLL))
  {
    return 1;
  }
}

uint64_t DSPGraph::skipspace(unsigned char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = MEMORY[0x1E4F14390];
  do
  {
    unsigned int v4 = (char)*v2;
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = __maskrune((char)*v2, 0x4000uLL);
      if (result)
      {
LABEL_4:
        uint64_t v2 = *a1 + 1;
        *a1 = v2;
        continue;
      }
    }
    else
    {
      uint64_t result = *(_DWORD *)(v3 + 4 * v4 + 60) & 0x4000;
      if (result) {
        goto LABEL_4;
      }
    }
    if (v4 != 59) {
      return result;
    }
    uint64_t v2 = *a1;
    do
    {
      int v6 = *v2;
      if (!*v2) {
        break;
      }
      *a1 = ++v2;
    }
    while (v6 != 10);
  }
  while (result);
  return result;
}

void DSPGraph::UndefineLocals::~UndefineLocals(DSPGraph::UndefineLocals *this)
{
  uint64_t v2 = (const DSPGraph::Macro ***)*((void *)this + 1);
  uint64_t v3 = *v2;
  unsigned int v4 = v2[1];
  while (v3 != v4)
    DSPGraph::Preprocessor::undef(*(DSPGraph::Preprocessor **)this, *v3++);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t DSPGraph::Preprocessor::find(void *a1, unsigned __int8 **a2)
{
  uint64_t v2 = a1[1];
  if (a1[2] != v2)
  {
    unint64_t v3 = a1[4];
    unsigned int v4 = (uint64_t *)(v2 + 8 * (v3 >> 9));
    uint64_t v5 = *v4;
    uint64_t v6 = *v4 + 8 * (v3 & 0x1FF);
    uint64_t v7 = *(void *)(v2 + (((a1[5] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v3) & 0x1FF);
    if (v6 != v7)
    {
      char v8 = *((unsigned char *)a2 + 23);
      if (v8 >= 0) {
        long long v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      }
      else {
        long long v9 = a2[1];
      }
      if (v8 >= 0) {
        int v10 = (unsigned __int8 *)a2;
      }
      else {
        int v10 = *a2;
      }
      do
      {
        uint64_t v11 = *(void *)v6;
        uint64_t v12 = *(unsigned __int8 *)(*(void *)v6 + 31);
        if ((v12 & 0x80u) == 0) {
          int v13 = (unsigned __int8 *)*(unsigned __int8 *)(*(void *)v6 + 31);
        }
        else {
          int v13 = *(unsigned __int8 **)(*(void *)v6 + 16);
        }
        if (v13 == v9)
        {
          if ((v12 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v11 + 8), v10, *(void *)(*(void *)v6 + 16))) {
              return v11;
            }
          }
          else
          {
            if (!*(unsigned char *)(*(void *)v6 + 31)) {
              return v11;
            }
            uint64_t v14 = 0;
            while (*(unsigned __int8 *)(v11 + v14 + 8) == v10[v14])
            {
              if (v12 == ++v14) {
                return v11;
              }
            }
          }
        }
        v6 += 8;
        if (v6 - v5 == 4096)
        {
          uint64_t v15 = v4[1];
          ++v4;
          uint64_t v5 = v15;
          uint64_t v6 = v15;
        }
      }
      while (v6 != v7);
    }
  }
  return 0;
}

BOOL DSPGraph::Preprocessor::parseMacroCall(void *a1, unsigned char **a2, uint64_t a3)
{
  long long v24 = *a2;
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  DSPGraph::skipspace(&v24);
  int v6 = *v24;
  if (v6 == 91)
  {
    uint64_t v23 = 0;
    ++v24;
    v22[0] = 0;
    v22[1] = 0;
    if (!DSPGraph::Preprocessor::parseToken(&v24, (uint64_t)v22))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v19, "parseMacroCall");
      std::string::basic_string[abi:ne180100]<0>(&v17, "preprocessor error: expected macro name");
      DSPGraph::ThrowException(1886548769, (long long *)__p, 252, (long long *)&v19, &v17);
    }
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v21 = 0;
    memset(&v19, 0, sizeof(v19));
    while (DSPGraph::Preprocessor::parseActualArg(a1, &v24, __p))
    {
      std::vector<std::string>::pointer end = v19.__end_;
      if (v19.__end_ >= v19.__end_cap_.__value_)
      {
        long long v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v19, (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v21) < 0)
        {
          std::string::__init_copy_ctor_external(v19.__end_, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v8 = *(_OWORD *)__p;
          v19.__end_->__r_.__value_.__r.__words[2] = v21;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        }
        long long v9 = end + 1;
      }
      v19.__end_ = v9;
    }
    DSPGraph::skipspace(&v24);
    int v10 = v24;
    if (*v24 != 93)
    {
      std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v16, "parseMacroCall");
      std::string::basic_string[abi:ne180100]<0>(&v15, "preprocessor error: expected closing brace");
      DSPGraph::ThrowException(1886548769, &v17, 261, &v16, &v15);
    }
    uint64_t v11 = DSPGraph::Preprocessor::find(a1, v22);
    if (!v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v16, "parseMacroCall");
      uint64_t v14 = v22;
      if (v23 < 0) {
        uint64_t v14 = (unsigned __int8 **)v22[0];
      }
      DSPGraph::strprintf((DSPGraph *)"preprocessor error: macro %s not found.", v13, v14);
    }
    *a2 = v10 + 1;
    (*(void (**)(long long *__return_ptr))(*(void *)v11 + 16))(&v17);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v17;
    *(void *)(a3 + 16) = v18;
    *(void *)&long long v17 = &v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
  }
  return v6 == 91;
}

void sub_18FEF3DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  a22 = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 57) < 0) {
    operator delete(*(void **)(v39 - 80));
  }
  _Unwind_Resume(a1);
}

void DSPGraph::Preprocessor::parseToEnd(std::string::value_type **a1, char a2, std::string::value_type a3, std::string *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  std::string::value_type v8 = **a1;
  if (!v8)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "parseToEnd");
    std::string::basic_string[abi:ne180100]<0>(&v12, "preprocessor error: expected closing brace");
    DSPGraph::ThrowException(1886548769, &v14, 176, &v13, &v12);
  }
  long long v9 = *a1 + 1;
  int v10 = 1;
  while (1)
  {
    if (v8 != a3)
    {
      if (v8 == a2) {
        ++v10;
      }
      goto LABEL_11;
    }
    if (!--v10) {
      break;
    }
    std::string::value_type v8 = a3;
LABEL_11:
    std::string::push_back(this, v8);
    int v11 = *v9++;
    std::string::value_type v8 = v11;
    if (!v11) {
      goto LABEL_12;
    }
  }
  *a1 = v9;
}

void sub_18FEF3FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::StringSubMacro::apply(uint64_t a1@<X0>, DSPGraph::Preprocessor *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 80))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "apply");
    long long v9 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v9 = (void *)*v9;
    }
    DSPGraph::strprintf((DSPGraph *)"preprocessor error: recursive call to macro %s.", v8, v9);
  }
  *(unsigned char *)(a1 + 80) = 1;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (a3[1] - *a3 != v6 - v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "apply");
    int v11 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v11 = (void *)*v11;
    }
    DSPGraph::strprintf((DSPGraph *)"preprocessor error: macro %s: wrong number of arguments expected %zu. got %zu\n", v10, v11, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3));
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  v13[0] = a2;
  *(void *)(a4 + 16) = 0;
  std::string __p = 0;
  long long v16 = 0;
  uint64_t v17 = 0;
  v13[1] = &__p;
  if (v6 != v7) {
    operator new();
  }
  DSPGraph::Preprocessor::preprocess(&v14, a2, a1 + 56, 1);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v14;
  DSPGraph::UndefineLocals::~UndefineLocals((DSPGraph::UndefineLocals *)v13);
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 80) = 0;
}

void sub_18FEF437C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  *(unsigned char *)(v31 + 80) = 0;
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

BOOL DSPGraph::Preprocessor::parseMacroBody(void *a1, std::string::value_type **a2, uint64_t a3)
{
  void v16[2] = *MEMORY[0x1E4F143B8];
  if (DSPGraph::Preprocessor::parseToken(a2, a3) || (DSPGraph::Preprocessor::parseString(a2, a3) & 1) != 0) {
    return 1;
  }
  DSPGraph::skipspace(a2);
  if (**a2 == 40)
  {
    ++*a2;
    DSPGraph::Preprocessor::parseToEnd(a2, 40, 41, (std::string *)a3);
    uint64_t v6 = (void *)(a3 + 8);
    if (*(char *)(a3 + 23) >= 0) {
      size_t v7 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v7 = *(void *)(a3 + 8);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    p_p->__r_.__value_.__s.__data_[0] = 40;
    long long v9 = (char *)&p_p->__r_.__value_.__l.__data_ + 1;
    if (v7)
    {
      if (*(char *)(a3 + 23) >= 0) {
        int v10 = (const void *)a3;
      }
      else {
        int v10 = *(const void **)a3;
      }
      memmove(v9, v10, v7);
    }
    *((unsigned char *)v9 + v7) = 0;
    std::string::push_back(&__p, 41);
    v16[0] = __p.__r_.__value_.__l.__size_;
    std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
    *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(a3 + 23) < 0)
    {
      operator delete(*(void **)a3);
      int v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)a3 = v11;
      *uint64_t v6 = v16[0];
      *(void *)(a3 + 15) = *(void *)((char *)v16 + 7);
      *(unsigned char *)(a3 + 23) = v12;
      if (v14 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(void *)a3 = v11;
      *uint64_t v6 = v16[0];
      *(void *)(a3 + 15) = *(void *)((char *)v16 + 7);
      *(unsigned char *)(a3 + 23) = v12;
    }
    return 1;
  }
  DSPGraph::skipspace(a2);
  if (**a2 == 123)
  {
    ++*a2;
    DSPGraph::Preprocessor::parseToEnd(a2, 123, 125, (std::string *)a3);
    return 1;
  }
  return DSPGraph::Preprocessor::parseMacroCall(a1, a2, a3);
}

void sub_18FEF4720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void APComponent::~APComponent(APComponent *this)
{
  APComponent::~APComponent(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  const void *v4;
  const void *v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1EDF8C370;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2) {
    free(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unsigned int v4 = (const void *)*((void *)this + 15);
  if (v4) {
    CFRelease(v4);
  }
  std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__value_func[abi:ne180100]((void *)this + 10);
  uint64_t v5 = (const void *)*((void *)this + 8);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  UInt32 v8 = inPropertyDataSize;
  AudioConverterPropertyID v9 = inPropertyID;
  size_t v7 = inPropertyData;
  v5[0] = &v9;
  v5[1] = &v8;
  v5[2] = &v7;
  v6[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
  v6[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return with_resolved((int)inAudioConverter, v6);
}

uint64_t acv2::PCMConverterFactory::BuildConverterChain(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(__x) = 0;
  std::vector<char>::vector(&v79, 0x20uLL, (const std::vector<char>::value_type *)&__x);
  std::vector<char>::pointer begin = v79.__begin_;
  *(void *)v79.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  LOBYTE(__x) = 0;
  std::vector<char>::vector(&v80, 0x20uLL, (const std::vector<char>::value_type *)&__x);
  std::vector<char>::pointer v8 = v80.__begin_;
  *(void *)v80.__begin_ = 0;
  *((_DWORD *)v8 + 2) = 0;
  uint64_t v9 = *(void *)(a4 + 344);
  if (v9 && *(unsigned char *)(v9 + 197))
  {
    uint64_t OutputLayout = acv2::CodecConverter::GetOutputLayout((char **)v9, &v79, (unsigned __int8 *)&__x);
    if (OutputLayout) {
      goto LABEL_109;
    }
  }
  else if ((std::vector<char> *)(a4 + 352) != &v79)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v79, *(char **)(a4 + 352), *(char **)(a4 + 360), *(void *)(a4 + 360) - *(void *)(a4 + 352));
  }
  uint64_t v11 = *(void *)(a4 + 344);
  if (v11 && *(unsigned char *)(v11 + 196))
  {
    uint64_t OutputLayout = acv2::CodecConverter::GetInputLayout((char **)v11, &v80, (unsigned __int8 *)&__x);
    if (OutputLayout) {
      goto LABEL_109;
    }
  }
  else if ((std::vector<char> *)(a4 + 376) != &v80)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v80, *(char **)(a4 + 376), *(char **)(a4 + 384), *(void *)(a4 + 384) - *(void *)(a4 + 376));
  }
  long long v12 = a2[1];
  long long v74 = *a2;
  long long v75 = v12;
  long long v13 = a2[3];
  long long v76 = a2[2];
  long long v77 = v13;
  long long v78 = a2[4];
  double v14 = *(double *)&v74;
  double v15 = *((double *)&v76 + 1);
  if (*(double *)&v74 <= 0.0)
  {
    *(void *)&long long v74 = *((void *)&v76 + 1);
    double v14 = *((double *)&v76 + 1);
  }
  else if (*((double *)&v76 + 1) <= 0.0)
  {
    *((void *)&v76 + 1) = v74;
    double v15 = *(double *)&v74;
  }
  if (*(_DWORD *)v79.__begin_ == 0x10000)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v79.__begin_ + 1));
    v16.i16[0] = vaddlv_u8(v16);
    if (!v16.i32[0]) {
      goto LABEL_33;
    }
  }
  else if (*(_DWORD *)v79.__begin_)
  {
    if (!(unsigned __int16)*(_DWORD *)v79.__begin_) {
      goto LABEL_33;
    }
  }
  else if (!*((_DWORD *)v79.__begin_ + 2))
  {
    goto LABEL_33;
  }
  if (*(_DWORD *)v80.__begin_ == 0x10000)
  {
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v80.__begin_ + 1));
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.i32[0]) {
      goto LABEL_33;
    }
  }
  else if (*(_DWORD *)v80.__begin_)
  {
    if ((unsigned __int16)*(_DWORD *)v80.__begin_) {
      goto LABEL_33;
    }
  }
  else if (*((_DWORD *)v80.__begin_ + 2))
  {
    goto LABEL_33;
  }
  if (HIDWORD(v75) == DWORD1(v78)) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v80, v79.__begin_, v79.__end_, v79.__end_ - v79.__begin_);
  }
LABEL_33:
  char v71 = 0;
  std::string::size_type v72 = 0;
  uint64_t v73 = 0;
  char v18 = 0;
  if (v14 == 0.0 || v15 == 0.0 || v14 == v15)
  {
    if (!*(unsigned char *)(a3 + 25))
    {
      std::vector<char>::pointer v19 = v79.__begin_;
      goto LABEL_64;
    }
  }
  else
  {
    if (!*(unsigned char *)(a3 + 25))
    {
      std::vector<char>::pointer v19 = v79.__begin_;
LABEL_52:
      *(_OWORD *)unint64_t v102 = v76;
      *(_OWORD *)&v102[16] = v77;
      *(_OWORD *)&v102[32] = v78;
      long long __x = v74;
      long long v101 = v75;
      long long v87 = 0uLL;
      *(void *)&long long v88 = 0;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v87, v19, (uint64_t)v79.__end_, v79.__end_ - v19);
      *((void *)&v88 + 1) = 0;
      long long v89 = 0uLL;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)&v88 + 1, v80.__begin_, (uint64_t)v80.__end_, v80.__end_ - v80.__begin_);
      LOBYTE(v81) = 0;
      acv2::PCMConverterFactory::AddDownReinterleaver(&__x, (__int32 **)&v87);
      uint64_t OutputLayout = acv2::PCMConverterFactory::AddSRC((uint64_t)&__x, a3, (uint64_t)&v71);
      if (!OutputLayout)
      {
        uint64_t OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v102[8], (uint64_t)&__x, a3, (uint64_t)&v71, 1);
        if (!OutputLayout)
        {
          acv2::PCMConverterFactory::AddUpReinterleaver(&__x, (__int32 **)&v87, a3, (uint64_t)&v71, (char)v81);
          uint64_t OutputLayout = 0;
        }
      }
      goto LABEL_66;
    }
    char v18 = 1;
  }
  if (acv2::Reinterleaver::StereoDownmixPossible(&v74)
    || (std::vector<char>::pointer v19 = v79.__begin_,
        (acv2::MixableFormatPair(HIDWORD(v75), DWORD1(v78), (__int32 *)v79.__begin_, (__int32 *)v80.__begin_) & 1) == 0))
  {
    std::vector<char>::pointer v19 = v79.__begin_;
    if (v18)
    {
      if (*(unsigned char *)(a3 + 26))
      {
LABEL_46:
        long long v89 = v76;
        long long v90 = v77;
        long long v91 = v78;
        long long v87 = v74;
        long long v88 = v75;
        std::vector<std::string>::pointer v81 = 0;
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v81, v19, (uint64_t)v79.__end_, v79.__end_ - v19);
        BOOL v84 = 0;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v84, v80.__begin_, (uint64_t)v80.__end_, v80.__end_ - v80.__begin_);
        if (SDWORD1(v91) < SHIDWORD(v88))
        {
          int v20 = 4 * HIDWORD(v88);
          if ((BYTE12(v87) & 0x20) != 0) {
            int v20 = 4;
          }
          uint64_t v92 = 0;
          int v93 = 1819304813;
          int v94 = BYTE12(v87) & 0x20 | 9;
          int v95 = v20;
          int v96 = 1;
          int v97 = v20;
          int v98 = HIDWORD(v88);
          uint64_t v99 = 32;
          uint64_t OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v92, (uint64_t)&v87, a3, (uint64_t)&v71, 0);
          if (OutputLayout)
          {
            std::string::size_type v21 = v84;
            goto LABEL_103;
          }
          long long __x = v87;
          long long v101 = v88;
          *(void *)unint64_t v102 = v89;
          int v30 = DWORD1(v91);
          if ((BYTE12(v87) & 0x20) != 0)
          {
            unsigned int v31 = 1;
          }
          else
          {
            unsigned int v31 = HIDWORD(v88);
            if (!HIDWORD(v88))
            {
              unsigned int v32 = (v89 + 7) >> 3;
              goto LABEL_80;
            }
          }
          unsigned int v32 = DWORD2(v88) / v31;
LABEL_80:
          HIDWORD(v88) = DWORD1(v91);
          if ((BYTE4(v90) & 0x20) != 0) {
            int v30 = 1;
          }
          DWORD1(v88) = 1;
          DWORD2(v88) = v32 * v30;
          HIDWORD(v87) = HIDWORD(v87) & 0xFFFFFFDF | BYTE4(v90) & 0x20;
          LODWORD(v88) = v32 * v30;
          *(_OWORD *)&v102[8] = v87;
          *(void *)&v102[40] = v89;
          *(_OWORD *)&v102[24] = v88;
          operator new();
        }
        uint64_t OutputLayout = acv2::PCMConverterFactory::AddSRC((uint64_t)&v87, a3, (uint64_t)&v71);
        std::string::size_type v21 = v84;
        if (!OutputLayout)
        {
          int v33 = HIDWORD(v88);
          if ((acv2::MixableFormatPair(HIDWORD(v88), DWORD1(v91), (__int32 *)v81, (__int32 *)v84) & 1) != 0
            || *(unsigned char *)(a3 + 26))
          {
            int v34 = 4 * v33;
            if ((BYTE12(v87) & 0x20) != 0) {
              int v34 = 4;
            }
            uint64_t v92 = 0;
            int v93 = 1819304813;
            int v94 = BYTE12(v87) & 0x20 | 9;
            int v95 = v34;
            int v96 = 1;
            int v97 = v34;
            int v98 = v33;
            uint64_t v99 = 32;
            uint64_t OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v92, (uint64_t)&v87, a3, (uint64_t)&v71, 0);
            if (!OutputLayout)
            {
              long long __x = v87;
              long long v101 = v88;
              *(void *)unint64_t v102 = v89;
              int v35 = DWORD1(v91);
              if ((BYTE12(v87) & 0x20) != 0)
              {
                unsigned int v36 = 1;
              }
              else
              {
                unsigned int v36 = HIDWORD(v88);
                if (!HIDWORD(v88))
                {
                  unsigned int v37 = (v89 + 7) >> 3;
                  goto LABEL_99;
                }
              }
              unsigned int v37 = DWORD2(v88) / v36;
LABEL_99:
              HIDWORD(v88) = DWORD1(v91);
              if ((BYTE4(v90) & 0x20) != 0) {
                int v35 = 1;
              }
              DWORD1(v88) = 1;
              DWORD2(v88) = v37 * v35;
              HIDWORD(v87) = HIDWORD(v87) & 0xFFFFFFDF | BYTE4(v90) & 0x20;
              LODWORD(v88) = v37 * v35;
              *(_OWORD *)&v102[8] = v87;
              *(void *)&v102[40] = v89;
              *(_OWORD *)&v102[24] = v88;
              operator new();
            }
          }
          else
          {
            uint64_t OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal((_DWORD *)&v89 + 2, (uint64_t)&v87, a3, (uint64_t)&v71, 1);
          }
        }
LABEL_103:
        if (v21) {
          operator delete(v21);
        }
        int v29 = v81;
        if (!v81) {
          goto LABEL_107;
        }
        goto LABEL_106;
      }
      goto LABEL_52;
    }
    if (*(unsigned char *)(a3 + 26)) {
      goto LABEL_56;
    }
LABEL_64:
    *(_OWORD *)unint64_t v102 = v76;
    *(_OWORD *)&v102[16] = v77;
    *(_OWORD *)&v102[32] = v78;
    long long __x = v74;
    long long v101 = v75;
    long long v87 = 0uLL;
    *(void *)&long long v88 = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v87, v19, (uint64_t)v79.__end_, v79.__end_ - v19);
    *((void *)&v88 + 1) = 0;
    long long v89 = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)&v88 + 1, v80.__begin_, (uint64_t)v80.__end_, v80.__end_ - v80.__begin_);
    LOBYTE(v81) = 0;
    acv2::PCMConverterFactory::AddDownReinterleaver(&__x, (__int32 **)&v87);
    uint64_t OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v102[8], (uint64_t)&__x, a3, (uint64_t)&v71, 1);
    if (!OutputLayout) {
      acv2::PCMConverterFactory::AddUpReinterleaver(&__x, (__int32 **)&v87, a3, (uint64_t)&v71, (char)v81);
    }
LABEL_66:
    if (*((void *)&v88 + 1)) {
      operator delete(*((void **)&v88 + 1));
    }
    int v29 = (void *)v87;
    if (!(void)v87) {
      goto LABEL_107;
    }
    goto LABEL_106;
  }
  if (v18) {
    goto LABEL_46;
  }
LABEL_56:
  long long v89 = v76;
  long long v90 = v77;
  long long v91 = v78;
  long long v87 = v74;
  long long v88 = v75;
  std::vector<std::string>::pointer v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v81, v19, (uint64_t)v79.__end_, v79.__end_ - v19);
  BOOL v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v84, v80.__begin_, (uint64_t)v80.__end_, v80.__end_ - v80.__begin_);
  int v22 = HIDWORD(v88);
  uint64_t v23 = v81;
  long long v24 = v84;
  if ((acv2::MixableFormatPair(HIDWORD(v88), DWORD1(v91), (__int32 *)v81, (__int32 *)v84) & 1) != 0
    || *(unsigned char *)(a3 + 26))
  {
    int v25 = 4 * v22;
    if ((BYTE12(v87) & 0x20) != 0) {
      int v25 = 4;
    }
    uint64_t v92 = 0;
    int v93 = 1819304813;
    int v94 = BYTE12(v87) & 0x20 | 9;
    int v95 = v25;
    int v96 = 1;
    int v97 = v25;
    int v98 = v22;
    uint64_t v99 = 32;
    uint64_t OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal(&v92, (uint64_t)&v87, a3, (uint64_t)&v71, 0);
    if (!OutputLayout)
    {
      long long __x = v87;
      long long v101 = v88;
      *(void *)unint64_t v102 = v89;
      int v26 = DWORD1(v91);
      if ((BYTE12(v87) & 0x20) != 0)
      {
        unsigned int v27 = 1;
      }
      else
      {
        unsigned int v27 = HIDWORD(v88);
        if (!HIDWORD(v88))
        {
          unsigned int v28 = (v89 + 7) >> 3;
          goto LABEL_75;
        }
      }
      unsigned int v28 = DWORD2(v88) / v27;
LABEL_75:
      HIDWORD(v88) = DWORD1(v91);
      if ((BYTE4(v90) & 0x20) != 0) {
        int v26 = 1;
      }
      DWORD1(v88) = 1;
      DWORD2(v88) = v28 * v26;
      HIDWORD(v87) = HIDWORD(v87) & 0xFFFFFFDF | BYTE4(v90) & 0x20;
      LODWORD(v88) = v28 * v26;
      *(_OWORD *)&v102[8] = v87;
      *(void *)&v102[40] = v89;
      *(_OWORD *)&v102[24] = v88;
      operator new();
    }
  }
  else
  {
    uint64_t OutputLayout = acv2::PCMConverterFactory::AddPCMToGoal((_DWORD *)&v89 + 2, (uint64_t)&v87, a3, (uint64_t)&v71, 1);
  }
  if (v24) {
    operator delete(v24);
  }
  if (!v23) {
    goto LABEL_107;
  }
  int v29 = v23;
LABEL_106:
  operator delete(v29);
LABEL_107:
  if (!OutputLayout)
  {
    uint64_t v39 = v71;
    for (uint64_t i = v72; v39 != i; ++v39)
    {
      uint64_t v41 = *v39;
      if ((*(uint64_t (**)(uint64_t))(*(void *)*v39 + 16))(*v39))
      {
        int v43 = *(uint64_t **)(a4 + 304);
        unint64_t v42 = *(void *)(a4 + 312);
        if ((unint64_t)v43 >= v42)
        {
          uint64_t v48 = *(void *)(a4 + 296);
          uint64_t v49 = ((uint64_t)v43 - v48) >> 3;
          if ((unint64_t)(v49 + 1) >> 61) {
            goto LABEL_159;
          }
          uint64_t v50 = v42 - v48;
          uint64_t v51 = v50 >> 2;
          if (v50 >> 2 <= (unint64_t)(v49 + 1)) {
            uint64_t v51 = v49 + 1;
          }
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v51;
          }
          if (v52) {
            unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v52);
          }
          else {
            uint64_t v53 = 0;
          }
          unint64_t v61 = (uint64_t *)(v52 + 8 * v49);
          uint64_t *v61 = v41;
          int v44 = v61 + 1;
          int v63 = *(char **)(a4 + 296);
          uint64_t v62 = *(char **)(a4 + 304);
          if (v62 != v63)
          {
            do
            {
              uint64_t v64 = *((void *)v62 - 1);
              v62 -= 8;
              *--unint64_t v61 = v64;
            }
            while (v62 != v63);
            uint64_t v62 = *(char **)(a4 + 296);
          }
          *(void *)(a4 + 296) = v61;
          *(void *)(a4 + 304) = v44;
          *(void *)(a4 + 312) = v52 + 8 * v53;
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *int v43 = v41;
          int v44 = v43 + 1;
        }
        *(void *)(a4 + 304) = v44;
      }
      else if ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 24))(v41))
      {
        unsigned int v46 = *(uint64_t **)(a4 + 328);
        unint64_t v45 = *(void *)(a4 + 336);
        if ((unint64_t)v46 >= v45)
        {
          uint64_t v55 = *(void *)(a4 + 320);
          uint64_t v56 = ((uint64_t)v46 - v55) >> 3;
          if ((unint64_t)(v56 + 1) >> 61) {
LABEL_159:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          uint64_t v57 = v45 - v55;
          uint64_t v58 = v57 >> 2;
          if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
            uint64_t v58 = v56 + 1;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v58;
          }
          if (v59) {
            unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v59);
          }
          else {
            uint64_t v60 = 0;
          }
          uint64_t v66 = (uint64_t *)(v59 + 8 * v56);
          *uint64_t v66 = v41;
          int v47 = v66 + 1;
          uint64_t v68 = *(char **)(a4 + 320);
          uint64_t v67 = *(char **)(a4 + 328);
          if (v67 != v68)
          {
            do
            {
              uint64_t v69 = *((void *)v67 - 1);
              v67 -= 8;
              *--uint64_t v66 = v69;
            }
            while (v67 != v68);
            uint64_t v67 = *(char **)(a4 + 320);
          }
          *(void *)(a4 + 320) = v66;
          *(void *)(a4 + 328) = v47;
          *(void *)(a4 + 336) = v59 + 8 * v60;
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *unsigned int v46 = v41;
          int v47 = v46 + 1;
        }
        *(void *)(a4 + 328) = v47;
      }
      else
      {
        uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(v41);
        if (v54)
        {
          *(void *)(a4 + 344) = v54;
        }
        else
        {
          uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 32))(v41);
          if (v65)
          {
            *(void *)(a4 + 440) = v65;
          }
          else
          {
            uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 40))(v41);
            if (v70) {
              *(void *)(a4 + 424) = v70;
            }
          }
        }
      }
      acv2::AudioConverterChain::AddStep((void *)a4, v39);
    }
  }
  *(void *)&long long __x = &v71;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
LABEL_109:
  if (v80.__begin_)
  {
    v80.__end_ = v80.__begin_;
    operator delete(v80.__begin_);
  }
  if (v79.__begin_)
  {
    v79.__end_ = v79.__begin_;
    operator delete(v79.__begin_);
  }
  return OutputLayout;
}

void sub_18FEF5624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  MEMORY[0x192FC8940](v38, 0x10B3C404482F264);
  acv2::ChannelLayoutPair::~ChannelLayoutPair((acv2::ChannelLayoutPair *)&__p);
  a30 = &a10;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  acv2::ChannelLayoutPair::~ChannelLayoutPair((acv2::ChannelLayoutPair *)&a24);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  size_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *size_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  long long v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    double v15 = &v9[v16];
    goto LABEL_20;
  }
  double v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  double v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18FEF58C0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__clear[abi:ne180100](v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    unsigned int v4 = (void *)*--v3;
    uint64_t result = v4;
    *unint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *acv2::AudioConverterChain::AddStep(void *result, uint64_t *a2)
{
  unint64_t v3 = result;
  unsigned int v4 = (void *)result[13];
  uint64_t v6 = (void *)result[14];
  uint64_t v5 = result + 13;
  if (v4 == v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(v6 - 1);
  }
  *(void *)(*a2 + 96) = v7;
  unint64_t v8 = result[15];
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v11 = v6 - v4;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    v18[4] = v3 + 15;
    if (v14) {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    size_t v16 = (void *)(v14 + 8 * v11);
    v18[0] = v14;
    v18[1] = v16;
    void v18[3] = v14 + 8 * v15;
    uint64_t v17 = *a2;
    *a2 = 0;
    void *v16 = v17;
    void v18[2] = v16 + 1;
    std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__swap_out_circular_buffer(v5, v18);
    uint64_t v10 = (void *)v3[14];
    uint64_t result = (void *)std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    *uint64_t v6 = v9;
    uint64_t v10 = v6 + 1;
  }
  v3[14] = v10;
  return result;
}

void *std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__swap_out_circular_buffer(void *result, void *a2)
{
  unint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    void *v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t acv2::ConverterRegistry::FindFactoryByFormatIDs(acv2::ConverterRegistry **a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  char v10 = 0;
  while (2)
  {
    uint64_t v11 = v7[1];
    uint64_t v12 = v7[2];
    uint64_t v13 = v8;
    while (v11 != v12)
    {
      uint64_t v14 = *(void *)v11;
      if (*(_DWORD *)(*(void *)v11 + 8) != a2 || *(_DWORD *)(v14 + 12) != a3) {
        goto LABEL_8;
      }
      if ((unint64_t)v13 < v9)
      {
        *(void *)uint64_t v13 = v14;
        v13 += 8;
LABEL_8:
        uint64_t v15 = v13;
        goto LABEL_9;
      }
      uint64_t v16 = (v13 - v8) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v9 - (void)v8) >> 2 > v17) {
        unint64_t v17 = (uint64_t)(v9 - (void)v8) >> 2;
      }
      if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v18);
        uint64_t v14 = *(void *)v11;
      }
      else
      {
        uint64_t v19 = 0;
      }
      int v20 = (char *)(v18 + 8 * v16);
      *(void *)int v20 = v14;
      uint64_t v15 = v20 + 8;
      while (v13 != v8)
      {
        uint64_t v21 = *((void *)v13 - 1);
        v13 -= 8;
        *((void *)v20 - 1) = v21;
        v20 -= 8;
      }
      unint64_t v9 = v18 + 8 * v19;
      if (v8) {
        operator delete(v8);
      }
      uint64_t v8 = v20;
LABEL_9:
      uint64_t v11 = (acv2::ConverterRegistry *)((char *)v11 + 8);
      uint64_t v13 = v15;
    }
    if (!(v10 & 1 | (v8 != v13)))
    {
      if (a3 == 1885564203 || a3 == 1819304813)
      {
        uint64_t v7 = a1;
        char DecoderFactories = acv2::ConverterRegistry::MakeDecoderFactories(a1, a2, a3);
        goto LABEL_31;
      }
      uint64_t v7 = a1;
      if (a2 != 1819304813) {
        goto LABEL_50;
      }
      char DecoderFactories = acv2::ConverterRegistry::MakeEncoderFactories((acv2::ConverterRegistry *)a1, a3);
LABEL_31:
      char v10 = 1;
      if ((DecoderFactories & 1) == 0)
      {
LABEL_50:
        uint64_t v33 = 0;
        uint64_t result = 0;
        if (v8) {
          goto LABEL_51;
        }
        return result;
      }
      continue;
    }
    break;
  }
  if (v8 == v13) {
    goto LABEL_50;
  }
  unint64_t v23 = v13 - v8;
  long long v24 = v8;
  if (v13 - v8 != 8)
  {
    long long v24 = v8;
    if (a5)
    {
      long long v24 = v8;
      if ((v23 & 0x7FFFFFFF8) != 0)
      {
        uint64_t v25 = 0;
        uint64_t v26 = (v23 >> 3);
        unsigned int v27 = -1;
        unsigned int v28 = -1;
        do
        {
          unsigned int v29 = 0;
          int v30 = *(_DWORD **)&v8[8 * v25];
          uint64_t v31 = 12 * a5;
          unsigned int v32 = (_DWORD *)(a4 + 8);
          while (*(v32 - 2) != v30[4] || *(v32 - 1) != v30[5] || *v32 != v30[6])
          {
            ++v29;
            v32 += 3;
            v31 -= 12;
            if (!v31)
            {
              unsigned int v29 = -1;
              break;
            }
          }
          if (v29 < v28)
          {
            unsigned int v28 = v29;
            unsigned int v27 = v25;
          }
          ++v25;
        }
        while (v25 != v26);
        long long v24 = &v8[8 * v27];
        if (v27 == -1) {
          long long v24 = v8;
        }
      }
    }
  }
  uint64_t v33 = *(void *)v24;
LABEL_51:
  operator delete(v8);
  return v33;
}

void sub_18FEF5DF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::sortUpstream(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = *(uint64_t **)(result + 64);
  uint64_t v7 = *(uint64_t **)(result + 72);
  if (v6 != v7)
  {
    uint64_t result = *(void *)(result + 64);
    uint64_t v8 = v6;
    do
    {
      uint64_t v9 = *v8;
      v8 += 4;
      uint64_t v10 = **(void **)(*(void *)((*(uint64_t (**)(uint64_t))(v9 + 40))(result) + 8) + 8);
      (*(void (**)(void))(v10 + 400))();
      v6 += 4;
      uint64_t result = (uint64_t)v8;
    }
    while (v8 != v7);
  }
  uint64_t v11 = (unsigned char *)v5[19];
  uint64_t v12 = (unsigned char *)v5[20];
  while (v11 != v12)
  {
    if (v11[36]) {
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)v11 + 400))(*(void *)v11, v5[2], a2, a3);
    }
    v11 += 40;
  }
  uint64_t v13 = (unsigned char *)v5[22];
  uint64_t v14 = (unsigned char *)v5[23];
  while (v13 != v14)
  {
    if (v13[36]) {
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)v13 + 400))(*(void *)v13, v5[2], a2, a3);
    }
    v13 += 64;
  }
  for (uint64_t i = (uint64_t **)v5[16]; i; uint64_t i = (uint64_t **)*i)
    uint64_t result = (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*i[2] + 400))(i[2], v5[2], a2, a3);
  return result;
}

void DSPGraph::Box::topologicalSort(uint64_t a1, uint64_t a2, void **a3, char **a4)
{
  if (*(unsigned char *)(a1 + 746))
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v21, "topologicalSort");
    std::string::basic_string[abi:ne180100]<0>(&v20, "Box::topologicalSort, There is a cycle in the graph. The graph must be acyclic.");
    DSPGraph::ThrowException(1953460257, &v22, 485, &v21, &v20);
  }
  if (!*(unsigned char *)(a1 + 745))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5 == a2)
    {
      *(unsigned char *)(a1 + 746) = 1;
      (*(void (**)(uint64_t, void **, char **))(*(void *)a1 + 408))(a1, a3, a4);
      *(unsigned char *)(a1 + 746) = 0;
      uint64_t v8 = a3[1];
      unint64_t v7 = (unint64_t)a3[2];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = ((char *)v8 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v7 - (void)*a3;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (void *)(v13 + 8 * v10);
        unint64_t v16 = v13 + 8 * v14;
        *uint64_t v15 = a1;
        uint64_t v9 = v15 + 1;
        unint64_t v18 = (char *)*a3;
        unint64_t v17 = (char *)a3[1];
        if (v17 != *a3)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *--uint64_t v15 = v19;
          }
          while (v17 != v18);
          unint64_t v17 = (char *)*a3;
        }
        *a3 = v15;
        a3[1] = v9;
        a3[2] = (void *)v16;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        void *v8 = a1;
        uint64_t v9 = v8 + 1;
      }
      a3[1] = v9;
      *(unsigned char *)(a1 + 745) = 1;
    }
    else
    {
      DSPGraph::IsoGroup::topologicalSort(v5, a4);
    }
  }
}

void sub_18FEF619C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  *(unsigned char *)(v27 + 746) = 0;
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void DSPGraph::IsoGroup::topologicalSort(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 249))
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v19, "topologicalSort");
    std::string::basic_string[abi:ne180100]<0>(&v18, "IsoGroup::topologicalSort, There is a cycle in the graph. The graph must be acyclic.");
    DSPGraph::ThrowException(1953460257, &v20, 251, &v19, &v18);
  }
  if (!*(unsigned char *)(a1 + 248))
  {
    *(unsigned char *)(a1 + 249) = 1;
    for (uint64_t i = *(void **)(a1 + 112); i; uint64_t i = (void *)*i)
      DSPGraph::IsoGroup::topologicalSort(*(void *)(i[2] + 848), a2);
    uint64_t v5 = *(void *)(a1 + 224);
    *(unsigned char *)(a1 + 249) = 0;
    *(void *)(a1 + 232) = v5;
    for (char j = *(uint64_t ***)(a1 + 72); j; char j = (uint64_t **)*j)
      (*(void (**)(uint64_t *, uint64_t, uint64_t, char **))(*j[2] + 400))(j[2], a1, a1 + 224, a2);
    uint64_t v8 = a2[1];
    unint64_t v7 = (unint64_t)a2[2];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = *a2;
      uint64_t v11 = (v8 - *a2) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v7 - (void)v10;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v15 = (char *)operator new(8 * v14);
      }
      else
      {
        uint64_t v15 = 0;
      }
      unint64_t v16 = &v15[8 * v11];
      *(void *)unint64_t v16 = a1;
      uint64_t v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          uint64_t v17 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        uint64_t v8 = *a2;
      }
      *a2 = v16;
      a2[1] = v9;
      a2[2] = &v15[8 * v14];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *(void *)uint64_t v8 = a1;
      uint64_t v9 = v8 + 8;
    }
    a2[1] = v9;
    *(unsigned char *)(a1 + 248) = 1;
  }
}

void sub_18FEF640C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::PCMConverterFactory::AddPCMToGoal(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v74 = *(_OWORD *)a2;
  long long v75 = v6;
  uint64_t v76 = *(void *)(a2 + 32);
  unsigned int v8 = a1[2];
  int v7 = a1[3];
  unsigned int v10 = a1[8];
  int v9 = a1[9];
  unsigned int v11 = HIDWORD(v6);
  unsigned int v12 = HIDWORD(v74);
  int v13 = BYTE12(v74) & 0x20;
  if ((v7 & 0x20) != 0)
  {
    unsigned int v14 = 1;
  }
  else
  {
    unsigned int v14 = a1[7];
    if (!v14)
    {
      unsigned int v15 = (v10 + 7) >> 3;
      goto LABEL_6;
    }
  }
  unsigned int v15 = a1[6] / v14;
LABEL_6:
  unsigned int v16 = v7 & 0xFFFFFFDF;
  if ((BYTE12(v74) & 0x20) != 0) {
    int v17 = 1;
  }
  else {
    int v17 = HIDWORD(v6);
  }
  uint64_t v18 = v74;
  *(void *)&long long v77 = v74;
  unsigned int v19 = v15 * v17;
  int v20 = v13 | v16;
  DWORD2(v77) = v8;
  HIDWORD(v77) = v13 | v16;
  *(_DWORD *)long long v78 = v15 * v17;
  *(_DWORD *)&v78[4] = 1;
  *(_DWORD *)&v78[8] = v15 * v17;
  *(_DWORD *)&v78[12] = HIDWORD(v6);
  *(_DWORD *)&v78[16] = v10;
  *(_DWORD *)&v78[20] = v9;
  int v21 = HIDWORD(v6);
  if (!a5 || (v22 = *(_DWORD *)(a3 + 56), int v21 = HIDWORD(v6), !v22))
  {
    if (v21 != 2 || HIDWORD(v6) != 2 || *(_DWORD *)(a3 + 56)) {
      goto LABEL_128;
    }
    *(void *)&long long v77 = v74;
    DWORD2(v77) = v8;
    HIDWORD(v77) = v13 | v16;
    *(_DWORD *)long long v78 = v19;
    *(_DWORD *)&v78[4] = 1;
    *(_DWORD *)&v78[8] = v19;
    *(_DWORD *)&v78[12] = 2;
    *(_DWORD *)&v78[16] = v10;
    *(_DWORD *)&v78[20] = v9;
    if (a5)
    {
      unsigned int v55 = *(_DWORD *)(a2 + 52) & 0x20;
      if ((v13 == 0) != (v55 == 0))
      {
        *(_DWORD *)&v78[8] = v19 >> (((BYTE12(v74) & 0x20) >> 5) ^ 1) << (((*(_DWORD *)(a2 + 52) & 0x20u) >> 5) ^ 1);
        HIDWORD(v77) = v55 | v16;
        *(_DWORD *)long long v78 = v19 >> (((BYTE12(v74) & 0x20) >> 5) ^ 1) << ((v55 >> 5) ^ 1);
        int v13 = v55;
      }
    }
    if (((BYTE12(v74) & 0x20) == 0) == (v13 == 0)) {
      goto LABEL_128;
    }
    v79[0] = v74;
    v79[1] = v75;
    uint64_t v80 = v76;
    long long v71 = v77;
    long long v72 = *(_OWORD *)v78;
    uint64_t v73 = *(void *)&v78[16];
    if (HIDWORD(v75) != 2) {
      goto LABEL_128;
    }
    if (HIDWORD(v72) != 2) {
      goto LABEL_128;
    }
    unsigned int v56 = HIDWORD(v79[0]);
    unsigned int v57 = HIDWORD(v71);
    if (((HIDWORD(v79[0]) | HIDWORD(v71)) & 2) != 0) {
      goto LABEL_128;
    }
    unsigned int v66 = v8;
    int v67 = v9;
    int v58 = ((BYTE12(v71) & 0x20) == 0) & (HIDWORD(v79[0]) >> 5);
    int v59 = IntSampleSize(v79);
    int v60 = IntSampleSize(&v71);
    int v61 = (v56 >> 7) & 0x3F;
    if (v59 && v60)
    {
      if (v58)
      {
        unsigned int v8 = v66;
        int v9 = v67;
        if (v61 != 24 || v59 != 4 || v60 != 2)
        {
LABEL_128:
          *(void *)&long long v77 = v18;
          *((void *)&v77 + 1) = __PAIR64__(v20, v8);
          *(_DWORD *)long long v78 = v19;
          *(_DWORD *)&v78[4] = 1;
          *(_DWORD *)&v78[8] = v19;
          *(_DWORD *)&v78[12] = v11;
          *(_DWORD *)&v78[16] = v10;
          *(_DWORD *)&v78[20] = v9;
          return acv2::PCMConverterFactory::BuildSampleFormatConverterChain(&v74, a2);
        }
LABEL_117:
        operator new();
      }
      unsigned int v8 = v66;
      int v9 = v67;
      if (((v57 >> 7) & 0x3F) != 0x18 || v59 != 2 || v60 != 4) {
        goto LABEL_128;
      }
    }
    else
    {
      int __pa = (v57 >> 7) & 0x3F;
      if (v58)
      {
        int v62 = v60;
        int v63 = FloatSampleSize(v79);
        unsigned int v8 = v66;
        int v9 = v67;
        if (v63 != 4 || (__pa != 24 || v62 != 4) && (__pa || v62 != 2)) {
          goto LABEL_128;
        }
        goto LABEL_117;
      }
      int v64 = FloatSampleSize(&v71);
      unsigned int v8 = v66;
      int v9 = v67;
      if (v64 != 4 || (v61 != 24 || v59 != 4) && (__pa || v59 != 2)) {
        goto LABEL_128;
      }
    }
    operator new();
  }
  unint64_t v23 = (int *)operator new(4uLL);
  long long v24 = v23;
  *unint64_t v23 = 1;
  uint64_t v25 = v23 + 1;
  if (v22 == 3)
  {
    uint64_t v26 = (int *)operator new(8uLL);
    uint64_t v25 = v26 + 2;
    int *v26 = *v24;
    v26[1] = 3;
    operator delete(v24);
    uint64_t v27 = v26;
  }
  else
  {
    uint64_t v27 = v23;
  }
  int v28 = 0;
  char v29 = 0;
  std::string __p = v27;
  do
  {
    int v31 = *v27++;
    int v30 = v31;
    if (v31 == 3) {
      int v32 = 1;
    }
    else {
      int v32 = v28;
    }
    if (v30 == 1) {
      char v29 = 1;
    }
    else {
      int v28 = v32;
    }
  }
  while (v27 != v25);
  if (DWORD2(v74) != 1819304813 || DWORD1(v75) != 1) {
    goto LABEL_54;
  }
  int v34 = DWORD2(v75);
  if (DWORD2(v75) != v75) {
    goto LABEL_54;
  }
  if (DWORD2(v75) < v76 >> 3) {
    goto LABEL_54;
  }
  if (!v11) {
    goto LABEL_54;
  }
  if (!v13)
  {
    int v34 = DWORD2(v75) / v11;
    if (DWORD2(v75) != DWORD2(v75) / v11 * v11) {
      goto LABEL_54;
    }
  }
  int v35 = 0;
  if ((v12 & 2) == 0 && 8 * v34 == v76)
  {
    if (v12)
    {
      if ((v12 & 0x1F84) != 0)
      {
LABEL_54:
        if (v28) {
          int v38 = 2;
        }
        else {
          int v38 = 0;
        }
        uint64_t v39 = v38 & 0xFFFFFFFE | v29 & 1;
        int v40 = 9;
        switch(v39)
        {
          case 1:
            goto LABEL_60;
          case 2:
            goto LABEL_59;
          case 3:
            if ((v12 & 1) == 0) {
LABEL_59:
            }
              int v40 = 3084;
LABEL_60:
            int v41 = v13 | v40;
            int v42 = 4 * v11;
            if (v13) {
              int v42 = 4;
            }
            *(void *)&long long v77 = v18;
            DWORD2(v77) = 1819304813;
            HIDWORD(v77) = v41;
            *(_DWORD *)long long v78 = v42;
            *(_DWORD *)&v78[4] = 1;
            *(_DWORD *)&v78[8] = v42;
            *(_DWORD *)&v78[12] = v11;
            *(void *)&v78[16] = 32;
            uint64_t v43 = acv2::PCMConverterFactory::BuildSampleFormatConverterChain(&v74, (uint64_t)&v74);
            if (!v43) {
              goto LABEL_63;
            }
            goto LABEL_87;
          default:
            goto LABEL_63;
        }
      }
      int v35 = 4 * (v34 == 8);
      if (v34 == 4) {
        int v35 = 1;
      }
    }
    else if ((v12 & 4) != 0)
    {
      int v36 = (v12 >> 7) & 0x3F;
      if (v36 == 24 && v34 == 4)
      {
        int v35 = 3;
      }
      else if (v36 || v34 != 4)
      {
        if (v34 == 2 && v36 == 0) {
          int v35 = 2;
        }
        else {
          int v35 = 0;
        }
      }
      else
      {
        int v35 = 5;
      }
    }
    else
    {
      int v35 = 0;
    }
  }
  if (((v35 == 3) & v28) == 0 && ((v35 == 1) & v29) == 0) {
    goto LABEL_54;
  }
LABEL_63:
  int v44 = *(_DWORD *)(a3 + 56);
  uint64_t v45 = 0;
  if ((v44 - 1) > 2)
  {
LABEL_66:
    int v48 = 0;
    int v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v45 = v74;
    int v46 = BYTE12(v74) & 0x20;
    switch(dword_1901E53D0[v44 - 1])
    {
      case 1:
        int v47 = 9;
        goto LABEL_69;
      case 2:
        int v49 = v46 | 0xC;
        if ((BYTE12(v74) & 0x20) != 0) {
          unsigned int v54 = 2;
        }
        else {
          unsigned int v54 = 2 * HIDWORD(v75);
        }
        uint64_t v50 = v54 | 0x100000000;
        HIDWORD(v51) = 16;
        goto LABEL_82;
      case 3:
        int v47 = 3084;
LABEL_69:
        int v49 = v46 | v47;
        goto LABEL_70;
      case 4:
        int v49 = v46 | 9;
        if ((BYTE12(v74) & 0x20) != 0) {
          unsigned int v53 = 8;
        }
        else {
          unsigned int v53 = 8 * HIDWORD(v75);
        }
        uint64_t v50 = v53 | 0x100000000;
        HIDWORD(v51) = 64;
        goto LABEL_82;
      case 5:
        int v49 = v46 | 0xC;
LABEL_70:
        if ((BYTE12(v74) & 0x20) != 0) {
          unsigned int v52 = 4;
        }
        else {
          unsigned int v52 = 4 * HIDWORD(v75);
        }
        uint64_t v50 = v52 | 0x100000000;
        HIDWORD(v51) = 32;
LABEL_82:
        LODWORD(v51) = HIDWORD(v75);
        int v48 = 1819304813;
        break;
      default:
        goto LABEL_66;
    }
  }
  uint64_t v43 = 1869627199;
  *(void *)&long long v77 = v45;
  *((void *)&v77 + 1) = __PAIR64__(v49, v48);
  *(void *)long long v78 = v50;
  *(_DWORD *)&v78[8] = v50;
  *(void *)&v78[12] = v51;
  *(_DWORD *)&v78[20] = 0;
  if ((v10 < 0x19 || (v49 & 1) == 0) && ((v49 & 5) != 4 || HIDWORD(v51) <= v10))
  {
    switch(v44)
    {
      case 3:
        operator new();
      case 2:
        operator new();
      case 1:
        operator new();
    }
  }
LABEL_87:
  operator delete(__p);
  return v43;
}

void sub_18FEF7110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
}

uint64_t acv2::PCMConverterFactory::BuildSampleFormatConverterChain(long long *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(double *)a1 != 0.0 && ((v2 = *((double *)a1 + 5), v2 != 0.0) ? (BOOL v3 = *(double *)a1 == v2) : (BOOL v3 = 1), !v3)
    || *((_DWORD *)a1 + 17) != *((_DWORD *)a1 + 7)
    || ((*((unsigned char *)a1 + 12) & 0x20) == 0) != ((*((unsigned char *)a1 + 52) & 0x20) == 0))
  {
    std::terminate();
  }
  uint64_t v4 = (long long *)((char *)a1 + 40);
  long long v5 = a1[1];
  long long v19 = *a1;
  long long v20 = v5;
  uint64_t v21 = *((void *)a1 + 4);
  int v6 = 3;
  while (1)
  {
    long long v7 = v4[1];
    long long v22 = *v4;
    long long v23 = v7;
    uint64_t v24 = *((void *)v4 + 4);
    if ((BYTE12(v22) & 0x20) != 0)
    {
      unsigned int v8 = 1;
    }
    else
    {
      unsigned int v8 = HIDWORD(v23);
      if (!HIDWORD(v23))
      {
        unsigned int v9 = (v24 + 7) >> 3;
        goto LABEL_15;
      }
    }
    unsigned int v9 = DWORD2(v23) / v8;
LABEL_15:
    int v10 = HIDWORD(v20);
    HIDWORD(v23) = HIDWORD(v20);
    if ((BYTE12(v19) & 0x20) != 0) {
      int v10 = 1;
    }
    DWORD1(v23) = 1;
    DWORD2(v23) = v9 * v10;
    HIDWORD(v22) = HIDWORD(v22) & 0xFFFFFFDF | BYTE12(v19) & 0x20;
    LODWORD(v23) = v9 * v10;
    PCMBlitter_CreateBlitter((const CAStreamBasicDescription *)&v17, (CAStreamBasicDescription *)&v19, (CAStreamBasicDescription *)&v22);
    int v11 = v17;
    if (v17)
    {
      if (v17 == 1) {
        goto LABEL_30;
      }
      goto LABEL_23;
    }
    unsigned int v12 = 4 * HIDWORD(v20);
    if ((BYTE12(v19) & 0x20) != 0) {
      unsigned int v12 = 4;
    }
    *(void *)&long long v22 = v19;
    DWORD2(v22) = 1819304813;
    HIDWORD(v22) = BYTE12(v19) & 0x20 | 9;
    *(void *)&long long v23 = v12 | 0x100000000;
    *((void *)&v23 + 1) = __PAIR64__(HIDWORD(v20), v12);
    uint64_t v24 = 32;
    PCMBlitter_CreateBlitter((const CAStreamBasicDescription *)buf, (CAStreamBasicDescription *)&v19, (CAStreamBasicDescription *)&v22);
    long long v17 = *(_OWORD *)buf;
    uint64_t v18 = *(void *)&buf[16];
    int v11 = *(_DWORD *)buf;
    if (*(_DWORD *)buf <= 1u) {
      break;
    }
LABEL_23:
    switch(v11)
    {
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
    }
    long long v19 = v22;
    long long v20 = v23;
    uint64_t v21 = v24;
    if (!--v6)
    {
LABEL_30:
      uint64_t result = 0;
      long long v14 = v20;
      *(_OWORD *)a2 = v19;
      *(_OWORD *)(a2 + 16) = v14;
      *(void *)(a2 + 32) = v21;
      return result;
    }
  }
  AudioConverterLog();
  unsigned int v15 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "PCMConverter.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 738;
    _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to determine suitable PCM converter", buf, 0x12u);
  }
  return 1718449215;
}

void sub_18FEF7798(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t PCMBlitter_CreateBlitter(const CAStreamBasicDescription *a1, CAStreamBasicDescription *a2, CAStreamBasicDescription *a3)
{
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *((unsigned int *)a2 + 3);
      if (v5) {
        break;
      }
      uint64_t result = IntSampleSize(a2);
      if (!result) {
        goto LABEL_185;
      }
      unsigned int v7 = result;
      uint64_t v8 = (v5 >> 7) & 0x3F;
      unsigned int v9 = *((_DWORD *)a3 + 3);
      if (v9)
      {
        uint64_t result = FloatSampleSize(a3);
        if (result != 4) {
          goto LABEL_185;
        }
        uint64_t result = CAStreamBasicDescription::PackednessIsSignificant(a2);
        if (result)
        {
          int v15 = *((_DWORD *)a2 + 3);
        }
        else
        {
          int v15 = *((_DWORD *)a2 + 3);
          if ((*((_DWORD *)a2 + 8) & 7) == 0) {
            goto LABEL_98;
          }
        }
        if ((v15 & 0x10) != 0)
        {
LABEL_98:
          switch(v7)
          {
            case 1u:
              if (v8) {
                goto LABEL_185;
              }
              uint64_t v43 = a1;
              *(_DWORD *)a1 = 2;
              *((void *)a1 + 2) = 1065353216;
              if ((v15 & 4) != 0) {
                int v44 = (uint64_t (*)())SInt8ToFloat32;
              }
              else {
                int v44 = (uint64_t (*)())UInt8ToFloat32;
              }
              break;
            case 2u:
              if (v8) {
                goto LABEL_185;
              }
              uint64_t v43 = a1;
              *(_DWORD *)a1 = 2;
              *((void *)a1 + 2) = 1065353216;
              if ((v15 & 2) != 0) {
                int v44 = (uint64_t (*)())SwapInt16ToFloat32_Portable;
              }
              else {
                int v44 = (uint64_t (*)())NativeInt16ToFloat32_ARM;
              }
              break;
            case 3u:
              if (v8) {
                goto LABEL_185;
              }
              uint64_t v43 = a1;
              *(_DWORD *)a1 = 2;
              *((void *)a1 + 2) = 1065353216;
              if ((v15 & 2) != 0) {
                int v44 = (uint64_t (*)())SwapInt24ToFloat32_Portable;
              }
              else {
                int v44 = (uint64_t (*)())NativeInt24ToFloat32_Portable;
              }
              break;
            case 4u:
              if (v8)
              {
                uint64_t v43 = a1;
                *(_DWORD *)a1 = 3;
                *((float *)a1 + 4) = 1.0 / (float)(1 << v8);
                *((_DWORD *)a1 + 5) = 0;
                if ((v15 & 2) != 0) {
                  int v44 = SwapInt32ToFloat32Scaled_Portable;
                }
                else {
                  int v44 = (uint64_t (*)())NativeInt32ToFloat32Scaled_ARM;
                }
              }
              else
              {
                uint64_t v43 = a1;
                *(_DWORD *)a1 = 2;
                *((void *)a1 + 2) = 1065353216;
                if ((v15 & 2) != 0) {
                  int v44 = (uint64_t (*)())SwapInt32ToFloat32_Portable;
                }
                else {
                  int v44 = (uint64_t (*)())NativeInt32ToFloat32_Portable;
                }
              }
              goto LABEL_238;
            default:
              goto LABEL_185;
          }
          goto LABEL_238;
        }
        goto LABEL_75;
      }
      uint64_t result = IntSampleSize(a3);
      if (!result) {
        goto LABEL_185;
      }
      int v10 = result;
      if (CAStreamBasicDescription::PackednessIsSignificant(a2) || (*((_DWORD *)a2 + 8) & 7) != 0) {
        int v11 = (*((unsigned __int8 *)a2 + 12) >> 4) & 1;
      }
      else {
        int v11 = 1;
      }
      uint64_t result = CAStreamBasicDescription::PackednessIsSignificant(a3);
      if (result)
      {
        unsigned int v12 = *((_DWORD *)a3 + 3);
LABEL_47:
        int v29 = (v12 >> 4) & 1;
        goto LABEL_48;
      }
      unsigned int v12 = *((_DWORD *)a3 + 3);
      if ((*((_DWORD *)a3 + 8) & 7) != 0) {
        goto LABEL_47;
      }
      int v29 = 1;
LABEL_48:
      int v30 = (v9 >> 7) & 0x3F;
      if (v7 == v10 && ((v11 ^ v29) & 1) == 0)
      {
        if (v11)
        {
          if (v8 != v30)
          {
            int v10 = v7;
            if (v29) {
              goto LABEL_102;
            }
            int v10 = v7;
            goto LABEL_22;
          }
        }
        else if (v8 != v30 || *((_DWORD *)a2 + 8) != *((_DWORD *)a3 + 8))
        {
          goto LABEL_75;
        }
        if (v7 >= 2) {
          int v31 = 6;
        }
        else {
          int v31 = 4;
        }
        int v32 = *((_DWORD *)a2 + 3) ^ v12;
        if ((v32 & v31) == 0) {
          goto LABEL_80;
        }
        if (v7 >= 2 && (v32 & 2) != 0)
        {
          switch(v7)
          {
            case 4u:
              goto LABEL_146;
            case 3u:
              int v41 = a1;
              *(_DWORD *)a1 = 2;
              int v42 = SwapPCM24_Portable;
              goto LABEL_199;
            case 2u:
              int v41 = a1;
              *(_DWORD *)a1 = 2;
              int v42 = SwapPCM16_ARM;
              goto LABEL_199;
          }
        }
      }
      if (v11 & v29)
      {
LABEL_102:
        if ((((v9 >> 7) | (v5 >> 7)) & 0x3F) == 0)
        {
          if (v10 != 2 || (v12 & 2) != 0)
          {
            if (v7 == 2 && (*((unsigned char *)a2 + 12) & 2) == 0)
            {
              if (v10 == 3)
              {
                uint64_t v43 = a1;
                *(_DWORD *)a1 = 2;
                *((void *)a1 + 2) = 1065353216;
                if ((v12 & 2) != 0) {
                  int v44 = (uint64_t (*)())NativeInt16ToSwapInt24_Portable;
                }
                else {
                  int v44 = (uint64_t (*)())NativeInt16ToNativeInt24_Portable;
                }
                goto LABEL_238;
              }
              if (v10 == 1)
              {
                uint64_t v43 = a1;
                *(_DWORD *)a1 = 2;
                *((void *)a1 + 2) = 1065353216;
                if ((v12 & 4) != 0) {
                  int v44 = (uint64_t (*)())NativeInt16ToSInt8_Portable;
                }
                else {
                  int v44 = (uint64_t (*)())NativeInt16ToUInt8_Portable;
                }
                goto LABEL_238;
              }
            }
          }
          else
          {
            if (v7 == 3)
            {
              int v67 = *((_DWORD *)a2 + 3);
              uint64_t v43 = a1;
              *(_DWORD *)a1 = 2;
              *((void *)a1 + 2) = 1065353216;
              if ((v67 & 2) != 0) {
                int v44 = (uint64_t (*)())SwapInt24ToNativeInt16_Portable;
              }
              else {
                int v44 = (uint64_t (*)())NativeInt24ToNativeInt16_Portable;
              }
              goto LABEL_238;
            }
            if (v7 == 1)
            {
              int v57 = *((_DWORD *)a2 + 3);
              uint64_t v43 = a1;
              *(_DWORD *)a1 = 2;
              *((void *)a1 + 2) = 1065353216;
              if ((v57 & 4) != 0) {
                int v44 = (uint64_t (*)())SInt8ToNativeInt16_Portable;
              }
              else {
                int v44 = (uint64_t (*)())UInt8ToNativeInt16_Portable;
              }
              goto LABEL_238;
            }
          }
        }
        unsigned int v45 = *((_DWORD *)a2 + 3);
        int v46 = 8 * v7 - 1;
        if (((v45 >> 7) & 0x3F) != 0) {
          int v46 = (v45 >> 7) & 0x3F;
        }
        int v47 = (v12 >> 7) & 0x3F;
        if (!v47) {
          int v47 = 8 * v10 - 1;
        }
        if (v7 == 4 && v10 == 4)
        {
          int v48 = v47 - v46;
          if (v47 == v46) {
            goto LABEL_185;
          }
          int v49 = a1;
          *(_DWORD *)a1 = 4;
          *((_DWORD *)a1 + 4) = 1065353216;
          *((_DWORD *)a1 + 5) = v48;
          if ((v45 & 2) != 0)
          {
            if ((v12 & 2) != 0) {
              uint64_t v50 = SwapInt32ToSwapInt32_Portable;
            }
            else {
              uint64_t v50 = SwapInt32ToNativeInt32_Portable;
            }
          }
          else if ((v12 & 2) != 0)
          {
            uint64_t v50 = NativeInt32ToSwapInt32_Portable;
          }
          else
          {
            uint64_t v50 = NativeInt32ToNativeInt32_ARM;
          }
        }
        else if (v8 || v10 != 4)
        {
          if (v7 != 4 || v30) {
            goto LABEL_185;
          }
          int v62 = v46 - v47;
          if (v10 == 3)
          {
            int v49 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v62;
            if ((v45 & 2) != 0)
            {
              if ((v12 & 2) != 0) {
                uint64_t v50 = SwapInt32ToSwapInt24;
              }
              else {
                uint64_t v50 = SwapInt32ToNativeInt24_Portable;
              }
            }
            else if ((v12 & 2) != 0)
            {
              uint64_t v50 = NativeInt32ToSwapInt24_Portable;
            }
            else
            {
              uint64_t v50 = NativeInt32ToNativeInt24_ARM;
            }
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_185;
            }
            int v49 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v62;
            if ((v45 & 2) != 0)
            {
              if ((v12 & 2) != 0) {
                uint64_t v50 = SwapInt32ToSwapInt16;
              }
              else {
                uint64_t v50 = SwapInt32ToNativeInt16_Portable;
              }
            }
            else if ((v12 & 2) != 0)
            {
              uint64_t v50 = NativeInt32ToSwapInt16_Portable;
            }
            else
            {
              uint64_t v50 = NativeInt32ToNativeInt16_ARM;
            }
          }
        }
        else
        {
          int v56 = v47 - v46;
          if (v7 == 3)
          {
            int v49 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v56;
            if ((v45 & 2) != 0)
            {
              if ((v12 & 2) != 0) {
                uint64_t v50 = SwapInt24ToSwapInt32;
              }
              else {
                uint64_t v50 = SwapInt24ToNativeInt32_Portable;
              }
            }
            else if ((v12 & 2) != 0)
            {
              uint64_t v50 = NativeInt24ToSwapInt32;
            }
            else
            {
              uint64_t v50 = NativeInt24ToNativeInt32_ARM;
            }
          }
          else
          {
            if (v7 != 2) {
              goto LABEL_185;
            }
            int v49 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v56;
            if ((v45 & 2) != 0)
            {
              if ((v12 & 2) != 0) {
                uint64_t v50 = SwapInt16ToSwapInt32;
              }
              else {
                uint64_t v50 = SwapInt16ToNativeInt32_Portable;
              }
            }
            else if ((v12 & 2) != 0)
            {
              uint64_t v50 = NativeInt16ToSwapInt32;
            }
            else
            {
              uint64_t v50 = NativeInt16ToNativeInt32_ARM;
            }
          }
        }
        *((void *)v49 + 1) = v50;
        return result;
      }
      if (v11) {
        goto LABEL_22;
      }
LABEL_75:
      if ((*((_DWORD *)a2 + 3) & 2) == 0)
      {
        if (v7 == 8)
        {
          if ((*((unsigned char *)a3 + 12) & 1) != 0 && *((_DWORD *)a2 + 8) <= 0x20u)
          {
            int v52 = *((_DWORD *)a2 + 7);
            int v53 = *((_DWORD *)a2 + 3) & 0x20 | 9;
            int v54 = 4 * v52;
            if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
              int v54 = 4;
            }
            *(void *)a3 = *(void *)a2;
            *((_DWORD *)a3 + 2) = 1819304813;
            *((_DWORD *)a3 + 3) = v53;
            *((_DWORD *)a3 + 4) = v54;
            *((_DWORD *)a3 + 5) = 1;
            *((_DWORD *)a3 + 6) = v54;
            *((_DWORD *)a3 + 7) = v52;
            *((void *)a3 + 4) = 32;
            int v55 = *((_DWORD *)a2 + 8);
            uint64_t v43 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v55;
            int v44 = (uint64_t (*)())NativeLowAlignedInt64ToFloat32_ARM;
            goto LABEL_238;
          }
          goto LABEL_185;
        }
        if (v7 == 4)
        {
          if (*((unsigned char *)a3 + 12))
          {
            int v58 = *((_DWORD *)a2 + 7);
            int v59 = *((_DWORD *)a2 + 3) & 0x20 | 9;
            int v60 = 4 * v58;
            if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
              int v60 = 4;
            }
            *(void *)a3 = *(void *)a2;
            *((_DWORD *)a3 + 2) = 1819304813;
            *((_DWORD *)a3 + 3) = v59;
            *((_DWORD *)a3 + 4) = v60;
            *((_DWORD *)a3 + 5) = 1;
            *((_DWORD *)a3 + 6) = v60;
            *((_DWORD *)a3 + 7) = v58;
            *((void *)a3 + 4) = 32;
            int v61 = *((_DWORD *)a2 + 8);
            uint64_t v43 = a1;
            *(_DWORD *)a1 = 4;
            *((_DWORD *)a1 + 4) = 1065353216;
            *((_DWORD *)a1 + 5) = v61;
            int v44 = (uint64_t (*)())NativeLowAlignedInt32ToFloat32_ARM;
            goto LABEL_238;
          }
          unsigned int v37 = *((_DWORD *)a2 + 8);
          if (v37 != 16 || *((_DWORD *)a3 + 8) > 0x10u)
          {
            if (v37 <= 0x18)
            {
              int v63 = *((_DWORD *)a2 + 7);
              int v64 = *((_DWORD *)a2 + 3) & 0x20 | 0xC0C;
              int v65 = 4 * v63;
              if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
                int v65 = 4;
              }
              *(void *)a3 = *(void *)a2;
              *((_DWORD *)a3 + 2) = 1819304813;
              *((_DWORD *)a3 + 3) = v64;
              *((_DWORD *)a3 + 4) = v65;
              *((_DWORD *)a3 + 5) = 1;
              *((_DWORD *)a3 + 6) = v65;
              *((_DWORD *)a3 + 7) = v63;
              *((void *)a3 + 4) = 32;
              int v66 = *((_DWORD *)a2 + 8);
              uint64_t v43 = a1;
              *(_DWORD *)a1 = 4;
              *((_DWORD *)a1 + 4) = 1065353216;
              *((_DWORD *)a1 + 5) = v66;
              int v44 = (uint64_t (*)())NativeLowAlignedInt32To824Fixed_ARM;
              goto LABEL_238;
            }
            goto LABEL_185;
          }
          int v38 = *((_DWORD *)a2 + 7);
          int v39 = *((_DWORD *)a2 + 3) & 0x20 | 0xC;
          int v40 = 2 * v38;
          if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
            int v40 = 2;
          }
          *(void *)a3 = *(void *)a2;
          *((_DWORD *)a3 + 2) = 1819304813;
          *((_DWORD *)a3 + 3) = v39;
          *((_DWORD *)a3 + 4) = v40;
          *((_DWORD *)a3 + 5) = 1;
          *((_DWORD *)a3 + 6) = v40;
          *((_DWORD *)a3 + 7) = v38;
          *((void *)a3 + 4) = 16;
          int v41 = a1;
          *(_DWORD *)a1 = 2;
          int v42 = NativeLowAlignedInt32ToInt16_ARM;
          goto LABEL_199;
        }
LABEL_185:
        int v35 = a1;
        *(_DWORD *)a1 = 0;
        goto LABEL_186;
      }
      long long v34 = *(_OWORD *)a2;
      long long v33 = *((_OWORD *)a2 + 1);
      *((void *)a3 + 4) = *((void *)a2 + 4);
      *(_OWORD *)a3 = v34;
      *((_OWORD *)a3 + 1) = v33;
      *((_DWORD *)a3 + 3) ^= 2u;
    }
    uint64_t result = FloatSampleSize(a2);
    if (!result) {
      goto LABEL_185;
    }
    int v13 = result;
    unint64_t v14 = *((unsigned int *)a3 + 3);
    if (v14) {
      break;
    }
    if (result != 4) {
      goto LABEL_185;
    }
    int v10 = IntSampleSize(a3);
    uint64_t result = CAStreamBasicDescription::PackednessIsSignificant(a3);
    if (result)
    {
      unsigned int v12 = *((_DWORD *)a3 + 3);
      if ((v12 & 0x10) != 0) {
        goto LABEL_81;
      }
    }
    else
    {
      unsigned int v12 = *((_DWORD *)a3 + 3);
      if ((*((_DWORD *)a3 + 8) & 7) == 0 || (v12 & 0x10) != 0)
      {
LABEL_81:
        uint64_t v36 = (v14 >> 7) & 0x3F;
        switch(v10)
        {
          case 1:
            if (v36) {
              goto LABEL_185;
            }
            uint64_t v43 = a1;
            *(_DWORD *)a1 = 2;
            *((void *)a1 + 2) = 1065353216;
            if ((v12 & 4) != 0) {
              int v44 = (uint64_t (*)())Float32ToSInt8;
            }
            else {
              int v44 = (uint64_t (*)())Float32ToUInt8;
            }
            break;
          case 2:
            if (v36) {
              goto LABEL_185;
            }
            uint64_t v43 = a1;
            *(_DWORD *)a1 = 2;
            *((void *)a1 + 2) = 1065353216;
            if ((v12 & 2) != 0) {
              int v44 = (uint64_t (*)())Float32ToSwapInt16_Portable;
            }
            else {
              int v44 = (uint64_t (*)())Float32ToNativeInt16_ARM;
            }
            break;
          case 3:
            if (v36) {
              goto LABEL_185;
            }
            uint64_t v43 = a1;
            *(_DWORD *)a1 = 2;
            *((void *)a1 + 2) = 1065353216;
            if ((v12 & 2) != 0) {
              int v44 = (uint64_t (*)())Float32ToSwapInt24_Portable;
            }
            else {
              int v44 = (uint64_t (*)())Float32ToNativeInt24_Portable;
            }
            break;
          case 4:
            if (v36)
            {
              uint64_t v43 = a1;
              *(_DWORD *)a1 = 3;
              *((float *)a1 + 4) = (float)(1 << v36);
              *((_DWORD *)a1 + 5) = 0;
              if ((v12 & 2) != 0) {
                int v44 = Float32ToSwapInt32Scaled_Portable;
              }
              else {
                int v44 = (uint64_t (*)())Float32ToNativeInt32Scaled_ARM;
              }
            }
            else
            {
              uint64_t v43 = a1;
              *(_DWORD *)a1 = 2;
              *((void *)a1 + 2) = 1065353216;
              if ((v12 & 2) != 0) {
                int v44 = (uint64_t (*)())Float32ToSwapInt32_Portable;
              }
              else {
                int v44 = (uint64_t (*)())Float32ToNativeInt32_ARM;
              }
            }
            break;
          default:
            goto LABEL_185;
        }
LABEL_238:
        *((void *)v43 + 1) = v44;
        return result;
      }
    }
    LODWORD(v8) = 0;
    unsigned int v7 = 4;
LABEL_22:
    if ((v12 & 2) != 0) {
      *((_DWORD *)a3 + 3) = v12 ^ 2;
    }
    if (v10 == 8)
    {
      int v16 = *((_DWORD *)a2 + 3);
      if ((v16 & 1) == 0) {
        goto LABEL_185;
      }
      unsigned int v21 = *((_DWORD *)a3 + 8);
      if (v21 > 0x20) {
        goto LABEL_185;
      }
      if (v7 == 4 && (v16 & 2) == 0)
      {
        uint64_t v43 = a1;
        *(_DWORD *)a1 = 4;
        *((_DWORD *)a1 + 4) = 1065353216;
        *((_DWORD *)a1 + 5) = v21;
        int v44 = (uint64_t (*)())Float32ToNativeLowAlignedInt64_ARM;
        goto LABEL_238;
      }
LABEL_42:
      uint64_t v22 = *(void *)a2;
      int v23 = *((_DWORD *)a2 + 7);
      int v25 = v16 & 0x20;
      BOOL v24 = v25 == 0;
      int v26 = 9;
      goto LABEL_43;
    }
    if (v10 != 4) {
      goto LABEL_185;
    }
    int v16 = *((_DWORD *)a2 + 3);
    if (v16)
    {
      if (v7 == 4 && (v16 & 2) == 0)
      {
        int v51 = *((_DWORD *)a3 + 8);
        uint64_t v43 = a1;
        *(_DWORD *)a1 = 4;
        *((_DWORD *)a1 + 4) = 1065353216;
        *((_DWORD *)a1 + 5) = v51;
        int v44 = (uint64_t (*)())Float32ToNativeLowAlignedInt32_ARM;
        goto LABEL_238;
      }
      goto LABEL_42;
    }
    unsigned int v17 = *((_DWORD *)a3 + 8);
    if (*((_DWORD *)a2 + 8) <= 0x10u && v17 == 16)
    {
      if ((v16 & 2) == 0 && !v8 && v7 == 2)
      {
        int v41 = a1;
        *(_DWORD *)a1 = 2;
        int v42 = NativeInt16ToLowAlignedInt32_ARM;
        goto LABEL_199;
      }
      int v18 = *((_DWORD *)a2 + 7);
      int v19 = *((_DWORD *)a2 + 3) & 0x20 | 0xC;
      int v20 = 2 * v18;
      if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
        int v20 = 2;
      }
      *(void *)a3 = *(void *)a2;
      *((_DWORD *)a3 + 2) = 1819304813;
      *((_DWORD *)a3 + 3) = v19;
      *((_DWORD *)a3 + 4) = v20;
      *((_DWORD *)a3 + 5) = 1;
      *((_DWORD *)a3 + 6) = v20;
      *((_DWORD *)a3 + 7) = v18;
      *((void *)a3 + 4) = 16;
    }
    else
    {
      if (v17 > 0x18) {
        goto LABEL_185;
      }
      if ((v16 & 2) == 0 && v8 == 24 && v7 == 4)
      {
        uint64_t v43 = a1;
        *(_DWORD *)a1 = 4;
        *((_DWORD *)a1 + 4) = 1065353216;
        *((_DWORD *)a1 + 5) = v17;
        int v44 = (uint64_t (*)())Native824FixedToLowAlignedInt32_ARM;
        goto LABEL_238;
      }
      uint64_t v22 = *(void *)a2;
      int v23 = *((_DWORD *)a2 + 7);
      int v25 = *((_DWORD *)a2 + 3) & 0x20;
      BOOL v24 = v25 == 0;
      int v26 = 3084;
LABEL_43:
      int v27 = v25 | v26;
      int v28 = 4 * v23;
      if (!v24) {
        int v28 = 4;
      }
      *(void *)a3 = v22;
      *((_DWORD *)a3 + 2) = 1819304813;
      *((_DWORD *)a3 + 3) = v27;
      *((_DWORD *)a3 + 4) = v28;
      *((_DWORD *)a3 + 5) = 1;
      *((_DWORD *)a3 + 6) = v28;
      *((_DWORD *)a3 + 7) = v23;
      *((void *)a3 + 4) = 32;
    }
  }
  uint64_t result = FloatSampleSize(a3);
  if (v13 == result)
  {
LABEL_80:
    int v35 = a1;
    *(_DWORD *)a1 = 1;
LABEL_186:
    *((void *)v35 + 1) = 0;
    *((void *)v35 + 2) = 1065353216;
    return result;
  }
  if (v13 == 4)
  {
    if (result == 8)
    {
      int v41 = a1;
      *(_DWORD *)a1 = 2;
      int v42 = Float32ToNativeFloat64;
      goto LABEL_199;
    }
    if (result != -4)
    {
      if (result == -8)
      {
        int v41 = a1;
        *(_DWORD *)a1 = 2;
        int v42 = Float32ToSwapFloat64;
        goto LABEL_199;
      }
      goto LABEL_185;
    }
LABEL_146:
    int v41 = a1;
    *(_DWORD *)a1 = 2;
    int v42 = SwapPCM32_Portable;
    goto LABEL_199;
  }
  if (result != 4)
  {
    if ((v13 == 8 || v13 == -8) && !(result + v13))
    {
      int v41 = a1;
      *(_DWORD *)a1 = 2;
      int v42 = SwapPCM64_Portable;
      goto LABEL_199;
    }
    goto LABEL_185;
  }
  if (v13 != 8)
  {
    if (v13 != -4)
    {
      if (v13 == -8)
      {
        int v41 = a1;
        *(_DWORD *)a1 = 2;
        int v42 = SwapFloat64ToFloat32;
        goto LABEL_199;
      }
      goto LABEL_185;
    }
    goto LABEL_146;
  }
  int v41 = a1;
  *(_DWORD *)a1 = 2;
  int v42 = NativeFloat64ToFloat32;
LABEL_199:
  *((void *)v41 + 1) = v42;
  *((void *)v41 + 2) = 1065353216;
  return result;
}

uint64_t FloatSampleSize(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 != 1885564203 && v1 != 1819304813 || a1[5] != 1) {
    return 0;
  }
  unsigned int v4 = a1[4];
  unsigned int v5 = a1[7];
  if (v4 != a1[6] || v5 == 0) {
    return 0;
  }
  int v7 = a1[3];
  if ((v7 & 1) == 0) {
    return 0;
  }
  unsigned int v8 = a1[8];
  if (v8 != 64 && v8 != 32) {
    return 0;
  }
  unsigned int v9 = v8 >> 3;
  if (v4)
  {
    if ((v7 & 0x20) != 0) {
      unsigned int v5 = 1;
    }
    v4 /= v5;
  }
  if ((v7 & 2) != 0) {
    unsigned int v10 = -v9;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v4 == v9) {
    return v10;
  }
  else {
    return 0;
  }
}

_DWORD *acv2::PCMConverterFactory::AddDownReinterleaver(_DWORD *result, __int32 **a2)
{
  signed int v2 = result[17];
  int v3 = result[7];
  if (v2 < v3)
  {
    unsigned int v4 = result;
    acv2::MixableFormatPair(result[7], v2, *a2, a2[3]);
    int v5 = v4[13] & 0x20;
    int v6 = v4[3];
    if ((v6 & 0x20) != 0)
    {
      int v3 = 1;
    }
    else if (!v3)
    {
      unsigned int v7 = (v4[8] + 7) >> 3;
      goto LABEL_7;
    }
    unsigned int v7 = v4[6] / v3;
LABEL_7:
    unsigned int v8 = v6 & 0xFFFFFFDF;
    if (v5) {
      int v9 = 1;
    }
    else {
      int v9 = v2;
    }
    int v10 = v7 * v9;
    v4[4] = v10;
    v4[5] = 1;
    v4[6] = v10;
    void v4[7] = v2;
    v4[3] = v8 | v5;
    operator new();
  }
  return result;
}

void sub_18FEF8884(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10B3C40BBAFB75ALL);
  _Unwind_Resume(a1);
}

uint64_t IntSampleSize(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 != 1885564203 && v1 != 1819304813 || a1[5] != 1) {
    return 0;
  }
  unsigned int v4 = a1[4];
  if (v4 != a1[6] || a1[7] == 0) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = a1[3];
  if ((v7 & 1) == 0 && v4)
  {
    if ((v7 & 0x20) != 0) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = a1[7];
    }
    LODWORD(v6) = v4 / v8;
    if ((v6 - 9) < 0xFFFFFFF8) {
      return 0;
    }
    unsigned int v9 = a1[8];
    if (!v9 || v9 > 8 * (int)v6 || (v7 & 8) != 0 && v9 != 8 * v6) {
      return 0;
    }
    if (v6 != 1 && (a1[3] & 4) == 0) {
      return 0;
    }
    else {
      return v6;
    }
  }
  return v6;
}

uint64_t acv2::AudioConverterBase::AsSampleRateConverter(acv2::AudioConverterBase *this)
{
  return 0;
}

BOOL CAStreamBasicDescription::PackednessIsSignificant(CAStreamBasicDescription *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) != 1819304813)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      int v5 = "CAStreamBasicDescription.h";
      __int16 v6 = 1024;
      int v7 = 234;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  PackednessIsSignificant only applies for PCM", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  unsigned int v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    if ((*((unsigned char *)this + 12) & 0x20) != 0)
    {
      unsigned int v2 = 1;
    }
    else
    {
      unsigned int v2 = *((_DWORD *)this + 7);
      if (!v2)
      {
        unsigned int v1 = 0;
        return v1 != *((_DWORD *)this + 8);
      }
    }
    unsigned int v1 = 8 * (v1 / v2);
  }
  return v1 != *((_DWORD *)this + 8);
}

uint64_t acv2::AudioConverterBase::AsReinterleaver(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::AudioConverterBase::AsChannelMixer(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::AudioConverterBase::AsDitherer(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::ConverterRegistry::MakeEncoderFactories(acv2::ConverterRegistry *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v2 == v3)
  {
LABEL_8:
    if (a2 == 1970037111) {
      operator new();
    }
    if (a2 == 1634492791) {
      operator new();
    }
    LODWORD(v7) = vdup_n_s32(0x61656E63u).u32[0];
    HIDWORD(v7) = a2;
    return acv2::ConverterRegistry::MakeFactories(this, 0, a2, v7);
  }
  else
  {
    while (1)
    {
      if (*(_DWORD *)(*(void *)v2 + 20) == a2)
      {
        int v4 = *(_DWORD *)(*(void *)v2 + 16);
        if (v4 == 1634037347 || v4 == 1852597614) {
          return 0;
        }
      }
      v2 += 8;
      if (v2 == v3) {
        goto LABEL_8;
      }
    }
  }
}

uint64_t acv2::AudioConverterV2::setProperty(acv2::AudioConverterChain **this, uint64_t a2, uint64_t a3, AudioChannelLayout *a4)
{
  if (!*((unsigned char *)this + 12) && *((unsigned char *)this + 13))
  {
    int v22 = 2737;
    uint64_t v23 = a2;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    kdebug_trace();
    v14[0] = 1;
    int v15 = 2737;
    uint64_t v16 = a2;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    v21[0] = 0;
    char v20 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v21);
    if (!a4) {
      goto LABEL_9;
    }
LABEL_3:
    uint64_t v8 = acv2::AudioConverterChain::SetProperty(this[4], a2, a3, a4);
    goto LABEL_4;
  }
  v14[0] = 0;
  char v20 = 0;
  if (a4) {
    goto LABEL_3;
  }
LABEL_9:
  uint64_t v10 = _os_log_pack_size();
  uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v10 + 88, 16);
  if (message)
  {
    unsigned int v12 = (caulk::concurrent::message *)message;
    int v13 = (_DWORD *)_os_log_pack_fill();
    *int v13 = 67109120;
    v13[1] = a2;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v12);
  }
  uint64_t v8 = 4294967246;
LABEL_4:
  if (v20) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v14);
  }
  return v8;
}

void sub_18FEF8D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::SetProperty(acv2::AudioConverterChain *this, uint64_t a2, uint64_t a3, AudioChannelLayout *a4)
{
  if (a2 == 1633906532 || a2 == 1633904996)
  {
    if ((a3 - 41) >= 0xFFFFFFFB)
    {
      uint64_t v10 = (acv2::AudioConverterChain *)((char *)this + 40);
      if (a2 == 1633904996)
      {
        uint64_t v10 = this;
        uint64_t v11 = 352;
      }
      else
      {
        uint64_t v11 = 376;
      }
      if (a2 == 1633904996) {
        unsigned int v12 = (char *)this + 352;
      }
      else {
        unsigned int v12 = (char *)this + 376;
      }
      if (a4->mNumberChannelDescriptions != 1819304813 || *((_DWORD *)v10 + 2) != 1819304813) {
        return 4294967246;
      }
      long long v13 = *(_OWORD *)&a4->mChannelLayoutTag;
      long long v14 = *(_OWORD *)&a4->mChannelDescriptions[0].mChannelFlags;
      *((void *)v10 + 4) = *(void *)&a4[1].mChannelLayoutTag;
      *(_OWORD *)uint64_t v10 = v13;
      *((_OWORD *)v10 + 1) = v14;
      __x[0] = 0;
      std::vector<char>::vector(&v46, 0x20uLL, __x);
      std::vector<char>::pointer begin = v46.__begin_;
      *(void *)v46.__begin_ = 0;
      *((_DWORD *)begin + 2) = 0;
      uint64_t v16 = *(void **)((char *)this + v11);
      if (v16)
      {
        *((void *)v12 + 1) = v16;
        operator delete(v16);
        std::vector<char>::pointer begin = v46.__begin_;
      }
      *(void *)((char *)this + v11) = begin;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)&v46.__end_;
      acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v46, (uint64_t)this);
      uint64_t v9 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v46);
      if (__p)
      {
        int v52 = __p;
        operator delete(__p);
      }
      if (v49)
      {
        uint64_t v50 = v49;
        operator delete(v49);
      }
      if (v47)
      {
        int v48 = v47;
        operator delete(v47);
      }
      return v9;
    }
    return 561211770;
  }
  PropertyDelegate = acv2::AudioConverterChain::GetPropertyDelegate(this, a2);
  if (PropertyDelegate)
  {
    uint64_t v9 = (*((uint64_t (**)(OpaqueAudioComponentInstance **, uint64_t, uint64_t, AudioChannelLayout *))*PropertyDelegate
          + 12))(PropertyDelegate, a2, a3, a4);
    if (!v9)
    {
      if (a2 == 1684891491)
      {
        uint64_t v19 = (_DWORD *)*((void *)this + 47);
        if (*v19 == 0x10000)
        {
          uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v19[1]);
          v42.i16[0] = vaddlv_u8(v42);
          int v20 = v42.i32[0];
        }
        else
        {
          int v20 = *v19 ? (unsigned __int16)*v19 : v19[2];
        }
        if (v20
          && acv2::AudioConverterChain::ShouldAutomaticallyEnableSpatialRendering((uint64_t)this, (unsigned int **)this + 47))
        {
          *((unsigned char *)this + 528) = 1;
          acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v46, (uint64_t)this);
          uint64_t v36 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v46);
          goto LABEL_89;
        }
      }
      return 0;
    }
    return v9;
  }
  if ((int)a2 > 1835884911)
  {
    if ((int)a2 > 1919837297)
    {
      if ((a2 - 1936876385) <= 0x10 && ((1 << (a2 - 97)) & 0x18101) != 0) {
        goto LABEL_78;
      }
      uint64_t v9 = 1886547824;
      if (a2 != 1919837298) {
        return v9;
      }
      if (a3 != 4) {
        return 561211770;
      }
      *((unsigned char *)this + 528) = a4->mChannelLayoutTag != 0;
      *((unsigned char *)this + 529) = 1;
      acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v46, (uint64_t)this);
      uint64_t v36 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v46);
LABEL_89:
      uint64_t v9 = v36;
      acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)&v46);
      return v9;
    }
    if (a2 == 1835884912)
    {
      unint64_t v43 = (*((_DWORD *)this + 17) * *((_DWORD *)this + 7));
      if (a3 == 4 * v43)
      {
        return acv2::AudioConverterChain::SetMixMap(this, v43, (const float *)&a4->mChannelLayoutTag);
      }
      return 561211770;
    }
    if (a2 != 1868786720)
    {
      if (a2 != 1886546285) {
        return 1886547824;
      }
      uint64_t v32 = *((void *)this + 43);
      uint64_t v9 = 1886547824;
      if (!v32) {
        return v9;
      }
      long long v33 = *(uint64_t (**)(void))(*(void *)v32 + 96);
      return v33();
    }
LABEL_82:
    uint64_t v9 = acv2::AudioConverterChain::SetIOChannelLayout((acv2::CodecConverter **)this, a2 == 1768123424, a4, a3);
    if (v9) {
      return v9;
    }
    acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v46, (uint64_t)this);
    uint64_t v36 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v46);
    goto LABEL_89;
  }
  if ((int)a2 <= 1684632679)
  {
    if ((int)a2 <= 1667788143)
    {
      if (a2 != 1633903204)
      {
        uint64_t v9 = 1886547824;
        if (a2 != 1633906803) {
          return v9;
        }
        if (a3 == 8)
        {
          CFArrayRef v21 = *(const __CFArray **)&a4->mChannelLayoutTag;
          uint64_t Count = CFArrayGetCount(v21);
          if (Count)
          {
            CFIndex v23 = 0;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v23);
              if (ValueAtIndex)
              {
                uint64_t v25 = (void *)*((void *)this + 13);
                uint64_t v26 = (void *)*((void *)this + 14);
                if (v25 != v26)
                {
                  CFDictionaryRef v27 = ValueAtIndex;
                  while (1)
                  {
                    uint64_t v28 = *v25;
                    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v27, @"converter");
                    CFStringRef v30 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 56))(v28);
                    if (CFEqual(Value, v30)) {
                      break;
                    }
                    if (++v25 == v26)
                    {
                      uint64_t v25 = v26;
                      break;
                    }
                  }
                  if (v25 != *((void **)this + 14))
                  {
                    uint64_t v31 = (*(uint64_t (**)(void, const __CFDictionary *))(*(void *)*v25 + 152))(*v25, v27);
                    if (v31) {
                      return v31;
                    }
                  }
                }
              }
              uint64_t v9 = 0;
              if (++v23 == Count) {
                return v9;
              }
            }
          }
          return 0;
        }
        return 561211770;
      }
      uint64_t v44 = *((void *)this + 43);
      if (v44)
      {
        uint64_t v9 = 1886547824;
        if (!*(unsigned char *)(v44 + 196)) {
          return v9;
        }
        if (a3 == 4)
        {
          *((_DWORD *)this + 103) = a4->mChannelLayoutTag;
          acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)&v46, (uint64_t)this);
          acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)&v46);
          acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)&v46);
          return 0;
        }
        return 561211770;
      }
      return 1886547824;
    }
    if (a2 == 1667788144)
    {
      if (a3 == 4 * *((unsigned int *)this + 17))
      {
        return acv2::AudioConverterChain::SetChannelMap(this, (int *)a4);
      }
    }
    else
    {
      if (a2 != 1684171124) {
        return 1886547824;
      }
      if (a3 == 4)
      {
        uint64_t v37 = *((void *)this + 55);
        if (!v37)
        {
          uint64_t v9 = acv2::AudioConverterChain::SetDitherAlgorithm(this, *((_DWORD *)this + 108), v18);
          if (v9) {
            return v9;
          }
          uint64_t v37 = *((void *)this + 55);
          uint64_t v9 = 1886547824;
          if (!v37) {
            return v9;
          }
        }
        int v38 = *(uint64_t (**)(void))(*(void *)v37 + 168);
        return v38();
      }
    }
    return 561211770;
  }
  if ((int)a2 > 1768123423)
  {
    if (a2 != 1768123424)
    {
      if (a2 != 1835626096) {
        return 1886547824;
      }
LABEL_78:
      uint64_t v9 = 1886547824;
      if (*((void *)this + 37) != *((void *)this + 38))
      {
        int v40 = (uint64_t *)*((void *)this + 13);
        int v39 = (uint64_t *)*((void *)this + 14);
        if (v40 != v39)
        {
          do
          {
            uint64_t v41 = *v40++;
            uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioChannelLayout *))(*(void *)v41 + 96))(v41, a2, a3, a4);
          }
          while (v40 != v39);
          return v9;
        }
        return 0;
      }
      return v9;
    }
    goto LABEL_82;
  }
  if (a2 == 1684632680)
  {
    if (a3 == 4)
    {
      unsigned int mChannelLayoutTag = a4->mChannelLayoutTag;
      return acv2::AudioConverterChain::SetDitherAlgorithm(this, mChannelLayoutTag, v18);
    }
    return 561211770;
  }
  uint64_t v9 = 1886547824;
  if (a2 != 1684892024) {
    return v9;
  }
  if (a3 != 4) {
    return 561211770;
  }
  BOOL v35 = a4->mChannelLayoutTag != 0;
  return acv2::AudioConverterChain::SetDownmixEnabled(this, v35);
}

void sub_18FEF958C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)va);
  _Unwind_Resume(a1);
}

uint64_t acv2::SampleRateConverter::SetProperty(acv2::SampleRateConverter *this, int a2, int a3, _DWORD *a4)
{
  uint64_t result = 1886547824;
  if (a2 <= 1936876392)
  {
    if (a2 == 1835626096)
    {
      if (a3 == 4)
      {
        *((unsigned char *)this + 312) = *a4 != 0;
        goto LABEL_34;
      }
    }
    else
    {
      if (a2 != 1886547309)
      {
        unsigned __int16 v7 = 25441;
        goto LABEL_8;
      }
      if (a3 == 4)
      {
        uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 20) + 32))(*((void *)this + 20));
        if (!result) {
          return result;
        }
        *((_DWORD *)this + 70) = *a4;
        (*(void (**)(void))(**((void **)this + 20) + 48))(*((void *)this + 20));
        return 0;
      }
    }
    return 561211770;
  }
  if (a2 == 1936876401)
  {
    if (a3 != 4) {
      return 561211770;
    }
    int v10 = *a4;
    if (*a4 <= 0x7Fu)
    {
      if (*((_DWORD *)this + 69) != v10) {
        *((_DWORD *)this + 69) = v10;
      }
LABEL_34:
      acv2::SampleRateConverter::ReplaceResampler(this);
    }
    return 4294967246;
  }
  if (a2 == 1936876400)
  {
    if (a3 != 8) {
      return 561211770;
    }
    double v11 = *(double *)a4;
    if (*(double *)a4 >= 0.0 && v11 < 1.0)
    {
      *((double *)this + 38) = v11;
      (*(void (**)(void))(**((void **)this + 20) + 64))(*((void *)this + 20));
      return 0;
    }
    return 4294967246;
  }
  unsigned __int16 v7 = 25449;
LABEL_8:
  if (a2 == (v7 | 0x73720000))
  {
    if (a3 == 4)
    {
      int v8 = *a4;
      if ((int)*a4 > 1835626095)
      {
        if (v8 != 1852797549)
        {
          int v9 = 1835626096;
LABEL_31:
          if (v8 != v9) {
            goto LABEL_34;
          }
        }
      }
      else if (v8 != 1650553971)
      {
        int v9 = 1818848869;
        goto LABEL_31;
      }
      if (a2 != 1936876393) {
        *((_DWORD *)this + 68) = v8;
      }
      goto LABEL_34;
    }
    return 561211770;
  }
  return result;
}

uint64_t acv2::Reinterleaver::SetProperty(acv2::Reinterleaver *this, int a2, size_t a3, void *__src)
{
  if (a2 != 1667788144) {
    return 1886547824;
  }
  if (a3 < 4)
  {
LABEL_6:
    size_t v8 = (4 * *((_DWORD *)this + 21));
    if (v8 >= a3) {
      a3 = a3;
    }
    else {
      a3 = v8;
    }
    memcpy(*((void **)this + 24), __src, a3);
    *((unsigned char *)this + 264) = memcmp(*((const void **)this + 24), *((const void **)this + 27), v8) == 0;
    acv2::Reinterleaver::BuildInverseChannelMap(this);
    return 0;
  }
  else
  {
    uint64_t v5 = a3 >> 2;
    __int16 v6 = (int *)__src;
    while (1)
    {
      int v7 = *v6++;
      if (v7 >= *((_DWORD *)this + 11)) {
        return 4294967246;
      }
      if (!--v5) {
        goto LABEL_6;
      }
    }
  }
}

uint64_t acv2::SRCKernel::PrimeMethodWritable(acv2::SRCKernel *this)
{
  return 1;
}

void acv2::Resampler2Wrapper::~Resampler2Wrapper(const std::__fs::filesystem::path **this)
{
  acv2::Resampler2Wrapper::~Resampler2Wrapper(this);
  JUMPOUT(0x192FC8940);
}

{
  void **v2;
  void **v3;

  *this = (const std::__fs::filesystem::path *)&unk_1EDF95808;
  uint64_t v2 = (void **)(this + 3);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](this + 8, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](this + 7, 0);
  uint64_t v3 = v2;
  std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t acv2::Resampler2Wrapper::SetPrimeMethod(uint64_t this, uint64_t a2)
{
  *(_DWORD *)(this + 48) = a2;
  uint64_t v2 = *(uint64_t **)(this + 24);
  for (uint64_t i = *(uint64_t **)(this + 32);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return this;
}

uint64_t acv2::PCMConverterFactory::AddSRC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(double *)a1 == *(double *)(a1 + 40)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 28);
  int v6 = *(_DWORD *)(a1 + 12) & 0x20 | 9;
  int v7 = 4 * v5;
  if ((*(_DWORD *)(a1 + 12) & 0x20) != 0) {
    int v7 = 4;
  }
  uint64_t v16 = 0;
  int v17 = 1819304813;
  int v18 = v6;
  int v19 = v7;
  int v20 = 1;
  int v21 = v7;
  int v22 = v5;
  uint64_t v23 = 32;
  uint64_t v3 = acv2::PCMConverterFactory::AddPCMToGoal(&v16, a1, a2, a3, 0);
  if (!v3)
  {
    *(void *)a1 = *(void *)(a1 + 40);
    int v8 = *(_DWORD *)(a1 + 28);
    int v9 = *(_DWORD *)(a1 + 52) & 0x20;
    int v10 = *(_DWORD *)(a1 + 12);
    if ((v10 & 0x20) != 0)
    {
      unsigned int v11 = 1;
    }
    else
    {
      unsigned int v11 = *(_DWORD *)(a1 + 28);
      if (!v8)
      {
        unsigned int v12 = (*(_DWORD *)(a1 + 32) + 7) >> 3;
        goto LABEL_11;
      }
    }
    unsigned int v12 = *(_DWORD *)(a1 + 24) / v11;
LABEL_11:
    unsigned int v13 = v10 & 0xFFFFFFDF;
    if (v9) {
      int v8 = 1;
    }
    int v14 = v12 * v8;
    *(_DWORD *)(a1 + 20) = 1;
    *(_DWORD *)(a1 + 24) = v14;
    *(_DWORD *)(a1 + 12) = v13 | v9;
    *(_DWORD *)(a1 + 16) = v14;
    operator new();
  }
  return v3;
}

void sub_18FEF9DE4(_Unwind_Exception *a1)
{
  ACAudioSpan::~ACAudioSpan(v2);
  uint64_t v4 = *((void *)v1 + 20);
  *((void *)v1 + 20) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  acv2::AudioConverterBase::~AudioConverterBase(v1);
  MEMORY[0x192FC8940]();
  _Unwind_Resume(a1);
}

void acv2::BlockCopyConverter::~BlockCopyConverter(acv2::BlockCopyConverter *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

void acv2::Reinterleaver::~Reinterleaver(acv2::Reinterleaver *this)
{
  *(void *)this = &unk_1EDF952A8;
  uint64_t v2 = (void *)*((void *)this + 30);
  if (v2)
  {
    *((void *)this + 31) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 24);
  if (v4)
  {
    *((void *)this + 25) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 21);
  if (v5)
  {
    *((void *)this + 22) = v5;
    operator delete(v5);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EDF952A8;
  uint64_t v2 = (void *)*((void *)this + 30);
  if (v2)
  {
    *((void *)this + 31) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 24);
  if (v4)
  {
    *((void *)this + 25) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 21);
  if (v5)
  {
    *((void *)this + 22) = v5;
    operator delete(v5);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

void acv2::AudioConverterBase::~AudioConverterBase(acv2::AudioConverterBase *this)
{
  *(void *)this = &unk_1EDF95888;
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 19, 0);
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  std::unique_ptr<ACAudioSpan>::reset[abi:ne180100]((std::pmr ***)this + 14, 0);
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    std::default_delete<ACSpanningInputBuffer>::operator()[abi:ne180100](v2);
  }
}

std::pmr **std::unique_ptr<ACAudioSpan>::reset[abi:ne180100](std::pmr ***a1, std::pmr **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ACAudioSpan::~ACAudioSpan(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void std::default_delete<ACSpanningInputBuffer>::operator()[abi:ne180100](uint64_t a1)
{
  std::__optional_destruct_base<caulk::rt_vector<AudioStreamPacketDescription>,false>::~__optional_destruct_base[abi:ne180100](a1 + 256);
  uint64_t v2 = *(void **)(a1 + 232);
  if (v2)
  {
    *(void *)(a1 + 240) = v2;
    operator delete(v2);
  }
  ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 128));
  ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 24));
  ExtendedAudioBufferList_Destroy(*(std::pmr **)(a1 + 16));
  JUMPOUT(0x192FC8940);
}

void ACAudioSpan::~ACAudioSpan(std::pmr **this)
{
  ExtendedAudioBufferList_Destroy(this[12]);
  if (*((unsigned char *)this + 88))
  {
    uint64_t v2 = this[6];
    if (v2)
    {
      this[7] = v2;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v2);
    }
  }
}

void std::optional<ACAudioSpan>::emplace[abi:ne180100]<CA::StreamDescription const&,void>(uint64_t a1, const AudioStreamBasicDescription *a2)
{
  if (*(unsigned char *)(a1 + 104))
  {
    ACAudioSpan::~ACAudioSpan((std::pmr **)a1);
    *(unsigned char *)(a1 + 104) = 0;
  }
  ACAudioSpan::ACAudioSpan((ACAudioSpan *)a1, a2);
  *(unsigned char *)(v3 + 104) = 1;
}

std::pmr *ExtendedAudioBufferList_Destroy(std::pmr *result)
{
  if (result)
  {
    unsigned int v1 = result;
    if (*((_DWORD *)result + 2) != 1094863915) {
      std::terminate();
    }
    uint64_t v2 = AudioBufferMemoryResource(result);
    uint64_t v3 = v2;
    uint64_t v4 = *((void *)v1 + 4);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v2 + 24))(v2, v4, *((unsigned int *)v1 + 5), 8);
    }
    uint64_t v5 = *((unsigned int *)v1 + 3);
    uint64_t v6 = *((unsigned int *)v1 + 4);
    if (v5)
    {
      int v7 = (char *)v1 + v5;
      int v8 = *(void **)v7;
      if (*(void *)v7)
      {
        *((void *)v7 + 1) = v8;
        std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v8);
      }
    }
    int v9 = *(uint64_t (**)(uint64_t, std::pmr *, uint64_t, uint64_t))(*(void *)v3 + 24);
    return (std::pmr *)v9(v3, v1, v6, 8);
  }
  return result;
}

uint64_t acv2::AudioConverterChain::PostBuild(acv2::AudioConverterChain *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*((void *)this + 34);
  uint64_t v3 = (void *)*((void *)this + 35);
  while (v3 != v2)
  {
    uint64_t v5 = *--v3;
    uint64_t v4 = v5;
    *uint64_t v3 = 0;
    if (v5) {
      std::default_delete<ACOutputBuffer>::operator()[abi:ne180100](v4);
    }
  }
  *((void *)this + 35) = v2;
  unint64_t v6 = *((void *)this + 14) - *((void *)this + 13);
  unint64_t v7 = v6 >> 3;
  if ((int)(v6 >> 3) < 1)
  {
LABEL_25:
    std::optional<ACAudioSpan>::emplace[abi:ne180100]<CA::StreamDescription const&,void>((uint64_t)this + 128, (const AudioStreamBasicDescription *)this + 1);
    if ((atomic_load_explicit((atomic_uchar *volatile)_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input))
    {
      _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input = checkEnvVar("CoreAudio_CaptureConverterChain_Input");
      __cxa_guard_release(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
    }
    if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input) {
      acv2::AudioConverterBase::createCapturer(&__p, "-ConverterChainInput", (uint64_t)this + 488, (uint64_t)this, this);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input))
    {
      _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input = checkEnvVar("CoreAudio_CaptureConverterChain_Nodes");
      __cxa_guard_release(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input);
    }
    if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm38EEEtlA38_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc67ELc111ELc110ELc118ELc101ELc114ELc116ELc101ELc114ELc67ELc104ELc97ELc105ELc110ELc95ELc78ELc111ELc100ELc101ELc115EEEEEbvE5input)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "-ConverterChainNode_");
      int v18 = (void *)*((void *)this + 13);
      if (v18 != *((void **)this + 14))
      {
        int v19 = (const void *)*v18;
        std::to_string(&v48, 0);
        if (v55 >= 0) {
          int v20 = (const std::string::value_type *)v54;
        }
        else {
          int v20 = (const std::string::value_type *)v54[0];
        }
        if (v55 >= 0) {
          std::string::size_type v21 = v55;
        }
        else {
          std::string::size_type v21 = (std::string::size_type)v54[1];
        }
        int v22 = std::string::insert(&v48, 0, v20, v21);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        uint64_t v24 = std::string::append(&v49, "_", 1uLL);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        uint64_t v26 = (const void *)(*(uint64_t (**)(void))(*(void *)*v18 + 56))(*v18);
        CFDictionaryRef v27 = v26;
        if (v26) {
          CFRetain(v26);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v27);
        if (cf)
        {
          applesauce::CF::convert_to<std::string,0>((uint64_t)v46, (const __CFString *)cf);
          if ((v47 & 0x80u) == 0) {
            uint64_t v28 = v46;
          }
          else {
            uint64_t v28 = (void **)v46[0];
          }
          if ((v47 & 0x80u) == 0) {
            std::string::size_type v29 = v47;
          }
          else {
            std::string::size_type v29 = (std::string::size_type)v46[1];
          }
          CFStringRef v30 = std::string::append(&v50, (const std::string::value_type *)v28, v29);
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          int64_t v53 = v30->__r_.__value_.__r.__words[2];
          long long v52 = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (v53 >= 0) {
            uint64_t v32 = (const char *)&v52;
          }
          else {
            uint64_t v32 = (const char *)v52;
          }
          acv2::AudioConverterBase::createCapturer(buf, v32, (uint64_t)v19 + 152, (uint64_t)v19 + 56, v19);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      if (v55 < 0) {
        operator delete(v54[0]);
      }
    }
    uint64_t v33 = *((void *)this + 43);
    if (v33)
    {
      if (*(_DWORD *)(v33 + 72)) {
        BOOL v34 = *(_DWORD *)(v33 + 76) == 0;
      }
      else {
        BOOL v34 = 1;
      }
      uint64_t v35 = 0;
      *((unsigned char *)this + 496) = v34;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = (v6 >> 3);
    uint64_t v44 = v8;
    while (1)
    {
      unint64_t v7 = (v7 - 1);
      uint64_t v9 = *((void *)this + 13);
      uint64_t v10 = *(void *)(v9 + 8 * v7);
      *(void *)(v10 + 8) = this;
      uint64_t v11 = *(void *)(v9 + 8 * v7);
      if (v8 != v44) {
        operator new();
      }
      *(_DWORD *)(v10 + 120) = -1;
      if (!v7) {
        break;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 104))(v11))
      {
        uint64_t v11 = *(void *)(v9 + 8 * v7);
        break;
      }
      uint64_t v13 = *(void *)(v10 + 104);
      *(void *)(v10 + 104) = 0;
      if (v13) {
        std::default_delete<ACSpanningInputBuffer>::operator()[abi:ne180100](v13);
      }
      if (v8 == v44)
      {
        uint64_t v14 = *(void *)(v9 + 8 * v7);
        long long v15 = *(_OWORD *)(v14 + 56);
        long long v16 = *(_OWORD *)(v14 + 72);
        *((void *)this + 9) = *(void *)(v14 + 88);
        *(_OWORD *)((char *)this + 40) = v15;
        *(_OWORD *)((char *)this + 56) = v16;
      }
      if (v8-- <= 1) {
        goto LABEL_25;
      }
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
    if (!v12 || !*(unsigned char *)(v12 + 197) || *(_DWORD *)(v12 + 356))
    {
      if (*((unsigned char *)this + 96)) {
        operator new();
      }
      operator new();
    }
    uint64_t v35 = 1768846202;
    AudioConverterLog();
    uint64_t v37 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *(void *)(v9 + 8 * v7);
      v38.i32[0] = bswap32(*(_DWORD *)(v39 + 24));
      *(int8x8_t *)v38.i8 = vzip1_s8(*(int8x8_t *)v38.i8, *(int8x8_t *)v38.i8);
      v40.i64[0] = 0x1F0000001FLL;
      v40.i64[1] = 0x1F0000001FLL;
      v41.i64[0] = 0x1F0000001FLL;
      v41.i64[1] = 0x1F0000001FLL;
      v42.i64[0] = 0x5F0000005FLL;
      v42.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v38.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v42, (uint32x4_t)vsraq_n_s32(v41, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v38.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v38.i8, (int8x8_t)0x2E002E002E002ELL);
      char v55 = 4;
      *(int8x8_t *)v38.i8 = vmovn_s16(v38);
      LODWORD(v54[0]) = v38.i32[0];
      BYTE4(v54[0]) = 0;
      v38.i32[0] = bswap32(*(_DWORD *)(v39 + 64));
      *(int8x8_t *)v38.i8 = vzip1_s8(*(int8x8_t *)v38.i8, *(int8x8_t *)v38.i8);
      *(int8x8_t *)v38.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v42, (uint32x4_t)vsraq_n_s32(v40, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v38.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v38.i8, (int8x8_t)0x2E002E002E002ELL);
      HIBYTE(v53) = 4;
      LODWORD(v52) = vmovn_s16(v38).u32[0];
      BYTE4(v52) = 0;
      *(_DWORD *)long long buf = 136315906;
      int v57 = "CompositeAudioConverter.cpp";
      __int16 v58 = 1024;
      int v59 = 1740;
      __int16 v60 = 2080;
      int v61 = v54;
      __int16 v62 = 2080;
      int v63 = &v52;
      _os_log_impl(&dword_18FEC0000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d CompressedFormatMaxPacketSize() == 0 with input format: %s, output format: %s", buf, 0x26u);
      if (SHIBYTE(v53) < 0) {
        operator delete((void *)v52);
      }
      if (v55 < 0) {
        operator delete(v54[0]);
      }
    }
  }
  return v35;
}

void sub_18FEFABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CA::AudioBuffers *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
}

void ACAudioSpan::ACAudioSpan(ACAudioSpan *this, const AudioStreamBasicDescription *a2)
{
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *(void *)((char *)this + 21) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  uint64_t v4 = CA::AudioBuffers::AudioBuffers((ACAudioSpan *)((char *)this + 96), a2, 0);
  if ((a2->mFormatFlags & 0x20) != 0)
  {
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
    AudioFormatID mFormatID = a2->mFormatID;
    uint64_t v9 = *v4;
    if (mChannelsPerFrame == 1)
    {
      *(_DWORD *)(v9 + 56) = 1;
      unint64_t v7 = (_DWORD *)(v9 + 48);
    }
    else
    {
      unsigned int v10 = *(_DWORD *)(v9 + 48);
      unint64_t v7 = (_DWORD *)(v9 + 48);
      uint64_t v11 = 16 * v10;
      if (v11)
      {
        uint64_t v12 = v7 + 2;
        do
        {
          _DWORD *v12 = 1;
          v12 += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
  }
  else
  {
    AudioFormatID mFormatID = a2->mFormatID;
    UInt32 v6 = a2->mChannelsPerFrame;
    unint64_t v7 = (_DWORD *)(*v4 + 48);
    *(_DWORD *)(*v4 + 56) = v6;
  }
  if (mFormatID == 1885564203)
  {
    if (!*((unsigned char *)this + 88)) {
      _ZNSt3__18optionalI19ACMetadataContainerE7emplaceB8ne180100IJEvEERS1_DpOT_((uint64_t)this + 48);
    }
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
  }
  *((void *)this + 2) = v7;
  *((_DWORD *)this + 6) = *v7;
  *((unsigned char *)this + 28) = v13;
}

void sub_18FEFAE54(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v3 = *(void **)(v1 + 48);
    if (v3)
    {
      *(void *)(v1 + 56) = v3;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *CA::AudioBuffers::AudioBuffers(void *a1, CA::AudioBuffers *this, int a3)
{
  *a1 = this;
  if (!this)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
  }
  CA::AudioBuffers::Prepare(this, a3, *((_DWORD *)this + 1));
  return a1;
}

void sub_18FEFAEF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *CA::AudioBuffers::Prepare(CA::AudioBuffers *this, int a2, unsigned int a3)
{
  uint64_t result = ExtendedAudioBufferList_Prepare((uint64_t)this, a2, a3);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
  }
  return result;
}

void sub_18FEFAF68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *ExtendedAudioBufferList_Prepare(uint64_t a1, int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 8) != 1094863915) {
    std::terminate();
  }
  uint64_t v3 = (int *)a1;
  uint64_t v5 = (unsigned int *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 > *(_DWORD *)a1)
  {
    uint64_t v11 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v11 + 88, 16);
    if (message)
    {
      char v13 = (caulk::concurrent::message *)message;
      uint64_t v14 = _os_log_pack_fill();
      unsigned int v6 = *v5;
LABEL_13:
      int v17 = *v3;
      *(_DWORD *)uint64_t v14 = 67109376;
      *(_DWORD *)(v14 + 4) = v6;
      *(_WORD *)(v14 + 8) = 1024;
      *(_DWORD *)(v14 + 10) = v17;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gCADefaultDeferredLog + 16), v13);
    }
    return 0;
  }
  unsigned int v6 = a3;
  uint64_t v7 = *(unsigned int *)(a1 + 4);
  if (v7 < a3)
  {
    uint64_t v15 = _os_log_pack_size();
    uint64_t v16 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v15 + 88, 16);
    if (v16)
    {
      char v13 = (caulk::concurrent::message *)v16;
      uint64_t v14 = _os_log_pack_fill();
      ++v3;
      goto LABEL_13;
    }
    return 0;
  }
  if (v4)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = (void *)(a1 + 64);
    do
    {
      *uint64_t v9 = v8;
      v8 += v7;
      *((_DWORD *)v9 - 2) = a2;
      *((_DWORD *)v9 - 1) = a3;
      v9 += 2;
      --v4;
    }
    while (v4);
  }
  return v5;
}

void *CA::AudioBuffers::AudioBuffers(CA::AudioBuffers *this, const AudioStreamBasicDescription *a2, int a3)
{
  uint64_t v5 = (CA::AudioBuffers *)ExtendedAudioBufferList_CreateWithFormat((uint64_t)a2, a3);
  AudioFormatID mFormatID = a2->mFormatID;
  BOOL v7 = mFormatID == 1885564203 || mFormatID == 1819304813;
  if (v7 && (a2->mFormatFlags & 0x20) != 0) {
    UInt32 mChannelsPerFrame = 1;
  }
  else {
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  }
  return CA::AudioBuffers::AudioBuffers(this, v5, mChannelsPerFrame);
}

uint64_t anonymous namespace'::EABLImpl::create(_anonymous_namespace_::EABLImpl *this, int a2, int a3)
{
  unsigned int v3 = this;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (this > 0x1000)
  {
    uint64_t v15 = CADefaultLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315650;
      int v17 = "AudioBuffers.cpp";
      __int16 v18 = 1024;
      int v19 = 163;
      __int16 v20 = 1024;
      unsigned int v21 = v3;
      _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d ExtendedAudioBufferList_Create: Too many buffers (%d)", (uint8_t *)&v16, 0x18u);
    }
    return 0;
  }
  else
  {
    unint64_t v4 = 16 * this;
    if (v4 <= 0xC) {
      unint64_t v4 = 12;
    }
    uint64_t v5 = v4 + 60;
    if (a3) {
      uint64_t v6 = ((v5 + 15) & 0xFFFFFFF0) + 24;
    }
    else {
      uint64_t v6 = v5;
    }
    if (a3) {
      unsigned int v7 = (v5 + 15) & 0xFFFFFFF0;
    }
    else {
      unsigned int v7 = 0;
    }
    unsigned int v8 = (a2 + 15) & 0xFFFFFFF0;
    uint64_t v9 = (std::pmr *)caulk::numeric::exceptional_mul<unsigned int>(this, v8);
    unsigned int v10 = v9;
    uint64_t v11 = AudioBufferMemoryResource(v9);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v6, 16);
    if (v10) {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v11 + 16))(v11, v10, 16);
    }
    else {
      uint64_t v13 = 0;
    }
    *(_DWORD *)uint64_t v12 = v3;
    *(_DWORD *)(v12 + 4) = v8;
    *(_DWORD *)(v12 + 8) = 1094863915;
    *(_DWORD *)(v12 + 12) = v7;
    *(_DWORD *)(v12 + 16) = v6;
    *(_DWORD *)(v12 + 20) = v10;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = v13;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    if (!(void)gCADefaultDeferredLog)
    {
      if (gDefaultDeferredLogOnce != -1) {
        dispatch_once(&gDefaultDeferredLogOnce, &__block_literal_global_4783);
      }
      unsigned int v7 = *(_DWORD *)(v12 + 12);
    }
    *(_DWORD *)(v12 + 48) = v3;
    *(_DWORD *)(v12 + 48 + 16 * v3 + 8) = 1094863915;
    if (v7) {
      AudioMetadataFrame::AudioMetadataFrame((AudioMetadataFrame *)(v12 + v7));
    }
  }
  return v12;
}

uint64_t AudioBufferMemoryResource(std::pmr *a1)
{
  if (atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input, memory_order_acquire))goto LABEL_2; {
  a1 = (std::pmr *)__cxa_guard_acquire(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input);
  }
  if (!a1) {
    goto LABEL_2;
  }
  uint64_t v2 = getenv("AudioBufferMemoryResource_UseMalloc");
  if (!v2) {
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v2);
  unint64_t v3 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)__p[1];
  }
  if (v3 == 2)
  {
    unint64_t v4 = __p[0];
    unsigned int v7 = __p;
    if ((v9 & 0x80u) != 0) {
      unsigned int v7 = (void **)__p[0];
    }
    if (*(_WORD *)v7 == 20302) {
      goto LABEL_15;
    }
LABEL_21:
    if ((char)v9 < 0) {
      operator delete(__p[0]);
    }
    char v6 = 1;
    goto LABEL_24;
  }
  if (v3 != 1) {
    goto LABEL_21;
  }
  unint64_t v4 = __p[0];
  uint64_t v5 = __p;
  if ((v9 & 0x80u) != 0) {
    uint64_t v5 = (void **)__p[0];
  }
  if (*(unsigned char *)v5 != 48) {
    goto LABEL_21;
  }
LABEL_15:
  if ((char)v9 < 0) {
    operator delete(v4);
  }
LABEL_17:
  char v6 = 0;
LABEL_24:
  _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input = v6;
  __cxa_guard_release(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input);
LABEL_2:
  if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input) {
    return std::pmr::get_default_resource(a1);
  }
  else {
    return caulk::audio_buffer_resource(a1);
  }
}

void sub_18FEFB494(_Unwind_Exception *a1)
{
}

unint64_t caulk::numeric::exceptional_mul<unsigned int>(unsigned int a1, unsigned int a2)
{
  unint64_t result = a1 * (unint64_t)a2;
  if ((result & 0xFFFFFFFF00000000) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic multiplication overflow");
  }
  return result;
}

void sub_18FEFB50C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtendedAudioBufferList_CreateWithFormat(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 28);
  if (!v2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 1885564203 || v3 == 1819304813)
  {
    if ((*(unsigned char *)(a1 + 12) & 0x20) != 0) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = 1;
    }
  }
  else
  {
    uint64_t v6 = 1;
  }
}

uint64_t acv2::AudioConverterBase::AsCodecConverter(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t std::__optional_destruct_base<caulk::rt_vector<AudioStreamPacketDescription>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unsigned int v2 = *(caulk::rt_safe_memory_resource **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v2;
      std::allocator_traits<caulk::rt_allocator<AudioStreamPacketDescription>>::deallocate[abi:ne180100](v2, (uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 4);
    }
  }
  return a1;
}

void acv2::SampleRateConverter::ReplaceResampler(acv2::SampleRateConverter *this)
{
  if (*((_DWORD *)this + 68) == 1835626096 || *((unsigned char *)this + 312) != 0) {
    operator new();
  }
  operator new();
}

uint64_t std::__split_buffer<std::unique_ptr<Resampler2>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Resampler2::Resampler2(Resampler2 *this, double a2, double a3, int a4, int a5, uint64_t a6, double a7, char a8)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDF8C2A0;
  *((unsigned char *)this + 24) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((double *)this + 12) = a2;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = a5;
  *((_DWORD *)this + 29) = a4;
  *((_DWORD *)this + 31) = 0;
  *((_WORD *)this + 66) = 0;
  *((double *)this + 18) = a7;
  *((void *)this + 20) = 0;
  double v12 = a2 / a3;
  *((double *)this + 21) = v12;
  *((double *)this + 22) = 1.0 / v12;
  *((unsigned char *)this + 184) = a8;
  *((unsigned char *)this + 185) = 0;
  *((void *)this + 24) = 0;
  *((unsigned char *)this + 200) = 1;
  RateRamp::RateRamp((Resampler2 *)((char *)this + 208));
  *((unsigned char *)this + 264) = 0;
  *((void *)this + 34) = 0;
  Resampler2::ConstructorBody((uint64_t)this, 1, a6, a2, a3, 0.0, 0.0);
}

uint64_t Resampler2::ConstructorBody(uint64_t a1, int a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double v11 = a5;
  double v12 = a4;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (a4 <= 0.0 || a5 <= 0.0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v50 = 136315906;
      int v51 = "Resampler2.cpp";
      __int16 v52 = 1024;
      int v53 = 260;
      __int16 v54 = 2048;
      double v55 = v12;
      __int16 v56 = 2048;
      double v57 = v11;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d Resampler2 bad sample rate(s) : %11.2f %11.2f", (uint8_t *)&v50, 0x26u);
    }
    if (v12 > 0.0 || v11 > 0.0)
    {
      if (v11 <= 0.0 && v12 > 0.0) {
        double v15 = v12;
      }
      else {
        double v15 = v11;
      }
      if (v12 <= 0.0) {
        double v12 = v11;
      }
      double v11 = v15;
    }
    else
    {
      double v11 = 44100.0;
      double v12 = 44100.0;
    }
  }
  int v16 = *(_DWORD *)(a1 + 116);
  if (v16 == 1818848869)
  {
    *(void *)(a1 + 72) = 0x200200000001;
    *(void *)(a1 + 192) = 1;
    unsigned int v17 = 8194;
    goto LABEL_71;
  }
  int v18 = vcvtmd_s64_f64(v12);
  int v19 = vcvtmd_s64_f64(v11);
  if (v12 != (double)v18 || v11 != (double)v19) {
    goto LABEL_43;
  }
  int v21 = v18 >= 0 ? v18 : -v18;
  signed int v22 = v19 >= 0 ? v19 : -v19;
  if (v21 >= 2 && v22 >= 2)
  {
    do
    {
      if (v21 <= v22) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = v21;
      }
      if (v21 < v22) {
        signed int v22 = v21;
      }
      int v21 = v24 % v22;
    }
    while ((int)(v24 % v22) > 0);
  }
  else
  {
    signed int v22 = 1;
  }
  int v25 = v19 / v22;
  if (v19 / v22 <= 640)
  {
    *(unsigned char *)(a1 + 133) = 1;
    *(_DWORD *)(a1 + 108) = v18 / v22;
    *(_DWORD *)(a1 + 124) = v25;
    *(double *)(a1 + 152) = 1.0 / (double)v25;
  }
  else
  {
LABEL_43:
    if (v16 == 1650553971) {
      int v25 = 512;
    }
    else {
      int v25 = 128;
    }
  }
  if (a2 == 2)
  {
    double v26 = *(double *)(a1 + 168);
    double v27 = fmax(v26, 1.0);
    if (v26 <= 1.0) {
      double v26 = 1.0 / v26;
    }
    int v28 = (int)((a6 + -6.0) * (v26 * 0.07016) / (1.0 - v27 * a7) / (double)v25);
    goto LABEL_60;
  }
  unsigned int v29 = *(_DWORD *)(a1 + 112);
  double v30 = *(double *)(a1 + 168);
  double v31 = fmax(v30, 1.0);
  double v32 = 1.0 / v31;
  if (v16 != 1650553971)
  {
    if (v29 < 0x7F)
    {
      a7 = v32 * 0.9;
      if (v29 <= 0x5F)
      {
        if (v29 <= 0x3F) {
          a6 = 80.0;
        }
        else {
          a6 = 90.0;
        }
        if (v29 <= 0x3F) {
          signed int v35 = 16;
        }
        else {
          signed int v35 = 32;
        }
      }
      else
      {
        signed int v35 = 64;
        a6 = 100.0;
      }
    }
    else
    {
      a6 = dbl_1901C61D0[v30 < 1.09];
      a7 = v32 * 0.9;
      signed int v35 = 96;
    }
    goto LABEL_61;
  }
  if (v29 > 0x7E)
  {
    double v33 = 1152.0;
    double v34 = 0.99;
LABEL_57:
    double v36 = 160.0;
    goto LABEL_58;
  }
  if (v29 > 0x5F)
  {
    double v33 = 555.0;
    double v34 = 0.98;
    goto LABEL_57;
  }
  if (v29 <= 0x3F)
  {
    double v34 = dbl_1901C61E0[v29 > 0x1F];
    if (v29 <= 0x1F) {
      a6 = 120.0;
    }
    else {
      a6 = 144.0;
    }
    double v33 = 88.2;
    if (v29 > 0x1F) {
      double v33 = 192.0;
    }
    goto LABEL_59;
  }
  double v33 = 323.4;
  double v34 = 0.97;
  double v36 = 144.0;
LABEL_58:
  a6 = v36;
LABEL_59:
  a7 = v32 * v34;
  int v28 = vcvtpd_s64_f64(v31 * v33);
LABEL_60:
  signed int v35 = (v28 + 15) & 0xFFFFFFF0;
LABEL_61:
  if (v35 <= 96) {
    int v37 = 96;
  }
  else {
    int v37 = v35;
  }
  pthread_mutex_lock(&sInitLocker);
  if (sIsInitialized != 1) {
    operator new();
  }
  *(void *)(a1 + 56) = SincKernelFactory::ReferenceSincKernel((SincKernelFactory *)sSincKernelFactory, a6, a7);
  pthread_mutex_unlock(&sInitLocker);
  *(void *)(a1 + 48) = *(void *)(a1 + 56);
  if (*(unsigned char *)(a1 + 184)) {
    unsigned int v38 = v37 + 0x2000;
  }
  else {
    unsigned int v38 = vcvtpd_u64_f64((double)v37 + *(double *)(a1 + 168) * 1024.0);
  }
  *(_DWORD *)(a1 + 76) = v38;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a3);
  unsigned int v17 = *(_DWORD *)(a1 + 76);
LABEL_71:
  uint64_t v39 = malloc_type_malloc(4 * v17, 0x2C8E6D5CuLL);
  int32x4_t v40 = v39;
  if (v17 && !v39)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned __int8 v47 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v39, 4 * v17);
  *(void *)(a1 + 80) = v40;
  uint64_t v41 = *(unsigned int *)(a1 + 76);
  uint32x4_t v42 = malloc_type_malloc(4 * v41, 0x2C8E6D5CuLL);
  unint64_t v43 = v42;
  if (v41 && !v42)
  {
    std::string v48 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    std::string v49 = std::bad_alloc::bad_alloc(v48);
  }
  bzero(v42, 4 * v41);
  *(void *)(a1 + 88) = v43;
  int v44 = *MEMORY[0x1E4FB94D8];
  if (*MEMORY[0x1E4FB94D8] == -1) {
    int v44 = CAVectorUnit_Examine();
  }
  *(_DWORD *)(a1 + 128) = v44;
  return Resampler2::SetConverterFunction(a1);
}

void sub_18FEFC7EC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (ResamplerInitLocker *)MEMORY[0x192FC8940](v1, 0x80C40D6874129);
  ResamplerInitLocker::~ResamplerInitLocker(v4);
  _Unwind_Resume(a1);
}

uint64_t Resampler2::SetPrimeMethod(uint64_t this, int a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)(this + 116) == 1818848869)
  {
    *(_DWORD *)(this + 72) = 1;
  }
  else
  {
    *(_DWORD *)(this + 120) = a2;
    if (a2)
    {
      if (a2 == 2)
      {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 152))(this);
        a2 = this - 1;
      }
      else
      {
        a2 = *(_DWORD *)(*(void *)(this + 56) + 20);
      }
    }
    *(_DWORD *)(v2 + 72) = a2;
    *(void *)(v2 + 192) = 0;
    *(unsigned char *)(v2 + 200) = 1;
    double v3 = *(double *)(v2 + 144);
    *(double *)(v2 + 160) = v3;
    if (v3 != 0.0)
    {
      *(unsigned char *)(v2 + 133) = 0;
      return Resampler2::SetConverterFunction(v2);
    }
  }
  return this;
}

uint64_t Resampler2::SetConverterFunction(uint64_t this)
{
  if (*(_DWORD *)(this + 116) == 1818848869)
  {
    uint64_t v1 = Resampler2::ConvertLinear;
  }
  else if (*(int *)(this + 128) < 1)
  {
    if (*(unsigned char *)(this + 264)) {
      uint64_t v1 = Resampler2::ConvertScalar<Resampler2::RampedRate>;
    }
    else {
      uint64_t v1 = Resampler2::ConvertScalar<Resampler2::FixedRate>;
    }
  }
  else if (*(unsigned char *)(this + 133))
  {
    uint64_t v1 = Resampler2::ConvertSIMD_SmallIntegerRatio;
  }
  else if (*(unsigned char *)(this + 264))
  {
    uint64_t v1 = Resampler2::ConvertSIMD<Resampler2::RampedRate>;
  }
  else
  {
    uint64_t v1 = Resampler2::ConvertSIMD<Resampler2::FixedRate>;
  }
  *(void *)(this + 8) = v1;
  *(void *)(this + 16) = 0;
  return this;
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_18FEFCA1C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CBRConverter::NeedsBufferedInput(acv2::CBRConverter *this)
{
  return 0;
}

void Resampler2::~Resampler2(Resampler2 *this)
{
  Resampler2::~Resampler2(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  unsigned int v8 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDF8C2A0;
  if (*((unsigned char *)this + 24) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = 136315394;
    uint64_t v5 = "Resampler2.cpp";
    uint64_t v6 = 1024;
    unsigned int v7 = 363;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d Someone is deleting a Resampler while it is in use.\n", (uint8_t *)&v4, 0x12u);
  }
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    free(v2);
    *((void *)this + 10) = 0;
  }
  double v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    free(v3);
    *((void *)this + 11) = 0;
  }
  pthread_mutex_lock(&sInitLocker);
  SincKernelFactory::ReleaseSincKernel((SincKernelFactory *)sSincKernelFactory, *((SincKernel **)this + 6));
  pthread_mutex_unlock(&sInitLocker);
}

void sub_18FEFCBA0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioConverterReset(AudioConverterRef inAudioConverter)
{
  v3[0] = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
  v3[1] = (uint64_t (*)(uint64_t, uint64_t))&v2;
  return with_resolved((int)inAudioConverter, v3);
}

uint64_t DSPGraph::CalculationBox::getParameter(DSPGraph::CalculationBox *this, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2) {
    DSPGraph::Box::getParameter(this);
  }
  if (a3 != 2)
  {
    if (a3 == 1 && !*((_DWORD *)this + 194))
    {
      if (*((void *)this + 103) <= (unint64_t)a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v24, "getParameter");
        std::to_string(&v20, a4);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, "CalculationBox can't get input scope element ", &v20);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, &v21, " with parameter ID ");
        std::to_string(&v19, 0);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v11 = &v19;
        }
        else {
          double v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
        }
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v19.__r_.__value_.__l.__size_;
        }
        uint64_t v13 = std::string::append(&v22, (const std::string::value_type *)v11, size);
        std::string v23 = *v13;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        DSPGraph::ThrowException(-10877, &v25, 137, &v24, (long long *)&v23);
      }
      uint64_t v6 = (char *)this + 16 * a4 + 792;
      return DSPGraph::CalculationBox::Value::operator float<float>((uint64_t)v6);
    }
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "getParameter");
    std::to_string(&v20, a3);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, "CalculationBox can't get parameter in scope ", &v20);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, &v21, " with parameter ID ");
    std::to_string(&v19, 0);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v8 = &v19;
    }
    else {
      unsigned int v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = v19.__r_.__value_.__l.__size_;
    }
    unsigned int v10 = std::string::append(&v22, (const std::string::value_type *)v8, v9);
    std::string v23 = *v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10866, &v25, 150, &v24, (long long *)&v23);
  }
  if (*((_DWORD *)this + 195)) {
    goto LABEL_12;
  }
  DSPGraph::CalculationBox::calculate((uint64_t)&v25, (uint64_t)this, a4);
  if (!v26)
  {
    int v14 = v25;
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "getParameter");
    std::to_string(&v19, a4);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, "CalculationBox can't get output scope element ", &v19);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, &v20, " with parameter ID ");
    std::to_string(&v18, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v15 = &v18;
    }
    else {
      double v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = v18.__r_.__value_.__l.__size_;
    }
    unsigned int v17 = std::string::append(&v21, (const std::string::value_type *)v15, v16);
    std::string v22 = *v17;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(v14, &v24, 144, (long long *)&v23, (long long *)&v22);
  }
  return DSPGraph::CalculationBox::Value::operator float<float>((uint64_t)&v25);
}

void sub_18FEFCF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v38 - 73) < 0) {
    operator delete(*(void **)(v38 - 96));
  }
  if (*(char *)(v38 - 49) < 0) {
    operator delete(*(void **)(v38 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::CalculationBox::calculate(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v3 = this;
  if (a3)
  {
    int v4 = -10877;
LABEL_3:
    *(_DWORD *)this = v4;
    *(unsigned char *)(this + 16) = 0;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 784))
    {
      case 0:
        uint64_t v5 = *(void *)(a2 + 824);
        if (!v5) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v5 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        uint64_t v6 = *(unsigned int *)(a2 + 800);
        if (v6 == -1 || (uint64_t v7 = *(unsigned int *)(a2 + 816), v7 == -1)) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        uint64_t v37 = (uint64_t)&v39;
        this = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1EDFA4318[2 * v6] + v7))(&v37, a2 + 792, a2 + 808);
        goto LABEL_49;
      case 1:
        uint64_t v26 = *(void *)(a2 + 824);
        if (!v26) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v26 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        uint64_t v27 = *(unsigned int *)(a2 + 800);
        if (v27 == -1 || (uint64_t v28 = *(unsigned int *)(a2 + 816), v28 == -1)) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        uint64_t v37 = (uint64_t)&v39;
        this = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1EDFA4338[2 * v27] + v28))(&v37, a2 + 792, a2 + 808);
        goto LABEL_49;
      case 2:
        uint64_t v20 = *(void *)(a2 + 824);
        if (!v20) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v20 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        uint64_t v16 = a2 + 792;
        unsigned int v17 = (uint64_t *)(a2 + 808);
        goto LABEL_30;
      case 3:
        uint64_t v23 = *(void *)(a2 + 824);
        if (!v23) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v23 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        uint64_t v24 = *(unsigned int *)(a2 + 800);
        if (v24 == -1 || (uint64_t v25 = *(unsigned int *)(a2 + 816), v25 == -1)) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        uint64_t v37 = (uint64_t)&v39;
        this = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1EDFA4378[2 * v24] + v25))(&v37, a2 + 792, a2 + 808);
        goto LABEL_49;
      case 4:
        if (!*(void *)(a2 + 824)) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        uint64_t v16 = a2 + 792;
        uint64_t v37 = -1;
        int v38 = 0;
        unsigned int v17 = &v37;
LABEL_30:
        this = DSPGraph::CalculationBox::Value::operator*(v16, (uint64_t)v17);
LABEL_49:
        *(void *)uint64_t v3 = this;
        *(void *)(v3 + 8) = v8;
        break;
      case 5:
        if (!*(void *)(a2 + 824)) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        uint64_t v29 = a2 + 792;
        this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(a2 + 792);
        if (this)
        {
          uint64_t v30 = boost::container::vector<DSPGraph::CalculationBox::Value,boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>,void>::operator[](v29);
          this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(v30);
LABEL_54:
          uint64_t v31 = this;
        }
        else
        {
          uint64_t v31 = 0;
        }
LABEL_65:
        *(void *)uint64_t v3 = v31;
        *(_DWORD *)(v3 + 8) = 0;
        break;
      case 6:
        if (!*(void *)(a2 + 824)) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        uint64_t v33 = a2 + 792;
        this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(a2 + 792);
        if (this)
        {
          uint64_t v34 = 1;
        }
        else
        {
          uint64_t v36 = boost::container::vector<DSPGraph::CalculationBox::Value,boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>,void>::operator[](v33);
          this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(v36);
          uint64_t v34 = this;
        }
        *(void *)uint64_t v3 = v34;
        *(_DWORD *)(v3 + 8) = 0;
        *(unsigned char *)(v3 + 16) = 1;
        return this;
      case 7:
        if (!*(void *)(a2 + 824)) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(a2 + 792);
        goto LABEL_64;
      case 8:
        if (!*(void *)(a2 + 824)) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        std::string v22 = (_OWORD *)(a2 + 792);
        goto LABEL_68;
      case 9:
        uint64_t v19 = *(void *)(a2 + 824);
        if (!v19) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v19 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        this = DSPGraph::CalculationBox::Value::operator==(a2 + 792, a2 + 808);
        goto LABEL_54;
      case 0xA:
        uint64_t v35 = *(void *)(a2 + 824);
        if (!v35) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v35 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        this = DSPGraph::CalculationBox::Value::operator==(a2 + 792, a2 + 808);
        goto LABEL_64;
      case 0xB:
        uint64_t v15 = *(void *)(a2 + 824);
        if (!v15) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v15 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        this = DSPGraph::CalculationBox::Value::operator<(a2 + 792, a2 + 808);
        goto LABEL_64;
      case 0xC:
        uint64_t v18 = *(void *)(a2 + 824);
        if (!v18) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v18 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        this = DSPGraph::CalculationBox::Value::operator>(a2 + 792, a2 + 808);
        goto LABEL_54;
      case 0xD:
        uint64_t v32 = *(void *)(a2 + 824);
        if (!v32) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v32 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        this = DSPGraph::CalculationBox::Value::operator>(a2 + 792, a2 + 808);
LABEL_64:
        uint64_t v31 = this ^ 1;
        goto LABEL_65;
      case 0xE:
        uint64_t v14 = *(void *)(a2 + 824);
        if (!v14) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v14 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        this = DSPGraph::CalculationBox::Value::operator<(a2 + 792, a2 + 808);
        goto LABEL_54;
      case 0xF:
        uint64_t v21 = *(void *)(a2 + 824);
        if (!v21) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v21 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        unsigned int v10 = (_OWORD *)(a2 + 792);
        double v11 = (_OWORD *)(a2 + 808);
        uint64_t v12 = a2 + 808;
        uint64_t v13 = a2 + 792;
        goto LABEL_34;
      case 0x10:
        uint64_t v9 = *(void *)(a2 + 824);
        if (!v9) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        if (v9 == 1) {
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        }
        unsigned int v10 = (_OWORD *)(a2 + 792);
        double v11 = (_OWORD *)(a2 + 808);
        uint64_t v12 = a2 + 792;
        uint64_t v13 = a2 + 808;
LABEL_34:
        this = DSPGraph::CalculationBox::Value::operator<(v12, v13);
        if (this) {
          std::string v22 = v11;
        }
        else {
          std::string v22 = v10;
        }
LABEL_68:
        *(_OWORD *)uint64_t v3 = *v22;
        break;
      default:
        int v4 = -10863;
        goto LABEL_3;
    }
    *(unsigned char *)(v3 + 16) = 1;
  }
  return this;
}

uint64_t DSPGraph::CalculationBox::Value::operator float<float>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  int v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1EDFA43F8[v1])(&v4, a1);
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator float<float>(void)::{lambda(float)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

uint64_t DSPGraph::CalculationBox::Value::operator*(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v2 == -1 || v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1EDFA4358[2 * v2] + v3))(&v7, a1, a2);
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator*(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 * *a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator+(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 + *a3;
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator float<float>(void)::{lambda(float)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t *a2)
{
  return (float)*a2;
}

uint64_t DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  int v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1EDFA4408[v1])(&v4, a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(void)::{lambda(BOOL)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return *a2 != 0.0;
}

CFTypeID applesauce::CF::convert_as<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  CFTypeID result = CFGetTypeID(a2);
  if (TypeID == result)
  {
    CFTypeID result = (CFTypeID)applesauce::CF::details::CFString_get_value<false>((uint64_t)&v7, a2);
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 24) = v6;
  return result;
}

void *applesauce::CF::details::CFString_get_value<false>(uint64_t a1, CFStringRef theString)
{
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr) {
    return std::string::basic_string[abi:ne180100]<0>((void *)a1, CStringPtr);
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(theString, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((void *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0) {
    long long v7 = (UInt8 *)a1;
  }
  else {
    long long v7 = *(UInt8 **)a1;
  }
  v10.location = 0;
  v10.length = Length;
  return (void *)CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

uint64_t DSPGraph::Box::setPreset(DSPGraph::Box *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_45;
  }
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)cfa, @"version");
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find item");
LABEL_45:
  }
  if (applesauce::CF::convert_to<int,0>(v4))
  {
    uint64_t v5 = 4294956445;
    goto LABEL_18;
  }
  if (!cfa)
  {
    uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
  }
  applesauce::CF::details::find_at_key<std::string,__CFString const* const&>((uint64_t)__p, (CFDictionaryRef)cfa, @"classname");
  char v6 = (const char *)(*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 16))(this);
  long long v7 = v6;
  unsigned __int8 v8 = v29;
  if ((v29 & 0x80u) == 0) {
    size_t v9 = v29;
  }
  else {
    size_t v9 = (size_t)__p[1];
  }
  if (v9 != strlen(v6) || ((v29 & 0x80u) == 0 ? (CFRange v10 = __p) : (CFRange v10 = (void **)__p[0]), memcmp(v10, v7, v9)))
  {
    uint64_t v5 = 4294956445;
    if ((v8 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!cfa)
  {
    uint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
  }
  uint64_t v12 = applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)cfa, @"data");
  if (!v12) {
    goto LABEL_40;
  }
  uint64_t v13 = v12;
  CFRetain(v12);
  CFTypeID v14 = CFGetTypeID(v13);
  if (v14 != CFDataGetTypeID())
  {
    CFRelease(v13);
LABEL_40:
    LOBYTE(theData) = 0;
    char v27 = 0;
    goto LABEL_41;
  }
  CFDataRef theData = (CFDataRef)v13;
  char v27 = 1;
  BytePtr = (unsigned int *)CFDataGetBytePtr((CFDataRef)v13);
  CFIndex Length = CFDataGetLength(theData);
  if (Length >= 1)
  {
    unint64_t v17 = (unint64_t)BytePtr + Length;
    do
    {
      if ((unint64_t)(BytePtr + 1) > v17) {
        break;
      }
      if ((unint64_t)(BytePtr + 2) > v17) {
        break;
      }
      uint64_t v18 = BytePtr + 3;
      if ((unint64_t)(BytePtr + 3) > v17) {
        break;
      }
      unsigned int v19 = BytePtr[2];
      if (v19)
      {
        uint64_t v20 = bswap32(*BytePtr);
        uint64_t v21 = bswap32(BytePtr[1]);
        unsigned int v22 = bswap32(v19);
        while ((unint64_t)(v18 + 1) <= v17)
        {
          BytePtr = v18 + 2;
          if ((unint64_t)(v18 + 2) > v17)
          {
            BytePtr = v18 + 1;
            goto LABEL_37;
          }
          (*(void (**)(DSPGraph::Box *, void, uint64_t, uint64_t, void, float))(*(void *)this + 80))(this, bswap32(*v18), v20, v21, 0, COERCE_FLOAT(bswap32(v18[1])));
          uint64_t v18 = BytePtr;
          if (!--v22) {
            goto LABEL_37;
          }
        }
      }
      BytePtr = v18;
LABEL_37:
      ;
    }
    while ((unint64_t)BytePtr < v17);
  }
LABEL_41:
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theData);
  uint64_t v5 = 0;
  if ((v29 & 0x80) != 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  if (cfa) {
    CFRelease(cfa);
  }
  return v5;
}

void sub_18FEFDF0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  __cxa_free_exception(v17);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18FEFDC80);
}

float DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::setParameter(uint64_t a1, int a2, int a3, float result)
{
  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v6, "");
      DSPGraph::ThrowException(-10878, &v8, 2748, &v7, &v6);
    }
    *(unsigned char *)(a1 + 780) = result != 0.0;
  }
  else
  {
    CFTypeID result = __exp10f(result / 20.0);
    *(float *)(a1 + 776) = result;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 762) || *(unsigned char *)(a1 + 812))
  {
    float v5 = 0.0;
    if (!*(unsigned char *)(a1 + 780)) {
      float v5 = 1.0;
    }
    CFTypeID result = *(float *)(a1 + 776) * v5;
    *(float *)(a1 + 804) = result;
    *(float *)(a1 + 808) = result;
  }
  return result;
}

void sub_18FEFE09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

const char *DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::ClassName()
{
  return "dbgain";
}

uint64_t DSPGraph::Graph::setAUStrip(DSPGraph::Graph *this, CFTypeRef cf)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (!cf)
  {
    cfa[0] = 0;
LABEL_198:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)cfa, cf);
  if (!cfa[0]) {
    goto LABEL_198;
  }
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)cfa[0], @"version");
  if (!v4 || (unint64_t v5 = applesauce::CF::convert_as<int,0>(v4), !HIDWORD(v5)) || v5 == 1)
  {
    CFRetain(cf);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v108, cf);
    if (!v108)
    {
      long long v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v78, "Could not construct");
    }
    if (applesauce::CF::details::has_key<__CFString const* const&>(v108, @"strips"))
    {
      if (!v108)
      {
        std::vector<std::string>::pointer v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v81, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v105, v108, @"strips");
      if (DSPGraph::getLog(void)::onceToken != -1) {
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
      }
      os_signpost_id_t v6 = os_signpost_id_make_with_pointer((os_log_t)DSPGraph::getLog(void)::gLog, this);
      CFArrayRef v7 = v105;
      if (!v105)
      {
LABEL_67:
        uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v24, "Could not construct");
      }
      unint64_t v8 = 0;
      size_t v9 = (void *)((char *)this + 784);
      unint64_t v10 = v6 - 1;
      while (v8 < CFArrayGetCount(v7))
      {
        if (!v105)
        {
          int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v67, "Could not construct");
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)v112, v105, v8);
        if (!*(void *)v112)
        {
          uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v68, "Could not construct");
        }
        if (applesauce::CF::details::has_key<__CFString const* const&>(*(const __CFDictionary **)v112, @"effects"))
        {
          if (!*(void *)v112)
          {
            uint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v69, "Could not construct");
          }
          applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v111, *(CFDictionaryRef *)v112, @"effects");
          CFArrayRef v11 = v111;
          if (!v111)
          {
LABEL_177:
            int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v61, "Could not construct");
          }
          unint64_t v12 = 0;
          while (v12 < CFArrayGetCount(v11))
          {
            if (!v111)
            {
              __int16 v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v62, "Could not construct");
            }
            applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v110, v111, v12);
            if (!v110)
            {
              int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v63, "Could not construct");
            }
            applesauce::CF::details::find_at_key<std::string,__CFString const* const&>((uint64_t)&__p, v110, @"displayname");
            uint64_t v13 = v103;
            unsigned __int8 v14 = v103;
            if ((v103 & 0x80u) != 0) {
              uint64_t v13 = v102;
            }
            if (!v13) {
              __cxa_rethrow();
            }
            uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>(v9, (unsigned __int8 *)&__p);
            if (v15)
            {
              uint64_t v16 = (char *)*((void *)v15 + 5);
              if (v16)
              {
                if (!v110)
                {
                  int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v65, "Could not construct");
                }
                unint64_t v17 = applesauce::CF::details::at_key<__CFString const* const&>(v110, @"aupreset");
                if (!v17)
                {
                  int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v66, "Could not find item");
                }
                uint64_t v18 = v17;
                CFRetain(v17);
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v107, v18);
                if (DSPGraph::getLog(void)::onceToken != -1) {
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                }
                if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  unsigned int v19 = DSPGraph::getLog(void)::gLog;
                  if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                  {
                    uint64_t v20 = v16 + 32;
                    if (v16[55] < 0) {
                      uint64_t v20 = (void *)*v20;
                    }
                    *(_DWORD *)long long buf = 136315138;
                    *(void *)&uint8_t buf[4] = v20;
                    _os_signpost_emit_with_name_impl(&dword_18FEC0000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Box::setPreset", "%s", buf, 0xCu);
                  }
                }
                (*(void (**)(char *, CFTypeRef))(*(void *)v16 + 352))(v16, v107);
                if (DSPGraph::getLog(void)::onceToken != -1) {
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                }
                if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  uint64_t v21 = DSPGraph::getLog(void)::gLog;
                  if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                  {
                    unsigned int v22 = v16 + 32;
                    if (v16[55] < 0) {
                      unsigned int v22 = (void *)*v22;
                    }
                    *(_DWORD *)long long buf = 136315138;
                    *(void *)&uint8_t buf[4] = v22;
                    _os_signpost_emit_with_name_impl(&dword_18FEC0000, v21, OS_SIGNPOST_INTERVAL_END, v6, "Box::setPreset", "%s", buf, 0xCu);
                  }
                }
                if (!v110)
                {
                  uint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v64, "Could not construct");
                }
                CFNumberRef v23 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const* const&>(v110);
                if (((unint64_t)v23 & 0xFF00000000) != 0) {
                  (*(void (**)(char *, BOOL))(*(void *)v16 + 56))(v16, v23 != 0);
                }
                if (v107) {
                  CFRelease(v107);
                }
                unsigned __int8 v14 = v103;
              }
            }
            if ((v14 & 0x80) != 0) {
              operator delete(__p);
            }
            if (v110) {
              CFRelease(v110);
            }
            ++v12;
            CFArrayRef v11 = v111;
            if (!v111) {
              goto LABEL_177;
            }
          }
          if (v111) {
            CFRelease(v111);
          }
        }
        if (*(void *)v112) {
          CFRelease(*(CFTypeRef *)v112);
        }
        ++v8;
        CFArrayRef v7 = v105;
        if (!v105) {
          goto LABEL_67;
        }
      }
      if (v105) {
        CFRelease(v105);
      }
    }
    else
    {
      if (!v108)
      {
        uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v82, "Could not construct");
      }
      if (CFDictionaryGetCount(v108))
      {
        uint64_t v25 = 1886548769;
        goto LABEL_74;
      }
    }
    uint64_t v25 = 0;
LABEL_74:
    CFDictionaryRef v26 = v108;
    if (!v108) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v5 != 2)
  {
    uint64_t v25 = 4294956445;
    goto LABEL_76;
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v110, cf);
  if (!v110)
  {
    uint64_t v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v83, "Could not construct");
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&v108, v110, @"strips");
  if (v109)
  {
    CFArrayRef theArray = v108;
    if (v108)
    {
      CFIndex Count = CFArrayGetCount(v108);
      CFDictionaryRef v86 = v108;
      CFIndex v85 = v108 ? CFArrayGetCount(v108) : 0;
      if (Count)
      {
        unint64_t v90 = 0;
        uint64_t v92 = (void *)((char *)this + 784);
        while (1)
        {
          if (theArray == v86 && v90 == v85) {
            goto LABEL_174;
          }
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v107, theArray, v90);
          if (!v107)
          {
            uint64_t v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v80, "Could not construct");
          }
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&v105, (CFDictionaryRef)v107, @"effects");
          if (v106)
          {
            CFArrayRef v28 = v105;
            if (v105)
            {
              CFIndex v96 = CFArrayGetCount(v105);
              CFArrayRef v29 = v105;
              CFIndex v89 = v105 ? CFArrayGetCount(v105) : 0;
              if (v96) {
                break;
              }
            }
          }
LABEL_171:
          std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v105);
          if (v107) {
            CFRelease(v107);
          }
          if (++v90 == Count) {
            goto LABEL_174;
          }
        }
        unint64_t v30 = 0;
        CFArrayRef v93 = v29;
        CFArrayRef v94 = v28;
        while (1)
        {
          if (v28 == v29 && v30 == v89) {
            goto LABEL_171;
          }
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v104, v28, v30);
          if (!v104)
          {
            uint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v76, "Could not construct");
          }
          applesauce::CF::details::find_at_key<std::string,__CFString const* const&>((uint64_t)&__p, (CFDictionaryRef)v104, @"displayname");
          uint64_t v31 = v103;
          if ((v103 & 0x80u) != 0) {
            uint64_t v31 = v102;
          }
          if (!v31) {
            __cxa_rethrow();
          }
          uint64_t v32 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>(v92, (unsigned __int8 *)&__p);
          if (v32)
          {
            uint64_t v33 = (char *)*((void *)v32 + 5);
            if (v33) {
              break;
            }
          }
LABEL_166:
          if ((char)v103 < 0) {
            operator delete(__p);
          }
          CFArrayRef v29 = v93;
          CFArrayRef v28 = v94;
          if (v104) {
            CFRelease(v104);
          }
          if (++v30 == v96) {
            goto LABEL_171;
          }
        }
        CFTypeRef v34 = v104;
        if (v104) {
          CFRetain(v104);
        }
        cfa[1] = v34;
        if (DSPGraph::getLog(void)::onceToken != -1) {
          dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
        }
        os_signpost_id_t spid = os_signpost_id_generate((os_log_t)DSPGraph::getLog(void)::gLog);
        if (!v34)
        {
          std::vector<char> v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v79, "Could not construct");
        }
        uint64_t v35 = applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)v34, @"aupreset");
        if (v35)
        {
          uint64_t v36 = v35;
          CFRetain(v35);
          CFTypeID v37 = CFGetTypeID(v36);
          if (v37 == CFDictionaryGetTypeID())
          {
            *(void *)long long buf = v36;
            _DWORD buf[8] = 1;
            if (DSPGraph::getLog(void)::onceToken != -1) {
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
            }
            if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int v38 = DSPGraph::getLog(void)::gLog;
              if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
              {
                char v39 = v33 + 32;
                if (v33[55] < 0) {
                  char v39 = (void *)*v39;
                }
                *(_DWORD *)int v112 = 136315138;
                *(void *)&v112[4] = v39;
                _os_signpost_emit_with_name_impl(&dword_18FEC0000, v38, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setPreset", "%s", v112, 0xCu);
              }
            }
            (*(void (**)(char *, void))(*(void *)v33 + 352))(v33, *(void *)buf);
            if (DSPGraph::getLog(void)::onceToken != -1) {
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
            }
            if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int32x4_t v40 = DSPGraph::getLog(void)::gLog;
              if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
              {
                uint64_t v41 = v33 + 32;
                if (v33[55] < 0) {
                  uint64_t v41 = (void *)*v41;
                }
                *(_DWORD *)int v112 = 136315138;
                *(void *)&v112[4] = v41;
                _os_signpost_emit_with_name_impl(&dword_18FEC0000, v40, OS_SIGNPOST_INTERVAL_END, spid, "Box::setPreset", "%s", v112, 0xCu);
              }
            }
            goto LABEL_127;
          }
          CFRelease(v36);
        }
        buf[0] = 0;
        _DWORD buf[8] = 0;
LABEL_127:
        uint32x4_t v42 = (unsigned char *)std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v42, (CFDictionaryRef)v34, @"parameters");
        if (buf[8])
        {
          CFArrayRef v43 = *(const __CFArray **)buf;
          if (*(void *)buf)
          {
            CFIndex v98 = CFArrayGetCount(*(CFArrayRef *)buf);
            CFArrayRef v44 = *(const __CFArray **)buf;
            CFIndex v91 = *(void *)buf ? CFArrayGetCount(*(CFArrayRef *)buf) : 0;
            if (v98)
            {
              unint64_t v45 = 0;
              unint64_t v99 = spid - 1;
              int v95 = (char **)(v33 + 32);
              while (1)
              {
                if (v43 == v44 && v91 == v45) {
                  goto LABEL_160;
                }
                applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v111, v43, v45);
                if (!v111)
                {
                  uint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v70, "Could not construct");
                }
                *(_DWORD *)int v112 = 0;
                unint64_t v46 = applesauce::CF::at_or<unsigned int,__CFString const* const&>(v111, @"scope", (unsigned int *)v112);
                if (!v111)
                {
                  long long v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v75, "Could not construct");
                }
                *(_DWORD *)int v112 = 0;
                unint64_t v47 = applesauce::CF::at_or<unsigned int,__CFString const* const&>(v111, @"element", (unsigned int *)v112);
                if (!v111)
                {
                  long long v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v74, "Could not construct");
                }
                CFTypeRef v48 = v34;
                CFNumberRef v49 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(v111, @"parameterID");
                if (!v49) {
                  break;
                }
                CFNumberRef v50 = applesauce::CF::convert_as<unsigned int,0>(v49);
                if (!((unint64_t)v50 >> 32))
                {
                  uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v73, "Could not convert");
                  goto LABEL_192;
                }
                CFNumberRef v51 = v50;
                if (!v111)
                {
                  long long v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v72, "Could not construct");
                }
                __int16 v52 = applesauce::CF::details::at_key<__CFString const* const&>(v111, @"value");
                if (!v52)
                {
                  long long v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v71, "Could not find item");
                }
                float v53 = applesauce::CF::convert_to<float,0>((uint64_t)v52);
                if (DSPGraph::getLog(void)::onceToken != -1) {
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                }
                if (v99 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  __int16 v54 = DSPGraph::getLog(void)::gLog;
                  if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                  {
                    double v55 = v33 + 32;
                    if (v33[55] < 0) {
                      double v55 = *v95;
                    }
                    *(_DWORD *)int v112 = 136315138;
                    *(void *)&v112[4] = v55;
                    _os_signpost_emit_with_name_impl(&dword_18FEC0000, v54, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setParameter", "%s", v112, 0xCu);
                  }
                }
                (*(void (**)(char *, const __CFNumber *, unint64_t, unint64_t, void, float))(*(void *)v33 + 80))(v33, v51, v46, v47, 0, v53);
                CFTypeRef v34 = v48;
                if (DSPGraph::getLog(void)::onceToken != -1) {
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                }
                if (v99 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  __int16 v56 = DSPGraph::getLog(void)::gLog;
                  if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                  {
                    double v57 = v33 + 32;
                    if (v33[55] < 0) {
                      double v57 = *v95;
                    }
                    *(_DWORD *)int v112 = 136315138;
                    *(void *)&v112[4] = v57;
                    _os_signpost_emit_with_name_impl(&dword_18FEC0000, v56, OS_SIGNPOST_INTERVAL_END, spid, "Box::setParameter", "%s", v112, 0xCu);
                  }
                }
                if (v111) {
                  CFRelease(v111);
                }
                if (v98 == ++v45) {
                  goto LABEL_160;
                }
              }
              uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v73, "Could not find item");
LABEL_192:
            }
          }
        }
LABEL_160:
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        CFNumberRef v58 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const* const&>((const __CFDictionary *)v34);
        if (((unint64_t)v58 & 0xFF00000000) != 0) {
          (*(void (**)(char *, BOOL))(*(void *)v33 + 56))(v33, v58 != 0);
        }
        CFBooleanRef v59 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)v34, @"bypass");
        if (v59)
        {
          unsigned __int16 v60 = applesauce::CF::convert_as<BOOL,0>(v59);
          if (v60 >= 0x100u) {
            (*(void (**)(char *, BOOL))(*(void *)v33 + 56))(v33, v60 != 0);
          }
        }
        CFRelease(v34);
        goto LABEL_166;
      }
    }
  }
  else
  {
    if (!v110)
    {
      BOOL v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Could not construct");
    }
    if (CFDictionaryGetCount(v110))
    {
      uint64_t v25 = 1886548769;
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v108);
      goto LABEL_175;
    }
  }
LABEL_174:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v108);
  uint64_t v25 = 0;
LABEL_175:
  CFDictionaryRef v26 = v110;
  if (v110) {
LABEL_75:
  }
    CFRelease(v26);
LABEL_76:
  if (cfa[0]) {
    CFRelease(cfa[0]);
  }
  return v25;
}

void sub_18FEFF30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a2)
  {
    __cxa_free_exception(v41);
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v42 - 176);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18FEFED10);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_18FEFF798(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_18FEFFD68(_Unwind_Exception *a1)
{
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v3 - 120));
  applesauce::CF::StringRef::~StringRef((const void **)(v3 - 112));

  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_18FEFFF84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void AudioComponentRegistrationInfo::~AudioComponentRegistrationInfo(AudioComponentRegistrationInfo *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
  CFTypeID v3 = (const void *)*((void *)this + 6);
  if (v3) {
    CFRelease(v3);
  }
  CFNumberRef v4 = (const void *)*((void *)this + 5);
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (const void *)*((void *)this + 3);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t AudioComponentRegistrationInfo::AudioComponentRegistrationInfo(uint64_t a1, uint64_t a2, int a3, CFTypeRef *a4, int a5, const void **a6, const void **a7, const void **a8)
{
  int v13 = *(_DWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 20) = a3;
  CFTypeRef v14 = *a4;
  if (*a4) {
    CFRetain(*a4);
  }
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = a5;
  uint64_t v15 = *a6;
  if (v15) {
    CFRetain(v15);
  }
  *(void *)(a1 + 40) = v15;
  uint64_t v16 = *a7;
  if (v16) {
    CFRetain(v16);
  }
  *(void *)(a1 + 48) = v16;
  unint64_t v17 = *a8;
  if (v17) {
    CFRetain(v17);
  }
  *(void *)(a1 + 56) = v17;
  return a1;
}

void APComponent_NSExtension::create_shared(APComponent_NSExtension *this, const AudioComponentRegistrationInfo *a2, NSString *a3, NSExtension *a4)
{
  a3;
  unint64_t v5 = a4;
  operator new();
}

void sub_18FF001F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);

  _Unwind_Resume(a1);
}

void APComponent_NSExtension::APComponent_NSExtension(APComponent_NSExtension *this, const AudioComponentRegistrationInfo *a2, NSString *a3, NSExtension *a4)
{
  char v14[4] = *MEMORY[0x1E4F143B8];
  CFArrayRef v7 = a3;
  unint64_t v8 = a4;
  *(void *)this = &unk_1EDF93900;
  unsigned int v9 = *((_DWORD *)a2 + 5);
  int v10 = *((_DWORD *)a2 + 8);
  v14[0] = &unk_1EDFA09F0;
  v14[1] = this;
  uint64_t v14[3] = v14;
  APComponent::APComponent((uint64_t)this, 3, 70, (uint64_t)a2, v9, (CFTypeRef *)a2 + 3, v10, (uint64_t)v14);
  std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__value_func[abi:ne180100](v14);
  *(void *)this = &unk_1EDF93900;
  uint64_t v11 = v7;
  *((void *)this + 20) = v11;
  unint64_t v12 = v8;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = v12;
  uint64_t v13 = *((void *)a2 + 5);
  if (v13) {
    CFRetain(*((CFTypeRef *)a2 + 5));
  }
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = v13;
  APComponent::setTags((APComponent *)this, *((CFTypeRef *)a2 + 7));
}

void sub_18FF00398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void APComponent::setTags(APComponent *this, CFTypeRef cf)
{
  uint64_t v2 = (const void *)*((void *)this + 15);
  *((void *)this + 15) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2) {
    CFRelease(v2);
  }
}

applesauce::CF::DictionaryRef *applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(applesauce::CF::DictionaryRef *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (CFArrayRef v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  CFRetain(ValueAtIndex);
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v7);
}

void sub_18FF004B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *applesauce::CF::details::find_at_key<std::string,__CFString const* const&>(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  CFStringRef v4 = (const __CFString *)applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<std::string,0>(a1, v4);
}

void sub_18FF0054C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *applesauce::CF::details::at_key<__CFString const* const&>(CFDictionaryRef theDict, const void *a2)
{
  CFTypeID result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryGetValue(theDict, a2);
    }
  }
  return result;
}

void *applesauce::CF::convert_to<std::string,0>(uint64_t a1, const __CFString *a2)
{
  if (!a2 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(a2, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a1, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a2);
    CFIndex maxBufLen = 0;
    v12.location = 0;
    v12.length = Length;
    CFStringGetBytes(a2, v12, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a1, maxBufLen, 0);
    if (*(char *)(a1 + 23) >= 0) {
      unint64_t v8 = (UInt8 *)a1;
    }
    else {
      unint64_t v8 = *(UInt8 **)a1;
    }
    v13.location = 0;
    v13.length = Length;
    return (void *)CFStringGetBytes(a2, v13, 0x8000100u, 0, 0, v8, maxBufLen, &maxBufLen);
  }
}

void sub_18FF006D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    os_signpost_id_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    os_signpost_id_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const* const&>(const __CFDictionary *a1)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, @"bypass");
  if (result)
  {
    return applesauce::CF::convert_as<unsigned int,0>(result);
  }
  return result;
}

uint64_t DSPGraph::AUBox::setPreset(DSPGraph::AUBox *this, const __CFDictionary *a2)
{
  CFDictionaryRef v3 = a2;
  return (*(uint64_t (**)(DSPGraph::AUBox *, void, void, void, uint64_t, const __CFDictionary **))(*(void *)this + 312))(this, 0, 0, 0, 8, &v3);
}

uint64_t DSPGraph::AUBox::bypass(DSPGraph::AUBox *this, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, void, void, uint64_t, int *))(*(void *)this + 312))(this, 21, 0, 0, 4, &v3);
}

BOOL applesauce::CF::details::has_key<__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  return a2 && CFDictionaryContainsKey(a1, a2) != 0;
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>(applesauce::CF::ArrayRef *a1, CFDictionaryRef theDict, const void *a3)
{
  CFStringRef v4 = applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  unint64_t v5 = v4;
  CFRetain(v4);
  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_18FF00954(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<int,0>(const __CFNumber *a1)
{
  unint64_t result = applesauce::CF::convert_as<int,0>(a1);
  if (!HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return result;
}

void sub_18FF009C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_as<int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        uint64_t v11 = Value != 0;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        int v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0) {
          int v13 = 0;
        }
        uint64_t v8 = v11 << 32;
        LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
        int v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9) {
          uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        }
        else {
          uint64_t v5 = 0;
        }
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        uint64_t v14 = (int)*(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        uint64_t v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        uint64_t v14 = (int)valuePtr;
LABEL_35:
        uint64_t v5 = v14 | 0x100000000;
        if (!v10) {
          uint64_t v5 = 0;
        }
LABEL_37:
        int v7 = v5 & 0xFFFFFF00;
        uint64_t v8 = v5 & 0x100000000;
        break;
      default:
        int v7 = 0;
        uint64_t v8 = 0;
        LOBYTE(v5) = 0;
        break;
    }
    uint64_t v6 = v8 | v7 & 0xFFFFFF00;
    uint64_t v5 = v5;
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      uint64_t v5 = CFBooleanGetValue(a1);
      uint64_t v6 = 0x100000000;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
  }
  return v6 | v5;
}

void sub_18FF00D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t CAFormatter::Init(CAFormatter *this, const char *__s)
{
  size_t v4 = strlen(__s) + 1;
  uint64_t v5 = (char *)malloc_type_malloc(v4, 0x409FA1A0uLL);
  *(void *)this = v5;
  return strlcpy(v5, __s, v4);
}

uint64_t AudioConverterNewWithOptions(AudioStreamBasicDescription *a1, AudioStreamBasicDescription *a2, uint64_t a3, void *a4)
{
  int v8 = forcedOutOfProcess(a1, a2);
  v19[0] = 0;
  int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", v19);
  if (!v19[0] || AppBooleanValue == 0)
  {
    uint64_t v11 = 0;
  }
  else
  {
    if (v8) {
      uint64_t v12 = 2758;
    }
    else {
      uint64_t v12 = 2742;
    }
    kdebug_trace();
    uint64_t v11 = v12 | 0x100000000;
  }
  v24[0] = 0;
  int v13 = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", v24);
  BOOL v14 = 0;
  if (v24[0] && v13)
  {
    if (v8) {
      int v15 = 2752;
    }
    else {
      int v15 = 2736;
    }
    int v25 = v15;
    long long v26 = 0u;
    long long v27 = 0u;
    kdebug_trace();
    int v20 = v15;
    long long v21 = 0u;
    long long v22 = 0u;
    v24[0] = 0;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v24);
    BOOL v14 = 1;
  }
  v19[0] = v14;
  BOOL v23 = v14;
  if (v8) {
    uint64_t v16 = (void (*)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *))newAudioConverterOOP;
  }
  else {
    uint64_t v16 = newAudioConverter;
  }
  uint64_t v17 = AudioConverterNewInternal((long long *)a1, (long long *)a2, 0, 0, a4, v16, a3, v11);
  if (v23) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v19);
  }
  return v17;
}

void sub_18FF00F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioConverterNewInternal(long long *a1, long long *a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, unsigned int a3, const AudioClassDescription *a4), uint64_t a7, uint64_t a8)
{
  v76[19] = *MEMORY[0x1E4F143B8];
  if (gWorkgroundInitOnce != -1) {
    dispatch_once(&gWorkgroundInitOnce, &__block_literal_global_16);
  }
  uint64_t v16 = ((uint64_t (*)(long long *, long long *, uint64_t, uint64_t, uint64_t))a6)(a1, a2, a3, a4, a7);
  LOBYTE(v53[0]) = 0;
  int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", (BOOL *)v53);
  if (LOBYTE(v53[0])) {
    int v18 = AppBooleanValue;
  }
  else {
    int v18 = 0;
  }
  if (v18 == 1)
  {
    *(unsigned char *)(v16 + 13) = 1;
    *(_DWORD *)(v16 + 24) = a8;
    *(unsigned char *)(v16 + 28) = BYTE4(a8);
  }
  *a5 = *(unsigned int *)(v16 + 8);
  memset(v61, 0, 40);
  memset(v60, 0, 40);
  int v59 = 40;
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t, int *, _OWORD *))(*(void *)v16 + 48))(v16, 1633904996, &v59, v61);
  if (v19)
  {
    AudioConverterLog();
    int v20 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioConverter.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 981;
      __int16 v63 = 1024;
      LODWORD(v64) = v19;
      _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to determine actual converter source format (err:%d)", buf, 0x18u);
    }
    long long v21 = a1[1];
    v61[0] = *a1;
    v61[1] = v21;
    *(void *)&_DWORD v61[2] = *((void *)a1 + 4);
  }
  int v59 = 40;
  int v22 = (*(uint64_t (**)(uint64_t, uint64_t, int *, _OWORD *))(*(void *)v16 + 48))(v16, 1633906532, &v59, v60);
  if (v22)
  {
    AudioConverterLog();
    BOOL v23 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioConverter.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 990;
      __int16 v63 = 1024;
      LODWORD(v64) = v22;
      _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to determine actual converter destination format (err:%d)", buf, 0x18u);
    }
    long long v24 = a2[1];
    v60[0] = *a2;
    v60[1] = v24;
    *(void *)&v60[2] = *((void *)a2 + 4);
  }
  long long v25 = a1[1];
  long long v57 = *a1;
  *(_OWORD *)CFNumberRef v58 = v25;
  *(void *)&v58[16] = *((void *)a1 + 4);
  long long v26 = a2[1];
  long long v55 = *a2;
  *(_OWORD *)__int16 v56 = v26;
  *(void *)&v56[16] = *((void *)a2 + 4);
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v54 = 0;
  v51[0] = 0;
  v51[1] = 0;
  uint64_t v52 = 0;
  long long v27 = (void *)MEMORY[0x1E4FBA418];
  if (*(double *)v61 != *(double *)&v57
    || *((void *)&v61[0] + 1) != *((void *)&v57 + 1)
    || LODWORD(v61[1]) != *(_DWORD *)v58
    || *(_OWORD *)((char *)&v61[1] + 4) != *(_OWORD *)&v58[4])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" (actually: ", 12);
    CFArrayRef v28 = __p;
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, v61, v29, v30);
    if (v50 < 0) {
      CFArrayRef v28 = (void **)__p[0];
    }
    size_t v31 = strlen((const char *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v28, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)")", 1);
    if (SHIBYTE(v50) < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)&buf[8]);
    *(_OWORD *)float v53 = *(_OWORD *)__p;
    uint64_t v54 = v50;
    *(void *)long long buf = *v27;
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = v27[3];
    *(void *)&_DWORD buf[8] = MEMORY[0x1E4FBA470] + 16;
    if (v75 < 0) {
      operator delete(*(void **)&v74[2]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FC8840](v76);
  }
  if (*(double *)v60 != *(double *)&v55
    || *((void *)&v60[0] + 1) != *((void *)&v55 + 1)
    || LODWORD(v60[1]) != *(_DWORD *)v56
    || *(_OWORD *)((char *)&v60[1] + 4) != *(_OWORD *)&v56[4])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" (actually: ", 12);
    uint64_t v32 = __p;
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, v60, v33, v34);
    if (v50 < 0) {
      uint64_t v32 = (void **)__p[0];
    }
    size_t v35 = strlen((const char *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v32, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)")", 1);
    if (SHIBYTE(v50) < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)&buf[8]);
    *(_OWORD *)CFNumberRef v51 = *(_OWORD *)__p;
    uint64_t v52 = v50;
    *(void *)long long buf = *v27;
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = v27[3];
    *(void *)&_DWORD buf[8] = MEMORY[0x1E4FBA470] + 16;
    if (v75 < 0) {
      operator delete(*(void **)&v74[2]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FC8840](v76);
  }
  AudioConverterLog();
  uint64_t v36 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    if (a6 == newAudioConverter) {
      char v39 = "in process";
    }
    else {
      char v39 = "out of process";
    }
    int32x4_t v40 = __p;
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v57, v37, v38);
    if (v50 < 0) {
      int32x4_t v40 = (void **)__p[0];
    }
    if (v54 >= 0) {
      CFArrayRef v43 = v53;
    }
    else {
      CFArrayRef v43 = (void **)v53[0];
    }
    CA::StreamDescription::AsString((CA::StreamDescription *)v47, &v55, v41, v42);
    if (v48 >= 0) {
      CFArrayRef v44 = v47;
    }
    else {
      CFArrayRef v44 = (void **)v47[0];
    }
    unint64_t v45 = v51;
    if (v52 < 0) {
      unint64_t v45 = (void **)v51[0];
    }
    *(_DWORD *)long long buf = 136316930;
    *(void *)&uint8_t buf[4] = "AudioConverter.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1010;
    __int16 v63 = 2080;
    uint64_t v64 = v39;
    __int16 v65 = 2048;
    uint64_t v66 = v16;
    __int16 v67 = 2080;
    uint64_t v68 = v40;
    __int16 v69 = 2080;
    uint64_t v70 = v43;
    __int16 v71 = 2080;
    long long v72 = v44;
    __int16 v73 = 2080;
    *(void *)long long v74 = v45;
    _os_log_impl(&dword_18FEC0000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created a new %s converter -> %p, from %s%s to %s%s", buf, 0x4Eu);
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v50) < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[0]);
  }
  return 0;
}

void sub_18FF017A0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,long long a44,long long a45,uint64_t a46,uint64_t a47,long long a48,long long a49,uint64_t a50,uint64_t a51,int buf,int a53,int a54,__int16 a55,__int16 a56,__int16 a57,__int16 a58,int a59,int a60,__int16 a61,int a62,__int16 a63)
{
  if (a2)
  {
    std::ostringstream::~ostringstream((uint64_t)&buf);
    if (a24 < 0) {
      operator delete(__p);
    }
    long long v74 = (int *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v75 = *v74;
      AudioConverterLog();
      uint64_t v76 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (v70 == newAudioConverter) {
          long long v77 = "in process";
        }
        else {
          long long v77 = "out of process";
        }
        long long v78 = *(_OWORD *)(v69 + 16);
        a48 = *(_OWORD *)v69;
        a49 = v78;
        a50 = *(void *)(v69 + 32);
        std::vector<char> v79 = &a35;
        CA::StreamDescription::AsString((CA::StreamDescription *)&a35, &a48, *(double *)&a48, (int16x8_t)v78);
        if (a40 < 0) {
          std::vector<char> v79 = a35;
        }
        long long v80 = *(_OWORD *)(v68 + 16);
        a44 = *(_OWORD *)v68;
        a45 = v80;
        a46 = *(void *)(v68 + 32);
        CA::StreamDescription::AsString((CA::StreamDescription *)&a26, &a44, *(double *)&a44, (int16x8_t)v80);
        if (a31 >= 0) {
          std::vector<std::string>::pointer v81 = &a26;
        }
        else {
          std::vector<std::string>::pointer v81 = a26;
        }
        long long buf = 136316418;
        *(void *)(v71 + 4) = "AudioConverter.cpp";
        a55 = 1024;
        *(_DWORD *)(v71 + 14) = 1020;
        a58 = 2080;
        *(void *)(v71 + 20) = v77;
        a61 = 2080;
        *(void *)(v71 + 30) = v79;
        a64 = 2080;
        a65 = (uint64_t)v81;
        a66 = 1024;
        *(_DWORD *)(v71 + 50) = v75;
        _os_log_impl(&dword_18FEC0000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a new %s converter -> from %s to %s, with status %i", (uint8_t *)&buf, 0x36u);
        if (a31 < 0) {
          operator delete(a26);
        }
        if (a40 < 0) {
          operator delete(a35);
        }
      }
    }
    else
    {
      AudioConverterLog();
      uint64_t v82 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (v70 == newAudioConverter) {
          uint64_t v83 = "in process";
        }
        else {
          uint64_t v83 = "out of process";
        }
        long long v84 = *(_OWORD *)(v69 + 16);
        a48 = *(_OWORD *)v69;
        a49 = v84;
        a50 = *(void *)(v69 + 32);
        CFIndex v85 = &a35;
        CA::StreamDescription::AsString((CA::StreamDescription *)&a35, &a48, *(double *)&a48, (int16x8_t)v84);
        if (a40 < 0) {
          CFIndex v85 = a35;
        }
        long long v86 = *(_OWORD *)(v68 + 16);
        a44 = *(_OWORD *)v68;
        a45 = v86;
        a46 = *(void *)(v68 + 32);
        CA::StreamDescription::AsString((CA::StreamDescription *)&a26, &a44, *(double *)&a44, (int16x8_t)v86);
        if (a31 >= 0) {
          long long v87 = &a26;
        }
        else {
          long long v87 = a26;
        }
        long long buf = 136316162;
        *(void *)(v71 + 4) = "AudioConverter.cpp";
        a55 = 1024;
        *(_DWORD *)(v71 + 14) = 1026;
        a58 = 2080;
        *(void *)(v71 + 20) = v83;
        a61 = 2080;
        *(void *)(v71 + 30) = v85;
        a64 = 2080;
        a65 = (uint64_t)v87;
        _os_log_impl(&dword_18FEC0000, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception when creating new %s converter -> from %s to %s", (uint8_t *)&buf, 0x30u);
        if (a31 < 0) {
          operator delete(a26);
        }
        if (a40 < 0) {
          operator delete(a35);
        }
      }
    }
    __cxa_end_catch();
    if ((v67 & 0xFF00000000) != 0) {
      kdebug_trace();
    }
    *uint64_t v66 = 0;
    JUMPOUT(0x18FF01748);
  }
  _Unwind_Resume(a1);
}

void sub_18FF01B04(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18FF01AFCLL);
  }
  JUMPOUT(0x18FF01848);
}

void sub_18FF01B10(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18FF01AFCLL);
  }
  JUMPOUT(0x18FF0184CLL);
}

void CA::StreamDescription::AsString(CA::StreamDescription *this, void *a2, double a3, int16x8_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v6 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", (uint64_t)this, *((unsigned int *)a2 + 7), *a2);
    return;
  }
  if (v6 != 1819304813) {
    goto LABEL_19;
  }
  if (*((_DWORD *)a2 + 5) != 1) {
    goto LABEL_19;
  }
  unsigned int v7 = *((_DWORD *)a2 + 6);
  if (v7 != *((_DWORD *)a2 + 4)) {
    goto LABEL_19;
  }
  unsigned int v8 = *((_DWORD *)a2 + 8);
  if (v7 < v8 >> 3) {
    goto LABEL_19;
  }
  uint64_t v9 = *((unsigned int *)a2 + 7);
  if (!v9) {
    goto LABEL_19;
  }
  unsigned int v10 = *((_DWORD *)a2 + 3);
  if ((v10 & 0x20) == 0)
  {
    BOOL v15 = v7 == v7 / v9 * v9;
    v7 /= v9;
    if (!v15) {
      goto LABEL_19;
    }
  }
  if ((v10 & 2) != 0 || 8 * v7 != v8) {
    goto LABEL_19;
  }
  if (v10)
  {
    if ((v10 & 0x1F84) == 0)
    {
      if (v7 == 4)
      {
        uint64_t v12 = 1;
        goto LABEL_163;
      }
      BOOL v15 = v7 == 8;
      BOOL v52 = v7 == 8;
      if (v15)
      {
        uint64_t v12 = 4 * v52;
        goto LABEL_163;
      }
    }
LABEL_19:
    uint64_t v13 = *((unsigned int *)a2 + 7);
    double v14 = *(double *)a2;
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v6 == 0;
    }
    if (v15 && v14 == 0.0)
    {
      caulk::make_string((caulk *)"%2u ch, %6.0f Hz", (uint64_t)this, 0, *a2);
      return;
    }
    a4.i32[0] = bswap32(v6);
    *(int8x8_t *)a4.i8 = vzip1_s8(*(int8x8_t *)a4.i8, *(int8x8_t *)&v14);
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    v17.i64[0] = 0x5F0000005FLL;
    v17.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a4.i8, (int8x8_t)0x2E002E002E002ELL);
    *((unsigned char *)&v57.__r_.__value_.__s + 23) = 4;
    LODWORD(v57.__r_.__value_.__l.__data_) = vmovn_s16(a4).u32[0];
    v57.__r_.__value_.__s.__data_[4] = 0;
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v55, v13, *(void *)&v14, &v57, *((unsigned int *)a2 + 3));
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    int v18 = *((_DWORD *)a2 + 2);
    if (v18 <= 1819304812)
    {
      if (v18 != 1634492771 && v18 != 1634497332 && v18 != 1718378851)
      {
LABEL_70:
        caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v57, *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 4), *((unsigned int *)a2 + 5), *((unsigned int *)a2 + 6));
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int16x8_t v30 = &v55;
        }
        else {
          int16x8_t v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v55.__r_.__value_.__l.__size_;
        }
LABEL_62:
        uint64_t v32 = std::string::insert(&v57, 0, (const std::string::value_type *)v30, size);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *((void *)this + 2) = *((void *)&v32->__r_.__value_.__l + 2);
        *(_OWORD *)this = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_65;
        }
        int16x8_t v34 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_64:
        operator delete(v34);
LABEL_65:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        return;
      }
LABEL_45:
      uint64_t v27 = *((unsigned int *)a2 + 3);
      if ((v27 - 1) < 4 || !v27 && (v18 == 1634497332 || v18 == 1936487278 || v18 == 1936487267))
      {
        caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v57, CA::StreamDescription::AsString(void)const::kSourceBits[v27]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFArrayRef v28 = &v57;
        }
        else {
          CFArrayRef v28 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v29 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v29 = v57.__r_.__value_.__l.__size_;
        }
        std::string::append(&v55, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::append(&v55, "from UNKNOWN source bit depth, ", 0x1FuLL);
      }
      caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v57, *((unsigned int *)a2 + 5));
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int16x8_t v30 = &v55;
      }
      else {
        int16x8_t v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v55.__r_.__value_.__l.__size_;
      }
      goto LABEL_62;
    }
    if (v18 == 1936487278 || v18 == 1936487267) {
      goto LABEL_45;
    }
    if (v18 != 1819304813) {
      goto LABEL_70;
    }
    unsigned int v19 = *((_DWORD *)a2 + 3);
    unsigned int v20 = *((_DWORD *)a2 + 6);
    int v21 = v19 & 0x20;
    int v22 = "";
    if (!v20) {
      goto LABEL_37;
    }
    if ((v19 & 0x20) != 0)
    {
      unsigned int v23 = 1;
    }
    else
    {
      unsigned int v23 = *((_DWORD *)a2 + 7);
      if (!v23)
      {
        int v21 = 0;
LABEL_37:
        long long v24 = " signed";
        if ((v19 & 4) == 0) {
          long long v24 = " unsigned";
        }
        if (v19) {
          long long v25 = "float";
        }
        else {
          long long v25 = "integer";
        }
        if (v19) {
          long long v26 = "";
        }
        else {
          long long v26 = v24;
        }
LABEL_102:
        v57.__r_.__value_.__s.__data_[0] = 0;
        if (v21) {
          char v39 = ", deinterleaved";
        }
        else {
          char v39 = "";
        }
        uint64_t v36 = "";
        int32x4_t v40 = "";
        goto LABEL_106;
      }
    }
    int v35 = v20 / v23;
    if (v20 / v23 < 2)
    {
      int16x8_t v38 = " signed";
      if ((v19 & 4) == 0) {
        int16x8_t v38 = " unsigned";
      }
      if (v19) {
        long long v25 = "float";
      }
      else {
        long long v25 = "integer";
      }
      if (v19) {
        long long v26 = "";
      }
      else {
        long long v26 = v38;
      }
      if (v23 > v20) {
        goto LABEL_102;
      }
      int v35 = 1;
      uint64_t v36 = "";
    }
    else
    {
      if ((v19 & 2) != 0) {
        uint64_t v36 = " big-endian";
      }
      else {
        uint64_t v36 = " little-endian";
      }
      double v37 = " unsigned";
      if ((v19 & 4) != 0) {
        double v37 = " signed";
      }
      if (v19) {
        long long v25 = "float";
      }
      else {
        long long v25 = "integer";
      }
      if (v19) {
        long long v26 = "";
      }
      else {
        long long v26 = v37;
      }
    }
    unsigned int v41 = *((_DWORD *)a2 + 7);
    if ((v19 & 0x20) != 0) {
      unsigned int v42 = 1;
    }
    else {
      unsigned int v42 = *((_DWORD *)a2 + 7);
    }
    if (v42) {
      unsigned int v42 = 8 * (v20 / v42);
    }
    if (v42 == *((_DWORD *)a2 + 8))
    {
      v57.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if ((v19 & 8) != 0) {
        CFArrayRef v43 = "";
      }
      else {
        CFArrayRef v43 = "un";
      }
      snprintf((char *)&v57, 0x20uLL, "%spacked in %u bytes", v43, v35);
      unsigned int v20 = *((_DWORD *)a2 + 6);
      unsigned int v19 = *((_DWORD *)a2 + 3);
      if (!v20)
      {
        unsigned int v44 = 0;
        int v21 = *((_DWORD *)a2 + 3) & 0x20;
        goto LABEL_128;
      }
      unsigned int v41 = *((_DWORD *)a2 + 7);
      int v21 = *((_DWORD *)a2 + 3) & 0x20;
    }
    if (v21) {
      unsigned int v44 = 1;
    }
    else {
      unsigned int v44 = v41;
    }
    if (v44) {
      unsigned int v44 = 8 * (v20 / v44);
    }
LABEL_128:
    int v45 = *((_DWORD *)a2 + 8);
    unint64_t v46 = " high-aligned";
    if ((v19 & 0x10) == 0) {
      unint64_t v46 = " low-aligned";
    }
    if ((v45 & 7) == 0 && v44 == v45) {
      int32x4_t v40 = "";
    }
    else {
      int32x4_t v40 = v46;
    }
    if (v21) {
      char v39 = ", deinterleaved";
    }
    else {
      char v39 = "";
    }
    if (v57.__r_.__value_.__s.__data_[0])
    {
      int v22 = ", ";
LABEL_141:
      if (((v19 >> 7) & 0x3F) != 0) {
        snprintf(__str, 0x14uLL, "%u.%u");
      }
      else {
        snprintf(__str, 0x14uLL, "%u");
      }
      caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v54, __str, v36, v26, v25, v22, &v57, v40, v39);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v48 = &v55;
      }
      else {
        char v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v49 = v55.__r_.__value_.__l.__size_;
      }
      uint64_t v50 = std::string::insert(&v54, 0, (const std::string::value_type *)v48, v49);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *((void *)this + 2) = *((void *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)this = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      int16x8_t v34 = (void *)v54.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_106:
    if (*v40) {
      int v22 = ", ";
    }
    goto LABEL_141;
  }
  if ((v10 & 4) == 0) {
    goto LABEL_19;
  }
  int v11 = (v10 >> 7) & 0x3F;
  if (v11 != 24 || v7 != 4)
  {
    if (!v11 && v7 == 4)
    {
      uint64_t v12 = 5;
      goto LABEL_163;
    }
    if (!v11 && v7 == 2)
    {
      uint64_t v12 = 2;
      goto LABEL_163;
    }
    goto LABEL_19;
  }
  uint64_t v12 = 3;
LABEL_163:
  if ((v10 & 0x20) != 0) {
    float v53 = ", deinterleaved";
  }
  else {
    float v53 = ", interleaved";
  }
  if (v9 <= 1) {
    float v53 = "";
  }
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", (uint64_t)this, v9, *a2, *((void *)&off_1E5680550 + v12), v53);
}

void sub_18FF02250(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  int v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      unsigned int v7 = (char *)a2;
    }
    else {
      unsigned int v7 = *(char **)a2;
    }
    if (v6 >= 0) {
      size_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v8 = *(void *)(a2 + 8);
    }
    int v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

uint64_t acv2::AudioConverterV2::getProperty(acv2::AudioConverterV2 *this, unsigned int a2, unsigned int *a3, void *a4)
{
  if (*((unsigned char *)this + 12) || !*((unsigned char *)this + 13))
  {
    v17[0] = 0;
    char v23 = 0;
    if (!a3) {
      goto LABEL_10;
    }
  }
  else
  {
    int v25 = 2738;
    uint64_t v26 = a2;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    kdebug_trace();
    v17[0] = 1;
    int v18 = 2738;
    uint64_t v19 = a2;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    v24[0] = 0;
    char v23 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v24);
    if (!a3)
    {
LABEL_10:
      uint64_t v10 = _os_log_pack_size();
      uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v10 + 88, 16);
      if (message)
      {
        uint64_t v12 = (caulk::concurrent::message *)message;
        *(_WORD *)_os_log_pack_fill() = 0;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v12);
      }
      goto LABEL_14;
    }
  }
  if (a4)
  {
    uint64_t Property = acv2::AudioConverterChain::GetProperty(*((acv2::AudioConverterChain **)this + 4), a2, a3, a4);
    goto LABEL_5;
  }
  uint64_t v13 = _os_log_pack_size();
  uint64_t v14 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v13 + 88, 16);
  if (v14)
  {
    BOOL v15 = (caulk::concurrent::message *)v14;
    int32x4_t v16 = (_DWORD *)_os_log_pack_fill();
    _DWORD *v16 = 67109120;
    v16[1] = a2;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v15);
  }
LABEL_14:
  uint64_t Property = 4294967246;
LABEL_5:
  if (v23) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v17);
  }
  return Property;
}

void sub_18FF024C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::GetProperty(acv2::AudioConverterChain *this, signed int a2, unsigned int *a3, void *a4)
{
  PropertyDelegate = acv2::AudioConverterChain::GetPropertyDelegate(this, a2);
  if (!PropertyDelegate)
  {
    uint64_t v11 = 1886547824;
    if (a2 > 1835626095)
    {
      if (a2 > 1886546284)
      {
        if ((a2 - 1936876385) > 0x10 || ((1 << (a2 - 97)) & 0x18101) == 0)
        {
          if (a2 == 1886546285)
          {
            if (*a3 == 8)
            {
              __src.__begin_ = 0;
              unsigned int v41 = (void *)*((void *)this + 13);
              int32x4_t v40 = (void *)*((void *)this + 14);
              if (v41 != v40)
              {
                char v42 = 0;
                do
                {
                  if ((*(unsigned int (**)(void))(*(void *)*v41 + 120))())
                  {
                    if (v42) {
                      char v42 = 1;
                    }
                    else {
                      char v42 = (*(uint64_t (**)(void))(*(void *)*v41 + 120))();
                    }
                    (*(void (**)(void, std::vector<char> *))(*(void *)*v41 + 128))(*v41, &__src);
                  }
                  ++v41;
                }
                while (v41 != v40);
                if (v42)
                {
                  uint64_t v11 = 0;
                  *a4 = __src.__begin_;
                }
              }
              return v11;
            }
          }
          else
          {
            if (a2 != 1919837298) {
              return v11;
            }
            if (*a3 == 4)
            {
              uint64_t v11 = 0;
              int v13 = *((unsigned __int8 *)this + 528);
              goto LABEL_84;
            }
          }
          return 561211770;
        }
      }
      else
      {
        if (a2 > 1868786719)
        {
          if (a2 != 1868786720)
          {
            if (a2 != 1885627760) {
              return v11;
            }
            if (*a3 == 4)
            {
              uint64_t v11 = 0;
              int v13 = 1;
              goto LABEL_84;
            }
            return 561211770;
          }
          std::vector<char>::value_type __x = 0;
          std::vector<char>::vector(&__src, 0x20uLL, &__x);
          std::vector<char>::pointer begin = __src.__begin_;
          *(void *)__src.__begin_ = 0;
          *((_DWORD *)begin + 2) = 0;
          uint64_t OutputLayout = acv2::AudioConverterChain::GetOutputLayout(this, &__src, &v49);
          goto LABEL_54;
        }
        if (a2 != 1835626096)
        {
          if (a2 != 1835884912) {
            return v11;
          }
          uint64_t v14 = *((void *)this + 53);
          if (!v14)
          {
            uint64_t v11 = 0;
            *a3 = 0;
            return v11;
          }
          int v15 = *((_DWORD *)this + 7) * *((_DWORD *)this + 17);
          if (*a3 != 4 * v15) {
            return 561211770;
          }
          size_t v16 = (4 * v15);
          memset(&__src, 0, sizeof(__src));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__src, *(const void **)(v14 + 176), *(void *)(v14 + 184), (uint64_t)(*(void *)(v14 + 184) - *(void *)(v14 + 176)) >> 2);
          std::vector<char>::pointer v17 = __src.__begin_;
          memcpy(a4, __src.__begin_, v16);
          if (v17) {
            operator delete(v17);
          }
          return 0;
        }
      }
      uint64_t v21 = (OpaqueAudioComponentInstance ***)*((void *)this + 37);
      if (v21 != *((OpaqueAudioComponentInstance ****)this + 38))
      {
        PropertyDelegate = *v21;
        goto LABEL_2;
      }
      return v11;
    }
    if (a2 > 1667850866)
    {
      if (a2 <= 1684632679)
      {
        switch(a2)
        {
          case 1667850867:
            for (uint64_t i = *((void *)this + 14); i != *((void *)this + 13); i -= 8)
            {
              uint64_t v32 = *(void *)(i - 8);
              uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, void *))(*(void *)v32 + 88))(v32, 1667850867, a3, a4);
              if (v11) {
                return v11;
              }
            }
            break;
          case 1668244083:
            double v37 = (void *)*((void *)this + 13);
            int16x8_t v38 = (void *)*((void *)this + 14);
            if (v37 != v38)
            {
              do
              {
                uint64_t v11 = (*(uint64_t (**)(void, uint64_t, unsigned int *, void *))(*(void *)*v37 + 88))(*v37, 1668244083, a3, a4);
                if (v11) {
                  break;
                }
                ++v37;
              }
              while (v37 != v38);
              return v11;
            }
            break;
          case 1684171124:
            if (*a3 == 4)
            {
              uint64_t v12 = *((void *)this + 55);
              if (v12)
              {
                uint64_t v11 = 0;
                int v13 = *(_DWORD *)(v12 + 168);
LABEL_84:
                *(_DWORD *)a4 = v13;
              }
              return v11;
            }
            return 561211770;
          default:
            return v11;
        }
        return 0;
      }
      if (a2 == 1684632680)
      {
        if (*a3 == 4)
        {
          uint64_t v11 = 0;
          int v13 = *((_DWORD *)this + 108);
          goto LABEL_84;
        }
        return 561211770;
      }
      if (a2 == 1684892024)
      {
        if (*a3 == 4)
        {
          uint64_t v11 = 0;
          int v13 = *((unsigned __int8 *)this + 417);
          goto LABEL_84;
        }
        return 561211770;
      }
      if (a2 != 1768123424) {
        return v11;
      }
      std::vector<char>::value_type __x = 0;
      std::vector<char>::vector(&__src, 0x20uLL, &__x);
      std::vector<char>::pointer v22 = __src.__begin_;
      *(void *)__src.__begin_ = 0;
      *((_DWORD *)v22 + 2) = 0;
      uint64_t OutputLayout = acv2::AudioConverterChain::GetInputLayout(this, &__src, &v49);
LABEL_54:
      uint64_t v11 = OutputLayout;
      int16x8_t v30 = __src.__begin_;
      if (OutputLayout)
      {
        *a3 = 0;
        if (!v30) {
          return v11;
        }
      }
      else
      {
        if (*(_DWORD *)__src.__begin_ == 0x10000)
        {
          uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__src.__begin_ + 1));
          v44.i16[0] = vaddlv_u8(v44);
          __int32 v43 = v44.i32[0];
        }
        else if (*(_DWORD *)__src.__begin_)
        {
          __int32 v43 = (unsigned __int16)*(_DWORD *)__src.__begin_;
        }
        else
        {
          __int32 v43 = *((_DWORD *)__src.__begin_ + 2);
        }
        if (v43)
        {
          if (*a3 >= LODWORD(__src.__end_) - LODWORD(__src.__begin_)) {
            size_t v45 = (LODWORD(__src.__end_) - LODWORD(__src.__begin_));
          }
          else {
            size_t v45 = *a3;
          }
          if (v45) {
            memcpy(a4, __src.__begin_, v45);
          }
        }
        else
        {
          LODWORD(v45) = 0;
        }
        uint64_t v11 = 0;
        *a3 = v45;
      }
      __src.__end_ = v30;
      operator delete(v30);
      return v11;
    }
    if (a2 <= 1633906531)
    {
      if (a2 == 1633903204)
      {
        uint64_t v39 = *((void *)this + 43);
        if (!v39 || !*(unsigned char *)(v39 + 196)) {
          return v11;
        }
        if (*a3 == 4)
        {
          uint64_t v11 = 0;
          int v13 = *((_DWORD *)this + 103);
          goto LABEL_84;
        }
        return 561211770;
      }
      if (a2 != 1633904996) {
        return v11;
      }
      if (*a3 != 40) {
        return 561211770;
      }
      uint64_t v11 = 2003329396;
      long long v24 = (uint64_t *)*((void *)this + 13);
      if (v24 == *((uint64_t **)this + 14)) {
        return v11;
      }
      uint64_t v25 = *v24;
      if (!v25) {
        return v11;
      }
      uint64_t v11 = 0;
      long long v26 = *(_OWORD *)(v25 + 16);
      long long v27 = *(_OWORD *)(v25 + 32);
      uint64_t v28 = *(void *)(v25 + 48);
    }
    else
    {
      if (a2 != 1633906532)
      {
        if (a2 == 1633906803)
        {
          if (*a3 == 8)
          {
            uint64_t v35 = *((void *)this + 13);
            uint64_t v36 = *((void *)this + 14);
            while (1)
            {
              if (v35 == v36)
              {
                uint64_t v11 = 0;
                *a3 = 0;
                *a4 = 0;
                return v11;
              }
              if ((*(uint64_t (**)(void))(**(void **)v35 + 136))()) {
                break;
              }
              v35 += 8;
            }
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 3, MEMORY[0x1E4F1D510]);
            uint64_t v47 = *((void *)this + 13);
            uint64_t v48 = *((void *)this + 14);
            while (v47 != v48)
            {
              (*(void (**)(std::vector<char> *__return_ptr))(**(void **)v47 + 144))(&__src);
              if (__src.__begin_)
              {
                CFArrayAppendValue(Mutable, __src.__begin_);
                if (__src.__begin_) {
                  CFRelease(__src.__begin_);
                }
              }
              v47 += 8;
            }
            uint64_t v11 = 0;
            *a4 = Mutable;
            return v11;
          }
          return 561211770;
        }
        if (a2 != 1667788144) {
          return v11;
        }
        unint64_t v18 = *a3;
        if (v18 == 4 * *((unsigned int *)this + 17))
        {
          if (v18 >= 4)
          {
            uint64_t v19 = 0;
            unint64_t v20 = v18 >> 2;
            do
            {
              uint64_t v11 = 0;
              *((_DWORD *)a4 + v19) = v19;
              ++v19;
            }
            while (v20 != v19);
            return v11;
          }
          return 0;
        }
        return 561211770;
      }
      if (*a3 != 40) {
        return 561211770;
      }
      uint64_t v11 = 2003329396;
      uint64_t v33 = *((void *)this + 14);
      if (*((void *)this + 13) == v33) {
        return v11;
      }
      uint64_t v34 = *(void *)(v33 - 8);
      if (!v34) {
        return v11;
      }
      uint64_t v11 = 0;
      long long v26 = *(_OWORD *)(v34 + 56);
      long long v27 = *(_OWORD *)(v34 + 72);
      uint64_t v28 = *(void *)(v34 + 88);
    }
    a4[4] = v28;
    *(_OWORD *)a4 = v26;
    *((_OWORD *)a4 + 1) = v27;
    return v11;
  }
LABEL_2:
  int v9 = (uint64_t (*)(void))*((void *)*PropertyDelegate + 11);
  return v9();
}

void sub_18FF02C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

OpaqueAudioComponentInstance **acv2::AudioConverterChain::GetPropertyDelegate(acv2::AudioConverterChain *this, signed int a2)
{
  if (HIBYTE(a2) == 94)
  {
    unint64_t result = (OpaqueAudioComponentInstance **)*((void *)this + 43);
    if (result) {
      return result;
    }
  }
  unint64_t result = 0;
  if (a2 > 1868786719)
  {
    if (a2 <= 1936876384)
    {
      if (a2 > 1919116143)
      {
        if (a2 == 1919116144) {
          goto LABEL_54;
        }
        if (a2 == 1919837298) {
          return result;
        }
        int v4 = 1935893603;
        goto LABEL_53;
      }
      if (a2 == 1868786720 || a2 == 1886546285) {
        return result;
      }
      if (a2 != 1886547309) {
        goto LABEL_61;
      }
    }
    else
    {
      if (a2 > 1986360177)
      {
        if (a2 > 2020175986)
        {
          if (a2 == 2020569203)
          {
LABEL_50:
            uint64_t v9 = *((void *)this + 14);
            if (*((void *)this + 13) == v9) {
              return 0;
            }
            int v5 = (char *)(v9 - 8);
            return *(OpaqueAudioComponentInstance ***)v5;
          }
          unsigned __int16 v7 = 28787;
        }
        else
        {
          if (a2 == 1986360178) {
            goto LABEL_54;
          }
          unsigned __int16 v7 = 25203;
        }
        int v8 = v7 | 0x78690000;
LABEL_44:
        if (a2 != v8) {
          goto LABEL_61;
        }
        int v5 = (char *)*((void *)this + 13);
        int v6 = (char *)*((void *)this + 14);
        goto LABEL_46;
      }
      if ((a2 - 1936876385) > 0x10 || ((1 << (a2 - 97)) & 0x18101) == 0)
      {
        int v4 = 1986355826;
        goto LABEL_53;
      }
    }
LABEL_13:
    int v5 = (char *)*((void *)this + 37);
    int v6 = (char *)*((void *)this + 38);
LABEL_46:
    if (v5 == v6) {
      return 0;
    }
    return *(OpaqueAudioComponentInstance ***)v5;
  }
  if (a2 > 1667788143)
  {
    if (a2 <= 1768123423)
    {
      if (a2 <= 1684891490)
      {
        if (a2 == 1667788144)
        {
          int v5 = (char *)*((void *)this + 40);
          uint64_t v10 = (char *)*((void *)this + 41);
          if (v5 != v10)
          {
            uint64_t v11 = v10 - 8;
            if (*((_DWORD *)this + 7) <= *((_DWORD *)this + 17)) {
              int v5 = v11;
            }
            return *(OpaqueAudioComponentInstance ***)v5;
          }
          return 0;
        }
        int v4 = 1668114275;
        goto LABEL_53;
      }
      if (a2 == 1684891491) {
        goto LABEL_54;
      }
      int v4 = 1718383476;
      goto LABEL_53;
    }
    if (a2 <= 1835626095)
    {
      if (a2 == 1768123424) {
        return result;
      }
      int v8 = 1835623027;
      goto LABEL_44;
    }
    if (a2 != 1835626096)
    {
      if (a2 != 1836016243) {
        goto LABEL_61;
      }
      goto LABEL_50;
    }
    goto LABEL_13;
  }
  if (a2 > 1634038641)
  {
    if (a2 > 1651663219)
    {
      if (a2 == 1651663220) {
        goto LABEL_54;
      }
      int v4 = 1667527029;
    }
    else
    {
      if (a2 == 1634038642) {
        goto LABEL_54;
      }
      int v4 = 1634366322;
    }
  }
  else
  {
    if (a2 <= 1634034289)
    {
      if (a2 != 1633904996)
      {
        int v4 = 1633906532;
        goto LABEL_53;
      }
LABEL_54:
      int v5 = (char *)this + 344;
      return *(OpaqueAudioComponentInstance ***)v5;
    }
    if (a2 == 1634034290) {
      goto LABEL_54;
    }
    int v4 = 1634034540;
  }
LABEL_53:
  if (a2 == v4) {
    goto LABEL_54;
  }
LABEL_61:
  unint64_t result = (OpaqueAudioComponentInstance **)*((void *)this + 43);
  if (result)
  {
    if (acv2::CodecConverter::ConverterSupportsProperty(result, a2)) {
      goto LABEL_54;
    }
    return 0;
  }
  return result;
}

void AudioConverterLog(void)
{
  {
    AudioConverterLog(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", "AudioConverter");
  }
}

uint64_t forcedOutOfProcess(AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID = a1->mFormatID;
  BOOL v5 = mFormatID == 1634754915 || mFormatID == 1902211171 || mFormatID == 1885433955;
  if (!v5
    || ((AudioFormatID v6 = a2->mFormatID, v6 != 1718382635) ? (v7 = v6 == 1885564203) : (v7 = 1),
        !v7 ? (BOOL v8 = v6 == 1819304813) : (BOOL v8 = 1),
        !v8))
  {
    unint64_t ForcedInstantiationMode = getForcedInstantiationMode(a1);
    if (!HIDWORD(ForcedInstantiationMode))
    {
      AudioFormatID v11 = a1->mFormatID;
      BOOL v12 = v11 == 1819304813 || v11 == 1885564203;
      if (v12 || !_os_feature_enabled_impl()) {
        return 0;
      }
      else {
        return checkForDecoderExemption(a1->mFormatID) ^ 1;
      }
    }
    return ForcedInstantiationMode == 1;
  }
  if (_os_feature_enabled_impl()) {
    uint64_t v9 = checkForDecoderExemption(a1->mFormatID) ^ 1;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t ForcedInstantiationMode = getForcedInstantiationMode(a1);
  if (HIDWORD(ForcedInstantiationMode)) {
    return ForcedInstantiationMode == 1;
  }
  return v9;
}

uint64_t getForcedInstantiationMode(AudioStreamBasicDescription *a1)
{
  if (PlatformUtilities::IsInternalBuild((PlatformUtilities *)a1))
  {
    uint64_t v2 = getenv("CoreAudio_loadAudioConverterOutOfProcess");
    if (v2)
    {
      std::string::basic_string[abi:ne180100]<0>(&task_info_outCnt, v2);
      uint64_t v3 = HIBYTE(task_info_outCnt.val[5]);
      if ((task_info_outCnt.val[5] & 0x80000000) != 0) {
        uint64_t v3 = *(void *)&task_info_outCnt.val[2];
      }
      if (v3 == 2)
      {
        p_audit_token_t task_info_outCnt = *(audit_token_t **)task_info_outCnt.val;
        if ((task_info_outCnt.val[5] & 0x80000000) == 0) {
          p_audit_token_t task_info_outCnt = &task_info_outCnt;
        }
        if (LOWORD(p_task_info_outCnt->val[0]) == 20302)
        {
LABEL_10:
          uint64_t v5 = 0;
          if (SHIBYTE(task_info_outCnt.val[5]) < 0) {
            goto LABEL_39;
          }
          goto LABEL_40;
        }
      }
      else if (v3 == 1)
      {
        int v4 = *(audit_token_t **)task_info_outCnt.val;
        if ((task_info_outCnt.val[5] & 0x80000000) == 0) {
          int v4 = &task_info_outCnt;
        }
        if (LOBYTE(v4->val[0]) == 48) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = 1;
      if (SHIBYTE(task_info_outCnt.val[5]) < 0) {
LABEL_39:
      }
        operator delete(*(void **)task_info_outCnt.val);
LABEL_40:
      uint64_t v22 = 0x100000000;
      return v5 | v22;
    }
  }
  AudioFormatID mFormatID = a1->mFormatID;
  BOOL v7 = mFormatID == 1819304813 || mFormatID == 1885564203;
  BOOL v8 = (task_name_t *)MEMORY[0x1E4F14960];
  if (!v7)
  {
    task_info_outCnt.val[0] = 8;
    if (task_info(*MEMORY[0x1E4F14960], 0xFu, (task_info_t)&v25, task_info_outCnt.val)) {
      goto LABEL_45;
    }
    audit_token_t task_info_outCnt = v25;
    int v15 = SecTaskCreateWithAuditToken(0, &task_info_outCnt);
    if (v15)
    {
      size_t v16 = v15;
      CFBooleanRef v17 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v15, @"com.apple.coreaudio.LoadDecodersInProcess", 0);
      if (v17)
      {
        CFBooleanRef v18 = v17;
        CFTypeID v19 = CFGetTypeID(v17);
        if (v19 == CFBooleanGetTypeID())
        {
          int Value = CFBooleanGetValue(v18);
          CFRelease(v18);
          CFRelease(v16);
          if (Value) {
            goto LABEL_28;
          }
          goto LABEL_17;
        }
        CFRelease(v18);
      }
      CFRelease(v16);
    }
  }
LABEL_17:
  task_info_outCnt.val[0] = 8;
  if (!task_info(*v8, 0xFu, (task_info_t)&v25, task_info_outCnt.val))
  {
    audit_token_t task_info_outCnt = v25;
    uint64_t v9 = SecTaskCreateWithAuditToken(0, &task_info_outCnt);
    if (!v9) {
      goto LABEL_31;
    }
    uint64_t v10 = v9;
    CFBooleanRef v11 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v9, @"com.apple.coreaudio.LoadConvertersInProcess", 0);
    if (v11)
    {
      CFBooleanRef v12 = v11;
      CFTypeID v13 = CFGetTypeID(v11);
      if (v13 == CFBooleanGetTypeID())
      {
        int v14 = CFBooleanGetValue(v12);
        CFRelease(v12);
        CFRelease(v10);
        if (v14)
        {
LABEL_28:
          uint64_t v5 = 0;
          goto LABEL_40;
        }
LABEL_31:
        if (!PlatformUtilities::IsInternalBuild(v9)
          || (LOBYTE(task_info_outCnt.val[0]) = 0,
              unsigned int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"loadAudioConverterOutOfProcess", @"com.apple.coreaudio", (BOOL *)&task_info_outCnt), !LOBYTE(task_info_outCnt.val[0])))
        {
          uint64_t v22 = 0;
          uint64_t v5 = 0;
          return v5 | v22;
        }
        uint64_t v5 = AppBooleanValue;
        goto LABEL_40;
      }
      CFRelease(v12);
    }
    CFRelease(v10);
    goto LABEL_31;
  }
  _os_assert_log();
  _os_crash();
  __break(1u);
LABEL_45:
  _os_assert_log();
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void newAudioConverter(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, unsigned int a3, const AudioClassDescription *a4)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18FF03CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  MEMORY[0x192FC8940](v44, 0x1080C4066A550C5);
  std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100](v43, 0);
  AudioConverterAPI::~AudioConverterAPI(v42);
  MEMORY[0x192FC8940](v42, 0x10A1C404B08E27ELL);
  _Unwind_Resume(a1);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v4 = __n;
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
  std::vector<char>::pointer end = this->__end_;
  BOOL v7 = &end[v4];
  do
  {
    *end++ = *__x;
    --v4;
  }
  while (v4);
  this->__end_ = v7;
  return this;
}

void sub_18FF03F14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

acv2::AudioConverterChain *std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100](acv2::AudioConverterChain **a1, acv2::AudioConverterChain *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    acv2::AudioConverterChain::~AudioConverterChain(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x192FC8510](v20, a1);
  if (v20[0])
  {
    AudioFormatID v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_23;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    int64_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      CFBooleanRef v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96))(v7, v17, v16);
      if (v22 < 0) {
        operator delete(__b.__locale_);
      }
      if (v18 != v16) {
        goto LABEL_23;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x192FC8520](v20);
  return a1;
}

void sub_18FF04200(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FC8520](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x18FF041DCLL);
}

void sub_18FF0426C(_Unwind_Exception *a1)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_18FF043F0(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x192FC8840](v1);
  _Unwind_Resume(a1);
}

void *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(void *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  int v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a2 + 88);
    unint64_t v6 = *(void *)(a2 + 48);
    if (v5 < v6)
    {
      *(void *)(a2 + 88) = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      size_t v4 = 0;
      *((unsigned char *)__dst + 23) = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (const void **)(a2 + 16);
    unint64_t v5 = *(void *)(a2 + 32);
  }
  int v8 = *v7;
  size_t v4 = v5 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    void *v2 = v11;
    uint64_t v2 = v11;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    if (!v4) {
      goto LABEL_16;
    }
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((unsigned char *)v2 + v4) = 0;
  return __dst;
}

void acv2::AudioConverterChain::~AudioConverterChain(acv2::AudioConverterChain *this)
{
  uint64_t v2 = (void *)*((void *)this + 63);
  if (v2)
  {
    *((void *)this + 64) = v2;
    operator delete(v2);
  }
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 61, 0);
  int v3 = (void *)*((void *)this + 47);
  if (v3)
  {
    *((void *)this + 48) = v3;
    operator delete(v3);
  }
  size_t v4 = (void *)*((void *)this + 44);
  if (v4)
  {
    *((void *)this + 45) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 40);
  if (v5)
  {
    *((void *)this + 41) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 37);
  if (v6)
  {
    *((void *)this + 38) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void **)((char *)this + 272);
  std::vector<std::unique_ptr<ACOutputBuffer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((unsigned char *)this + 232)) {
    ACAudioSpan::~ACAudioSpan((std::pmr **)this + 16);
  }
  uint64_t v7 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

const std::__fs::filesystem::path **std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](const std::__fs::filesystem::path **result, const std::__fs::filesystem::path *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::string::size_type size = (OpaqueAudioFileID *)v2[4].__pn_.__r_.__value_.__l.__size_;
    if (size)
    {
      AudioFileClose(size);
      size_t v4 = (OpaqueExtAudioFile *)v2[4].__pn_.__r_.__value_.__r.__words[2];
      if (v4) {
        ExtAudioFileDispose(v4);
      }
      if (!v2[5].__pn_.__r_.__value_.__r.__words[0])
      {
        std::__fs::filesystem::__remove(v2, 0);
        AudioConverterLog();
        unint64_t v5 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_INFO))
        {
          unint64_t v6 = v2;
          if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
            unint64_t v6 = (const std::__fs::filesystem::path *)v2->__pn_.__r_.__value_.__r.__words[0];
          }
          int v8 = 136315650;
          uint64_t v9 = "AudioConverterCapturer.cpp";
          __int16 v10 = 1024;
          int v11 = 86;
          __int16 v12 = 2080;
          uint64_t v13 = v6;
          _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d delete empty capture file %s", (uint8_t *)&v8, 0x1Cu);
        }
      }
    }
    std::string::size_type v7 = v2[6].__pn_.__r_.__value_.__l.__size_;
    v2[6].__pn_.__r_.__value_.__l.__size_ = 0;
    if (v7) {
      (*(void (**)(std::string::size_type))(*(void *)v7 + 8))(v7);
    }
    std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v2[5].__pn_.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v2->__pn_.__r_.__value_.__l.__data_);
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void sub_18FF04748(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18FF04604);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<ACOutputBuffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    size_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          std::default_delete<ACOutputBuffer>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t acv2::AudioConverterBase::HasPrimeInfo(acv2::AudioConverterBase *this)
{
  return 0;
}

uint64_t acv2::CBRConverter::GetProperty(acv2::CBRConverter *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4 = 1886547824;
  if (a2 > 1836016242)
  {
    if (a2 > 2020175986)
    {
      if (a2 == 2020175987)
      {
        unsigned int v5 = *((_DWORD *)this + 8);
        goto LABEL_18;
      }
      if (a2 == 2020569203)
      {
        unsigned int v5 = *((_DWORD *)this + 18);
        goto LABEL_18;
      }
    }
    else
    {
      if (a2 == 1836016243)
      {
        unsigned int v5 = *((_DWORD *)this + 41);
        goto LABEL_18;
      }
      if (a2 == 2020172403)
      {
        unsigned int v5 = -1;
LABEL_18:
        uint64_t v4 = 0;
        *a4 = v5;
        return v4;
      }
    }
    return v4;
  }
  switch(a2)
  {
    case 1667850867:
      unsigned int v6 = *a4;
      int v7 = *((_DWORD *)this + 40);
      unsigned int v8 = *((_DWORD *)this + 41);
LABEL_17:
      unsigned int v5 = v7 * v6 / v8;
      goto LABEL_18;
    case 1668244083:
      unsigned int v6 = *a4;
      unsigned int v8 = *((_DWORD *)this + 40);
      int v7 = *((_DWORD *)this + 41);
      goto LABEL_17;
    case 1835623027:
      unsigned int v5 = *((_DWORD *)this + 40);
      goto LABEL_18;
  }
  return v4;
}

uint64_t acv2::SampleRateConverter::GetProperty(acv2::SampleRateConverter *this, int a2, unsigned int *a3, double *a4)
{
  uint64_t result = 1886547824;
  if (a2 > 1936876399)
  {
    if (a2 > 2020175986)
    {
      if (a2 == 2020175987)
      {
        if (*a3 == 4)
        {
          uint64_t result = 0;
          int v11 = *((_DWORD *)this + 8);
          goto LABEL_36;
        }
        return 561211770;
      }
      if (a2 != 2020569203) {
        return result;
      }
      if (*a3 != 4) {
        return 561211770;
      }
      uint64_t result = 0;
      int v11 = *((_DWORD *)this + 18);
    }
    else
    {
      if (a2 == 1936876400)
      {
        if (*a3 == 8)
        {
          double v16 = (*(double (**)(void))(**((void **)this + 20) + 56))(*((void *)this + 20));
          uint64_t result = 0;
          *a4 = v16;
          return result;
        }
        return 561211770;
      }
      if (a2 != 1936876401) {
        return result;
      }
      if (*a3 != 4) {
        return 561211770;
      }
      uint64_t result = 0;
      int v11 = *((_DWORD *)this + 69);
    }
LABEL_36:
    *(_DWORD *)a4 = v11;
    return result;
  }
  if (a2 > 1835626095)
  {
    if (a2 == 1835626096)
    {
      if (*a3 != 4) {
        return 561211770;
      }
      int v12 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    }
    else
    {
      if (a2 != 1886547309) {
        return result;
      }
      if (*a3 != 4) {
        return 561211770;
      }
      int v12 = (*(uint64_t (**)(void))(**((void **)this + 20) + 40))(*((void *)this + 20));
    }
    int v11 = v12;
    uint64_t result = 0;
    goto LABEL_36;
  }
  unsigned int v7 = *((_DWORD *)this + 10);
  if (a2 == 1667850867)
  {
    if (*a3 == 4)
    {
      int v13 = *(_DWORD *)a4 % (int)v7;
      if (v13) {
        unsigned int v14 = v7 - v13;
      }
      else {
        unsigned int v14 = 0;
      }
      int v10 = (*(uint64_t (**)(void, void))(**((void **)this + 20) + 80))(*((void *)this + 20), (v14 + *(_DWORD *)a4) / v7);
      goto LABEL_28;
    }
  }
  else
  {
    if (a2 != 1668244083) {
      return result;
    }
    if (*a3 == 4)
    {
      int v8 = *(_DWORD *)a4 % (int)v7;
      if (v8) {
        unsigned int v9 = v7 - v8;
      }
      else {
        unsigned int v9 = 0;
      }
      int v10 = (*(uint64_t (**)(void, void))(**((void **)this + 20) + 88))(*((void *)this + 20), (v9 + *(_DWORD *)a4) / v7);
LABEL_28:
      int v15 = v10;
      uint64_t result = 0;
      int v11 = v15 * v7;
      goto LABEL_36;
    }
  }
  return 561211770;
}

uint64_t acv2::SampleRateConverter::HasPrimeInfo(acv2::SampleRateConverter *this)
{
  return 1;
}

uint64_t acv2::BlockCopyConverter::GetProperty(acv2::BlockCopyConverter *this, int a2, unsigned int *a3, int *a4)
{
  int v5 = 1;
  uint64_t result = 1886547824;
  if (a2 <= 1836016242)
  {
    if (a2 == 1667850867 || a2 == 1668244083) {
      return 0;
    }
    if (a2 != 1835623027) {
      return result;
    }
    goto LABEL_14;
  }
  if (a2 > 2020175986)
  {
    if (a2 == 2020175987)
    {
      int v5 = *((_DWORD *)this + 8);
      goto LABEL_14;
    }
    if (a2 == 2020569203)
    {
      int v5 = *((_DWORD *)this + 18);
      goto LABEL_14;
    }
    return result;
  }
  if (a2 == 1836016243)
  {
LABEL_14:
    *a4 = v5;
    return 0;
  }
  if (a2 == 2020172403)
  {
    int v5 = -1;
    goto LABEL_14;
  }
  return result;
}

uint64_t acv2::Reinterleaver::GetProperty(acv2::Reinterleaver *this, int a2, unsigned int *a3, void *__dst)
{
  if (a2 == 1667788144)
  {
    unsigned int v5 = 4 * *((_DWORD *)this + 21);
    if (a3)
    {
      unsigned int v6 = *a3;
      if (*a3 < v5)
      {
LABEL_6:
        memcpy(__dst, *((const void **)this + 24), v6);
        return 0;
      }
      *a3 = v5;
    }
    unsigned int v6 = v5;
    goto LABEL_6;
  }
  return acv2::CBRConverter::GetProperty(this, a2, a3, (unsigned int *)__dst);
}

uint64_t acv2::SampleRateConverter::CalcPrimeInfo(acv2::SampleRateConverter *this, AudioConverterPrimeInfo *a2)
{
  return (*(uint64_t (**)(void, AudioConverterPrimeInfo *))(**((void **)this + 20) + 24))(*((void *)this + 20), a2);
}

uint64_t acv2::Resampler2Wrapper::GetNumberOfOutputFrames(acv2::Resampler2Wrapper *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 3) + 144))();
}

int32x2_t acv2::Resampler2Wrapper::CalcPrimeInfo(acv2::Resampler2Wrapper *this, AudioConverterPrimeInfo *a2)
{
  int v3 = (double *)**((void **)this + 3);
  (*(void (**)(double *, int32x2_t *))(*(void *)v3 + 16))(v3, &v6);
  v4.i64[0] = a2->leadingFrames;
  v4.i64[1] = HIDWORD(*(unint64_t *)a2);
  int32x2_t result = vadd_s32(v6, vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndpq_f64(vmulq_n_f64(vcvtq_f64_u64(v4), v3[22])))));
  *a2 = (AudioConverterPrimeInfo)result;
  return result;
}

uint64_t Resampler2::GetPrimeInfo(uint64_t this, AudioConverterPrimeInfo *a2)
{
  if ((*(_DWORD *)(this + 120) | 2) == 2)
  {
    double v2 = 0.5;
    if (*(_DWORD *)(this + 116) != 1818848869) {
      double v2 = *(double *)(this + 168) + (double)*(int *)(*(void *)(this + 56) + 20);
    }
    UInt32 v3 = vcvtpd_u64_f64(v2);
  }
  else
  {
    UInt32 v3 = 0;
  }
  a2->leadingFrames = v3;
  a2->trailingFrames = v3;
  return this;
}

uint64_t acv2::Resampler2Wrapper::ProduceOutput(acv2::Resampler2Wrapper *this, ACAudioSpan *a2)
{
  uint64_t v4 = *((void *)this + 1);
  if ((*(unsigned char *)(v4 + 28) & 0x20) != 0) {
    int v5 = 1;
  }
  else {
    int v5 = *(_DWORD *)(v4 + 44);
  }
  unsigned int v51 = v5;
  unsigned int v52 = 1;
  if ((*(unsigned char *)(v4 + 68) & 0x20) == 0) {
    unsigned int v52 = *(_DWORD *)(v4 + 84);
  }
  int v50 = *((_DWORD *)this + 4);
  LOBYTE(v54) = 0;
  BYTE4(v54) = 1;
  if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1))
  {
    int32x2_t v6 = (unsigned int *)(v4 + 168);
    while (1)
    {
      ACBaseAudioSpan::setAfter(v4 + 168, (unsigned int *)a2);
      ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)(v4 + 168), a2);
      unsigned int v7 = *(_DWORD *)(v4 + 172);
      unsigned int v8 = (*(uint64_t (**)(acv2::Resampler2Wrapper *, void))(*(void *)this + 80))(this, v7);
      if (v8 <= 1) {
        LODWORD(v9) = 1;
      }
      else {
        LODWORD(v9) = v8;
      }
      acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)&v57, *(acv2::AudioConverterBase **)(*((void *)this + 1) + 8), *((void *)this + 1), v9);
      BOOL v10 = v59;
      if (v59)
      {
        uint64_t v11 = 0;
        unsigned int v12 = v59 & 0xFFFFFF00;
        goto LABEL_52;
      }
      int v13 = v57;
      unsigned int v56 = 0;
      if (*(_DWORD *)v57 >= v9) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = *(unsigned int *)v57;
      }
      int v15 = (*(uint64_t (**)(void, uint64_t))(***((void ***)this + 3) + 144))(**((void **)this + 3), v9);
      double v16 = (acv2::AudioConverterBase *)*((void *)this + 7);
      if (v16) {
        acv2::AudioConverterBase::writeCapture(v16, v13, v14);
      }
      if (v9 | v15)
      {
        int v17 = 0;
      }
      else
      {
        if (*((unsigned char *)this + 52))
        {
          BOOL v10 = 0;
          unsigned int v12 = 0;
LABEL_21:
          uint64_t v11 = 1;
          goto LABEL_52;
        }
        unsigned int v12 = *((_DWORD *)this + 12);
        if (!v12)
        {
          BOOL v10 = 0;
          goto LABEL_21;
        }
        if (v50 == 2)
        {
          int v17 = Resampler2::PushZeroes(**((Resampler2 ***)this + 3));
        }
        else if (*((_DWORD *)this + 4))
        {
          unint64_t v48 = 0;
          do
            int v17 = Resampler2::PushZeroes(*(Resampler2 **)(*((void *)this + 3) + 8 * v48++));
          while (v48 < *((unsigned int *)this + 4));
        }
        else
        {
          int v17 = 0;
        }
        *((unsigned char *)this + 52) = 1;
      }
      unsigned int v55 = 0;
      if (v9 || v15 || v17)
      {
        if (v50 == 2)
        {
          uint64_t v18 = *((void *)v13 + 2);
          uint64_t v19 = *(void *)(v18 + 16);
          if ((*(unsigned char *)(v4 + 28) & 0x20) != 0) {
            uint64_t v20 = *(void *)(v18 + 32);
          }
          else {
            uint64_t v20 = v19 + 4;
          }
          uint64_t v29 = *(void *)(v4 + 184);
          uint64_t v30 = *(void *)(v29 + 16);
          if ((*(unsigned char *)(v4 + 68) & 0x20) != 0) {
            uint64_t v31 = *(void *)(v29 + 32);
          }
          else {
            uint64_t v31 = v30 + 4;
          }
          unsigned int v55 = v9;
          unsigned int v56 = v7;
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, unsigned int *, void, void))(***((void ***)this + 3) + 32))(**((void **)this + 3), v19, v20, v30, v31, &v55, &v56, v51, v52);
        }
        else if (*((_DWORD *)this + 4))
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          uint64_t v23 = 16;
          do
          {
            uint64_t v24 = *((void *)v13 + 2);
            if ((*(unsigned char *)(v4 + 28) & 0x20) != 0) {
              uint64_t v25 = *(void *)(v24 + v23);
            }
            else {
              uint64_t v25 = *(void *)(v24 + 16) + v21;
            }
            uint64_t v26 = *(void *)(v4 + 184);
            if ((*(unsigned char *)(v4 + 68) & 0x20) != 0) {
              uint64_t v27 = *(void *)(v26 + v23);
            }
            else {
              uint64_t v27 = *(void *)(v26 + 16) + v21;
            }
            unsigned int v55 = v9;
            unsigned int v56 = v7;
            uint64_t v28 = *(void *)(*((void *)this + 3) + 8 * v22);
            (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, unsigned int *, unsigned int *, void, void))(*(void *)v28 + 32))(v28, v25, 0, v27, 0, &v55, &v56, v51, v52);
            ++v22;
            v23 += 16;
            v21 += 4;
          }
          while (v22 < *((unsigned int *)this + 4));
        }
      }
      else
      {
        unsigned int v56 = 0;
      }
      unsigned int v32 = v56;
      int v33 = *(_DWORD *)(v4 + 72);
      *(_DWORD *)(v4 + 168) = v56;
      *(_DWORD *)(v4 + 176) = ACBaseAudioSpan::sizeOfFirstPackets((ACBaseAudioSpan *)(v4 + 168), v32, v33);
      uint64_t v35 = (acv2::AudioConverterBase *)*((void *)this + 8);
      if (v35) {
        acv2::AudioConverterBase::writeCapture(v35, (AudioConverterCapturer *)(v4 + 168), v34);
      }
      int v36 = acv2::AudioConverterChain::ConsumedInput(*(void **)(*((void *)this + 1) + 8), *(_DWORD *)v13, *(uint64_t *)v58, v55);
      BOOL v10 = v55 != 0;
      uint64_t v11 = v36 == 0;
      unsigned int v12 = v36 & 0xFFFFFF00;
      if (v36) {
        BOOL v10 = v36;
      }
LABEL_52:
      uint64_t v37 = v12 & 0xFFFFFF00 | v10;
      uint64_t v53 = v37 | (v11 << 32);
      if (!v11)
      {
        LODWORD(v54) = v37;
        if (!BYTE4(v54)) {
          goto LABEL_61;
        }
        char v39 = 0;
        goto LABEL_60;
      }
      caulk::expected<BOOL,int>::value((uint64_t)&v53);
      if ((_BYTE)v53)
      {
        BOOL v38 = 1;
      }
      else
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v54);
        BOOL v38 = (_BYTE)v54 != 0;
      }
      LOBYTE(v54) = v38;
      if (!BYTE4(v54))
      {
        char v39 = 1;
LABEL_60:
        BYTE4(v54) = v39;
      }
LABEL_61:
      if (BYTE4(v53))
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v53);
        BOOL v40 = (_BYTE)v53 != 0;
      }
      else
      {
        BOOL v40 = 0;
      }
      int v41 = *v6;
      if (v40 || v41)
      {
        int v42 = *(_DWORD *)(v4 + 176);
        unsigned int v43 = *(_DWORD *)a2;
        uint64_t v44 = *((unsigned int *)a2 + 2);
        if (v41)
        {
          uint64_t v45 = *((void *)a2 + 4);
          if (v45)
          {
            unsigned int v46 = *(_DWORD *)a2;
            uint64_t v47 = *v6;
            do
            {
              *(void *)(v45 + 16 * v46++) += v44;
              --v47;
            }
            while (v47);
          }
        }
        *(_DWORD *)a2 = v43 + v41;
        *((_DWORD *)a2 + 2) = v44 + v42;
        ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)a2, v4 + 168, 0);
        if (BYTE4(v54))
        {
          if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1)) {
            continue;
          }
        }
      }
      break;
    }
  }
  ACBaseAudioSpan::completeMetadataFrame((uint64_t *)a2);
  return v54;
}

uint64_t acv2::Resampler2Wrapper::GetNumberOfSourceFrames(acv2::Resampler2Wrapper *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 3) + 136))();
}

uint64_t Resampler2::GetNumberOfSourceFrames(Resampler2 *this, unsigned int a2)
{
  return Resampler2::GetNumberOfSourceFrames(this, a2, 0);
}

uint64_t Resampler2::PreFlight(Resampler2 *this, unsigned int *a2, unsigned int *a3)
{
  signed int NumberOfSourceFrames = Resampler2::GetNumberOfSourceFrames(this, *a3, 0);
  uint64_t result = (*(uint64_t (**)(Resampler2 *, void))(*(void *)this + 144))(this, *a2);
  if (NumberOfSourceFrames >= (int)*a2)
  {
    if ((int)result < (int)*a3) {
      *a3 = result;
    }
  }
  else
  {
    *a2 = NumberOfSourceFrames;
  }
  return result;
}

unsigned int Resampler2::GetNumberOfOutputFrames(Resampler2 *this, int a2)
{
  if (*((unsigned char *)this + 133) && !*((unsigned char *)this + 132))
  {
    uint64_t v6 = (uint64_t)((int)(a2
                       - (*(uint64_t (**)(Resampler2 *))(*(void *)this + 152))(this)
                       + *((_DWORD *)this + 18)
                       + 1)
                 * (unint64_t)*((unsigned int *)this + 31)
                 - *((unsigned int *)this + 26))
       / *((unsigned int *)this + 27);
    return v6 & ~((int)v6 >> 31);
  }
  else
  {
    double v3 = (double)(*((_DWORD *)this + 18) + a2)
       - ((double)(*(unsigned int (**)(Resampler2 *))(*(void *)this + 152))(this)
        + -1.0)
       - *((double *)this + 20);
    if (!*((unsigned char *)this + 132)) {
      double v3 = v3 * *((double *)this + 22);
    }
    if (v3 >= 0.0) {
      double v4 = v3 + 0.0001;
    }
    else {
      double v4 = 0.0001;
    }
    return vcvtmd_u64_f64(v4);
  }
}

uint64_t Resampler2::GetNumberOfSourceFrames(Resampler2 *this, unsigned int a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  if (!*((unsigned char *)this + 133))
  {
    if (!*((unsigned char *)this + 132))
    {
      if (*((unsigned char *)this + 264))
      {
        RateRamp::RateRamp((RateRamp *)v12);
        double v11 = (double)a2;
        RateRamp::Segment((Resampler2 *)((char *)this + 208), *((double *)this + 30) + (double)a3, &v11, 1000000000.0, (RateRamp *)v12);
        RateRamp::InputDuration((RateRamp *)v12);
        double v8 = (double)vcvtpd_u64_f64(v10);
      }
      else
      {
        double v8 = *((double *)this + 21) * (double)a2;
      }
      goto LABEL_8;
    }
LABEL_7:
    double v8 = (double)a2;
LABEL_8:
    int v6 = vcvtpd_s64_f64((double)(*(unsigned int (**)(Resampler2 *))(*(void *)this + 152))(this)+ -1.0+ *((double *)this + 20)+ v8+ -0.0001- (double)*((int *)this + 18));
    return v6 & ~(v6 >> 31);
  }
  if (*((unsigned char *)this + 132)) {
    goto LABEL_7;
  }
  unsigned int v5 = *((_DWORD *)this + 27);
  int v6 = (*(uint64_t (**)(Resampler2 *))(*(void *)this + 152))(this)
     + ~*((_DWORD *)this + 18)
     + (uint64_t)(*((unsigned int *)this + 26) + v5 * (unint64_t)a2 + *((unsigned int *)this + 31) - 1)
     / *((unsigned int *)this + 31);
  return v6 & ~(v6 >> 31);
}

uint64_t Resampler2::GetKernelSize(Resampler2 *this)
{
  if (*((_DWORD *)this + 29) == 1818848869) {
    return 2;
  }
  else {
    return *(unsigned int *)(*((void *)this + 7) + 12);
  }
}

uint64_t Resampler2::PushConvert(Resampler2 *this, const float *a2, const float *a3, float *a4, float *a5, unsigned int *a6, unsigned int *a7, int a8, signed int a9, char a10)
{
  *((unsigned char *)this + 24) = 1;
  unsigned int v17 = *a6;
  unsigned int v78 = *a7;
  unsigned int v79 = v17;
  (*(void (**)(Resampler2 *, unsigned int *, unsigned int *))(*(void *)this + 24))(this, &v79, &v78);
  uint64_t v66 = a7;
  uint64_t v67 = a6;
  unsigned int v18 = v78;
  if (v78)
  {
    unsigned int v19 = 0;
    int v20 = 0;
    unsigned int v21 = v79;
    int v22 = *((_DWORD *)this + 18);
    uint64_t v65 = 4 * a9;
    int v75 = a5;
    uint64_t v68 = a3;
    uint64_t v23 = a4;
    while (1)
    {
      unsigned int v24 = *((_DWORD *)this + 19) - v22;
      if (v24 >= v21) {
        unsigned int v24 = v21;
      }
      unsigned int v77 = v24;
      unsigned int v76 = v18;
      (*(void (**)(Resampler2 *, unsigned int *, unsigned int *))(*(void *)this + 24))(this, &v77, &v76);
      unsigned int v25 = v77;
      uint64_t v26 = *((int *)this + 18);
      uint64_t v27 = (float *)(*((void *)this + 10) + 4 * v26);
      unsigned int v74 = v76;
      if (a8 == 1)
      {
        memcpy(v27, &a2[v20], 4 * v77);
        if (a3) {
          memcpy((void *)(*((void *)this + 11) + 4 * *((int *)this + 18)), &a3[v20], 4 * v77);
        }
      }
      else if (a3)
      {
        if (v77)
        {
          uint64_t v28 = (float *)(*((void *)this + 11) + 4 * v26);
          int v29 = v20 * a8;
          uint64_t v30 = v77;
          do
          {
            *v27++ = a2[v29];
            *v28++ = a3[v29];
            v29 += a8;
            --v30;
          }
          while (v30);
        }
      }
      else if (v77)
      {
        int v31 = v20 * a8;
        uint64_t v32 = v77;
        do
        {
          *v27++ = a2[v31];
          v31 += a8;
          --v32;
        }
        while (v32);
      }
      unsigned int v73 = v25;
      if (a10)
      {
        int v33 = *((_DWORD *)this + 18);
        uint64_t v34 = v75;
        if (!*((unsigned char *)this + 200)) {
          *((void *)this + 24) = v33;
        }
      }
      else
      {
        int v33 = *((_DWORD *)this + 18);
        uint64_t v34 = v75;
      }
      *((unsigned char *)this + 200) = a10 & 1;
      *((_DWORD *)this + 18) = v33 + v77;
      uint64_t v35 = v76;
      if (!v76) {
        goto LABEL_53;
      }
      int v71 = v20;
      unsigned int v72 = v19;
      uint64_t v70 = v23;
      if ((a10 & 1) == 0
        || *((unsigned char *)this + 264)
        || *((void *)this + 24) > (int64_t)vcvtmd_s64_f64(*((double *)this + 20)))
      {
        int v36 = (void (*)(void *, float *, float *, void, void))*((void *)this + 1);
        uint64_t v37 = *((void *)this + 2);
        BOOL v38 = (void *)((char *)this + (v37 >> 1));
        if (v37) {
          int v36 = *(void (**)(void *, float *, float *, void, void))(*v38 + v36);
        }
        v36(v38, v23, v34, v76, a9);
        double v39 = *((double *)this + 20);
        uint64_t v34 = v75;
        goto LABEL_27;
      }
      if (a9 == 2) {
        break;
      }
      if (a9 != 1) {
        goto LABEL_42;
      }
      bzero(v23, 4 * v76);
      uint64_t v34 = v75;
      if (v75)
      {
        unsigned int v46 = v75;
        size_t v47 = 4 * v35;
LABEL_41:
        bzero(v46, v47);
        uint64_t v34 = v75;
      }
LABEL_48:
      if (*((unsigned char *)this + 133))
      {
        unsigned int v52 = *((_DWORD *)this + 26) + *((_DWORD *)this + 27) * v35;
        *((_DWORD *)this + 26) = v52;
        double v39 = *((double *)this + 19) * (double)v52;
      }
      else
      {
        double v39 = *((double *)this + 20) + (double)v35 * *((double *)this + 21);
      }
      *((double *)this + 20) = v39;
LABEL_27:
      unsigned int v40 = v76;
      unsigned int v41 = v76 * a9;
      int v42 = &v34[v76 * a9];
      if (!v34) {
        int v42 = 0;
      }
      int v75 = v42;
      unsigned int v43 = v77;
      *((double *)this + 34) = *((double *)this + 34) + (double)v76;
      uint64_t v44 = (int)v39;
      size_t v45 = 4 * (*((_DWORD *)this + 18) - (int)v39);
      memmove(*((void **)this + 10), (const void *)(*((void *)this + 10) + 4 * v44), v45);
      if (a5) {
        memmove(*((void **)this + 11), (const void *)(*((void *)this + 11) + 4 * v44), v45);
      }
      *((double *)this + 20) = *((double *)this + 20) - (double)(int)v44;
      int v22 = *((_DWORD *)this + 18) - v44;
      *((_DWORD *)this + 18) = v22;
      *((void *)this + 24) -= v44;
      *((double *)this + 17) = *((double *)this + 17) + (double)(int)v44;
      if (*((unsigned char *)this + 133)) {
        *((_DWORD *)this + 26) -= *(_DWORD *)(*((void *)this + 7) + 16) * v44;
      }
      v21 -= v73;
      uint64_t v23 = &v70[v41];
      int v20 = v43 + v71;
      unsigned int v19 = v40 + v72;
      v18 -= v74;
      a3 = v68;
      if (!v18) {
        goto LABEL_53;
      }
    }
    if ((char *)v34 - (char *)v23 == 4)
    {
      size_t v47 = 8 * v76;
      unsigned int v46 = v23;
      goto LABEL_41;
    }
LABEL_42:
    if (v34)
    {
      uint64_t v48 = 0;
      unsigned int v49 = v76;
      do
      {
        *(float *)((char *)v23 + v48) = 0.0;
        *(float *)((char *)v34 + v48) = 0.0;
        v48 += v65;
        --v49;
      }
      while (v49);
    }
    else
    {
      int v50 = v23;
      unsigned int v51 = v76;
      do
      {
        *int v50 = 0.0;
        int v50 = (float *)((char *)v50 + v65);
        --v51;
      }
      while (v51);
    }
    goto LABEL_48;
  }
  int v20 = 0;
  unsigned int v19 = 0;
LABEL_53:
  unsigned int v53 = *v67;
  unsigned int NumberOfSourceFrames = Resampler2::GetNumberOfSourceFrames(this, 1u, v19);
  unsigned int v55 = v53 - v20;
  if (v53 != v20 && v55 <= NumberOfSourceFrames)
  {
    if (a8 == 1)
    {
      memcpy((void *)(*((void *)this + 10) + 4 * *((int *)this + 18)), &a2[v20], 4 * (v53 - v20));
      if (a3) {
        memcpy((void *)(*((void *)this + 11) + 4 * *((int *)this + 18)), &a3[v20], 4 * (v53 - v20));
      }
    }
    else
    {
      uint64_t v57 = *((int *)this + 18);
      uint64_t v58 = (float *)(*((void *)this + 10) + 4 * v57);
      if (a3)
      {
        BOOL v59 = (float *)(*((void *)this + 11) + 4 * v57);
        int v60 = v20 * a8;
        uint64_t v61 = v53 - v20;
        do
        {
          *v58++ = a2[v60];
          *v59++ = a3[v60];
          v60 += a8;
          --v61;
        }
        while (v61);
      }
      else
      {
        int v62 = v20 * a8;
        uint64_t v63 = v53 - v20;
        do
        {
          *v58++ = a2[v62];
          v62 += a8;
          --v63;
        }
        while (v63);
      }
    }
    *((_DWORD *)this + 18) += v55;
  }
  *uint64_t v66 = v19;
  *((unsigned char *)this + 24) = 0;
  return 0;
}

void sub_18FF05B6C(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 24) = 0;
  _Unwind_Resume(a1);
}

double Resampler2::ConvertSIMD_SmallIntegerRatio(Resampler2 *this, float *a2, float *a3, int a4, int a5)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = **((void **)this + 7);
  unsigned int v11 = (*(uint64_t (**)(Resampler2 *))(*(void *)this + 152))(this);
  if (a4)
  {
    unsigned int v12 = *(_DWORD *)(*((void *)this + 7) + 16);
    unsigned int v14 = *((_DWORD *)this + 26);
    unsigned int v13 = *((_DWORD *)this + 27);
    unsigned int v15 = *((_DWORD *)this + 19) * v12;
    if (v14 + v13 * a4 <= v15)
    {
      int v16 = v13 / v12;
      int v17 = v13 % v12;
      unsigned int v18 = v14 / v12;
      unsigned int v19 = v14 % v12;
      if (*((_DWORD *)this + 29) == 1650553971)
      {
        uint64_t v20 = *((void *)this + 10);
        uint64_t v21 = v11 >> 2;
        if (a3)
        {
          uint64_t v22 = *((void *)this + 11);
          int v23 = a4;
          do
          {
            uint64_t v24 = v10 + 4 * v19 * v11;
            unsigned int v25 = (float32x4_t *)(v20 + 4 * v18);
            uint64_t v26 = (float32x4_t *)(v22 + 4 * v18);
            float32x4_t v27 = *(float32x4_t *)(v24 + 16);
            float32x4_t v28 = vmulq_f32(v25[1], v27);
            float32x4_t v29 = vmulq_f32(*v25, *(float32x4_t *)v24);
            float32x4_t v30 = vmulq_f32(v26[1], v27);
            float32x4_t v31 = vmulq_f32(*v26, *(float32x4_t *)v24);
            float32x4_t v32 = *(float32x4_t *)(v24 + 32);
            float32x4_t v33 = *(float32x4_t *)(v24 + 48);
            float32x4_t v34 = v26[2];
            float32x4_t v35 = v26[3];
            float32x4_t v36 = v25[2];
            float32x4_t v37 = v25[3];
            float64x2_t v38 = 0uLL;
            if (v21 == 4)
            {
              float64x2_t v39 = 0uLL;
              float64x2_t v40 = 0uLL;
              float64x2_t v41 = 0uLL;
            }
            else
            {
              int v42 = (float32x4_t *)(v24 + 64);
              unsigned int v43 = v26 + 4;
              uint64_t v44 = v25 + 4;
              float64x2_t v40 = 0uLL;
              float64x2_t v41 = 0uLL;
              size_t v45 = (float32x4_t *)(v24 + 16 * v21);
              float64x2_t v39 = 0uLL;
              do
              {
                float64x2_t v39 = vaddq_f64(v39, vaddq_f64(vcvt_hight_f64_f32(v28), vcvt_hight_f64_f32(v29)));
                float64x2_t v38 = vaddq_f64(v38, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v28.f32), vcvtq_f64_f32(*(float32x2_t *)v29.f32)));
                float64x2_t v41 = vaddq_f64(v41, vaddq_f64(vcvt_hight_f64_f32(v30), vcvt_hight_f64_f32(v31)));
                float64x2_t v40 = vaddq_f64(v40, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v30.f32), vcvtq_f64_f32(*(float32x2_t *)v31.f32)));
                float32x4_t v29 = vmulq_f32(v36, v32);
                float32x4_t v28 = vmulq_f32(v37, v33);
                float32x4_t v31 = vmulq_f32(v34, v32);
                float32x4_t v30 = vmulq_f32(v35, v33);
                float32x4_t v36 = *v44;
                float32x4_t v37 = v44[1];
                v44 += 2;
                float32x4_t v34 = *v43;
                float32x4_t v35 = v43[1];
                v43 += 2;
                float32x4_t v32 = *v42;
                float32x4_t v33 = v42[1];
                v42 += 2;
              }
              while (v42 != v45);
            }
            float32x4_t v46 = vmulq_f32(v33, v37);
            float32x4_t v47 = vmulq_f32(v32, v36);
            float32x4_t v48 = vmulq_f32(v33, v35);
            float32x4_t v49 = vmulq_f32(v32, v34);
            float64x2_t v50 = vaddq_f64(vaddq_f64(v41, vaddq_f64(vcvt_hight_f64_f32(v30), vcvt_hight_f64_f32(v31))), vaddq_f64(vcvt_hight_f64_f32(v48), vcvt_hight_f64_f32(v49)));
            float64x2_t v51 = vaddq_f64(vaddq_f64(v40, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v30.f32), vcvtq_f64_f32(*(float32x2_t *)v31.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v48.f32), vcvtq_f64_f32(*(float32x2_t *)v49.f32)));
            v48.f32[0] = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v38, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v28.f32), vcvtq_f64_f32(*(float32x2_t *)v29.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v46.f32), vcvtq_f64_f32(*(float32x2_t *)v47.f32))), vaddq_f64(vaddq_f64(v39, vaddq_f64(vcvt_hight_f64_f32(v28), vcvt_hight_f64_f32(v29))), vaddq_f64(vcvt_hight_f64_f32(v46), vcvt_hight_f64_f32(v47)))));
            *a2 = v48.f32[0];
            *(float *)v51.f64 = vaddvq_f64(vaddq_f64(v51, v50));
            *a3 = *(float *)v51.f64;
            a2 += a5;
            a3 += a5;
            v18 += v16;
            unsigned int v52 = v19 + v17;
            if (v19 + v17 >= v12) {
              ++v18;
            }
            if (v52 < v12) {
              unsigned int v53 = 0;
            }
            else {
              unsigned int v53 = v12;
            }
            unsigned int v19 = v52 - v53;
            --v23;
          }
          while (v23);
        }
        else
        {
          int v54 = a4;
          do
          {
            uint64_t v55 = v10 + 4 * v19 * v11;
            unsigned int v56 = (float32x4_t *)(v20 + 4 * v18);
            float32x4_t v57 = vmulq_f32(v56[1], *(float32x4_t *)(v55 + 16));
            float32x4_t v58 = vmulq_f32(*v56, *(float32x4_t *)v55);
            float32x4_t v59 = *(float32x4_t *)(v55 + 32);
            float32x4_t v60 = *(float32x4_t *)(v55 + 48);
            float32x4_t v61 = v56[2];
            float32x4_t v62 = v56[3];
            float64x2_t v63 = 0uLL;
            if (v21 == 4)
            {
              float64x2_t v64 = 0uLL;
            }
            else
            {
              uint64_t v65 = (float32x4_t *)(v55 + 16 * v21);
              uint64_t v66 = (float32x4_t *)(v55 + 64);
              uint64_t v67 = v56 + 4;
              float64x2_t v64 = 0uLL;
              do
              {
                float64x2_t v64 = vaddq_f64(v64, vaddq_f64(vcvt_hight_f64_f32(v57), vcvt_hight_f64_f32(v58)));
                float64x2_t v63 = vaddq_f64(v63, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v57.f32), vcvtq_f64_f32(*(float32x2_t *)v58.f32)));
                float32x4_t v58 = vmulq_f32(v61, v59);
                float32x4_t v57 = vmulq_f32(v62, v60);
                float32x4_t v61 = *v67;
                float32x4_t v62 = v67[1];
                v67 += 2;
                float32x4_t v59 = *v66;
                float32x4_t v60 = v66[1];
                v66 += 2;
              }
              while (v66 != v65);
            }
            float32x4_t v68 = vmulq_f32(v60, v62);
            float32x4_t v69 = vmulq_f32(v59, v61);
            v69.f32[0] = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v63, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v57.f32), vcvtq_f64_f32(*(float32x2_t *)v58.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v68.f32), vcvtq_f64_f32(*(float32x2_t *)v69.f32))), vaddq_f64(vaddq_f64(v64, vaddq_f64(vcvt_hight_f64_f32(v57), vcvt_hight_f64_f32(v58))), vaddq_f64(vcvt_hight_f64_f32(v68), vcvt_hight_f64_f32(v69)))));
            *a2 = v69.f32[0];
            a2 += a5;
            v18 += v16;
            unsigned int v70 = v19 + v17;
            if (v19 + v17 >= v12) {
              ++v18;
            }
            if (v70 < v12) {
              unsigned int v71 = 0;
            }
            else {
              unsigned int v71 = v12;
            }
            unsigned int v19 = v70 - v71;
            --v54;
          }
          while (v54);
        }
      }
      else if (a3)
      {
        StereoMultiCoefsSRC_Neon((_OWORD *)(*((void *)this + 10) + 4 * v18), (_OWORD *)(*((void *)this + 11) + 4 * v18), v10, a2, a3, a4, a5, v16 | (v17 << 16), v19, v12, v11);
      }
      else if ((v11 & 3) == 0)
      {
        MonoMultiCoefsSRC_Neon((_OWORD *)(*((void *)this + 10) + 4 * v18), v10, a2, a4, a5, v16 | (v17 << 16), v19, v12, v11);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136317186;
      int v75 = "Resampler2.cpp";
      __int16 v76 = 1024;
      int v77 = 2293;
      __int16 v78 = 2080;
      unsigned int v79 = "ConvertSIMD_SmallIntegerRatio";
      __int16 v80 = 1024;
      int v81 = 2293;
      __int16 v82 = 1024;
      unsigned int v83 = v15;
      __int16 v84 = 1024;
      unsigned int v85 = v14;
      __int16 v86 = 1024;
      int v87 = v14 + v12 * a4;
      __int16 v88 = 1024;
      unsigned int v89 = v13;
      __int16 v90 = 1024;
      unsigned int v91 = v12;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "%25s:%-5d CADSPUtility:%s:%d: input buffer ticks %u but would read from %u to %u (tick rate %u, offsets %u)!", buf, 0x40u);
    }
  }
  unsigned int v72 = *((_DWORD *)this + 26) + *((_DWORD *)this + 27) * a4;
  *((_DWORD *)this + 26) = v72;
  double result = *((double *)this + 19) * (double)v72;
  *((double *)this + 20) = result;
  return result;
}

float MonoMultiCoefsSRC_Neon(_OWORD *a1, uint64_t a2, float *a3, int a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9)
{
  do
  {
    float32x4_t v9 = 0uLL;
    float32x4_t v10 = 0uLL;
    float32x4_t v11 = 0uLL;
    float32x4_t v12 = 0uLL;
    unsigned int v13 = (float32x4_t *)(a2 + 4 * (unsigned __int16)(a7 * a9));
    float32x4_t v15 = *(float32x4_t *)a1;
    float32x4_t v16 = *((float32x4_t *)a1 + 1);
    unsigned int v14 = (float32x4_t *)(a1 + 2);
    float32x4_t v18 = *v13;
    float32x4_t v19 = v13[1];
    int v17 = v13 + 2;
    int v20 = a9 - 16;
    if (a9 != 16)
    {
      do
      {
        float32x4_t v22 = *v14;
        float32x4_t v23 = v14[1];
        uint64_t v21 = v14 + 2;
        float32x4_t v9 = vmlaq_f32(v9, v15, v18);
        v20 -= 16;
        float32x4_t v25 = *v17;
        float32x4_t v26 = v17[1];
        uint64_t v24 = v17 + 2;
        float32x4_t v10 = vmlaq_f32(v10, v16, v19);
        float32x4_t v15 = *v21;
        float32x4_t v16 = v21[1];
        unsigned int v14 = v21 + 2;
        float32x4_t v11 = vmlaq_f32(v11, v22, v25);
        float32x4_t v18 = *v24;
        float32x4_t v19 = v24[1];
        int v17 = v24 + 2;
        float32x4_t v12 = vmlaq_f32(v12, v23, v26);
      }
      while (v20);
    }
    a1 = (_OWORD *)((char *)a1 + 4 * (unsigned __int16)a6);
    a7 += HIWORD(a6);
    float32x4_t v27 = vaddq_f32(vmlaq_f32(v9, v15, v18), vmlaq_f32(v10, v16, v19));
    float32x4_t v28 = vaddq_f32(vmlaq_f32(v11, *v14, *v17), vmlaq_f32(v12, v14[1], v17[1]));
    if (a7 >= a8)
    {
      a7 -= a8;
      a1 = (_OWORD *)((char *)a1 + 4);
    }
    float32x4_t v29 = vaddq_f32(v27, v28);
    float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29));
    --a4;
    *a3 = result;
    a3 += a5;
  }
  while (a4);
  return result;
}

float StereoMultiCoefsSRC_Neon(_OWORD *a1, _OWORD *a2, uint64_t a3, float *a4, float *a5, int a6, int a7, unsigned int a8, unsigned int a9, unsigned int a10, int a11)
{
  do
  {
    float32x4_t v12 = 0uLL;
    float32x4_t v13 = 0uLL;
    float32x4_t v14 = 0uLL;
    float32x4_t v15 = 0uLL;
    float32x4_t v16 = 0uLL;
    float32x4_t v17 = 0uLL;
    float32x4_t v18 = 0uLL;
    float32x4_t v19 = 0uLL;
    int v20 = (float32x4_t *)(a3 + 4 * (unsigned __int16)(a9 * a11));
    float32x4_t v22 = *(float32x4_t *)a1;
    float32x4_t v23 = *((float32x4_t *)a1 + 1);
    uint64_t v21 = (float32x4_t *)(a1 + 2);
    float32x4_t v25 = *(float32x4_t *)a2;
    float32x4_t v26 = *((float32x4_t *)a2 + 1);
    uint64_t v24 = (float32x4_t *)(a2 + 2);
    float32x4_t v28 = *v20;
    float32x4_t v29 = v20[1];
    float32x4_t v27 = v20 + 2;
    int v30 = a11 - 16;
    if (a11 != 16)
    {
      do
      {
        float32x4_t v32 = *v21;
        float32x4_t v33 = v21[1];
        float32x4_t v31 = v21 + 2;
        float32x4_t v12 = vmlaq_f32(v12, v22, v28);
        float32x4_t v35 = *v24;
        float32x4_t v36 = v24[1];
        float32x4_t v34 = v24 + 2;
        float32x4_t v16 = vmlaq_f32(v16, v25, v28);
        v30 -= 16;
        float32x4_t v38 = *v27;
        float32x4_t v39 = v27[1];
        float32x4_t v37 = v27 + 2;
        float32x4_t v13 = vmlaq_f32(v13, v23, v29);
        float32x4_t v17 = vmlaq_f32(v17, v26, v29);
        float32x4_t v22 = *v31;
        float32x4_t v23 = v31[1];
        uint64_t v21 = v31 + 2;
        float32x4_t v14 = vmlaq_f32(v14, v32, v38);
        float32x4_t v25 = *v34;
        float32x4_t v26 = v34[1];
        uint64_t v24 = v34 + 2;
        float32x4_t v18 = vmlaq_f32(v18, v35, v38);
        float32x4_t v28 = *v37;
        float32x4_t v29 = v37[1];
        float32x4_t v27 = v37 + 2;
        float32x4_t v15 = vmlaq_f32(v15, v33, v39);
        float32x4_t v19 = vmlaq_f32(v19, v36, v39);
      }
      while (v30);
    }
    float32x4_t v40 = v27[1];
    a1 = (_OWORD *)((char *)a1 + 4 * (unsigned __int16)a8);
    a2 = (_OWORD *)((char *)a2 + 4 * (unsigned __int16)a8);
    a9 += HIWORD(a8);
    float32x4_t v41 = vaddq_f32(vmlaq_f32(v12, v22, v28), vmlaq_f32(v13, v23, v29));
    float32x4_t v42 = vaddq_f32(vmlaq_f32(v16, v25, v28), vmlaq_f32(v17, v26, v29));
    float32x4_t v43 = vaddq_f32(vmlaq_f32(v14, *v21, *v27), vmlaq_f32(v15, v21[1], v40));
    float32x4_t v44 = vaddq_f32(vmlaq_f32(v18, *v24, *v27), vmlaq_f32(v19, v24[1], v40));
    if (a9 >= a10)
    {
      a9 -= a10;
      a1 = (_OWORD *)((char *)a1 + 4);
      a2 = (_OWORD *)((char *)a2 + 4);
    }
    float32x4_t v45 = vaddq_f32(v41, v43);
    float32x4_t v46 = vaddq_f32(v42, v44);
    float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45));
    --a6;
    *a4 = result;
    *a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46));
    a4 += a7;
    a5 += a7;
  }
  while (a6);
  return result;
}

uint64_t *AUProcessingBlock_DSPGraph::AUProcessingBlock_DSPGraph(uint64_t *a1, uint64_t *a2)
{
  double v4 = (__CFString *)(*a2 + 408);
  if (*(char *)(*a2 + 431) < 0)
  {
    double v4 = (__CFString *)v4->isa;
    size_t v5 = strlen((const char *)v4);
    if (!v4) {
      goto LABEL_5;
    }
  }
  else
  {
    size_t v5 = strlen((const char *)(*a2 + 408));
  }
  double v4 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)v4, v5, 0x8000100u, 0);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
LABEL_5:
  AUProcessingBlockBase::AUProcessingBlockBase((AUProcessingBlockBase *)a1, v4);
  if (v4) {
    CFRelease(v4);
  }
  *a1 = (uint64_t)&unk_1EDF93F60;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  a1[6] = *a2;
  a1[7] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v6 = a1[6];
  }
  a1[8] = 0;
  for (uint64_t i = *(void **)(v6 + 24); i; uint64_t i = (void *)*i)
  {
    AUPBRegisterAU(a1[2], *(void *)(i[2] + 56));
    uint64_t v9 = i[2];
    uint64_t v10 = *(void *)(v9 + 312);
    uint64_t v11 = *(void *)(v9 + 320);
    while (v10 != v11)
    {
      AUPBRegisterAU(a1[2], *(void *)(*(void *)v10 + 88));
      v10 += 8;
    }
  }
  AUPBPropertyChanged(a1[2], 1735554168);
  return a1;
}

void sub_18FF0641C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t AUPBRegisterAU(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  double v4 = +[AUPBServer sharedInstance];
  return [(AUPBServer *)v4 registerAU:a2 inBlock:a1];
}

void AUProcessingBlockBase::AUProcessingBlockBase(AUProcessingBlockBase *this, __CFString *a2)
{
  *(void *)this = &unk_1EDF93170;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  AUProcessingBlockBase::SetName(this, a2);
  AUPBRegister((uint64_t)&gAUPBMethods, (uint64_t)this, (OpaqueAUPB **)this + 2);
}

void sub_18FF0656C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase::SetName(AUProcessingBlockBase *this, __CFString *a2)
{
  double v4 = (const void *)*((void *)this + 1);
  if (v4) {
    CFRelease(v4);
  }
  if (a2) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = &stru_1EDFA53D0;
  }
  *((void *)this + 1) = v5;
  CFRetain(v5);
  int v7 = 1851878757;
  return AUPBPropertiesChanged(*((void *)this + 2), 1, (uint64_t)&v7, 0, 0);
}

uint64_t AUPBRegister(uint64_t a1, uint64_t a2, OpaqueAUPB **a3)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t result = 4294967246;
  if (a1)
  {
    if (a3)
    {
      int v7 = [+[AUPBServer sharedInstance] registerBlock:a1 withUserData:a2];
      uint64_t result = 0;
      *a3 = v7;
    }
  }
  return result;
}

uint64_t AUPBPropertyChanged(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  [+[AUPBServer sharedInstance] processingBlockRef:a1 propertyChanged:a2];
  return 0;
}

uint64_t AUPBPropertiesChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  [+[AUPBServer sharedInstance] processingBlock:a1 properties:a3 count:a2 changedWithQualifierData:a4 length:a5];
  return 0;
}

uint64_t DSPGraph::Graph::setSliceDuration(uint64_t result, int a2, int a3, int a4)
{
  if (*(unsigned char *)(result + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "setSliceDuration");
    std::string::basic_string[abi:ne180100]<0>(&v4, "cannot set slice duration if graph is already configured.");
    DSPGraph::ThrowException(1667655457, &v6, 231, &v5, &v4);
  }
  *(_DWORD *)(result + 688) = a2;
  *(_DWORD *)(result + 692) = a3;
  *(unsigned char *)(result + 760) = a4 == 1;
  return result;
}

void sub_18FF06854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t GetMediaServerRPCTimeout(void)
{
  uint64_t result = gMediaServerTimeout;
  if (gMediaServerTimeout < 0)
  {
    BOOL v4 = 0;
    AppIntegerint Value = CACFPreferencesGetAppIntegerValue(@"rpc_timeout", @"com.apple.coreaudio", &v4);
    if (v4)
    {
      if (AppIntegerValue) {
        uint64_t result = (1000 * AppIntegerValue);
      }
      else {
        uint64_t result = 0x7FFFFFFFLL;
      }
    }
    else
    {
      int v2 = CACFPreferencesGetAppIntegerValue(@"rpc_timeout", @"com.apple.coremedia", &v4);
      unsigned int v3 = 1000 * v2;
      if (!v2) {
        unsigned int v3 = 0x7FFFFFFF;
      }
      if (v4) {
        uint64_t result = v3;
      }
      else {
        uint64_t result = 9000;
      }
    }
    gMediaServerTimeout = result;
  }
  return result;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterFillComplexBuffer::$_0>(void ***a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(*(void *)a2 + 80))(a2, ***a1, *(*a1)[1], *(*a1)[2], *(*a1)[3], *(*a1)[4], 0);
  if (isRenderStatusConcerning(v3))
  {
    uint64_t v4 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2) ? 15 : 11;
    uint64_t v5 = _os_log_pack_size() + 88;
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v4, 16);
    if (message)
    {
      int v7 = (caulk::concurrent::message *)message;
      double v8 = (char *)(message + v5);
      uint64_t v9 = _os_log_pack_fill();
      if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2)) {
        uint64_t v10 = "out-of-process";
      }
      else {
        uint64_t v10 = "in-process";
      }
      stpcpy(v8, v10);
      *(_DWORD *)uint64_t v9 = 134218498;
      *(void *)(v9 + 4) = a2;
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v8;
      *(_WORD *)(v9 + 22) = 1024;
      *(_DWORD *)(v9 + 24) = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v7);
    }
  }
  return v3;
}

uint64_t acv2::AudioConverterV2::fillComplexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  __int16 v80 = a4;
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 96))
  {
    if (*(unsigned char *)(a1 + 12))
    {
      uint64_t v78 = a1;
      unsigned int v79 = &v80;
    }
    else
    {
      int v13 = *(unsigned __int8 *)(a1 + 12);
      uint64_t v78 = a1;
      unsigned int v79 = &v80;
      if (!v13 && *(unsigned char *)(a1 + 13))
      {
        uint64_t v16 = *(unsigned int *)(a1 + 16);
        float32x4_t v17 = (unsigned int *)*(unsigned int *)(a1 + 20);
        HIDWORD(v60) = 2740;
        uint64_t v61 = v16;
        float32x4_t v62 = v17;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        kdebug_trace();
        v71[0] = 1;
        int v72 = 2740;
        uint64_t v73 = v16;
        unsigned int v74 = v17;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        LOBYTE(v60) = 0;
        char v77 = 1;
        AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&v60);
        if (a2) {
          goto LABEL_6;
        }
        goto LABEL_13;
      }
    }
    v71[0] = 0;
    char v77 = 0;
    if (a2)
    {
LABEL_6:
      if (v80)
      {
        if (a5)
        {
          uint64_t v14 = *(void *)(a1 + 32);
          if (!a6)
          {
            if (*(unsigned char *)(v14 + 496))
            {
              float32x4_t v15 = (uint64_t *)(v14 + 504);
              std::vector<AudioStreamPacketDescription>::resize((char **)(v14 + 504), *v80);
              a6 = *v15;
              uint64_t v14 = *(void *)(a1 + 32);
            }
            else
            {
              a6 = 0;
            }
          }
          if ((*(unsigned char *)(v14 + 52) & 0x20) != 0)
          {
            int v20 = *(_DWORD *)(v14 + 68);
            if (v20 != *a5) {
              goto LABEL_66;
            }
            if (!v20)
            {
LABEL_25:
              CrashIfClientProvidedBogusAudioBufferList();
              uint64_t v23 = *(void *)(a1 + 32);
              unsigned int v24 = *(_DWORD *)(v23 + 56);
              uint64_t v25 = *a5;
              if (v24 && v25)
              {
                uint64_t v26 = 0;
                unsigned int v27 = -1;
                do
                {
                  if (a5[v26 + 3] < v27) {
                    unsigned int v27 = a5[v26 + 3];
                  }
                  v26 += 4;
                }
                while (4 * v25 != v26);
                if (v27 < *v80 * v24)
                {
                  *__int16 v80 = v27 / v24;
                  LODWORD(v25) = *a5;
                }
              }
              BOOL v28 = *(_DWORD *)(v23 + 48) == 1885564203 && a5[4 * v25 + 2] == 1094863915 && *(a5 - 9) != 0;
              int v29 = *v80;
              v70[0] = a2;
              v70[1] = a3;
              v70[2] = *(unsigned int *)(a1 + 8);
              uint64_t v60 = 0;
              uint64_t v61 = 0;
              float32x4_t v62 = a5;
              LODWORD(v63) = v25;
              BYTE4(v63) = v28;
              char v69 = 0;
              uint64_t v64 = 0;
              uint64_t v65 = 0;
              LOBYTE(v66) = 0;
              if (v28)
              {
                uint64_t v68 = 0;
                long long v66 = 0u;
                long long v67 = 0u;
                char v69 = 1;
              }
              int v30 = (AudioStreamPacketDescription *)a5[3];
              uint64_t v65 = a7;
              ACBaseAudioSpan::set(&v60, (const AudioBufferList *)a5, a6, v29, v30);
              uint64_t v31 = *(void *)(a1 + 32);
              *(void *)&long long v59 = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_1>;
              *((void *)&v59 + 1) = v70;
              unint64_t v32 = acv2::AudioConverterChain::ProduceOutput(v31, &v59, (ACBaseAudioSpan *)&v60);
              if ((v32 & 0xFF00000000) != 0) {
                uint64_t v33 = 0;
              }
              else {
                uint64_t v33 = v32;
              }
              uint64_t v34 = *v62;
              if (v34)
              {
                int v35 = v61;
                float32x4_t v36 = v62 + 3;
                do
                {
                  *float32x4_t v36 = v35;
                  v36 += 4;
                  --v34;
                }
                while (v34);
              }
              int v37 = v60;
              *__int16 v80 = v60;
              if (*(unsigned char *)(a1 + 28)) {
                BOOL v38 = v37 == 0;
              }
              else {
                BOOL v38 = 1;
              }
              if (!v38)
              {
                *(unsigned char *)(a1 + 28) = 0;
                kdebug_trace();
              }
              if (v69 && (void)v66) {
                std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100]((void *)v66);
              }
              goto LABEL_53;
            }
          }
          else
          {
            int v20 = *a5;
            if (*a5 != 1)
            {
LABEL_66:
              uint64_t v52 = _os_log_pack_size();
              uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v52 + 88, 16);
              if (message)
              {
                int v54 = (caulk::concurrent::message *)message;
                uint64_t v55 = _os_log_pack_fill();
                uint64_t v56 = *(void *)(a1 + 32);
                if ((*(unsigned char *)(v56 + 52) & 0x20) != 0) {
                  int v57 = *(_DWORD *)(v56 + 68);
                }
                else {
                  int v57 = 1;
                }
                int v58 = *a5;
                *(_DWORD *)uint64_t v55 = 67109376;
                *(_DWORD *)(v55 + 4) = v57;
                *(_WORD *)(v55 + 8) = 1024;
                *(_DWORD *)(v55 + 10) = v58;
                caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v54);
              }
              goto LABEL_59;
            }
          }
          uint64_t v21 = 0;
          float32x4_t v22 = a5 + 4;
          while (*v22 && *((_DWORD *)v22 - 1))
          {
            ++v21;
            v22 += 2;
            if (v20 == v21) {
              goto LABEL_25;
            }
          }
          uint64_t v40 = _os_log_pack_size();
          uint64_t v41 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v40 + 88, 16);
          if (v41)
          {
            float32x4_t v42 = (caulk::concurrent::message *)v41;
            uint64_t v43 = _os_log_pack_fill();
            uint64_t v44 = *v22;
            unsigned int v45 = a5[4 * v21 + 3];
            *(_DWORD *)uint64_t v43 = 67109632;
            *(_DWORD *)(v43 + 4) = v21;
            *(_WORD *)(v43 + 8) = 2048;
            *(void *)(v43 + 10) = v44;
            *(_WORD *)(v43 + 18) = 1024;
            *(_DWORD *)(v43 + 20) = v45;
            caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v42);
          }
          goto LABEL_59;
        }
        uint64_t v50 = _os_log_pack_size();
        uint64_t v19 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v50 + 88, 16);
        if (v19) {
          goto LABEL_65;
        }
LABEL_59:
        uint64_t v33 = 4294967246;
LABEL_53:
        if (v77) {
          AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v71);
        }
        applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
        return v33;
      }
      uint64_t v49 = _os_log_pack_size();
      uint64_t v19 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v49 + 88, 16);
      if (!v19) {
        goto LABEL_59;
      }
LABEL_65:
      float64x2_t v51 = (caulk::concurrent::message *)v19;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v51);
      goto LABEL_59;
    }
LABEL_13:
    uint64_t v18 = _os_log_pack_size();
    uint64_t v19 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v18 + 88, 16);
    if (!v19) {
      goto LABEL_59;
    }
    goto LABEL_65;
  }
  uint64_t v33 = 1869627199;
  uint64_t v46 = _os_log_pack_size();
  uint64_t v47 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v46 + 88, 16);
  if (v47)
  {
    float32x4_t v48 = (caulk::concurrent::message *)v47;
    *(_WORD *)_os_log_pack_fill() = 0;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v48);
  }
  return v33;
}

void sub_18FF0710C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a28);
  }
  applesauce::raii::v1::detail::ScopeGuard<acv2::AudioConverterV2::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard();
  _Unwind_Resume(a1);
}

const char *CAMemoryStream::Write(CAMemoryStream *this, void *a2, const char *a3)
{
  uint64_t v3 = a3;
  if ((int)a3 >= 1)
  {
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = v6 + a3;
    if ((unint64_t)(v7 + 1) <= *((void *)this + 3))
    {
      double v8 = (char *)*((void *)this + 1);
    }
    else
    {
      double v8 = (char *)malloc_type_realloc(*((void **)this + 1), (v7 & 0xFFFFFFFFFFFFFF80) + 128, 0x2426ABB1uLL);
      if (!v8)
      {
        fwrite("realloc failed", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        return (const char *)0xFFFFFFFFLL;
      }
      *((void *)this + 1) = v8;
      *((void *)this + 3) = (v7 & 0xFFFFFFFFFFFFFF80) + 128;
      uint64_t v6 = *((void *)this + 2);
    }
    memcpy(&v8[v6], a2, v3);
    *((void *)this + 2) = v7;
  }
  return v3;
}

uint64_t ___ZN14IPCAURegistrar12IsActiveHostEi_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(v1 + 296);
  uint64_t v3 = *(void *)(v1 + 304);
  if (v2 != v3)
  {
    while (*(_DWORD *)(v2 + 16) != *(_DWORD *)(result + 48))
    {
      v2 += 24;
      if (v2 == v3) {
        return result;
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t acv2::PCMConverterFactory::AddUpReinterleaver(long long *a1, __int32 **a2, uint64_t a3, uint64_t a4, char a5)
{
  signed int v8 = *((_DWORD *)a1 + 17);
  unsigned int v9 = *((_DWORD *)a1 + 7);
  uint64_t result = acv2::MixableFormatPair(v9, v8, *a2, a2[3]);
  BOOL v11 = 0;
  if ((a5 & 1) == 0 && *(unsigned char *)(a3 + 112)) {
    BOOL v11 = v8 == (uint64_t)(*(void *)(a3 + 96) - *(void *)(a3 + 88)) >> 2;
  }
  int v12 = v8 > (int)v9 || v11;
  if ((v12 | result) == 1)
  {
    int v13 = *((_DWORD *)a1 + 3);
    int v14 = *((_DWORD *)a1 + 13) & 0x20;
    goto LABEL_10;
  }
  int v13 = *((_DWORD *)a1 + 3);
  int v14 = *((_DWORD *)a1 + 13) & 0x20;
  if (((v13 & 0x20) == 0) != (v14 == 0))
  {
LABEL_10:
    long long v15 = a1[1];
    long long v21 = *a1;
    long long v22 = v15;
    uint64_t v23 = *((void *)a1 + 4);
    if ((v13 & 0x20) != 0)
    {
      unsigned int v9 = 1;
    }
    else if (!v9)
    {
      unsigned int v16 = (*((_DWORD *)a1 + 8) + 7) >> 3;
      goto LABEL_15;
    }
    unsigned int v16 = *((_DWORD *)a1 + 6) / v9;
LABEL_15:
    unsigned int v17 = v13 & 0xFFFFFFDF;
    if (v14) {
      int v18 = 1;
    }
    else {
      int v18 = v8;
    }
    int v19 = v16 * v18;
    *((_DWORD *)a1 + 4) = v19;
    *((_DWORD *)a1 + 5) = 1;
    *((_DWORD *)a1 + 6) = v19;
    *((_DWORD *)a1 + 7) = v8;
    *((_DWORD *)a1 + 3) = v17 | v14;
    long long v20 = a1[1];
    long long v24 = *a1;
    uint64_t v26 = *((void *)a1 + 4);
    long long v25 = v20;
    operator new();
  }
  return result;
}

void sub_18FF07520(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10B3C40BBAFB75ALL);
  _Unwind_Resume(a1);
}

uint64_t acv2::MixableFormatPair(unsigned int a1, unsigned int a2, __int32 *a3, __int32 *a4)
{
  if (a1 <= 2)
  {
    if (a2 <= 2)
    {
      BOOL v4 = a1 == a2;
      return !v4;
    }
    __int32 v5 = *a4;
    if (*a4 != 0x10000)
    {
      if (!v5)
      {
        __int32 v5 = a4[2];
        goto LABEL_19;
      }
      goto LABEL_15;
    }
    int8x8_t v6 = (int8x8_t)a4[1];
    goto LABEL_18;
  }
  __int32 v5 = *a3;
  if (a2 <= 2)
  {
    if (v5 != 0x10000)
    {
      if (!v5)
      {
        __int32 v5 = a3[2];
LABEL_19:
        BOOL v4 = v5 == 0;
        return !v4;
      }
LABEL_15:
      __int32 v5 = (unsigned __int16)v5;
      goto LABEL_19;
    }
    int8x8_t v6 = (int8x8_t)a3[1];
LABEL_18:
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    __int32 v5 = v7.i32[0];
    goto LABEL_19;
  }
  if (v5 == 0x10000)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a3[1]);
    v9.i16[0] = vaddlv_u8(v9);
    if (!v9.i32[0]) {
      return 0;
    }
  }
  else if (v5)
  {
    if (!(unsigned __int16)*a3) {
      return 0;
    }
  }
  else if (!a3[2])
  {
    return 0;
  }
  __int32 v10 = *a4;
  if (*a4 == 0x10000)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)a4[1]);
    v11.i16[0] = vaddlv_u8(v11);
    if (!v11.i32[0]) {
      return 0;
    }
    goto LABEL_33;
  }
  if (v10)
  {
    if ((unsigned __int16)*a4) {
      goto LABEL_33;
    }
    return 0;
  }
  if (!a4[2]) {
    return 0;
  }
LABEL_33:
  if (v5 != v10) {
    return 1;
  }
  if (!v5)
  {
    uint64_t v12 = a3[2];
    if (v12 == a4[2])
    {
      if (!v12) {
        return 0;
      }
      int v13 = a4 + 3;
      for (uint64_t i = a3 + 3; *i == *v13; i += 5)
      {
        if (*i == 100)
        {
          BOOL v15 = *(void *)i == *(void *)v13 && *((void *)i + 1) == *((void *)v13 + 1);
          if (!v15 || i[4] != (unint64_t)v13[4]) {
            break;
          }
        }
        uint64_t result = 0;
        v13 += 5;
        if (!--v12) {
          return result;
        }
      }
    }
    return 1;
  }
  if (v5 != 0x10000) {
    return 0;
  }
  BOOL v4 = a3[1] == a4[1];
  return !v4;
}

uint64_t acv2::Reinterleaver::Reinterleaver(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v37 = *(_OWORD *)(a2 + 32);
  long long v3 = v37;
  long long v38 = v4;
  long long v39 = *(_OWORD *)(a2 + 64);
  long long v5 = v39;
  long long v6 = *(_OWORD *)(a2 + 16);
  v36[0] = *(_OWORD *)a2;
  long long v7 = v36[0];
  v36[1] = v6;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 64);
  *(void *)a1 = &unk_1EDF952A8;
  *(_OWORD *)(a1 + 168) = 0u;
  signed int v8 = (void **)(a1 + 168);
  uint8x8_t v9 = (char *)(a1 + 192);
  *(_OWORD *)(a1 + 216) = 0u;
  __int32 v10 = (std::vector<int> *)(a1 + 240);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 264) = 1;
  *(_DWORD *)(a1 + 268) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  std::vector<int>::size_type v11 = *(unsigned int *)(a1 + 84);
  LODWORD(v36[0]) = -1;
  v12.__i_ = 0;
  std::vector<int>::insert((std::vector<int> *)(a1 + 216), v12, v11, (std::vector<int>::const_reference)v36);
  v13.__i_ = *(std::__wrap_iter<const int *>::iterator_type *)(a1 + 240);
  std::vector<int>::size_type v14 = *(unsigned int *)(a1 + 44);
  LODWORD(v36[0]) = -1;
  std::vector<int>::insert(v10, v13, v14, (std::vector<int>::const_reference)v36);
  LODWORD(v15) = *(_DWORD *)(a1 + 84);
  unsigned int v16 = *(_DWORD *)(a1 + 44);
  if (v15 >= v16) {
    uint64_t v15 = v16;
  }
  else {
    uint64_t v15 = v15;
  }
  unsigned int v17 = *(char **)(a1 + 216);
  if (v15)
  {
    for (uint64_t i = 0; i != v15; ++i)
      *(_DWORD *)&v17[4 * i] = i;
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, v17, *(void *)(a1 + 224), (uint64_t)(*(void *)(a1 + 224) - (void)v17) >> 2);
  *(unsigned char *)(a1 + 264) = 1;
  *(_DWORD *)(a1 + 276) = 0;
  if ((*(unsigned char *)(a1 + 28) & 0x20) != 0 || *(_DWORD *)(a1 + 44) == 1)
  {
    *(_DWORD *)(a1 + 276) = 1;
    int v19 = 3;
  }
  else
  {
    int v19 = 2;
  }
  unsigned int v20 = *(_DWORD *)(a1 + 84);
  if ((*(unsigned char *)(a1 + 68) & 0x20) != 0 || v20 == 1) {
    *(_DWORD *)(a1 + 276) = v19;
  }
  LODWORD(v21) = *(_DWORD *)(a1 + 44);
  if (v21 <= v20) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = v21;
  }
  uint64_t v23 = *(unsigned char **)(a1 + 168);
  long long v22 = *(char **)(a1 + 176);
  unint64_t v24 = (v22 - v23) >> 3;
  if (v21 <= v24)
  {
    if (v21 >= v24) {
      goto LABEL_34;
    }
    uint64_t v34 = &v23[8 * v21];
LABEL_33:
    *(void *)(a1 + 176) = v34;
    goto LABEL_34;
  }
  unint64_t v25 = v21 - v24;
  uint64_t v26 = *(void *)(a1 + 184);
  if (v21 - v24 <= (v26 - (uint64_t)v22) >> 3)
  {
    bzero(*(void **)(a1 + 176), 8 * v25);
    uint64_t v34 = &v22[8 * v25];
    goto LABEL_33;
  }
  uint64_t v27 = v26 - (void)v23;
  if (v27 >> 2 > v21) {
    unint64_t v21 = v27 >> 2;
  }
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v28 = v21;
  }
  if (v28 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v29 = (char *)operator new(8 * v28);
  int v30 = &v29[8 * v24];
  uint64_t v31 = &v29[8 * v28];
  bzero(v30, 8 * v25);
  unint64_t v32 = &v30[8 * v25];
  if (v22 != v23)
  {
    do
    {
      uint64_t v33 = *((void *)v22 - 1);
      v22 -= 8;
      *((void *)v30 - 1) = v33;
      v30 -= 8;
    }
    while (v22 != v23);
    long long v22 = (char *)*v8;
  }
  *(void *)(a1 + 168) = v30;
  *(void *)(a1 + 176) = v32;
  *(void *)(a1 + 184) = v31;
  if (v22) {
    operator delete(v22);
  }
LABEL_34:
  acv2::Reinterleaver::BuildInverseChannelMap((acv2::Reinterleaver *)a1);
  *(_DWORD *)(a1 + 268) = acv2::Reinterleaver::StereoDownmixPossible((_DWORD *)(a1 + 16));
  return a1;
}

void sub_18FF079AC(_Unwind_Exception *a1)
{
  long long v7 = *v4;
  if (*v4)
  {
    *((void *)v1 + 31) = v7;
    operator delete(v7);
  }
  signed int v8 = *v3;
  if (*v3)
  {
    *((void *)v1 + 28) = v8;
    operator delete(v8);
  }
  uint8x8_t v9 = *v2;
  if (*v2)
  {
    *((void *)v1 + 25) = v9;
    operator delete(v9);
  }
  __int32 v10 = *v5;
  if (*v5)
  {
    *((void *)v1 + 22) = v10;
    operator delete(v10);
  }
  acv2::AudioConverterBase::~AudioConverterBase(v1);
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  if (__n)
  {
    std::vector<int>::const_reference v4 = __x;
    uint64_t i = (int *)__position.__i_;
    long long v7 = this;
    std::vector<char>::pointer end = this->__end_;
    int value = this->__end_cap_.__value_;
    if (__n <= value - end)
    {
      uint64_t v16 = (char *)end - (char *)__position.__i_;
      if (__n <= end - __position.__i_)
      {
        int v19 = this->__end_;
        std::vector<int>::size_type v18 = __n;
      }
      else
      {
        unint64_t v17 = 0;
        std::vector<int>::size_type v18 = v16 >> 2;
        int v19 = (int *)&end[__n - (v16 >> 2)];
        do
        {
          end[v17 / 4] = *__x;
          v17 += 4;
        }
        while (4 * __n - 4 * v18 != v17);
        this->__end_ = v19;
        if (end == __position.__i_) {
          return (std::vector<int>::iterator)this;
        }
      }
      unsigned int v20 = &__position.__i_[__n];
      unint64_t v21 = &v19[-__n];
      long long v22 = v19;
      if (v21 < end)
      {
        long long v22 = v19;
        do
        {
          int v23 = *v21++;
          *v22++ = v23;
        }
        while (v21 < end);
      }
      this->__end_ = v22;
      if (v19 != v20) {
        this = (std::vector<int> *)memmove(&v19[-(v19 - v20)], __position.__i_, (char *)v19 - (char *)v20);
      }
      if (i <= v4)
      {
        if (v7->__end_ <= v4) {
          std::vector<int>::size_type v24 = 0;
        }
        else {
          std::vector<int>::size_type v24 = __n;
        }
        v4 += v24;
      }
      do
      {
        *i++ = *v4;
        --v18;
      }
      while (v18);
    }
    else
    {
      std::vector<int>::pointer begin = this->__begin_;
      unint64_t v11 = __n + end - this->__begin_;
      if (v11 >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = __position.__i_ - begin;
      uint64_t v13 = (char *)value - (char *)begin;
      if (v13 >> 1 > v11) {
        unint64_t v11 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v11;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v25 = (std::vector<int>::value_type *)(v14 + 4 * v12);
      uint64_t v26 = &v25[__n];
      std::vector<int>::size_type v27 = 4 * __n;
      unint64_t v28 = v25;
      do
      {
        *v28++ = *v4;
        v27 -= 4;
      }
      while (v27);
      int v29 = (std::vector<int> *)v7->__begin_;
      if (v7->__begin_ != i)
      {
        int v30 = i;
        do
        {
          std::vector<int>::value_type v31 = *--v30;
          *--unint64_t v25 = v31;
        }
        while (v30 != (int *)v29);
      }
      unint64_t v32 = (int *)(v14 + 4 * v15);
      uint64_t v33 = v7->__end_;
      int64_t v34 = (char *)v33 - (char *)i;
      if (v33 != i) {
        memmove(v26, i, (char *)v33 - (char *)i);
      }
      this = (std::vector<int> *)v7->__begin_;
      v7->__begin_ = v25;
      v7->__end_ = (std::vector<int>::value_type *)((char *)v26 + v34);
      v7->__end_cap_.__value_ = v32;
      if (this)
      {
        operator delete(this);
      }
    }
  }
  return (std::vector<int>::iterator)this;
}

void DSPGraph::Graph::getParameterList(DSPGraph::Graph *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 67);
  if (v2)
  {
    std::vector<int>::const_reference v4 = 0;
    long long v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if ((unint64_t)v4 >= v6)
      {
        uint64_t v8 = (v4 - v5) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v6 - (void)v5) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v6 - (void)v5) >> 1;
        }
        if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (char *)(v10 + 4 * v8);
        *(_DWORD *)uint64_t v12 = *((_DWORD *)v2 + 4);
        long long v7 = v12 + 4;
        while (v4 != v5)
        {
          int v13 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v12 - 1) = v13;
          v12 -= 4;
        }
        unint64_t v6 = v10 + 4 * v11;
        *a2 = v12;
        a2[1] = v7;
        a2[2] = (char *)v6;
        if (v5) {
          operator delete(v5);
        }
        long long v5 = v12;
      }
      else
      {
        *(_DWORD *)std::vector<int>::const_reference v4 = *((_DWORD *)v2 + 4);
        long long v7 = v4 + 4;
      }
      a2[1] = v7;
      uint64_t v2 = (uint64_t *)*v2;
      std::vector<int>::const_reference v4 = v7;
    }
    while (v2);
  }
}

void sub_18FF07D14(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void acv2::Reinterleaver::BuildInverseChannelMap(acv2::Reinterleaver *this)
{
  *((unsigned char *)this + 265) = 1;
  memset(*((void **)this + 30), 255, 4 * *((unsigned int *)this + 11));
  unint64_t v2 = *((unsigned int *)this + 21);
  if (!v2)
  {
    unint64_t v2 = 0;
    char v4 = 0;
    goto LABEL_11;
  }
  uint64_t v3 = 0;
  char v4 = 0;
  uint64_t v5 = *((void *)this + 24);
  while (1)
  {
    uint64_t v6 = *(int *)(v5 + 4 * v3);
    if (v6 == -1)
    {
      char v4 = 1;
      goto LABEL_7;
    }
    uint64_t v7 = *((void *)this + 30);
    if (*(_DWORD *)(v7 + 4 * v6) != -1) {
      break;
    }
    *(_DWORD *)(v7 + 4 * v6) = v3;
    unint64_t v2 = *((unsigned int *)this + 21);
LABEL_7:
    if (++v3 >= v2) {
      goto LABEL_11;
    }
  }
  *((unsigned char *)this + 265) = 0;
LABEL_11:
  unint64_t v8 = *((unsigned int *)this + 20);
  if (v8)
  {
    if ((*((unsigned char *)this + 68) & 0x20) != 0)
    {
      unint64_t v2 = 1;
    }
    else if (!v2)
    {
      return;
    }
    unint64_t v9 = v8 / v2;
    BOOL v10 = v9 > 8;
    uint64_t v11 = (1 << v9) & 0x114;
    if (!v10 && v11 != 0)
    {
      if (((*((_DWORD *)this + 69) == 1) & v4) == 1
        && acv2::Reinterleaver::BuildInverseChannelMap(void)::token[0] != -1)
      {
        dispatch_once(acv2::Reinterleaver::BuildInverseChannelMap(void)::token, &__block_literal_global_2138);
      }
      uint64_t v13 = *((unsigned int *)this + 11);
      if (v13)
      {
        unsigned __int8 v14 = 0;
        uint64_t v15 = (int *)*((void *)this + 30);
        do
        {
          int v16 = *v15++;
          v14 |= v16 == -1;
          --v13;
        }
        while (v13);
        if (((*((_DWORD *)this + 69) == 2) & v14) != 0
          && acv2::Reinterleaver::BuildInverseChannelMap(void)::token != -1)
        {
          dispatch_once(&acv2::Reinterleaver::BuildInverseChannelMap(void)::token, &__block_literal_global_3);
        }
      }
    }
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      std::vector<int>::size_type v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unsigned __int8 v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    std::vector<int>::size_type v18 = v9;
    int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v12 = &v9[v17];
  return result;
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t acv2::Reinterleaver::StereoDownmixPossible(_DWORD *a1)
{
  BOOL v1 = a1[7] == 2 && a1[17] == 1;
  if (v1 && a1[2] == 1819304813)
  {
    int v2 = a1[8];
    int v4 = a1[5];
    int v3 = a1[6];
    int v5 = a1[4];
    int v6 = a1[3] & 0xF;
    BOOL v7 = v6 == 9 && v4 == 1;
    if (v7 && (v2 == 32 ? (BOOL v8 = v3 == 8) : (BOOL v8 = 0), v8))
    {
      int v9 = a1[12];
      if (v5 == 8 && v9 == 1819304813)
      {
        if ((a1[13] & 0xF) == 9 && a1[15] == 1 && a1[18] == 32 && a1[16] == 4)
        {
          int v9 = 1819304813;
          if (a1[14] == 4) {
            return 1;
          }
        }
        else
        {
          int v9 = 1819304813;
        }
      }
    }
    else
    {
      int v9 = a1[12];
    }
    BOOL v12 = v6 == 12 && v4 == 1;
    if (v12 && v2 == 16 && v3 == 4 && v5 == 4 && v9 == 1819304813)
    {
      if ((a1[13] & 0xF) == 0xC && a1[15] == 1 && a1[18] == 16 && a1[16] == 2 && a1[14] == 2) {
        return 2;
      }
    }
    else
    {
      BOOL v17 = v2 == 32 && v12;
      BOOL v20 = v17 && v3 == 8 && v5 == 8 && v9 == 1819304813;
      if (v20 && (a1[13] & 0xF) == 0xC && a1[15] == 1 && a1[18] == 32 && a1[16] == 4 && a1[14] == 4) {
        return 3;
      }
    }
  }
  return 0;
}

void acv2::Reinterleaver::SetLayouts(std::vector<int> *this, const AudioChannelLayout *const *a2, const AudioChannelLayout *a3)
{
  int v3 = a3;
  int v4 = a2;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  int v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 0x10000)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)a2 + 1));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.i32[0]) {
      goto LABEL_13;
    }
  }
  else if (v6)
  {
    if ((unsigned __int16)*(_DWORD *)a2) {
      goto LABEL_13;
    }
  }
  else if (*((_DWORD *)a2 + 2))
  {
    goto LABEL_13;
  }
  if (a3->mChannelLayoutTag == 0x10000)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)a3->mChannelBitmap);
    v8.i16[0] = vaddlv_u8(v8);
    if (!v8.i32[0]) {
      goto LABEL_39;
    }
    goto LABEL_13;
  }
  if (a3->mChannelLayoutTag)
  {
    if (!(unsigned __int16)a3->mChannelLayoutTag) {
      goto LABEL_39;
    }
LABEL_13:
    if (v6 == 0x10000)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)a2 + 1));
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.i32[0]) {
        goto LABEL_25;
      }
    }
    else if (v6)
    {
      if ((unsigned __int16)*(_DWORD *)a2) {
        goto LABEL_25;
      }
    }
    else if (*((_DWORD *)a2 + 2))
    {
      goto LABEL_25;
    }
    unsigned int value_high = HIDWORD(this[1].__end_cap_.__value_);
    if (value_high >= 3) {
      goto LABEL_49;
    }
    if (value_high == 2) {
      int v11 = 6619138;
    }
    else {
      int v11 = 6553601;
    }
    LODWORD(v26[0]) = v11;
    int v4 = (const AudioChannelLayout *const *)v26;
LABEL_25:
    if (a3->mChannelLayoutTag == 0x10000)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)a3->mChannelBitmap);
      v13.i16[0] = vaddlv_u8(v13);
      __int32 mChannelLayoutTag = v13.i32[0];
    }
    else if (a3->mChannelLayoutTag)
    {
      __int32 mChannelLayoutTag = (unsigned __int16)a3->mChannelLayoutTag;
    }
    else
    {
      __int32 mChannelLayoutTag = a3->mNumberChannelDescriptions;
    }
    std::vector<int>::size_type end_high = HIDWORD(this[3].__end_);
    if (mChannelLayoutTag) {
      goto LABEL_36;
    }
    if (end_high < 3)
    {
      if (end_high == 2) {
        int v15 = 6619138;
      }
      else {
        int v15 = 6553601;
      }
      LODWORD(v25[0]) = v15;
      int v3 = (const AudioChannelLayout *)v25;
LABEL_36:
      v16.__i_ = this[8].__begin_;
      this[8].__end_ = (std::vector<int>::pointer)v16.__i_;
      std::vector<int>::value_type __x = -1;
      std::vector<int>::insert(this + 8, v16, end_high, &__x);
      std::vector<int>::value_type __x = HIDWORD(this[3].__end_);
      AudioFormatProperty_ChannelMap(v4, v3, (unsigned int *)&__x, this[8].__begin_);
      acv2::Reinterleaver::BuildInverseChannelMap((acv2::Reinterleaver *)this);
      return;
    }
LABEL_49:
    std::terminate();
  }
  if (a3->mNumberChannelDescriptions) {
    goto LABEL_13;
  }
LABEL_39:
  std::vector<int>::size_type v18 = this + 8;
  v17.__i_ = this[8].__begin_;
  this[8].__end_ = (std::vector<int>::pointer)v17.__i_;
  std::vector<int>::size_type v19 = HIDWORD(this[3].__end_);
  std::vector<int>::value_type __x = -1;
  std::vector<int>::insert(this + 8, v17, v19, &__x);
  unsigned int v20 = HIDWORD(v18[-7].__end_cap_.__value_);
  uint64_t v21 = HIDWORD(v18[-5].__end_);
  if (v20 == 1)
  {
    if (v21) {
      bzero(v18->__begin_, 4 * v21);
    }
  }
  else
  {
    if (v21 >= v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = v21;
    }
    if (v21)
    {
      uint64_t v22 = 0;
      std::vector<int>::pointer begin = v18->__begin_;
      do
      {
        begin[v22] = v22;
        ++v22;
      }
      while (v21 != v22);
    }
  }
}

void DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, CFTypeRef cf, const __CFString *a3)
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  if (!cf)
  {
    CFDictionaryRef v278 = 0;
LABEL_458:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v278, cf);
  if (!v278) {
    goto LABEL_458;
  }
  int v5 = applesauce::CF::details::at_key<char const(&)[6]>(v278, "Boxes");
  if (!v5) {
    goto LABEL_460;
  }
  int v6 = v5;
  CFRetain(v5);
  CFTypeID v7 = CFGetTypeID(v6);
  if (v7 != CFArrayGetTypeID())
  {
    CFRelease(v6);
LABEL_460:
    LOBYTE(v276) = 0;
    char v277 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&buf, "setPropertyStrip");
    std::string::basic_string[abi:ne180100]<0>(&v281, "'Boxes' key not found");
    DSPGraph::ThrowException(1886548769, (long long *)__p, 2050, &buf, &v281);
  }
  CFArrayRef v276 = (CFArrayRef)v6;
  char v277 = 1;
  if (DSPGraph::getLog(void)::onceToken != -1) {
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
  }
  os_signpost_id_t spid = os_signpost_id_make_with_pointer((os_log_t)DSPGraph::getLog(void)::gLog, this);
  uint64_t v238 = (void *)((char *)this + 784);
  unint64_t v8 = 0;
  unint64_t v252 = spid - 1;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    if (!v276)
    {
      uint64_t v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v194, "Could not construct");
    }
    if (v8 >= CFArrayGetCount(v276)) {
      break;
    }
    if (!v277) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (!v276)
    {
      uint64_t v195 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v195, "Could not construct");
    }
    applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v274, v276, v8);
    if (!v275)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&buf, "setPropertyStrip");
      std::string::basic_string[abi:ne180100]<0>(&v281, "BoxInfo must be a dictionary");
      DSPGraph::ThrowException(1886548769, (long long *)__p, 2060, &buf, &v281);
    }
    if (!v274)
    {
      uint64_t v196 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v196, "Could not construct");
    }
    CFStringRef v9 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[5]>(v274, "Name");
    if (!v9)
    {
      LOBYTE(__p[0]) = 0;
      char v273 = 0;
LABEL_393:
      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
      std::string::basic_string[abi:ne180100]<0>(&v280, "'Name' not found in BoxInfo dictionary");
      DSPGraph::ThrowException(1886548769, &buf, 2066, &v281, &v280);
    }
    applesauce::CF::convert_as<std::string,0>((uint64_t)__p, v9);
    if (!v273) {
      goto LABEL_393;
    }
    unint64_t v10 = v272;
    if ((v272 & 0x80u) != 0) {
      unint64_t v10 = (unint64_t)__p[1];
    }
    if (!v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
      std::string::basic_string[abi:ne180100]<0>(&v280, "Box name is empty");
      DSPGraph::ThrowException(1886548769, &buf, 2069, &v281, &v280);
    }
    int v11 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>(v238, (unsigned __int8 *)__p);
    if (!v11 || (v251 = (char *)*((void *)v11 + 5)) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
      v191 = __p;
      if ((v272 & 0x80u) != 0) {
        v191 = (void **)__p[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Box %s not found", v190, v191);
    }
    unint64_t v240 = v8;
    if (!v275) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    CFDictionaryRef v12 = v274;
    if (!v274)
    {
      std::string v197 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v197, "Could not construct");
    }
    CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)"Properties", 10, 0x8000100u, 0);
    *(void *)&long long buf = v13;
    if (!v13)
    {
      char v198 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v198, "Could not construct");
    }
    int Value = CFDictionaryGetValue(v12, v13);
    CFRelease(v13);
    if (!Value) {
      goto LABEL_474;
    }
    CFRetain(Value);
    CFTypeID v15 = CFGetTypeID(Value);
    if (v15 != CFArrayGetTypeID())
    {
      CFRelease(Value);
LABEL_474:
      LOBYTE(theArray) = 0;
      char v270 = 0;
      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
      std::string::basic_string[abi:ne180100]<0>(&v280, "'Properties' array not found in BoxInfo dictionary");
      DSPGraph::ThrowException(1886548769, &buf, 2079, &v281, &v280);
    }
    unint64_t v16 = 0;
    int v17 = 0;
    CFArrayRef theArray = (CFArrayRef)Value;
    char v270 = 1;
    v250 = v251 + 32;
    while (1)
    {
      if (!theArray)
      {
        unint64_t v177 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v177, "Could not construct");
      }
      if (CFArrayGetCount(theArray) <= v16) {
        break;
      }
      if (!v270) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (!theArray)
      {
        std::string v178 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v178, "Could not construct");
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&theDict, theArray, v16);
      if (!v268)
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
        std::string::basic_string[abi:ne180100]<0>(&v280, "Property dictionary not found");
        DSPGraph::ThrowException(1886548769, &buf, 2088, &v281, &v280);
      }
      unint64_t v18 = DSPGraph::Graph::setPropertyStrip(__CFDictionary const*,__CFString const*)::$_0::operator()<char const*>(&theDict, (const UInt8 *)"PropertyID");
      if (!HIDWORD(v18))
      {
        unint64_t v18 = DSPGraph::Graph::setPropertyStrip(__CFDictionary const*,__CFString const*)::$_0::operator()<char const*>(&theDict, (const UInt8 *)"Number");
        if (!HIDWORD(v18))
        {
          std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
          std::string::basic_string[abi:ne180100]<0>(&v280, "PropertyID not found");
          DSPGraph::ThrowException(1886548769, &buf, 2108, &v281, &v280);
        }
      }
      if (!theDict)
      {
        uint64_t v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v180, "Could not construct");
      }
      int v254 = v17;
      CFNumberRef v19 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[6]>(theDict, "Scope");
      if (v19)
      {
        CFNumberRef v20 = applesauce::CF::convert_as<unsigned int,0>(v19);
        if ((unint64_t)v20 <= 0x100000000) {
          uint64_t v21 = 0x100000000;
        }
        else {
          uint64_t v21 = (uint64_t)v20;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      CFDictionaryRef v22 = theDict;
      if (!theDict)
      {
        uint64_t v179 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v179, "Could not construct");
      }
      CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"Element", 7, 0x8000100u, 0);
      if (!v23)
      {
        std::vector<int>::size_type v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v27, "Could not construct");
      }
      CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v22, v23);
      CFRelease(v23);
      if (v24)
      {
        CFNumberRef v25 = applesauce::CF::convert_as<unsigned int,0>(v24);
        uint64_t v26 = 0x100000000;
        if ((unint64_t)v25 > 0x100000000) {
          uint64_t v26 = (uint64_t)v25;
        }
        uint64_t v253 = v26;
      }
      else
      {
        uint64_t v253 = 0;
      }
      v266 = 0;
      v266 = CFDictionaryGetValue(theDict, @"Value");
      if (!v266)
      {
        if (!theDict)
        {
          uint64_t v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v183, "Could not construct");
        }
        uint64_t v33 = applesauce::CF::details::at_key<char const(&)[5]>(theDict, "Data");
        if (v33)
        {
          int64_t v34 = v33;
          CFRetain(v33);
          CFTypeID v35 = CFGetTypeID(v34);
          if (v35 == CFDataGetTypeID())
          {
            CFDataRef theData = (CFDataRef)v34;
            char v265 = 1;
            if (DSPGraph::getLog(void)::onceToken != -1) {
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
            }
            if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              float32x4_t v36 = DSPGraph::getLog(void)::gLog;
              if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
              {
                long long v37 = v251 + 32;
                if (v251[55] < 0) {
                  long long v37 = *(char **)v250;
                }
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v37;
                _os_signpost_emit_with_name_impl(&dword_18FEC0000, v36, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
              }
            }
            if (!v265) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            if (!theData)
            {
              v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v188, "Could not construct");
            }
            CFIndex Length = CFDataGetLength(theData);
            if (!v265) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            CFIndex v39 = Length;
            if (!theData)
            {
              uint64_t v189 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v189, "Could not construct");
            }
            BytePtr = CFDataGetBytePtr(theData);
            uint64_t v41 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, CFIndex, const UInt8 *))(*(void *)v251 + 312))(v251, v18, v21, v253, v39, BytePtr);
            if (DSPGraph::getLog(void)::onceToken != -1) {
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
            }
            if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              float32x4_t v42 = DSPGraph::getLog(void)::gLog;
              if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
              {
                uint64_t v43 = v251 + 32;
                if (v251[55] < 0) {
                  uint64_t v43 = *(char **)v250;
                }
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v43;
                _os_signpost_emit_with_name_impl(&dword_18FEC0000, v42, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
              }
            }
            if (v41)
            {
              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
              uint64_t v187 = __p;
              if ((v272 & 0x80u) != 0) {
                uint64_t v187 = (void **)__p[0];
              }
              DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", v186, v187, v18, v21, v253, v41);
            }
            goto LABEL_299;
          }
          CFRelease(v34);
        }
        LOBYTE(theData) = 0;
        char v265 = 0;
        if (!theDict) {
          goto LABEL_399;
        }
        CFNumberRef v44 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(theDict, (const UInt8 *)"UInt32");
        if ((unint64_t)v44 >> 32)
        {
          __val[0] = v44;
          uint64_t v53 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)v251 + 312))(v251, v18, v21, v253, 4, __val);
          if (v53)
          {
            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v281, "applyPropertyStripScalarValue");
            if (v251[55] < 0) {
              v250 = *(char **)v250;
            }
            std::to_string(&v279, __val[0]);
            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v185 = &v279;
            }
            else {
              v185 = (std::string *)v279.__r_.__value_.__r.__words[0];
            }
            DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to %s from property strip key %s failed with error %d", v184, v250, v18, v21, v253, v185, "UInt32", v53);
          }
          goto LABEL_299;
        }
        if (!theDict) {
          goto LABEL_399;
        }
        CFArrayRef v45 = (const __CFArray *)applesauce::CF::details::at_key<char const*&>(theDict, (const UInt8 *)"UInt32");
        if (v45 && (CFArrayRef v46 = v45, TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v46)))
        {
          CFIndex Count = CFArrayGetCount(v46);
          int v49 = Count;
          if (Count << 32)
          {
            if (Count << 32 < 0) {
LABEL_355:
            }
              std::vector<float>::__throw_length_error[abi:ne180100]();
            uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((int)Count);
            uint64_t v52 = &v50[4 * v51];
          }
          else
          {
            uint64_t v50 = 0;
            uint64_t v52 = 0;
          }
          if (v49 < 1)
          {
            BOOL v93 = 1;
            goto LABEL_156;
          }
          CFIndex v78 = 0;
          uint64_t v79 = v49;
          __int16 v80 = v50;
          uint64_t v245 = v79;
          do
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v46, v78);
            CFNumberRef v82 = applesauce::CF::convert_as<unsigned int,0>(ValueAtIndex);
            if (!((unint64_t)v82 >> 32))
            {
              v248 &= 0xFFFFFFFFFFFFFF00;
              if (v50) {
                operator delete(v50);
              }
              goto LABEL_100;
            }
            int v83 = (int)v82;
            if (v80 >= v52)
            {
              uint64_t v84 = (v80 - v50) >> 2;
              unint64_t v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 62) {
                goto LABEL_355;
              }
              if ((v52 - v50) >> 1 > v85) {
                unint64_t v85 = (v52 - v50) >> 1;
              }
              if ((unint64_t)(v52 - v50) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v85;
              }
              if (v86)
              {
                unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v86);
                unint64_t v88 = v18;
                uint64_t v89 = v21;
              }
              else
              {
                unint64_t v88 = v18;
                uint64_t v89 = v21;
                uint64_t v87 = 0;
              }
              __int16 v90 = (char *)(v86 + 4 * v84);
              *(_DWORD *)__int16 v90 = v83;
              unsigned int v91 = v90 + 4;
              while (v80 != v50)
              {
                int v92 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v90 - 1) = v92;
                v90 -= 4;
              }
              uint64_t v52 = (char *)(v86 + 4 * v87);
              if (v50) {
                operator delete(v50);
              }
              uint64_t v50 = v90;
              __int16 v80 = v91;
              uint64_t v21 = v89;
              unint64_t v18 = v88;
              uint64_t v79 = v245;
            }
            else
            {
              *(_DWORD *)__int16 v80 = v82;
              v80 += 4;
            }
            ++v78;
          }
          while (v78 != v79);
          BOOL v93 = v50 == v80;
          if (v50 == v80)
          {
            operator delete(v80);
            unint64_t v248 = (unint64_t)v50;
          }
          else
          {
            uint64_t v94 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, void, char *))(*(void *)v251 + 312))(v251, v18, v21, v253, (v80 - v50) & 0xFFFFFFFC, v50);
            if (v94)
            {
              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v281, "applyPropertyStripScalarValue");
              if (v251[55] < 0) {
                v250 = *(char **)v250;
              }
              std::to_string(&v279, *(_DWORD *)v50);
              if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v213 = &v279;
              }
              else {
                v213 = (std::string *)v279.__r_.__value_.__r.__words[0];
              }
              DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to [%s, ...] from property strip key %s failed with error %d", v212, v250, v18, v21, v253, v213, "UInt32", v94);
            }
LABEL_156:
            unint64_t v248 = (unint64_t)v50;
            if (v50) {
              operator delete(v50);
            }
            if (!v93)
            {
LABEL_299:
              std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theData);
              goto LABEL_300;
            }
          }
        }
        else
        {
          v248 &= 0xFFFFFFFFFFFFFF00;
        }
LABEL_100:
        if (!theDict) {
          goto LABEL_399;
        }
        CFNumberRef v54 = (const __CFNumber *)applesauce::CF::details::at_key<char const*&>(theDict, (const UInt8 *)"UInt64");
        if (v54)
        {
          CFNumberRef v55 = applesauce::CF::convert_as<unsigned long long,0>(v54);
          if (v56)
          {
            *(void *)unsigned int __val = v55;
            uint64_t v57 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)v251 + 312))(v251, v18, v21, v253, 8, __val);
            if (v57)
            {
              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v281, "applyPropertyStripScalarValue");
              if (v251[55] < 0) {
                v250 = *(char **)v250;
              }
              std::to_string(&v279, *(unint64_t *)__val);
              if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v193 = &v279;
              }
              else {
                uint64_t v193 = (std::string *)v279.__r_.__value_.__r.__words[0];
              }
              DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to %s from property strip key %s failed with error %d", v192, v250, v18, v21, v253, v193, "UInt64", v57);
            }
            goto LABEL_299;
          }
        }
        if (!theDict) {
          goto LABEL_399;
        }
        int v58 = applesauce::CF::details::at_key<char const*&>(theDict, (const UInt8 *)"UInt64");
        uint64_t v244 = v21;
        if (!v58) {
          goto LABEL_171;
        }
        long long v59 = v58;
        CFTypeID v60 = CFArrayGetTypeID();
        if (v60 != CFGetTypeID(v59)) {
          goto LABEL_171;
        }
        int v61 = CFArrayGetCount((CFArrayRef)v59);
        long long buf = 0uLL;
        unint64_t v283 = 0;
        std::vector<unsigned long long>::reserve((void **)&buf, v61);
        if (v61 <= 0)
        {
          unsigned int v71 = (unint64_t *)*((void *)&buf + 1);
          uint64_t v65 = (unint64_t *)buf;
LABEL_163:
          int v95 = v71;
          if (v65 != v71)
          {
            uint64_t v96 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, void, unint64_t *))(*(void *)v251 + 312))(v251, v18, v244, v253, (v71 - v65) & 0xFFFFFFF8, v65);
            int v95 = v65;
            if (v96)
            {
              std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
              std::string::basic_string[abi:ne180100]<0>(&v281, "applyPropertyStripScalarValue");
              if (v251[55] < 0) {
                v250 = *(char **)v250;
              }
              std::to_string(&v279, *v65);
              if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v207 = &v279;
              }
              else {
                v207 = (std::string *)v279.__r_.__value_.__r.__words[0];
              }
              DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to [%s, ...] from property strip key %s failed with error %d", v206, v250, v18, v244, v253, v207, "UInt64", v96);
            }
          }
          if (v95) {
            operator delete(v95);
          }
          if (v65 == v71) {
            goto LABEL_172;
          }
        }
        else
        {
          CFIndex v62 = 0;
          uint64_t v63 = v61;
          unint64_t v64 = v283;
          uint64_t v65 = (unint64_t *)buf;
          while (1)
          {
            CFNumberRef v66 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v59, v62);
            CFNumberRef v67 = applesauce::CF::convert_as<unsigned long long,0>(v66);
            if (!v68) {
              break;
            }
            CFNumberRef v69 = v67;
            unsigned int v70 = (unint64_t *)*((void *)&buf + 1);
            if (*((void *)&buf + 1) >= v64)
            {
              uint64_t v72 = (uint64_t)(*((void *)&buf + 1) - (void)v65) >> 3;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 61)
              {
                unint64_t v283 = v64;
                *(void *)&long long buf = v65;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v64 - (void)v65) >> 2 > v73) {
                unint64_t v73 = (uint64_t)(v64 - (void)v65) >> 2;
              }
              if (v64 - (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v73;
              }
              if (v74) {
                unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v74);
              }
              else {
                uint64_t v75 = 0;
              }
              uint64_t v76 = (unint64_t *)(v74 + 8 * v72);
              *uint64_t v76 = (unint64_t)v69;
              unsigned int v71 = v76 + 1;
              while (v70 != v65)
              {
                unint64_t v77 = *--v70;
                *--uint64_t v76 = v77;
              }
              unint64_t v64 = v74 + 8 * v75;
              *((void *)&buf + 1) = v71;
              if (v65) {
                operator delete(v65);
              }
              uint64_t v65 = v76;
            }
            else
            {
              **((void **)&buf + 1) = v67;
              unsigned int v71 = v70 + 1;
            }
            *((void *)&buf + 1) = v71;
            if (++v62 == v63) {
              goto LABEL_163;
            }
          }
          unint64_t v283 = v64;
          *(void *)&long long buf = v65;
          if (v65)
          {
            *((void *)&buf + 1) = v65;
            operator delete(v65);
          }
LABEL_171:
          uint64_t v65 = (unint64_t *)((unint64_t)v242 & 0xFFFFFFFFFFFFFF00);
LABEL_172:
          if (!theDict) {
            goto LABEL_399;
          }
          int v97 = applesauce::CF::details::at_key<char const*&>(theDict, (const UInt8 *)"Float32");
          if (!v97 || (unint64_t v98 = applesauce::CF::convert_as<float,0>((uint64_t)v97), !HIDWORD(v98)))
          {
            if (theDict)
            {
              unint64_t v99 = applesauce::CF::details::at_key<char const*&>(theDict, (const UInt8 *)"Float32");
              if (!v99) {
                goto LABEL_212;
              }
              uint64_t v100 = v99;
              CFTypeID v101 = CFArrayGetTypeID();
              if (v101 != CFGetTypeID(v100)) {
                goto LABEL_212;
              }
              int v102 = CFArrayGetCount((CFArrayRef)v100);
              long long buf = 0uLL;
              unint64_t v283 = 0;
              std::vector<float>::reserve((void **)&buf, v102);
              if (v102 <= 0)
              {
                CFDictionaryRef v110 = (float *)*((void *)&buf + 1);
                CFArrayRef v105 = (float *)buf;
LABEL_203:
                if (v105 != v110)
                {
                  uint64_t v118 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, void, float *))(*(void *)v251 + 312))(v251, v18, v244, v253, (v110 - v105) & 0xFFFFFFFC, v105);
                  if (v118)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                    std::string::basic_string[abi:ne180100]<0>(&v281, "applyPropertyStripScalarValue");
                    if (v251[55] < 0) {
                      v250 = *(char **)v250;
                    }
                    std::to_string(&v279, *v105);
                    if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v218 = &v279;
                    }
                    else {
                      v218 = (std::string *)v279.__r_.__value_.__r.__words[0];
                    }
                    DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to [%s, ...] from property strip key %s failed with error %d", v217, v250, v18, v244, v253, v218, "Float32", v118);
                  }
                }
                if (v105) {
                  operator delete(v105);
                }
                if (v105 == v110) {
                  goto LABEL_213;
                }
LABEL_298:
                v241 = v105;
                v242 = v65;
                goto LABEL_299;
              }
              CFIndex v103 = 0;
              uint64_t v246 = v102;
              unint64_t v104 = v283;
              CFArrayRef v105 = (float *)buf;
              while (1)
              {
                char v106 = CFArrayGetValueAtIndex((CFArrayRef)v100, v103);
                unint64_t v107 = applesauce::CF::convert_as<float,0>((uint64_t)v106);
                if (!HIDWORD(v107)) {
                  break;
                }
                int v108 = v107;
                char v109 = (float *)*((void *)&buf + 1);
                if (*((void *)&buf + 1) >= v104)
                {
                  uint64_t v111 = (uint64_t)(*((void *)&buf + 1) - (void)v105) >> 2;
                  unint64_t v112 = v111 + 1;
                  if ((unint64_t)(v111 + 1) >> 62)
                  {
                    unint64_t v283 = v104;
                    *(void *)&long long buf = v105;
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v104 - (void)v105) >> 1 > v112) {
                    unint64_t v112 = (uint64_t)(v104 - (void)v105) >> 1;
                  }
                  if (v104 - (unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v113 = v112;
                  }
                  if (v113) {
                    unint64_t v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v113);
                  }
                  else {
                    uint64_t v114 = 0;
                  }
                  uint64_t v115 = (float *)(v113 + 4 * v111);
                  *(_DWORD *)uint64_t v115 = v108;
                  CFDictionaryRef v110 = v115 + 1;
                  while (v109 != v105)
                  {
                    int v116 = *((_DWORD *)v109-- - 1);
                    *((_DWORD *)v115-- - 1) = v116;
                  }
                  unint64_t v104 = v113 + 4 * v114;
                  *((void *)&buf + 1) = v110;
                  if (v105) {
                    operator delete(v105);
                  }
                  CFArrayRef v105 = v115;
                }
                else
                {
                  **((_DWORD **)&buf + 1) = v107;
                  CFDictionaryRef v110 = v109 + 1;
                }
                *((void *)&buf + 1) = v110;
                if (++v103 == v246) {
                  goto LABEL_203;
                }
              }
              unint64_t v283 = v104;
              *(void *)&long long buf = v105;
              if (v105)
              {
                *((void *)&buf + 1) = v105;
                operator delete(v105);
              }
LABEL_212:
              CFArrayRef v105 = (float *)((unint64_t)v241 & 0xFFFFFFFFFFFFFF00);
LABEL_213:
              if (theDict)
              {
                std::string::size_type v119 = applesauce::CF::details::at_key<char const*&>(theDict, (const UInt8 *)"Float64");
                if (v119)
                {
                  unint64_t v120 = applesauce::CF::convert_as<double,0>((unint64_t)v119);
                  if (v121)
                  {
                    *(void *)unsigned int __val = v120;
                    uint64_t v122 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)v251 + 312))(v251, v18, v244, v253, 8, __val);
                    if (v122)
                    {
                      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                      std::string::basic_string[abi:ne180100]<0>(&v281, "applyPropertyStripScalarValue");
                      if (v251[55] < 0) {
                        v250 = *(char **)v250;
                      }
                      std::to_string(&v279, *(double *)__val);
                      if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v204 = &v279;
                      }
                      else {
                        uint64_t v204 = (std::string *)v279.__r_.__value_.__r.__words[0];
                      }
                      DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to %s from property strip key %s failed with error %d", v203, v250, v18, v244, v253, v204, "Float64", v122);
                    }
                    goto LABEL_298;
                  }
                }
                if (theDict)
                {
                  std::string::size_type v123 = applesauce::CF::details::at_key<char const*&>(theDict, (const UInt8 *)"Float64");
                  v243 = v105;
                  if (!v123 || (uint64_t v124 = v123, v125 = CFArrayGetTypeID(), v125 != CFGetTypeID(v124)))
                  {
                    v239 &= 0xFFFFFFFFFFFFFF00;
                    goto LABEL_225;
                  }
                  CFIndex v126 = CFArrayGetCount((CFArrayRef)v124);
                  int v127 = v126;
                  if (v126 << 32)
                  {
                    if (v126 << 32 < 0) {
LABEL_385:
                    }
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    std::string::size_type v128 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((int)v126);
                    uint64_t v130 = (char *)&v128[v129];
                  }
                  else
                  {
                    uint64_t v130 = 0;
                    std::string::size_type v128 = 0;
                  }
                  if (v127 < 1)
                  {
                    BOOL v174 = 1;
                    if (!v128) {
                      goto LABEL_330;
                    }
                  }
                  else
                  {
                    CFIndex v161 = 0;
                    uint64_t v247 = v127;
                    std::string v162 = v128;
                    do
                    {
                      uint64_t v163 = CFArrayGetValueAtIndex((CFArrayRef)v124, v161);
                      unint64_t v164 = applesauce::CF::convert_as<double,0>((unint64_t)v163);
                      if (!v165)
                      {
                        v239 &= 0xFFFFFFFFFFFFFF00;
                        if (v162) {
                          operator delete(v162);
                        }
                        goto LABEL_225;
                      }
                      unint64_t v166 = v164;
                      if (v128 >= (double *)v130)
                      {
                        uint64_t v167 = v128 - v162;
                        unint64_t v168 = v167 + 1;
                        if ((unint64_t)(v167 + 1) >> 61) {
                          goto LABEL_385;
                        }
                        if ((v130 - (char *)v162) >> 2 > v168) {
                          unint64_t v168 = (v130 - (char *)v162) >> 2;
                        }
                        if ((unint64_t)(v130 - (char *)v162) >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v169 = v168;
                        }
                        if (v169) {
                          unint64_t v169 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v169);
                        }
                        else {
                          uint64_t v170 = 0;
                        }
                        unint64_t v171 = (double *)(v169 + 8 * v167);
                        *(void *)unint64_t v171 = v166;
                        unint64_t v172 = v171 + 1;
                        while (v128 != v162)
                        {
                          uint64_t v173 = *((void *)v128-- - 1);
                          *((void *)v171-- - 1) = v173;
                        }
                        uint64_t v130 = (char *)(v169 + 8 * v170);
                        if (v162) {
                          operator delete(v162);
                        }
                        std::string v162 = v171;
                        std::string::size_type v128 = v172;
                        CFArrayRef v105 = v243;
                      }
                      else
                      {
                        *(void *)v128++ = v164;
                      }
                      ++v161;
                    }
                    while (v161 != v247);
                    BOOL v174 = v162 == v128;
                    if (v162 != v128)
                    {
                      uint64_t v175 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, void, double *))(*(void *)v251 + 312))(v251, v18, v244, v253, (v128 - v162) & 0xFFFFFFF8, v162);
                      if (v175)
                      {
                        std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                        std::string::basic_string[abi:ne180100]<0>(&v281, "applyPropertyStripScalarValue");
                        if (v251[55] < 0) {
                          v250 = *(char **)v250;
                        }
                        std::to_string(&v279, *v162);
                        if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          v222 = &v279;
                        }
                        else {
                          v222 = (std::string *)v279.__r_.__value_.__r.__words[0];
                        }
                        DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to [%s, ...] from property strip key %s failed with error %d", v221, v250, v18, v244, v253, v222, "Float64", v175);
                      }
                    }
                    std::string::size_type v128 = v162;
                    if (!v162)
                    {
LABEL_330:
                      unint64_t v239 = (unint64_t)v128;
                      if (!v174) {
                        goto LABEL_298;
                      }
LABEL_225:
                      CFDictionaryRef v131 = theDict;
                      if (!theDict)
                      {
                        std::string v200 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v200, "Could not construct");
                      }
                      CFStringRef v132 = CFStringCreateWithBytes(0, (const UInt8 *)"FilePath", 8, 0x8000100u, 0);
                      *(void *)&long long buf = v132;
                      if (!v132)
                      {
                        long long v176 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v176, "Could not construct");
                      }
                      CFStringRef v133 = (const __CFString *)CFDictionaryGetValue(v131, v132);
                      CFRelease(v132);
                      if (v133)
                      {
                        CFRetain(v133);
                        CFTypeID v134 = CFGetTypeID(v133);
                        if (v134 == CFStringGetTypeID())
                        {
                          *(void *)unsigned int __val = v133;
                          char v263 = 1;
                          DSPGraph::createAbsoluteURL((DSPGraph *)&anURL, v133, a3);
                          if (!anURL)
                          {
                            uint64_t v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v214, "Could not construct");
                          }
                          CFStringRef v135 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
                          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, v135);
                          if (!cfa)
                          {
                            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                            std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
                            if (!v263) {
                              std::__throw_bad_optional_access[abi:ne180100]();
                            }
                            v224 = (const __CFString **)applesauce::CF::StringRef::operator->(__val);
                            std::string::basic_string[abi:ne180100]<0>(v260, "???");
                            double v226 = applesauce::CF::StringRef_proxy::convert_or(&v279, *v224, (uint64_t)v260);
                            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              v227 = &v279;
                            }
                            else {
                              v227 = (std::string *)v279.__r_.__value_.__r.__words[0];
                            }
                            DSPGraph::strprintf((DSPGraph *)"Couldn't create file path '%s'. CFURLCopyFileSystemPath failed.", v225, v226, v227);
                          }
                          v279.__r_.__value_.__r.__words[0] = (std::string::size_type)cfa;
                          if (DSPGraph::getLog(void)::onceToken != -1) {
                            dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                          }
                          if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v136 = DSPGraph::getLog(void)::gLog;
                            if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                            {
                              uint64_t v137 = v251 + 32;
                              if (v251[55] < 0) {
                                uint64_t v137 = *(char **)v250;
                              }
                              LODWORD(buf) = 136315138;
                              *(void *)((char *)&buf + 4) = v137;
                              _os_signpost_emit_with_name_impl(&dword_18FEC0000, v136, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                            }
                          }
                          uint64_t v138 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v251 + 312))(v251, v18, v244, v253, 8, &v279);
                          if (DSPGraph::getLog(void)::onceToken != -1) {
                            dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                          }
                          if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v139 = DSPGraph::getLog(void)::gLog;
                            if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                            {
                              uint64_t v140 = v251 + 32;
                              if (v251[55] < 0) {
                                uint64_t v140 = *(char **)v250;
                              }
                              LODWORD(buf) = 136315138;
                              *(void *)((char *)&buf + 4) = v140;
                              _os_signpost_emit_with_name_impl(&dword_18FEC0000, v139, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                            }
                          }
                          if (v138)
                          {
                            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                            std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
                            v216 = __p;
                            if ((v272 & 0x80u) != 0) {
                              v216 = (void **)__p[0];
                            }
                            DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", v215, v216, v18, v244, v253, v138);
                          }
                          if (cfa) {
                            CFRelease(cfa);
                          }
                          if (anURL) {
                            CFRelease(anURL);
                          }
                          goto LABEL_297;
                        }
                        CFRelease(v133);
                      }
                      LOBYTE(__val[0]) = 0;
                      char v263 = 0;
                      if (!theDict)
                      {
                        uint64_t v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v205, "Could not construct");
                      }
                      CFStringRef v141 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[5]>(theDict, "Path");
                      if (v141)
                      {
                        CFStringRef v142 = v141;
                        CFRetain(v141);
                        CFTypeID v143 = CFGetTypeID(v142);
                        if (v143 == CFStringGetTypeID())
                        {
                          CFURLRef anURL = (CFURLRef)v142;
                          char v259 = 1;
                          DSPGraph::createAbsoluteURL((DSPGraph *)&cfa, v142, a3);
                          uint64_t v144 = CFReadStreamCreateWithFile(alloc, (CFURLRef)cfa);
                          std::__split_buffer<std::string>::pointer v145 = v144;
                          CFTypeRef v257 = v144;
                          if (!v144)
                          {
                            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                            std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
                            if (!v259) {
                              std::__throw_bad_optional_access[abi:ne180100]();
                            }
                            v228 = (const __CFString **)applesauce::CF::StringRef::operator->(&anURL);
                            std::string::basic_string[abi:ne180100]<0>(v256, "???");
                            double v230 = applesauce::CF::StringRef_proxy::convert_or(&v279, *v228, (uint64_t)v256);
                            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              v231 = &v279;
                            }
                            else {
                              v231 = (std::string *)v279.__r_.__value_.__r.__words[0];
                            }
                            DSPGraph::strprintf((DSPGraph *)"Couldn't load plist from path '%s'. CFReadStreamCreateWithFile failed.", v229, v230, v231);
                          }
                          CFReadStreamOpen(v144);
                          CFPropertyListRef v146 = CFPropertyListCreateWithStream(alloc, v145, 0, 0, 0, 0);
                          v255[3] = (void *)v146;
                          CFReadStreamClose(v145);
                          if (!v146)
                          {
                            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                            std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
                            if (!v259) {
                              std::__throw_bad_optional_access[abi:ne180100]();
                            }
                            uint64_t v232 = (const __CFString **)applesauce::CF::StringRef::operator->(&anURL);
                            std::string::basic_string[abi:ne180100]<0>(v255, "???");
                            double v234 = applesauce::CF::StringRef_proxy::convert_or(&v279, *v232, (uint64_t)v255);
                            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              v235 = &v279;
                            }
                            else {
                              v235 = (std::string *)v279.__r_.__value_.__r.__words[0];
                            }
                            DSPGraph::strprintf((DSPGraph *)"Couldn't load plist from path '%s'. CFPropertyListCreateWithStream failed.", v233, v234, v235);
                          }
                          v279.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
                          if (DSPGraph::getLog(void)::onceToken != -1) {
                            dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                          }
                          if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            long long v147 = DSPGraph::getLog(void)::gLog;
                            if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                            {
                              uint64_t v148 = v251 + 32;
                              if (v251[55] < 0) {
                                uint64_t v148 = *(char **)v250;
                              }
                              LODWORD(buf) = 136315138;
                              *(void *)((char *)&buf + 4) = v148;
                              _os_signpost_emit_with_name_impl(&dword_18FEC0000, v147, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                            }
                          }
                          uint64_t v149 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(void *)v251 + 312))(v251, v18, v244, v253, 8, &v279);
                          if (DSPGraph::getLog(void)::onceToken != -1) {
                            dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                          }
                          if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            uint64_t v150 = DSPGraph::getLog(void)::gLog;
                            if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                            {
                              unint64_t v151 = v251 + 32;
                              if (v251[55] < 0) {
                                unint64_t v151 = *(char **)v250;
                              }
                              LODWORD(buf) = 136315138;
                              *(void *)((char *)&buf + 4) = v151;
                              _os_signpost_emit_with_name_impl(&dword_18FEC0000, v150, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                            }
                          }
                          if (v149)
                          {
                            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                            std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
                            uint64_t v220 = __p;
                            if ((v272 & 0x80u) != 0) {
                              uint64_t v220 = (void **)__p[0];
                            }
                            DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", v219, v220, v18, v244, v253, v149);
                          }
                          CFRelease(v146);
                          CFRelease(v145);
                          if (cfa) {
                            CFRelease(cfa);
                          }
LABEL_296:
                          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&anURL);
LABEL_297:
                          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__val);
                          goto LABEL_298;
                        }
                        CFRelease(v142);
                      }
                      LOBYTE(anURL) = 0;
                      char v259 = 0;
                      CFDictionaryRef v152 = theDict;
                      if (!theDict)
                      {
                        v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v209, "Could not construct");
                      }
                      CFStringRef v153 = CFStringCreateWithBytes(0, (const UInt8 *)"URL", 3, 0x8000100u, 0);
                      *(void *)&long long buf = v153;
                      if (!v153)
                      {
                        v208 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v208, "Could not construct");
                      }
                      CFStringRef v154 = (const __CFString *)CFDictionaryGetValue(v152, v153);
                      CFRelease(v153);
                      if (v154)
                      {
                        CFRetain(v154);
                        CFTypeID v155 = CFGetTypeID(v154);
                        if (v155 == CFStringGetTypeID())
                        {
                          v279.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
                          v279.__r_.__value_.__s.__data_[8] = 1;
                          DSPGraph::createAbsoluteURL((DSPGraph *)&cfa, v154, a3);
                          CFTypeRef v257 = cfa;
                          if (DSPGraph::getLog(void)::onceToken != -1) {
                            dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                          }
                          if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            unint64_t v156 = DSPGraph::getLog(void)::gLog;
                            if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                            {
                              uint64_t v157 = v251 + 32;
                              if (v251[55] < 0) {
                                uint64_t v157 = *(char **)v250;
                              }
                              LODWORD(buf) = 136315138;
                              *(void *)((char *)&buf + 4) = v157;
                              _os_signpost_emit_with_name_impl(&dword_18FEC0000, v156, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                            }
                          }
                          uint64_t v158 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(void *)v251 + 312))(v251, v18, v244, v253, 8, &v257);
                          if (DSPGraph::getLog(void)::onceToken != -1) {
                            dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
                          }
                          if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            uint64_t v159 = DSPGraph::getLog(void)::gLog;
                            if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
                            {
                              uint64_t v160 = v251 + 32;
                              if (v251[55] < 0) {
                                uint64_t v160 = *(char **)v250;
                              }
                              LODWORD(buf) = 136315138;
                              *(void *)((char *)&buf + 4) = v160;
                              _os_signpost_emit_with_name_impl(&dword_18FEC0000, v159, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
                            }
                          }
                          if (v158)
                          {
                            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                            std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
                            v211 = __p;
                            if ((v272 & 0x80u) != 0) {
                              v211 = (void **)__p[0];
                            }
                            DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", v210, v211, v18, v244, v253, v158);
                          }
                          if (cfa) {
                            CFRelease(cfa);
                          }
                          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v279);
                          goto LABEL_296;
                        }
                        CFRelease(v154);
                      }
                      v279.__r_.__value_.__s.__data_[0] = 0;
                      v279.__r_.__value_.__s.__data_[8] = 0;
                      std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
                      std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
                      std::string::basic_string[abi:ne180100]<0>(&v280, "Must provide either a 'Value', 'Data', 'Path', 'FilePath', 'URL', or a recognized number type for properties");
                      DSPGraph::ThrowException(1886548769, &buf, 2204, &v281, &v280);
                    }
                  }
                  operator delete(v128);
                  goto LABEL_330;
                }
              }
            }
LABEL_399:
            uint64_t v199 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v199, "Could not construct");
          }
          __val[0] = v98;
          uint64_t v117 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)v251 + 312))(v251, v18, v244, v253, 4, __val);
          if (v117)
          {
            std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v281, "applyPropertyStripScalarValue");
            if (v251[55] < 0) {
              v250 = *(char **)v250;
            }
            std::to_string(&v279, *(float *)__val);
            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v202 = &v279;
            }
            else {
              std::string v202 = (std::string *)v279.__r_.__value_.__r.__words[0];
            }
            DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u to %s from property strip key %s failed with error %d", v201, v250, v18, v244, v253, v202, "Float32", v117);
          }
        }
        v242 = v65;
        goto LABEL_299;
      }
      if (DSPGraph::getLog(void)::onceToken != -1) {
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
      }
      if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v28 = DSPGraph::getLog(void)::gLog;
        if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
        {
          int v29 = v251 + 32;
          if (v251[55] < 0) {
            int v29 = *(char **)v250;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v29;
          _os_signpost_emit_with_name_impl(&dword_18FEC0000, v28, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
        }
      }
      uint64_t v30 = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t, uint64_t, const void **))(*(void *)v251 + 312))(v251, v18, v21, v253, 8, &v266);
      if (DSPGraph::getLog(void)::onceToken != -1) {
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_15177);
      }
      if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        std::vector<int>::value_type v31 = DSPGraph::getLog(void)::gLog;
        if (os_signpost_enabled((os_log_t)DSPGraph::getLog(void)::gLog))
        {
          unint64_t v32 = v251 + 32;
          if (v251[55] < 0) {
            unint64_t v32 = *(char **)v250;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v32;
          _os_signpost_emit_with_name_impl(&dword_18FEC0000, v31, OS_SIGNPOST_INTERVAL_END, spid, "Box::setProperty", "%s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (v30)
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v281, "setPropertyStrip");
        uint64_t v182 = __p;
        if ((v272 & 0x80u) != 0) {
          uint64_t v182 = (void **)__p[0];
        }
        DSPGraph::strprintf((DSPGraph *)"%s setProperty %u %u %u failed with error %d", v181, v182, v18, v21, v253, v30);
      }
LABEL_300:
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theDict);
      unint64_t v16 = (v254 + 1);
      int v17 = v254 + 1;
      if (!v270) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
    if (v273 && (char)v272 < 0) {
      operator delete(__p[0]);
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v274);
    unint64_t v8 = v240 + 1;
    if (!v277) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v276);
  if (v278) {
    CFRelease(v278);
  }
}

void sub_18FF0B7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (*(char *)(v65 - 153) < 0) {
    operator delete(*(void **)(v65 - 176));
  }
  if (*(char *)(v65 - 129) < 0) {
    operator delete(*(void **)(v65 - 152));
  }
  if (*(char *)(v65 - 105) < 0) {
    operator delete(*(void **)(v65 - 128));
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a57);
  if (a65)
  {
    if (a64 < 0) {
      operator delete(a59);
    }
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](v65 - 240);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v65 - 224);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v65 - 208));
  _Unwind_Resume(a1);
}

void sub_18FF0B814()
{
}

void sub_18FF0B834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (*(char *)(v55 - 153) < 0) {
    operator delete(*(void **)(v55 - 176));
  }
  if (*(char *)(v55 - 129) < 0) {
    operator delete(*(void **)(v55 - 152));
  }
  if (*(char *)(v55 - 105) < 0) {
    operator delete(*(void **)(v55 - 128));
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a55);
  JUMPOUT(0x18FF0B9A4);
}

void sub_18FF0B8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  __cxa_free_exception(v65);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a52);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a55);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a57);
  if (a65)
  {
    if (a64 < 0) {
      operator delete(a59);
    }
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](v66 - 240);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v66 - 224);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v66 - 208));
  _Unwind_Resume(a1);
}

void sub_18FF0B8C0(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(v4 - 112) = v3;
    *(void *)(v4 - 128) = v2;
    JUMPOUT(0x18FF0B994);
  }
  JUMPOUT(0x18FF0B9DCLL);
}

void sub_18FF0B90C(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(v4 - 112) = v3;
    *(void *)(v4 - 128) = v2;
    JUMPOUT(0x18FF0B994);
  }
  JUMPOUT(0x18FF0B9DCLL);
}

void sub_18FF0B940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  __cxa_free_exception(v55);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a55);
  JUMPOUT(0x18FF0B9A4);
}

void sub_18FF0B954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  __cxa_free_exception(v65);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a57);
  if (a65)
  {
    if (a64 < 0) {
      operator delete(a59);
    }
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](v66 - 240);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v66 - 224);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v66 - 208));
  _Unwind_Resume(a1);
}

void sub_18FF0B98C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x18FF0B9DCLL);
}

const void *applesauce::CF::details::at_key<char const*&>(const __CFDictionary *a1, const UInt8 *__s)
{
  uint64_t v3 = __s;
  size_t v5 = strlen((const char *)__s);
  if (!v3)
  {
    if (a1) {
      goto LABEL_4;
    }
LABEL_7:
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v3 = (const UInt8 *)CFStringCreateWithBytes(0, v3, v5, 0x8000100u, 0);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (!a1) {
    goto LABEL_7;
  }
LABEL_4:
  int Value = CFDictionaryGetValue(a1, v3);
  if (v3) {
LABEL_8:
  }
    CFRelease(v3);
LABEL_9:
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_18FF0BAC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

unint64_t DSPGraph::Graph::setPropertyStrip(__CFDictionary const*,__CFString const*)::$_0::operator()<char const*>(const __CFDictionary **a1, const UInt8 *a2)
{
  CFDictionaryRef v3 = *a1;
  if (!v3) {
    goto LABEL_21;
  }
  CFNumberRef v5 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(v3, a2);
  unsigned int v6 = v5;
  if ((unint64_t)v5 >> 32)
  {
    unsigned int v11 = v5 >> 8;
    uint64_t v12 = (unint64_t)v5 & 0x100000000;
    return v6 | ((unint64_t)v11 << 8) | v12 & 0x100000000;
  }
  if (!*a1)
  {
LABEL_21:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  CFStringRef v7 = (const __CFString *)applesauce::CF::details::at_key<char const*&>(*a1, a2);
  if (!v7)
  {
    LOBYTE(__p[0]) = 0;
    char v18 = 0;
    goto LABEL_13;
  }
  applesauce::CF::convert_as<std::string,0>((uint64_t)__p, v7);
  if (!v18)
  {
LABEL_13:
    unsigned int v11 = v6 >> 8;
LABEL_14:
    LOBYTE(v6) = 0;
    uint64_t v12 = 0;
    return v6 | ((unint64_t)v11 << 8) | v12 & 0x100000000;
  }
  *(_DWORD *)CFTypeID v15 = 0;
  if (v17 >= 0) {
    CFStringRef v9 = __p;
  }
  else {
    CFStringRef v9 = (void **)__p[0];
  }
  uint64_t v10 = DSPGraph::StrToOSType((DSPGraph *)v9, v15, v8);
  if (v10)
  {
    LOBYTE(v6) = v15[0];
    unsigned int v11 = *(_DWORD *)v15 >> 8;
    uint64_t v12 = 0x100000000;
  }
  else
  {
    uint64_t v12 = 0;
    unsigned int v11 = v6 >> 8;
  }
  if (v18 && v17 < 0) {
    operator delete(__p[0]);
  }
  if (!v10) {
    goto LABEL_14;
  }
  return v6 | ((unint64_t)v11 << 8) | v12 & 0x100000000;
}

void sub_18FF0BC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(const __CFDictionary *a1, const UInt8 *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const*&>(a1, a2);
  if (result)
  {
    return applesauce::CF::convert_as<unsigned int,0>(result);
  }
  return result;
}

const __CFNumber *applesauce::CF::convert_as<unsigned int,0>(const __CFNumber *result)
{
  if (result)
  {
    CFNumberRef v1 = result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_22;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_35;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          uint64_t v11 = Value != 0;
          if (Value) {
            unsigned __int8 v12 = LOBYTE(valuePtr);
          }
          else {
            unsigned __int8 v12 = 0;
          }
          int v13 = -256;
          if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0) {
            int v13 = 0;
          }
          uint64_t v8 = v11 << 32;
          LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
          int v7 = v5 & 0xFFFFFF00;
          break;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_22:
          if (v9) {
            uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
          }
          else {
            uint64_t v5 = 0;
          }
          goto LABEL_38;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_29:
          uint64_t v14 = *(float *)&valuePtr;
          goto LABEL_36;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_35;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_33;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_33:
          uint64_t v14 = LODWORD(valuePtr);
          goto LABEL_36;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_35:
          uint64_t v14 = valuePtr;
LABEL_36:
          uint64_t v5 = v14 | 0x100000000;
          if (!v10) {
            uint64_t v5 = 0;
          }
LABEL_38:
          int v7 = v5 & 0xFFFFFF00;
          uint64_t v8 = v5 & 0x100000000;
          break;
        default:
          int v7 = 0;
          uint64_t v8 = 0;
          LOBYTE(v5) = 0;
          break;
      }
      uint64_t v6 = v8 | v7 & 0xFFFFFF00;
      uint64_t v5 = v5;
    }
    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1))
      {
        uint64_t v5 = CFBooleanGetValue(v1);
        uint64_t v6 = 0x100000000;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
    return (const __CFNumber *)(v6 | v5);
  }
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[5]>(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_18FF0C034(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

void applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(unsigned char *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3) {
    goto LABEL_6;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  int v7 = ValueAtIndex;
  if (!ValueAtIndex) {
    goto LABEL_6;
  }
  CFRetain(ValueAtIndex);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != CFDictionaryGetTypeID())
  {
    CFRelease(v7);
LABEL_6:
    char v9 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(void *)a1 = v7;
  char v9 = 1;
LABEL_7:
  a1[8] = v9;
}

const void *applesauce::CF::details::at_key<char const(&)[6]>(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_18FF0C214(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::setProperty(double *a1, int a2, int a3, unsigned int a4, int a5, double *a6)
{
  if (a2 != 3098) {
    return DSPGraph::Box::setProperty((DSPGraph::Box *)a1, a2, a3, a4, a5, a6);
  }
  if (a5 != 8) {
    return 561211770;
  }
  if (a3) {
    return 4294956430;
  }
  double v8 = *a6;
  a1[98] = *a6;
  double v9 = a1[99];
  uint64_t v6 = 0;
  if (v8 < v9) {
    a1[98] = v9;
  }
  return v6;
}

unint64_t applesauce::CF::convert_as<double,0>(unint64_t result)
{
  if (*(double *)&result != 0.0)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_16;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int v7 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_18;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int v8 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_20;
        case kCFNumberSInt64Type:
          uint64_t valuePtr = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_25;
        case kCFNumberFloat64Type:
          uint64_t valuePtr = 0;
          int v11 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_38;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_16:
          BOOL v12 = Value == 0;
          int v13 = (char)valuePtr;
          goto LABEL_21;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int v7 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_18:
          BOOL v12 = v7 == 0;
          int v13 = (__int16)valuePtr;
          goto LABEL_21;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int v8 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_20:
          BOOL v12 = v8 == 0;
          int v13 = valuePtr;
LABEL_21:
          double v14 = (double)v13;
          goto LABEL_30;
        case kCFNumberLongType:
          uint64_t valuePtr = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_29;
        case kCFNumberLongLongType:
          uint64_t valuePtr = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_25:
          BOOL v12 = v10 == 0;
          double v14 = *(float *)&valuePtr;
          goto LABEL_30;
        case kCFNumberDoubleType:
          uint64_t valuePtr = 0;
          int v11 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_38;
        case kCFNumberCFIndexType:
          uint64_t valuePtr = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_29;
        case kCFNumberNSIntegerType:
          uint64_t valuePtr = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_29:
          BOOL v12 = v9 == 0;
          double v14 = (double)valuePtr;
LABEL_30:
          double v6 = v14;
          goto LABEL_31;
        case kCFNumberCGFloatType:
          uint64_t valuePtr = 0;
          int v11 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_38:
          BOOL v12 = v11 == 0;
          double v6 = *(double *)&valuePtr;
LABEL_31:
          if (v12) {
            double v6 = 0.0;
          }
          unint64_t v5 = *(void *)&v6 & 0xFFFFFFFFFFFFFF00;
          break;
        default:
          unint64_t v5 = 0;
          LOBYTE(v6) = 0;
          break;
      }
      return LOBYTE(v6) | v5;
    }
    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1)) {
        *(double *)&CFNumberRef result = (double)CFBooleanGetValue(v1);
      }
      else {
        *(double *)&CFNumberRef result = 0.0;
      }
    }
  }
  return result;
}

void ___ZN34AudioComponentMgr_RegistrarService18retrieveComponentsEbb_block_invoke_70(void *a1, void *a2, char a3, void *a4, void *a5)
{
  BOOL v12 = a2;
  int v9 = a4;
  int v10 = a5;
  int v11 = (AudioComponentMgr_RegistrarService *)a1[6];
  *(CFAbsoluteTime *)(*(void *)(a1[4] + 8) + 24) = CFAbsoluteTimeGetCurrent();
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  AudioComponentMgr_RegistrarService::mergeServerRegistrations(v11, v12, a3 ^ 1, v9, v10);
}

void sub_18FF0C6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FF0CB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  std::default_delete<caulk::synchronized<AUExtensionScanner,caulk::mach::unfair_lock,caulk::empty_atomic_interface<AUExtensionScanner>>>::operator()[abi:ne180100](v19);

  _Unwind_Resume(a1);
}

void AudioComponentRegistrarImpl::replyWithComponentList(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  char v18 = a3;
  id v9 = a4;
  int v10 = a5;
  uint64_t v11 = 208;
  if (a2) {
    uint64_t v11 = 168;
  }
  uint64_t v19 = a1 + v11;
  char v20 = 0;
  if (v18 && *(void *)(a1 + 256) && (unsigned __int8 v12 = atomic_load((unsigned __int8 *)(a1 + 2)), (v12 & 1) != 0))
  {
    char v17 = *(os_unfair_lock_s **)(a1 + 256);
    os_unfair_lock_lock(v17);
    int v13 = AUExtensionScanner::getExtensionComponentList((AUExtensionScanner *)&v17[2], v18);
    if (v17) {
      os_unfair_lock_unlock(v17);
    }
  }
  else
  {
    int v13 = 0;
  }
  double v14 = PurgeableDataWrapper::accessor::data((PurgeableDataWrapper::accessor *)&v19);
  if (a2)
  {
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)(a1 + 2));
    uint64_t v16 = v15 & 1;
  }
  else
  {
    uint64_t v16 = 0;
  }
  v10[2](v10, v14, v16, v9, v13);

  *(unsigned char *)(a1 + 1) = 1;
  if (v20) {
    [*(id *)(v19 + 32) endContentAccess];
  }
}

void sub_18FF0CD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, char a12)
{
  if (v14) {
    os_unfair_lock_unlock(v14);
  }
  if (a12) {
    [*(id *)(a11 + 32) endContentAccess];
  }

  _Unwind_Resume(a1);
}

id PurgeableDataWrapper::accessor::data(PurgeableDataWrapper::accessor *this)
{
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(void *)this;
    CFDictionaryRef v3 = *(void **)(*(void *)this + 32);
    if (v3)
    {
      if ([v3 beginContentAccess])
      {
LABEL_7:
        *((unsigned char *)this + 8) = 1;
        goto LABEL_8;
      }
      uint64_t v2 = *(void *)this;
    }
    uint64_t v4 = *(void *)(v2 + 24);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v5 = (void *)MEMORY[0x1E4F28FB8];
    double v6 = (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    uint64_t v7 = [v5 dataWithData:v6];
    int v8 = *(void **)(*(void *)this + 32);
    *(void *)(*(void *)this + 32) = v7;

    goto LABEL_7;
  }
LABEL_8:
  id v9 = *(void **)(*(void *)this + 32);
  return v9;
}

void sub_18FF0CEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ConnectionInfo::_canUseExtensions(ConnectionInfo *this)
{
  if (!this->mLinkedSDKRequiresEntitlement) {
    return 1;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&this->mConnection);
  uint64_t v2 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained auditToken];
  }
  else {
    memset(&v10, 0, sizeof(v10));
  }
  audit_token_t token = v10;
  uint64_t v4 = SecTaskCreateWithAuditToken(0, &token);
  unint64_t v5 = v4;
  if (v4)
  {
    CFBooleanRef v6 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v4, @"inter-app-audio", 0);
    CFBooleanRef v7 = v6;
    if (v6)
    {
      CFTypeID v8 = CFGetTypeID(v6);
      BOOL v3 = v8 == CFBooleanGetTypeID() && CFBooleanGetValue(v7) != 0;
      CFRelease(v7);
    }
    else
    {
      BOOL v3 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_18FF0CFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1>,NSData * ()(void)>::operator()(uint64_t a1)
{
  v7[4] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)"psua";
  int v6 = 0;
  memset(&v4, 0, 24);
  std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(&v4, *(void **)(v1 + 136), *(void **)(v1 + 144), (uint64_t)(*(void *)(v1 + 144) - *(void *)(v1 + 136)) >> 4);
  v4.mSorted = *(unsigned char *)(v1 + 160);
  v7[0] = (void **)&unk_1EDFA08D0;
  v7[1] = (void **)&v5;
  void v7[3] = (void **)v7;
  AudioComponentVector::remove_and_erase_if (&v4, (uint64_t)v7);
  std::__function::__value_func<BOOL ()(APComponent &)>::~__value_func[abi:ne180100](v7);
  uint64_t v2 = AudioComponentVector::serialized(&v4);
  v7[0] = (void **)&v4;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](v7);
  return v2;
}

void sub_18FF0D0C4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 56) = v1;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

id AudioComponentVector::serialized(AudioComponentVector *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AudioComponentVector::sort(this);
  uint64_t v2 = [[_ACComponentVector alloc] initWithVector:this];
  id v8 = 0;
  BOOL v3 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v2 requiringSecureCoding:1 error:&v8];
  id v4 = v8;
  if (v4)
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    long long v5 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      audit_token_t v10 = "AudioComponentVector.mm";
      __int16 v11 = 1024;
      int v12 = 349;
      __int16 v13 = 2112;
      id v14 = v4;
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error serializing AudioComponentVector: %@", buf, 0x1Cu);
    }
  }

  return v3;
}

void sub_18FF0D28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FF0D300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioComponentMgr_NSExtension::handleDuplicateRegistrationAttempt(AudioComponentMgr_RegistrarService *a1, uint64_t *a2, void *a3)
{
  if (AudioComponentMgr_RegistrarService::inExtensionServiceProcess(a1)) {
    return 0;
  }
  uint64_t v6 = *a2;
  long long v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
  char v8 = (v7 == 0) ^ ((*(uint64_t (**)(void))(*(void *)*a3 + 64))() != 0);
  if ((v8 & 1) == 0)
  {
    std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(&v27, *(void *)(v6 + 8), *(std::__shared_weak_count **)(v6 + 16));
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 64))(v27);
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 64))();
    if (v9)
    {
      uint64_t v12 = *a3;
      uint64_t v11 = a3[1];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      __int16 v13 = *(std::__shared_weak_count **)(v9 + 208);
      *(void *)(v9 + 200) = v12;
      *(void *)(v9 + 208) = v11;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v14 = *a3;
      uint64_t v16 = v27;
      uint64_t v15 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v17 = *(std::__shared_weak_count **)(v14 + 152);
      *(void *)(v14 + 144) = v16;
      *(void *)(v14 + 152) = v15;
      if (v17)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        uint64_t v16 = v27;
      }
      char v18 = v28;
      if (!v28) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v22 = v27;
      uint64_t v21 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFStringRef v23 = *(std::__shared_weak_count **)(v10 + 208);
      *(void *)(v10 + 200) = v22;
      *(void *)(v10 + 208) = v21;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      uint64_t v24 = *a3;
      uint64_t v25 = a3[1];
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = *(std::__shared_weak_count **)(v24 + 152);
      *(void *)(v24 + 144) = v24;
      *(void *)(v24 + 152) = v25;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      uint64_t v16 = *a3;
      char v18 = (std::__shared_weak_count *)a3[1];
      if (!v18) {
        goto LABEL_16;
      }
    }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_16:
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (v16 != v6)
    {
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (std::__shared_weak_count *)a2[1];
      *a2 = v16;
      a2[1] = (uint64_t)v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      uint64_t v6 = v16;
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v8) {
    return 0;
  }
  return v6;
}

void sub_18FF0D57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t APComponent::asExtensionComponent(APComponent *this)
{
  return 0;
}

void AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentMgr_RegistrarService *this, NSData *a2, char a3, NSData *a4, NSArray *a5)
{
  char v34[4] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v9 = a4;
  uint64_t v10 = a5;
  AudioComponentVector::createWithSerializedData(&v21, a2);
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  int v13 = *((unsigned __int8 *)this + 97);
  *((unsigned char *)this + 97) = 1;
  if (!v21.mSorted) {
    __assert_rtn("mergeServerRegistrations", "AudioComponentPluginMgr.mm", 653, "currentServerRegistrations.sorted()");
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v31 = 0;
  uint64_t v30 = 0;
  v34[0] = (void **)&unk_1EDFA0D50;
  v34[1] = (void **)this;
  v34[2] = (void **)&v28;
  void v34[3] = (void **)v34;
  AudioComponentVector::remove_and_erase_if (&v21, (uint64_t)v34);
  std::__function::__value_func<BOOL ()(APComponent &)>::~__value_func[abi:ne180100](v34);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(&v24, v21.__begin_, (void *)v21.__end_, ((char *)v21.__end_ - (char *)v21.__begin_) >> 4);
  unint64_t v14 = 126 - 2 * __clz((v25 - v24) >> 4);
  BOOL mSorted = v21.mSorted;
  if (v25 == v24) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,false>((uint64_t *)v24, v25, v15, 1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v31 = 0;
  uint64_t v30 = 0;
  v33[0] = &unk_1EDFA0D98;
  v33[1] = &v28;
  uint64_t v33[3] = v33;
  AudioComponentVector::remove_and_erase_if (&v24, (uint64_t)v33);
  std::__function::__value_func<BOOL ()(APComponent &)>::~__value_func[abi:ne180100](v33);
  uint64_t v16 = (APComponent **)v24;
  char v17 = v25;
  while (v16 != (APComponent **)v17)
  {
    AudioComponentVector::remove(&v21, *v16);
    v16 += 2;
  }
  if (a3)
  {
    std::vector<int>::pointer begin = (char *)v21.__begin_;
    std::vector<char>::pointer end = (char *)v21.__end_;
    while (begin != end)
    {
      if (*(_DWORD *)(*(void *)begin + 32) == 3) {
        *(_DWORD *)(*(void *)begin + 48) |= 1u;
      }
      begin += 16;
    }
  }
  BOOL v20 = !AudioComponentMgr_RegistrarService::inExtensionServiceProcess(this);
  if (!v12) {
    LOBYTE(v20) = 1;
  }
  if (!v20)
  {
    (*(void (**)(AudioComponentVector *__return_ptr, AudioComponentMgr_RegistrarService *, NSArray *))(*(void *)this + 136))(&v23, this, v12);
    AudioComponentVector::append(&v21, (const AudioComponentVector *)v23.__begin_, (const AudioComponentVector *)v23.__end_);
    v22.__begin_ = &v23;
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  }
  AudioComponentVector::subtract(&v23, &v21, (AudioComponentVector *)((char *)this + 112));
  AudioComponentVector::subtract(&v22, (AudioComponentVector *)((char *)this + 112), &v21);
  if (v13 || gAudioComponentLogCategory && (*(unsigned char *)(gAudioComponentLogCategory + 8) & 1) != 0)
  {
    AudioComponentVector::showAll(&v23, "addedComponents");
    AudioComponentVector::showAll(&v22, "removedComponents");
  }
  AudioComponentMgr_Base::addAndRemoveComponents((char **)this, &v23, (const AudioComponentVector *)v22.__begin_, (const AudioComponentVector *)v22.__end_);
  if ((AudioComponentVector *)((char *)this + 112) != &v21) {
    std::vector<std::shared_ptr<APComponent>>::__assign_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((uint64_t *)this + 14, (uint64_t *)v21.__begin_, (uint64_t *)v21.__end_, ((char *)v21.__end_ - (char *)v21.__begin_) >> 4);
  }
  *((unsigned char *)this + 136) = v21.mSorted;
  if (v13) {
    dispatch_async(MEMORY[0x1E4F14428], &__block_literal_global_82);
  }
  unint64_t v32 = &v22;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v22.__begin_ = &v23;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  v23.__begin_ = &v24;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);

  v34[0] = (void **)&v21;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](v34);
}

void sub_18FF0D930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void ****a13, uint64_t a14, uint64_t a15, uint64_t a16, void ***a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a13 = &a17;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a17 = &a21;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);

  a21 = (void **)&a9;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__clear[abi:ne180100]((uint64_t *)v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<CA::ADMPackFormat>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    id v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::shared_ptr<APComponent>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a2;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      do
      {
        char v8 = (void *)(v4 + v7);
        long long v9 = *(_OWORD *)(v4 + v7);
        void *v8 = 0;
        v8[1] = 0;
        uint64_t v10 = *(std::__shared_weak_count **)(v4 + 8);
        *(_OWORD *)uint64_t v4 = v9;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        v4 += 16;
      }
      while (v4 + v7 != v6);
      uint64_t v3 = *(void *)(a1 + 8);
    }
    while (v3 != v4)
    {
      uint64_t v11 = *(std::__shared_weak_count **)(v3 - 8);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      v3 -= 16;
    }
    *(void *)(a1 + 8) = v4;
  }
}

void *std::__function::__value_func<BOOL ()(APComponent &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AudioComponentVector::remove_and_erase_if (void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)*a1;
  uint64_t v3 = (void *)a1[1];
  if ((void *)*a1 == v3)
  {
LABEL_17:
    uint64_t v6 = (uint64_t)v4;
    goto LABEL_18;
  }
  uint64_t v6 = a1[1];
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (!v7) {
      goto LABEL_21;
    }
    if ((*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 48))(v7, *v4)) {
      break;
    }
    v4 += 2;
    if (v4 == v3) {
      goto LABEL_18;
    }
  }
  if (v4 != v3)
  {
    char v8 = v4 + 2;
    if (v4 + 2 != v3)
    {
      uint64_t v6 = (uint64_t)v4;
      while (1)
      {
        uint64_t v9 = *(void *)(a2 + 24);
        if (!v9) {
          break;
        }
        if (((*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 48))(v9, *v8) & 1) == 0)
        {
          long long v10 = *(_OWORD *)v8;
          void *v8 = 0;
          v8[1] = 0;
          uint64_t v11 = *(std::__shared_weak_count **)(v6 + 8);
          *(_OWORD *)uint64_t v6 = v10;
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          v6 += 16;
        }
        v8 += 2;
        if (v8 == v3) {
          goto LABEL_18;
        }
      }
LABEL_21:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v12 = a1[1];
  std::vector<std::shared_ptr<APComponent>>::erase((uint64_t)a1, v6, v12);
}

uint64_t std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1>,BOOL ()(APComponent &)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 32);
  if (v2 == 1)
  {
    long long v5 = *(_OWORD **)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)(a2 + 48);
    _OWORD *v5 = v6;
  }
  else if (v2 == 4)
  {
    uint64_t v3 = *(_DWORD **)(a1 + 8);
    if (*(_DWORD *)(a2 + 36) == *v3 && *(_DWORD *)(a2 + 40) == v3[1] && *(_DWORD *)(a2 + 44) == v3[2]) {
      return 0;
    }
  }
  return 1;
}

__n128 std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0>,BOOL ()(APComponent &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 32);
  if ((v4 - 2) < 2)
  {
    if (!AudioComponentMgr_RegistrarService::inExtensionServiceProcess(*(AudioComponentMgr_RegistrarService **)(a1 + 8))) {
      goto LABEL_18;
    }
  }
  else if (v4 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v7 = *(id *)(v6 + 168);
    uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v13;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v7);
          }
          if (objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "intValue", (void)v12) == 16777228)
          {

            goto LABEL_18;
          }
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
  }
  else if (v4 != 4)
  {
LABEL_18:
    uint64_t v11 = *(void *)(a1 + 16);
    __n128 result = *(__n128 *)(a2 + 36);
    *(_OWORD *)(v11 + 12) = *(_OWORD *)(a2 + 48);
    *(__n128 *)uint64_t v11 = result;
  }
  return result;
}

void sub_18FF0DF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL AudioComponentMgr_RegistrarService::inExtensionServiceProcess(AudioComponentMgr_RegistrarService *this)
{
  uint64_t v1 = (*(void (**)(AudioComponentMgr_RegistrarService *))(*(void *)this + 128))(this);
  BOOL v2 = v1 != 0;

  return v2;
}

id AudioComponentMgr_NSExtension::extensionServiceIdentifier(AudioComponentMgr_NSExtension *this)
{
  return (id)AudioComponentMgr_NSExtension::sExtensionServiceIdentifier;
}

BOOL std::__function::__func<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0,std::allocator<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0>,BOOL ()(APComponent &)>::operator()(uint64_t a1, _DWORD *a2)
{
  if (a2[8] != 3) {
    return 0;
  }
  BOOL v2 = *(_DWORD **)(a1 + 8);
  if (*v2 && a2[9] == *v2) {
    return 0;
  }
  int v4 = v2[1];
  if (v4 && a2[10] == v4) {
    return 0;
  }
  int v6 = v2[2];
  return !v6 || a2[11] != v6;
}

void AudioComponentVector::subtract(AudioComponentVector *this, AudioComponentVector *a2, AudioComponentVector *a3)
{
  AudioComponentVector::sort(a2);
  AudioComponentVector::sort(a3);
  std::vector<int>::pointer begin = (uint64_t *)a2->__begin_;
  std::vector<char>::pointer end = (uint64_t *)a2->__end_;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this->__begin_ = 0;
  float32x4_t v36 = this;
  LOBYTE(v37) = 0;
  int64_t v8 = (char *)end - (char *)begin;
  if (end == begin)
  {
    uint64_t v11 = 0;
    this->BOOL mSorted = 1;
    float32x4_t v36 = (AudioComponentVector *)a3->__begin_;
    CFTypeID v35 = 0;
  }
  else
  {
    std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](this, v8 >> 4);
    uint64_t v9 = (char *)this->__end_;
    bzero(v9, v8);
    this->__end_ = &v9[v8];
    long long v10 = (uint64_t *)a2->__begin_;
    std::vector<char>::pointer end = (uint64_t *)a2->__end_;
    uint64_t v11 = (AudioComponentVector *)this->__begin_;
    this->BOOL mSorted = 1;
    long long v12 = (AudioComponentVector *)a3->__begin_;
    long long v13 = (AudioComponentVector *)a3->__end_;
    float32x4_t v36 = v12;
    CFTypeID v35 = v11;
    if (v10 != end)
    {
      while (1)
      {
        long long v14 = v36;
        if (v36 == v13)
        {
LABEL_15:
          uint64_t v11 = v35;
          goto LABEL_18;
        }
        if ((APComponent::Key::sortCompare((_DWORD *)(*v10 + 36), (_DWORD *)v36->__begin_ + 9, 0) & 0x80000000) != 0)
        {
          long long v14 = v35;
          uint64_t v18 = *v10;
          uint64_t v17 = v10[1];
          if (v17) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v19 = (std::__shared_weak_count *)v14->__end_;
          v14->__begin_ = (void *)v18;
          v14->__end_ = (void *)v17;
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          uint64_t v16 = &v35;
        }
        else
        {
          int v15 = APComponent::Key::sortCompare((_DWORD *)v14->__begin_ + 9, (_DWORD *)(*v10 + 36), 0);
          uint64_t v16 = &v36;
          if (v15 < 0) {
            goto LABEL_13;
          }
        }
        v10 += 2;
LABEL_13:
        void *v16 = (AudioComponentVector *)&v14->__end_cap_;
        if (v10 == end)
        {
          long long v10 = end;
          goto LABEL_15;
        }
      }
    }
  }
  long long v10 = end;
LABEL_18:
  BOOL v20 = (char *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<APComponent> *,std::shared_ptr<APComponent> *,std::shared_ptr<APComponent> *>(v10, end, v11);
  AudioComponentVector v21 = this->__begin_;
  AudioComponentVector v22 = (char *)this->__end_;
  uint64_t v23 = v20 - (char *)this->__begin_;
  unint64_t v24 = v23 >> 4;
  unint64_t v25 = (v22 - (char *)this->__begin_) >> 4;
  if (v23 >> 4 <= v25)
  {
    if (v24 < v25)
    {
      uint64_t v33 = &v21[16 * v24];
      while (v22 != v33)
      {
        int64_t v34 = (std::__shared_weak_count *)*((void *)v22 - 1);
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
        v22 -= 16;
      }
      this->__end_ = v33;
    }
  }
  else
  {
    unint64_t v26 = v24 - v25;
    int value = this->__end_cap_.__value_;
    if (v24 - v25 <= (value - v22) >> 4)
    {
      bzero(this->__end_, 16 * v26);
      this->__end_ = &v22[16 * v26];
    }
    else
    {
      if (v23 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      p_end_cap = &this->__end_cap_;
      uint64_t v28 = value - v21;
      if (v28 >> 3 > v24) {
        unint64_t v24 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v24;
      }
      uint64_t v30 = (AudioComponentVector *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v29);
      int v31 = (char *)v30 + 16 * v25;
      float32x4_t v36 = v30;
      long long v37 = v31;
      CFIndex v39 = (char *)v30 + 16 * v32;
      bzero(v31, 16 * v26);
      long long v38 = &v31[16 * v26];
      std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer((uint64_t *)this, &v36);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v36);
    }
  }
}

void sub_18FF0E264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void AudioComponentVector::sort(AudioComponentVector *this)
{
  if (!this->mSorted)
  {
    std::vector<int>::pointer begin = (uint64_t *)this->__begin_;
    std::vector<char>::pointer end = (uint64_t *)this->__end_;
    unint64_t v4 = 126 - 2 * __clz(((char *)end - (char *)begin) >> 4);
    if (end == begin) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v4;
    }
    std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,false>(begin, end, v5, 1);
    this->BOOL mSorted = 1;
  }
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<APComponent> *,std::shared_ptr<APComponent> *,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      int64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::shared_ptr<APComponent>>::__assign_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  int64_t v8 = a1 + 2;
  uint64_t v9 = (void *)*a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<APComponent>>::__vdeallocate(a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](a1, v12);
    long long v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    int v15 = a2;
    goto LABEL_11;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v9) >> 4;
  if (v16 < a4)
  {
    uint64_t v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<APComponent> *,std::shared_ptr<APComponent> *,std::shared_ptr<APComponent> *>(a2, v17, v9);
    long long v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    int v15 = v17;
LABEL_11:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<APComponent>>,std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(v14, v15, a3, v13);
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<APComponent> *,std::shared_ptr<APComponent> *,std::shared_ptr<APComponent> *>(a2, a3, v9);
  for (uint64_t i = (void *)a1[1]; i != v18; i -= 2)
  {
    BOOL v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void *std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<APComponent>>,std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18FF0E4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<APComponent>>,std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<APComponent>>,std::shared_ptr<APComponent>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void std::vector<std::shared_ptr<APComponent>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a2, a3);
  uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a4 + 36), (_DWORD *)(*a3 + 36), 1);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 1);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 1);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 1);
  uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 1);
  if (v6 < 0)
  {
    uint64_t v13 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *a3;
      *a3 = v13;
      unint64_t v16 = a3 + 1;
      uint64_t v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v13;
      uint64_t v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 1);
      if ((result & 0x80000000) == 0) {
        return result;
      }
      uint64_t v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      unint64_t v16 = a3 + 1;
      uint64_t v12 = a2 + 1;
    }
    uint64_t v10 = v16;
    goto LABEL_10;
  }
  if ((result & 0x80000000) != 0)
  {
    uint64_t v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    uint64_t v10 = a2 + 1;
    uint64_t v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 1);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v11 = *a1;
      *a1 = *a2;
      uint64_t v12 = a1 + 1;
      *a2 = v11;
LABEL_10:
      uint64_t v17 = *v12;
      uint64_t *v12 = *v10;
      *uint64_t v10 = v17;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,false>(uint64_t *a1, char *a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v9 = (uint64_t *)a2;
  uint64_t v111 = (uint64_t *)(a2 - 16);
  uint64_t v10 = a1;
  while (1)
  {
    a1 = v10;
    uint64_t v11 = (char *)v9 - (char *)v10;
    uint64_t v12 = v11 >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          if ((APComponent::Key::sortCompare((_DWORD *)(*v111 + 36), (_DWORD *)(*a1 + 36), 1) & 0x80000000) != 0)
          {
            uint64_t v48 = *a1;
            *a1 = *((void *)a2 - 2);
            *((void *)a2 - 2) = v48;
            uint64_t v49 = a1[1];
            a1[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v49;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, v111);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4, v111);
          break;
        case 5:
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, v111);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (a1 == v9) {
        return;
      }
      int64_t v65 = (unint64_t)(v12 - 2) >> 1;
      int64_t v66 = v65;
      do
      {
        int64_t v67 = v66;
        if (v65 >= v66)
        {
          uint64_t v68 = (2 * v66) | 1;
          CFNumberRef v69 = &a1[2 * v68];
          if (2 * v66 + 2 < v12
            && (int)APComponent::Key::sortCompare((_DWORD *)(*v69 + 36), (_DWORD *)(v69[2] + 36), 1) < 0)
          {
            v69 += 2;
            uint64_t v68 = 2 * v67 + 2;
          }
          unsigned int v70 = &a1[2 * v67];
          if ((APComponent::Key::sortCompare((_DWORD *)(*v69 + 36), (_DWORD *)(*v70 + 36), 1) & 0x80000000) == 0)
          {
            int64_t v110 = v67;
            long long v71 = *(_OWORD *)v70;
            uint64_t *v70 = 0;
            v70[1] = 0;
            long long v112 = v71;
            uint64_t v72 = (_DWORD *)(v71 + 36);
            do
            {
              unint64_t v73 = v69;
              long long v74 = *(_OWORD *)v69;
              uint64_t *v69 = 0;
              v69[1] = 0;
              uint64_t v75 = (std::__shared_weak_count *)v70[1];
              *(_OWORD *)unsigned int v70 = v74;
              if (v75) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v75);
              }
              if (v65 < v68) {
                break;
              }
              uint64_t v76 = (2 * v68) | 1;
              CFNumberRef v69 = &a1[2 * v76];
              uint64_t v68 = 2 * v68 + 2;
              if (v68 < v12)
              {
                if ((int)APComponent::Key::sortCompare((_DWORD *)(*v69 + 36), (_DWORD *)(v69[2] + 36), 1) >= 0) {
                  uint64_t v68 = v76;
                }
                else {
                  v69 += 2;
                }
              }
              else
              {
                uint64_t v68 = v76;
              }
              unsigned int v70 = v73;
            }
            while ((APComponent::Key::sortCompare((_DWORD *)(*v69 + 36), v72, 1) & 0x80000000) == 0);
            unint64_t v77 = (std::__shared_weak_count *)v73[1];
            *(_OWORD *)unint64_t v73 = v112;
            int64_t v67 = v110;
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
          }
        }
        int64_t v66 = v67 - 1;
      }
      while (v67);
      uint64_t v78 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v79 = 0;
        __int16 v80 = a2;
        uint64_t v81 = *a1;
        uint64_t v113 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        CFNumberRef v82 = a1;
        do
        {
          int v83 = (char *)&v82[2 * v79 + 2];
          uint64_t v84 = 2 * v79;
          uint64_t v79 = (2 * v79) | 1;
          uint64_t v85 = v84 + 2;
          if (v84 + 2 < v78
            && (int)APComponent::Key::sortCompare((_DWORD *)(*(void *)v83 + 36), (_DWORD *)(*((void *)v83 + 2) + 36), 1) < 0)
          {
            v83 += 16;
            uint64_t v79 = v85;
          }
          long long v86 = *(_OWORD *)v83;
          *(void *)int v83 = 0;
          *((void *)v83 + 1) = 0;
          uint64_t v87 = (std::__shared_weak_count *)v82[1];
          *(_OWORD *)CFNumberRef v82 = v86;
          if (v87) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v87);
          }
          CFNumberRef v82 = (uint64_t *)v83;
        }
        while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
        unint64_t v88 = a2 - 16;
        a2 -= 16;
        if (v83 == v80 - 16)
        {
          uint64_t v100 = (std::__shared_weak_count *)*((void *)v83 + 1);
          *(void *)int v83 = v81;
          *((void *)v83 + 1) = v113;
          if (!v100) {
            goto LABEL_133;
          }
        }
        else
        {
          long long v89 = *((_OWORD *)v80 - 1);
          *(void *)unint64_t v88 = 0;
          *((void *)v80 - 1) = 0;
          __int16 v90 = (std::__shared_weak_count *)*((void *)v83 + 1);
          *(_OWORD *)int v83 = v89;
          if (v90) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v90);
          }
          unsigned int v91 = (std::__shared_weak_count *)*((void *)v80 - 1);
          *((void *)v80 - 2) = v81;
          *((void *)v80 - 1) = v113;
          if (v91) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v91);
          }
          uint64_t v92 = v83 + 16 - (char *)a1;
          if (v92 < 17) {
            goto LABEL_133;
          }
          unint64_t v93 = (((unint64_t)v92 >> 4) - 2) >> 1;
          uint64_t v94 = &a1[2 * v93];
          if ((APComponent::Key::sortCompare((_DWORD *)(*v94 + 36), (_DWORD *)(*(void *)v83 + 36), 1) & 0x80000000) == 0) {
            goto LABEL_133;
          }
          uint64_t v95 = *(void *)v83;
          uint64_t v96 = *((void *)v83 + 1);
          *(void *)int v83 = 0;
          *((void *)v83 + 1) = 0;
          do
          {
            int v97 = v94;
            long long v98 = *(_OWORD *)v94;
            *uint64_t v94 = 0;
            v94[1] = 0;
            unint64_t v99 = (std::__shared_weak_count *)*((void *)v83 + 1);
            *(_OWORD *)int v83 = v98;
            if (v99) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v99);
            }
            if (!v93) {
              break;
            }
            unint64_t v93 = (v93 - 1) >> 1;
            uint64_t v94 = &a1[2 * v93];
            int v83 = (char *)v97;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(*v94 + 36), (_DWORD *)(v95 + 36), 1) & 0x80000000) != 0);
          uint64_t v100 = (std::__shared_weak_count *)v97[1];
          uint64_t *v97 = v95;
          v97[1] = v96;
          if (!v100)
          {
LABEL_133:
            if (v78-- <= 2) {
              return;
            }
            continue;
          }
        }
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v100);
      goto LABEL_133;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &a1[2 * ((unint64_t)v12 >> 1)];
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v14, a1, v111);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, v14, v111);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1 + 2, v14 - 2, (uint64_t *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1 + 4, &a1[2 * v13 + 2], (uint64_t *)a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v14 - 2, v14, &a1[2 * v13 + 2]);
      long long v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v14 = v15;
    }
    --a3;
    if ((a4 & 1) != 0
      || (APComponent::Key::sortCompare((_DWORD *)(*(a1 - 2) + 36), (_DWORD *)(*a1 + 36), 1) & 0x80000000) != 0)
    {
      uint64_t v17 = *a1;
      uint64_t v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v18 = a1;
      do
      {
        uint64_t v19 = v18[2];
        v18 += 2;
      }
      while ((APComponent::Key::sortCompare((_DWORD *)(v19 + 36), (_DWORD *)(v17 + 36), 1) & 0x80000000) != 0);
      BOOL v20 = v9;
      if (v18 - 2 == a1)
      {
        BOOL v20 = v9;
        do
        {
          if (v18 >= v20) {
            break;
          }
          uint64_t v22 = *(v20 - 2);
          v20 -= 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v22 + 36), (_DWORD *)(v17 + 36), 1) & 0x80000000) == 0);
      }
      else
      {
        do
        {
          uint64_t v21 = *(v20 - 2);
          v20 -= 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v21 + 36), (_DWORD *)(v17 + 36), 1) & 0x80000000) == 0);
      }
      uint64_t v10 = v18;
      if (v18 < v20)
      {
        uint64_t v23 = v20;
        do
        {
          uint64_t v24 = *v10;
          *uint64_t v10 = *v23;
          *uint64_t v23 = v24;
          uint64_t v25 = v10[1];
          v10[1] = v23[1];
          v23[1] = v25;
          do
          {
            uint64_t v26 = v10[2];
            v10 += 2;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(v26 + 36), (_DWORD *)(v17 + 36), 1) & 0x80000000) != 0);
          do
          {
            uint64_t v27 = *(v23 - 2);
            v23 -= 2;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(v27 + 36), (_DWORD *)(v17 + 36), 1) & 0x80000000) == 0);
        }
        while (v10 < v23);
      }
      uint64_t v28 = v10 - 2;
      if (v10 - 2 != a1)
      {
        long long v29 = *(_OWORD *)v28;
        *uint64_t v28 = 0;
        *(v10 - 1) = 0;
        uint64_t v30 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v29;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
      }
      int v31 = (std::__shared_weak_count *)*(v10 - 1);
      *(v10 - 2) = v17;
      *(v10 - 1) = v16;
      uint64_t v9 = (uint64_t *)a2;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (v18 < v20) {
        goto LABEL_33;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, (char *)v10 - 16);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(v10, a2))
      {
        a2 = (char *)(v10 - 2);
        if (v32) {
          return;
        }
        goto LABEL_1;
      }
      if (!v32)
      {
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v34 = *a1;
      uint64_t v33 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      if ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(*v111 + 36), 1) & 0x80000000) != 0)
      {
        uint64_t v10 = a1;
        do
        {
          uint64_t v37 = v10[2];
          v10 += 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(v37 + 36), 1) & 0x80000000) == 0);
      }
      else
      {
        CFTypeID v35 = a1 + 2;
        do
        {
          uint64_t v10 = v35;
          if (v35 >= v9) {
            break;
          }
          int v36 = APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(*v35 + 36), 1);
          CFTypeID v35 = v10 + 2;
        }
        while ((v36 & 0x80000000) == 0);
      }
      long long v38 = v9;
      if (v10 < v9)
      {
        long long v38 = v9;
        do
        {
          uint64_t v39 = *(v38 - 2);
          v38 -= 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(v39 + 36), 1) & 0x80000000) != 0);
      }
      while (v10 < v38)
      {
        uint64_t v40 = *v10;
        *uint64_t v10 = *v38;
        *long long v38 = v40;
        uint64_t v41 = v10[1];
        v10[1] = v38[1];
        v38[1] = v41;
        do
        {
          uint64_t v42 = v10[2];
          v10 += 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(v42 + 36), 1) & 0x80000000) == 0);
        do
        {
          uint64_t v43 = *(v38 - 2);
          v38 -= 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(v43 + 36), 1) & 0x80000000) != 0);
      }
      CFNumberRef v44 = v10 - 2;
      BOOL v4 = v10 - 2 >= a1;
      BOOL v5 = v10 - 2 == a1;
      if (v10 - 2 != a1)
      {
        long long v45 = *(_OWORD *)v44;
        *CFNumberRef v44 = 0;
        *(v10 - 1) = 0;
        CFArrayRef v46 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v45;
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
      }
      a4 = 0;
      uint64_t v47 = (std::__shared_weak_count *)*(v10 - 1);
      *(v10 - 2) = v34;
      *(v10 - 1) = v33;
      if (v47)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        a4 = 0;
      }
    }
  }
  uint64_t v50 = a1 + 2;
  BOOL v52 = a1 == v9 || v50 == v9;
  if (a4)
  {
    if (!v52)
    {
      uint64_t v53 = 0;
      CFNumberRef v54 = a1;
      do
      {
        uint64_t v55 = v54;
        CFNumberRef v54 = v50;
        if ((APComponent::Key::sortCompare((_DWORD *)(v55[2] + 36), (_DWORD *)(*v55 + 36), 1) & 0x80000000) != 0)
        {
          uint64_t v56 = *v54;
          uint64_t v57 = v55[3];
          *CFNumberRef v54 = 0;
          v54[1] = 0;
          uint64_t v58 = v53;
          while (1)
          {
            long long v59 = (char *)a1 + v58;
            long long v60 = *(_OWORD *)((char *)a1 + v58);
            *(void *)long long v59 = 0;
            *((void *)v59 + 1) = 0;
            int v61 = *(std::__shared_weak_count **)((char *)a1 + v58 + 24);
            *((_OWORD *)v59 + 1) = v60;
            if (v61) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v61);
            }
            if (!v58) {
              break;
            }
            int v62 = APComponent::Key::sortCompare((_DWORD *)(v56 + 36), (_DWORD *)(*(uint64_t *)((char *)a1 + v58 - 16) + 36), 1);
            v58 -= 16;
            if ((v62 & 0x80000000) == 0)
            {
              uint64_t v63 = (uint64_t *)((char *)a1 + v58 + 16);
              goto LABEL_85;
            }
          }
          uint64_t v63 = a1;
LABEL_85:
          unint64_t v64 = (std::__shared_weak_count *)v63[1];
          *uint64_t v63 = v56;
          v63[1] = v57;
          if (v64) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v64);
          }
        }
        uint64_t v50 = v54 + 2;
        v53 += 16;
      }
      while (v54 + 2 != (uint64_t *)a2);
    }
  }
  else if (!v52)
  {
    do
    {
      int v102 = a1;
      a1 = v50;
      if ((APComponent::Key::sortCompare((_DWORD *)(v102[2] + 36), (_DWORD *)(*v102 + 36), 1) & 0x80000000) != 0)
      {
        uint64_t v103 = *a1;
        uint64_t v104 = v102[3];
        *a1 = 0;
        a1[1] = 0;
        CFArrayRef v105 = a1;
        do
        {
          long long v106 = *((_OWORD *)v105 - 1);
          *(v105 - 2) = 0;
          *(v105 - 1) = 0;
          unint64_t v107 = (std::__shared_weak_count *)v105[1];
          *(_OWORD *)CFArrayRef v105 = v106;
          if (v107) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          }
          int v108 = APComponent::Key::sortCompare((_DWORD *)(v103 + 36), (_DWORD *)(*(v105 - 4) + 36), 1);
          v105 -= 2;
        }
        while (v108 < 0);
        char v109 = (std::__shared_weak_count *)v105[1];
        *CFArrayRef v105 = v103;
        v105[1] = v104;
        if (v109) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
        }
      }
      uint64_t v50 = a1 + 2;
    }
    while (a1 + 2 != (uint64_t *)a2);
  }
}

  uint64_t v8 = a2;
  uint64_t v229 = a2 - 16;
  while (1)
  {
    uint64_t v9 = (unint64_t)a1;
    uint64_t v10 = v8 - (void)a1;
    uint64_t v11 = (uint64_t)(v8 - (void)a1) >> 4;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          unsigned int v91 = *(uint64_t **)(a2 - 16);
          uint64_t v92 = *(std::__shared_weak_count **)(a2 - 8);
          if (v92) {
            atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v94 = *(uint64_t **)v9;
          unint64_t v93 = *(std::__shared_weak_count **)(v9 + 8);
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v95 = 0;
          if (v91 && v94)
          {
            uint64_t v96 = *v91;
            uint64_t v95 = v96 && (v97 = *v94) != 0 && *(double *)(v96 + 28) < *(double *)(v97 + 28);
          }
          if (v93) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v93);
          }
          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
          if (v95)
          {
            double v226 = *(uint64_t **)v9;
            *(void *)uint64_t v9 = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v226;
            v227 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v227;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(v9, v9 + 16, v229);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t **)v9, (uint64_t **)(v9 + 16), (uint64_t **)(v9 + 32), v229);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(v9, v9 + 16, v9 + 32, (uint64_t **)(v9 + 48), v229);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 383) {
      break;
    }
    uint64_t v236 = v9;
    if (!a3)
    {
      if (v9 == v8) {
        return;
      }
      uint64_t v124 = (unint64_t)(v11 - 2) >> 1;
      double v230 = v124;
      while (1)
      {
        CFTypeID v125 = v124;
        if (v230 < v124) {
          goto LABEL_392;
        }
        CFIndex v126 = (2 * v124) | 1;
        int v127 = v9 + 16 * v126;
        std::string::size_type v128 = 2 * v124 + 2;
        v228 = v124;
        if (v128 < v11) {
          break;
        }
LABEL_331:
        uint64_t v137 = *(uint64_t **)v127;
        uint64_t v138 = *(std::__shared_weak_count **)(v127 + 8);
        if (v138) {
          atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v139 = (uint64_t **)(v9 + 16 * v228);
        uint64_t v140 = *v139;
        CFStringRef v141 = (std::__shared_weak_count *)v139[1];
        if (v141) {
          atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v137) {
          CFStringRef v142 = v140 == 0;
        }
        else {
          CFStringRef v142 = 1;
        }
        if (!v142)
        {
          CFTypeID v143 = *v137;
          if (v143)
          {
            uint64_t v144 = *v140;
            if (v144)
            {
              std::__split_buffer<std::string>::pointer v145 = *(double *)(v143 + 28) < *(double *)(v144 + 28);
              if (!v141) {
                goto LABEL_345;
              }
LABEL_344:
              std::__shared_weak_count::__release_shared[abi:ne180100](v141);
              goto LABEL_345;
            }
          }
        }
        std::__split_buffer<std::string>::pointer v145 = 0;
        if (v141) {
          goto LABEL_344;
        }
LABEL_345:
        if (v138) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v138);
        }
        CFTypeID v125 = v228;
        if (!v145)
        {
          uint64_t v233 = *v139;
          CFPropertyListRef v146 = (std::__shared_weak_count *)v139[1];
          NSObject *v139 = 0;
          v139[1] = 0;
          while (1)
          {
            long long v147 = (uint64_t **)v127;
            uint64_t v148 = *(_OWORD *)v127;
            *(void *)int v127 = 0;
            *(void *)(v127 + 8) = 0;
            uint64_t v149 = (std::__shared_weak_count *)v139[1];
            *(_OWORD *)v139 = v148;
            if (v149) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v149);
            }
            if (v230 < v126)
            {
LABEL_390:
              unint64_t v164 = (std::__shared_weak_count *)v147[1];
              *long long v147 = v233;
              v147[1] = (uint64_t *)v146;
              uint64_t v9 = v236;
              CFTypeID v125 = v228;
              if (v164) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v164);
              }
              goto LABEL_392;
            }
            uint64_t v150 = (2 * v126) | 1;
            int v127 = v236 + 16 * v150;
            CFIndex v126 = 2 * v126 + 2;
            if (v126 >= v11)
            {
              CFIndex v126 = v150;
              goto LABEL_373;
            }
            unint64_t v151 = *(uint64_t **)v127;
            CFDictionaryRef v152 = *(std::__shared_weak_count **)(v127 + 8);
            if (v152) {
              atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            CFStringRef v154 = *(uint64_t **)(v127 + 16);
            CFStringRef v153 = *(std::__shared_weak_count **)(v127 + 24);
            if (v153) {
              atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v151 && v154 != 0)
            {
              unint64_t v156 = *v151;
              if (v156)
              {
                uint64_t v157 = *v154;
                if (v157) {
                  break;
                }
              }
            }
            uint64_t v158 = 0;
            if (v153) {
              goto LABEL_367;
            }
LABEL_368:
            if (v152) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v152);
            }
            if (v158) {
              v127 += 16;
            }
            else {
              CFIndex v126 = v150;
            }
LABEL_373:
            uint64_t v159 = *(uint64_t **)v127;
            uint64_t v160 = *(std::__shared_weak_count **)(v127 + 8);
            if (v160) {
              atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v146) {
              atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v159) {
              CFIndex v161 = v233 == 0;
            }
            else {
              CFIndex v161 = 1;
            }
            if (!v161)
            {
              std::string v162 = *v159;
              if (v162)
              {
                if (*v233)
                {
                  uint64_t v163 = *(double *)(v162 + 28) < *(double *)(*v233 + 28);
                  if (!v146) {
                    goto LABEL_387;
                  }
LABEL_386:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v146);
                  goto LABEL_387;
                }
              }
            }
            uint64_t v163 = 0;
            if (v146) {
              goto LABEL_386;
            }
LABEL_387:
            if (v160) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v160);
            }
            v139 = v147;
            if (v163) {
              goto LABEL_390;
            }
          }
          uint64_t v158 = *(double *)(v156 + 28) < *(double *)(v157 + 28);
          if (!v153) {
            goto LABEL_368;
          }
LABEL_367:
          std::__shared_weak_count::__release_shared[abi:ne180100](v153);
          goto LABEL_368;
        }
LABEL_392:
        uint64_t v124 = v125 - 1;
        if (!v125)
        {
          char v165 = (unint64_t)v10 >> 4;
          while (2)
          {
            if (v165 < 2) {
              goto LABEL_466;
            }
            unint64_t v166 = 0;
            v231 = *(uint64_t **)v9;
            double v234 = *(uint64_t **)(v9 + 8);
            uint64_t v167 = v9;
            *(void *)uint64_t v9 = 0;
            *(void *)(v9 + 8) = 0;
LABEL_396:
            unint64_t v168 = (uint64_t **)(v167 + 16 * (v166 + 1));
            unint64_t v169 = 2 * v166;
            unint64_t v166 = (2 * v166) | 1;
            uint64_t v170 = v169 + 2;
            if (v169 + 2 < v165)
            {
              unint64_t v171 = *v168;
              unint64_t v172 = (std::__shared_weak_count *)v168[1];
              if (v172) {
                atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              BOOL v174 = v168[2];
              uint64_t v173 = (std::__shared_weak_count *)v168[3];
              if (v173) {
                atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v171) {
                uint64_t v175 = v174 == 0;
              }
              else {
                uint64_t v175 = 1;
              }
              if (!v175 && (long long v176 = *v171) != 0 && (v177 = *v174) != 0)
              {
                std::string v178 = *(double *)(v176 + 28) < *(double *)(v177 + 28);
                if (!v173)
                {
LABEL_411:
                  if (v172) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v172);
                  }
                  if (v178)
                  {
                    v168 += 2;
                    unint64_t v166 = v170;
                  }
                  goto LABEL_415;
                }
              }
              else
              {
                std::string v178 = 0;
                if (!v173) {
                  goto LABEL_411;
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v173);
              goto LABEL_411;
            }
LABEL_415:
            uint64_t v179 = *(_OWORD *)v168;
            unint64_t *v168 = 0;
            v168[1] = 0;
            uint64_t v180 = *(std::__shared_weak_count **)(v167 + 8);
            *(_OWORD *)uint64_t v167 = v179;
            if (v180) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v180);
            }
            uint64_t v167 = (unint64_t)v168;
            if (v166 > (uint64_t)((unint64_t)(v165 - 2) >> 1))
            {
              if (v168 == (uint64_t **)(a2 - 16))
              {
                uint64_t v195 = (std::__shared_weak_count *)v168[1];
                unint64_t *v168 = v231;
                v168[1] = v234;
LABEL_464:
                uint64_t v9 = v236;
                if (v195) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v195);
                }
              }
              else
              {
                uint64_t v181 = *(_OWORD *)(a2 - 16);
                *(void *)(a2 - 16) = 0;
                *(void *)(a2 - 8) = 0;
                uint64_t v182 = (std::__shared_weak_count *)v168[1];
                *(_OWORD *)unint64_t v168 = v181;
                if (v182) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v182);
                }
                uint64_t v9 = v236;
                uint64_t v183 = *(std::__shared_weak_count **)(a2 - 8);
                *(void *)(a2 - 16) = v231;
                *(void *)(a2 - 8) = v234;
                if (v183) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v183);
                }
                uint64_t v184 = (uint64_t)v168 - v236 + 16;
                if (v184 >= 17)
                {
                  v185 = (unint64_t)((v184 >> 4) - 2) >> 1;
                  uint64_t v186 = v236 + 16 * v185;
                  uint64_t v187 = *(uint64_t **)v186;
                  v188 = *(std::__shared_weak_count **)(v186 + 8);
                  if (v188) {
                    atomic_fetch_add_explicit(&v188->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v190 = *v168;
                  uint64_t v189 = (std::__shared_weak_count *)v168[1];
                  if (v189) {
                    atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v187) {
                    v191 = v190 == 0;
                  }
                  else {
                    v191 = 1;
                  }
                  if (v191 || (v192 = *v187) == 0 || (uint64_t v193 = *v190) == 0)
                  {
                    uint64_t v194 = 0;
                    if (!v189) {
                      goto LABEL_439;
                    }
LABEL_438:
                    std::__shared_weak_count::__release_shared[abi:ne180100](v189);
                    goto LABEL_439;
                  }
                  uint64_t v194 = *(double *)(v192 + 28) < *(double *)(v193 + 28);
                  if (v189) {
                    goto LABEL_438;
                  }
LABEL_439:
                  if (v188) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v188);
                  }
                  if (v194)
                  {
                    std::string v197 = *v168;
                    uint64_t v196 = (std::__shared_weak_count *)v168[1];
                    unint64_t *v168 = 0;
                    v168[1] = 0;
                    while (1)
                    {
                      char v198 = (uint64_t **)v186;
                      uint64_t v199 = *(_OWORD *)v186;
                      *(void *)uint64_t v186 = 0;
                      *(void *)(v186 + 8) = 0;
                      std::string v200 = (std::__shared_weak_count *)v168[1];
                      *(_OWORD *)unint64_t v168 = v199;
                      if (v200) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v200);
                      }
                      if (!v185)
                      {
LABEL_463:
                        uint64_t v195 = (std::__shared_weak_count *)v198[1];
                        std::runtime_error *v198 = v197;
                        v198[1] = (uint64_t *)v196;
                        goto LABEL_464;
                      }
                      v185 = (v185 - 1) >> 1;
                      uint64_t v186 = v236 + 16 * v185;
                      std::__fs::filesystem::path v201 = *(uint64_t **)v186;
                      std::string v202 = *(std::__shared_weak_count **)(v186 + 8);
                      if (v202) {
                        atomic_fetch_add_explicit(&v202->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if (v196) {
                        atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if (v201 && v197 != 0)
                      {
                        uint64_t v204 = *v201;
                        if (v204)
                        {
                          if (*v197) {
                            break;
                          }
                        }
                      }
                      uint64_t v205 = 0;
                      if (v196) {
                        goto LABEL_459;
                      }
LABEL_460:
                      if (v202) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v202);
                      }
                      unint64_t v168 = v198;
                      if (!v205) {
                        goto LABEL_463;
                      }
                    }
                    uint64_t v205 = *(double *)(v204 + 28) < *(double *)(*v197 + 28);
                    if (!v196) {
                      goto LABEL_460;
                    }
LABEL_459:
                    std::__shared_weak_count::__release_shared[abi:ne180100](v196);
                    goto LABEL_460;
                  }
                }
              }
LABEL_466:
              a2 -= 16;
              if ((unint64_t)v165-- <= 2) {
                return;
              }
              continue;
            }
            goto LABEL_396;
          }
        }
      }
      uint64_t v129 = *(uint64_t **)v127;
      uint64_t v130 = *(std::__shared_weak_count **)(v127 + 8);
      if (v130) {
        atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFStringRef v132 = *(uint64_t **)(v127 + 16);
      CFDictionaryRef v131 = *(std::__shared_weak_count **)(v127 + 24);
      if (v131) {
        atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v129) {
        CFStringRef v133 = v132 == 0;
      }
      else {
        CFStringRef v133 = 1;
      }
      if (!v133 && (v134 = *v129) != 0 && (CFStringRef v135 = *v132) != 0)
      {
        v136 = *(double *)(v134 + 28) < *(double *)(v135 + 28);
        if (!v131) {
          goto LABEL_327;
        }
      }
      else
      {
        v136 = 0;
        if (!v131)
        {
LABEL_327:
          if (v130) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v130);
          }
          if (v136)
          {
            v127 += 16;
            CFIndex v126 = v128;
          }
          goto LABEL_331;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v131);
      goto LABEL_327;
    }
    uint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = (_OWORD *)(v9 + 16 * ((unint64_t)v11 >> 1));
    if ((unint64_t)v10 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t)v13, v9, v229);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(v9, (uint64_t)v13, v229);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(v9 + 16, (uint64_t)(v13 - 1), a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(v9 + 32, v9 + 16 + 16 * v12, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t)(v13 - 1), (uint64_t)v13, v9 + 16 + 16 * v12);
      uint64_t v14 = *(_OWORD *)v9;
      *(_OWORD *)uint64_t v9 = *v13;
      *unint64_t v13 = v14;
    }
    --a3;
    if (a4)
    {
      long long v15 = *(uint64_t **)v9;
LABEL_26:
      uint64_t v23 = *(std::__shared_weak_count **)(v9 + 8);
      uint64_t v24 = v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      do
      {
        uint64_t v25 = *(uint64_t **)(v24 + 16);
        uint64_t v26 = *(std::__shared_weak_count **)(v24 + 24);
        v24 += 16;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v25) {
          uint64_t v27 = v15 == 0;
        }
        else {
          uint64_t v27 = 1;
        }
        if (v27 || (uint64_t v28 = *v25) == 0 || !*v15)
        {
          long long v29 = 0;
          if (!v23) {
            goto LABEL_41;
          }
LABEL_40:
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          goto LABEL_41;
        }
        long long v29 = *(double *)(v28 + 28) < *(double *)(*v15 + 28);
        if (v23) {
          goto LABEL_40;
        }
LABEL_41:
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
      while (v29);
      uint64_t v30 = (void *)a2;
      if (v24 - 16 != v9)
      {
        while (1)
        {
          int v31 = (uint64_t *)*(v30 - 2);
          BOOL v32 = (std::__shared_weak_count *)*(v30 - 1);
          v30 -= 2;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v31 && v15 != 0)
          {
            uint64_t v34 = *v31;
            if (v34)
            {
              if (*v15) {
                break;
              }
            }
          }
          CFTypeID v35 = 0;
          if (v23) {
            goto LABEL_58;
          }
LABEL_59:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v35) {
            goto LABEL_62;
          }
        }
        CFTypeID v35 = *(double *)(v34 + 28) < *(double *)(*v15 + 28);
        if (!v23) {
          goto LABEL_59;
        }
LABEL_58:
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        goto LABEL_59;
      }
      uint64_t v30 = (void *)a2;
      while (2)
      {
        if (v24 < (unint64_t)v30)
        {
          CFNumberRef v54 = (uint64_t *)*(v30 - 2);
          uint64_t v55 = (std::__shared_weak_count *)*(v30 - 1);
          v30 -= 2;
          if (v55) {
            atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v56 = 0;
          if (v54 && v15)
          {
            uint64_t v57 = *v54;
            if (v57 && *v15)
            {
              uint64_t v56 = *(double *)(v57 + 28) < *(double *)(*v15 + 28);
              goto LABEL_120;
            }
            uint64_t v56 = 0;
            if (!v23)
            {
LABEL_122:
              if (v55) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v55);
              }
              if (v56) {
                break;
              }
              continue;
            }
          }
          else
          {
LABEL_120:
            if (!v23) {
              goto LABEL_122;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          goto LABEL_122;
        }
        break;
      }
LABEL_62:
      a1 = (void *)v24;
      if (v24 < (unint64_t)v30)
      {
        int v36 = v30;
        do
        {
          uint64_t v37 = *a1;
          *a1 = *v36;
          *int v36 = v37;
          long long v38 = a1[1];
          a1[1] = v36[1];
          v36[1] = v38;
          do
          {
            uint64_t v39 = (uint64_t *)a1[2];
            uint64_t v40 = (std::__shared_weak_count *)a1[3];
            a1 += 2;
            if (v40) {
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v39) {
              uint64_t v41 = v15 == 0;
            }
            else {
              uint64_t v41 = 1;
            }
            if (v41 || (uint64_t v42 = *v39) == 0 || !*v15)
            {
              uint64_t v43 = 0;
              if (!v23) {
                goto LABEL_79;
              }
LABEL_78:
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              goto LABEL_79;
            }
            uint64_t v43 = *(double *)(v42 + 28) < *(double *)(*v15 + 28);
            if (v23) {
              goto LABEL_78;
            }
LABEL_79:
            if (v40) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            }
          }
          while (v43);
          do
          {
            CFNumberRef v44 = (uint64_t *)*(v36 - 2);
            long long v45 = (std::__shared_weak_count *)*(v36 - 1);
            v36 -= 2;
            if (v45) {
              atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v44) {
              CFArrayRef v46 = v15 == 0;
            }
            else {
              CFArrayRef v46 = 1;
            }
            if (v46 || (uint64_t v47 = *v44) == 0 || !*v15)
            {
              uint64_t v48 = 0;
              if (!v23) {
                goto LABEL_96;
              }
LABEL_95:
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              goto LABEL_96;
            }
            uint64_t v48 = *(double *)(v47 + 28) < *(double *)(*v15 + 28);
            if (v23) {
              goto LABEL_95;
            }
LABEL_96:
            if (v45) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v45);
            }
          }
          while (!v48);
        }
        while (a1 < v36);
      }
      uint64_t v49 = (long long *)(a1 - 2);
      if (a1 - 2 != (void *)v236)
      {
        uint64_t v50 = *v49;
        *(void *)uint64_t v49 = 0;
        *(a1 - 1) = 0;
        uint64_t v51 = *(std::__shared_weak_count **)(v236 + 8);
        *(_OWORD *)uint64_t v236 = v50;
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
      }
      BOOL v52 = (std::__shared_weak_count *)*(a1 - 1);
      *(a1 - 2) = v15;
      *(a1 - 1) = v23;
      uint64_t v8 = a2;
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v24 < (unint64_t)v30)
      {
LABEL_108:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*,false>(v236, a1 - 2, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        uint64_t v53 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(v236, (uint64_t)(a1 - 2));
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t)a1, a2))
        {
          a2 = (unint64_t)(a1 - 2);
          a1 = (void *)v236;
          if (v53) {
            return;
          }
          goto LABEL_1;
        }
        if (!v53) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      uint64_t v16 = *(uint64_t **)(v9 - 16);
      uint64_t v17 = *(std::__shared_weak_count **)(v9 - 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = *(uint64_t **)v9;
      uint64_t v18 = *(std::__shared_weak_count **)(v9 + 8);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v20 = 0;
      if (v16 && v19)
      {
        uint64_t v21 = *v16;
        v20 = v21 && (uint64_t v22 = *v19) != 0 && *(double *)(v21 + 28) < *(double *)(v22 + 28);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      long long v15 = *(uint64_t **)v9;
      if (v20) {
        goto LABEL_26;
      }
      uint64_t v58 = *(std::__shared_weak_count **)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v60 = *(uint64_t **)(a2 - 16);
      long long v59 = *(std::__shared_weak_count **)(a2 - 8);
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v61 = 0;
      if (v15 && v60) {
        v61 = *v15 && (int v62 = *v60) != 0 && *(double *)(*v15 + 28) < *(double *)(v62 + 28);
      }
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (v61)
      {
        a1 = (void *)v9;
        do
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v64 = (uint64_t *)a1[2];
          uint64_t v63 = (std::__shared_weak_count *)a1[3];
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int64_t v65 = 0;
          if (v15 && v64) {
            int64_t v65 = *v15 && (v66 = *v64) != 0 && *(double *)(*v15 + 28) < *(double *)(v66 + 28);
          }
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          a1 += 2;
        }
        while (!v65);
      }
      else
      {
        int64_t v67 = (void **)(v9 + 16);
        do
        {
          a1 = v67;
          if ((unint64_t)v67 >= a2) {
            break;
          }
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFNumberRef v69 = *v67;
          uint64_t v68 = (std::__shared_weak_count *)a1[1];
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v70 = 0;
          if (v15 && v69) {
            v70 = *v15 && (long long v71 = *v69) != 0 && *(double *)(*v15 + 28) < *(double *)(v71 + 28);
          }
          if (v68) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v68);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          int64_t v67 = (void **)(a1 + 2);
        }
        while (!v70);
      }
      uint64_t v72 = (void *)a2;
      if ((unint64_t)a1 < a2)
      {
        uint64_t v72 = (void *)a2;
        do
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v74 = (uint64_t *)*(v72 - 2);
          unint64_t v73 = (std::__shared_weak_count *)*(v72 - 1);
          if (v73) {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v75 = 0;
          if (v15 && v74) {
            uint64_t v75 = *v15 && (v76 = *v74) != 0 && *(double *)(*v15 + 28) < *(double *)(v76 + 28);
          }
          if (v73) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v73);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          v72 -= 2;
        }
        while (v75);
      }
LABEL_229:
      if (a1 < v72)
      {
        unint64_t v77 = *a1;
        *a1 = *v72;
        _DWORD *v72 = v77;
        uint64_t v78 = a1[1];
        a1[1] = v72[1];
        v72[1] = v78;
        while (1)
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v80 = (uint64_t *)a1[2];
          uint64_t v79 = (std::__shared_weak_count *)a1[3];
          if (v79) {
            atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v81 = 0;
          if (v15 && v80)
          {
            if (!*v15 || (CFNumberRef v82 = *v80) == 0)
            {
              uint64_t v81 = 0;
              if (!v79) {
                goto LABEL_207;
              }
LABEL_206:
              std::__shared_weak_count::__release_shared[abi:ne180100](v79);
              goto LABEL_207;
            }
            uint64_t v81 = *(double *)(*v15 + 28) < *(double *)(v82 + 28);
          }
          if (v79) {
            goto LABEL_206;
          }
LABEL_207:
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          a1 += 2;
          if (v81)
          {
            while (1)
            {
              if (v58) {
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v85 = (uint64_t *)*(v72 - 2);
              uint64_t v84 = (std::__shared_weak_count *)*(v72 - 1);
              if (v84) {
                atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v83 = 0;
              if (v15 && v85)
              {
                if (!*v15 || (long long v86 = *v85) == 0)
                {
                  int v83 = 0;
                  if (!v84) {
                    goto LABEL_226;
                  }
LABEL_225:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v84);
                  goto LABEL_226;
                }
                int v83 = *(double *)(*v15 + 28) < *(double *)(v86 + 28);
              }
              if (v84) {
                goto LABEL_225;
              }
LABEL_226:
              if (v58) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v58);
              }
              v72 -= 2;
              if (!v83) {
                goto LABEL_229;
              }
            }
          }
        }
      }
      uint64_t v87 = (long long *)(a1 - 2);
      BOOL v4 = (unint64_t)(a1 - 2) >= v9;
      BOOL v5 = a1 - 2 == (void *)v9;
      if (a1 - 2 != (void *)v9)
      {
        unint64_t v88 = *v87;
        *(void *)uint64_t v87 = 0;
        *(a1 - 1) = 0;
        long long v89 = *(std::__shared_weak_count **)(v9 + 8);
        *(_OWORD *)uint64_t v9 = v88;
        if (v89) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v89);
        }
      }
      a4 = 0;
      __int16 v90 = (std::__shared_weak_count *)*(a1 - 1);
      *(a1 - 2) = v15;
      *(a1 - 1) = v58;
      uint64_t v8 = a2;
      if (v90)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
        a4 = 0;
      }
    }
  }
  long long v98 = (void *)(v9 + 16);
  uint64_t v100 = v9 == v8 || v98 == (void *)v8;
  if ((a4 & 1) == 0)
  {
    if (v100) {
      return;
    }
    while (1)
    {
      v207 = v9;
      uint64_t v9 = (unint64_t)v98;
      v208 = *(uint64_t **)(v207 + 16);
      v209 = *(std::__shared_weak_count **)(v207 + 24);
      if (v209) {
        atomic_fetch_add_explicit(&v209->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v211 = *(uint64_t **)v207;
      v210 = *(std::__shared_weak_count **)(v207 + 8);
      if (v210) {
        atomic_fetch_add_explicit(&v210->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v208 && v211 != 0)
      {
        v213 = *v208;
        if (v213)
        {
          uint64_t v214 = *v211;
          if (v214) {
            break;
          }
        }
      }
      uint64_t v215 = 0;
      if (v210) {
        goto LABEL_482;
      }
LABEL_483:
      if (v209) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v209);
      }
      if (!v215) {
        goto LABEL_508;
      }
      v216 = *(uint64_t **)v9;
      v217 = *(std::__shared_weak_count **)(v207 + 24);
      v218 = v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      do
      {
        v219 = *(_OWORD *)(v218 - 16);
        *(void *)(v218 - 16) = 0;
        *(void *)(v218 - 8) = 0;
        uint64_t v220 = *(std::__shared_weak_count **)(v218 + 8);
        *(_OWORD *)v218 = v219;
        if (v220) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v220);
        }
        if (v217) {
          atomic_fetch_add_explicit(&v217->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v222 = *(uint64_t **)(v218 - 32);
        v221 = *(std::__shared_weak_count **)(v218 - 24);
        if (v221) {
          atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v223 = 0;
        if (!v216 || !v222) {
          goto LABEL_498;
        }
        if (*v216)
        {
          v224 = *v222;
          if (v224)
          {
            uint64_t v223 = *(double *)(*v216 + 28) < *(double *)(v224 + 28);
LABEL_498:
            if (!v221) {
              goto LABEL_500;
            }
LABEL_499:
            std::__shared_weak_count::__release_shared[abi:ne180100](v221);
            goto LABEL_500;
          }
        }
        uint64_t v223 = 0;
        if (v221) {
          goto LABEL_499;
        }
LABEL_500:
        if (v217) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v217);
        }
        v218 -= 16;
      }
      while (v223);
      v225 = *(std::__shared_weak_count **)(v218 + 8);
      *(void *)v218 = v216;
      *(void *)(v218 + 8) = v217;
      if (v225) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v225);
      }
LABEL_508:
      long long v98 = (void *)(v9 + 16);
      if (v9 + 16 == a2) {
        return;
      }
    }
    uint64_t v215 = *(double *)(v213 + 28) < *(double *)(v214 + 28);
    if (!v210) {
      goto LABEL_483;
    }
LABEL_482:
    std::__shared_weak_count::__release_shared[abi:ne180100](v210);
    goto LABEL_483;
  }
  if (v100) {
    return;
  }
  CFTypeID v101 = 0;
  int v102 = (void *)v9;
  while (2)
  {
    uint64_t v103 = (uint64_t **)v102;
    int v102 = v98;
    uint64_t v104 = v103[2];
    CFArrayRef v105 = (std::__shared_weak_count *)v103[3];
    if (v105) {
      atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v107 = *v103;
    long long v106 = (std::__shared_weak_count *)v103[1];
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v104) {
      int v108 = v107 == 0;
    }
    else {
      int v108 = 1;
    }
    if (v108 || (char v109 = *v104) == 0 || (v110 = *v107) == 0)
    {
      uint64_t v111 = 0;
      if (!v106) {
        goto LABEL_280;
      }
      goto LABEL_279;
    }
    uint64_t v111 = *(double *)(v109 + 28) < *(double *)(v110 + 28);
    if (v106) {
LABEL_279:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
LABEL_280:
    if (v105) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v105);
    }
    if (!v111) {
      goto LABEL_307;
    }
    long long v112 = (uint64_t *)*v102;
    uint64_t v113 = (std::__shared_weak_count *)v103[3];
    uint64_t v114 = v101;
    *int v102 = 0;
    v102[1] = 0;
    while (2)
    {
      uint64_t v115 = v9 + v114;
      int v116 = *(_OWORD *)(v9 + v114);
      *(void *)uint64_t v115 = 0;
      *(void *)(v115 + 8) = 0;
      uint64_t v117 = *(std::__shared_weak_count **)(v9 + v114 + 24);
      *(_OWORD *)(v115 + 16) = v116;
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      if (v114)
      {
        if (v113) {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v119 = *(uint64_t **)(v9 + v114 - 16);
        uint64_t v118 = *(std::__shared_weak_count **)(v9 + v114 - 8);
        if (v118) {
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v120 = 0;
        if (v112 && v119)
        {
          if (*v112)
          {
            char v121 = *v119;
            if (v121)
            {
              unint64_t v120 = *(double *)(*v112 + 28) < *(double *)(v121 + 28);
              goto LABEL_296;
            }
          }
          unint64_t v120 = 0;
          if (!v118)
          {
LABEL_298:
            if (v113) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v113);
            }
            v114 -= 16;
            if (!v120)
            {
              uint64_t v122 = (void *)(v9 + v114 + 16);
              goto LABEL_305;
            }
            continue;
          }
        }
        else
        {
LABEL_296:
          if (!v118) {
            goto LABEL_298;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v118);
        goto LABEL_298;
      }
      break;
    }
    uint64_t v122 = (void *)v9;
LABEL_305:
    std::string::size_type v123 = (std::__shared_weak_count *)v122[1];
    *uint64_t v122 = v112;
    v122[1] = v113;
    if (v123) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v123);
    }
LABEL_307:
    long long v98 = v102 + 2;
    v101 += 16;
    if (v102 + 2 != (void *)a2) {
      continue;
    }
    break;
  }
}

  uint64_t v10 = (void **)(a2 - 16);
  uint64_t v114 = (void **)(a2 - 32);
  uint64_t v11 = (void **)(a2 - 48);
  uint64_t v12 = (void *)a1;
  int v116 = a2;
  while (1)
  {
    a1 = (unint64_t)v12;
    unint64_t v13 = a2 - (void)v12;
    uint64_t v14 = (uint64_t)(a2 - (void)v12) >> 4;
    if (v5 || !v4)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)(a2 - 16), *(std::__shared_weak_count **)(a2 - 8), a1))
          {
            uint64_t v51 = *(void *)a1;
            *(void *)a1 = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v51;
            BOOL v52 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v52;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)a1, (void **)(a1 + 16), v10);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), (uint64_t)v10);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a1 + 48, (uint64_t)v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 383) {
      break;
    }
    if (!a3)
    {
      if (a1 == a2) {
        return;
      }
      uint64_t v68 = (unint64_t)(v14 - 2) >> 1;
      CFNumberRef v69 = v68;
      do
      {
        unsigned int v70 = v69;
        if (v68 >= v69)
        {
          long long v71 = (2 * v69) | 1;
          uint64_t v72 = (void **)(a1 + 16 * v71);
          if (2 * v69 + 2 < v14
            && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)(v72 + 2)))
          {
            v72 += 2;
            long long v71 = 2 * v70 + 2;
          }
          unint64_t v73 = a1 + 16 * v70;
          if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], v73))
          {
            std::string::size_type v119 = *(_OWORD *)v73;
            *(void *)unint64_t v73 = 0;
            *(void *)(v73 + 8) = 0;
            do
            {
              long long v74 = v72;
              uint64_t v75 = *(_OWORD *)v72;
              _DWORD *v72 = 0;
              v72[1] = 0;
              uint64_t v76 = *(std::__shared_weak_count **)(v73 + 8);
              *(_OWORD *)unint64_t v73 = v75;
              if (v76) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v76);
              }
              if (v68 < v71) {
                break;
              }
              unint64_t v77 = (2 * v71) | 1;
              uint64_t v72 = (void **)(a1 + 16 * v77);
              uint64_t v78 = 2 * v71 + 2;
              if (v78 < v14
                && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)(v72 + 2)))
              {
                v72 += 2;
                unint64_t v77 = v78;
              }
              unint64_t v73 = (uint64_t)v74;
              long long v71 = v77;
            }
            while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)&v119));
            uint64_t v79 = v119;
            std::string::size_type v119 = 0uLL;
            __int16 v80 = (std::__shared_weak_count *)v74[1];
            *(_OWORD *)long long v74 = v79;
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            if (*((void *)&v119 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
            }
          }
        }
        CFNumberRef v69 = v70 - 1;
      }
      while (v70);
      uint64_t v81 = (unint64_t)v13 >> 4;
      CFNumberRef v82 = v116;
      while (2)
      {
        if (v81 >= 2)
        {
          int v83 = 0;
          uint64_t v84 = *(void *)a1;
          uint64_t v117 = *(void *)(a1 + 8);
          uint64_t v85 = a1;
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          do
          {
            long long v86 = v85 + 16 * v83 + 16;
            uint64_t v87 = 2 * v83;
            int v83 = (2 * v83) | 1;
            unint64_t v88 = v87 + 2;
            if (v87 + 2 < v81
              && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)v86, *(std::__shared_weak_count **)(v86 + 8), v86 + 16))
            {
              v86 += 16;
              int v83 = v88;
            }
            long long v89 = *(_OWORD *)v86;
            *(void *)long long v86 = 0;
            *(void *)(v86 + 8) = 0;
            __int16 v90 = *(std::__shared_weak_count **)(v85 + 8);
            *(_OWORD *)uint64_t v85 = v89;
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            uint64_t v85 = v86;
          }
          while (v83 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
          if (v86 == v82 - 16)
          {
            int v102 = *(std::__shared_weak_count **)(v86 + 8);
            *(void *)long long v86 = v84;
            *(void *)(v86 + 8) = v117;
            if (!v102) {
              goto LABEL_140;
            }
          }
          else
          {
            unsigned int v91 = *(_OWORD *)(v82 - 16);
            *(void *)(v82 - 16) = 0;
            *(void *)(v82 - 8) = 0;
            uint64_t v92 = *(std::__shared_weak_count **)(v86 + 8);
            *(_OWORD *)long long v86 = v91;
            if (v92) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v92);
            }
            unint64_t v93 = *(std::__shared_weak_count **)(v82 - 8);
            *(void *)(v82 - 16) = v84;
            *(void *)(v82 - 8) = v117;
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
            uint64_t v94 = v86 + 16 - a1;
            if (v94 < 17) {
              goto LABEL_140;
            }
            uint64_t v95 = (unint64_t)((v94 >> 4) - 2) >> 1;
            uint64_t v96 = (void **)(a1 + 16 * v95);
            if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*v96, (std::__shared_weak_count *)v96[1], v86))goto LABEL_140; {
            std::string::size_type v119 = *(_OWORD *)v86;
            }
            *(void *)long long v86 = 0;
            *(void *)(v86 + 8) = 0;
            do
            {
              int v97 = v96;
              long long v98 = *(_OWORD *)v96;
              *uint64_t v96 = 0;
              v96[1] = 0;
              unint64_t v99 = *(std::__shared_weak_count **)(v86 + 8);
              *(_OWORD *)long long v86 = v98;
              if (v99) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v99);
              }
              if (!v95) {
                break;
              }
              uint64_t v95 = (v95 - 1) >> 1;
              uint64_t v96 = (void **)(a1 + 16 * v95);
              long long v86 = (uint64_t)v97;
            }
            while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*v96, (std::__shared_weak_count *)v96[1], (uint64_t)&v119));
            uint64_t v100 = v119;
            std::string::size_type v119 = 0uLL;
            CFTypeID v101 = (std::__shared_weak_count *)v97[1];
            *(_OWORD *)int v97 = v100;
            if (!v101) {
              goto LABEL_140;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v101);
            int v102 = (std::__shared_weak_count *)*((void *)&v119 + 1);
            if (!*((void *)&v119 + 1)) {
              goto LABEL_140;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
LABEL_140:
        v82 -= 16;
        if ((unint64_t)v81-- <= 2) {
          return;
        }
        continue;
      }
    }
    long long v15 = (unint64_t)v14 >> 1;
    uint64_t v16 = (void *)(a1 + 16 * ((unint64_t)v14 >> 1));
    if ((unint64_t)v13 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(v16, (void **)a1, v10);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)a1, (void **)v16, v10);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)(a1 + 16), (void **)v16 - 2, v114);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)(a1 + 32), (void **)(a1 + 16 + 16 * v15), v11);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(v16 - 2, (void **)v16, (void **)(a1 + 16 + 16 * v15));
      uint64_t v17 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v17;
    }
    --a3;
    if ((a4 & 1) != 0
      || sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)(a1 - 16), *(std::__shared_weak_count **)(a1 - 8), a1))
    {
      std::string::size_type v119 = *(_OWORD *)a1;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v18 = (void *)a1;
      do
      {
        uint64_t v19 = v18;
        BOOL v20 = (void *)v18[2];
        v18 += 2;
      }
      while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v20, (std::__shared_weak_count *)v19[3], (uint64_t)&v119));
      uint64_t v21 = (void *)v116;
      if (v19 == (void *)a1)
      {
        uint64_t v21 = (void *)v116;
        do
        {
          if (v18 >= v21) {
            break;
          }
          uint64_t v24 = (void *)*(v21 - 2);
          uint64_t v25 = (std::__shared_weak_count *)*(v21 - 1);
          v21 -= 2;
        }
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v24, v25, (uint64_t)&v119));
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)*(v21 - 2);
          uint64_t v23 = (std::__shared_weak_count *)*(v21 - 1);
          v21 -= 2;
        }
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v22, v23, (uint64_t)&v119));
      }
      uint64_t v12 = v18;
      if (v18 >= v21)
      {
        a2 = v116;
      }
      else
      {
        uint64_t v26 = v21;
        a2 = v116;
        do
        {
          uint64_t v27 = *v12;
          uint64_t *v12 = *v26;
          std::__shared_weak_count *v26 = v27;
          uint64_t v28 = v12[1];
          v12[1] = v26[1];
          v26[1] = v28;
          do
          {
            long long v29 = (void *)v12[2];
            uint64_t v30 = (std::__shared_weak_count *)v12[3];
            v12 += 2;
          }
          while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v29, v30, (uint64_t)&v119));
          do
          {
            int v31 = (void *)*(v26 - 2);
            BOOL v32 = (std::__shared_weak_count *)*(v26 - 1);
            v26 -= 2;
          }
          while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v31, v32, (uint64_t)&v119));
        }
        while (v12 < v26);
      }
      uint64_t v33 = (long long *)(v12 - 2);
      if (v12 - 2 != (void *)a1)
      {
        uint64_t v34 = *v33;
        *(void *)uint64_t v33 = 0;
        *(v12 - 1) = 0;
        CFTypeID v35 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v34;
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
      }
      int v36 = v119;
      std::string::size_type v119 = 0uLL;
      uint64_t v37 = (std::__shared_weak_count *)*(v12 - 1);
      *((_OWORD *)v12 - 1) = v36;
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (*((void *)&v119 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
      }
      if (v18 < v21) {
        goto LABEL_37;
      }
      long long v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, (uint64_t)(v12 - 2));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((uint64_t)v12, a2))
      {
        a2 = (unint64_t)(v12 - 2);
        if (v38) {
          return;
        }
        goto LABEL_1;
      }
      if (!v38)
      {
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*,false>(a1, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v39 = *(_OWORD *)a1;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v40 = (void *)v39;
      uint64_t v113 = v39;
      uint64_t v41 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()((void *)v39, *((std::__shared_weak_count **)&v39 + 1), (uint64_t)v10))
      {
        uint64_t v12 = (void *)a1;
        do
          v12 += 2;
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v40, v41, (uint64_t)v12));
      }
      else
      {
        uint64_t v42 = a1 + 16;
        do
        {
          uint64_t v12 = (void *)v42;
          if (v42 >= a2) {
            break;
          }
          uint64_t v43 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v40, v41, v42);
          uint64_t v42 = (unint64_t)(v12 + 2);
        }
        while (!v43);
      }
      CFNumberRef v44 = (void *)a2;
      if ((unint64_t)v12 < a2)
      {
        CFNumberRef v44 = (void *)a2;
        do
          v44 -= 2;
        while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v40, v41, (uint64_t)v44));
      }
      while (v12 < v44)
      {
        long long v45 = *v12;
        uint64_t *v12 = *v44;
        *CFNumberRef v44 = v45;
        CFArrayRef v46 = v12[1];
        v12[1] = v44[1];
        v44[1] = v46;
        do
          v12 += 2;
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v40, v41, (uint64_t)v12));
        do
          v44 -= 2;
        while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v40, v41, (uint64_t)v44));
      }
      uint64_t v47 = (long long *)(v12 - 2);
      BOOL v4 = (unint64_t)(v12 - 2) >= a1;
      BOOL v5 = v12 - 2 == (void *)a1;
      if (v12 - 2 != (void *)a1)
      {
        uint64_t v48 = *v47;
        *(void *)uint64_t v47 = 0;
        *(v12 - 1) = 0;
        uint64_t v49 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v48;
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
      }
      a4 = 0;
      uint64_t v50 = (std::__shared_weak_count *)*(v12 - 1);
      *((_OWORD *)v12 - 1) = v113;
      if (v50)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        a4 = 0;
      }
    }
  }
  uint64_t v53 = a1 + 16;
  uint64_t v55 = a1 == a2 || v53 == a2;
  if (a4)
  {
    if (!v55)
    {
      uint64_t v56 = 0;
      uint64_t v57 = a1;
      do
      {
        uint64_t v58 = v57;
        uint64_t v57 = v53;
        if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)(v58 + 16), *(std::__shared_weak_count **)(v53 + 8), v58))
        {
          long long v59 = *(_OWORD *)v57;
          *(void *)uint64_t v57 = 0;
          *(void *)(v57 + 8) = 0;
          long long v60 = (void *)v59;
          uint64_t v115 = v59;
          int v61 = (std::__shared_weak_count *)*((void *)&v59 + 1);
          int v62 = v56;
          while (1)
          {
            uint64_t v63 = a1 + v62;
            unint64_t v64 = *(_OWORD *)(a1 + v62);
            *(void *)uint64_t v63 = 0;
            *(void *)(v63 + 8) = 0;
            int64_t v65 = *(std::__shared_weak_count **)(a1 + v62 + 24);
            *(_OWORD *)(v63 + 16) = v64;
            if (v65) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v65);
            }
            if (!v62) {
              break;
            }
            v62 -= 16;
            if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v60, v61, v62 + a1))
            {
              int64_t v66 = a1 + v62 + 16;
              goto LABEL_90;
            }
          }
          int64_t v66 = a1;
LABEL_90:
          int64_t v67 = *(std::__shared_weak_count **)(v66 + 8);
          *(_OWORD *)int64_t v66 = v115;
          a2 = v116;
          if (v67) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v67);
          }
        }
        uint64_t v53 = v57 + 16;
        v56 += 16;
      }
      while (v57 + 16 != a2);
    }
  }
  else if (!v55)
  {
    do
    {
      uint64_t v104 = a1;
      a1 = v53;
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)(v104 + 16), *(std::__shared_weak_count **)(v53 + 8), v104))
      {
        CFArrayRef v105 = *(_OWORD *)a1;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v106 = (void *)v105;
        uint64_t v118 = v105;
        unint64_t v107 = (std::__shared_weak_count *)*((void *)&v105 + 1);
        int v108 = a1;
        do
        {
          char v109 = *(_OWORD *)(v108 - 16);
          *(void *)(v108 - 16) = 0;
          *(void *)(v108 - 8) = 0;
          int64_t v110 = *(std::__shared_weak_count **)(v108 + 8);
          *(_OWORD *)int v108 = v109;
          if (v110) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v110);
          }
          uint64_t v111 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v106, v107, v108 - 32);
          v108 -= 16;
        }
        while (v111);
        long long v112 = *(std::__shared_weak_count **)(v108 + 8);
        *(_OWORD *)int v108 = v118;
        if (v112) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v112);
        }
      }
      uint64_t v53 = a1 + 16;
    }
    while (a1 + 16 != a2);
  }
}

  uint64_t v8 = a2;
  uint64_t v229 = a2 - 16;
  while (1)
  {
    uint64_t v9 = (unint64_t)a1;
    uint64_t v10 = v8 - (void)a1;
    uint64_t v11 = (uint64_t)(v8 - (void)a1) >> 4;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          unsigned int v91 = *(uint64_t **)(a2 - 16);
          uint64_t v92 = *(std::__shared_weak_count **)(a2 - 8);
          if (v92) {
            atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v94 = *(uint64_t **)v9;
          unint64_t v93 = *(std::__shared_weak_count **)(v9 + 8);
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v95 = 0;
          if (v91 && v94)
          {
            uint64_t v96 = *v91;
            uint64_t v95 = v96 && (v97 = *v94) != 0 && *(double *)(v96 + 20) < *(double *)(v97 + 20);
          }
          if (v93) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v93);
          }
          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
          if (v95)
          {
            double v226 = *(uint64_t **)v9;
            *(void *)uint64_t v9 = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v226;
            v227 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v227;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(v9, v9 + 16, v229);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t **)v9, (uint64_t **)(v9 + 16), (uint64_t **)(v9 + 32), v229);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(v9, v9 + 16, v9 + 32, (uint64_t **)(v9 + 48), v229);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 383) {
      break;
    }
    uint64_t v236 = v9;
    if (!a3)
    {
      if (v9 == v8) {
        return;
      }
      uint64_t v124 = (unint64_t)(v11 - 2) >> 1;
      double v230 = v124;
      while (1)
      {
        CFTypeID v125 = v124;
        if (v230 < v124) {
          goto LABEL_392;
        }
        CFIndex v126 = (2 * v124) | 1;
        int v127 = v9 + 16 * v126;
        std::string::size_type v128 = 2 * v124 + 2;
        v228 = v124;
        if (v128 < v11) {
          break;
        }
LABEL_331:
        uint64_t v137 = *(uint64_t **)v127;
        uint64_t v138 = *(std::__shared_weak_count **)(v127 + 8);
        if (v138) {
          atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v139 = (uint64_t **)(v9 + 16 * v228);
        uint64_t v140 = *v139;
        CFStringRef v141 = (std::__shared_weak_count *)v139[1];
        if (v141) {
          atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v137) {
          CFStringRef v142 = v140 == 0;
        }
        else {
          CFStringRef v142 = 1;
        }
        if (!v142)
        {
          CFTypeID v143 = *v137;
          if (v143)
          {
            uint64_t v144 = *v140;
            if (v144)
            {
              std::__split_buffer<std::string>::pointer v145 = *(double *)(v143 + 20) < *(double *)(v144 + 20);
              if (!v141) {
                goto LABEL_345;
              }
LABEL_344:
              std::__shared_weak_count::__release_shared[abi:ne180100](v141);
              goto LABEL_345;
            }
          }
        }
        std::__split_buffer<std::string>::pointer v145 = 0;
        if (v141) {
          goto LABEL_344;
        }
LABEL_345:
        if (v138) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v138);
        }
        CFTypeID v125 = v228;
        if (!v145)
        {
          uint64_t v233 = *v139;
          CFPropertyListRef v146 = (std::__shared_weak_count *)v139[1];
          NSObject *v139 = 0;
          v139[1] = 0;
          while (1)
          {
            long long v147 = (uint64_t **)v127;
            uint64_t v148 = *(_OWORD *)v127;
            *(void *)int v127 = 0;
            *(void *)(v127 + 8) = 0;
            uint64_t v149 = (std::__shared_weak_count *)v139[1];
            *(_OWORD *)v139 = v148;
            if (v149) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v149);
            }
            if (v230 < v126)
            {
LABEL_390:
              unint64_t v164 = (std::__shared_weak_count *)v147[1];
              *long long v147 = v233;
              v147[1] = (uint64_t *)v146;
              uint64_t v9 = v236;
              CFTypeID v125 = v228;
              if (v164) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v164);
              }
              goto LABEL_392;
            }
            uint64_t v150 = (2 * v126) | 1;
            int v127 = v236 + 16 * v150;
            CFIndex v126 = 2 * v126 + 2;
            if (v126 >= v11)
            {
              CFIndex v126 = v150;
              goto LABEL_373;
            }
            unint64_t v151 = *(uint64_t **)v127;
            CFDictionaryRef v152 = *(std::__shared_weak_count **)(v127 + 8);
            if (v152) {
              atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            CFStringRef v154 = *(uint64_t **)(v127 + 16);
            CFStringRef v153 = *(std::__shared_weak_count **)(v127 + 24);
            if (v153) {
              atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v151 && v154 != 0)
            {
              unint64_t v156 = *v151;
              if (v156)
              {
                uint64_t v157 = *v154;
                if (v157) {
                  break;
                }
              }
            }
            uint64_t v158 = 0;
            if (v153) {
              goto LABEL_367;
            }
LABEL_368:
            if (v152) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v152);
            }
            if (v158) {
              v127 += 16;
            }
            else {
              CFIndex v126 = v150;
            }
LABEL_373:
            uint64_t v159 = *(uint64_t **)v127;
            uint64_t v160 = *(std::__shared_weak_count **)(v127 + 8);
            if (v160) {
              atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v146) {
              atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v159) {
              CFIndex v161 = v233 == 0;
            }
            else {
              CFIndex v161 = 1;
            }
            if (!v161)
            {
              std::string v162 = *v159;
              if (v162)
              {
                if (*v233)
                {
                  uint64_t v163 = *(double *)(v162 + 20) < *(double *)(*v233 + 20);
                  if (!v146) {
                    goto LABEL_387;
                  }
LABEL_386:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v146);
                  goto LABEL_387;
                }
              }
            }
            uint64_t v163 = 0;
            if (v146) {
              goto LABEL_386;
            }
LABEL_387:
            if (v160) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v160);
            }
            v139 = v147;
            if (v163) {
              goto LABEL_390;
            }
          }
          uint64_t v158 = *(double *)(v156 + 20) < *(double *)(v157 + 20);
          if (!v153) {
            goto LABEL_368;
          }
LABEL_367:
          std::__shared_weak_count::__release_shared[abi:ne180100](v153);
          goto LABEL_368;
        }
LABEL_392:
        uint64_t v124 = v125 - 1;
        if (!v125)
        {
          char v165 = (unint64_t)v10 >> 4;
          while (2)
          {
            if (v165 < 2) {
              goto LABEL_466;
            }
            unint64_t v166 = 0;
            v231 = *(uint64_t **)v9;
            double v234 = *(uint64_t **)(v9 + 8);
            uint64_t v167 = v9;
            *(void *)uint64_t v9 = 0;
            *(void *)(v9 + 8) = 0;
LABEL_396:
            unint64_t v168 = (uint64_t **)(v167 + 16 * (v166 + 1));
            unint64_t v169 = 2 * v166;
            unint64_t v166 = (2 * v166) | 1;
            uint64_t v170 = v169 + 2;
            if (v169 + 2 < v165)
            {
              unint64_t v171 = *v168;
              unint64_t v172 = (std::__shared_weak_count *)v168[1];
              if (v172) {
                atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              BOOL v174 = v168[2];
              uint64_t v173 = (std::__shared_weak_count *)v168[3];
              if (v173) {
                atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v171) {
                uint64_t v175 = v174 == 0;
              }
              else {
                uint64_t v175 = 1;
              }
              if (!v175 && (long long v176 = *v171) != 0 && (v177 = *v174) != 0)
              {
                std::string v178 = *(double *)(v176 + 20) < *(double *)(v177 + 20);
                if (!v173)
                {
LABEL_411:
                  if (v172) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v172);
                  }
                  if (v178)
                  {
                    v168 += 2;
                    unint64_t v166 = v170;
                  }
                  goto LABEL_415;
                }
              }
              else
              {
                std::string v178 = 0;
                if (!v173) {
                  goto LABEL_411;
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v173);
              goto LABEL_411;
            }
LABEL_415:
            uint64_t v179 = *(_OWORD *)v168;
            unint64_t *v168 = 0;
            v168[1] = 0;
            uint64_t v180 = *(std::__shared_weak_count **)(v167 + 8);
            *(_OWORD *)uint64_t v167 = v179;
            if (v180) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v180);
            }
            uint64_t v167 = (unint64_t)v168;
            if (v166 > (uint64_t)((unint64_t)(v165 - 2) >> 1))
            {
              if (v168 == (uint64_t **)(a2 - 16))
              {
                uint64_t v195 = (std::__shared_weak_count *)v168[1];
                unint64_t *v168 = v231;
                v168[1] = v234;
LABEL_464:
                uint64_t v9 = v236;
                if (v195) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v195);
                }
              }
              else
              {
                uint64_t v181 = *(_OWORD *)(a2 - 16);
                *(void *)(a2 - 16) = 0;
                *(void *)(a2 - 8) = 0;
                uint64_t v182 = (std::__shared_weak_count *)v168[1];
                *(_OWORD *)unint64_t v168 = v181;
                if (v182) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v182);
                }
                uint64_t v9 = v236;
                uint64_t v183 = *(std::__shared_weak_count **)(a2 - 8);
                *(void *)(a2 - 16) = v231;
                *(void *)(a2 - 8) = v234;
                if (v183) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v183);
                }
                uint64_t v184 = (uint64_t)v168 - v236 + 16;
                if (v184 >= 17)
                {
                  v185 = (unint64_t)((v184 >> 4) - 2) >> 1;
                  uint64_t v186 = v236 + 16 * v185;
                  uint64_t v187 = *(uint64_t **)v186;
                  v188 = *(std::__shared_weak_count **)(v186 + 8);
                  if (v188) {
                    atomic_fetch_add_explicit(&v188->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v190 = *v168;
                  uint64_t v189 = (std::__shared_weak_count *)v168[1];
                  if (v189) {
                    atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v187) {
                    v191 = v190 == 0;
                  }
                  else {
                    v191 = 1;
                  }
                  if (v191 || (v192 = *v187) == 0 || (uint64_t v193 = *v190) == 0)
                  {
                    uint64_t v194 = 0;
                    if (!v189) {
                      goto LABEL_439;
                    }
LABEL_438:
                    std::__shared_weak_count::__release_shared[abi:ne180100](v189);
                    goto LABEL_439;
                  }
                  uint64_t v194 = *(double *)(v192 + 20) < *(double *)(v193 + 20);
                  if (v189) {
                    goto LABEL_438;
                  }
LABEL_439:
                  if (v188) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v188);
                  }
                  if (v194)
                  {
                    std::string v197 = *v168;
                    uint64_t v196 = (std::__shared_weak_count *)v168[1];
                    unint64_t *v168 = 0;
                    v168[1] = 0;
                    while (1)
                    {
                      char v198 = (uint64_t **)v186;
                      uint64_t v199 = *(_OWORD *)v186;
                      *(void *)uint64_t v186 = 0;
                      *(void *)(v186 + 8) = 0;
                      std::string v200 = (std::__shared_weak_count *)v168[1];
                      *(_OWORD *)unint64_t v168 = v199;
                      if (v200) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v200);
                      }
                      if (!v185)
                      {
LABEL_463:
                        uint64_t v195 = (std::__shared_weak_count *)v198[1];
                        std::runtime_error *v198 = v197;
                        v198[1] = (uint64_t *)v196;
                        goto LABEL_464;
                      }
                      v185 = (v185 - 1) >> 1;
                      uint64_t v186 = v236 + 16 * v185;
                      std::__fs::filesystem::path v201 = *(uint64_t **)v186;
                      std::string v202 = *(std::__shared_weak_count **)(v186 + 8);
                      if (v202) {
                        atomic_fetch_add_explicit(&v202->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if (v196) {
                        atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if (v201 && v197 != 0)
                      {
                        uint64_t v204 = *v201;
                        if (v204)
                        {
                          if (*v197) {
                            break;
                          }
                        }
                      }
                      uint64_t v205 = 0;
                      if (v196) {
                        goto LABEL_459;
                      }
LABEL_460:
                      if (v202) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v202);
                      }
                      unint64_t v168 = v198;
                      if (!v205) {
                        goto LABEL_463;
                      }
                    }
                    uint64_t v205 = *(double *)(v204 + 20) < *(double *)(*v197 + 20);
                    if (!v196) {
                      goto LABEL_460;
                    }
LABEL_459:
                    std::__shared_weak_count::__release_shared[abi:ne180100](v196);
                    goto LABEL_460;
                  }
                }
              }
LABEL_466:
              a2 -= 16;
              if ((unint64_t)v165-- <= 2) {
                return;
              }
              continue;
            }
            goto LABEL_396;
          }
        }
      }
      uint64_t v129 = *(uint64_t **)v127;
      uint64_t v130 = *(std::__shared_weak_count **)(v127 + 8);
      if (v130) {
        atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFStringRef v132 = *(uint64_t **)(v127 + 16);
      CFDictionaryRef v131 = *(std::__shared_weak_count **)(v127 + 24);
      if (v131) {
        atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v129) {
        CFStringRef v133 = v132 == 0;
      }
      else {
        CFStringRef v133 = 1;
      }
      if (!v133 && (v134 = *v129) != 0 && (CFStringRef v135 = *v132) != 0)
      {
        v136 = *(double *)(v134 + 20) < *(double *)(v135 + 20);
        if (!v131) {
          goto LABEL_327;
        }
      }
      else
      {
        v136 = 0;
        if (!v131)
        {
LABEL_327:
          if (v130) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v130);
          }
          if (v136)
          {
            v127 += 16;
            CFIndex v126 = v128;
          }
          goto LABEL_331;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v131);
      goto LABEL_327;
    }
    uint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = (_OWORD *)(v9 + 16 * ((unint64_t)v11 >> 1));
    if ((unint64_t)v10 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t)v13, v9, v229);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(v9, (uint64_t)v13, v229);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(v9 + 16, (uint64_t)(v13 - 1), a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(v9 + 32, v9 + 16 + 16 * v12, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t)(v13 - 1), (uint64_t)v13, v9 + 16 + 16 * v12);
      uint64_t v14 = *(_OWORD *)v9;
      *(_OWORD *)uint64_t v9 = *v13;
      *unint64_t v13 = v14;
    }
    --a3;
    if (a4)
    {
      long long v15 = *(uint64_t **)v9;
LABEL_26:
      uint64_t v23 = *(std::__shared_weak_count **)(v9 + 8);
      uint64_t v24 = v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      do
      {
        uint64_t v25 = *(uint64_t **)(v24 + 16);
        uint64_t v26 = *(std::__shared_weak_count **)(v24 + 24);
        v24 += 16;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v25) {
          uint64_t v27 = v15 == 0;
        }
        else {
          uint64_t v27 = 1;
        }
        if (v27 || (uint64_t v28 = *v25) == 0 || !*v15)
        {
          long long v29 = 0;
          if (!v23) {
            goto LABEL_41;
          }
LABEL_40:
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          goto LABEL_41;
        }
        long long v29 = *(double *)(v28 + 20) < *(double *)(*v15 + 20);
        if (v23) {
          goto LABEL_40;
        }
LABEL_41:
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
      while (v29);
      uint64_t v30 = (void *)a2;
      if (v24 - 16 != v9)
      {
        while (1)
        {
          int v31 = (uint64_t *)*(v30 - 2);
          BOOL v32 = (std::__shared_weak_count *)*(v30 - 1);
          v30 -= 2;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v31 && v15 != 0)
          {
            uint64_t v34 = *v31;
            if (v34)
            {
              if (*v15) {
                break;
              }
            }
          }
          CFTypeID v35 = 0;
          if (v23) {
            goto LABEL_58;
          }
LABEL_59:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v35) {
            goto LABEL_62;
          }
        }
        CFTypeID v35 = *(double *)(v34 + 20) < *(double *)(*v15 + 20);
        if (!v23) {
          goto LABEL_59;
        }
LABEL_58:
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        goto LABEL_59;
      }
      uint64_t v30 = (void *)a2;
      while (2)
      {
        if (v24 < (unint64_t)v30)
        {
          CFNumberRef v54 = (uint64_t *)*(v30 - 2);
          uint64_t v55 = (std::__shared_weak_count *)*(v30 - 1);
          v30 -= 2;
          if (v55) {
            atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v56 = 0;
          if (v54 && v15)
          {
            uint64_t v57 = *v54;
            if (v57 && *v15)
            {
              uint64_t v56 = *(double *)(v57 + 20) < *(double *)(*v15 + 20);
              goto LABEL_120;
            }
            uint64_t v56 = 0;
            if (!v23)
            {
LABEL_122:
              if (v55) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v55);
              }
              if (v56) {
                break;
              }
              continue;
            }
          }
          else
          {
LABEL_120:
            if (!v23) {
              goto LABEL_122;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          goto LABEL_122;
        }
        break;
      }
LABEL_62:
      a1 = (void *)v24;
      if (v24 < (unint64_t)v30)
      {
        int v36 = v30;
        do
        {
          uint64_t v37 = *a1;
          *a1 = *v36;
          *int v36 = v37;
          long long v38 = a1[1];
          a1[1] = v36[1];
          v36[1] = v38;
          do
          {
            uint64_t v39 = (uint64_t *)a1[2];
            uint64_t v40 = (std::__shared_weak_count *)a1[3];
            a1 += 2;
            if (v40) {
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v39) {
              uint64_t v41 = v15 == 0;
            }
            else {
              uint64_t v41 = 1;
            }
            if (v41 || (uint64_t v42 = *v39) == 0 || !*v15)
            {
              uint64_t v43 = 0;
              if (!v23) {
                goto LABEL_79;
              }
LABEL_78:
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              goto LABEL_79;
            }
            uint64_t v43 = *(double *)(v42 + 20) < *(double *)(*v15 + 20);
            if (v23) {
              goto LABEL_78;
            }
LABEL_79:
            if (v40) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            }
          }
          while (v43);
          do
          {
            CFNumberRef v44 = (uint64_t *)*(v36 - 2);
            long long v45 = (std::__shared_weak_count *)*(v36 - 1);
            v36 -= 2;
            if (v45) {
              atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v44) {
              CFArrayRef v46 = v15 == 0;
            }
            else {
              CFArrayRef v46 = 1;
            }
            if (v46 || (uint64_t v47 = *v44) == 0 || !*v15)
            {
              uint64_t v48 = 0;
              if (!v23) {
                goto LABEL_96;
              }
LABEL_95:
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              goto LABEL_96;
            }
            uint64_t v48 = *(double *)(v47 + 20) < *(double *)(*v15 + 20);
            if (v23) {
              goto LABEL_95;
            }
LABEL_96:
            if (v45) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v45);
            }
          }
          while (!v48);
        }
        while (a1 < v36);
      }
      uint64_t v49 = (long long *)(a1 - 2);
      if (a1 - 2 != (void *)v236)
      {
        uint64_t v50 = *v49;
        *(void *)uint64_t v49 = 0;
        *(a1 - 1) = 0;
        uint64_t v51 = *(std::__shared_weak_count **)(v236 + 8);
        *(_OWORD *)uint64_t v236 = v50;
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
      }
      BOOL v52 = (std::__shared_weak_count *)*(a1 - 1);
      *(a1 - 2) = v15;
      *(a1 - 1) = v23;
      uint64_t v8 = a2;
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v24 < (unint64_t)v30)
      {
LABEL_108:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*,false>(v236, a1 - 2, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        uint64_t v53 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(v236, (uint64_t)(a1 - 2));
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t)a1, a2))
        {
          a2 = (unint64_t)(a1 - 2);
          a1 = (void *)v236;
          if (v53) {
            return;
          }
          goto LABEL_1;
        }
        if (!v53) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      uint64_t v16 = *(uint64_t **)(v9 - 16);
      uint64_t v17 = *(std::__shared_weak_count **)(v9 - 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = *(uint64_t **)v9;
      uint64_t v18 = *(std::__shared_weak_count **)(v9 + 8);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v20 = 0;
      if (v16 && v19)
      {
        uint64_t v21 = *v16;
        v20 = v21 && (uint64_t v22 = *v19) != 0 && *(double *)(v21 + 20) < *(double *)(v22 + 20);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      long long v15 = *(uint64_t **)v9;
      if (v20) {
        goto LABEL_26;
      }
      uint64_t v58 = *(std::__shared_weak_count **)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v60 = *(uint64_t **)(a2 - 16);
      long long v59 = *(std::__shared_weak_count **)(a2 - 8);
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v61 = 0;
      if (v15 && v60) {
        v61 = *v15 && (int v62 = *v60) != 0 && *(double *)(*v15 + 20) < *(double *)(v62 + 20);
      }
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (v61)
      {
        a1 = (void *)v9;
        do
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v64 = (uint64_t *)a1[2];
          uint64_t v63 = (std::__shared_weak_count *)a1[3];
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int64_t v65 = 0;
          if (v15 && v64) {
            int64_t v65 = *v15 && (v66 = *v64) != 0 && *(double *)(*v15 + 20) < *(double *)(v66 + 20);
          }
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          a1 += 2;
        }
        while (!v65);
      }
      else
      {
        int64_t v67 = (void **)(v9 + 16);
        do
        {
          a1 = v67;
          if ((unint64_t)v67 >= a2) {
            break;
          }
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFNumberRef v69 = *v67;
          uint64_t v68 = (std::__shared_weak_count *)a1[1];
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v70 = 0;
          if (v15 && v69) {
            v70 = *v15 && (long long v71 = *v69) != 0 && *(double *)(*v15 + 20) < *(double *)(v71 + 20);
          }
          if (v68) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v68);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          int64_t v67 = (void **)(a1 + 2);
        }
        while (!v70);
      }
      uint64_t v72 = (void *)a2;
      if ((unint64_t)a1 < a2)
      {
        uint64_t v72 = (void *)a2;
        do
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v74 = (uint64_t *)*(v72 - 2);
          unint64_t v73 = (std::__shared_weak_count *)*(v72 - 1);
          if (v73) {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v75 = 0;
          if (v15 && v74) {
            uint64_t v75 = *v15 && (v76 = *v74) != 0 && *(double *)(*v15 + 20) < *(double *)(v76 + 20);
          }
          if (v73) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v73);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          v72 -= 2;
        }
        while (v75);
      }
LABEL_229:
      if (a1 < v72)
      {
        unint64_t v77 = *a1;
        *a1 = *v72;
        _DWORD *v72 = v77;
        uint64_t v78 = a1[1];
        a1[1] = v72[1];
        v72[1] = v78;
        while (1)
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v80 = (uint64_t *)a1[2];
          uint64_t v79 = (std::__shared_weak_count *)a1[3];
          if (v79) {
            atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v81 = 0;
          if (v15 && v80)
          {
            if (!*v15 || (CFNumberRef v82 = *v80) == 0)
            {
              uint64_t v81 = 0;
              if (!v79) {
                goto LABEL_207;
              }
LABEL_206:
              std::__shared_weak_count::__release_shared[abi:ne180100](v79);
              goto LABEL_207;
            }
            uint64_t v81 = *(double *)(*v15 + 20) < *(double *)(v82 + 20);
          }
          if (v79) {
            goto LABEL_206;
          }
LABEL_207:
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          a1 += 2;
          if (v81)
          {
            while (1)
            {
              if (v58) {
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v85 = (uint64_t *)*(v72 - 2);
              uint64_t v84 = (std::__shared_weak_count *)*(v72 - 1);
              if (v84) {
                atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v83 = 0;
              if (v15 && v85)
              {
                if (!*v15 || (long long v86 = *v85) == 0)
                {
                  int v83 = 0;
                  if (!v84) {
                    goto LABEL_226;
                  }
LABEL_225:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v84);
                  goto LABEL_226;
                }
                int v83 = *(double *)(*v15 + 20) < *(double *)(v86 + 20);
              }
              if (v84) {
                goto LABEL_225;
              }
LABEL_226:
              if (v58) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v58);
              }
              v72 -= 2;
              if (!v83) {
                goto LABEL_229;
              }
            }
          }
        }
      }
      uint64_t v87 = (long long *)(a1 - 2);
      BOOL v4 = (unint64_t)(a1 - 2) >= v9;
      BOOL v5 = a1 - 2 == (void *)v9;
      if (a1 - 2 != (void *)v9)
      {
        unint64_t v88 = *v87;
        *(void *)uint64_t v87 = 0;
        *(a1 - 1) = 0;
        long long v89 = *(std::__shared_weak_count **)(v9 + 8);
        *(_OWORD *)uint64_t v9 = v88;
        if (v89) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v89);
        }
      }
      a4 = 0;
      __int16 v90 = (std::__shared_weak_count *)*(a1 - 1);
      *(a1 - 2) = v15;
      *(a1 - 1) = v58;
      uint64_t v8 = a2;
      if (v90)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
        a4 = 0;
      }
    }
  }
  long long v98 = (void *)(v9 + 16);
  uint64_t v100 = v9 == v8 || v98 == (void *)v8;
  if ((a4 & 1) == 0)
  {
    if (v100) {
      return;
    }
    while (1)
    {
      v207 = v9;
      uint64_t v9 = (unint64_t)v98;
      v208 = *(uint64_t **)(v207 + 16);
      v209 = *(std::__shared_weak_count **)(v207 + 24);
      if (v209) {
        atomic_fetch_add_explicit(&v209->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v211 = *(uint64_t **)v207;
      v210 = *(std::__shared_weak_count **)(v207 + 8);
      if (v210) {
        atomic_fetch_add_explicit(&v210->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v208 && v211 != 0)
      {
        v213 = *v208;
        if (v213)
        {
          uint64_t v214 = *v211;
          if (v214) {
            break;
          }
        }
      }
      uint64_t v215 = 0;
      if (v210) {
        goto LABEL_482;
      }
LABEL_483:
      if (v209) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v209);
      }
      if (!v215) {
        goto LABEL_508;
      }
      v216 = *(uint64_t **)v9;
      v217 = *(std::__shared_weak_count **)(v207 + 24);
      v218 = v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      do
      {
        v219 = *(_OWORD *)(v218 - 16);
        *(void *)(v218 - 16) = 0;
        *(void *)(v218 - 8) = 0;
        uint64_t v220 = *(std::__shared_weak_count **)(v218 + 8);
        *(_OWORD *)v218 = v219;
        if (v220) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v220);
        }
        if (v217) {
          atomic_fetch_add_explicit(&v217->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v222 = *(uint64_t **)(v218 - 32);
        v221 = *(std::__shared_weak_count **)(v218 - 24);
        if (v221) {
          atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v223 = 0;
        if (!v216 || !v222) {
          goto LABEL_498;
        }
        if (*v216)
        {
          v224 = *v222;
          if (v224)
          {
            uint64_t v223 = *(double *)(*v216 + 20) < *(double *)(v224 + 20);
LABEL_498:
            if (!v221) {
              goto LABEL_500;
            }
LABEL_499:
            std::__shared_weak_count::__release_shared[abi:ne180100](v221);
            goto LABEL_500;
          }
        }
        uint64_t v223 = 0;
        if (v221) {
          goto LABEL_499;
        }
LABEL_500:
        if (v217) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v217);
        }
        v218 -= 16;
      }
      while (v223);
      v225 = *(std::__shared_weak_count **)(v218 + 8);
      *(void *)v218 = v216;
      *(void *)(v218 + 8) = v217;
      if (v225) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v225);
      }
LABEL_508:
      long long v98 = (void *)(v9 + 16);
      if (v9 + 16 == a2) {
        return;
      }
    }
    uint64_t v215 = *(double *)(v213 + 20) < *(double *)(v214 + 20);
    if (!v210) {
      goto LABEL_483;
    }
LABEL_482:
    std::__shared_weak_count::__release_shared[abi:ne180100](v210);
    goto LABEL_483;
  }
  if (v100) {
    return;
  }
  CFTypeID v101 = 0;
  int v102 = (void *)v9;
  while (2)
  {
    uint64_t v103 = (uint64_t **)v102;
    int v102 = v98;
    uint64_t v104 = v103[2];
    CFArrayRef v105 = (std::__shared_weak_count *)v103[3];
    if (v105) {
      atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v107 = *v103;
    long long v106 = (std::__shared_weak_count *)v103[1];
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v104) {
      int v108 = v107 == 0;
    }
    else {
      int v108 = 1;
    }
    if (v108 || (char v109 = *v104) == 0 || (v110 = *v107) == 0)
    {
      uint64_t v111 = 0;
      if (!v106) {
        goto LABEL_280;
      }
      goto LABEL_279;
    }
    uint64_t v111 = *(double *)(v109 + 20) < *(double *)(v110 + 20);
    if (v106) {
LABEL_279:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
LABEL_280:
    if (v105) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v105);
    }
    if (!v111) {
      goto LABEL_307;
    }
    long long v112 = (uint64_t *)*v102;
    uint64_t v113 = (std::__shared_weak_count *)v103[3];
    uint64_t v114 = v101;
    *int v102 = 0;
    v102[1] = 0;
    while (2)
    {
      uint64_t v115 = v9 + v114;
      int v116 = *(_OWORD *)(v9 + v114);
      *(void *)uint64_t v115 = 0;
      *(void *)(v115 + 8) = 0;
      uint64_t v117 = *(std::__shared_weak_count **)(v9 + v114 + 24);
      *(_OWORD *)(v115 + 16) = v116;
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      if (v114)
      {
        if (v113) {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v119 = *(uint64_t **)(v9 + v114 - 16);
        uint64_t v118 = *(std::__shared_weak_count **)(v9 + v114 - 8);
        if (v118) {
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v120 = 0;
        if (v112 && v119)
        {
          if (*v112)
          {
            char v121 = *v119;
            if (v121)
            {
              unint64_t v120 = *(double *)(*v112 + 20) < *(double *)(v121 + 20);
              goto LABEL_296;
            }
          }
          unint64_t v120 = 0;
          if (!v118)
          {
LABEL_298:
            if (v113) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v113);
            }
            v114 -= 16;
            if (!v120)
            {
              uint64_t v122 = (void *)(v9 + v114 + 16);
              goto LABEL_305;
            }
            continue;
          }
        }
        else
        {
LABEL_296:
          if (!v118) {
            goto LABEL_298;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v118);
        goto LABEL_298;
      }
      break;
    }
    uint64_t v122 = (void *)v9;
LABEL_305:
    std::string::size_type v123 = (std::__shared_weak_count *)v122[1];
    *uint64_t v122 = v112;
    v122[1] = v113;
    if (v123) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v123);
    }
LABEL_307:
    long long v98 = v102 + 2;
    v101 += 16;
    if (v102 + 2 != (void *)a2) {
      continue;
    }
    break;
  }
}

  uint64_t v10 = (void **)(a2 - 16);
  uint64_t v114 = (void **)(a2 - 32);
  uint64_t v11 = (void **)(a2 - 48);
  uint64_t v12 = (void *)a1;
  int v116 = a2;
  while (1)
  {
    a1 = (unint64_t)v12;
    unint64_t v13 = a2 - (void)v12;
    uint64_t v14 = (uint64_t)(a2 - (void)v12) >> 4;
    if (v5 || !v4)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(a2 - 16), *(std::__shared_weak_count **)(a2 - 8), a1))
          {
            uint64_t v51 = *(void *)a1;
            *(void *)a1 = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v51;
            BOOL v52 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v52;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), v10);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), (uint64_t)v10);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a1 + 48, (uint64_t)v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 383) {
      break;
    }
    if (!a3)
    {
      if (a1 == a2) {
        return;
      }
      uint64_t v68 = (unint64_t)(v14 - 2) >> 1;
      CFNumberRef v69 = v68;
      do
      {
        unsigned int v70 = v69;
        if (v68 >= v69)
        {
          long long v71 = (2 * v69) | 1;
          uint64_t v72 = (void **)(a1 + 16 * v71);
          if (2 * v69 + 2 < v14
            && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)(v72 + 2)))
          {
            v72 += 2;
            long long v71 = 2 * v70 + 2;
          }
          unint64_t v73 = a1 + 16 * v70;
          if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], v73))
          {
            std::string::size_type v119 = *(_OWORD *)v73;
            *(void *)unint64_t v73 = 0;
            *(void *)(v73 + 8) = 0;
            do
            {
              long long v74 = v72;
              uint64_t v75 = *(_OWORD *)v72;
              _DWORD *v72 = 0;
              v72[1] = 0;
              uint64_t v76 = *(std::__shared_weak_count **)(v73 + 8);
              *(_OWORD *)unint64_t v73 = v75;
              if (v76) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v76);
              }
              if (v68 < v71) {
                break;
              }
              unint64_t v77 = (2 * v71) | 1;
              uint64_t v72 = (void **)(a1 + 16 * v77);
              uint64_t v78 = 2 * v71 + 2;
              if (v78 < v14
                && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)(v72 + 2)))
              {
                v72 += 2;
                unint64_t v77 = v78;
              }
              unint64_t v73 = (uint64_t)v74;
              long long v71 = v77;
            }
            while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)&v119));
            uint64_t v79 = v119;
            std::string::size_type v119 = 0uLL;
            __int16 v80 = (std::__shared_weak_count *)v74[1];
            *(_OWORD *)long long v74 = v79;
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            if (*((void *)&v119 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
            }
          }
        }
        CFNumberRef v69 = v70 - 1;
      }
      while (v70);
      uint64_t v81 = (unint64_t)v13 >> 4;
      CFNumberRef v82 = v116;
      while (2)
      {
        if (v81 >= 2)
        {
          int v83 = 0;
          uint64_t v84 = *(void *)a1;
          uint64_t v117 = *(void *)(a1 + 8);
          uint64_t v85 = a1;
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          do
          {
            long long v86 = v85 + 16 * v83 + 16;
            uint64_t v87 = 2 * v83;
            int v83 = (2 * v83) | 1;
            unint64_t v88 = v87 + 2;
            if (v87 + 2 < v81
              && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)v86, *(std::__shared_weak_count **)(v86 + 8), v86 + 16))
            {
              v86 += 16;
              int v83 = v88;
            }
            long long v89 = *(_OWORD *)v86;
            *(void *)long long v86 = 0;
            *(void *)(v86 + 8) = 0;
            __int16 v90 = *(std::__shared_weak_count **)(v85 + 8);
            *(_OWORD *)uint64_t v85 = v89;
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            uint64_t v85 = v86;
          }
          while (v83 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
          if (v86 == v82 - 16)
          {
            int v102 = *(std::__shared_weak_count **)(v86 + 8);
            *(void *)long long v86 = v84;
            *(void *)(v86 + 8) = v117;
            if (!v102) {
              goto LABEL_140;
            }
          }
          else
          {
            unsigned int v91 = *(_OWORD *)(v82 - 16);
            *(void *)(v82 - 16) = 0;
            *(void *)(v82 - 8) = 0;
            uint64_t v92 = *(std::__shared_weak_count **)(v86 + 8);
            *(_OWORD *)long long v86 = v91;
            if (v92) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v92);
            }
            unint64_t v93 = *(std::__shared_weak_count **)(v82 - 8);
            *(void *)(v82 - 16) = v84;
            *(void *)(v82 - 8) = v117;
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
            uint64_t v94 = v86 + 16 - a1;
            if (v94 < 17) {
              goto LABEL_140;
            }
            uint64_t v95 = (unint64_t)((v94 >> 4) - 2) >> 1;
            uint64_t v96 = (void **)(a1 + 16 * v95);
            if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v96, (std::__shared_weak_count *)v96[1], v86))goto LABEL_140; {
            std::string::size_type v119 = *(_OWORD *)v86;
            }
            *(void *)long long v86 = 0;
            *(void *)(v86 + 8) = 0;
            do
            {
              int v97 = v96;
              long long v98 = *(_OWORD *)v96;
              *uint64_t v96 = 0;
              v96[1] = 0;
              unint64_t v99 = *(std::__shared_weak_count **)(v86 + 8);
              *(_OWORD *)long long v86 = v98;
              if (v99) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v99);
              }
              if (!v95) {
                break;
              }
              uint64_t v95 = (v95 - 1) >> 1;
              uint64_t v96 = (void **)(a1 + 16 * v95);
              long long v86 = (uint64_t)v97;
            }
            while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v96, (std::__shared_weak_count *)v96[1], (uint64_t)&v119));
            uint64_t v100 = v119;
            std::string::size_type v119 = 0uLL;
            CFTypeID v101 = (std::__shared_weak_count *)v97[1];
            *(_OWORD *)int v97 = v100;
            if (!v101) {
              goto LABEL_140;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v101);
            int v102 = (std::__shared_weak_count *)*((void *)&v119 + 1);
            if (!*((void *)&v119 + 1)) {
              goto LABEL_140;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
LABEL_140:
        v82 -= 16;
        if ((unint64_t)v81-- <= 2) {
          return;
        }
        continue;
      }
    }
    long long v15 = (unint64_t)v14 >> 1;
    uint64_t v16 = (void *)(a1 + 16 * ((unint64_t)v14 >> 1));
    if ((unint64_t)v13 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v16, (void **)a1, v10);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)v16, v10);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)(a1 + 16), (void **)v16 - 2, v114);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)(a1 + 32), (void **)(a1 + 16 + 16 * v15), v11);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v16 - 2, (void **)v16, (void **)(a1 + 16 + 16 * v15));
      uint64_t v17 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v17;
    }
    --a3;
    if ((a4 & 1) != 0
      || sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(a1 - 16), *(std::__shared_weak_count **)(a1 - 8), a1))
    {
      std::string::size_type v119 = *(_OWORD *)a1;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v18 = (void *)a1;
      do
      {
        uint64_t v19 = v18;
        BOOL v20 = (void *)v18[2];
        v18 += 2;
      }
      while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v20, (std::__shared_weak_count *)v19[3], (uint64_t)&v119));
      uint64_t v21 = (void *)v116;
      if (v19 == (void *)a1)
      {
        uint64_t v21 = (void *)v116;
        do
        {
          if (v18 >= v21) {
            break;
          }
          uint64_t v24 = (void *)*(v21 - 2);
          uint64_t v25 = (std::__shared_weak_count *)*(v21 - 1);
          v21 -= 2;
        }
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v24, v25, (uint64_t)&v119));
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)*(v21 - 2);
          uint64_t v23 = (std::__shared_weak_count *)*(v21 - 1);
          v21 -= 2;
        }
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v22, v23, (uint64_t)&v119));
      }
      uint64_t v12 = v18;
      if (v18 >= v21)
      {
        a2 = v116;
      }
      else
      {
        uint64_t v26 = v21;
        a2 = v116;
        do
        {
          uint64_t v27 = *v12;
          uint64_t *v12 = *v26;
          std::__shared_weak_count *v26 = v27;
          uint64_t v28 = v12[1];
          v12[1] = v26[1];
          v26[1] = v28;
          do
          {
            long long v29 = (void *)v12[2];
            uint64_t v30 = (std::__shared_weak_count *)v12[3];
            v12 += 2;
          }
          while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v29, v30, (uint64_t)&v119));
          do
          {
            int v31 = (void *)*(v26 - 2);
            BOOL v32 = (std::__shared_weak_count *)*(v26 - 1);
            v26 -= 2;
          }
          while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v31, v32, (uint64_t)&v119));
        }
        while (v12 < v26);
      }
      uint64_t v33 = (long long *)(v12 - 2);
      if (v12 - 2 != (void *)a1)
      {
        uint64_t v34 = *v33;
        *(void *)uint64_t v33 = 0;
        *(v12 - 1) = 0;
        CFTypeID v35 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v34;
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
      }
      int v36 = v119;
      std::string::size_type v119 = 0uLL;
      uint64_t v37 = (std::__shared_weak_count *)*(v12 - 1);
      *((_OWORD *)v12 - 1) = v36;
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (*((void *)&v119 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
      }
      if (v18 < v21) {
        goto LABEL_37;
      }
      long long v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, (uint64_t)(v12 - 2));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)v12, a2))
      {
        a2 = (unint64_t)(v12 - 2);
        if (v38) {
          return;
        }
        goto LABEL_1;
      }
      if (!v38)
      {
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>(a1, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v39 = *(_OWORD *)a1;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v40 = (void *)v39;
      uint64_t v113 = v39;
      uint64_t v41 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()((void *)v39, *((std::__shared_weak_count **)&v39 + 1), (uint64_t)v10))
      {
        uint64_t v12 = (void *)a1;
        do
          v12 += 2;
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, (uint64_t)v12));
      }
      else
      {
        uint64_t v42 = a1 + 16;
        do
        {
          uint64_t v12 = (void *)v42;
          if (v42 >= a2) {
            break;
          }
          uint64_t v43 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, v42);
          uint64_t v42 = (unint64_t)(v12 + 2);
        }
        while (!v43);
      }
      CFNumberRef v44 = (void *)a2;
      if ((unint64_t)v12 < a2)
      {
        CFNumberRef v44 = (void *)a2;
        do
          v44 -= 2;
        while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, (uint64_t)v44));
      }
      while (v12 < v44)
      {
        long long v45 = *v12;
        uint64_t *v12 = *v44;
        *CFNumberRef v44 = v45;
        CFArrayRef v46 = v12[1];
        v12[1] = v44[1];
        v44[1] = v46;
        do
          v12 += 2;
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, (uint64_t)v12));
        do
          v44 -= 2;
        while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, (uint64_t)v44));
      }
      uint64_t v47 = (long long *)(v12 - 2);
      BOOL v4 = (unint64_t)(v12 - 2) >= a1;
      BOOL v5 = v12 - 2 == (void *)a1;
      if (v12 - 2 != (void *)a1)
      {
        uint64_t v48 = *v47;
        *(void *)uint64_t v47 = 0;
        *(v12 - 1) = 0;
        uint64_t v49 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v48;
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
      }
      a4 = 0;
      uint64_t v50 = (std::__shared_weak_count *)*(v12 - 1);
      *((_OWORD *)v12 - 1) = v113;
      if (v50)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        a4 = 0;
      }
    }
  }
  uint64_t v53 = a1 + 16;
  uint64_t v55 = a1 == a2 || v53 == a2;
  if (a4)
  {
    if (!v55)
    {
      uint64_t v56 = 0;
      uint64_t v57 = a1;
      do
      {
        uint64_t v58 = v57;
        uint64_t v57 = v53;
        if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(v58 + 16), *(std::__shared_weak_count **)(v53 + 8), v58))
        {
          long long v59 = *(_OWORD *)v57;
          *(void *)uint64_t v57 = 0;
          *(void *)(v57 + 8) = 0;
          long long v60 = (void *)v59;
          uint64_t v115 = v59;
          int v61 = (std::__shared_weak_count *)*((void *)&v59 + 1);
          int v62 = v56;
          while (1)
          {
            uint64_t v63 = a1 + v62;
            unint64_t v64 = *(_OWORD *)(a1 + v62);
            *(void *)uint64_t v63 = 0;
            *(void *)(v63 + 8) = 0;
            int64_t v65 = *(std::__shared_weak_count **)(a1 + v62 + 24);
            *(_OWORD *)(v63 + 16) = v64;
            if (v65) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v65);
            }
            if (!v62) {
              break;
            }
            v62 -= 16;
            if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v60, v61, v62 + a1))
            {
              int64_t v66 = a1 + v62 + 16;
              goto LABEL_90;
            }
          }
          int64_t v66 = a1;
LABEL_90:
          int64_t v67 = *(std::__shared_weak_count **)(v66 + 8);
          *(_OWORD *)int64_t v66 = v115;
          a2 = v116;
          if (v67) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v67);
          }
        }
        uint64_t v53 = v57 + 16;
        v56 += 16;
      }
      while (v57 + 16 != a2);
    }
  }
  else if (!v55)
  {
    do
    {
      uint64_t v104 = a1;
      a1 = v53;
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(v104 + 16), *(std::__shared_weak_count **)(v53 + 8), v104))
      {
        CFArrayRef v105 = *(_OWORD *)a1;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v106 = (void *)v105;
        uint64_t v118 = v105;
        unint64_t v107 = (std::__shared_weak_count *)*((void *)&v105 + 1);
        int v108 = a1;
        do
        {
          char v109 = *(_OWORD *)(v108 - 16);
          *(void *)(v108 - 16) = 0;
          *(void *)(v108 - 8) = 0;
          int64_t v110 = *(std::__shared_weak_count **)(v108 + 8);
          *(_OWORD *)int v108 = v109;
          if (v110) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v110);
          }
          uint64_t v111 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v106, v107, v108 - 32);
          v108 -= 16;
        }
        while (v111);
        long long v112 = *(std::__shared_weak_count **)(v108 + 8);
        *(_OWORD *)int v108 = v118;
        if (v112) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v112);
        }
      }
      uint64_t v53 = a1 + 16;
    }
    while (a1 + 16 != a2);
  }
}

  uint64_t v8 = a2;
  uint64_t v173 = a2 - 16;
  uint64_t v9 = (uint64_t *)a1;
  while (1)
  {
    uint64_t v10 = (uint64_t)v9;
    uint64_t v11 = v8 - (void)v9;
    uint64_t v12 = (uint64_t)(v8 - (void)v9) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          CFNumberRef v69 = *(void **)(a2 - 16);
          unsigned int v70 = *(std::__shared_weak_count **)(a2 - 8);
          if (v70) {
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v71 = *(std::__shared_weak_count **)(v10 + 8);
          uint64_t v182 = *(void **)v10;
          uint64_t v183 = v71;
          if (v71)
          {
            atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v72 = lessThan(v69, &v182);
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
            if (!v70) {
              goto LABEL_152;
            }
          }
          else
          {
            uint64_t v72 = lessThan(v69, &v182);
            if (!v70)
            {
LABEL_152:
              if (v72)
              {
                unint64_t v73 = *(void **)v10;
                *(void *)uint64_t v10 = *(void *)(a2 - 16);
                *(void *)(a2 - 16) = v73;
                long long v74 = *(void *)(v10 + 8);
                *(void *)(v10 + 8) = *(void *)(a2 - 8);
                *(void *)(a2 - 8) = v74;
              }
              return;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          goto LABEL_152;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10, v10 + 16, v173);
          return;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10, v10 + 16, v10 + 32, v173);
          return;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10, v10 + 16, v10 + 32, v10 + 48, v173);
          return;
        default:
          JUMPOUT(0);
      }
    }
    uint64_t v180 = (void *)v10;
    if (v11 <= 383)
    {
      if (a4)
      {
        if (v10 == v8) {
          return;
        }
        uint64_t v75 = v10 + 16;
        if (v10 + 16 == a2) {
          return;
        }
        uint64_t v76 = 0;
        unint64_t v77 = v10;
        while (1)
        {
          uint64_t v78 = v77;
          unint64_t v77 = v75;
          uint64_t v79 = *(void **)(v78 + 16);
          __int16 v80 = *(std::__shared_weak_count **)(v78 + 24);
          if (v80) {
            atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v81 = *(std::__shared_weak_count **)(v78 + 8);
          uint64_t v182 = *(void **)v78;
          uint64_t v183 = v81;
          if (!v81) {
            break;
          }
          atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
          CFNumberRef v82 = lessThan(v79, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          if (v80) {
            goto LABEL_171;
          }
LABEL_172:
          if (!v82) {
            goto LABEL_191;
          }
          int v83 = *(void **)v77;
          uint64_t v84 = *(std::__shared_weak_count **)(v78 + 24);
          uint64_t v85 = v76;
          *(void *)unint64_t v77 = 0;
          *(void *)(v77 + 8) = 0;
          do
          {
            long long v86 = (char *)v180 + v85;
            uint64_t v87 = *(_OWORD *)((char *)v180 + v85);
            *(void *)long long v86 = 0;
            *((void *)v86 + 1) = 0;
            unint64_t v88 = *(std::__shared_weak_count **)((char *)v180 + v85 + 24);
            *((_OWORD *)v86 + 1) = v87;
            if (v88) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v88);
            }
            if (!v85)
            {
              unsigned int v91 = v180;
              goto LABEL_189;
            }
            if (v84) {
              atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = *(void **)((char *)v180 + v85 - 16);
            long long v89 = *(std::__shared_weak_count **)((char *)v180 + v85 - 8);
            uint64_t v183 = v89;
            if (v89)
            {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
              __int16 v90 = lessThan(v83, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v89);
              if (!v84) {
                goto LABEL_182;
              }
LABEL_181:
              std::__shared_weak_count::__release_shared[abi:ne180100](v84);
              goto LABEL_182;
            }
            __int16 v90 = lessThan(v83, &v182);
            if (v84) {
              goto LABEL_181;
            }
LABEL_182:
            v85 -= 16;
          }
          while (v90);
          unsigned int v91 = (void *)((char *)v180 + v85 + 16);
LABEL_189:
          uint64_t v92 = (std::__shared_weak_count *)v91[1];
          std::__shared_weak_count *v91 = v83;
          v91[1] = v84;
          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
LABEL_191:
          uint64_t v75 = v77 + 16;
          v76 += 16;
          if (v77 + 16 == a2) {
            return;
          }
        }
        CFNumberRef v82 = lessThan(v79, &v182);
        if (!v80) {
          goto LABEL_172;
        }
LABEL_171:
        std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        goto LABEL_172;
      }
      if (v10 == v8) {
        return;
      }
      uint64_t v157 = v10 + 16;
      if (v10 + 16 == a2) {
        return;
      }
      while (2)
      {
        uint64_t v158 = v10;
        uint64_t v10 = v157;
        uint64_t v159 = *(void **)(v158 + 16);
        uint64_t v160 = *(std::__shared_weak_count **)(v158 + 24);
        if (v160) {
          atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFIndex v161 = *(std::__shared_weak_count **)(v158 + 8);
        uint64_t v182 = *(void **)v158;
        uint64_t v183 = v161;
        if (v161)
        {
          atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string v162 = lessThan(v159, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v161);
          if (v160) {
            goto LABEL_300;
          }
        }
        else
        {
          std::string v162 = lessThan(v159, &v182);
          if (v160) {
LABEL_300:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v160);
        }
        if (!v162)
        {
LABEL_316:
          uint64_t v157 = v10 + 16;
          if (v10 + 16 == a2) {
            return;
          }
          continue;
        }
        break;
      }
      uint64_t v163 = *(void **)v10;
      unint64_t v164 = *(std::__shared_weak_count **)(v158 + 24);
      char v165 = v10;
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      while (2)
      {
        unint64_t v166 = *(_OWORD *)(v165 - 16);
        *(void *)(v165 - 16) = 0;
        *(void *)(v165 - 8) = 0;
        uint64_t v167 = *(std::__shared_weak_count **)(v165 + 8);
        *(_OWORD *)char v165 = v166;
        if (v167) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v167);
        }
        if (v164) {
          atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = *(void **)(v165 - 32);
        unint64_t v168 = *(std::__shared_weak_count **)(v165 - 24);
        uint64_t v183 = v168;
        if (v168)
        {
          atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v169 = lessThan(v163, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v168);
          if (v164) {
            goto LABEL_309;
          }
        }
        else
        {
          unint64_t v169 = lessThan(v163, &v182);
          if (v164) {
LABEL_309:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v164);
        }
        v165 -= 16;
        if (!v169)
        {
          uint64_t v170 = *(std::__shared_weak_count **)(v165 + 8);
          *(void *)char v165 = v163;
          *(void *)(v165 + 8) = v164;
          if (v170) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v170);
          }
          goto LABEL_316;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v10;
    uint64_t v14 = (unint64_t)v12 >> 1;
    long long v15 = (_OWORD *)(v10 + 16 * ((unint64_t)v12 >> 1));
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)v15, v10, v173);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10, (uint64_t)v15, v173);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10 + 16, (uint64_t)(v15 - 1), a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10 + 32, v10 + 16 + 16 * v14, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)(v15 - 1), (uint64_t)v15, v10 + 16 + 16 * v14);
      uint64_t v16 = *(_OWORD *)v10;
      *(_OWORD *)uint64_t v10 = *v15;
      *long long v15 = v16;
    }
    a1 = v10;
    --a3;
    if (a4) {
      goto LABEL_16;
    }
    uint64_t v17 = *(void **)(v10 - 16);
    uint64_t v18 = *(std::__shared_weak_count **)(v10 - 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *(std::__shared_weak_count **)(v10 + 8);
    uint64_t v182 = *(void **)v13;
    uint64_t v183 = v19;
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v20 = lessThan(v17, &v182);
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (!v18) {
        goto LABEL_15;
      }
LABEL_14:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      goto LABEL_15;
    }
    BOOL v20 = lessThan(v17, &v182);
    if (v18) {
      goto LABEL_14;
    }
LABEL_15:
    if (v20)
    {
LABEL_16:
      uint64_t v21 = *(void **)v13;
      uint64_t v22 = *(std::__shared_weak_count **)(v13 + 8);
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      do
      {
        uint64_t v23 = *(void **)(v13 + 16);
        uint64_t v24 = *(std::__shared_weak_count **)(v13 + 24);
        v13 += 16;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = v21;
        uint64_t v183 = v22;
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = lessThan(v23, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          if (!v24) {
            continue;
          }
LABEL_21:
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          continue;
        }
        uint64_t v25 = lessThan(v23, &v182);
        if (v24) {
          goto LABEL_21;
        }
      }
      while (v25);
      uint64_t v181 = a3;
      uint64_t v26 = (uint64_t *)v8;
      if (v13 - 16 != a1)
      {
        while (1)
        {
          uint64_t v27 = (void *)*(v26 - 2);
          uint64_t v28 = (std::__shared_weak_count *)*(v26 - 1);
          v26 -= 2;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v21;
          uint64_t v183 = v22;
          if (!v22) {
            break;
          }
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v29 = lessThan(v27, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          if (v28) {
            goto LABEL_31;
          }
LABEL_32:
          if (v29) {
            goto LABEL_47;
          }
        }
        long long v29 = lessThan(v27, &v182);
        if (!v28) {
          goto LABEL_32;
        }
LABEL_31:
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        goto LABEL_32;
      }
      uint64_t v26 = (uint64_t *)v8;
      while (2)
      {
        if (v13 < (unint64_t)v26)
        {
          uint64_t v30 = (void *)*(v26 - 2);
          int v31 = (std::__shared_weak_count *)*(v26 - 1);
          v26 -= 2;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v21;
          uint64_t v183 = v22;
          if (v22)
          {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL v32 = lessThan(v30, &v182);
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            if (v31) {
              goto LABEL_42;
            }
          }
          else
          {
            BOOL v32 = lessThan(v30, &v182);
            if (v31) {
LABEL_42:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          if (v32) {
            break;
          }
          continue;
        }
        break;
      }
LABEL_47:
      uint64_t v9 = (uint64_t *)v13;
      if (v13 < (unint64_t)v26)
      {
        uint64_t v33 = v26;
        do
        {
          uint64_t v34 = *v9;
          *uint64_t v9 = *v33;
          *uint64_t v33 = v34;
          CFTypeID v35 = v9[1];
          v9[1] = v33[1];
          v33[1] = v35;
          do
          {
            int v36 = (void *)v9[2];
            uint64_t v37 = (std::__shared_weak_count *)v9[3];
            v9 += 2;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = v21;
            uint64_t v183 = v22;
            if (v22)
            {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              long long v38 = lessThan(v36, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              if (!v37) {
                continue;
              }
LABEL_54:
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
              continue;
            }
            long long v38 = lessThan(v36, &v182);
            if (v37) {
              goto LABEL_54;
            }
          }
          while (v38);
          do
          {
            uint64_t v40 = (void *)*(v33 - 2);
            uint64_t v41 = (std::__shared_weak_count *)*(v33 - 1);
            v33 -= 2;
            if (v41) {
              atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = v21;
            uint64_t v183 = v22;
            if (v22)
            {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v39 = lessThan(v40, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              if (!v41) {
                continue;
              }
LABEL_65:
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              continue;
            }
            uint64_t v39 = lessThan(v40, &v182);
            if (v41) {
              goto LABEL_65;
            }
          }
          while (!v39);
        }
        while (v9 < v33);
      }
      uint64_t v42 = (long long *)(v9 - 2);
      if (v9 - 2 != (uint64_t *)a1)
      {
        uint64_t v43 = *v42;
        *(void *)uint64_t v42 = 0;
        *(v9 - 1) = 0;
        CFNumberRef v44 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v43;
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
      }
      long long v45 = (std::__shared_weak_count *)*(v9 - 1);
      *(v9 - 2) = (uint64_t)v21;
      *(v9 - 1) = (uint64_t)v22;
      uint64_t v8 = a2;
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      BOOL v4 = v13 >= (unint64_t)v26;
      a3 = v181;
      if (v4)
      {
        CFArrayRef v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, (uint64_t)(v9 - 2));
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)v9, a2))
        {
          a2 = (unint64_t)(v9 - 2);
          if (v46) {
            return;
          }
          goto LABEL_1;
        }
        if (!v46) {
          goto LABEL_77;
        }
      }
      else
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>(a1, v9 - 2, v181, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v48 = *(void **)v13;
      uint64_t v47 = *(std::__shared_weak_count **)(v13 + 8);
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)(v8 - 16);
      uint64_t v49 = *(std::__shared_weak_count **)(v8 - 8);
      uint64_t v183 = v49;
      if (!v49)
      {
        uint64_t v50 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_85;
        }
LABEL_84:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_85;
      }
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v50 = lessThan(v48, &v182);
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      if (v47) {
        goto LABEL_84;
      }
LABEL_85:
      if (v50)
      {
        uint64_t v9 = (uint64_t *)v13;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v9[2];
          uint64_t v51 = (std::__shared_weak_count *)v9[3];
          uint64_t v183 = v51;
          if (!v51) {
            break;
          }
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v52 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
          if (v47) {
            goto LABEL_91;
          }
LABEL_92:
          v9 += 2;
          if (v52) {
            goto LABEL_107;
          }
        }
        BOOL v52 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_92;
        }
LABEL_91:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_92;
      }
      uint64_t v53 = (uint64_t *)(v13 + 16);
      do
      {
        uint64_t v9 = v53;
        if ((unint64_t)v53 >= a2) {
          break;
        }
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = (void *)*v53;
        CFNumberRef v54 = (std::__shared_weak_count *)v53[1];
        uint64_t v183 = v54;
        if (!v54)
        {
          uint64_t v55 = lessThan(v48, &v182);
          if (!v47) {
            goto LABEL_103;
          }
LABEL_102:
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          goto LABEL_103;
        }
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v55 = lessThan(v48, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        if (v47) {
          goto LABEL_102;
        }
LABEL_103:
        uint64_t v53 = v9 + 2;
      }
      while (!v55);
LABEL_107:
      uint64_t v56 = (uint64_t *)a2;
      if ((unint64_t)v9 < a2)
      {
        uint64_t v56 = (uint64_t *)a2;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)*(v56 - 2);
          uint64_t v57 = (std::__shared_weak_count *)*(v56 - 1);
          uint64_t v183 = v57;
          if (!v57) {
            break;
          }
          atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v58 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          if (v47) {
            goto LABEL_113;
          }
LABEL_114:
          v56 -= 2;
          if (!v58) {
            goto LABEL_136;
          }
        }
        uint64_t v58 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_114;
        }
LABEL_113:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_114;
      }
LABEL_136:
      if (v9 < v56)
      {
        long long v59 = *v9;
        *uint64_t v9 = *v56;
        float32x4_t *v56 = v59;
        long long v60 = v9[1];
        v9[1] = v56[1];
        v56[1] = v60;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v9[2];
          int v61 = (std::__shared_weak_count *)v9[3];
          uint64_t v183 = v61;
          if (!v61) {
            break;
          }
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          int v62 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          if (v47) {
            goto LABEL_123;
          }
LABEL_124:
          v9 += 2;
          if (v62)
          {
            while (1)
            {
              if (v47) {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v182 = (void *)*(v56 - 2);
              unint64_t v64 = (std::__shared_weak_count *)*(v56 - 1);
              uint64_t v183 = v64;
              if (!v64) {
                break;
              }
              atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v63 = lessThan(v48, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v64);
              if (v47) {
                goto LABEL_134;
              }
LABEL_135:
              v56 -= 2;
              if (!v63) {
                goto LABEL_136;
              }
            }
            uint64_t v63 = lessThan(v48, &v182);
            if (!v47) {
              goto LABEL_135;
            }
LABEL_134:
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            goto LABEL_135;
          }
        }
        int v62 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_124;
        }
LABEL_123:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_124;
      }
      int64_t v65 = (long long *)(v9 - 2);
      BOOL v4 = (unint64_t)(v9 - 2) >= a1;
      BOOL v5 = v9 - 2 == (uint64_t *)a1;
      if (v9 - 2 != (uint64_t *)a1)
      {
        int64_t v66 = *v65;
        *(void *)int64_t v65 = 0;
        *(v9 - 1) = 0;
        int64_t v67 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v66;
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
      }
      a4 = 0;
      uint64_t v68 = (std::__shared_weak_count *)*(v9 - 1);
      *(v9 - 2) = (uint64_t)v48;
      *(v9 - 1) = (uint64_t)v47;
      uint64_t v8 = a2;
      if (v68)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        a4 = 0;
      }
    }
  }
  if (v10 == v8) {
    return;
  }
  unint64_t v93 = (unint64_t)(v12 - 2) >> 1;
  uint64_t v94 = v93;
  unint64_t v171 = v11;
  unint64_t v172 = v12;
  do
  {
    uint64_t v95 = v94;
    if (v93 >= v94)
    {
      uint64_t v96 = (2 * v94) | 1;
      int v97 = v180;
      long long v98 = &v180[2 * v96];
      unint64_t v99 = 2 * v94 + 2;
      BOOL v174 = v94;
      if (v99 < v12)
      {
        uint64_t v100 = *(_OWORD *)v98;
        CFTypeID v101 = (std::__shared_weak_count *)v98[1];
        if (v101) {
          atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = (void *)v98[2];
        int v102 = (std::__shared_weak_count *)v98[3];
        uint64_t v183 = v102;
        if (v102)
        {
          atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v103 = lessThan((void *)v100, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
        else
        {
          uint64_t v103 = lessThan((void *)v100, &v182);
        }
        uint64_t v95 = v174;
        if (v101) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v101);
        }
        if (v103)
        {
          v98 += 2;
          uint64_t v96 = v99;
        }
        int v97 = v180;
      }
      uint64_t v104 = (void *)*v98;
      CFArrayRef v105 = (std::__shared_weak_count *)v98[1];
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v106 = &v97[2 * v95];
      uint64_t v182 = (void *)*v106;
      unint64_t v107 = (std::__shared_weak_count *)v106[1];
      uint64_t v183 = v107;
      if (v107)
      {
        atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
        int v108 = lessThan(v104, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v107);
      }
      else
      {
        int v108 = lessThan(v104, &v182);
      }
      uint64_t v95 = v174;
      if (v105) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v105);
      }
      if (!v108)
      {
        unint64_t v177 = (void *)*v106;
        char v109 = (std::__shared_weak_count *)v106[1];
        *long long v106 = 0;
        v106[1] = 0;
        int64_t v110 = v180;
        while (1)
        {
          uint64_t v111 = v98;
          long long v112 = *(_OWORD *)v98;
          uint64_t *v98 = 0;
          v98[1] = 0;
          uint64_t v113 = (std::__shared_weak_count *)v106[1];
          *(_OWORD *)long long v106 = v112;
          if (v113) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v113);
          }
          if (v93 < v96)
          {
LABEL_241:
            std::string::size_type v123 = (std::__shared_weak_count *)v111[1];
            uint64_t v95 = v174;
            *uint64_t v111 = v177;
            v111[1] = v109;
            uint64_t v11 = v171;
            if (v123) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v123);
            }
            goto LABEL_243;
          }
          uint64_t v114 = (2 * v96) | 1;
          long long v98 = &v110[2 * v114];
          uint64_t v115 = 2 * v96 + 2;
          if (v115 >= v12)
          {
            uint64_t v96 = (2 * v96) | 1;
            goto LABEL_230;
          }
          int v116 = *(_OWORD *)v98;
          uint64_t v117 = (std::__shared_weak_count *)v98[1];
          if (v117) {
            atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v98[2];
          uint64_t v118 = (std::__shared_weak_count *)v98[3];
          uint64_t v183 = v118;
          if (!v118) {
            break;
          }
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string::size_type v119 = lessThan((void *)v116, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v118);
          if (v117) {
            goto LABEL_225;
          }
LABEL_226:
          if (v119)
          {
            v98 += 2;
            uint64_t v96 = v115;
          }
          else
          {
            uint64_t v96 = v114;
          }
          uint64_t v12 = v172;
LABEL_230:
          unint64_t v120 = (void *)*v98;
          char v121 = (std::__shared_weak_count *)v98[1];
          int64_t v110 = v180;
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v177;
          uint64_t v183 = v109;
          if (!v109)
          {
            uint64_t v122 = lessThan(v120, &v182);
            if (!v121) {
              goto LABEL_235;
            }
LABEL_234:
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
            goto LABEL_235;
          }
          atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v122 = lessThan(v120, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
          if (v121) {
            goto LABEL_234;
          }
LABEL_235:
          long long v106 = v111;
          if (v122) {
            goto LABEL_241;
          }
        }
        std::string::size_type v119 = lessThan((void *)v116, &v182);
        if (!v117) {
          goto LABEL_226;
        }
LABEL_225:
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
        goto LABEL_226;
      }
    }
LABEL_243:
    uint64_t v94 = v95 - 1;
  }
  while (v95);
  uint64_t v124 = (unint64_t)v11 >> 4;
  CFTypeID v125 = v180;
  do
  {
    if (v124 < 2) {
      goto LABEL_288;
    }
    CFIndex v126 = 0;
    uint64_t v175 = *v125;
    std::string v178 = v125[1];
    int v127 = v125;
    std::string *v125 = 0;
    v125[1] = 0;
    do
    {
      std::string::size_type v128 = (uint64_t)&v127[2 * v126 + 2];
      uint64_t v129 = 2 * v126;
      CFIndex v126 = (2 * v126) | 1;
      uint64_t v130 = v129 + 2;
      if (v129 + 2 >= v124) {
        goto LABEL_255;
      }
      CFDictionaryRef v131 = *(_OWORD *)v128;
      CFStringRef v132 = *(std::__shared_weak_count **)(v128 + 8);
      if (v132) {
        atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)(v128 + 16);
      CFStringRef v133 = *(std::__shared_weak_count **)(v128 + 24);
      uint64_t v183 = v133;
      if (v133)
      {
        atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
        CFTypeID v134 = lessThan((void *)v131, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v133);
        if (!v132) {
          goto LABEL_253;
        }
LABEL_252:
        std::__shared_weak_count::__release_shared[abi:ne180100](v132);
        goto LABEL_253;
      }
      CFTypeID v134 = lessThan((void *)v131, &v182);
      if (v132) {
        goto LABEL_252;
      }
LABEL_253:
      if (v134)
      {
        v128 += 16;
        CFIndex v126 = v130;
      }
LABEL_255:
      CFStringRef v135 = *(_OWORD *)v128;
      *(void *)std::string::size_type v128 = 0;
      *(void *)(v128 + 8) = 0;
      v136 = (std::__shared_weak_count *)v127[1];
      *(_OWORD *)int v127 = v135;
      if (v136) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v136);
      }
      int v127 = (void *)v128;
    }
    while (v126 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
    if (v128 == a2 - 16)
    {
      CFTypeID v155 = *(std::__shared_weak_count **)(v128 + 8);
      *(void *)std::string::size_type v128 = v175;
      *(void *)(v128 + 8) = v178;
      CFTypeID v125 = v180;
      if (!v155) {
        goto LABEL_288;
      }
      goto LABEL_287;
    }
    uint64_t v137 = *(_OWORD *)(a2 - 16);
    *(void *)(a2 - 16) = 0;
    *(void *)(a2 - 8) = 0;
    uint64_t v138 = *(std::__shared_weak_count **)(v128 + 8);
    *(_OWORD *)std::string::size_type v128 = v137;
    if (v138) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v138);
    }
    v139 = *(std::__shared_weak_count **)(a2 - 8);
    *(void *)(a2 - 16) = v175;
    *(void *)(a2 - 8) = v178;
    if (v139) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
    }
    CFTypeID v125 = v180;
    uint64_t v140 = v128 + 16 - (void)v180;
    if (v140 >= 17)
    {
      CFStringRef v141 = (unint64_t)((v140 >> 4) - 2) >> 1;
      CFStringRef v142 = &v180[2 * v141];
      CFTypeID v143 = *(_OWORD *)v142;
      uint64_t v144 = (std::__shared_weak_count *)v142[1];
      if (v144) {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)v128;
      std::__split_buffer<std::string>::pointer v145 = *(std::__shared_weak_count **)(v128 + 8);
      uint64_t v183 = v145;
      if (v145)
      {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
        CFPropertyListRef v146 = lessThan((void *)v143, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v145);
        if (v144) {
          goto LABEL_271;
        }
      }
      else
      {
        CFPropertyListRef v146 = lessThan((void *)v143, &v182);
        if (v144) {
LABEL_271:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v144);
      }
      if (!v146) {
        goto LABEL_288;
      }
      uint64_t v148 = *(void **)v128;
      long long v147 = *(std::__shared_weak_count **)(v128 + 8);
      *(void *)std::string::size_type v128 = 0;
      *(void *)(v128 + 8) = 0;
      while (2)
      {
        uint64_t v149 = v142;
        uint64_t v150 = *(_OWORD *)v142;
        std::string *v142 = 0;
        v142[1] = 0;
        unint64_t v151 = *(std::__shared_weak_count **)(v128 + 8);
        *(_OWORD *)std::string::size_type v128 = v150;
        if (v151) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v151);
        }
        if (!v141)
        {
LABEL_290:
          CFTypeID v155 = (std::__shared_weak_count *)v149[1];
          *uint64_t v149 = v148;
          v149[1] = v147;
          if (!v155) {
            break;
          }
LABEL_287:
          std::__shared_weak_count::__release_shared[abi:ne180100](v155);
          break;
        }
        CFStringRef v141 = (v141 - 1) >> 1;
        CFStringRef v142 = &v180[2 * v141];
        CFDictionaryRef v152 = *(_OWORD *)v142;
        CFStringRef v153 = (std::__shared_weak_count *)v142[1];
        if (v153) {
          atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = v148;
        uint64_t v183 = v147;
        if (v147)
        {
          atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
          CFStringRef v154 = lessThan((void *)v152, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v147);
          if (v153) {
            goto LABEL_281;
          }
        }
        else
        {
          CFStringRef v154 = lessThan((void *)v152, &v182);
          if (v153) {
LABEL_281:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v153);
        }
        std::string::size_type v128 = (uint64_t)v149;
        if (!v154) {
          goto LABEL_290;
        }
        continue;
      }
    }
LABEL_288:
    a2 -= 16;
  }
  while ((unint64_t)v124-- > 2);
}

  uint64_t v8 = a2;
  uint64_t v229 = a2 - 16;
  while (1)
  {
    uint64_t v9 = (unint64_t)a1;
    uint64_t v10 = v8 - (void)a1;
    uint64_t v11 = (uint64_t)(v8 - (void)a1) >> 4;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          unsigned int v91 = *(uint64_t **)(a2 - 16);
          uint64_t v92 = *(std::__shared_weak_count **)(a2 - 8);
          if (v92) {
            atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v94 = *(uint64_t **)v9;
          unint64_t v93 = *(std::__shared_weak_count **)(v9 + 8);
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v95 = 0;
          if (v91 && v94)
          {
            uint64_t v96 = *v91;
            uint64_t v95 = v96 && (v97 = *v94) != 0 && *(double *)(v96 + 12) < *(double *)(v97 + 12);
          }
          if (v93) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v93);
          }
          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
          if (v95)
          {
            double v226 = *(uint64_t **)v9;
            *(void *)uint64_t v9 = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v226;
            v227 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v227;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v9, v9 + 16, v229);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t **)v9, (uint64_t **)(v9 + 16), (uint64_t **)(v9 + 32), v229);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v9, v9 + 16, v9 + 32, (uint64_t **)(v9 + 48), v229);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 383) {
      break;
    }
    uint64_t v236 = v9;
    if (!a3)
    {
      if (v9 == v8) {
        return;
      }
      uint64_t v124 = (unint64_t)(v11 - 2) >> 1;
      double v230 = v124;
      while (1)
      {
        CFTypeID v125 = v124;
        if (v230 < v124) {
          goto LABEL_392;
        }
        CFIndex v126 = (2 * v124) | 1;
        int v127 = v9 + 16 * v126;
        std::string::size_type v128 = 2 * v124 + 2;
        v228 = v124;
        if (v128 < v11) {
          break;
        }
LABEL_331:
        uint64_t v137 = *(uint64_t **)v127;
        uint64_t v138 = *(std::__shared_weak_count **)(v127 + 8);
        if (v138) {
          atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v139 = (uint64_t **)(v9 + 16 * v228);
        uint64_t v140 = *v139;
        CFStringRef v141 = (std::__shared_weak_count *)v139[1];
        if (v141) {
          atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v137) {
          CFStringRef v142 = v140 == 0;
        }
        else {
          CFStringRef v142 = 1;
        }
        if (!v142)
        {
          CFTypeID v143 = *v137;
          if (v143)
          {
            uint64_t v144 = *v140;
            if (v144)
            {
              std::__split_buffer<std::string>::pointer v145 = *(double *)(v143 + 12) < *(double *)(v144 + 12);
              if (!v141) {
                goto LABEL_345;
              }
LABEL_344:
              std::__shared_weak_count::__release_shared[abi:ne180100](v141);
              goto LABEL_345;
            }
          }
        }
        std::__split_buffer<std::string>::pointer v145 = 0;
        if (v141) {
          goto LABEL_344;
        }
LABEL_345:
        if (v138) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v138);
        }
        CFTypeID v125 = v228;
        if (!v145)
        {
          uint64_t v233 = *v139;
          CFPropertyListRef v146 = (std::__shared_weak_count *)v139[1];
          NSObject *v139 = 0;
          v139[1] = 0;
          while (1)
          {
            long long v147 = (uint64_t **)v127;
            uint64_t v148 = *(_OWORD *)v127;
            *(void *)int v127 = 0;
            *(void *)(v127 + 8) = 0;
            uint64_t v149 = (std::__shared_weak_count *)v139[1];
            *(_OWORD *)v139 = v148;
            if (v149) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v149);
            }
            if (v230 < v126)
            {
LABEL_390:
              unint64_t v164 = (std::__shared_weak_count *)v147[1];
              *long long v147 = v233;
              v147[1] = (uint64_t *)v146;
              uint64_t v9 = v236;
              CFTypeID v125 = v228;
              if (v164) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v164);
              }
              goto LABEL_392;
            }
            uint64_t v150 = (2 * v126) | 1;
            int v127 = v236 + 16 * v150;
            CFIndex v126 = 2 * v126 + 2;
            if (v126 >= v11)
            {
              CFIndex v126 = v150;
              goto LABEL_373;
            }
            unint64_t v151 = *(uint64_t **)v127;
            CFDictionaryRef v152 = *(std::__shared_weak_count **)(v127 + 8);
            if (v152) {
              atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            CFStringRef v154 = *(uint64_t **)(v127 + 16);
            CFStringRef v153 = *(std::__shared_weak_count **)(v127 + 24);
            if (v153) {
              atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v151 && v154 != 0)
            {
              unint64_t v156 = *v151;
              if (v156)
              {
                uint64_t v157 = *v154;
                if (v157) {
                  break;
                }
              }
            }
            uint64_t v158 = 0;
            if (v153) {
              goto LABEL_367;
            }
LABEL_368:
            if (v152) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v152);
            }
            if (v158) {
              v127 += 16;
            }
            else {
              CFIndex v126 = v150;
            }
LABEL_373:
            uint64_t v159 = *(uint64_t **)v127;
            uint64_t v160 = *(std::__shared_weak_count **)(v127 + 8);
            if (v160) {
              atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v146) {
              atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v159) {
              CFIndex v161 = v233 == 0;
            }
            else {
              CFIndex v161 = 1;
            }
            if (!v161)
            {
              std::string v162 = *v159;
              if (v162)
              {
                if (*v233)
                {
                  uint64_t v163 = *(double *)(v162 + 12) < *(double *)(*v233 + 12);
                  if (!v146) {
                    goto LABEL_387;
                  }
LABEL_386:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v146);
                  goto LABEL_387;
                }
              }
            }
            uint64_t v163 = 0;
            if (v146) {
              goto LABEL_386;
            }
LABEL_387:
            if (v160) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v160);
            }
            v139 = v147;
            if (v163) {
              goto LABEL_390;
            }
          }
          uint64_t v158 = *(double *)(v156 + 12) < *(double *)(v157 + 12);
          if (!v153) {
            goto LABEL_368;
          }
LABEL_367:
          std::__shared_weak_count::__release_shared[abi:ne180100](v153);
          goto LABEL_368;
        }
LABEL_392:
        uint64_t v124 = v125 - 1;
        if (!v125)
        {
          char v165 = (unint64_t)v10 >> 4;
          while (2)
          {
            if (v165 < 2) {
              goto LABEL_466;
            }
            unint64_t v166 = 0;
            v231 = *(uint64_t **)v9;
            double v234 = *(uint64_t **)(v9 + 8);
            uint64_t v167 = v9;
            *(void *)uint64_t v9 = 0;
            *(void *)(v9 + 8) = 0;
LABEL_396:
            unint64_t v168 = (uint64_t **)(v167 + 16 * (v166 + 1));
            unint64_t v169 = 2 * v166;
            unint64_t v166 = (2 * v166) | 1;
            uint64_t v170 = v169 + 2;
            if (v169 + 2 < v165)
            {
              unint64_t v171 = *v168;
              unint64_t v172 = (std::__shared_weak_count *)v168[1];
              if (v172) {
                atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              BOOL v174 = v168[2];
              uint64_t v173 = (std::__shared_weak_count *)v168[3];
              if (v173) {
                atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v171) {
                uint64_t v175 = v174 == 0;
              }
              else {
                uint64_t v175 = 1;
              }
              if (!v175 && (long long v176 = *v171) != 0 && (v177 = *v174) != 0)
              {
                std::string v178 = *(double *)(v176 + 12) < *(double *)(v177 + 12);
                if (!v173)
                {
LABEL_411:
                  if (v172) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v172);
                  }
                  if (v178)
                  {
                    v168 += 2;
                    unint64_t v166 = v170;
                  }
                  goto LABEL_415;
                }
              }
              else
              {
                std::string v178 = 0;
                if (!v173) {
                  goto LABEL_411;
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v173);
              goto LABEL_411;
            }
LABEL_415:
            uint64_t v179 = *(_OWORD *)v168;
            unint64_t *v168 = 0;
            v168[1] = 0;
            uint64_t v180 = *(std::__shared_weak_count **)(v167 + 8);
            *(_OWORD *)uint64_t v167 = v179;
            if (v180) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v180);
            }
            uint64_t v167 = (unint64_t)v168;
            if (v166 > (uint64_t)((unint64_t)(v165 - 2) >> 1))
            {
              if (v168 == (uint64_t **)(a2 - 16))
              {
                uint64_t v195 = (std::__shared_weak_count *)v168[1];
                unint64_t *v168 = v231;
                v168[1] = v234;
LABEL_464:
                uint64_t v9 = v236;
                if (v195) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v195);
                }
              }
              else
              {
                uint64_t v181 = *(_OWORD *)(a2 - 16);
                *(void *)(a2 - 16) = 0;
                *(void *)(a2 - 8) = 0;
                uint64_t v182 = (std::__shared_weak_count *)v168[1];
                *(_OWORD *)unint64_t v168 = v181;
                if (v182) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v182);
                }
                uint64_t v9 = v236;
                uint64_t v183 = *(std::__shared_weak_count **)(a2 - 8);
                *(void *)(a2 - 16) = v231;
                *(void *)(a2 - 8) = v234;
                if (v183) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v183);
                }
                uint64_t v184 = (uint64_t)v168 - v236 + 16;
                if (v184 >= 17)
                {
                  v185 = (unint64_t)((v184 >> 4) - 2) >> 1;
                  uint64_t v186 = v236 + 16 * v185;
                  uint64_t v187 = *(uint64_t **)v186;
                  v188 = *(std::__shared_weak_count **)(v186 + 8);
                  if (v188) {
                    atomic_fetch_add_explicit(&v188->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v190 = *v168;
                  uint64_t v189 = (std::__shared_weak_count *)v168[1];
                  if (v189) {
                    atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v187) {
                    v191 = v190 == 0;
                  }
                  else {
                    v191 = 1;
                  }
                  if (v191 || (v192 = *v187) == 0 || (uint64_t v193 = *v190) == 0)
                  {
                    uint64_t v194 = 0;
                    if (!v189) {
                      goto LABEL_439;
                    }
LABEL_438:
                    std::__shared_weak_count::__release_shared[abi:ne180100](v189);
                    goto LABEL_439;
                  }
                  uint64_t v194 = *(double *)(v192 + 12) < *(double *)(v193 + 12);
                  if (v189) {
                    goto LABEL_438;
                  }
LABEL_439:
                  if (v188) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v188);
                  }
                  if (v194)
                  {
                    std::string v197 = *v168;
                    uint64_t v196 = (std::__shared_weak_count *)v168[1];
                    unint64_t *v168 = 0;
                    v168[1] = 0;
                    while (1)
                    {
                      char v198 = (uint64_t **)v186;
                      uint64_t v199 = *(_OWORD *)v186;
                      *(void *)uint64_t v186 = 0;
                      *(void *)(v186 + 8) = 0;
                      std::string v200 = (std::__shared_weak_count *)v168[1];
                      *(_OWORD *)unint64_t v168 = v199;
                      if (v200) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v200);
                      }
                      if (!v185)
                      {
LABEL_463:
                        uint64_t v195 = (std::__shared_weak_count *)v198[1];
                        std::runtime_error *v198 = v197;
                        v198[1] = (uint64_t *)v196;
                        goto LABEL_464;
                      }
                      v185 = (v185 - 1) >> 1;
                      uint64_t v186 = v236 + 16 * v185;
                      std::__fs::filesystem::path v201 = *(uint64_t **)v186;
                      std::string v202 = *(std::__shared_weak_count **)(v186 + 8);
                      if (v202) {
                        atomic_fetch_add_explicit(&v202->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if (v196) {
                        atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if (v201 && v197 != 0)
                      {
                        uint64_t v204 = *v201;
                        if (v204)
                        {
                          if (*v197) {
                            break;
                          }
                        }
                      }
                      uint64_t v205 = 0;
                      if (v196) {
                        goto LABEL_459;
                      }
LABEL_460:
                      if (v202) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v202);
                      }
                      unint64_t v168 = v198;
                      if (!v205) {
                        goto LABEL_463;
                      }
                    }
                    uint64_t v205 = *(double *)(v204 + 12) < *(double *)(*v197 + 12);
                    if (!v196) {
                      goto LABEL_460;
                    }
LABEL_459:
                    std::__shared_weak_count::__release_shared[abi:ne180100](v196);
                    goto LABEL_460;
                  }
                }
              }
LABEL_466:
              a2 -= 16;
              if ((unint64_t)v165-- <= 2) {
                return;
              }
              continue;
            }
            goto LABEL_396;
          }
        }
      }
      uint64_t v129 = *(uint64_t **)v127;
      uint64_t v130 = *(std::__shared_weak_count **)(v127 + 8);
      if (v130) {
        atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFStringRef v132 = *(uint64_t **)(v127 + 16);
      CFDictionaryRef v131 = *(std::__shared_weak_count **)(v127 + 24);
      if (v131) {
        atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v129) {
        CFStringRef v133 = v132 == 0;
      }
      else {
        CFStringRef v133 = 1;
      }
      if (!v133 && (v134 = *v129) != 0 && (CFStringRef v135 = *v132) != 0)
      {
        v136 = *(double *)(v134 + 12) < *(double *)(v135 + 12);
        if (!v131) {
          goto LABEL_327;
        }
      }
      else
      {
        v136 = 0;
        if (!v131)
        {
LABEL_327:
          if (v130) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v130);
          }
          if (v136)
          {
            v127 += 16;
            CFIndex v126 = v128;
          }
          goto LABEL_331;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v131);
      goto LABEL_327;
    }
    uint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = (_OWORD *)(v9 + 16 * ((unint64_t)v11 >> 1));
    if ((unint64_t)v10 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)v13, v9, v229);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v9, (uint64_t)v13, v229);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v9 + 16, (uint64_t)(v13 - 1), a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v9 + 32, v9 + 16 + 16 * v12, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)(v13 - 1), (uint64_t)v13, v9 + 16 + 16 * v12);
      uint64_t v14 = *(_OWORD *)v9;
      *(_OWORD *)uint64_t v9 = *v13;
      *unint64_t v13 = v14;
    }
    --a3;
    if (a4)
    {
      long long v15 = *(uint64_t **)v9;
LABEL_26:
      uint64_t v23 = *(std::__shared_weak_count **)(v9 + 8);
      uint64_t v24 = v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      do
      {
        uint64_t v25 = *(uint64_t **)(v24 + 16);
        uint64_t v26 = *(std::__shared_weak_count **)(v24 + 24);
        v24 += 16;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v25) {
          uint64_t v27 = v15 == 0;
        }
        else {
          uint64_t v27 = 1;
        }
        if (v27 || (uint64_t v28 = *v25) == 0 || !*v15)
        {
          long long v29 = 0;
          if (!v23) {
            goto LABEL_41;
          }
LABEL_40:
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          goto LABEL_41;
        }
        long long v29 = *(double *)(v28 + 12) < *(double *)(*v15 + 12);
        if (v23) {
          goto LABEL_40;
        }
LABEL_41:
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
      while (v29);
      uint64_t v30 = (void *)a2;
      if (v24 - 16 != v9)
      {
        while (1)
        {
          int v31 = (uint64_t *)*(v30 - 2);
          BOOL v32 = (std::__shared_weak_count *)*(v30 - 1);
          v30 -= 2;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v31 && v15 != 0)
          {
            uint64_t v34 = *v31;
            if (v34)
            {
              if (*v15) {
                break;
              }
            }
          }
          CFTypeID v35 = 0;
          if (v23) {
            goto LABEL_58;
          }
LABEL_59:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v35) {
            goto LABEL_62;
          }
        }
        CFTypeID v35 = *(double *)(v34 + 12) < *(double *)(*v15 + 12);
        if (!v23) {
          goto LABEL_59;
        }
LABEL_58:
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        goto LABEL_59;
      }
      uint64_t v30 = (void *)a2;
      while (2)
      {
        if (v24 < (unint64_t)v30)
        {
          CFNumberRef v54 = (uint64_t *)*(v30 - 2);
          uint64_t v55 = (std::__shared_weak_count *)*(v30 - 1);
          v30 -= 2;
          if (v55) {
            atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v56 = 0;
          if (v54 && v15)
          {
            uint64_t v57 = *v54;
            if (v57 && *v15)
            {
              uint64_t v56 = *(double *)(v57 + 12) < *(double *)(*v15 + 12);
              goto LABEL_120;
            }
            uint64_t v56 = 0;
            if (!v23)
            {
LABEL_122:
              if (v55) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v55);
              }
              if (v56) {
                break;
              }
              continue;
            }
          }
          else
          {
LABEL_120:
            if (!v23) {
              goto LABEL_122;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          goto LABEL_122;
        }
        break;
      }
LABEL_62:
      a1 = (void *)v24;
      if (v24 < (unint64_t)v30)
      {
        int v36 = v30;
        do
        {
          uint64_t v37 = *a1;
          *a1 = *v36;
          *int v36 = v37;
          long long v38 = a1[1];
          a1[1] = v36[1];
          v36[1] = v38;
          do
          {
            uint64_t v39 = (uint64_t *)a1[2];
            uint64_t v40 = (std::__shared_weak_count *)a1[3];
            a1 += 2;
            if (v40) {
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v39) {
              uint64_t v41 = v15 == 0;
            }
            else {
              uint64_t v41 = 1;
            }
            if (v41 || (uint64_t v42 = *v39) == 0 || !*v15)
            {
              uint64_t v43 = 0;
              if (!v23) {
                goto LABEL_79;
              }
LABEL_78:
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              goto LABEL_79;
            }
            uint64_t v43 = *(double *)(v42 + 12) < *(double *)(*v15 + 12);
            if (v23) {
              goto LABEL_78;
            }
LABEL_79:
            if (v40) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            }
          }
          while (v43);
          do
          {
            CFNumberRef v44 = (uint64_t *)*(v36 - 2);
            long long v45 = (std::__shared_weak_count *)*(v36 - 1);
            v36 -= 2;
            if (v45) {
              atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v44) {
              CFArrayRef v46 = v15 == 0;
            }
            else {
              CFArrayRef v46 = 1;
            }
            if (v46 || (uint64_t v47 = *v44) == 0 || !*v15)
            {
              uint64_t v48 = 0;
              if (!v23) {
                goto LABEL_96;
              }
LABEL_95:
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              goto LABEL_96;
            }
            uint64_t v48 = *(double *)(v47 + 12) < *(double *)(*v15 + 12);
            if (v23) {
              goto LABEL_95;
            }
LABEL_96:
            if (v45) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v45);
            }
          }
          while (!v48);
        }
        while (a1 < v36);
      }
      uint64_t v49 = (long long *)(a1 - 2);
      if (a1 - 2 != (void *)v236)
      {
        uint64_t v50 = *v49;
        *(void *)uint64_t v49 = 0;
        *(a1 - 1) = 0;
        uint64_t v51 = *(std::__shared_weak_count **)(v236 + 8);
        *(_OWORD *)uint64_t v236 = v50;
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
      }
      BOOL v52 = (std::__shared_weak_count *)*(a1 - 1);
      *(a1 - 2) = v15;
      *(a1 - 1) = v23;
      uint64_t v8 = a2;
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v24 < (unint64_t)v30)
      {
LABEL_108:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(v236, a1 - 2, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        uint64_t v53 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v236, (uint64_t)(a1 - 2));
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)a1, a2))
        {
          a2 = (unint64_t)(a1 - 2);
          a1 = (void *)v236;
          if (v53) {
            return;
          }
          goto LABEL_1;
        }
        if (!v53) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      uint64_t v16 = *(uint64_t **)(v9 - 16);
      uint64_t v17 = *(std::__shared_weak_count **)(v9 - 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = *(uint64_t **)v9;
      uint64_t v18 = *(std::__shared_weak_count **)(v9 + 8);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v20 = 0;
      if (v16 && v19)
      {
        uint64_t v21 = *v16;
        v20 = v21 && (uint64_t v22 = *v19) != 0 && *(double *)(v21 + 12) < *(double *)(v22 + 12);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      long long v15 = *(uint64_t **)v9;
      if (v20) {
        goto LABEL_26;
      }
      uint64_t v58 = *(std::__shared_weak_count **)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v60 = *(uint64_t **)(a2 - 16);
      long long v59 = *(std::__shared_weak_count **)(a2 - 8);
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v61 = 0;
      if (v15 && v60) {
        v61 = *v15 && (int v62 = *v60) != 0 && *(double *)(*v15 + 12) < *(double *)(v62 + 12);
      }
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (v61)
      {
        a1 = (void *)v9;
        do
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v64 = (uint64_t *)a1[2];
          uint64_t v63 = (std::__shared_weak_count *)a1[3];
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int64_t v65 = 0;
          if (v15 && v64) {
            int64_t v65 = *v15 && (v66 = *v64) != 0 && *(double *)(*v15 + 12) < *(double *)(v66 + 12);
          }
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          a1 += 2;
        }
        while (!v65);
      }
      else
      {
        int64_t v67 = (void **)(v9 + 16);
        do
        {
          a1 = v67;
          if ((unint64_t)v67 >= a2) {
            break;
          }
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFNumberRef v69 = *v67;
          uint64_t v68 = (std::__shared_weak_count *)a1[1];
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v70 = 0;
          if (v15 && v69) {
            v70 = *v15 && (long long v71 = *v69) != 0 && *(double *)(*v15 + 12) < *(double *)(v71 + 12);
          }
          if (v68) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v68);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          int64_t v67 = (void **)(a1 + 2);
        }
        while (!v70);
      }
      uint64_t v72 = (void *)a2;
      if ((unint64_t)a1 < a2)
      {
        uint64_t v72 = (void *)a2;
        do
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v74 = (uint64_t *)*(v72 - 2);
          unint64_t v73 = (std::__shared_weak_count *)*(v72 - 1);
          if (v73) {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v75 = 0;
          if (v15 && v74) {
            uint64_t v75 = *v15 && (v76 = *v74) != 0 && *(double *)(*v15 + 12) < *(double *)(v76 + 12);
          }
          if (v73) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v73);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          v72 -= 2;
        }
        while (v75);
      }
LABEL_229:
      if (a1 < v72)
      {
        unint64_t v77 = *a1;
        *a1 = *v72;
        _DWORD *v72 = v77;
        uint64_t v78 = a1[1];
        a1[1] = v72[1];
        v72[1] = v78;
        while (1)
        {
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v80 = (uint64_t *)a1[2];
          uint64_t v79 = (std::__shared_weak_count *)a1[3];
          if (v79) {
            atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v81 = 0;
          if (v15 && v80)
          {
            if (!*v15 || (CFNumberRef v82 = *v80) == 0)
            {
              uint64_t v81 = 0;
              if (!v79) {
                goto LABEL_207;
              }
LABEL_206:
              std::__shared_weak_count::__release_shared[abi:ne180100](v79);
              goto LABEL_207;
            }
            uint64_t v81 = *(double *)(*v15 + 12) < *(double *)(v82 + 12);
          }
          if (v79) {
            goto LABEL_206;
          }
LABEL_207:
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          a1 += 2;
          if (v81)
          {
            while (1)
            {
              if (v58) {
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v85 = (uint64_t *)*(v72 - 2);
              uint64_t v84 = (std::__shared_weak_count *)*(v72 - 1);
              if (v84) {
                atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v83 = 0;
              if (v15 && v85)
              {
                if (!*v15 || (long long v86 = *v85) == 0)
                {
                  int v83 = 0;
                  if (!v84) {
                    goto LABEL_226;
                  }
LABEL_225:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v84);
                  goto LABEL_226;
                }
                int v83 = *(double *)(*v15 + 12) < *(double *)(v86 + 12);
              }
              if (v84) {
                goto LABEL_225;
              }
LABEL_226:
              if (v58) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v58);
              }
              v72 -= 2;
              if (!v83) {
                goto LABEL_229;
              }
            }
          }
        }
      }
      uint64_t v87 = (long long *)(a1 - 2);
      BOOL v4 = (unint64_t)(a1 - 2) >= v9;
      BOOL v5 = a1 - 2 == (void *)v9;
      if (a1 - 2 != (void *)v9)
      {
        unint64_t v88 = *v87;
        *(void *)uint64_t v87 = 0;
        *(a1 - 1) = 0;
        long long v89 = *(std::__shared_weak_count **)(v9 + 8);
        *(_OWORD *)uint64_t v9 = v88;
        if (v89) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v89);
        }
      }
      a4 = 0;
      __int16 v90 = (std::__shared_weak_count *)*(a1 - 1);
      *(a1 - 2) = v15;
      *(a1 - 1) = v58;
      uint64_t v8 = a2;
      if (v90)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
        a4 = 0;
      }
    }
  }
  long long v98 = (void *)(v9 + 16);
  uint64_t v100 = v9 == v8 || v98 == (void *)v8;
  if ((a4 & 1) == 0)
  {
    if (v100) {
      return;
    }
    while (1)
    {
      v207 = v9;
      uint64_t v9 = (unint64_t)v98;
      v208 = *(uint64_t **)(v207 + 16);
      v209 = *(std::__shared_weak_count **)(v207 + 24);
      if (v209) {
        atomic_fetch_add_explicit(&v209->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v211 = *(uint64_t **)v207;
      v210 = *(std::__shared_weak_count **)(v207 + 8);
      if (v210) {
        atomic_fetch_add_explicit(&v210->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v208 && v211 != 0)
      {
        v213 = *v208;
        if (v213)
        {
          uint64_t v214 = *v211;
          if (v214) {
            break;
          }
        }
      }
      uint64_t v215 = 0;
      if (v210) {
        goto LABEL_482;
      }
LABEL_483:
      if (v209) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v209);
      }
      if (!v215) {
        goto LABEL_508;
      }
      v216 = *(uint64_t **)v9;
      v217 = *(std::__shared_weak_count **)(v207 + 24);
      v218 = v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      do
      {
        v219 = *(_OWORD *)(v218 - 16);
        *(void *)(v218 - 16) = 0;
        *(void *)(v218 - 8) = 0;
        uint64_t v220 = *(std::__shared_weak_count **)(v218 + 8);
        *(_OWORD *)v218 = v219;
        if (v220) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v220);
        }
        if (v217) {
          atomic_fetch_add_explicit(&v217->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v222 = *(uint64_t **)(v218 - 32);
        v221 = *(std::__shared_weak_count **)(v218 - 24);
        if (v221) {
          atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v223 = 0;
        if (!v216 || !v222) {
          goto LABEL_498;
        }
        if (*v216)
        {
          v224 = *v222;
          if (v224)
          {
            uint64_t v223 = *(double *)(*v216 + 12) < *(double *)(v224 + 12);
LABEL_498:
            if (!v221) {
              goto LABEL_500;
            }
LABEL_499:
            std::__shared_weak_count::__release_shared[abi:ne180100](v221);
            goto LABEL_500;
          }
        }
        uint64_t v223 = 0;
        if (v221) {
          goto LABEL_499;
        }
LABEL_500:
        if (v217) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v217);
        }
        v218 -= 16;
      }
      while (v223);
      v225 = *(std::__shared_weak_count **)(v218 + 8);
      *(void *)v218 = v216;
      *(void *)(v218 + 8) = v217;
      if (v225) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v225);
      }
LABEL_508:
      long long v98 = (void *)(v9 + 16);
      if (v9 + 16 == a2) {
        return;
      }
    }
    uint64_t v215 = *(double *)(v213 + 12) < *(double *)(v214 + 12);
    if (!v210) {
      goto LABEL_483;
    }
LABEL_482:
    std::__shared_weak_count::__release_shared[abi:ne180100](v210);
    goto LABEL_483;
  }
  if (v100) {
    return;
  }
  CFTypeID v101 = 0;
  int v102 = (void *)v9;
  while (2)
  {
    uint64_t v103 = (uint64_t **)v102;
    int v102 = v98;
    uint64_t v104 = v103[2];
    CFArrayRef v105 = (std::__shared_weak_count *)v103[3];
    if (v105) {
      atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v107 = *v103;
    long long v106 = (std::__shared_weak_count *)v103[1];
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v104) {
      int v108 = v107 == 0;
    }
    else {
      int v108 = 1;
    }
    if (v108 || (char v109 = *v104) == 0 || (v110 = *v107) == 0)
    {
      uint64_t v111 = 0;
      if (!v106) {
        goto LABEL_280;
      }
      goto LABEL_279;
    }
    uint64_t v111 = *(double *)(v109 + 12) < *(double *)(v110 + 12);
    if (v106) {
LABEL_279:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
LABEL_280:
    if (v105) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v105);
    }
    if (!v111) {
      goto LABEL_307;
    }
    long long v112 = (uint64_t *)*v102;
    uint64_t v113 = (std::__shared_weak_count *)v103[3];
    uint64_t v114 = v101;
    *int v102 = 0;
    v102[1] = 0;
    while (2)
    {
      uint64_t v115 = v9 + v114;
      int v116 = *(_OWORD *)(v9 + v114);
      *(void *)uint64_t v115 = 0;
      *(void *)(v115 + 8) = 0;
      uint64_t v117 = *(std::__shared_weak_count **)(v9 + v114 + 24);
      *(_OWORD *)(v115 + 16) = v116;
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      if (v114)
      {
        if (v113) {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v119 = *(uint64_t **)(v9 + v114 - 16);
        uint64_t v118 = *(std::__shared_weak_count **)(v9 + v114 - 8);
        if (v118) {
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v120 = 0;
        if (v112 && v119)
        {
          if (*v112)
          {
            char v121 = *v119;
            if (v121)
            {
              unint64_t v120 = *(double *)(*v112 + 12) < *(double *)(v121 + 12);
              goto LABEL_296;
            }
          }
          unint64_t v120 = 0;
          if (!v118)
          {
LABEL_298:
            if (v113) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v113);
            }
            v114 -= 16;
            if (!v120)
            {
              uint64_t v122 = (void *)(v9 + v114 + 16);
              goto LABEL_305;
            }
            continue;
          }
        }
        else
        {
LABEL_296:
          if (!v118) {
            goto LABEL_298;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v118);
        goto LABEL_298;
      }
      break;
    }
    uint64_t v122 = (void *)v9;
LABEL_305:
    std::string::size_type v123 = (std::__shared_weak_count *)v122[1];
    *uint64_t v122 = v112;
    v122[1] = v113;
    if (v123) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v123);
    }
LABEL_307:
    long long v98 = v102 + 2;
    v101 += 16;
    if (v102 + 2 != (void *)a2) {
      continue;
    }
    break;
  }
}

  uint64_t v10 = (void **)(a2 - 16);
  uint64_t v114 = (void **)(a2 - 32);
  uint64_t v11 = (void **)(a2 - 48);
  uint64_t v12 = (void *)a1;
  int v116 = a2;
  while (1)
  {
    a1 = (unint64_t)v12;
    unint64_t v13 = a2 - (void)v12;
    uint64_t v14 = (uint64_t)(a2 - (void)v12) >> 4;
    if (v5 || !v4)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(a2 - 16), *(std::__shared_weak_count **)(a2 - 8), a1))
          {
            uint64_t v51 = *(void *)a1;
            *(void *)a1 = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v51;
            BOOL v52 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v52;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), v10);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), (uint64_t)v10);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a1 + 48, (uint64_t)v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 383) {
      break;
    }
    if (!a3)
    {
      if (a1 == a2) {
        return;
      }
      uint64_t v68 = (unint64_t)(v14 - 2) >> 1;
      CFNumberRef v69 = v68;
      do
      {
        unsigned int v70 = v69;
        if (v68 >= v69)
        {
          long long v71 = (2 * v69) | 1;
          uint64_t v72 = (void **)(a1 + 16 * v71);
          if (2 * v69 + 2 < v14
            && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)(v72 + 2)))
          {
            v72 += 2;
            long long v71 = 2 * v70 + 2;
          }
          unint64_t v73 = a1 + 16 * v70;
          if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], v73))
          {
            std::string::size_type v119 = *(_OWORD *)v73;
            *(void *)unint64_t v73 = 0;
            *(void *)(v73 + 8) = 0;
            do
            {
              long long v74 = v72;
              uint64_t v75 = *(_OWORD *)v72;
              _DWORD *v72 = 0;
              v72[1] = 0;
              uint64_t v76 = *(std::__shared_weak_count **)(v73 + 8);
              *(_OWORD *)unint64_t v73 = v75;
              if (v76) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v76);
              }
              if (v68 < v71) {
                break;
              }
              unint64_t v77 = (2 * v71) | 1;
              uint64_t v72 = (void **)(a1 + 16 * v77);
              uint64_t v78 = 2 * v71 + 2;
              if (v78 < v14
                && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)(v72 + 2)))
              {
                v72 += 2;
                unint64_t v77 = v78;
              }
              unint64_t v73 = (uint64_t)v74;
              long long v71 = v77;
            }
            while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v72, (std::__shared_weak_count *)v72[1], (uint64_t)&v119));
            uint64_t v79 = v119;
            std::string::size_type v119 = 0uLL;
            __int16 v80 = (std::__shared_weak_count *)v74[1];
            *(_OWORD *)long long v74 = v79;
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            if (*((void *)&v119 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
            }
          }
        }
        CFNumberRef v69 = v70 - 1;
      }
      while (v70);
      uint64_t v81 = (unint64_t)v13 >> 4;
      CFNumberRef v82 = v116;
      while (2)
      {
        if (v81 >= 2)
        {
          int v83 = 0;
          uint64_t v84 = *(void *)a1;
          uint64_t v117 = *(void *)(a1 + 8);
          uint64_t v85 = a1;
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          do
          {
            long long v86 = v85 + 16 * v83 + 16;
            uint64_t v87 = 2 * v83;
            int v83 = (2 * v83) | 1;
            unint64_t v88 = v87 + 2;
            if (v87 + 2 < v81
              && sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)v86, *(std::__shared_weak_count **)(v86 + 8), v86 + 16))
            {
              v86 += 16;
              int v83 = v88;
            }
            long long v89 = *(_OWORD *)v86;
            *(void *)long long v86 = 0;
            *(void *)(v86 + 8) = 0;
            __int16 v90 = *(std::__shared_weak_count **)(v85 + 8);
            *(_OWORD *)uint64_t v85 = v89;
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            uint64_t v85 = v86;
          }
          while (v83 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
          if (v86 == v82 - 16)
          {
            int v102 = *(std::__shared_weak_count **)(v86 + 8);
            *(void *)long long v86 = v84;
            *(void *)(v86 + 8) = v117;
            if (!v102) {
              goto LABEL_140;
            }
          }
          else
          {
            unsigned int v91 = *(_OWORD *)(v82 - 16);
            *(void *)(v82 - 16) = 0;
            *(void *)(v82 - 8) = 0;
            uint64_t v92 = *(std::__shared_weak_count **)(v86 + 8);
            *(_OWORD *)long long v86 = v91;
            if (v92) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v92);
            }
            unint64_t v93 = *(std::__shared_weak_count **)(v82 - 8);
            *(void *)(v82 - 16) = v84;
            *(void *)(v82 - 8) = v117;
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
            uint64_t v94 = v86 + 16 - a1;
            if (v94 < 17) {
              goto LABEL_140;
            }
            uint64_t v95 = (unint64_t)((v94 >> 4) - 2) >> 1;
            uint64_t v96 = (void **)(a1 + 16 * v95);
            if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v96, (std::__shared_weak_count *)v96[1], v86))goto LABEL_140; {
            std::string::size_type v119 = *(_OWORD *)v86;
            }
            *(void *)long long v86 = 0;
            *(void *)(v86 + 8) = 0;
            do
            {
              int v97 = v96;
              long long v98 = *(_OWORD *)v96;
              *uint64_t v96 = 0;
              v96[1] = 0;
              unint64_t v99 = *(std::__shared_weak_count **)(v86 + 8);
              *(_OWORD *)long long v86 = v98;
              if (v99) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v99);
              }
              if (!v95) {
                break;
              }
              uint64_t v95 = (v95 - 1) >> 1;
              uint64_t v96 = (void **)(a1 + 16 * v95);
              long long v86 = (uint64_t)v97;
            }
            while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*v96, (std::__shared_weak_count *)v96[1], (uint64_t)&v119));
            uint64_t v100 = v119;
            std::string::size_type v119 = 0uLL;
            CFTypeID v101 = (std::__shared_weak_count *)v97[1];
            *(_OWORD *)int v97 = v100;
            if (!v101) {
              goto LABEL_140;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v101);
            int v102 = (std::__shared_weak_count *)*((void *)&v119 + 1);
            if (!*((void *)&v119 + 1)) {
              goto LABEL_140;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
LABEL_140:
        v82 -= 16;
        if ((unint64_t)v81-- <= 2) {
          return;
        }
        continue;
      }
    }
    long long v15 = (unint64_t)v14 >> 1;
    uint64_t v16 = (void *)(a1 + 16 * ((unint64_t)v14 >> 1));
    if ((unint64_t)v13 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v16, (void **)a1, v10);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)v16, v10);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)(a1 + 16), (void **)v16 - 2, v114);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)(a1 + 32), (void **)(a1 + 16 + 16 * v15), v11);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(v16 - 2, (void **)v16, (void **)(a1 + 16 + 16 * v15));
      uint64_t v17 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v17;
    }
    --a3;
    if ((a4 & 1) != 0
      || sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(a1 - 16), *(std::__shared_weak_count **)(a1 - 8), a1))
    {
      std::string::size_type v119 = *(_OWORD *)a1;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v18 = (void *)a1;
      do
      {
        uint64_t v19 = v18;
        BOOL v20 = (void *)v18[2];
        v18 += 2;
      }
      while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v20, (std::__shared_weak_count *)v19[3], (uint64_t)&v119));
      uint64_t v21 = (void *)v116;
      if (v19 == (void *)a1)
      {
        uint64_t v21 = (void *)v116;
        do
        {
          if (v18 >= v21) {
            break;
          }
          uint64_t v24 = (void *)*(v21 - 2);
          uint64_t v25 = (std::__shared_weak_count *)*(v21 - 1);
          v21 -= 2;
        }
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v24, v25, (uint64_t)&v119));
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)*(v21 - 2);
          uint64_t v23 = (std::__shared_weak_count *)*(v21 - 1);
          v21 -= 2;
        }
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v22, v23, (uint64_t)&v119));
      }
      uint64_t v12 = v18;
      if (v18 >= v21)
      {
        a2 = v116;
      }
      else
      {
        uint64_t v26 = v21;
        a2 = v116;
        do
        {
          uint64_t v27 = *v12;
          uint64_t *v12 = *v26;
          std::__shared_weak_count *v26 = v27;
          uint64_t v28 = v12[1];
          v12[1] = v26[1];
          v26[1] = v28;
          do
          {
            long long v29 = (void *)v12[2];
            uint64_t v30 = (std::__shared_weak_count *)v12[3];
            v12 += 2;
          }
          while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v29, v30, (uint64_t)&v119));
          do
          {
            int v31 = (void *)*(v26 - 2);
            BOOL v32 = (std::__shared_weak_count *)*(v26 - 1);
            v26 -= 2;
          }
          while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v31, v32, (uint64_t)&v119));
        }
        while (v12 < v26);
      }
      uint64_t v33 = (long long *)(v12 - 2);
      if (v12 - 2 != (void *)a1)
      {
        uint64_t v34 = *v33;
        *(void *)uint64_t v33 = 0;
        *(v12 - 1) = 0;
        CFTypeID v35 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v34;
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
      }
      int v36 = v119;
      std::string::size_type v119 = 0uLL;
      uint64_t v37 = (std::__shared_weak_count *)*(v12 - 1);
      *((_OWORD *)v12 - 1) = v36;
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (*((void *)&v119 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
      }
      if (v18 < v21) {
        goto LABEL_37;
      }
      long long v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, (uint64_t)(v12 - 2));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((uint64_t)v12, a2))
      {
        a2 = (unint64_t)(v12 - 2);
        if (v38) {
          return;
        }
        goto LABEL_1;
      }
      if (!v38)
      {
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>(a1, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v39 = *(_OWORD *)a1;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v40 = (void *)v39;
      uint64_t v113 = v39;
      uint64_t v41 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()((void *)v39, *((std::__shared_weak_count **)&v39 + 1), (uint64_t)v10))
      {
        uint64_t v12 = (void *)a1;
        do
          v12 += 2;
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, (uint64_t)v12));
      }
      else
      {
        uint64_t v42 = a1 + 16;
        do
        {
          uint64_t v12 = (void *)v42;
          if (v42 >= a2) {
            break;
          }
          uint64_t v43 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, v42);
          uint64_t v42 = (unint64_t)(v12 + 2);
        }
        while (!v43);
      }
      CFNumberRef v44 = (void *)a2;
      if ((unint64_t)v12 < a2)
      {
        CFNumberRef v44 = (void *)a2;
        do
          v44 -= 2;
        while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, (uint64_t)v44));
      }
      while (v12 < v44)
      {
        long long v45 = *v12;
        uint64_t *v12 = *v44;
        *CFNumberRef v44 = v45;
        CFArrayRef v46 = v12[1];
        v12[1] = v44[1];
        v44[1] = v46;
        do
          v12 += 2;
        while (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, (uint64_t)v12));
        do
          v44 -= 2;
        while (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v40, v41, (uint64_t)v44));
      }
      uint64_t v47 = (long long *)(v12 - 2);
      BOOL v4 = (unint64_t)(v12 - 2) >= a1;
      BOOL v5 = v12 - 2 == (void *)a1;
      if (v12 - 2 != (void *)a1)
      {
        uint64_t v48 = *v47;
        *(void *)uint64_t v47 = 0;
        *(v12 - 1) = 0;
        uint64_t v49 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v48;
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
      }
      a4 = 0;
      uint64_t v50 = (std::__shared_weak_count *)*(v12 - 1);
      *((_OWORD *)v12 - 1) = v113;
      if (v50)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        a4 = 0;
      }
    }
  }
  uint64_t v53 = a1 + 16;
  uint64_t v55 = a1 == a2 || v53 == a2;
  if (a4)
  {
    if (!v55)
    {
      uint64_t v56 = 0;
      uint64_t v57 = a1;
      do
      {
        uint64_t v58 = v57;
        uint64_t v57 = v53;
        if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(v58 + 16), *(std::__shared_weak_count **)(v53 + 8), v58))
        {
          long long v59 = *(_OWORD *)v57;
          *(void *)uint64_t v57 = 0;
          *(void *)(v57 + 8) = 0;
          long long v60 = (void *)v59;
          uint64_t v115 = v59;
          int v61 = (std::__shared_weak_count *)*((void *)&v59 + 1);
          int v62 = v56;
          while (1)
          {
            uint64_t v63 = a1 + v62;
            unint64_t v64 = *(_OWORD *)(a1 + v62);
            *(void *)uint64_t v63 = 0;
            *(void *)(v63 + 8) = 0;
            int64_t v65 = *(std::__shared_weak_count **)(a1 + v62 + 24);
            *(_OWORD *)(v63 + 16) = v64;
            if (v65) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v65);
            }
            if (!v62) {
              break;
            }
            v62 -= 16;
            if (!sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v60, v61, v62 + a1))
            {
              int64_t v66 = a1 + v62 + 16;
              goto LABEL_90;
            }
          }
          int64_t v66 = a1;
LABEL_90:
          int64_t v67 = *(std::__shared_weak_count **)(v66 + 8);
          *(_OWORD *)int64_t v66 = v115;
          a2 = v116;
          if (v67) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v67);
          }
        }
        uint64_t v53 = v57 + 16;
        v56 += 16;
      }
      while (v57 + 16 != a2);
    }
  }
  else if (!v55)
  {
    do
    {
      uint64_t v104 = a1;
      a1 = v53;
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(v104 + 16), *(std::__shared_weak_count **)(v53 + 8), v104))
      {
        CFArrayRef v105 = *(_OWORD *)a1;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v106 = (void *)v105;
        uint64_t v118 = v105;
        unint64_t v107 = (std::__shared_weak_count *)*((void *)&v105 + 1);
        int v108 = a1;
        do
        {
          char v109 = *(_OWORD *)(v108 - 16);
          *(void *)(v108 - 16) = 0;
          *(void *)(v108 - 8) = 0;
          int64_t v110 = *(std::__shared_weak_count **)(v108 + 8);
          *(_OWORD *)int v108 = v109;
          if (v110) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v110);
          }
          uint64_t v111 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v106, v107, v108 - 32);
          v108 -= 16;
        }
        while (v111);
        long long v112 = *(std::__shared_weak_count **)(v108 + 8);
        *(_OWORD *)int v108 = v118;
        if (v112) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v112);
        }
      }
      uint64_t v53 = a1 + 16;
    }
    while (a1 + 16 != a2);
  }
}

  uint64_t v8 = a2;
  uint64_t v173 = a2 - 16;
  uint64_t v9 = (uint64_t *)a1;
  while (1)
  {
    uint64_t v10 = (uint64_t)v9;
    uint64_t v11 = v8 - (void)v9;
    uint64_t v12 = (uint64_t)(v8 - (void)v9) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          CFNumberRef v69 = *(void **)(a2 - 16);
          unsigned int v70 = *(std::__shared_weak_count **)(a2 - 8);
          if (v70) {
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v71 = *(std::__shared_weak_count **)(v10 + 8);
          uint64_t v182 = *(void **)v10;
          uint64_t v183 = v71;
          if (v71)
          {
            atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v72 = lessThan(v69, &v182);
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
            if (!v70) {
              goto LABEL_152;
            }
          }
          else
          {
            uint64_t v72 = lessThan(v69, &v182);
            if (!v70)
            {
LABEL_152:
              if (v72)
              {
                unint64_t v73 = *(void **)v10;
                *(void *)uint64_t v10 = *(void *)(a2 - 16);
                *(void *)(a2 - 16) = v73;
                long long v74 = *(void *)(v10 + 8);
                *(void *)(v10 + 8) = *(void *)(a2 - 8);
                *(void *)(a2 - 8) = v74;
              }
              return;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          goto LABEL_152;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10, v10 + 16, v173);
          return;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10, v10 + 16, v10 + 32, v173);
          return;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10, v10 + 16, v10 + 32, v10 + 48, v173);
          return;
        default:
          JUMPOUT(0);
      }
    }
    uint64_t v180 = (void *)v10;
    if (v11 <= 383)
    {
      if (a4)
      {
        if (v10 == v8) {
          return;
        }
        uint64_t v75 = v10 + 16;
        if (v10 + 16 == a2) {
          return;
        }
        uint64_t v76 = 0;
        unint64_t v77 = v10;
        while (1)
        {
          uint64_t v78 = v77;
          unint64_t v77 = v75;
          uint64_t v79 = *(void **)(v78 + 16);
          __int16 v80 = *(std::__shared_weak_count **)(v78 + 24);
          if (v80) {
            atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v81 = *(std::__shared_weak_count **)(v78 + 8);
          uint64_t v182 = *(void **)v78;
          uint64_t v183 = v81;
          if (!v81) {
            break;
          }
          atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
          CFNumberRef v82 = lessThan(v79, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          if (v80) {
            goto LABEL_171;
          }
LABEL_172:
          if (!v82) {
            goto LABEL_191;
          }
          int v83 = *(void **)v77;
          uint64_t v84 = *(std::__shared_weak_count **)(v78 + 24);
          uint64_t v85 = v76;
          *(void *)unint64_t v77 = 0;
          *(void *)(v77 + 8) = 0;
          do
          {
            long long v86 = (char *)v180 + v85;
            uint64_t v87 = *(_OWORD *)((char *)v180 + v85);
            *(void *)long long v86 = 0;
            *((void *)v86 + 1) = 0;
            unint64_t v88 = *(std::__shared_weak_count **)((char *)v180 + v85 + 24);
            *((_OWORD *)v86 + 1) = v87;
            if (v88) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v88);
            }
            if (!v85)
            {
              unsigned int v91 = v180;
              goto LABEL_189;
            }
            if (v84) {
              atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = *(void **)((char *)v180 + v85 - 16);
            long long v89 = *(std::__shared_weak_count **)((char *)v180 + v85 - 8);
            uint64_t v183 = v89;
            if (v89)
            {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
              __int16 v90 = lessThan(v83, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v89);
              if (!v84) {
                goto LABEL_182;
              }
LABEL_181:
              std::__shared_weak_count::__release_shared[abi:ne180100](v84);
              goto LABEL_182;
            }
            __int16 v90 = lessThan(v83, &v182);
            if (v84) {
              goto LABEL_181;
            }
LABEL_182:
            v85 -= 16;
          }
          while (v90);
          unsigned int v91 = (void *)((char *)v180 + v85 + 16);
LABEL_189:
          uint64_t v92 = (std::__shared_weak_count *)v91[1];
          std::__shared_weak_count *v91 = v83;
          v91[1] = v84;
          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
LABEL_191:
          uint64_t v75 = v77 + 16;
          v76 += 16;
          if (v77 + 16 == a2) {
            return;
          }
        }
        CFNumberRef v82 = lessThan(v79, &v182);
        if (!v80) {
          goto LABEL_172;
        }
LABEL_171:
        std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        goto LABEL_172;
      }
      if (v10 == v8) {
        return;
      }
      uint64_t v157 = v10 + 16;
      if (v10 + 16 == a2) {
        return;
      }
      while (2)
      {
        uint64_t v158 = v10;
        uint64_t v10 = v157;
        uint64_t v159 = *(void **)(v158 + 16);
        uint64_t v160 = *(std::__shared_weak_count **)(v158 + 24);
        if (v160) {
          atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFIndex v161 = *(std::__shared_weak_count **)(v158 + 8);
        uint64_t v182 = *(void **)v158;
        uint64_t v183 = v161;
        if (v161)
        {
          atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string v162 = lessThan(v159, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v161);
          if (v160) {
            goto LABEL_300;
          }
        }
        else
        {
          std::string v162 = lessThan(v159, &v182);
          if (v160) {
LABEL_300:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v160);
        }
        if (!v162)
        {
LABEL_316:
          uint64_t v157 = v10 + 16;
          if (v10 + 16 == a2) {
            return;
          }
          continue;
        }
        break;
      }
      uint64_t v163 = *(void **)v10;
      unint64_t v164 = *(std::__shared_weak_count **)(v158 + 24);
      char v165 = v10;
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      while (2)
      {
        unint64_t v166 = *(_OWORD *)(v165 - 16);
        *(void *)(v165 - 16) = 0;
        *(void *)(v165 - 8) = 0;
        uint64_t v167 = *(std::__shared_weak_count **)(v165 + 8);
        *(_OWORD *)char v165 = v166;
        if (v167) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v167);
        }
        if (v164) {
          atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = *(void **)(v165 - 32);
        unint64_t v168 = *(std::__shared_weak_count **)(v165 - 24);
        uint64_t v183 = v168;
        if (v168)
        {
          atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v169 = lessThan(v163, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v168);
          if (v164) {
            goto LABEL_309;
          }
        }
        else
        {
          unint64_t v169 = lessThan(v163, &v182);
          if (v164) {
LABEL_309:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v164);
        }
        v165 -= 16;
        if (!v169)
        {
          uint64_t v170 = *(std::__shared_weak_count **)(v165 + 8);
          *(void *)char v165 = v163;
          *(void *)(v165 + 8) = v164;
          if (v170) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v170);
          }
          goto LABEL_316;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v10;
    uint64_t v14 = (unint64_t)v12 >> 1;
    long long v15 = (_OWORD *)(v10 + 16 * ((unint64_t)v12 >> 1));
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)v15, v10, v173);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10, (uint64_t)v15, v173);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10 + 16, (uint64_t)(v15 - 1), a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(v10 + 32, v10 + 16 + 16 * v14, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)(v15 - 1), (uint64_t)v15, v10 + 16 + 16 * v14);
      uint64_t v16 = *(_OWORD *)v10;
      *(_OWORD *)uint64_t v10 = *v15;
      *long long v15 = v16;
    }
    a1 = v10;
    --a3;
    if (a4) {
      goto LABEL_16;
    }
    uint64_t v17 = *(void **)(v10 - 16);
    uint64_t v18 = *(std::__shared_weak_count **)(v10 - 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *(std::__shared_weak_count **)(v10 + 8);
    uint64_t v182 = *(void **)v13;
    uint64_t v183 = v19;
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v20 = lessThan(v17, &v182);
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (!v18) {
        goto LABEL_15;
      }
LABEL_14:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      goto LABEL_15;
    }
    BOOL v20 = lessThan(v17, &v182);
    if (v18) {
      goto LABEL_14;
    }
LABEL_15:
    if (v20)
    {
LABEL_16:
      uint64_t v21 = *(void **)v13;
      uint64_t v22 = *(std::__shared_weak_count **)(v13 + 8);
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      do
      {
        uint64_t v23 = *(void **)(v13 + 16);
        uint64_t v24 = *(std::__shared_weak_count **)(v13 + 24);
        v13 += 16;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = v21;
        uint64_t v183 = v22;
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = lessThan(v23, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          if (!v24) {
            continue;
          }
LABEL_21:
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          continue;
        }
        uint64_t v25 = lessThan(v23, &v182);
        if (v24) {
          goto LABEL_21;
        }
      }
      while (v25);
      uint64_t v181 = a3;
      uint64_t v26 = (uint64_t *)v8;
      if (v13 - 16 != a1)
      {
        while (1)
        {
          uint64_t v27 = (void *)*(v26 - 2);
          uint64_t v28 = (std::__shared_weak_count *)*(v26 - 1);
          v26 -= 2;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v21;
          uint64_t v183 = v22;
          if (!v22) {
            break;
          }
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v29 = lessThan(v27, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          if (v28) {
            goto LABEL_31;
          }
LABEL_32:
          if (v29) {
            goto LABEL_47;
          }
        }
        long long v29 = lessThan(v27, &v182);
        if (!v28) {
          goto LABEL_32;
        }
LABEL_31:
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        goto LABEL_32;
      }
      uint64_t v26 = (uint64_t *)v8;
      while (2)
      {
        if (v13 < (unint64_t)v26)
        {
          uint64_t v30 = (void *)*(v26 - 2);
          int v31 = (std::__shared_weak_count *)*(v26 - 1);
          v26 -= 2;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v21;
          uint64_t v183 = v22;
          if (v22)
          {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL v32 = lessThan(v30, &v182);
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            if (v31) {
              goto LABEL_42;
            }
          }
          else
          {
            BOOL v32 = lessThan(v30, &v182);
            if (v31) {
LABEL_42:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          if (v32) {
            break;
          }
          continue;
        }
        break;
      }
LABEL_47:
      uint64_t v9 = (uint64_t *)v13;
      if (v13 < (unint64_t)v26)
      {
        uint64_t v33 = v26;
        do
        {
          uint64_t v34 = *v9;
          *uint64_t v9 = *v33;
          *uint64_t v33 = v34;
          CFTypeID v35 = v9[1];
          v9[1] = v33[1];
          v33[1] = v35;
          do
          {
            int v36 = (void *)v9[2];
            uint64_t v37 = (std::__shared_weak_count *)v9[3];
            v9 += 2;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = v21;
            uint64_t v183 = v22;
            if (v22)
            {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              long long v38 = lessThan(v36, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              if (!v37) {
                continue;
              }
LABEL_54:
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
              continue;
            }
            long long v38 = lessThan(v36, &v182);
            if (v37) {
              goto LABEL_54;
            }
          }
          while (v38);
          do
          {
            uint64_t v40 = (void *)*(v33 - 2);
            uint64_t v41 = (std::__shared_weak_count *)*(v33 - 1);
            v33 -= 2;
            if (v41) {
              atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = v21;
            uint64_t v183 = v22;
            if (v22)
            {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v39 = lessThan(v40, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              if (!v41) {
                continue;
              }
LABEL_65:
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              continue;
            }
            uint64_t v39 = lessThan(v40, &v182);
            if (v41) {
              goto LABEL_65;
            }
          }
          while (!v39);
        }
        while (v9 < v33);
      }
      uint64_t v42 = (long long *)(v9 - 2);
      if (v9 - 2 != (uint64_t *)a1)
      {
        uint64_t v43 = *v42;
        *(void *)uint64_t v42 = 0;
        *(v9 - 1) = 0;
        CFNumberRef v44 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v43;
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
      }
      long long v45 = (std::__shared_weak_count *)*(v9 - 1);
      *(v9 - 2) = (uint64_t)v21;
      *(v9 - 1) = (uint64_t)v22;
      uint64_t v8 = a2;
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      BOOL v4 = v13 >= (unint64_t)v26;
      a3 = v181;
      if (v4)
      {
        CFArrayRef v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, (uint64_t)(v9 - 2));
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>((uint64_t)v9, a2))
        {
          a2 = (unint64_t)(v9 - 2);
          if (v46) {
            return;
          }
          goto LABEL_1;
        }
        if (!v46) {
          goto LABEL_77;
        }
      }
      else
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>(a1, v9 - 2, v181, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v48 = *(void **)v13;
      uint64_t v47 = *(std::__shared_weak_count **)(v13 + 8);
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)(v8 - 16);
      uint64_t v49 = *(std::__shared_weak_count **)(v8 - 8);
      uint64_t v183 = v49;
      if (!v49)
      {
        uint64_t v50 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_85;
        }
LABEL_84:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_85;
      }
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v50 = lessThan(v48, &v182);
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      if (v47) {
        goto LABEL_84;
      }
LABEL_85:
      if (v50)
      {
        uint64_t v9 = (uint64_t *)v13;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v9[2];
          uint64_t v51 = (std::__shared_weak_count *)v9[3];
          uint64_t v183 = v51;
          if (!v51) {
            break;
          }
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v52 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
          if (v47) {
            goto LABEL_91;
          }
LABEL_92:
          v9 += 2;
          if (v52) {
            goto LABEL_107;
          }
        }
        BOOL v52 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_92;
        }
LABEL_91:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_92;
      }
      uint64_t v53 = (uint64_t *)(v13 + 16);
      do
      {
        uint64_t v9 = v53;
        if ((unint64_t)v53 >= a2) {
          break;
        }
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = (void *)*v53;
        CFNumberRef v54 = (std::__shared_weak_count *)v53[1];
        uint64_t v183 = v54;
        if (!v54)
        {
          uint64_t v55 = lessThan(v48, &v182);
          if (!v47) {
            goto LABEL_103;
          }
LABEL_102:
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          goto LABEL_103;
        }
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v55 = lessThan(v48, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        if (v47) {
          goto LABEL_102;
        }
LABEL_103:
        uint64_t v53 = v9 + 2;
      }
      while (!v55);
LABEL_107:
      uint64_t v56 = (uint64_t *)a2;
      if ((unint64_t)v9 < a2)
      {
        uint64_t v56 = (uint64_t *)a2;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)*(v56 - 2);
          uint64_t v57 = (std::__shared_weak_count *)*(v56 - 1);
          uint64_t v183 = v57;
          if (!v57) {
            break;
          }
          atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v58 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          if (v47) {
            goto LABEL_113;
          }
LABEL_114:
          v56 -= 2;
          if (!v58) {
            goto LABEL_136;
          }
        }
        uint64_t v58 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_114;
        }
LABEL_113:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_114;
      }
LABEL_136:
      if (v9 < v56)
      {
        long long v59 = *v9;
        *uint64_t v9 = *v56;
        float32x4_t *v56 = v59;
        long long v60 = v9[1];
        v9[1] = v56[1];
        v56[1] = v60;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v9[2];
          int v61 = (std::__shared_weak_count *)v9[3];
          uint64_t v183 = v61;
          if (!v61) {
            break;
          }
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          int v62 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          if (v47) {
            goto LABEL_123;
          }
LABEL_124:
          v9 += 2;
          if (v62)
          {
            while (1)
            {
              if (v47) {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v182 = (void *)*(v56 - 2);
              unint64_t v64 = (std::__shared_weak_count *)*(v56 - 1);
              uint64_t v183 = v64;
              if (!v64) {
                break;
              }
              atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v63 = lessThan(v48, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v64);
              if (v47) {
                goto LABEL_134;
              }
LABEL_135:
              v56 -= 2;
              if (!v63) {
                goto LABEL_136;
              }
            }
            uint64_t v63 = lessThan(v48, &v182);
            if (!v47) {
              goto LABEL_135;
            }
LABEL_134:
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            goto LABEL_135;
          }
        }
        int v62 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_124;
        }
LABEL_123:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_124;
      }
      int64_t v65 = (long long *)(v9 - 2);
      BOOL v4 = (unint64_t)(v9 - 2) >= a1;
      BOOL v5 = v9 - 2 == (uint64_t *)a1;
      if (v9 - 2 != (uint64_t *)a1)
      {
        int64_t v66 = *v65;
        *(void *)int64_t v65 = 0;
        *(v9 - 1) = 0;
        int64_t v67 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v66;
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
      }
      a4 = 0;
      uint64_t v68 = (std::__shared_weak_count *)*(v9 - 1);
      *(v9 - 2) = (uint64_t)v48;
      *(v9 - 1) = (uint64_t)v47;
      uint64_t v8 = a2;
      if (v68)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        a4 = 0;
      }
    }
  }
  if (v10 == v8) {
    return;
  }
  unint64_t v93 = (unint64_t)(v12 - 2) >> 1;
  uint64_t v94 = v93;
  unint64_t v171 = v11;
  unint64_t v172 = v12;
  do
  {
    uint64_t v95 = v94;
    if (v93 >= v94)
    {
      uint64_t v96 = (2 * v94) | 1;
      int v97 = v180;
      long long v98 = &v180[2 * v96];
      unint64_t v99 = 2 * v94 + 2;
      BOOL v174 = v94;
      if (v99 < v12)
      {
        uint64_t v100 = *(_OWORD *)v98;
        CFTypeID v101 = (std::__shared_weak_count *)v98[1];
        if (v101) {
          atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = (void *)v98[2];
        int v102 = (std::__shared_weak_count *)v98[3];
        uint64_t v183 = v102;
        if (v102)
        {
          atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v103 = lessThan((void *)v100, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
        else
        {
          uint64_t v103 = lessThan((void *)v100, &v182);
        }
        uint64_t v95 = v174;
        if (v101) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v101);
        }
        if (v103)
        {
          v98 += 2;
          uint64_t v96 = v99;
        }
        int v97 = v180;
      }
      uint64_t v104 = (void *)*v98;
      CFArrayRef v105 = (std::__shared_weak_count *)v98[1];
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v106 = &v97[2 * v95];
      uint64_t v182 = (void *)*v106;
      unint64_t v107 = (std::__shared_weak_count *)v106[1];
      uint64_t v183 = v107;
      if (v107)
      {
        atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
        int v108 = lessThan(v104, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v107);
      }
      else
      {
        int v108 = lessThan(v104, &v182);
      }
      uint64_t v95 = v174;
      if (v105) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v105);
      }
      if (!v108)
      {
        unint64_t v177 = (void *)*v106;
        char v109 = (std::__shared_weak_count *)v106[1];
        *long long v106 = 0;
        v106[1] = 0;
        int64_t v110 = v180;
        while (1)
        {
          uint64_t v111 = v98;
          long long v112 = *(_OWORD *)v98;
          uint64_t *v98 = 0;
          v98[1] = 0;
          uint64_t v113 = (std::__shared_weak_count *)v106[1];
          *(_OWORD *)long long v106 = v112;
          if (v113) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v113);
          }
          if (v93 < v96)
          {
LABEL_241:
            std::string::size_type v123 = (std::__shared_weak_count *)v111[1];
            uint64_t v95 = v174;
            *uint64_t v111 = v177;
            v111[1] = v109;
            uint64_t v11 = v171;
            if (v123) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v123);
            }
            goto LABEL_243;
          }
          uint64_t v114 = (2 * v96) | 1;
          long long v98 = &v110[2 * v114];
          uint64_t v115 = 2 * v96 + 2;
          if (v115 >= v12)
          {
            uint64_t v96 = (2 * v96) | 1;
            goto LABEL_230;
          }
          int v116 = *(_OWORD *)v98;
          uint64_t v117 = (std::__shared_weak_count *)v98[1];
          if (v117) {
            atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v98[2];
          uint64_t v118 = (std::__shared_weak_count *)v98[3];
          uint64_t v183 = v118;
          if (!v118) {
            break;
          }
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string::size_type v119 = lessThan((void *)v116, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v118);
          if (v117) {
            goto LABEL_225;
          }
LABEL_226:
          if (v119)
          {
            v98 += 2;
            uint64_t v96 = v115;
          }
          else
          {
            uint64_t v96 = v114;
          }
          uint64_t v12 = v172;
LABEL_230:
          unint64_t v120 = (void *)*v98;
          char v121 = (std::__shared_weak_count *)v98[1];
          int64_t v110 = v180;
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v177;
          uint64_t v183 = v109;
          if (!v109)
          {
            uint64_t v122 = lessThan(v120, &v182);
            if (!v121) {
              goto LABEL_235;
            }
LABEL_234:
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
            goto LABEL_235;
          }
          atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v122 = lessThan(v120, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
          if (v121) {
            goto LABEL_234;
          }
LABEL_235:
          long long v106 = v111;
          if (v122) {
            goto LABEL_241;
          }
        }
        std::string::size_type v119 = lessThan((void *)v116, &v182);
        if (!v117) {
          goto LABEL_226;
        }
LABEL_225:
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
        goto LABEL_226;
      }
    }
LABEL_243:
    uint64_t v94 = v95 - 1;
  }
  while (v95);
  uint64_t v124 = (unint64_t)v11 >> 4;
  CFTypeID v125 = v180;
  do
  {
    if (v124 < 2) {
      goto LABEL_288;
    }
    CFIndex v126 = 0;
    uint64_t v175 = *v125;
    std::string v178 = v125[1];
    int v127 = v125;
    std::string *v125 = 0;
    v125[1] = 0;
    do
    {
      std::string::size_type v128 = (uint64_t)&v127[2 * v126 + 2];
      uint64_t v129 = 2 * v126;
      CFIndex v126 = (2 * v126) | 1;
      uint64_t v130 = v129 + 2;
      if (v129 + 2 >= v124) {
        goto LABEL_255;
      }
      CFDictionaryRef v131 = *(_OWORD *)v128;
      CFStringRef v132 = *(std::__shared_weak_count **)(v128 + 8);
      if (v132) {
        atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)(v128 + 16);
      CFStringRef v133 = *(std::__shared_weak_count **)(v128 + 24);
      uint64_t v183 = v133;
      if (v133)
      {
        atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
        CFTypeID v134 = lessThan((void *)v131, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v133);
        if (!v132) {
          goto LABEL_253;
        }
LABEL_252:
        std::__shared_weak_count::__release_shared[abi:ne180100](v132);
        goto LABEL_253;
      }
      CFTypeID v134 = lessThan((void *)v131, &v182);
      if (v132) {
        goto LABEL_252;
      }
LABEL_253:
      if (v134)
      {
        v128 += 16;
        CFIndex v126 = v130;
      }
LABEL_255:
      CFStringRef v135 = *(_OWORD *)v128;
      *(void *)std::string::size_type v128 = 0;
      *(void *)(v128 + 8) = 0;
      v136 = (std::__shared_weak_count *)v127[1];
      *(_OWORD *)int v127 = v135;
      if (v136) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v136);
      }
      int v127 = (void *)v128;
    }
    while (v126 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
    if (v128 == a2 - 16)
    {
      CFTypeID v155 = *(std::__shared_weak_count **)(v128 + 8);
      *(void *)std::string::size_type v128 = v175;
      *(void *)(v128 + 8) = v178;
      CFTypeID v125 = v180;
      if (!v155) {
        goto LABEL_288;
      }
      goto LABEL_287;
    }
    uint64_t v137 = *(_OWORD *)(a2 - 16);
    *(void *)(a2 - 16) = 0;
    *(void *)(a2 - 8) = 0;
    uint64_t v138 = *(std::__shared_weak_count **)(v128 + 8);
    *(_OWORD *)std::string::size_type v128 = v137;
    if (v138) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v138);
    }
    v139 = *(std::__shared_weak_count **)(a2 - 8);
    *(void *)(a2 - 16) = v175;
    *(void *)(a2 - 8) = v178;
    if (v139) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
    }
    CFTypeID v125 = v180;
    uint64_t v140 = v128 + 16 - (void)v180;
    if (v140 >= 17)
    {
      CFStringRef v141 = (unint64_t)((v140 >> 4) - 2) >> 1;
      CFStringRef v142 = &v180[2 * v141];
      CFTypeID v143 = *(_OWORD *)v142;
      uint64_t v144 = (std::__shared_weak_count *)v142[1];
      if (v144) {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)v128;
      std::__split_buffer<std::string>::pointer v145 = *(std::__shared_weak_count **)(v128 + 8);
      uint64_t v183 = v145;
      if (v145)
      {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
        CFPropertyListRef v146 = lessThan((void *)v143, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v145);
        if (v144) {
          goto LABEL_271;
        }
      }
      else
      {
        CFPropertyListRef v146 = lessThan((void *)v143, &v182);
        if (v144) {
LABEL_271:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v144);
      }
      if (!v146) {
        goto LABEL_288;
      }
      uint64_t v148 = *(void **)v128;
      long long v147 = *(std::__shared_weak_count **)(v128 + 8);
      *(void *)std::string::size_type v128 = 0;
      *(void *)(v128 + 8) = 0;
      while (2)
      {
        uint64_t v149 = v142;
        uint64_t v150 = *(_OWORD *)v142;
        std::string *v142 = 0;
        v142[1] = 0;
        unint64_t v151 = *(std::__shared_weak_count **)(v128 + 8);
        *(_OWORD *)std::string::size_type v128 = v150;
        if (v151) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v151);
        }
        if (!v141)
        {
LABEL_290:
          CFTypeID v155 = (std::__shared_weak_count *)v149[1];
          *uint64_t v149 = v148;
          v149[1] = v147;
          if (!v155) {
            break;
          }
LABEL_287:
          std::__shared_weak_count::__release_shared[abi:ne180100](v155);
          break;
        }
        CFStringRef v141 = (v141 - 1) >> 1;
        CFStringRef v142 = &v180[2 * v141];
        CFDictionaryRef v152 = *(_OWORD *)v142;
        CFStringRef v153 = (std::__shared_weak_count *)v142[1];
        if (v153) {
          atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = v148;
        uint64_t v183 = v147;
        if (v147)
        {
          atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
          CFStringRef v154 = lessThan((void *)v152, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v147);
          if (v153) {
            goto LABEL_281;
          }
        }
        else
        {
          CFStringRef v154 = lessThan((void *)v152, &v182);
          if (v153) {
LABEL_281:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v153);
        }
        std::string::size_type v128 = (uint64_t)v149;
        if (!v154) {
          goto LABEL_290;
        }
        continue;
      }
    }
LABEL_288:
    a2 -= 16;
  }
  while ((unint64_t)v124-- > 2);
}

  uint64_t v8 = a2;
  uint64_t v173 = a2 - 16;
  uint64_t v9 = (uint64_t *)a1;
  while (1)
  {
    uint64_t v10 = (uint64_t)v9;
    uint64_t v11 = v8 - (void)v9;
    uint64_t v12 = (uint64_t)(v8 - (void)v9) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          CFNumberRef v69 = *(void **)(a2 - 16);
          unsigned int v70 = *(std::__shared_weak_count **)(a2 - 8);
          if (v70) {
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v71 = *(std::__shared_weak_count **)(v10 + 8);
          uint64_t v182 = *(void **)v10;
          uint64_t v183 = v71;
          if (v71)
          {
            atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v72 = lessThan(v69, &v182);
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
            if (!v70) {
              goto LABEL_152;
            }
          }
          else
          {
            uint64_t v72 = lessThan(v69, &v182);
            if (!v70)
            {
LABEL_152:
              if (v72)
              {
                unint64_t v73 = *(void **)v10;
                *(void *)uint64_t v10 = *(void *)(a2 - 16);
                *(void *)(a2 - 16) = v73;
                long long v74 = *(void *)(v10 + 8);
                *(void *)(v10 + 8) = *(void *)(a2 - 8);
                *(void *)(a2 - 8) = v74;
              }
              return;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          goto LABEL_152;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v10, v10 + 16, v173);
          return;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v10, v10 + 16, v10 + 32, v173);
          return;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v10, v10 + 16, v10 + 32, v10 + 48, v173);
          return;
        default:
          JUMPOUT(0);
      }
    }
    uint64_t v180 = (void *)v10;
    if (v11 <= 383)
    {
      if (a4)
      {
        if (v10 == v8) {
          return;
        }
        uint64_t v75 = v10 + 16;
        if (v10 + 16 == a2) {
          return;
        }
        uint64_t v76 = 0;
        unint64_t v77 = v10;
        while (1)
        {
          uint64_t v78 = v77;
          unint64_t v77 = v75;
          uint64_t v79 = *(void **)(v78 + 16);
          __int16 v80 = *(std::__shared_weak_count **)(v78 + 24);
          if (v80) {
            atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v81 = *(std::__shared_weak_count **)(v78 + 8);
          uint64_t v182 = *(void **)v78;
          uint64_t v183 = v81;
          if (!v81) {
            break;
          }
          atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
          CFNumberRef v82 = lessThan(v79, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          if (v80) {
            goto LABEL_171;
          }
LABEL_172:
          if (!v82) {
            goto LABEL_191;
          }
          int v83 = *(void **)v77;
          uint64_t v84 = *(std::__shared_weak_count **)(v78 + 24);
          uint64_t v85 = v76;
          *(void *)unint64_t v77 = 0;
          *(void *)(v77 + 8) = 0;
          do
          {
            long long v86 = (char *)v180 + v85;
            uint64_t v87 = *(_OWORD *)((char *)v180 + v85);
            *(void *)long long v86 = 0;
            *((void *)v86 + 1) = 0;
            unint64_t v88 = *(std::__shared_weak_count **)((char *)v180 + v85 + 24);
            *((_OWORD *)v86 + 1) = v87;
            if (v88) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v88);
            }
            if (!v85)
            {
              unsigned int v91 = v180;
              goto LABEL_189;
            }
            if (v84) {
              atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = *(void **)((char *)v180 + v85 - 16);
            long long v89 = *(std::__shared_weak_count **)((char *)v180 + v85 - 8);
            uint64_t v183 = v89;
            if (v89)
            {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
              __int16 v90 = lessThan(v83, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v89);
              if (!v84) {
                goto LABEL_182;
              }
LABEL_181:
              std::__shared_weak_count::__release_shared[abi:ne180100](v84);
              goto LABEL_182;
            }
            __int16 v90 = lessThan(v83, &v182);
            if (v84) {
              goto LABEL_181;
            }
LABEL_182:
            v85 -= 16;
          }
          while (v90);
          unsigned int v91 = (void *)((char *)v180 + v85 + 16);
LABEL_189:
          uint64_t v92 = (std::__shared_weak_count *)v91[1];
          std::__shared_weak_count *v91 = v83;
          v91[1] = v84;
          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
LABEL_191:
          uint64_t v75 = v77 + 16;
          v76 += 16;
          if (v77 + 16 == a2) {
            return;
          }
        }
        CFNumberRef v82 = lessThan(v79, &v182);
        if (!v80) {
          goto LABEL_172;
        }
LABEL_171:
        std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        goto LABEL_172;
      }
      if (v10 == v8) {
        return;
      }
      uint64_t v157 = v10 + 16;
      if (v10 + 16 == a2) {
        return;
      }
      while (2)
      {
        uint64_t v158 = v10;
        uint64_t v10 = v157;
        uint64_t v159 = *(void **)(v158 + 16);
        uint64_t v160 = *(std::__shared_weak_count **)(v158 + 24);
        if (v160) {
          atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFIndex v161 = *(std::__shared_weak_count **)(v158 + 8);
        uint64_t v182 = *(void **)v158;
        uint64_t v183 = v161;
        if (v161)
        {
          atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string v162 = lessThan(v159, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v161);
          if (v160) {
            goto LABEL_300;
          }
        }
        else
        {
          std::string v162 = lessThan(v159, &v182);
          if (v160) {
LABEL_300:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v160);
        }
        if (!v162)
        {
LABEL_316:
          uint64_t v157 = v10 + 16;
          if (v10 + 16 == a2) {
            return;
          }
          continue;
        }
        break;
      }
      uint64_t v163 = *(void **)v10;
      unint64_t v164 = *(std::__shared_weak_count **)(v158 + 24);
      char v165 = v10;
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      while (2)
      {
        unint64_t v166 = *(_OWORD *)(v165 - 16);
        *(void *)(v165 - 16) = 0;
        *(void *)(v165 - 8) = 0;
        uint64_t v167 = *(std::__shared_weak_count **)(v165 + 8);
        *(_OWORD *)char v165 = v166;
        if (v167) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v167);
        }
        if (v164) {
          atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = *(void **)(v165 - 32);
        unint64_t v168 = *(std::__shared_weak_count **)(v165 - 24);
        uint64_t v183 = v168;
        if (v168)
        {
          atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v169 = lessThan(v163, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v168);
          if (v164) {
            goto LABEL_309;
          }
        }
        else
        {
          unint64_t v169 = lessThan(v163, &v182);
          if (v164) {
LABEL_309:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v164);
        }
        v165 -= 16;
        if (!v169)
        {
          uint64_t v170 = *(std::__shared_weak_count **)(v165 + 8);
          *(void *)char v165 = v163;
          *(void *)(v165 + 8) = v164;
          if (v170) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v170);
          }
          goto LABEL_316;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v10;
    uint64_t v14 = (unint64_t)v12 >> 1;
    long long v15 = (_OWORD *)(v10 + 16 * ((unint64_t)v12 >> 1));
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)v15, v10, v173);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v10, (uint64_t)v15, v173);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v10 + 16, (uint64_t)(v15 - 1), a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(v10 + 32, v10 + 16 + 16 * v14, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)(v15 - 1), (uint64_t)v15, v10 + 16 + 16 * v14);
      uint64_t v16 = *(_OWORD *)v10;
      *(_OWORD *)uint64_t v10 = *v15;
      *long long v15 = v16;
    }
    a1 = v10;
    --a3;
    if (a4) {
      goto LABEL_16;
    }
    uint64_t v17 = *(void **)(v10 - 16);
    uint64_t v18 = *(std::__shared_weak_count **)(v10 - 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *(std::__shared_weak_count **)(v10 + 8);
    uint64_t v182 = *(void **)v13;
    uint64_t v183 = v19;
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v20 = lessThan(v17, &v182);
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (!v18) {
        goto LABEL_15;
      }
LABEL_14:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      goto LABEL_15;
    }
    BOOL v20 = lessThan(v17, &v182);
    if (v18) {
      goto LABEL_14;
    }
LABEL_15:
    if (v20)
    {
LABEL_16:
      uint64_t v21 = *(void **)v13;
      uint64_t v22 = *(std::__shared_weak_count **)(v13 + 8);
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      do
      {
        uint64_t v23 = *(void **)(v13 + 16);
        uint64_t v24 = *(std::__shared_weak_count **)(v13 + 24);
        v13 += 16;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = v21;
        uint64_t v183 = v22;
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = lessThan(v23, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          if (!v24) {
            continue;
          }
LABEL_21:
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          continue;
        }
        uint64_t v25 = lessThan(v23, &v182);
        if (v24) {
          goto LABEL_21;
        }
      }
      while (v25);
      uint64_t v181 = a3;
      uint64_t v26 = (uint64_t *)v8;
      if (v13 - 16 != a1)
      {
        while (1)
        {
          uint64_t v27 = (void *)*(v26 - 2);
          uint64_t v28 = (std::__shared_weak_count *)*(v26 - 1);
          v26 -= 2;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v21;
          uint64_t v183 = v22;
          if (!v22) {
            break;
          }
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v29 = lessThan(v27, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          if (v28) {
            goto LABEL_31;
          }
LABEL_32:
          if (v29) {
            goto LABEL_47;
          }
        }
        long long v29 = lessThan(v27, &v182);
        if (!v28) {
          goto LABEL_32;
        }
LABEL_31:
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        goto LABEL_32;
      }
      uint64_t v26 = (uint64_t *)v8;
      while (2)
      {
        if (v13 < (unint64_t)v26)
        {
          uint64_t v30 = (void *)*(v26 - 2);
          int v31 = (std::__shared_weak_count *)*(v26 - 1);
          v26 -= 2;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v21;
          uint64_t v183 = v22;
          if (v22)
          {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL v32 = lessThan(v30, &v182);
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            if (v31) {
              goto LABEL_42;
            }
          }
          else
          {
            BOOL v32 = lessThan(v30, &v182);
            if (v31) {
LABEL_42:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          if (v32) {
            break;
          }
          continue;
        }
        break;
      }
LABEL_47:
      uint64_t v9 = (uint64_t *)v13;
      if (v13 < (unint64_t)v26)
      {
        uint64_t v33 = v26;
        do
        {
          uint64_t v34 = *v9;
          *uint64_t v9 = *v33;
          *uint64_t v33 = v34;
          CFTypeID v35 = v9[1];
          v9[1] = v33[1];
          v33[1] = v35;
          do
          {
            int v36 = (void *)v9[2];
            uint64_t v37 = (std::__shared_weak_count *)v9[3];
            v9 += 2;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = v21;
            uint64_t v183 = v22;
            if (v22)
            {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              long long v38 = lessThan(v36, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              if (!v37) {
                continue;
              }
LABEL_54:
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
              continue;
            }
            long long v38 = lessThan(v36, &v182);
            if (v37) {
              goto LABEL_54;
            }
          }
          while (v38);
          do
          {
            uint64_t v40 = (void *)*(v33 - 2);
            uint64_t v41 = (std::__shared_weak_count *)*(v33 - 1);
            v33 -= 2;
            if (v41) {
              atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = v21;
            uint64_t v183 = v22;
            if (v22)
            {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v39 = lessThan(v40, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              if (!v41) {
                continue;
              }
LABEL_65:
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              continue;
            }
            uint64_t v39 = lessThan(v40, &v182);
            if (v41) {
              goto LABEL_65;
            }
          }
          while (!v39);
        }
        while (v9 < v33);
      }
      uint64_t v42 = (long long *)(v9 - 2);
      if (v9 - 2 != (uint64_t *)a1)
      {
        uint64_t v43 = *v42;
        *(void *)uint64_t v42 = 0;
        *(v9 - 1) = 0;
        CFNumberRef v44 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v43;
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
      }
      long long v45 = (std::__shared_weak_count *)*(v9 - 1);
      *(v9 - 2) = (uint64_t)v21;
      *(v9 - 1) = (uint64_t)v22;
      uint64_t v8 = a2;
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      BOOL v4 = v13 >= (unint64_t)v26;
      a3 = v181;
      if (v4)
      {
        CFArrayRef v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, (uint64_t)(v9 - 2));
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)v9, a2))
        {
          a2 = (unint64_t)(v9 - 2);
          if (v46) {
            return;
          }
          goto LABEL_1;
        }
        if (!v46) {
          goto LABEL_77;
        }
      }
      else
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(a1, v9 - 2, v181, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v48 = *(void **)v13;
      uint64_t v47 = *(std::__shared_weak_count **)(v13 + 8);
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)(v8 - 16);
      uint64_t v49 = *(std::__shared_weak_count **)(v8 - 8);
      uint64_t v183 = v49;
      if (!v49)
      {
        uint64_t v50 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_85;
        }
LABEL_84:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_85;
      }
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v50 = lessThan(v48, &v182);
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      if (v47) {
        goto LABEL_84;
      }
LABEL_85:
      if (v50)
      {
        uint64_t v9 = (uint64_t *)v13;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v9[2];
          uint64_t v51 = (std::__shared_weak_count *)v9[3];
          uint64_t v183 = v51;
          if (!v51) {
            break;
          }
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v52 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
          if (v47) {
            goto LABEL_91;
          }
LABEL_92:
          v9 += 2;
          if (v52) {
            goto LABEL_107;
          }
        }
        BOOL v52 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_92;
        }
LABEL_91:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_92;
      }
      uint64_t v53 = (uint64_t *)(v13 + 16);
      do
      {
        uint64_t v9 = v53;
        if ((unint64_t)v53 >= a2) {
          break;
        }
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = (void *)*v53;
        CFNumberRef v54 = (std::__shared_weak_count *)v53[1];
        uint64_t v183 = v54;
        if (!v54)
        {
          uint64_t v55 = lessThan(v48, &v182);
          if (!v47) {
            goto LABEL_103;
          }
LABEL_102:
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          goto LABEL_103;
        }
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v55 = lessThan(v48, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        if (v47) {
          goto LABEL_102;
        }
LABEL_103:
        uint64_t v53 = v9 + 2;
      }
      while (!v55);
LABEL_107:
      uint64_t v56 = (uint64_t *)a2;
      if ((unint64_t)v9 < a2)
      {
        uint64_t v56 = (uint64_t *)a2;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)*(v56 - 2);
          uint64_t v57 = (std::__shared_weak_count *)*(v56 - 1);
          uint64_t v183 = v57;
          if (!v57) {
            break;
          }
          atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v58 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          if (v47) {
            goto LABEL_113;
          }
LABEL_114:
          v56 -= 2;
          if (!v58) {
            goto LABEL_136;
          }
        }
        uint64_t v58 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_114;
        }
LABEL_113:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_114;
      }
LABEL_136:
      if (v9 < v56)
      {
        long long v59 = *v9;
        *uint64_t v9 = *v56;
        float32x4_t *v56 = v59;
        long long v60 = v9[1];
        v9[1] = v56[1];
        v56[1] = v60;
        while (1)
        {
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v9[2];
          int v61 = (std::__shared_weak_count *)v9[3];
          uint64_t v183 = v61;
          if (!v61) {
            break;
          }
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          int v62 = lessThan(v48, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          if (v47) {
            goto LABEL_123;
          }
LABEL_124:
          v9 += 2;
          if (v62)
          {
            while (1)
            {
              if (v47) {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v182 = (void *)*(v56 - 2);
              unint64_t v64 = (std::__shared_weak_count *)*(v56 - 1);
              uint64_t v183 = v64;
              if (!v64) {
                break;
              }
              atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v63 = lessThan(v48, &v182);
              std::__shared_weak_count::__release_shared[abi:ne180100](v64);
              if (v47) {
                goto LABEL_134;
              }
LABEL_135:
              v56 -= 2;
              if (!v63) {
                goto LABEL_136;
              }
            }
            uint64_t v63 = lessThan(v48, &v182);
            if (!v47) {
              goto LABEL_135;
            }
LABEL_134:
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            goto LABEL_135;
          }
        }
        int v62 = lessThan(v48, &v182);
        if (!v47) {
          goto LABEL_124;
        }
LABEL_123:
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        goto LABEL_124;
      }
      int64_t v65 = (long long *)(v9 - 2);
      BOOL v4 = (unint64_t)(v9 - 2) >= a1;
      BOOL v5 = v9 - 2 == (uint64_t *)a1;
      if (v9 - 2 != (uint64_t *)a1)
      {
        int64_t v66 = *v65;
        *(void *)int64_t v65 = 0;
        *(v9 - 1) = 0;
        int64_t v67 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v66;
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
      }
      a4 = 0;
      uint64_t v68 = (std::__shared_weak_count *)*(v9 - 1);
      *(v9 - 2) = (uint64_t)v48;
      *(v9 - 1) = (uint64_t)v47;
      uint64_t v8 = a2;
      if (v68)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        a4 = 0;
      }
    }
  }
  if (v10 == v8) {
    return;
  }
  unint64_t v93 = (unint64_t)(v12 - 2) >> 1;
  uint64_t v94 = v93;
  unint64_t v171 = v11;
  unint64_t v172 = v12;
  do
  {
    uint64_t v95 = v94;
    if (v93 >= v94)
    {
      uint64_t v96 = (2 * v94) | 1;
      int v97 = v180;
      long long v98 = &v180[2 * v96];
      unint64_t v99 = 2 * v94 + 2;
      BOOL v174 = v94;
      if (v99 < v12)
      {
        uint64_t v100 = *(_OWORD *)v98;
        CFTypeID v101 = (std::__shared_weak_count *)v98[1];
        if (v101) {
          atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = (void *)v98[2];
        int v102 = (std::__shared_weak_count *)v98[3];
        uint64_t v183 = v102;
        if (v102)
        {
          atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v103 = lessThan((void *)v100, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
        else
        {
          uint64_t v103 = lessThan((void *)v100, &v182);
        }
        uint64_t v95 = v174;
        if (v101) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v101);
        }
        if (v103)
        {
          v98 += 2;
          uint64_t v96 = v99;
        }
        int v97 = v180;
      }
      uint64_t v104 = (void *)*v98;
      CFArrayRef v105 = (std::__shared_weak_count *)v98[1];
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v106 = &v97[2 * v95];
      uint64_t v182 = (void *)*v106;
      unint64_t v107 = (std::__shared_weak_count *)v106[1];
      uint64_t v183 = v107;
      if (v107)
      {
        atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
        int v108 = lessThan(v104, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v107);
      }
      else
      {
        int v108 = lessThan(v104, &v182);
      }
      uint64_t v95 = v174;
      if (v105) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v105);
      }
      if (!v108)
      {
        unint64_t v177 = (void *)*v106;
        char v109 = (std::__shared_weak_count *)v106[1];
        *long long v106 = 0;
        v106[1] = 0;
        int64_t v110 = v180;
        while (1)
        {
          uint64_t v111 = v98;
          long long v112 = *(_OWORD *)v98;
          uint64_t *v98 = 0;
          v98[1] = 0;
          uint64_t v113 = (std::__shared_weak_count *)v106[1];
          *(_OWORD *)long long v106 = v112;
          if (v113) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v113);
          }
          if (v93 < v96)
          {
LABEL_241:
            std::string::size_type v123 = (std::__shared_weak_count *)v111[1];
            uint64_t v95 = v174;
            *uint64_t v111 = v177;
            v111[1] = v109;
            uint64_t v11 = v171;
            if (v123) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v123);
            }
            goto LABEL_243;
          }
          uint64_t v114 = (2 * v96) | 1;
          long long v98 = &v110[2 * v114];
          uint64_t v115 = 2 * v96 + 2;
          if (v115 >= v12)
          {
            uint64_t v96 = (2 * v96) | 1;
            goto LABEL_230;
          }
          int v116 = *(_OWORD *)v98;
          uint64_t v117 = (std::__shared_weak_count *)v98[1];
          if (v117) {
            atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (void *)v98[2];
          uint64_t v118 = (std::__shared_weak_count *)v98[3];
          uint64_t v183 = v118;
          if (!v118) {
            break;
          }
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string::size_type v119 = lessThan((void *)v116, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v118);
          if (v117) {
            goto LABEL_225;
          }
LABEL_226:
          if (v119)
          {
            v98 += 2;
            uint64_t v96 = v115;
          }
          else
          {
            uint64_t v96 = v114;
          }
          uint64_t v12 = v172;
LABEL_230:
          unint64_t v120 = (void *)*v98;
          char v121 = (std::__shared_weak_count *)v98[1];
          int64_t v110 = v180;
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v177;
          uint64_t v183 = v109;
          if (!v109)
          {
            uint64_t v122 = lessThan(v120, &v182);
            if (!v121) {
              goto LABEL_235;
            }
LABEL_234:
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
            goto LABEL_235;
          }
          atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v122 = lessThan(v120, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
          if (v121) {
            goto LABEL_234;
          }
LABEL_235:
          long long v106 = v111;
          if (v122) {
            goto LABEL_241;
          }
        }
        std::string::size_type v119 = lessThan((void *)v116, &v182);
        if (!v117) {
          goto LABEL_226;
        }
LABEL_225:
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
        goto LABEL_226;
      }
    }
LABEL_243:
    uint64_t v94 = v95 - 1;
  }
  while (v95);
  uint64_t v124 = (unint64_t)v11 >> 4;
  CFTypeID v125 = v180;
  do
  {
    if (v124 < 2) {
      goto LABEL_288;
    }
    CFIndex v126 = 0;
    uint64_t v175 = *v125;
    std::string v178 = v125[1];
    int v127 = v125;
    std::string *v125 = 0;
    v125[1] = 0;
    do
    {
      std::string::size_type v128 = (uint64_t)&v127[2 * v126 + 2];
      uint64_t v129 = 2 * v126;
      CFIndex v126 = (2 * v126) | 1;
      uint64_t v130 = v129 + 2;
      if (v129 + 2 >= v124) {
        goto LABEL_255;
      }
      CFDictionaryRef v131 = *(_OWORD *)v128;
      CFStringRef v132 = *(std::__shared_weak_count **)(v128 + 8);
      if (v132) {
        atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)(v128 + 16);
      CFStringRef v133 = *(std::__shared_weak_count **)(v128 + 24);
      uint64_t v183 = v133;
      if (v133)
      {
        atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
        CFTypeID v134 = lessThan((void *)v131, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v133);
        if (!v132) {
          goto LABEL_253;
        }
LABEL_252:
        std::__shared_weak_count::__release_shared[abi:ne180100](v132);
        goto LABEL_253;
      }
      CFTypeID v134 = lessThan((void *)v131, &v182);
      if (v132) {
        goto LABEL_252;
      }
LABEL_253:
      if (v134)
      {
        v128 += 16;
        CFIndex v126 = v130;
      }
LABEL_255:
      CFStringRef v135 = *(_OWORD *)v128;
      *(void *)std::string::size_type v128 = 0;
      *(void *)(v128 + 8) = 0;
      v136 = (std::__shared_weak_count *)v127[1];
      *(_OWORD *)int v127 = v135;
      if (v136) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v136);
      }
      int v127 = (void *)v128;
    }
    while (v126 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
    if (v128 == a2 - 16)
    {
      CFTypeID v155 = *(std::__shared_weak_count **)(v128 + 8);
      *(void *)std::string::size_type v128 = v175;
      *(void *)(v128 + 8) = v178;
      CFTypeID v125 = v180;
      if (!v155) {
        goto LABEL_288;
      }
      goto LABEL_287;
    }
    uint64_t v137 = *(_OWORD *)(a2 - 16);
    *(void *)(a2 - 16) = 0;
    *(void *)(a2 - 8) = 0;
    uint64_t v138 = *(std::__shared_weak_count **)(v128 + 8);
    *(_OWORD *)std::string::size_type v128 = v137;
    if (v138) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v138);
    }
    v139 = *(std::__shared_weak_count **)(a2 - 8);
    *(void *)(a2 - 16) = v175;
    *(void *)(a2 - 8) = v178;
    if (v139) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
    }
    CFTypeID v125 = v180;
    uint64_t v140 = v128 + 16 - (void)v180;
    if (v140 >= 17)
    {
      CFStringRef v141 = (unint64_t)((v140 >> 4) - 2) >> 1;
      CFStringRef v142 = &v180[2 * v141];
      CFTypeID v143 = *(_OWORD *)v142;
      uint64_t v144 = (std::__shared_weak_count *)v142[1];
      if (v144) {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v182 = *(void **)v128;
      std::__split_buffer<std::string>::pointer v145 = *(std::__shared_weak_count **)(v128 + 8);
      uint64_t v183 = v145;
      if (v145)
      {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
        CFPropertyListRef v146 = lessThan((void *)v143, &v182);
        std::__shared_weak_count::__release_shared[abi:ne180100](v145);
        if (v144) {
          goto LABEL_271;
        }
      }
      else
      {
        CFPropertyListRef v146 = lessThan((void *)v143, &v182);
        if (v144) {
LABEL_271:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v144);
      }
      if (!v146) {
        goto LABEL_288;
      }
      uint64_t v148 = *(void **)v128;
      long long v147 = *(std::__shared_weak_count **)(v128 + 8);
      *(void *)std::string::size_type v128 = 0;
      *(void *)(v128 + 8) = 0;
      while (2)
      {
        uint64_t v149 = v142;
        uint64_t v150 = *(_OWORD *)v142;
        std::string *v142 = 0;
        v142[1] = 0;
        unint64_t v151 = *(std::__shared_weak_count **)(v128 + 8);
        *(_OWORD *)std::string::size_type v128 = v150;
        if (v151) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v151);
        }
        if (!v141)
        {
LABEL_290:
          CFTypeID v155 = (std::__shared_weak_count *)v149[1];
          *uint64_t v149 = v148;
          v149[1] = v147;
          if (!v155) {
            break;
          }
LABEL_287:
          std::__shared_weak_count::__release_shared[abi:ne180100](v155);
          break;
        }
        CFStringRef v141 = (v141 - 1) >> 1;
        CFStringRef v142 = &v180[2 * v141];
        CFDictionaryRef v152 = *(_OWORD *)v142;
        CFStringRef v153 = (std::__shared_weak_count *)v142[1];
        if (v153) {
          atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v182 = v148;
        uint64_t v183 = v147;
        if (v147)
        {
          atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
          CFStringRef v154 = lessThan((void *)v152, &v182);
          std::__shared_weak_count::__release_shared[abi:ne180100](v147);
          if (v153) {
            goto LABEL_281;
          }
        }
        else
        {
          CFStringRef v154 = lessThan((void *)v152, &v182);
          if (v153) {
LABEL_281:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v153);
        }
        std::string::size_type v128 = (uint64_t)v149;
        if (!v154) {
          goto LABEL_290;
        }
        continue;
      }
    }
LABEL_288:
    a2 -= 16;
  }
  while ((unint64_t)v124-- > 2);
}

  uint64_t v11 = a1;
  CFStringRef v135 = a1 + 12;
  v136 = a1 + 6;
  location = (id *)(a1 + 3);
  from = (id *)(a1 + 2);
  CFTypeID v134 = a1 - 6;
  while (1)
  {
    uint64_t v12 = (char *)a2 - (char *)v11;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 4);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0:
        case 1:
          return;
        case 2:
          if ((*a3)(a2 - 6, v11)) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(v11, a2 - 6);
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v11, v11 + 6, a2 - 6, a3);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v11, v11 + 6, v11 + 12, a2 - 6, a3);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v11, v11 + 6, v11 + 12, v11 + 18, a2 - 6, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1151) {
      break;
    }
    if (!a4)
    {
      if (v11 != a2)
      {
        uint64_t v138 = a2;
        to = (id *)((unint64_t)(v13 - 2) >> 1);
        CFNumberRef v69 = to;
        do
        {
          unsigned int v70 = v69;
          if ((uint64_t)to >= (uint64_t)v69)
          {
            long long v71 = (2 * (void)v69) | 1;
            uint64_t v72 = &v11[6 * v71];
            if (2 * (uint64_t)v69 + 2 < v13 && (*a3)(&v11[6 * v71], v72 + 6))
            {
              v72 += 6;
              long long v71 = 2 * (void)v70 + 2;
            }
            unint64_t v73 = &v11[6 * (void)v70];
            if (((*a3)(v72, v73) & 1) == 0)
            {
              long long v74 = *v73;
              uint64_t v150 = *((_DWORD *)v73 + 2);
              uint64_t v149 = v74;
              froma = v70;
              uint64_t v75 = &v11[6 * (void)v70];
              objc_moveWeak(&v151, (id *)v75 + 2);
              uint64_t v76 = *(_OWORD *)(v75 + 3);
              CFStringRef v153 = *((_DWORD *)v75 + 10);
              CFDictionaryRef v152 = v76;
              do
              {
                unint64_t v77 = v72;
                uint64_t v78 = *v72;
                *((_DWORD *)v73 + 2) = *((_DWORD *)v72 + 2);
                *unint64_t v73 = v78;
                uint64_t v79 = (id *)(v72 + 2);
                id WeakRetained = objc_loadWeakRetained((id *)v72 + 2);
                objc_storeWeak((id *)v73 + 2, WeakRetained);

                uint64_t v81 = *(_OWORD *)(v77 + 3);
                *((_DWORD *)v73 + 10) = *((_DWORD *)v77 + 10);
                *(_OWORD *)(v73 + 3) = v81;
                if ((uint64_t)to < v71) {
                  break;
                }
                CFNumberRef v82 = (2 * v71) | 1;
                uint64_t v72 = &v11[6 * v82];
                long long v71 = 2 * v71 + 2;
                if (v71 < v13)
                {
                  if ((*a3)(&v11[6 * v82], v72 + 6)) {
                    v72 += 6;
                  }
                  else {
                    long long v71 = v82;
                  }
                }
                else
                {
                  long long v71 = v82;
                }
                unint64_t v73 = v77;
              }
              while (!(*a3)(v72, &v149));
              int v83 = v149;
              *((_DWORD *)v77 + 2) = v150;
              *unint64_t v77 = v83;
              uint64_t v84 = objc_loadWeakRetained(&v151);
              objc_storeWeak(v79, v84);

              uint64_t v85 = v152;
              *((_DWORD *)v77 + 10) = v153;
              *(_OWORD *)(v77 + 3) = v85;
              objc_destroyWeak(&v151);
              unsigned int v70 = froma;
            }
          }
          CFNumberRef v69 = (id *)((char *)v70 - 1);
        }
        while (v70);
        long long v86 = v12 / 0x30uLL;
        uint64_t v87 = v138;
        do
        {
          v139 = v87;
          if (v86 >= 2)
          {
            std::__split_buffer<std::string>::pointer v145 = *((_DWORD *)v11 + 2);
            uint64_t v144 = *v11;
            objc_moveWeak(&v146, (id *)v11 + 2);
            unint64_t v88 = 0;
            long long v89 = *(_OWORD *)(v11 + 3);
            uint64_t v148 = *((_DWORD *)v11 + 10);
            long long v147 = v89;
            __int16 v90 = (uint64_t)v11;
            do
            {
              unsigned int v91 = v90 + 48 * v88 + 48;
              uint64_t v92 = (2 * v88) | 1;
              unint64_t v93 = 2 * v88 + 2;
              if (v93 < v86 && (*a3)((uint64_t *)(v90 + 48 * v88 + 48), (uint64_t *)(v90 + 48 * v88 + 96)))
              {
                v91 += 48;
                uint64_t v92 = v93;
              }
              uint64_t v94 = *(void *)v91;
              *(_DWORD *)(v90 + 8) = *(_DWORD *)(v91 + 8);
              *(void *)__int16 v90 = v94;
              uint64_t v95 = (id *)(v91 + 16);
              uint64_t v96 = objc_loadWeakRetained((id *)(v91 + 16));
              objc_storeWeak((id *)(v90 + 16), v96);

              int v97 = *(_OWORD *)(v91 + 24);
              *(_DWORD *)(v90 + 40) = *(_DWORD *)(v91 + 40);
              *(_OWORD *)(v90 + 24) = v97;
              __int16 v90 = v91;
              unint64_t v88 = v92;
            }
            while (v92 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
            long long v98 = v91 + 24;
            unint64_t v99 = v139 - 6;
            if ((uint64_t *)v91 == v139 - 6)
            {
              *(_DWORD *)(v91 + 8) = v145;
              *(void *)unsigned int v91 = v144;
              uint64_t v118 = objc_loadWeakRetained(&v146);
              objc_storeWeak(v95, v118);

              std::string::size_type v119 = v147;
              *(_DWORD *)(v98 + 16) = v148;
              *(_OWORD *)long long v98 = v119;
            }
            else
            {
              uint64_t v100 = *v99;
              *(_DWORD *)(v91 + 8) = *((_DWORD *)v139 - 10);
              *(void *)unsigned int v91 = v100;
              CFTypeID v101 = objc_loadWeakRetained((id *)v139 - 4);
              objc_storeWeak((id *)(v91 + 16), v101);

              int v102 = *(_OWORD *)(v139 - 3);
              *(_DWORD *)(v91 + 40) = *((_DWORD *)v139 - 2);
              *(_OWORD *)long long v98 = v102;
              *unint64_t v99 = v144;
              *((_DWORD *)v139 - 10) = v145;
              uint64_t v103 = objc_loadWeakRetained(&v146);
              objc_storeWeak((id *)v139 - 4, v103);

              uint64_t v104 = v147;
              *((_DWORD *)v139 - 2) = v148;
              *(_OWORD *)(v139 - 3) = v104;
              CFArrayRef v105 = v91 - (void)v11 + 48;
              if (v105 >= 49)
              {
                long long v106 = (unint64_t)(-2 - 0x5555555555555555 * (v105 >> 4)) >> 1;
                unint64_t v107 = &v11[6 * v106];
                if ((*a3)(v107, (uint64_t *)v91))
                {
                  int v108 = *(void *)v91;
                  uint64_t v150 = *(_DWORD *)(v91 + 8);
                  uint64_t v149 = v108;
                  objc_moveWeak(&v151, (id *)(v91 + 16));
                  char v109 = *(_OWORD *)(v91 + 24);
                  CFStringRef v153 = *(_DWORD *)(v91 + 40);
                  CFDictionaryRef v152 = v109;
                  do
                  {
                    int64_t v110 = (uint64_t)v107;
                    uint64_t v111 = *v107;
                    *(_DWORD *)(v91 + 8) = *((_DWORD *)v107 + 2);
                    *(void *)unsigned int v91 = v111;
                    long long v112 = (id *)(v107 + 2);
                    uint64_t v113 = objc_loadWeakRetained((id *)v107 + 2);
                    objc_storeWeak((id *)(v91 + 16), v113);

                    uint64_t v114 = *(_OWORD *)(v110 + 24);
                    *(_DWORD *)(v91 + 40) = *(_DWORD *)(v110 + 40);
                    *(_OWORD *)(v91 + 24) = v114;
                    if (!v106) {
                      break;
                    }
                    long long v106 = (v106 - 1) >> 1;
                    unint64_t v107 = &v11[6 * v106];
                    unsigned int v91 = v110;
                  }
                  while (((*a3)(v107, &v149) & 1) != 0);
                  uint64_t v115 = v149;
                  *(_DWORD *)(v110 + 8) = v150;
                  *(void *)int64_t v110 = v115;
                  int v116 = objc_loadWeakRetained(&v151);
                  objc_storeWeak(v112, v116);

                  uint64_t v117 = v152;
                  *(_DWORD *)(v110 + 40) = v153;
                  *(_OWORD *)(v110 + 24) = v117;
                  objc_destroyWeak(&v151);
                }
              }
            }
            objc_destroyWeak(&v146);
          }
          uint64_t v87 = v139 - 6;
        }
        while ((unint64_t)v86-- > 2);
      }
      return;
    }
    uint64_t v14 = (unint64_t)v13 >> 1;
    long long v15 = &v11[6 * ((unint64_t)v13 >> 1)];
    uint64_t v16 = a2 - 6;
    if ((unint64_t)v12 < 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v15, v11, a2 - 6, a3);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v11, v15, a2 - 6, a3);
      uint64_t v17 = &v11[6 * v14];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v136, v17 - 6, a2 - 12, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v135, v17 + 6, a2 - 18, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v17 - 6, v15, v17 + 6, a3);
      uint64_t v18 = *v11;
      uint64_t v150 = *((_DWORD *)v11 + 2);
      uint64_t v149 = v18;
      objc_moveWeak(&v151, from);
      uint64_t v19 = *(_OWORD *)location;
      CFStringRef v153 = *((_DWORD *)location + 4);
      CFDictionaryRef v152 = v19;
      BOOL v20 = *((_DWORD *)v15 + 2);
      *uint64_t v11 = *v15;
      *((_DWORD *)v11 + 2) = v20;
      uint64_t v21 = objc_loadWeakRetained((id *)v17 + 2);
      objc_storeWeak(from, v21);

      uint64_t v22 = *(_OWORD *)(v17 + 3);
      *((_DWORD *)location + 4) = *((_DWORD *)v17 + 10);
      *(_OWORD *)location = v22;
      uint64_t v23 = v150;
      *long long v15 = v149;
      *((_DWORD *)v15 + 2) = v23;
      uint64_t v24 = objc_loadWeakRetained(&v151);
      uint64_t v16 = a2 - 6;
      objc_storeWeak((id *)v17 + 2, v24);

      uint64_t v25 = v152;
      *((_DWORD *)v17 + 10) = v153;
      *(_OWORD *)(v17 + 3) = v25;
      objc_destroyWeak(&v151);
    }
    --a4;
    if ((a5 & 1) == 0 && ((*a3)(v134, v11) & 1) == 0)
    {
      uint64_t v39 = *v11;
      uint64_t v150 = *((_DWORD *)v11 + 2);
      uint64_t v149 = v39;
      objc_moveWeak(&v151, (id *)v11 + 2);
      uint64_t v40 = *(_OWORD *)(v11 + 3);
      CFStringRef v153 = *((_DWORD *)v11 + 10);
      CFDictionaryRef v152 = v40;
      if ((*a3)(&v149, v16))
      {
        a1 = v11;
        do
          a1 += 6;
        while (((*a3)(&v149, a1) & 1) == 0);
      }
      else
      {
        uint64_t v41 = v11 + 6;
        do
        {
          a1 = v41;
          if (v41 >= a2) {
            break;
          }
          uint64_t v42 = (*a3)(&v149, v41);
          uint64_t v41 = a1 + 6;
        }
        while (!v42);
      }
      uint64_t v43 = a2;
      if (a1 < a2)
      {
        uint64_t v43 = a2;
        do
          v43 -= 6;
        while (((*a3)(&v149, v43) & 1) != 0);
      }
      while (a1 < v43)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, v43);
        do
          a1 += 6;
        while (!(*a3)(&v149, a1));
        do
          v43 -= 6;
        while (((*a3)(&v149, v43) & 1) != 0);
      }
      CFNumberRef v44 = a1 - 6;
      if (a1 - 6 != v11)
      {
        long long v45 = *v44;
        *((_DWORD *)v11 + 2) = *((_DWORD *)a1 - 10);
        *uint64_t v11 = v45;
        CFArrayRef v46 = objc_loadWeakRetained((id *)a1 - 4);
        objc_storeWeak((id *)v11 + 2, v46);

        uint64_t v47 = *(_OWORD *)(a1 - 3);
        *((_DWORD *)v11 + 10) = *((_DWORD *)a1 - 2);
        *(_OWORD *)(v11 + 3) = v47;
      }
      uint64_t v48 = v149;
      *((_DWORD *)a1 - 10) = v150;
      *CFNumberRef v44 = v48;
      uint64_t v49 = objc_loadWeakRetained(&v151);
      objc_storeWeak((id *)a1 - 4, v49);

      uint64_t v50 = v152;
      *((_DWORD *)a1 - 2) = v153;
      *(_OWORD *)(a1 - 3) = v50;
      objc_destroyWeak(&v151);
      a5 = 0;
      goto LABEL_1;
    }
    uint64_t v26 = *v11;
    uint64_t v150 = *((_DWORD *)v11 + 2);
    uint64_t v149 = v26;
    objc_moveWeak(&v151, from);
    uint64_t v27 = *(_OWORD *)location;
    CFStringRef v153 = *((_DWORD *)location + 4);
    CFDictionaryRef v152 = v27;
    uint64_t v28 = v11;
    do
      v28 += 6;
    while (((*a3)(v28, &v149) & 1) != 0);
    long long v29 = a2;
    if (v28 - 6 == v11)
    {
      long long v29 = a2;
      do
      {
        if (v28 >= v29) {
          break;
        }
        v29 -= 6;
      }
      while (((*a3)(v29, &v149) & 1) == 0);
    }
    else
    {
      do
        v29 -= 6;
      while (!(*a3)(v29, &v149));
    }
    a1 = v28;
    if (v28 < v29)
    {
      uint64_t v30 = v29;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, v30);
        do
          a1 += 6;
        while (((*a3)(a1, &v149) & 1) != 0);
        do
          v30 -= 6;
        while (!(*a3)(v30, &v149));
      }
      while (a1 < v30);
    }
    int v31 = a1 - 6;
    if (a1 - 6 != v11)
    {
      BOOL v32 = *v31;
      *((_DWORD *)v11 + 2) = *((_DWORD *)a1 - 10);
      *uint64_t v11 = v32;
      uint64_t v33 = objc_loadWeakRetained((id *)a1 - 4);
      objc_storeWeak(from, v33);

      uint64_t v34 = *(_OWORD *)(a1 - 3);
      *((_DWORD *)location + 4) = *((_DWORD *)a1 - 2);
      *(_OWORD *)location = v34;
    }
    CFTypeID v35 = v149;
    *((_DWORD *)a1 - 10) = v150;
    *int v31 = v35;
    int v36 = objc_loadWeakRetained(&v151);
    objc_storeWeak((id *)a1 - 4, v36);

    uint64_t v37 = v152;
    *((_DWORD *)a1 - 2) = v153;
    *(_OWORD *)(a1 - 3) = v37;
    objc_destroyWeak(&v151);
    if (v28 < v29) {
      goto LABEL_32;
    }
    long long v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(v11, a1 - 6, a3);
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a2, a3))
    {
      if (v38) {
        goto LABEL_1;
      }
LABEL_32:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>(v11, a1 - 6, a3, a4, a5 & 1);
      a5 = 0;
      goto LABEL_1;
    }
    a2 = a1 - 6;
    if (v38) {
      return;
    }
  }
  if (a5)
  {
    if (v11 != a2)
    {
      uint64_t v51 = a2;
      BOOL v52 = v11 + 6;
      if (v11 + 6 != a2)
      {
        uint64_t v53 = 0;
        CFNumberRef v54 = v11;
        do
        {
          uint64_t v55 = v52;
          if ((*a3)(v52, v54))
          {
            uint64_t v56 = *v55;
            uint64_t v150 = *((_DWORD *)v55 + 2);
            uint64_t v149 = v56;
            objc_moveWeak(&v151, (id *)v54 + 8);
            CFDictionaryRef v152 = *(_OWORD *)(v54 + 9);
            CFStringRef v153 = *((_DWORD *)v54 + 22);
            uint64_t v57 = v53;
            while (1)
            {
              uint64_t v58 = v57;
              long long v59 = (char *)v11 + v57;
              *((void *)v59 + 6) = *(uint64_t *)((char *)v11 + v57);
              *((_DWORD *)v59 + 14) = *(_DWORD *)((char *)v11 + v57 + 8);
              long long v60 = (id *)((char *)v11 + v57 + 16);
              int v61 = objc_loadWeakRetained(v60);
              objc_storeWeak((id *)v59 + 8, v61);

              *(_OWORD *)(v59 + 72) = *(_OWORD *)(v59 + 24);
              *((_DWORD *)v59 + 22) = *((_DWORD *)v59 + 10);
              if (!v58) {
                break;
              }
              int v62 = (*a3)(&v149, (uint64_t *)v59 - 6);
              uint64_t v57 = v58 - 48;
              if ((v62 & 1) == 0)
              {
                uint64_t v63 = (uint64_t *)((char *)v11 + v58);
                unint64_t v64 = (char *)v11 + v58;
                int64_t v65 = (uint64_t)v11 + v58 + 24;
                long long v60 = (id *)(v64 + 16);
                goto LABEL_67;
              }
            }
            int64_t v65 = (uint64_t)(v59 + 24);
            uint64_t v63 = v11;
LABEL_67:
            int64_t v66 = v149;
            *((_DWORD *)v63 + 2) = v150;
            *uint64_t v63 = v66;
            int64_t v67 = objc_loadWeakRetained(&v151);
            objc_storeWeak(v60, v67);

            uint64_t v68 = v152;
            *(_DWORD *)(v65 + 16) = v153;
            *(_OWORD *)int64_t v65 = v68;
            objc_destroyWeak(&v151);
          }
          BOOL v52 = v55 + 6;
          v53 += 48;
          CFNumberRef v54 = v55;
        }
        while (v55 + 6 != v51);
      }
    }
  }
  else if (v11 != a2)
  {
    char v121 = v11 + 6;
    if (v11 + 6 != a2)
    {
      uint64_t v122 = v11 + 9;
      do
      {
        std::string::size_type v123 = v121;
        if ((*a3)(v121, v11))
        {
          uint64_t v124 = *v123;
          uint64_t v150 = *((_DWORD *)v123 + 2);
          uint64_t v149 = v124;
          objc_moveWeak(&v151, (id *)v11 + 8);
          CFDictionaryRef v152 = *(_OWORD *)(v11 + 9);
          CFStringRef v153 = *((_DWORD *)v11 + 22);
          CFTypeID v125 = v122;
          do
          {
            CFIndex v126 = v125;
            *(v125 - 3) = *(v125 - 9);
            *((_DWORD *)v125 - 4) = *((_DWORD *)v125 - 16);
            int v127 = (id *)(v125 - 7);
            std::string::size_type v128 = objc_loadWeakRetained((id *)v125 - 7);
            objc_storeWeak((id *)v125 - 1, v128);

            *(_OWORD *)CFTypeID v125 = *((_OWORD *)v125 - 3);
            *((_DWORD *)v125 + 4) = *((_DWORD *)v125 - 8);
            uint64_t v129 = (*a3)(&v149, v125 - 15);
            v125 -= 6;
          }
          while ((v129 & 1) != 0);
          uint64_t v130 = v126 - 9;
          CFDictionaryRef v131 = v149;
          *((_DWORD *)v130 + 2) = v150;
          *uint64_t v130 = v131;
          CFStringRef v132 = objc_loadWeakRetained(&v151);
          objc_storeWeak(v127, v132);

          CFStringRef v133 = v152;
          *((_DWORD *)v126 - 8) = v153;
          *(_OWORD *)CFTypeID v125 = v133;
          objc_destroyWeak(&v151);
        }
        char v121 = v123 + 6;
        v122 += 6;
        uint64_t v11 = v123;
      }
      while (v123 + 6 != a2);
    }
  }
}

  uint64_t v9 = a2;
  uint64_t v111 = a2 - 2;
  uint64_t v10 = a1;
  while (1)
  {
    a1 = v10;
    uint64_t v11 = (char *)v9 - (char *)v10;
    uint64_t v12 = v11 >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          if ((APComponent::Key::sortCompare((_DWORD *)(*v111 + 36), (_DWORD *)(*a1 + 36), 0) & 0x80000000) != 0)
          {
            uint64_t v48 = *a1;
            *a1 = *(a2 - 2);
            *(a2 - 2) = v48;
            uint64_t v49 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v49;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, v111);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4, v111);
          break;
        case 5:
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, v111);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (a1 == v9) {
        return;
      }
      int64_t v65 = (unint64_t)(v12 - 2) >> 1;
      int64_t v66 = v65;
      do
      {
        int64_t v67 = v66;
        if (v65 >= v66)
        {
          uint64_t v68 = (2 * v66) | 1;
          CFNumberRef v69 = &a1[2 * v68];
          if (2 * v66 + 2 < v12
            && (int)APComponent::Key::sortCompare((_DWORD *)(*v69 + 36), (_DWORD *)(v69[2] + 36), 0) < 0)
          {
            v69 += 2;
            uint64_t v68 = 2 * v67 + 2;
          }
          unsigned int v70 = &a1[2 * v67];
          if ((APComponent::Key::sortCompare((_DWORD *)(*v69 + 36), (_DWORD *)(*v70 + 36), 0) & 0x80000000) == 0)
          {
            int64_t v110 = v67;
            long long v71 = *(_OWORD *)v70;
            uint64_t *v70 = 0;
            v70[1] = 0;
            long long v112 = v71;
            uint64_t v72 = (_DWORD *)(v71 + 36);
            do
            {
              unint64_t v73 = v69;
              long long v74 = *(_OWORD *)v69;
              uint64_t *v69 = 0;
              v69[1] = 0;
              uint64_t v75 = (std::__shared_weak_count *)v70[1];
              *(_OWORD *)unsigned int v70 = v74;
              if (v75) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v75);
              }
              if (v65 < v68) {
                break;
              }
              uint64_t v76 = (2 * v68) | 1;
              CFNumberRef v69 = &a1[2 * v76];
              uint64_t v68 = 2 * v68 + 2;
              if (v68 < v12)
              {
                if ((int)APComponent::Key::sortCompare((_DWORD *)(*v69 + 36), (_DWORD *)(v69[2] + 36), 0) >= 0) {
                  uint64_t v68 = v76;
                }
                else {
                  v69 += 2;
                }
              }
              else
              {
                uint64_t v68 = v76;
              }
              unsigned int v70 = v73;
            }
            while ((APComponent::Key::sortCompare((_DWORD *)(*v69 + 36), v72, 0) & 0x80000000) == 0);
            unint64_t v77 = (std::__shared_weak_count *)v73[1];
            *(_OWORD *)unint64_t v73 = v112;
            int64_t v67 = v110;
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
          }
        }
        int64_t v66 = v67 - 1;
      }
      while (v67);
      uint64_t v78 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v79 = 0;
        __int16 v80 = a2;
        uint64_t v81 = *a1;
        uint64_t v113 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        CFNumberRef v82 = a1;
        do
        {
          int v83 = (char *)&v82[2 * v79 + 2];
          uint64_t v84 = 2 * v79;
          uint64_t v79 = (2 * v79) | 1;
          uint64_t v85 = v84 + 2;
          if (v84 + 2 < v78
            && (int)APComponent::Key::sortCompare((_DWORD *)(*(void *)v83 + 36), (_DWORD *)(*((void *)v83 + 2) + 36), 0) < 0)
          {
            v83 += 16;
            uint64_t v79 = v85;
          }
          long long v86 = *(_OWORD *)v83;
          *(void *)int v83 = 0;
          *((void *)v83 + 1) = 0;
          uint64_t v87 = (std::__shared_weak_count *)v82[1];
          *(_OWORD *)CFNumberRef v82 = v86;
          if (v87) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v87);
          }
          CFNumberRef v82 = (uint64_t *)v83;
        }
        while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
        unint64_t v88 = a2 - 2;
        a2 -= 2;
        if (v83 == (char *)(v80 - 2))
        {
          uint64_t v100 = (std::__shared_weak_count *)*((void *)v83 + 1);
          *(void *)int v83 = v81;
          *((void *)v83 + 1) = v113;
          if (!v100) {
            goto LABEL_133;
          }
        }
        else
        {
          long long v89 = *((_OWORD *)v80 - 1);
          char *v88 = 0;
          *(v80 - 1) = 0;
          __int16 v90 = (std::__shared_weak_count *)*((void *)v83 + 1);
          *(_OWORD *)int v83 = v89;
          if (v90) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v90);
          }
          unsigned int v91 = (std::__shared_weak_count *)*(v80 - 1);
          *(v80 - 2) = v81;
          *(v80 - 1) = v113;
          if (v91) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v91);
          }
          uint64_t v92 = v83 + 16 - (char *)a1;
          if (v92 < 17) {
            goto LABEL_133;
          }
          unint64_t v93 = (((unint64_t)v92 >> 4) - 2) >> 1;
          uint64_t v94 = &a1[2 * v93];
          if ((APComponent::Key::sortCompare((_DWORD *)(*v94 + 36), (_DWORD *)(*(void *)v83 + 36), 0) & 0x80000000) == 0) {
            goto LABEL_133;
          }
          uint64_t v95 = *(void *)v83;
          uint64_t v96 = *((void *)v83 + 1);
          *(void *)int v83 = 0;
          *((void *)v83 + 1) = 0;
          do
          {
            int v97 = v94;
            long long v98 = *(_OWORD *)v94;
            *uint64_t v94 = 0;
            v94[1] = 0;
            unint64_t v99 = (std::__shared_weak_count *)*((void *)v83 + 1);
            *(_OWORD *)int v83 = v98;
            if (v99) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v99);
            }
            if (!v93) {
              break;
            }
            unint64_t v93 = (v93 - 1) >> 1;
            uint64_t v94 = &a1[2 * v93];
            int v83 = (char *)v97;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(*v94 + 36), (_DWORD *)(v95 + 36), 0) & 0x80000000) != 0);
          uint64_t v100 = (std::__shared_weak_count *)v97[1];
          uint64_t *v97 = v95;
          v97[1] = v96;
          if (!v100)
          {
LABEL_133:
            if (v78-- <= 2) {
              return;
            }
            continue;
          }
        }
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v100);
      goto LABEL_133;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &a1[2 * ((unint64_t)v12 >> 1)];
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v14, a1, v111);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, v14, v111);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1 + 2, v14 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1 + 4, &a1[2 * v13 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v14 - 2, v14, &a1[2 * v13 + 2]);
      long long v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v14 = v15;
    }
    --a3;
    if ((a4 & 1) != 0
      || (APComponent::Key::sortCompare((_DWORD *)(*(a1 - 2) + 36), (_DWORD *)(*a1 + 36), 0) & 0x80000000) != 0)
    {
      uint64_t v17 = *a1;
      uint64_t v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v18 = a1;
      do
      {
        uint64_t v19 = v18[2];
        v18 += 2;
      }
      while ((APComponent::Key::sortCompare((_DWORD *)(v19 + 36), (_DWORD *)(v17 + 36), 0) & 0x80000000) != 0);
      BOOL v20 = v9;
      if (v18 - 2 == a1)
      {
        BOOL v20 = v9;
        do
        {
          if (v18 >= v20) {
            break;
          }
          uint64_t v22 = *(v20 - 2);
          v20 -= 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v22 + 36), (_DWORD *)(v17 + 36), 0) & 0x80000000) == 0);
      }
      else
      {
        do
        {
          uint64_t v21 = *(v20 - 2);
          v20 -= 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v21 + 36), (_DWORD *)(v17 + 36), 0) & 0x80000000) == 0);
      }
      uint64_t v10 = v18;
      if (v18 < v20)
      {
        uint64_t v23 = v20;
        do
        {
          uint64_t v24 = *v10;
          *uint64_t v10 = *v23;
          *uint64_t v23 = v24;
          uint64_t v25 = v10[1];
          v10[1] = v23[1];
          v23[1] = v25;
          do
          {
            uint64_t v26 = v10[2];
            v10 += 2;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(v26 + 36), (_DWORD *)(v17 + 36), 0) & 0x80000000) != 0);
          do
          {
            uint64_t v27 = *(v23 - 2);
            v23 -= 2;
          }
          while ((APComponent::Key::sortCompare((_DWORD *)(v27 + 36), (_DWORD *)(v17 + 36), 0) & 0x80000000) == 0);
        }
        while (v10 < v23);
      }
      uint64_t v28 = v10 - 2;
      if (v10 - 2 != a1)
      {
        long long v29 = *(_OWORD *)v28;
        *uint64_t v28 = 0;
        *(v10 - 1) = 0;
        uint64_t v30 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v29;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
      }
      int v31 = (std::__shared_weak_count *)*(v10 - 1);
      *(v10 - 2) = v17;
      *(v10 - 1) = v16;
      uint64_t v9 = a2;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (v18 < v20) {
        goto LABEL_33;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(v10, a2))
      {
        a2 = v10 - 2;
        if (v32) {
          return;
        }
        goto LABEL_1;
      }
      if (!v32)
      {
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v34 = *a1;
      uint64_t v33 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      if ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(*v111 + 36), 0) & 0x80000000) != 0)
      {
        uint64_t v10 = a1;
        do
        {
          uint64_t v37 = v10[2];
          v10 += 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(v37 + 36), 0) & 0x80000000) == 0);
      }
      else
      {
        CFTypeID v35 = a1 + 2;
        do
        {
          uint64_t v10 = v35;
          if (v35 >= v9) {
            break;
          }
          int v36 = APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(*v35 + 36), 0);
          CFTypeID v35 = v10 + 2;
        }
        while ((v36 & 0x80000000) == 0);
      }
      long long v38 = v9;
      if (v10 < v9)
      {
        long long v38 = v9;
        do
        {
          uint64_t v39 = *(v38 - 2);
          v38 -= 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(v39 + 36), 0) & 0x80000000) != 0);
      }
      while (v10 < v38)
      {
        uint64_t v40 = *v10;
        *uint64_t v10 = *v38;
        *long long v38 = v40;
        uint64_t v41 = v10[1];
        v10[1] = v38[1];
        v38[1] = v41;
        do
        {
          uint64_t v42 = v10[2];
          v10 += 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(v42 + 36), 0) & 0x80000000) == 0);
        do
        {
          uint64_t v43 = *(v38 - 2);
          v38 -= 2;
        }
        while ((APComponent::Key::sortCompare((_DWORD *)(v34 + 36), (_DWORD *)(v43 + 36), 0) & 0x80000000) != 0);
      }
      CFNumberRef v44 = v10 - 2;
      BOOL v4 = v10 - 2 >= a1;
      BOOL v5 = v10 - 2 == a1;
      if (v10 - 2 != a1)
      {
        long long v45 = *(_OWORD *)v44;
        *CFNumberRef v44 = 0;
        *(v10 - 1) = 0;
        CFArrayRef v46 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v45;
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
      }
      a4 = 0;
      uint64_t v47 = (std::__shared_weak_count *)*(v10 - 1);
      *(v10 - 2) = v34;
      *(v10 - 1) = v33;
      if (v47)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        a4 = 0;
      }
    }
  }
  uint64_t v50 = a1 + 2;
  BOOL v52 = a1 == v9 || v50 == v9;
  if (a4)
  {
    if (!v52)
    {
      uint64_t v53 = 0;
      CFNumberRef v54 = a1;
      do
      {
        uint64_t v55 = v54;
        CFNumberRef v54 = v50;
        if ((APComponent::Key::sortCompare((_DWORD *)(v55[2] + 36), (_DWORD *)(*v55 + 36), 0) & 0x80000000) != 0)
        {
          uint64_t v56 = *v54;
          uint64_t v57 = v55[3];
          *CFNumberRef v54 = 0;
          v54[1] = 0;
          uint64_t v58 = v53;
          while (1)
          {
            long long v59 = (char *)a1 + v58;
            long long v60 = *(_OWORD *)((char *)a1 + v58);
            *(void *)long long v59 = 0;
            *((void *)v59 + 1) = 0;
            int v61 = *(std::__shared_weak_count **)((char *)a1 + v58 + 24);
            *((_OWORD *)v59 + 1) = v60;
            if (v61) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v61);
            }
            if (!v58) {
              break;
            }
            int v62 = APComponent::Key::sortCompare((_DWORD *)(v56 + 36), (_DWORD *)(*(uint64_t *)((char *)a1 + v58 - 16) + 36), 0);
            v58 -= 16;
            if ((v62 & 0x80000000) == 0)
            {
              uint64_t v63 = (uint64_t *)((char *)a1 + v58 + 16);
              goto LABEL_85;
            }
          }
          uint64_t v63 = a1;
LABEL_85:
          unint64_t v64 = (std::__shared_weak_count *)v63[1];
          *uint64_t v63 = v56;
          v63[1] = v57;
          if (v64) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v64);
          }
        }
        uint64_t v50 = v54 + 2;
        v53 += 16;
      }
      while (v54 + 2 != a2);
    }
  }
  else if (!v52)
  {
    do
    {
      int v102 = a1;
      a1 = v50;
      if ((APComponent::Key::sortCompare((_DWORD *)(v102[2] + 36), (_DWORD *)(*v102 + 36), 0) & 0x80000000) != 0)
      {
        uint64_t v103 = *a1;
        uint64_t v104 = v102[3];
        *a1 = 0;
        a1[1] = 0;
        CFArrayRef v105 = a1;
        do
        {
          long long v106 = *((_OWORD *)v105 - 1);
          *(v105 - 2) = 0;
          *(v105 - 1) = 0;
          unint64_t v107 = (std::__shared_weak_count *)v105[1];
          *(_OWORD *)CFArrayRef v105 = v106;
          if (v107) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          }
          int v108 = APComponent::Key::sortCompare((_DWORD *)(v103 + 36), (_DWORD *)(*(v105 - 4) + 36), 0);
          v105 -= 2;
        }
        while (v108 < 0);
        char v109 = (std::__shared_weak_count *)v105[1];
        *CFArrayRef v105 = v103;
        v105[1] = v104;
        if (v109) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
        }
      }
      uint64_t v50 = a1 + 2;
    }
    while (a1 + 2 != a2);
  }
}

  uint64_t v9 = a1;
  int v102 = a1 + 4;
  to = a1 + 2;
  uint64_t v10 = a1 + 1;
  while (1)
  {
    uint64_t v11 = (char *)a2 - (char *)v9;
    uint64_t v12 = ((char *)a2 - (char *)v9) >> 4;
    if (!(!v5 & v4))
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          uint64_t v41 = (unint64_t)*(a2 - 2);
          uint64_t v40 = a2 - 2;
          if (v41 < (unint64_t)*v9) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(v9, v40);
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v9, v9 + 2, a2 - 2);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v9, v9 + 2, v9 + 4, a2 - 2);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v9 != a2)
      {
        uint64_t v103 = a2;
        uint64_t v55 = (unint64_t)(v12 - 2) >> 1;
        uint64_t v56 = v55;
        do
        {
          uint64_t v57 = v56;
          if (v55 >= v56)
          {
            uint64_t v58 = (2 * v56) | 1;
            long long v59 = &v9[2 * v58];
            if (2 * v56 + 2 < v12)
            {
              int v62 = *v59;
              long long v60 = v59[2];
              int v61 = *v59 >= v60;
              if (*v59 <= v60) {
                int v62 = v59[2];
              }
              if (*v59 < v60) {
                v59 += 2;
              }
              if (!v61) {
                uint64_t v58 = 2 * v57 + 2;
              }
            }
            else
            {
              int v62 = *v59;
            }
            uint64_t v63 = &v9[2 * v57];
            if (v62 >= *v63)
            {
              int v108 = *v63;
              objc_moveWeak(&v109, &v9[2 * v57 + 1]);
              unint64_t v64 = (unint64_t)*v59;
              while (1)
              {
                int64_t v65 = v59;
                *uint64_t v63 = (id)v64;
                int64_t v66 = v59 + 1;
                id WeakRetained = objc_loadWeakRetained(v59 + 1);
                objc_storeWeak(v63 + 1, WeakRetained);

                if (v55 < v58) {
                  break;
                }
                long long v59 = &v9[2 * ((2 * v58) | 1)];
                if (2 * v58 + 2 < v12)
                {
                  unint64_t v64 = (unint64_t)*v59;
                  uint64_t v68 = v59[2];
                  CFNumberRef v69 = *v59 >= v68;
                  if (*v59 <= v68) {
                    unint64_t v64 = (unint64_t)v59[2];
                  }
                  if (*v59 < v68) {
                    v59 += 2;
                  }
                  if (v69) {
                    uint64_t v58 = (2 * v58) | 1;
                  }
                  else {
                    uint64_t v58 = 2 * v58 + 2;
                  }
                }
                else
                {
                  unint64_t v64 = (unint64_t)*v59;
                  uint64_t v58 = (2 * v58) | 1;
                }
                unsigned int v70 = v108;
                uint64_t v63 = v65;
                if (v64 < (unint64_t)v108) {
                  goto LABEL_96;
                }
              }
              unsigned int v70 = v108;
LABEL_96:
              *int64_t v65 = v70;
              long long v71 = objc_loadWeakRetained(&v109);
              objc_storeWeak(v66, v71);

              objc_destroyWeak(&v109);
            }
          }
          uint64_t v56 = v57 - 1;
        }
        while (v57);
        uint64_t v72 = (unint64_t)v11 >> 4;
        unint64_t v73 = v103;
        do
        {
          if (v72 >= 2)
          {
            long long v106 = *v9;
            objc_moveWeak(&v107, v9 + 1);
            long long v74 = 0;
            uint64_t v75 = (uint64_t)v9;
            do
            {
              uint64_t v76 = v75 + 16 * v74 + 16;
              if (2 * v74 + 2 < v72)
              {
                uint64_t v79 = *(id *)v76;
                unint64_t v77 = *(void *)(v75 + 16 * v74 + 32);
                uint64_t v78 = *(void *)v76 >= v77;
                if (*(void *)v76 <= v77) {
                  uint64_t v79 = *(id *)(v75 + 16 * v74 + 32);
                }
                if (*(void *)v76 < v77) {
                  uint64_t v76 = v75 + 16 * v74 + 32;
                }
                if (v78) {
                  long long v74 = (2 * v74) | 1;
                }
                else {
                  long long v74 = 2 * v74 + 2;
                }
              }
              else
              {
                uint64_t v79 = *(id *)v76;
                long long v74 = (2 * v74) | 1;
              }
              *(void *)uint64_t v75 = v79;
              __int16 v80 = (id *)(v76 + 8);
              uint64_t v81 = objc_loadWeakRetained((id *)(v76 + 8));
              objc_storeWeak((id *)(v75 + 8), v81);

              uint64_t v75 = v76;
            }
            while (v74 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
            if ((id *)v76 == v73 - 2)
            {
              *(void *)uint64_t v76 = v106;
              uint64_t v92 = objc_loadWeakRetained(&v107);
              objc_storeWeak(v80, v92);
            }
            else
            {
              *(void *)uint64_t v76 = *(v73 - 2);
              CFNumberRef v82 = objc_loadWeakRetained(v73 - 1);
              objc_storeWeak((id *)(v76 + 8), v82);

              *(v73 - 2) = v106;
              int v83 = objc_loadWeakRetained(&v107);
              objc_storeWeak(v73 - 1, v83);

              uint64_t v84 = v76 - (void)v9 + 16;
              if (v84 >= 17)
              {
                uint64_t v85 = (unint64_t)((v84 >> 4) - 2) >> 1;
                long long v86 = &v9[2 * v85];
                if ((unint64_t)*v86 < *(void *)v76)
                {
                  int v108 = *(id *)v76;
                  objc_moveWeak(&v109, (id *)(v76 + 8));
                  uint64_t v87 = *v86;
                  do
                  {
                    unint64_t v88 = v86;
                    *(void *)uint64_t v76 = v87;
                    long long v89 = v86 + 1;
                    __int16 v90 = objc_loadWeakRetained(v86 + 1);
                    objc_storeWeak((id *)(v76 + 8), v90);

                    if (!v85) {
                      break;
                    }
                    uint64_t v85 = (v85 - 1) >> 1;
                    long long v86 = &v9[2 * v85];
                    uint64_t v87 = *v86;
                    uint64_t v76 = (uint64_t)v88;
                  }
                  while (*v86 < v108);
                  char *v88 = v108;
                  unsigned int v91 = objc_loadWeakRetained(&v109);
                  objc_storeWeak(v89, v91);

                  objc_destroyWeak(&v109);
                }
              }
            }
            objc_destroyWeak(&v107);
          }
          v73 -= 2;
        }
        while ((unint64_t)v72-- > 2);
      }
      return;
    }
    unint64_t v13 = &v9[2 * ((unint64_t)v12 >> 1)];
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v13, v9, a2 - 2);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v9, v13, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(to, v13 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v102, v13 + 2, a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v13 - 2, v13, v13 + 2);
      int v108 = *v9;
      objc_moveWeak(&v109, v10);
      *uint64_t v9 = *v13;
      uint64_t v14 = objc_loadWeakRetained(v13 + 1);
      objc_storeWeak(v10, v14);

      *unint64_t v13 = v108;
      long long v15 = objc_loadWeakRetained(&v109);
      objc_storeWeak(v13 + 1, v15);

      objc_destroyWeak(&v109);
    }
    --a3;
    if (a4)
    {
      uint64_t v16 = *v9;
    }
    else
    {
      uint64_t v16 = *v9;
      if (*(v9 - 2) >= *v9)
      {
        int v108 = *v9;
        uint64_t v30 = v9 + 1;
        objc_moveWeak(&v109, v9 + 1);
        int v31 = v108;
        if (v108 >= *(a2 - 2))
        {
          uint64_t v33 = v9 + 2;
          do
          {
            a1 = v33;
            if (v33 >= a2) {
              break;
            }
            v33 += 2;
          }
          while (v108 >= *a1);
        }
        else
        {
          a1 = v9;
          do
          {
            BOOL v32 = (unint64_t)a1[2];
            a1 += 2;
          }
          while ((unint64_t)v108 >= v32);
        }
        uint64_t v34 = a2;
        if (a1 < a2)
        {
          uint64_t v34 = a2;
          do
          {
            CFTypeID v35 = (unint64_t)*(v34 - 2);
            v34 -= 2;
          }
          while ((unint64_t)v108 < v35);
        }
        while (a1 < v34)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, v34);
          int v31 = v108;
          do
          {
            int v36 = (unint64_t)a1[2];
            a1 += 2;
          }
          while ((unint64_t)v108 >= v36);
          do
          {
            uint64_t v37 = (unint64_t)*(v34 - 2);
            v34 -= 2;
          }
          while ((unint64_t)v108 < v37);
        }
        if (a1 - 2 != v9)
        {
          *uint64_t v9 = *(a1 - 2);
          long long v38 = objc_loadWeakRetained(a1 - 1);
          objc_storeWeak(v30, v38);

          int v31 = v108;
        }
        *(a1 - 2) = v31;
        uint64_t v39 = objc_loadWeakRetained(&v109);
        objc_storeWeak(a1 - 1, v39);

        objc_destroyWeak(&v109);
        a4 = 0;
        goto LABEL_1;
      }
    }
    int v108 = v16;
    objc_moveWeak(&v109, v10);
    uint64_t v17 = v108;
    uint64_t v18 = v9;
    do
    {
      uint64_t v19 = v18;
      BOOL v20 = (unint64_t)v18[2];
      v18 += 2;
    }
    while (v20 < (unint64_t)v108);
    uint64_t v21 = a2;
    if (v19 == v9)
    {
      uint64_t v21 = a2;
      do
      {
        if (v18 >= v21) {
          break;
        }
        uint64_t v23 = (unint64_t)*(v21 - 2);
        v21 -= 2;
      }
      while (v23 >= (unint64_t)v108);
    }
    else
    {
      do
      {
        uint64_t v22 = (unint64_t)*(v21 - 2);
        v21 -= 2;
      }
      while (v22 >= (unint64_t)v108);
    }
    a1 = v18;
    if (v18 < v21)
    {
      uint64_t v24 = v21;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, v24);
        uint64_t v17 = v108;
        do
        {
          uint64_t v25 = (unint64_t)a1[2];
          a1 += 2;
        }
        while (v25 < (unint64_t)v108);
        do
        {
          uint64_t v26 = (unint64_t)*(v24 - 2);
          v24 -= 2;
        }
        while (v26 >= (unint64_t)v108);
      }
      while (a1 < v24);
    }
    if (a1 - 2 != v9)
    {
      *uint64_t v9 = *(a1 - 2);
      uint64_t v27 = objc_loadWeakRetained(a1 - 1);
      objc_storeWeak(v10, v27);

      uint64_t v17 = v108;
    }
    *(a1 - 2) = v17;
    uint64_t v28 = objc_loadWeakRetained(&v109);
    objc_storeWeak(a1 - 1, v28);

    objc_destroyWeak(&v109);
    if (v18 < v21) {
      goto LABEL_33;
    }
    long long v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(v9, a1 - 2);
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a2))
    {
      if (v29) {
        goto LABEL_1;
      }
LABEL_33:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *,false>(v9, a1 - 2, a3, a4 & 1);
      a4 = 0;
      goto LABEL_1;
    }
    a2 = a1 - 2;
    if (v29) {
      return;
    }
  }
  if (a4)
  {
    if (v9 != a2)
    {
      uint64_t v42 = a2;
      uint64_t v43 = v9 + 2;
      if (v9 + 2 != a2)
      {
        CFNumberRef v44 = 0;
        long long v45 = v9;
        do
        {
          CFArrayRef v46 = v43;
          if (v45[2] < *v45)
          {
            int v108 = v45[2];
            objc_moveWeak(&v109, v45 + 3);
            uint64_t v47 = *v45;
            uint64_t v48 = v44;
            while (1)
            {
              uint64_t v49 = v48;
              uint64_t v50 = (id *)((char *)v9 + v48);
              *(id *)((char *)v9 + v48 + 16) = v47;
              uint64_t v51 = (id *)((char *)v9 + v48 + 8);
              BOOL v52 = objc_loadWeakRetained(v51);
              objc_storeWeak(v50 + 3, v52);

              if (!v49) {
                break;
              }
              uint64_t v47 = *(v50 - 2);
              uint64_t v48 = v49 - 16;
              if (v108 >= v47)
              {
                uint64_t v53 = (id *)((char *)v9 + v49);
                uint64_t v51 = (id *)((char *)v9 + v49 + 8);
                goto LABEL_68;
              }
            }
            uint64_t v53 = v9;
LABEL_68:
            *uint64_t v53 = v108;
            CFNumberRef v54 = objc_loadWeakRetained(&v109);
            objc_storeWeak(v51, v54);

            objc_destroyWeak(&v109);
          }
          uint64_t v43 = v46 + 2;
          v44 += 16;
          long long v45 = v46;
        }
        while (v46 + 2 != v42);
      }
    }
  }
  else if (v9 != a2)
  {
    uint64_t v94 = v9 + 2;
    if (v9 + 2 != a2)
    {
      uint64_t v95 = v9 + 1;
      do
      {
        uint64_t v96 = v94;
        if (v9[2] < *v9)
        {
          int v108 = v9[2];
          objc_moveWeak(&v109, v9 + 3);
          int v97 = *v9;
          long long v98 = v95;
          do
          {
            unint64_t v99 = v98;
            v98[1] = v97;
            uint64_t v100 = objc_loadWeakRetained(v98);
            objc_storeWeak(v99 + 2, v100);

            int v97 = *(v99 - 3);
            long long v98 = v99 - 2;
          }
          while (v108 < v97);
          *(v99 - 1) = v108;
          CFTypeID v101 = objc_loadWeakRetained(&v109);
          objc_storeWeak(v99, v101);

          objc_destroyWeak(&v109);
        }
        uint64_t v94 = v96 + 2;
        v95 += 2;
        uint64_t v9 = v96;
      }
      while (v96 + 2 != a2);
    }
  }
}

  uint64_t v10 = (void *)(a2 - 40);
  char j = (char *)a1;
  while (1)
  {
    a1 = (unint64_t)j;
    uint64_t v12 = a2 - (void)j;
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - (void)j) >> 3);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(_OWORD *)(a2 - 40) < *(_OWORD *)j)
          {
            uint64_t v150 = *((void *)j + 4);
            CFTypeID v134 = *(_OWORD *)j;
            CFStringRef v142 = *((_OWORD *)j + 1);
            long long v59 = *(_OWORD *)v10;
            long long v60 = *(_OWORD *)(a2 - 24);
            *((void *)j + 4) = *(void *)(a2 - 8);
            *(_OWORD *)char j = v59;
            *((_OWORD *)j + 1) = v60;
            *(void *)(a2 - 8) = v150;
            *(_OWORD *)uint64_t v10 = v134;
            *(_OWORD *)(a2 - 24) = v142;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((long long *)j, (long long *)(j + 40), (long long *)(a2 - 40));
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((uint64_t)j, (uint64_t)(j + 40), (uint64_t)(j + 80), a2 - 40);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((uint64_t)j, (uint64_t)(j + 40), (uint64_t)(j + 80), (uint64_t)(j + 120), a2 - 40);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 959)
    {
      int v61 = j + 40;
      uint64_t v63 = j == (char *)a2 || v61 == (char *)a2;
      if (a4)
      {
        if (v63) {
          return;
        }
        unint64_t v64 = 0;
        int64_t v65 = j;
        while (2)
        {
          int64_t v66 = v65;
          int64_t v65 = v61;
          int64_t v67 = *((void *)v66 + 6);
          uint64_t v68 = *((void *)v66 + 1);
          if (v67 < v68)
          {
            CFNumberRef v69 = *(void *)v65;
            goto LABEL_110;
          }
          if (v67 <= v68)
          {
            CFNumberRef v69 = *(void *)v65;
            if (*(void *)v65 < *(void *)v66)
            {
LABEL_110:
              CFStringRef v135 = *(_OWORD *)(v66 + 56);
              CFTypeID v143 = *((void *)v66 + 9);
              unsigned int v70 = *((_OWORD *)v66 + 1);
              *(_OWORD *)int64_t v65 = *(_OWORD *)v66;
              *((_OWORD *)v65 + 1) = v70;
              *((void *)v65 + 4) = *((void *)v66 + 4);
              long long v71 = j;
              if (v66 != j)
              {
                uint64_t v72 = v64;
                while (1)
                {
                  unint64_t v73 = &j[v72];
                  long long v74 = (unint64_t *)&j[v72 - 40];
                  uint64_t v75 = *(void *)&j[v72 - 32];
                  if (v67 >= v75)
                  {
                    if (v67 > v75)
                    {
                      long long v71 = v66;
                      goto LABEL_119;
                    }
                    if (v69 >= *v74) {
                      break;
                    }
                  }
                  v66 -= 40;
                  uint64_t v76 = *(_OWORD *)&j[v72 - 24];
                  *(_OWORD *)unint64_t v73 = *(_OWORD *)v74;
                  *((_OWORD *)v73 + 1) = v76;
                  *((void *)v73 + 4) = *(void *)&j[v72 - 8];
                  v72 -= 40;
                  if (!v72)
                  {
                    long long v71 = j;
                    goto LABEL_119;
                  }
                }
                long long v71 = &j[v72];
              }
LABEL_119:
              *(void *)long long v71 = v69;
              *((void *)v71 + 1) = v67;
              *((_OWORD *)v71 + 1) = v135;
              *((void *)v71 + 4) = v143;
            }
          }
          int v61 = v65 + 40;
          v64 += 40;
          if (v65 + 40 == (char *)a2) {
            return;
          }
          continue;
        }
      }
      if (v63) {
        return;
      }
      while (2)
      {
        uint64_t v94 = a1;
        a1 = (unint64_t)v61;
        uint64_t v95 = *(void *)(v94 + 48);
        uint64_t v96 = *(void *)(v94 + 8);
        if (v95 < v96)
        {
          int v97 = *(void *)a1;
          goto LABEL_149;
        }
        if (v95 <= v96)
        {
          int v97 = *(void *)a1;
          if (*(void *)a1 < *(void *)v94)
          {
LABEL_149:
            uint64_t v137 = *(_OWORD *)(v94 + 56);
            std::__split_buffer<std::string>::pointer v145 = *(void *)(v94 + 72);
            do
            {
              long long v98 = v94;
              unint64_t v99 = *(_OWORD *)(v94 + 16);
              *(_OWORD *)(v94 + 40) = *(_OWORD *)v94;
              *(_OWORD *)(v94 + 56) = v99;
              *(void *)(v94 + 72) = *(void *)(v94 + 32);
              v94 -= 40;
            }
            while (__PAIR128__(v95, v97) < *(_OWORD *)(v98 - 40));
            *(void *)long long v98 = v97;
            *(void *)(v98 + 8) = v95;
            *(_OWORD *)(v98 + 16) = v137;
            *(void *)(v98 + 32) = v145;
          }
        }
        int v61 = (char *)(a1 + 40);
        if (a1 + 40 == a2) {
          return;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v14 = v13 >> 1;
    long long v15 = (long long *)&j[40 * (v13 >> 1)];
    if ((unint64_t)v12 >= 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((long long *)a1, (long long *)(a1 + 40 * (v13 >> 1)), (long long *)(a2 - 40));
      uint64_t v16 = 5 * v14;
      uint64_t v17 = (long long *)(a1 + 40 * v14 - 40);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((long long *)(a1 + 40), v17, (long long *)(a2 - 80));
      uint64_t v18 = (long long *)(a1 + 40 + 8 * v16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((long long *)(a1 + 80), v18, (long long *)(a2 - 120));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(v17, v15, v18);
      long long v147 = *(void *)(a1 + 32);
      CFDictionaryRef v131 = *(_OWORD *)a1;
      v139 = *(_OWORD *)(a1 + 16);
      uint64_t v19 = *v15;
      BOOL v20 = v15[1];
      *(void *)(a1 + 32) = *((void *)v15 + 4);
      *(_OWORD *)a1 = v19;
      *(_OWORD *)(a1 + 16) = v20;
      *((void *)v15 + 4) = v147;
      *long long v15 = v131;
      v15[1] = v139;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((long long *)(a1 + 40 * (v13 >> 1)), (long long *)a1, (long long *)(a2 - 40));
    }
    --a3;
    if (a4)
    {
      uint64_t v22 = *(void *)a1;
      uint64_t v21 = *(void *)(a1 + 8);
LABEL_12:
      CFTypeID v125 = *(_OWORD *)(a1 + 16);
      std::string::size_type v128 = *(void *)(a1 + 32);
      for (uint64_t i = (unint64_t *)(a1 + 40); *(_OWORD *)i < __PAIR128__(v21, v22); i += 5)
        ;
      if (i - 5 == (unint64_t *)a1)
      {
        uint64_t v26 = (unint64_t *)a2;
        if ((unint64_t)i < a2)
        {
          uint64_t v28 = *(void *)(a2 - 32);
          uint64_t v26 = (unint64_t *)(a2 - 40);
          if (v28 >= v21)
          {
            uint64_t v25 = (unint64_t *)(a2 - 72);
            uint64_t v26 = (unint64_t *)(a2 - 40);
            while (1)
            {
              uint64_t v40 = v25 + 4;
              if (v28 <= v21)
              {
                if (*v40 < v22 || i >= v40) {
                  goto LABEL_20;
                }
              }
              else if (i >= v40)
              {
                break;
              }
              v26 -= 5;
              uint64_t v42 = *v25;
              v25 -= 5;
              uint64_t v28 = v42;
              if (v42 < v21) {
                goto LABEL_20;
              }
            }
          }
        }
      }
      else
      {
        uint64_t v24 = *(void *)(a2 - 32);
        uint64_t v25 = (unint64_t *)(a2 - 72);
        uint64_t v26 = (unint64_t *)(a2 - 40);
        if (v24 >= v21)
        {
          do
          {
            if (v24 <= v21 && v25[4] < v22) {
              break;
            }
            uint64_t v27 = *v25;
            v25 -= 5;
            uint64_t v24 = v27;
          }
          while (v27 >= v21);
LABEL_20:
          uint64_t v26 = v25 + 4;
        }
      }
      char j = (char *)i;
      if (i < v26)
      {
        char j = (char *)i;
        long long v29 = (char *)v26;
        do
        {
          uint64_t v148 = *((void *)j + 4);
          CFStringRef v132 = *(_OWORD *)j;
          uint64_t v140 = *((_OWORD *)j + 1);
          uint64_t v30 = *(_OWORD *)v29;
          int v31 = *((_OWORD *)v29 + 1);
          *((void *)j + 4) = *((void *)v29 + 4);
          *(_OWORD *)char j = v30;
          *((_OWORD *)j + 1) = v31;
          *((void *)v29 + 4) = v148;
          *(_OWORD *)long long v29 = v132;
          *((_OWORD *)v29 + 1) = v140;
          BOOL v32 = j + 40;
          do
          {
            char j = v32;
            uint64_t v33 = *((void *)v32 + 1);
            v32 += 40;
          }
          while (__PAIR128__(v33, *(void *)j) < __PAIR128__(v21, v22));
          uint64_t v34 = *((void *)v29 - 4);
          if (v34 >= v21)
          {
            CFTypeID v35 = (unint64_t *)(v29 - 72);
            do
            {
              if (v34 <= v21 && v35[4] < v22) {
                break;
              }
              int v36 = *v35;
              v35 -= 5;
              uint64_t v34 = v36;
            }
            while (v36 >= v21);
            long long v29 = (char *)(v35 + 4);
          }
          else
          {
            v29 -= 40;
          }
        }
        while (j < v29);
      }
      if (j - 40 != (char *)a1)
      {
        uint64_t v37 = *(_OWORD *)(j - 40);
        long long v38 = *(_OWORD *)(j - 24);
        *(void *)(a1 + 32) = *((void *)j - 1);
        *(_OWORD *)a1 = v37;
        *(_OWORD *)(a1 + 16) = v38;
      }
      *((void *)j - 5) = v22;
      *((void *)j - 4) = v21;
      *((void *)j - 1) = v128;
      *(_OWORD *)(j - 24) = v125;
      if (i < v26) {
        goto LABEL_40;
      }
      uint64_t v39 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(a1, (uint64_t)(j - 40));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((uint64_t)j, a2))
      {
        a2 = (unint64_t)(j - 40);
        if (v39) {
          return;
        }
        goto LABEL_1;
      }
      if (!v39)
      {
LABEL_40:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *,false>(a1, j - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v22 = *(void *)a1;
      uint64_t v21 = *(void *)(a1 + 8);
      if (*(_OWORD *)(a1 - 40) < *(_OWORD *)a1) {
        goto LABEL_12;
      }
      CFIndex v126 = *(_OWORD *)(a1 + 16);
      uint64_t v129 = *(void *)(a1 + 32);
      uint64_t v43 = *(void *)(a2 - 32);
      if (__PAIR128__(v21, v22) < __PAIR128__(v43, *v10))
      {
        CFNumberRef v44 = *(void *)(a1 + 48);
        if (v21 >= v44)
        {
          long long v45 = (unint64_t *)(a1 + 88);
          do
          {
            if (v21 <= v44 && v22 < *(v45 - 6)) {
              break;
            }
            CFArrayRef v46 = *v45;
            v45 += 5;
            CFNumberRef v44 = v46;
          }
          while (v21 >= v46);
          char j = (char *)(v45 - 6);
        }
        else
        {
          char j = (char *)(a1 + 40);
        }
      }
      else
      {
        for (char j = (char *)(a1 + 40); (unint64_t)j < a2 && __PAIR128__(v21, v22) >= *(_OWORD *)j; j += 40)
          ;
      }
      uint64_t v47 = (char *)a2;
      if ((unint64_t)j < a2)
      {
        for (uint64_t k = (unint64_t *)(a2 - 72); v21 < v43 || v21 <= v43 && v22 < k[4]; k -= 5)
        {
          uint64_t v49 = *k;
          uint64_t v43 = v49;
        }
        uint64_t v47 = (char *)(k + 4);
      }
      while (j < v47)
      {
        uint64_t v149 = *((void *)j + 4);
        CFStringRef v133 = *(_OWORD *)j;
        CFStringRef v141 = *((_OWORD *)j + 1);
        uint64_t v50 = *(_OWORD *)v47;
        uint64_t v51 = *((_OWORD *)v47 + 1);
        *((void *)j + 4) = *((void *)v47 + 4);
        *(_OWORD *)char j = v50;
        *((_OWORD *)j + 1) = v51;
        *((void *)v47 + 4) = v149;
        *(_OWORD *)uint64_t v47 = v133;
        *((_OWORD *)v47 + 1) = v141;
        BOOL v52 = *((void *)j + 6);
        if (v21 >= v52)
        {
          uint64_t v53 = (unint64_t *)(j + 88);
          do
          {
            if (v21 <= v52 && v22 < *(v53 - 6)) {
              break;
            }
            CFNumberRef v54 = *v53;
            v53 += 5;
            BOOL v52 = v54;
          }
          while (v21 >= v54);
          char j = (char *)(v53 - 6);
        }
        else
        {
          j += 40;
        }
        uint64_t v55 = v47 - 40;
        do
        {
          uint64_t v47 = v55;
          uint64_t v56 = *((void *)v55 + 1);
          v55 -= 40;
        }
        while (__PAIR128__(v21, v22) < __PAIR128__(v56, *(void *)v47));
      }
      BOOL v4 = (unint64_t)(j - 40) >= a1;
      BOOL v5 = j - 40 == (char *)a1;
      if (j - 40 != (char *)a1)
      {
        uint64_t v57 = *(_OWORD *)(j - 40);
        uint64_t v58 = *(_OWORD *)(j - 24);
        *(void *)(a1 + 32) = *((void *)j - 1);
        *(_OWORD *)a1 = v57;
        *(_OWORD *)(a1 + 16) = v58;
      }
      a4 = 0;
      *((void *)j - 5) = v22;
      *((void *)j - 4) = v21;
      *((void *)j - 1) = v129;
      *(_OWORD *)(j - 24) = v126;
    }
  }
  if (j != (char *)a2)
  {
    unint64_t v77 = (v13 - 2) >> 1;
    uint64_t v78 = v77;
    do
    {
      uint64_t v79 = v78;
      if (v77 >= v78)
      {
        __int16 v80 = (2 * v78) | 1;
        uint64_t v81 = (unint64_t *)&j[40 * v80];
        if (2 * v79 + 2 < (uint64_t)v13 && *(_OWORD *)v81 < *(_OWORD *)(v81 + 5))
        {
          v81 += 5;
          __int16 v80 = 2 * v79 + 2;
        }
        CFNumberRef v82 = (unint64_t *)&j[40 * v79];
        int v83 = v81[1];
        uint64_t v84 = v82[1];
        uint64_t v85 = v83 > v84;
        if (v83 >= v84)
        {
          long long v86 = *v82;
          if (v85 || *v81 >= v86)
          {
            uint64_t v144 = v82[4];
            v136 = *((_OWORD *)v82 + 1);
            uint64_t v87 = *(_OWORD *)v81;
            unint64_t v88 = *((_OWORD *)v81 + 1);
            v82[4] = v81[4];
            *(_OWORD *)CFNumberRef v82 = v87;
            *((_OWORD *)v82 + 1) = v88;
            if (v77 >= v80)
            {
              while (1)
              {
                __int16 v90 = 2 * v80;
                __int16 v80 = (2 * v80) | 1;
                long long v89 = (unint64_t *)&j[40 * v80];
                unsigned int v91 = v90 + 2;
                if (v91 < (uint64_t)v13 && *(_OWORD *)v89 < *(_OWORD *)(v89 + 5))
                {
                  v89 += 5;
                  __int16 v80 = v91;
                }
                if (*(_OWORD *)v89 < __PAIR128__(v84, v86)) {
                  break;
                }
                uint64_t v92 = *(_OWORD *)v89;
                unint64_t v93 = *((_OWORD *)v89 + 1);
                v81[4] = v89[4];
                *(_OWORD *)uint64_t v81 = v92;
                *((_OWORD *)v81 + 1) = v93;
                uint64_t v81 = v89;
                if (v77 < v80) {
                  goto LABEL_133;
                }
              }
            }
            long long v89 = v81;
LABEL_133:
            *long long v89 = v86;
            v89[1] = v84;
            *((_OWORD *)v89 + 1) = v136;
            v89[4] = v144;
          }
        }
      }
      uint64_t v78 = v79 - 1;
    }
    while (v79);
    uint64_t v100 = v12 / 0x28uLL;
    while (2)
    {
      CFTypeID v101 = 0;
      unint64_t v151 = *((void *)j + 4);
      uint64_t v138 = *(_OWORD *)j;
      CFPropertyListRef v146 = *((_OWORD *)j + 1);
      int v102 = v100 - 2;
      if (v100 < 2) {
        int v102 = v100 - 1;
      }
      uint64_t v103 = v102 >> 1;
      uint64_t v104 = j;
      do
      {
        CFArrayRef v105 = v104;
        v104 += 40 * v101 + 40;
        long long v106 = 2 * v101;
        CFTypeID v101 = (2 * v101) | 1;
        unint64_t v107 = v106 + 2;
        if (v107 < v100 && *(_OWORD *)v104 < *(_OWORD *)(v104 + 40))
        {
          v104 += 40;
          CFTypeID v101 = v107;
        }
        int v108 = *(_OWORD *)v104;
        char v109 = *((_OWORD *)v104 + 1);
        *((void *)v105 + 4) = *((void *)v104 + 4);
        *(_OWORD *)CFArrayRef v105 = v108;
        *((_OWORD *)v105 + 1) = v109;
      }
      while (v101 <= v103);
      a2 -= 40;
      if (v104 == (char *)a2)
      {
        *((void *)v104 + 4) = v151;
        *(_OWORD *)uint64_t v104 = v138;
        *((_OWORD *)v104 + 1) = v146;
      }
      else
      {
        int64_t v110 = *(_OWORD *)a2;
        uint64_t v111 = *(_OWORD *)(a2 + 16);
        *((void *)v104 + 4) = *(void *)(a2 + 32);
        *(_OWORD *)uint64_t v104 = v110;
        *((_OWORD *)v104 + 1) = v111;
        *(void *)(a2 + 32) = v151;
        *(_OWORD *)a2 = v138;
        *(_OWORD *)(a2 + 16) = v146;
        long long v112 = v104 - j + 40;
        if (v112 >= 41)
        {
          uint64_t v113 = -2 - 0x3333333333333333 * (v112 >> 3);
          uint64_t v114 = v113 >> 1;
          uint64_t v115 = &j[40 * (v113 >> 1)];
          int v116 = *((void *)v115 + 1);
          uint64_t v117 = *((void *)v104 + 1);
          if (v116 < v117)
          {
            uint64_t v118 = *(void *)v104;
            goto LABEL_165;
          }
          if (v116 <= v117)
          {
            uint64_t v118 = *(void *)v104;
            if (*(void *)v115 < *(void *)v104)
            {
LABEL_165:
              uint64_t v130 = *((void *)v104 + 4);
              int v127 = *((_OWORD *)v104 + 1);
              std::string::size_type v119 = *(_OWORD *)v115;
              unint64_t v120 = *((_OWORD *)v115 + 1);
              *((void *)v104 + 4) = *((void *)v115 + 4);
              *(_OWORD *)uint64_t v104 = v119;
              *((_OWORD *)v104 + 1) = v120;
              if (v113 >= 2)
              {
                while (1)
                {
                  uint64_t v122 = v114 - 1;
                  uint64_t v114 = (v114 - 1) >> 1;
                  char v121 = (unint64_t *)&j[40 * v114];
                  if (*(_OWORD *)v121 >= __PAIR128__(v117, v118)) {
                    break;
                  }
                  std::string::size_type v123 = *(_OWORD *)v121;
                  uint64_t v124 = *((_OWORD *)v121 + 1);
                  *((void *)v115 + 4) = v121[4];
                  *(_OWORD *)uint64_t v115 = v123;
                  *((_OWORD *)v115 + 1) = v124;
                  uint64_t v115 = &j[40 * v114];
                  if (v122 <= 1) {
                    goto LABEL_169;
                  }
                }
              }
              char v121 = (unint64_t *)v115;
LABEL_169:
              *char v121 = v118;
              v121[1] = v117;
              *((_OWORD *)v121 + 1) = v127;
              v121[4] = v130;
            }
          }
        }
      }
      uint64_t v85 = v100-- <= 2;
      if (v85) {
        return;
      }
      continue;
    }
  }
}

  uint64_t v9 = i;
  uint64_t v158 = (uint64_t *)(i + 24);
  uint64_t v150 = i - 24;
  unint64_t v151 = (uint64_t *)(i + 48);
  CFStringRef v153 = i + 5;
  while (1)
  {
    uint64_t v10 = (uint64_t)a2 - v9;
    uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v9) >> 3);
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)(a2 - 3), v9))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>((uint64_t *)v9, a2 - 3);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v9, (uint64_t *)(v9 + 24), a2 - 3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v9, (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 48), a2 - 3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v9, (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 48), (uint64_t *)(v9 + 72), a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 575) {
      break;
    }
    if (!a3)
    {
      if ((uint64_t *)v9 == a2) {
        return;
      }
      __int16 v80 = (v11 - 2) >> 1;
      std::string v162 = v80;
LABEL_222:
      uint64_t v81 = v80;
      if (v162 < v80) {
        goto LABEL_251;
      }
      CFNumberRef v82 = (2 * v80) | 1;
      int v83 = v9 + 24 * v82;
      if (2 * v80 + 2 < (uint64_t)v11 && ParameterTreeBuilder::ClumpableParam::operator<(v9 + 24 * v82, v83 + 24))
      {
        v83 += 24;
        CFNumberRef v82 = 2 * v81 + 2;
      }
      uint64_t v84 = v9 + 24 * v81;
      if (ParameterTreeBuilder::ClumpableParam::operator<(v83, v84)) {
        goto LABEL_251;
      }
      unint64_t v156 = *(_DWORD *)v84;
      uint64_t v159 = *(unsigned __int8 *)(v84 + 4);
      unint64_t v177 = *(unsigned char *)(v84 + 7);
      unint64_t v171 = *(_WORD *)(v84 + 5);
      CFStringRef v154 = *(_DWORD *)(v84 + 8);
      uint64_t v85 = v9 + 24 * v81;
      CFDictionaryRef v152 = *(void *)(v85 + 16);
      *(void *)(v85 + 16) = 0;
      long long v86 = *(void *)v83;
      *(_DWORD *)(v84 + 8) = *(_DWORD *)(v83 + 8);
      *(void *)uint64_t v84 = v86;
      uint64_t v87 = *(void *)(v83 + 16);
      *(void *)(v83 + 16) = 0;
      unint64_t v88 = *(void **)(v85 + 16);
      *(void *)(v85 + 16) = v87;

      if (v162 < v82)
      {
        LOBYTE(v89) = v159;
        goto LABEL_250;
      }
      long long v89 = v159;
      while (1)
      {
        __int16 v90 = a2;
        unsigned int v91 = v83;
        uint64_t v92 = 2 * v82;
        CFNumberRef v82 = (2 * v82) | 1;
        int v83 = v9 + 24 * v82;
        unint64_t v93 = v92 + 2;
        if (v92 + 2 < (uint64_t)v11)
        {
          uint64_t v94 = ParameterTreeBuilder::ClumpableParam::operator<(v9 + 24 * v82, v83 + 24);
          if (v94) {
            v83 += 24;
          }
          long long v89 = v159;
          if (v94) {
            CFNumberRef v82 = v93;
          }
        }
        if (*(unsigned char *)(v83 + 4)) {
          uint64_t v95 = v89 == 0;
        }
        else {
          uint64_t v95 = 1;
        }
        a2 = v90;
        if (v95)
        {
          if (v89 && !*(unsigned char *)(v83 + 4))
          {
LABEL_249:
            int v83 = v91;
LABEL_250:
            *(_DWORD *)int v83 = v156;
            *(unsigned char *)(v83 + 4) = v89;
            *(_WORD *)(v83 + 5) = v171;
            *(unsigned char *)(v83 + 7) = v177;
            *(_DWORD *)(v83 + 8) = v154;
            unint64_t v99 = *(void **)(v83 + 16);
            *(void *)(v83 + 16) = v152;

LABEL_251:
            __int16 v80 = v81 - 1;
            if (!v81)
            {
              uint64_t v100 = v10 / 0x18uLL;
              while (1)
              {
                CFTypeID v101 = 0;
                int v102 = a2;
                uint64_t v180 = *(_DWORD *)(v9 + 8);
                unint64_t v172 = *(void *)v9;
                uint64_t v103 = *(void *)(v9 + 16);
                *(void *)(v9 + 16) = 0;
                uint64_t v104 = v100 - 2;
                uint64_t v163 = v103;
                if (v100 < 2) {
                  uint64_t v104 = v100 - 1;
                }
                CFArrayRef v105 = v104 >> 1;
                long long v106 = v9;
                do
                {
                  unint64_t v107 = v106 + 24 * v101 + 24;
                  int v108 = (2 * v101) | 1;
                  char v109 = 2 * v101 + 2;
                  if (v109 < v100
                    && ParameterTreeBuilder::ClumpableParam::operator<(v106 + 24 * v101 + 24, v106 + 24 * v101 + 48))
                  {
                    v107 += 24;
                    int v108 = v109;
                  }
                  int64_t v110 = *(void *)v107;
                  *(_DWORD *)(v106 + 8) = *(_DWORD *)(v107 + 8);
                  *(void *)long long v106 = v110;
                  uint64_t v111 = *(void *)(v107 + 16);
                  *(void *)(v107 + 16) = 0;
                  long long v112 = *(void **)(v106 + 16);
                  *(void *)(v106 + 16) = v111;

                  long long v106 = v107;
                  CFTypeID v101 = v108;
                }
                while (v108 <= v105);
                a2 = v102 - 3;
                if ((uint64_t *)v107 == v102 - 3)
                {
                  *(_DWORD *)(v107 + 8) = v180;
                  *(void *)unint64_t v107 = v172;
                  std::string::size_type v128 = *(void **)(v107 + 16);
                  *(void *)(v107 + 16) = v163;
                  goto LABEL_283;
                }
                uint64_t v113 = *a2;
                *(_DWORD *)(v107 + 8) = *((_DWORD *)v102 - 4);
                *(void *)unint64_t v107 = v113;
                uint64_t v114 = *(v102 - 1);
                *(v102 - 1) = 0;
                uint64_t v115 = *(void **)(v107 + 16);
                *(void *)(v107 + 16) = v114;

                *((_DWORD *)v102 - 4) = v180;
                *a2 = v172;
                int v116 = (void *)*(v102 - 1);
                *(v102 - 1) = v163;

                uint64_t v117 = v107 - v9 + 24;
                if (v117 >= 25)
                {
                  uint64_t v118 = -2 - 0x5555555555555555 * (v117 >> 3);
                  std::string::size_type v119 = v118 >> 1;
                  unint64_t v120 = v9 + 24 * (v118 >> 1);
                  if (ParameterTreeBuilder::ClumpableParam::operator<(v120, v107)) {
                    break;
                  }
                }
LABEL_284:
                if (v100-- <= 2) {
                  return;
                }
              }
              char v121 = *(_DWORD *)v107;
              uint64_t v122 = *(unsigned __int8 *)(v107 + 4);
              unint64_t v166 = *(unsigned char *)(v107 + 7);
              char v165 = *(_WORD *)(v107 + 5);
              uint64_t v157 = *(_DWORD *)(v107 + 8);
              unint64_t v164 = *(void *)(v107 + 16);
              *(void *)(v107 + 16) = 0;
              std::string::size_type v123 = *(void *)v120;
              *(_DWORD *)(v107 + 8) = *(_DWORD *)(v120 + 8);
              *(void *)unint64_t v107 = v123;
              uint64_t v124 = v9 + 24 * v119;
              CFTypeID v125 = *(void *)(v124 + 16);
              *(void *)(v124 + 16) = 0;
              CFIndex v126 = *(void **)(v107 + 16);
              *(void *)(v107 + 16) = v125;

              if (v118 < 2)
              {
                int v127 = v157;
                goto LABEL_282;
              }
              int v127 = v157;
              while (2)
              {
                uint64_t v129 = v120;
                uint64_t v130 = v119 - 1;
                std::string::size_type v119 = (v119 - 1) >> 1;
                unint64_t v120 = v9 + 24 * v119;
                if (*(unsigned char *)(v120 + 4)) {
                  CFDictionaryRef v131 = v122 == 0;
                }
                else {
                  CFDictionaryRef v131 = 1;
                }
                if (v131)
                {
                  if (!v122 || *(unsigned char *)(v120 + 4))
                  {
                    if ((v122 != 0) != (*(unsigned char *)(v120 + 4) != 0)) {
                      goto LABEL_281;
                    }
LABEL_278:
                    if (*(_DWORD *)(v9 + 24 * v119 + 8) >= v157)
                    {
LABEL_281:
                      unint64_t v120 = v129;
LABEL_282:
                      *(_DWORD *)unint64_t v120 = v121;
                      *(unsigned char *)(v120 + 4) = v122;
                      *(_WORD *)(v120 + 5) = v165;
                      *(unsigned char *)(v120 + 7) = v166;
                      *(_DWORD *)(v120 + 8) = v127;
                      std::string::size_type v128 = *(void **)(v120 + 16);
                      *(void *)(v120 + 16) = v164;
LABEL_283:

                      goto LABEL_284;
                    }
                  }
                }
                else if (*(_DWORD *)v120 >= v121)
                {
                  if (*(_DWORD *)v120 != v121) {
                    goto LABEL_281;
                  }
                  goto LABEL_278;
                }
                CFStringRef v132 = *(void *)v120;
                *(_DWORD *)(v129 + 8) = *(_DWORD *)(v120 + 8);
                *(void *)uint64_t v129 = v132;
                CFStringRef v133 = v9 + 24 * v119;
                CFTypeID v134 = *(void *)(v133 + 16);
                *(void *)(v133 + 16) = 0;
                CFStringRef v135 = *(void **)(v129 + 16);
                *(void *)(v129 + 16) = v134;

                if (v130 <= 1) {
                  goto LABEL_282;
                }
                continue;
              }
            }
            goto LABEL_222;
          }
          if ((v89 != 0) == (*(unsigned char *)(v83 + 4) != 0))
          {
LABEL_246:
            if (*(_DWORD *)(v83 + 8) < v154) {
              goto LABEL_249;
            }
          }
        }
        else
        {
          if (*(_DWORD *)v83 < v156) {
            goto LABEL_249;
          }
          if (*(_DWORD *)v83 == v156) {
            goto LABEL_246;
          }
        }
        uint64_t v96 = *(void *)v83;
        *(_DWORD *)(v91 + 8) = *(_DWORD *)(v83 + 8);
        *(void *)unsigned int v91 = v96;
        int v97 = *(void *)(v83 + 16);
        *(void *)(v83 + 16) = 0;
        long long v98 = *(void **)(v91 + 16);
        *(void *)(v91 + 16) = v97;

        if (v162 < v82) {
          goto LABEL_250;
        }
      }
    }
    uint64_t v12 = v9 + 24 * (v11 >> 1);
    if ((unint64_t)v10 < 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)(v9 + 24 * (v11 >> 1)), (uint64_t *)v9, a2 - 3);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v9, (uint64_t *)(v9 + 24 * (v11 >> 1)), a2 - 3);
      unint64_t v13 = (uint64_t *)(v9 + 24 * (v11 >> 1));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(v158, v13 - 3, a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(v151, v13 + 3, a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(v13 - 3, v13, v13 + 3);
      uint64_t v179 = *(_DWORD *)(v9 + 8);
      uint64_t v167 = *(void *)v9;
      uint64_t v14 = *(void *)(v9 + 16);
      *(void *)(v9 + 16) = 0;
      long long v15 = *(_DWORD *)(v12 + 8);
      *(void *)uint64_t v9 = *(void *)v12;
      *(_DWORD *)(v9 + 8) = v15;
      uint64_t v16 = v13[2];
      unsigned int v13[2] = 0;
      uint64_t v17 = *(void **)(v9 + 16);
      *(void *)(v9 + 16) = v16;

      *(_DWORD *)(v12 + 8) = v179;
      *(void *)uint64_t v12 = v167;
      uint64_t v18 = (void *)v13[2];
      unsigned int v13[2] = v14;
    }
    uint64_t v19 = a3 - 1;
    if ((a4 & 1) == 0 && !ParameterTreeBuilder::ClumpableParam::operator<(v150, v9))
    {
      long long v38 = *(_DWORD *)v9;
      uint64_t v39 = *(unsigned __int8 *)(v9 + 4);
      uint64_t v175 = *(unsigned char *)(v9 + 7);
      unint64_t v169 = *(_WORD *)(v9 + 5);
      uint64_t v40 = *(_DWORD *)(v9 + 8);
      uint64_t v41 = *(void *)(v9 + 16);
      *(void *)(v9 + 16) = 0;
      uint64_t v42 = *((unsigned __int8 *)a2 - 20);
      if (v39 && *((unsigned char *)a2 - 20))
      {
        uint64_t v43 = *((_DWORD *)a2 - 6);
        if (v38 < v43) {
          goto LABEL_104;
        }
        if (v38 != v43) {
          goto LABEL_117;
        }
        goto LABEL_103;
      }
      if (*((unsigned char *)a2 - 20) && !v39)
      {
LABEL_104:
        uint64_t i = v9 + 24;
        while (2)
        {
          if (v39 && *(unsigned char *)(i + 4))
          {
            if (v38 < *(_DWORD *)i) {
              goto LABEL_130;
            }
            if (v38 != *(_DWORD *)i)
            {
LABEL_116:
              i += 24;
              continue;
            }
          }
          else
          {
            if (*(unsigned char *)(i + 4)) {
              CFNumberRef v44 = v39 == 0;
            }
            else {
              CFNumberRef v44 = 0;
            }
            if (v44) {
              goto LABEL_130;
            }
            if ((v39 != 0) != (*(unsigned char *)(i + 4) != 0)) {
              goto LABEL_116;
            }
          }
          break;
        }
        if (v40 < *(_DWORD *)(i + 8)) {
          goto LABEL_130;
        }
        goto LABEL_116;
      }
      if ((v39 != 0) != (v42 != 0)) {
        goto LABEL_117;
      }
LABEL_103:
      if (v40 < *((_DWORD *)a2 - 4)) {
        goto LABEL_104;
      }
LABEL_117:
      for (uint64_t i = v9 + 24; i < (unint64_t)a2; i += 24)
      {
        if (v39 && *(unsigned char *)(i + 4))
        {
          if (v38 < *(_DWORD *)i) {
            break;
          }
          if (v38 == *(_DWORD *)i) {
            goto LABEL_128;
          }
        }
        else
        {
          if (*(unsigned char *)(i + 4)) {
            long long v45 = v39 == 0;
          }
          else {
            long long v45 = 0;
          }
          if (v45) {
            break;
          }
          if ((v39 != 0) == (*(unsigned char *)(i + 4) != 0))
          {
LABEL_128:
            if (v40 < *(_DWORD *)(i + 8)) {
              break;
            }
          }
        }
      }
LABEL_130:
      CFArrayRef v46 = v19;
      uint64_t v47 = a2;
      if (i >= (unint64_t)a2) {
        goto LABEL_148;
      }
      uint64_t v48 = a2 - 2;
      if (!v39) {
        goto LABEL_136;
      }
LABEL_132:
      if (v42)
      {
        uint64_t v49 = *((_DWORD *)v48 - 2);
        if (v38 >= v49)
        {
          if (v38 != v49) {
            goto LABEL_147;
          }
          goto LABEL_144;
        }
        goto LABEL_145;
      }
LABEL_136:
      while (1)
      {
        uint64_t v50 = v42 == 0;
        if (!v42 || v39 != 0)
        {
          BOOL v52 = !v50;
          if (((v39 != 0) ^ v52)) {
            break;
          }
LABEL_144:
          if (v40 >= *(_DWORD *)v48) {
            break;
          }
        }
LABEL_145:
        uint64_t v42 = *((unsigned __int8 *)v48 - 28);
        v48 -= 3;
        if (v39) {
          goto LABEL_132;
        }
      }
LABEL_147:
      uint64_t v47 = v48 - 1;
LABEL_148:
      if (i >= (unint64_t)v47) {
        goto LABEL_173;
      }
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>((uint64_t *)i, v47);
        while (1)
        {
          while (1)
          {
            i += 24;
            if (!v39 || !*(unsigned char *)(i + 4)) {
              break;
            }
            if (v38 < *(_DWORD *)i) {
              goto LABEL_161;
            }
            if (v38 == *(_DWORD *)i)
            {
LABEL_160:
              if (v40 < *(_DWORD *)(i + 8)) {
                goto LABEL_161;
              }
            }
          }
          if (*(unsigned char *)(i + 4) && v39 == 0) {
            break;
          }
          if ((v39 != 0) == (*(unsigned char *)(i + 4) != 0)) {
            goto LABEL_160;
          }
        }
        while (1)
        {
LABEL_161:
          while (1)
          {
            v47 -= 3;
            if (!v39 || !*((unsigned char *)v47 + 4)) {
              break;
            }
            if (v38 >= *(_DWORD *)v47)
            {
              if (v38 != *(_DWORD *)v47) {
                goto LABEL_172;
              }
              goto LABEL_171;
            }
          }
          if (*((unsigned char *)v47 + 4)) {
            CFNumberRef v54 = v39 == 0;
          }
          else {
            CFNumberRef v54 = 0;
          }
          if (!v54)
          {
            if ((v39 != 0) != (*((unsigned char *)v47 + 4) != 0)) {
              break;
            }
LABEL_171:
            if (v40 >= *((_DWORD *)v47 + 2)) {
              break;
            }
          }
        }
LABEL_172:
        ;
      }
      while (i < (unint64_t)v47);
LABEL_173:
      if (i - 24 != v9)
      {
        uint64_t v55 = *(void *)(i - 24);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(i - 16);
        *(void *)uint64_t v9 = v55;
        uint64_t v56 = *(void *)(i - 8);
        *(void *)(i - 8) = 0;
        uint64_t v57 = *(void **)(v9 + 16);
        *(void *)(v9 + 16) = v56;
      }
      *(_DWORD *)(i - 24) = v38;
      *(unsigned char *)(i - 20) = v39;
      *(_WORD *)(i - 19) = v169;
      *(unsigned char *)(i - 17) = v175;
      *(_DWORD *)(i - 16) = v40;
      uint64_t v58 = *(void **)(i - 8);
      *(void *)(i - 8) = v41;

      a4 = 0;
      a3 = v46;
      goto LABEL_1;
    }
    uint64_t v160 = v19;
    BOOL v20 = *(_DWORD *)v9;
    uint64_t v21 = *(unsigned __int8 *)(v9 + 4);
    unint64_t v168 = *(_WORD *)v153;
    BOOL v174 = *(unsigned char *)(v153 + 2);
    uint64_t v22 = *(_DWORD *)(v9 + 8);
    uint64_t v23 = *(void *)(v9 + 16);
    *(void *)(v9 + 16) = 0;
    for (char j = v158; !*((unsigned char *)j + 4) || v21 == 0; j += 3)
    {
      if (!v21 || *((unsigned char *)j + 4))
      {
        if ((v21 != 0) != (*((unsigned char *)j + 4) != 0)) {
          goto LABEL_25;
        }
        goto LABEL_23;
      }
LABEL_24:
      ;
    }
    if (*(_DWORD *)j < v20) {
      goto LABEL_24;
    }
    if (*(_DWORD *)j != v20) {
      goto LABEL_25;
    }
LABEL_23:
    if (*((_DWORD *)j + 2) < v22) {
      goto LABEL_24;
    }
LABEL_25:
    if (j - 3 != (uint64_t *)v9)
    {
      for (uint64_t k = a2 - 3; !*((unsigned char *)k + 4) || v21 == 0; k -= 3)
      {
        if (v21 && !*((unsigned char *)k + 4)) {
          goto LABEL_59;
        }
        if ((v21 != 0) == (*((unsigned char *)k + 4) != 0)) {
          goto LABEL_38;
        }
LABEL_39:
        ;
      }
      if (*(_DWORD *)k < v20) {
        goto LABEL_59;
      }
      if (*(_DWORD *)k != v20) {
        goto LABEL_39;
      }
LABEL_38:
      if (*((_DWORD *)k + 2) < v22) {
        goto LABEL_59;
      }
      goto LABEL_39;
    }
    uint64_t k = a2;
    if (j < a2)
    {
      for (uint64_t k = a2 - 3; ; k -= 3)
      {
        if (*((unsigned char *)k + 4)) {
          uint64_t v28 = v21 == 0;
        }
        else {
          uint64_t v28 = 1;
        }
        if (v28)
        {
          if (v21 && !*((unsigned char *)k + 4)) {
            break;
          }
          if ((v21 != 0) != (*((unsigned char *)k + 4) != 0))
          {
LABEL_50:
            if (j >= k) {
              break;
            }
            continue;
          }
        }
        else
        {
          if (*(_DWORD *)k < v20) {
            break;
          }
          if (*(_DWORD *)k != v20) {
            goto LABEL_50;
          }
        }
        if (*((_DWORD *)k + 2) < v22 || j >= k) {
          break;
        }
      }
    }
LABEL_59:
    uint64_t i = (unint64_t)j;
    if (j >= k) {
      goto LABEL_87;
    }
    uint64_t i = (unint64_t)j;
    uint64_t v30 = k;
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>((uint64_t *)i, v30);
      while (1)
      {
        do
        {
          while (1)
          {
            i += 24;
            if (!*(unsigned char *)(i + 4) || v21 == 0) {
              break;
            }
            if (*(_DWORD *)i >= v20)
            {
              if (*(_DWORD *)i != v20) {
                goto LABEL_74;
              }
              goto LABEL_73;
            }
          }
        }
        while (v21 && !*(unsigned char *)(i + 4));
        if ((v21 != 0) != (*(unsigned char *)(i + 4) != 0)) {
          break;
        }
LABEL_73:
        if (*(_DWORD *)(i + 8) >= v22) {
          goto LABEL_74;
        }
      }
      while (1)
      {
LABEL_74:
        while (1)
        {
          v30 -= 3;
          if (!*((unsigned char *)v30 + 4) || v21 == 0) {
            break;
          }
          if (*(_DWORD *)v30 < v20) {
            goto LABEL_86;
          }
          if (*(_DWORD *)v30 == v20) {
            goto LABEL_85;
          }
        }
        if (v21 && !*((unsigned char *)v30 + 4)) {
          break;
        }
        if ((v21 != 0) == (*((unsigned char *)v30 + 4) != 0))
        {
LABEL_85:
          if (*((_DWORD *)v30 + 2) < v22) {
            break;
          }
        }
      }
LABEL_86:
      ;
    }
    while (i < (unint64_t)v30);
LABEL_87:
    if (i - 24 != v9)
    {
      uint64_t v33 = *(void *)(i - 24);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(i - 16);
      *(void *)uint64_t v9 = v33;
      uint64_t v34 = *(void *)(i - 8);
      *(void *)(i - 8) = 0;
      CFTypeID v35 = *(void **)(v9 + 16);
      *(void *)(v9 + 16) = v34;
    }
    *(_DWORD *)(i - 24) = v20;
    *(unsigned char *)(i - 20) = v21;
    *(_WORD *)(i - 19) = v168;
    *(unsigned char *)(i - 17) = v174;
    *(_DWORD *)(i - 16) = v22;
    int v36 = *(void **)(i - 8);
    *(void *)(i - 8) = v23;

    a3 = v160;
    if (j < k) {
      goto LABEL_94;
    }
    uint64_t v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)v9, (uint64_t *)(i - 24));
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>((uint64_t *)i, a2))
    {
      if (!v37)
      {
LABEL_94:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *,false>(v9, i - 24, v160, a4 & 1);
        a4 = 0;
      }
      goto LABEL_1;
    }
    a2 = (uint64_t *)(i - 24);
    if (v37) {
      return;
    }
  }
  long long v59 = v9 + 24;
  int v61 = (uint64_t *)v9 == a2 || v59 == (void)a2;
  if ((a4 & 1) == 0)
  {
    if (v61) {
      return;
    }
    while (1)
    {
      uint64_t v137 = (unsigned int *)v59;
      if (ParameterTreeBuilder::ClumpableParam::operator<(v59, v9)) {
        break;
      }
LABEL_302:
      long long v59 = (uint64_t)(v137 + 6);
      uint64_t v9 = (uint64_t)v137;
      if (v137 + 6 == (unsigned int *)a2) {
        return;
      }
    }
    uint64_t v138 = *v137;
    v139 = *(unsigned __int8 *)(v9 + 28);
    uint64_t v140 = *(unsigned char *)(v9 + 28) == 0;
    uint64_t v173 = *(_WORD *)(v9 + 29);
    std::string v178 = *(unsigned char *)(v9 + 31);
    CFStringRef v141 = *(_DWORD *)(v9 + 32);
    CFStringRef v142 = *(void *)(v9 + 40);
    *(void *)(v9 + 40) = 0;
    while (1)
    {
      while (1)
      {
        CFTypeID v143 = v9;
        uint64_t v144 = *(void *)v9;
        *(_DWORD *)(v9 + 32) = *(_DWORD *)(v9 + 8);
        std::__split_buffer<std::string>::pointer v145 = *(void *)(v9 + 16);
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + 24) = v144;
        CFPropertyListRef v146 = *(void **)(v9 + 40);
        *(void *)(v9 + 40) = v145;

        v9 -= 24;
        if (!v139 || !*(unsigned char *)(v143 - 20)) {
          break;
        }
        long long v147 = *(_DWORD *)(v143 - 24);
        if (v138 >= v147)
        {
          if (v138 != v147) {
            goto LABEL_301;
          }
LABEL_300:
          if (v141 >= *(_DWORD *)(v143 - 16))
          {
LABEL_301:
            *(_DWORD *)CFTypeID v143 = v138;
            *(unsigned char *)(v143 + 4) = v139;
            *(_WORD *)(v143 + 5) = v173;
            *(unsigned char *)(v143 + 7) = v178;
            *(_DWORD *)(v143 + 8) = v141;
            uint64_t v149 = *(void **)(v143 + 16);
            *(void *)(v143 + 16) = v142;

            goto LABEL_302;
          }
        }
      }
      if (*(unsigned char *)(v143 - 20)) {
        uint64_t v148 = v140;
      }
      else {
        uint64_t v148 = 0;
      }
      if (!v148)
      {
        if ((v139 != 0) != (*(unsigned char *)(v143 - 20) != 0)) {
          goto LABEL_301;
        }
        goto LABEL_300;
      }
    }
  }
  if (v61) {
    return;
  }
  int v62 = 0;
  uint64_t v63 = v9;
  while (2)
  {
    unint64_t v64 = v59;
    if (!ParameterTreeBuilder::ClumpableParam::operator<(v59, v63)) {
      goto LABEL_218;
    }
    int64_t v65 = *(_DWORD *)(v63 + 24);
    int64_t v66 = *(unsigned __int8 *)(v63 + 28);
    uint64_t v170 = *(_WORD *)(v63 + 29);
    long long v176 = *(unsigned char *)(v63 + 31);
    int64_t v67 = *(_DWORD *)(v63 + 32);
    uint64_t v68 = *(void *)(v63 + 40);
    *(void *)(v63 + 40) = 0;
    *(_DWORD *)(v64 + 8) = *(_DWORD *)(v63 + 8);
    *(void *)unint64_t v64 = *(void *)v63;
    CFNumberRef v69 = *(void *)(v63 + 16);
    *(void *)(v63 + 16) = 0;
    unsigned int v70 = *(void **)(v64 + 16);
    *(void *)(v64 + 16) = v69;

    long long v71 = v9;
    if (v63 == v9) {
      goto LABEL_217;
    }
    CFIndex v161 = v68;
    uint64_t v72 = v62;
    while (2)
    {
      unint64_t v73 = v9 + v72;
      long long v74 = (unsigned int *)(v9 + v72 - 24);
      if (v66 && *(unsigned char *)(v9 + v72 - 20))
      {
        if (v65 >= *v74)
        {
          if (v65 != *v74) {
            goto LABEL_215;
          }
LABEL_212:
          long long v71 = v9 + v72;
          if (v67 >= *(_DWORD *)(v9 + v72 - 16)) {
            goto LABEL_216;
          }
        }
LABEL_213:
        v63 -= 24;
        *(void *)unint64_t v73 = *(void *)v74;
        *(_DWORD *)(v73 + 8) = *(_DWORD *)(v9 + v72 - 16);
        uint64_t v76 = v9 + v72;
        unint64_t v77 = *(void *)(v9 + v72 - 8);
        *(void *)(v76 - 8) = 0;
        uint64_t v78 = *(void **)(v9 + v72 + 16);
        *(void *)(v76 + 16) = v77;

        v72 -= 24;
        if (!v72)
        {
          long long v71 = v9;
          goto LABEL_216;
        }
        continue;
      }
      break;
    }
    if (*(unsigned char *)(v9 + v72 - 20)) {
      uint64_t v75 = v66 == 0;
    }
    else {
      uint64_t v75 = 0;
    }
    if (v75) {
      goto LABEL_213;
    }
    if ((v66 != 0) == (*(unsigned char *)(v9 + v72 - 20) != 0)) {
      goto LABEL_212;
    }
LABEL_215:
    long long v71 = v63;
LABEL_216:
    uint64_t v68 = v161;
LABEL_217:
    *(_DWORD *)long long v71 = v65;
    *(unsigned char *)(v71 + 4) = v66;
    *(_WORD *)(v71 + 5) = v170;
    *(unsigned char *)(v71 + 7) = v176;
    *(_DWORD *)(v71 + 8) = v67;
    uint64_t v79 = *(void **)(v71 + 16);
    *(void *)(v71 + 16) = v68;

LABEL_218:
    long long v59 = v64 + 24;
    v62 += 24;
    uint64_t v63 = v64;
    if ((uint64_t *)(v64 + 24) != a2) {
      continue;
    }
    break;
  }
}

void sub_18FF0F170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void AudioComponentMgr_Base::addAndRemoveComponents(char **this, const AudioComponentVector *a2, const AudioComponentVector *a3, const AudioComponentVector *a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = a3;
    do
    {
      SortedPosition = AudioComponentVector::findSortedPosition(this[2], this[3], (long long *)((char *)v7->__begin_ + 36));
      uint64_t v9 = this[3];
      if (v9 != SortedPosition)
      {
        uint64_t v10 = SortedPosition;
        uint64_t v11 = *(_DWORD **)SortedPosition;
        std::vector<int>::pointer begin = v7->__begin_;
        if (*(_DWORD *)(*(void *)SortedPosition + 36) == *((_DWORD *)v7->__begin_ + 9)
          && v11[10] == begin[10]
          && v11[11] == begin[11]
          && v11[14] == begin[14])
        {
          unint64_t v13 = (std::__shared_weak_count *)*((void *)SortedPosition + 1);
          if (v13)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v9 = this[3];
          }
          uint64_t v14 = SortedPosition + 16;
          if (SortedPosition + 16 != v9)
          {
            do
            {
              uint64_t v10 = v14;
              long long v15 = *(_OWORD *)v14;
              *(void *)uint64_t v14 = 0;
              *((void *)v14 + 1) = 0;
              uint64_t v16 = (std::__shared_weak_count *)*((void *)v14 - 1);
              *((_OWORD *)v14 - 1) = v15;
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              uint64_t v14 = v10 + 16;
            }
            while (v10 + 16 != v9);
            uint64_t v9 = this[3];
          }
          while (v9 != v10)
          {
            uint64_t v17 = (std::__shared_weak_count *)*((void *)v9 - 1);
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            v9 -= 16;
          }
          this[3] = v10;
          (*((void (**)(char **, _DWORD *))*this + 13))(this, v11);
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
        }
      }
      uint64_t v7 = (const AudioComponentVector *)((char *)v7 + 16);
    }
    while (v7 != a4);
  }
  uint64_t v19 = a2->__begin_;
  std::vector<char>::pointer end = a2->__end_;
  while (v19 != end)
  {
    AudioComponentMgr_Base::_addComponent(this, v19);
    v19 += 2;
  }
  BOOL v20 = this + 1;
  uint64_t v21 = this[2];
  uint64_t v22 = this[3];
  while (v21 != v22)
  {
    uint64_t v23 = *(void *)v21;
    v21 += 16;
    *BOOL v20 = v23;
    BOOL v20 = (void *)(v23 + 24);
  }
  *BOOL v20 = 0;
}

void sub_18FF0F3A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void AudioComponentVector::createWithSerializedData(AudioComponentVector *this, NSData *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  id v9 = 0;
  uint64_t v4 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v3 error:&v9];
  id v5 = v9;
  if (v5)
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    uint64_t v7 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      uint64_t v11 = "AudioComponentVector.mm";
      __int16 v12 = 1024;
      int v13 = 360;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error deserializing AudioComponentVector: %@", buf, 0x1Cu);
    }
    *(_OWORD *)&this->__begin_ = 0u;
    *(_OWORD *)&this->__end_cap_.__value_ = 0u;
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)(v4 + 32) = 1;
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(this, *(void **)(v4 + 8), *(void **)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 4);
    char v6 = *(unsigned char *)(v4 + 32);
  }
  this->BOOL mSorted = v6;
}

void sub_18FF0F56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AudioComponentVector::showAll(AudioComponentVector *this, const char *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = &unk_1EB3D5000;
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  id v5 = *(id *)gAudioComponentLogCategory;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v7 = (unint64_t)((char *)this->__end_ - (char *)this->__begin_) >> 4;
    *(_DWORD *)long long buf = 136315906;
    uint64_t v26 = "AudioComponentVector.mm";
    __int16 v27 = 1024;
    int v28 = 157;
    __int16 v29 = 2080;
    uint64_t v30 = a2;
    __int16 v31 = 1024;
    int v32 = v7;
    _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s: %d AudioComponents:", buf, 0x22u);
  }
  std::vector<int>::pointer begin = (const AudioClassDescription **)this->__begin_;
  std::vector<char>::pointer end = this->__end_;
  if (this->__begin_ != end)
  {
    do
    {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)&(*begin)->mType + 80))();
      if (v10)
      {
        uint64_t v11 = *(__CFString **)(v10 + 160);
        if (v11)
        {
          CFRetain(*(CFTypeRef *)(v10 + 160));
          CFRelease(v11);
        }
      }
      else
      {
        uint64_t v11 = &stru_1EDFA53D0;
      }
      __int16 v12 = (id *)*((void *)v4 + 9);
      if (!v12) {
        operator new();
      }
      int v13 = *v12;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        id v15 = (const char *)*begin;
        to_string(*begin + 3, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        OSType mType = (*begin)[4].mType;
        OSType mManufacturer = (*begin)[4].mManufacturer;
        OSType v21 = (*begin)[5].mType;
        APComponent::name((APComponent *)&v23, *(const void **)&(*begin)[5].mSubType);
        uint64_t v19 = v23;
        if (v23)
        {
          APComponent::name((APComponent *)&v22, *(const void **)&(*begin)[5].mSubType);
          BOOL v20 = v22;
          *(_DWORD *)long long buf = 136317442;
          uint64_t v26 = "AudioComponentVector.mm";
          __int16 v27 = 1024;
          int v28 = 168;
          __int16 v29 = 2048;
          uint64_t v30 = v15;
          __int16 v31 = 1040;
          int v32 = 28;
          __int16 v33 = 2080;
          uint64_t v34 = p_p;
          __int16 v35 = 1024;
          OSType v36 = mType;
          __int16 v37 = 1024;
          OSType v38 = mManufacturer;
          __int16 v39 = 1024;
          OSType v40 = v21;
          __int16 v41 = 2112;
          uint64_t v42 = v22;
          __int16 v43 = 2112;
          CFNumberRef v44 = v11;
          _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d   %p: %-28.28s f%08x v%08x %3d %@ %@", buf, 0x52u);
          if (v20) {
            CFRelease(v20);
          }
          CFRelease(v19);
          uint64_t v4 = &unk_1EB3D5000;
        }
        else
        {
          *(_DWORD *)long long buf = 136317442;
          uint64_t v26 = "AudioComponentVector.mm";
          __int16 v27 = 1024;
          int v28 = 168;
          __int16 v29 = 2048;
          uint64_t v30 = v15;
          __int16 v31 = 1040;
          int v32 = 28;
          __int16 v33 = 2080;
          uint64_t v34 = p_p;
          __int16 v35 = 1024;
          OSType v36 = mType;
          __int16 v37 = 1024;
          OSType v38 = mManufacturer;
          __int16 v39 = 1024;
          OSType v40 = v21;
          __int16 v41 = 2112;
          uint64_t v42 = &stru_1EDFA53D0;
          __int16 v43 = 2112;
          CFNumberRef v44 = v11;
          _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d   %p: %-28.28s f%08x v%08x %3d %@ %@", buf, 0x52u);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      begin += 2;
    }
    while (begin != end);
  }
}

void sub_18FF0F990(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::unique_ptr<DSPGraph::Macro>>::~deque[abi:ne180100](uint64_t a1)
{
  BOOL v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    char v6 = &v2[v5 >> 9];
    unint64_t v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(void *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        uint64_t v9 = *v7;
        *unint64_t v7 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        if ((char *)++v7 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v10 = (uint64_t *)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      BOOL v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      BOOL v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 512;
LABEL_16:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      __int16 v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void DSPGraph::StringSubMacro::~StringSubMacro(void **this)
{
  *this = &unk_1EDF98190;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  DSPGraph::Macro::~Macro(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *this = &unk_1EDF98190;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  DSPGraph::Macro::~Macro(this);
}

uint64_t AIFFAudioFile::GetChannelLayout(AIFFAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    *(_OWORD *)&a3->__int32 mChannelLayoutTag = 0u;
    *(_OWORD *)&a3->mChannelDescriptions[0].mChannelFlags = 0u;
    a3->__int32 mChannelLayoutTag = *((_DWORD *)this + 122);
    uint64_t result = 0;
    if (a2) {
      *a2 = 32;
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 18);
    uint64_t v7 = *((void *)this + 19);
    uint64_t v8 = v7 - v6;
    if (v7 == v6)
    {
LABEL_8:
      *a2 = 0;
      return 1667787583;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      unsigned int v11 = 1;
      while (*(_DWORD *)(v6 + 24 * v9) != 1128808782)
      {
        uint64_t v9 = v11;
        if (v10 <= v11++) {
          goto LABEL_8;
        }
      }
      unsigned int v13 = *(_DWORD *)(v6 + 24 * v9 + 8) - 8;
      if (*a2 >= v13)
      {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v6 + 24 * v9 + 16) + 8);
        if (!result)
        {
          AudioChannelLayout_BtoN(a3, v13);
          uint64_t result = 0;
          *a2 = v13;
        }
      }
      else
      {
        return 561211770;
      }
    }
  }
  return result;
}

uint64_t CAFAudioFile::SetDataFormat(CAFAudioFile *this, AudioStreamBasicDescription *a2)
{
  uint64_t v3 = AudioFileObject::SetDataFormat(this, a2);
  uint64_t v4 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v4) {
    MEMORY[0x192FC8940](v4, 0x1000C403E1C8BA9);
  }
  return v3;
}

uint64_t CAFAudioFile::ParseAudioFile(CAFAudioFile *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unsigned int v52 = 0;
  uint64_t v51 = 0;
  *((void *)this + 9) = 0;
  (*(void (**)(CAFAudioFile *, void))(*(void *)this + 232))(this, 0);
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v51);
  if (v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      LOWORD(v60[0]) = 1024;
      *(_DWORD *)((char *)v60 + 2) = 1191;
      uint64_t v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "%25s:%-5d  GetSize Failed";
LABEL_81:
      _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_ERROR, v4, buf, 0x12u);
      goto LABEL_82;
    }
    goto LABEL_82;
  }
  uint64_t v2 = (*(uint64_t (**)(void, void, void, uint64_t, unint64_t *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, 0, 8, &v48, &v52);
  if (v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      LOWORD(v60[0]) = 1024;
      *(_DWORD *)((char *)v60 + 2) = 1196;
      uint64_t v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "%25s:%-5d  FSRead Failed 1";
      goto LABEL_81;
    }
LABEL_82:
    unsigned int v9 = 0;
    int v37 = 0;
    int v38 = 0;
    int v39 = 0;
LABEL_83:
    int v40 = v37 ^ 1;
    if (v9 != 1684108385) {
      int v40 = 0;
    }
    *((_DWORD *)this + 20) = v40;
    uint64_t v7 = v2;
    if (v2 == -39)
    {
      if ((v38 & v39) != 0) {
        return 0;
      }
      else {
        return 1685348671;
      }
    }
    return v7;
  }
  if (v52 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      LOWORD(v60[0]) = 1024;
      *(_DWORD *)((char *)v60 + 2) = 1197;
      uint64_t v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "%25s:%-5d  byteCount < sizeof(fileChunk)";
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  int v5 = v48;
  LODWORD(v48) = bswap32(v48);
  int v6 = WORD2(v48);
  WORD2(v48) = __rev16(WORD2(v48));
  HIWORD(v48) = bswap32(HIWORD(v48)) >> 16;
  if (v5 != 1717985635)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      LOWORD(v60[0]) = 1024;
      *(_DWORD *)((char *)v60 + 2) = 1201;
      uint64_t v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "%25s:%-5d  fileChunk.mFileType != kCAF_FileType";
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  if (v6 != 256)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      LOWORD(v60[0]) = 1024;
      *(_DWORD *)((char *)v60 + 2) = 1202;
      uint64_t v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "%25s:%-5d  fileChunk.mFileVersion != kCAF_FileVersion_Initial";
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  uint64_t v7 = 1685348671;
  if (v51 < 9) {
    return v7;
  }
  char v8 = 0;
  char v46 = 0;
  unsigned int v9 = 0;
  uint64_t v47 = 0;
  uint64_t v10 = 8;
  do
  {
    uint64_t v2 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v10, 12, &v53, &v52);
    if (v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v55 = 136315394;
        uint64_t v56 = "CAFAudioFile.cpp";
        __int16 v57 = 1024;
        int v58 = 1212;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  FSRead Failed 1", v55, 0x12u);
      }
      goto LABEL_106;
    }
    if (v52 < 0xC) {
      break;
    }
    unsigned int v9 = bswap32(v53);
    unsigned int v53 = v9;
    uint64_t v12 = bswap64(v54);
    unint64_t v54 = v12;
    if (v12 >= 0) {
      unint64_t v13 = v12 + 12;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v11 = v10 + 12;
    if (v9 != 1684108385)
    {
      if (v9 != 1684370275)
      {
        if (v9 == 1885432692) {
          char v8 = 1;
        }
        goto LABEL_45;
      }
      uint64_t v2 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unint64_t *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v11, 32, &v48, &v52);
      if (!v2)
      {
        if (v52 <= 0x1F)
        {
          unsigned int v9 = 1684370275;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v55 = 136315394;
            uint64_t v56 = "CAFAudioFile.cpp";
            __int16 v57 = 1024;
            int v58 = 1239;
            CFNumberRef v44 = MEMORY[0x1E4F14500];
            uint64_t v45 = "%25s:%-5d  byteCount < sizeof(format)";
            goto LABEL_101;
          }
          goto LABEL_70;
        }
        unint64_t v48 = bswap64(v48);
        int8x16_t v14 = vrev32q_s8(v49);
        int8x16_t v49 = v14;
        int8x8_t v15 = vrev32_s8(v50);
        int8x8_t v50 = v15;
        __int32 v61 = 0;
        int v63 = 0;
        *(void *)long long buf = v48;
        *(_DWORD *)&_DWORD buf[8] = v14.i32[0];
        *(void *)&v60[1] = vextq_s8(v14, v14, 8uLL).u64[0];
        int8x8_t v62 = v15;
        if (v14.i32[3] == 1) {
          __int32 v61 = v14.i32[2];
        }
        int v16 = v14.i32[1];
        if (v14.i32[0] == 1819304813)
        {
          if (v14.i8[4]) {
            int v17 = 1;
          }
          else {
            int v17 = 4;
          }
          int v18 = (v17 | v14.i8[4] & 2) ^ 2;
          if ((v15.i8[4] & 7) != 0 || ((unsigned __int32)v15.i32[1] >> 3) * v15.i32[0] != v14.i32[2]) {
            int v16 = v18 | 0x10;
          }
          else {
            int v16 = v18 | 8;
          }
        }
        v60[0] = v16;
        uint64_t v2 = (*(uint64_t (**)(CAFAudioFile *, unsigned char *))(*(void *)this + 176))(this, buf);
        if (v2)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v55 = 136315394;
            uint64_t v56 = "CAFAudioFile.cpp";
            __int16 v57 = 1024;
            int v58 = 1254;
            uint64_t v42 = MEMORY[0x1E4F14500];
            __int16 v43 = "%25s:%-5d  SetDataFormat Failed";
LABEL_104:
            _os_log_impl(&dword_18FEC0000, v42, OS_LOG_TYPE_ERROR, v43, v55, 0x12u);
          }
          goto LABEL_105;
        }
        BYTE4(v47) = 1;
        goto LABEL_45;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v55 = 136315394;
        uint64_t v56 = "CAFAudioFile.cpp";
        __int16 v57 = 1024;
        int v58 = 1238;
        uint64_t v42 = MEMORY[0x1E4F14500];
        __int16 v43 = "%25s:%-5d  FSRead Failed 1";
        goto LABEL_104;
      }
LABEL_105:
      unsigned int v9 = 1684370275;
LABEL_106:
      int v37 = v46 & 1;
      int v38 = BYTE4(v47) & 1;
      int v39 = v47 & 1;
      goto LABEL_83;
    }
    unsigned int v52 = 4;
    uint64_t v2 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *, unsigned int *))(**((void **)this + 13)
                                                                                             + 48))(*((void *)this + 13), 0, v11, 4, (char *)this + 168, &v52);
    if (v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v55 = 136315394;
        uint64_t v56 = "CAFAudioFile.cpp";
        __int16 v57 = 1024;
        int v58 = 1265;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  FSRead Failed 2", v55, 0x12u);
      }
      unsigned int v9 = 1684108385;
      int v37 = v46 & 1;
      int v38 = BYTE4(v47) & 1;
      int v39 = 1;
      goto LABEL_83;
    }
    if (v52 <= 3)
    {
      unsigned int v9 = 1684108385;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v55 = 136315394;
        uint64_t v56 = "CAFAudioFile.cpp";
        __int16 v57 = 1024;
        int v58 = 1266;
        CFNumberRef v44 = MEMORY[0x1E4F14500];
        uint64_t v45 = "%25s:%-5d  byteCount < sizeof(mEditCount)";
LABEL_101:
        _os_log_impl(&dword_18FEC0000, v44, OS_LOG_TYPE_ERROR, v45, v55, 0x12u);
      }
LABEL_70:
      uint64_t v7 = 0;
      BOOL v36 = (v46 & 1) == 0 && v9 == 1684108385;
      *((_DWORD *)this + 20) = v36;
      return v7;
    }
    *((void *)this + 9) = v10 + 16;
    if ((v13 & 0x8000000000000000) == 0)
    {
      if (v13 >= 0x10) {
        unint64_t v19 = v13 - 16;
      }
      else {
        unint64_t v19 = 0;
      }
      (*(void (**)(CAFAudioFile *, unint64_t))(*(void *)this + 232))(this, v19);
      LOBYTE(v47) = 1;
      goto LABEL_46;
    }
    (*(void (**)(CAFAudioFile *, uint64_t))(*(void *)this + 232))(this, v51 - (v10 + 16));
    unint64_t v13 = v51 - v10;
    char v46 = 1;
    LOBYTE(v47) = 1;
LABEL_45:
    if ((v13 & 0x8000000000000000) != 0) {
      break;
    }
LABEL_46:
    int64_t v20 = v13 + v10;
    uint64_t v21 = v51;
    if ((uint64_t)(v13 + v10) > v51) {
      break;
    }
    uint64_t v23 = (unsigned int *)*((void *)this + 19);
    unint64_t v22 = *((void *)this + 20);
    if ((unint64_t)v23 >= v22)
    {
      uint64_t v25 = (unsigned int *)*((void *)this + 18);
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v25) >> 3);
      unint64_t v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v25) >> 3);
      if (2 * v28 > v27) {
        unint64_t v27 = 2 * v28;
      }
      if (v28 >= 0x555555555555555) {
        unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v29);
        uint64_t v25 = (unsigned int *)*((void *)this + 18);
        uint64_t v23 = (unsigned int *)*((void *)this + 19);
      }
      else
      {
        uint64_t v30 = 0;
      }
      unint64_t v31 = v29 + 24 * v26;
      *(_DWORD *)unint64_t v31 = v9;
      *(_DWORD *)(v31 + 4) = 0;
      *(void *)(v31 + 8) = v13;
      *(void *)(v31 + 16) = v10;
      unint64_t v32 = v31;
      if (v23 != v25)
      {
        do
        {
          long long v33 = *(_OWORD *)(v23 - 6);
          *(void *)(v32 - 8) = *((void *)v23 - 1);
          *(_OWORD *)(v32 - 24) = v33;
          v32 -= 24;
          v23 -= 6;
        }
        while (v23 != v25);
        uint64_t v25 = (unsigned int *)*((void *)this + 18);
      }
      uint64_t v24 = (_DWORD *)(v31 + 24);
      *((void *)this + 18) = v32;
      *((void *)this + 19) = v31 + 24;
      *((void *)this + 20) = v29 + 24 * v30;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *uint64_t v23 = v9;
      v23[1] = 0;
      uint64_t v24 = v23 + 6;
      *((void *)v23 + 1) = v13;
      *((void *)v23 + 2) = v10;
    }
    *((void *)this + 19) = v24;
    v10 += v13;
  }
  while (v20 < v21);
  if ((v47 & 0x100000000) != 0)
  {
    if (v49.i32[2])
    {
      (*(void (**)(CAFAudioFile *))(*(void *)this + 648))(this);
      uint64_t v34 = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 224))(this);
      (*(void (**)(CAFAudioFile *, uint64_t))(*(void *)this + 248))(this, v34 / v49.u32[2]);
    }
    if ((v8 & 1) == 0 || (uint64_t v7 = CAFAudioFile::ParsePacketTableChunk(this), !v7))
    {
      (*(void (**)(CAFAudioFile *, char *, uint64_t))(*(void *)this + 544))(this, (char *)this + 200, v11);
      goto LABEL_70;
    }
  }
  return v7;
}

uint64_t Cached_DataSource::ReadBytes(Cached_DataSource *this, uint64_t a2, int64_t a3, size_t __n, char *__dst, unsigned int *a6)
{
  if (a6) {
    *a6 = 0;
  }
  uint64_t v31 = 0;
  unsigned int v30 = 0;
  if (!__dst) {
    return 4294967246;
  }
  int v12 = a2 & 3;
  if (v12 == 2)
  {
    uint64_t result = (*(uint64_t (**)(Cached_DataSource *, uint64_t *))(*(void *)this + 24))(this, &v31);
    if (result) {
      return result;
    }
    uint64_t v14 = v31;
LABEL_11:
    int64_t v15 = v14 + a3;
LABEL_12:
    if ((v15 & 0x8000000000000000) == 0) {
      goto LABEL_13;
    }
    return 4294967256;
  }
  uint64_t v31 = 0;
  int64_t v15 = a3;
  if ((a2 & 3) == 0) {
    goto LABEL_12;
  }
  if (v12 != 1)
  {
    uint64_t v14 = 0;
    int64_t v15 = 0;
    if (v12 != 2) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  int64_t v15 = *((void *)this + 8) + a3;
  if (v15 < 0) {
    return 4294967256;
  }
LABEL_13:
  if (v15 < (unint64_t)*((unsigned int *)this + 8))
  {
    if (a6) {
      *a6 = 0;
    }
    if (!*((void *)this + 3))
    {
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 3, *((unsigned int *)this + 8), 1);
      uint64_t result = (*(uint64_t (**)(void, void, void, void, void, char *))(**((void **)this + 2) + 48))(*((void *)this + 2), 0, 0, *((unsigned int *)this + 8), *((void *)this + 3), (char *)this + 32);
      if (result)
      {
        if (result != -39) {
          return result;
        }
      }
    }
    uint64_t v16 = *((unsigned int *)this + 8);
    unint64_t v17 = v16 - v15;
    if (v16 - v15 >= (unint64_t)__n) {
      size_t v18 = __n;
    }
    else {
      size_t v18 = v16 - v15;
    }
    memcpy(__dst, (const void *)(*((void *)this + 3) + v15), v18);
    if (v17 >= __n)
    {
      uint64_t result = 0;
      if (!a6)
      {
LABEL_42:
        *((void *)this + 8) = v18 + v15;
        return result;
      }
    }
    else
    {
      unsigned int v32 = 0;
      uint64_t result = (*(uint64_t (**)(void, void, void, void, char *, unsigned int *))(**((void **)this + 2)
                                                                                                 + 48))(*((void *)this + 2), 0, *((unsigned int *)this + 8), (__n - v18), &__dst[v18], &v32);
      v18 += v32;
      if (!a6) {
        goto LABEL_42;
      }
    }
    *a6 = v18;
    goto LABEL_42;
  }
  unint64_t v19 = (_DWORD *)((char *)this + 52);
  uint64_t v21 = (const void **)((char *)this + 40);
  uint64_t v20 = *((void *)this + 5);
  uint64_t v22 = *((unsigned int *)this + 12);
  if (v20)
  {
    if (v22 > __n)
    {
      uint64_t v23 = *((void *)this + 7);
      if (v15 >= v23)
      {
        int64_t v24 = v23 + *((unsigned int *)this + 13);
        int64_t v25 = v24 - v15;
        if (v24 > v15)
        {
          uint64_t v26 = __n;
          unint64_t v27 = (const void *)(v20 + v15 - v23);
          if (v15 + __n <= v24)
          {
            memcpy(__dst, v27, __n);
            uint64_t result = 0;
          }
          else
          {
            memcpy(__dst, v27, v24 - v15);
            uint64_t v28 = *((void *)this + 7) + *((unsigned int *)this + 13);
            uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void, void, char *))(**((void **)this + 2)
                                                                                                + 48))(*((void *)this + 2), 0, v28, *((unsigned int *)this + 12), *((void *)this + 5), (char *)this + 52);
            if (result && result != -39)
            {
              LODWORD(__n) = v25;
            }
            else
            {
              *((void *)this + 7) = v28;
              if (v26 - v25 >= (unint64_t)*((unsigned int *)this + 13)) {
                size_t v29 = *((unsigned int *)this + 13);
              }
              else {
                size_t v29 = v26 - v25;
              }
              if (v29) {
                memcpy(&__dst[v25], *v21, v29);
              }
              uint64_t result = 0;
              LODWORD(__n) = v29 + v25;
            }
          }
          goto LABEL_57;
        }
      }
    }
    if (v22 >= __n)
    {
LABEL_49:
      *((void *)this + 7) = v15;
      uint64_t result = (*(uint64_t (**)(void, void, int64_t, uint64_t, uint64_t, char *))(**((void **)this + 2) + 48))(*((void *)this + 2), 0, v15, v22, v20, (char *)this + 52);
      if (result && result != -39) {
        return result;
      }
      if (*v19 >= __n) {
        __n = __n;
      }
      else {
        __n = *v19;
      }
      memcpy(__dst, *v21, __n);
      uint64_t result = 0;
      goto LABEL_57;
    }
  }
  else if (v22 >= __n)
  {
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 5, *((unsigned int *)this + 12), 1);
    uint64_t v22 = *((unsigned int *)this + 12);
    uint64_t v20 = *((void *)this + 5);
    goto LABEL_49;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, int64_t, size_t, char *, unsigned int *))(**((void **)this + 2) + 48))(*((void *)this + 2), a2, a3, __n, __dst, &v30);
  LODWORD(__n) = v30;
  *((void *)this + 8) = v15 + v30;
LABEL_57:
  if (a6) {
    *a6 = __n;
  }
  return result;
}

void CADeprecated::CAAutoFree<unsigned char>::allocBytes(void **a1, size_t size, int a3)
{
  int v6 = *a1;
  if (v6)
  {
    free(v6);
    *a1 = 0;
  }
  if (a3)
  {
    uint64_t v7 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
    char v8 = v7;
    if (!size || v7)
    {
      bzero(v7, size);
      goto LABEL_9;
    }
LABEL_10:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_alloc::bad_alloc(exception);
  }
  unsigned int v9 = malloc_type_malloc(size, 0x7C51E058uLL);
  char v8 = v9;
  if (size && !v9) {
    goto LABEL_10;
  }
LABEL_9:
  *a1 = v8;
}

void DSPGraph::Graph::getFormatNames(DSPGraph::Graph *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = (void *)(a2 + 16);
  unint64_t v5 = *((void *)this + 78);
  if (v5)
  {
    if (v5 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v5);
    __v.__begin_ = __v.__first_;
    __v.__end_ = __v.__first_;
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  uint64_t v7 = (void *)*((void *)this + 77);
  if (v7)
  {
    std::vector<std::string>::pointer v8 = *(std::vector<std::string>::pointer *)(a2 + 8);
    do
    {
      unsigned int v9 = (long long *)(v7 + 2);
      if ((unint64_t)v8 >= *v4)
      {
        std::vector<std::string>::pointer v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)a2, v9);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a2, v9);
        ++v8;
      }
      *(void *)(a2 + 8) = v8;
      uint64_t v7 = (void *)*v7;
    }
    while (v7);
  }
}

void sub_18FF10E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_18FF10E7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::vector<std::string>::pointer begin = this->__begin_;
  std::vector<char>::pointer end = this->__end_;
  std::__split_buffer<std::string>::pointer v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    unint64_t v5 = __v->__begin_;
  }
  else
  {
    do
    {
      unint64_t v5 = v4 - 1;
      long long v6 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v4[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].__r_.__value_.__l.__data_ = v6;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  uint64_t v7 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v7;
  std::vector<std::string>::pointer v8 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v8;
  int value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    unsigned int v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v7);
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t v8 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  std::vector<std::string>::pointer v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_18FF1107C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

uint64_t UnixFile_DataSource::ReadBytes(UnixFile_DataSource *this, unsigned int a2, uint64_t a3, unsigned int a4, void *a5, unsigned int *a6)
{
  if (a6) {
    *a6 = 0;
  }
  if (!a5) {
    return 4294967246;
  }
  uint64_t v11 = UnixFile_DataSource::UFCurrentOffset(this, a2, a3);
  if (v11 < 0) {
    return 4294967256;
  }
  if (a4)
  {
    off_t v12 = v11;
    int v13 = (a2 >> 5) & 1;
    uint64_t v14 = *((unsigned int *)this + 5);
    if (v14 != v13)
    {
      *((_DWORD *)this + 5) = v13;
      fcntl(*((_DWORD *)this + 3), 48, v14);
    }
    ssize_t v15 = pread(*((_DWORD *)this + 3), a5, a4, v12);
    if (v15 != -1)
    {
      unsigned int v16 = v15;
      *((void *)this + 4) = v15 + v12;
      if (a6)
      {
        uint64_t result = 0;
        *a6 = v16;
        return result;
      }
      return 0;
    }
    return 4294967256;
  }
  return 0;
}

uint64_t UnixFile_DataSource::UFCurrentOffset(UnixFile_DataSource *this, char a2, uint64_t a3)
{
  if ((a2 & 3) == 2)
  {
    uint64_t v5 = 0;
    LODWORD(result) = (*(uint64_t (**)(UnixFile_DataSource *, uint64_t *))(*(void *)this + 24))(this, &v5);
    if (!result) {
      return v5 + a3;
    }
    return (int)result;
  }
  if ((a2 & 3) == 1)
  {
    uint64_t v5 = 0;
    LODWORD(result) = (*(uint64_t (**)(UnixFile_DataSource *, uint64_t *))(*(void *)this + 40))(this, &v5);
    if (!result) {
      return v5 + a3;
    }
    return (int)result;
  }
  if ((a2 & 3) != 0) {
    return -1;
  }
  else {
    return a3;
  }
}

uint64_t AudioFileObject::SetNumBytes(uint64_t this, uint64_t a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

uint64_t UnixFile_DataSource::GetSize(UnixFile_DataSource *this, uint64_t *a2)
{
  *a2 = -1;
  if (fstat(*((_DWORD *)this + 3), &v6) == -1) {
    return 4294967253;
  }
  uint64_t result = 0;
  st_std::string::size_type size = v6.st_size;
  *((void *)this + 3) = v6.st_size;
  *a2 = st_size;
  return result;
}

uint64_t Cached_DataSource::GetSize(Cached_DataSource *this, uint64_t *a2)
{
  return (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 2) + 24))(*((void *)this + 2), a2);
}

uint64_t AudioFileObject::SetDataFormat(AudioFileObject *this, AudioStreamBasicDescription *a2)
{
  uint64_t v4 = 1718449215;
  if (AudioFileObject::IsDataFormatValid((AudioFileObject *)a2, a2)
    && (*(unsigned int (**)(AudioFileObject *, AudioStreamBasicDescription *))(*(void *)this + 616))(this, a2))
  {
    int v5 = *((_DWORD *)this + 10);
    uint64_t v6 = *(void *)&a2->mBitsPerChannel;
    long long v7 = *(_OWORD *)&a2->mSampleRate;
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)&a2->mBytesPerPacket;
    *(_OWORD *)((char *)this + 24) = v7;
    *((void *)this + 7) = v6;
    int v8 = *((_DWORD *)this + 10);
    if (v8)
    {
      if (v8 != v5)
      {
        uint64_t v9 = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 224))(this);
        (*(void (**)(AudioFileObject *, uint64_t))(*(void *)this + 248))(this, v9 / *((unsigned int *)this + 10));
        (*(void (**)(AudioFileObject *, void))(*(void *)this + 648))(this, *((unsigned int *)this + 10));
        if (!*((unsigned char *)this + 137) && (*((unsigned char *)this + 100) & 2) != 0)
        {
          if (*((_DWORD *)this + 33)) {
            *((unsigned char *)this + 136) = 1;
          }
          else {
            (*(void (**)(AudioFileObject *))(*(void *)this + 216))(this);
          }
        }
      }
    }
    UInt32 ioPropertyDataSize = 4;
    AudioFormatGetProperty(0x66646570u, 0x28u, a2, &ioPropertyDataSize, (char *)this + 64);
    uint64_t v4 = 0;
    *((unsigned char *)this + 137) = 0;
  }
  return v4;
}

uint64_t AudioFileObject::SetMaximumPacketSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

uint64_t AudioFileObject::SetNumPackets(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

OSStatus AudioFileOpenURL(CFURLRef inFileRef, AudioFilePermissions inPermissions, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  LODWORD(v4) = -50;
  if (inFileRef && outAudioFile)
  {
    uint64_t v7 = inPermissions;
    CFStringRef v9 = CFURLCopyScheme(inFileRef);
    if (v9)
    {
      CFStringRef v10 = v9;
      v41.location = 0;
      v41.length = 12;
      CFComparisonResult v11 = CFStringCompareWithOptions(v9, @"ipod-library", v41, 0);
      CFRelease(v10);
      if (v11 == kCFCompareEqualTo) {
        operator new();
      }
    }
    if (CFURLGetFileSystemRepresentation(inFileRef, 1u, buffer, 1024))
    {
      if (v7 == 3) {
        uint64_t v12 = open((const char *)buffer, 2);
      }
      else {
        uint64_t v12 = open((const char *)buffer, v7 == 2);
      }
      uint64_t v13 = v12;
      if ((v12 & 0x80000000) != 0)
      {
        unsigned int v18 = *__error();
        if (v18 <= 0x1F)
        {
          if (((1 << v18) & 0x40022002) != 0)
          {
            LODWORD(v4) = -54;
            return (int)v4;
          }
          if (((1 << v18) & 0x1800000) != 0)
          {
            LODWORD(v4) = -42;
            return (int)v4;
          }
          if (v18 == 31)
          {
            LODWORD(v4) = 561017960;
            return (int)v4;
          }
        }
        LODWORD(v4) = 2003334207;
        return (int)v4;
      }
      CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v38, 0x2000uLL, 1);
      for (off_t i = 0; ; lseek(v13, i, 0))
      {
        ssize_t v15 = read(v13, v38, 0x2000uLL);
        ssize_t v16 = v15;
        if (v15 < 1)
        {
          unint64_t v19 = 0;
          char v20 = 0;
          LODWORD(v4) = 2003334207;
          goto LABEL_63;
        }
        if ((unint64_t)v15 < 0xA) {
          break;
        }
        unsigned int v17 = ID3Size(v15, v38, v37);
        if (!v17) {
          break;
        }
        i += v17;
      }
      AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
      uint64_t v22 = AudioFileFormatRegistry;
      uint64_t v4 = v38;
      if (inFileTypeHint)
      {
        uint64_t v23 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, inFileTypeHint);
        unint64_t v19 = (AudioFileFormatBase *)v23;
        if (v23)
        {
          if ((*(unsigned int (**)(uint64_t, ssize_t, unsigned __int8 *))(*(void *)v23 + 24))(v23, v16, v4) == 1)goto LABEL_62; {
        }
          }
      }
      CFStringRef v24 = CFURLCopyPathExtension(inFileRef);
      if (v24)
      {
        AudioFileTypeID v36 = inFileTypeHint;
        for (uint64_t j = *((void *)v22 + 1); j != *((void *)v22 + 2); j += 16)
        {
          unint64_t v19 = *(AudioFileFormatBase **)(j + 8);
          if (v19
            && (*(unsigned int (**)(void, CFStringRef))(*(void *)v19 + 16))(*(void *)(j + 8), v24)
            && (*(unsigned int (**)(AudioFileFormatBase *, ssize_t, unsigned __int8 *))(*(void *)v19 + 24))(v19, v16, v4))
          {
LABEL_61:
            CFRelease(v24);
            goto LABEL_62;
          }
        }
        if (AudioFileFormatRegistry::AddComponentFormats(v22))
        {
          for (uint64_t k = *((void *)v22 + 1); k != *((void *)v22 + 2); k += 16)
          {
            unint64_t v19 = *(AudioFileFormatBase **)(k + 8);
            if (v19
              && (*(unsigned int (**)(void, CFStringRef))(*(void *)v19 + 16))(*(void *)(k + 8), v24)
              && (*(unsigned int (**)(AudioFileFormatBase *, ssize_t, unsigned __int8 *))(*(void *)v19 + 24))(v19, v16, v4))
            {
              goto LABEL_61;
            }
          }
        }
        CFRelease(v24);
        inFileTypeHint = v36;
      }
      AudioFileTypeID v27 = inFileTypeHint;
      uint64_t v29 = *((void *)v22 + 1);
      uint64_t v28 = *((void *)v22 + 2);
      while (v29 != v28)
      {
        unint64_t v19 = *(AudioFileFormatBase **)(v29 + 8);
        if (v19)
        {
          if ((*(unsigned int (**)(void, ssize_t, unsigned __int8 *))(*(void *)v19 + 24))(*(void *)(v29 + 8), v16, v4) == 1)goto LABEL_62; {
          uint64_t v28 = *((void *)v22 + 2);
          }
        }
        v29 += 16;
      }
      if (AudioFileFormatRegistry::AddComponentFormats(v22))
      {
        uint64_t v31 = *((void *)v22 + 1);
        uint64_t v30 = *((void *)v22 + 2);
        while (v31 != v30)
        {
          unint64_t v19 = *(AudioFileFormatBase **)(v31 + 8);
          if (v19)
          {
            if ((*(unsigned int (**)(void, ssize_t, unsigned __int8 *))(*(void *)v19 + 24))(*(void *)(v31 + 8), v16, v4) == 1)goto LABEL_62; {
            uint64_t v30 = *((void *)v22 + 2);
            }
          }
          v31 += 16;
        }
      }
      if (v27
        && (v32 = AudioFileFormatRegistry::Get(v22, v27), (unint64_t v19 = (AudioFileFormatBase *)v32) != 0)
        && (*(unsigned int (**)(uint64_t, ssize_t, unsigned __int8 *))(*(void *)v32 + 24))(v32, v16, v4))
      {
LABEL_62:
        char v20 = 1;
      }
      else
      {
        close(v13);
        unint64_t v19 = 0;
        char v20 = 0;
        LODWORD(v4) = 1954115647;
      }
LABEL_63:
      if (v38) {
        free(v38);
      }
      if (v20)
      {
        uint64_t v33 = NewAudioFileHandle(v19);
        uint64_t v34 = (unsigned int *)v33;
        if (v33)
        {
          LODWORD(v4) = (*(uint64_t (**)(uint64_t, CFURLRef, uint64_t, uint64_t))(*(void *)v33 + 48))(v33, inFileRef, v7, v13);
          if (v4)
          {
            (*(void (**)(unsigned int *))(*(void *)v34 + 8))(v34);
            *outAudioFile = 0;
          }
          else
          {
            *outAudioFile = (AudioFileID)v34[2];
          }
        }
        else
        {
          LODWORD(v4) = 1954115647;
        }
      }
    }
    else
    {
      LODWORD(v4) = -43;
    }
  }
  return (int)v4;
}

void sub_18FF12034(_Unwind_Exception *a1)
{
}

void sub_18FF12040(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AudioFileObjectHandle::AFAPI_OpenURL(AudioFileObject **this, const __CFURL *a2, char a3)
{
  return AudioFileObject::DoOpen(this[3], a2, a3);
}

uint64_t AudioFileObject::DoOpen(AudioFileObject *this, const __CFURL *a2, char a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 100) = a3;
  uint64_t v4 = (*(uint64_t (**)(AudioFileObject *, const __CFURL *))(*(void *)this + 24))(this, a2);
  if (v4)
  {
    uint64_t v6 = v4;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      CFComparisonResult v11 = "AudioFileObject.cpp";
      __int16 v12 = 1024;
      int v13 = 80;
      uint64_t v7 = MEMORY[0x1E4F14500];
      int v8 = "%25s:%-5d  Open failed";
LABEL_7:
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 0x12u);
    }
  }
  else
  {
    uint64_t v6 = AudioFileObject::ValidateFormatAndData(this, v5);
    if (v6 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      CFComparisonResult v11 = "AudioFileObject.cpp";
      __int16 v12 = 1024;
      int v13 = 83;
      uint64_t v7 = MEMORY[0x1E4F14500];
      int v8 = "%25s:%-5d  ValidateFormatAndData failed";
      goto LABEL_7;
    }
  }
  return v6;
}

uint64_t AudioFileObject::Open(AudioFileObject *this, const __CFURL *a2, char a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    AudioFileObject::SetURL(this, a2);
    AudioFileObject::OpenFile(this);
  }
  return 1886547263;
}

void AudioFileObject::OpenFile(AudioFileObject *this)
{
}

void sub_18FF1240C(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10B1C4026EC6CB3);
  _Unwind_Resume(a1);
}

void AudioFileObject::SetURL(AudioFileObject *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 11);
  if (v3 != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v3 = (CFTypeRef)*((void *)this + 11);
    }
    if (v3) {
      CFRelease(v3);
    }
    *((void *)this + 11) = cf;
  }
}

uint64_t AudioFileObject::ValidateFormatAndData(AudioFileObject *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3 = 1685348671;
  long long v4 = *(_OWORD *)((char *)this + 40);
  long long v8 = *(_OWORD *)((char *)this + 24);
  long long v9 = v4;
  uint64_t v10 = *((void *)this + 7);
  if (AudioFileObject::IsDataFormatValid((AudioFileObject *)&v8, a2))
  {
    if (DWORD2(v8) != 1819304813) {
      return 0;
    }
    uint64_t v5 = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 224))(this);
    uint64_t v6 = v5 / v9;
    if ((*(uint64_t (**)(AudioFileObject *))(*(void *)this + 240))(this) <= v6) {
      return 0;
    }
  }
  return v3;
}

uint64_t AudioFileObject::GetNumPackets(AudioFileObject *this)
{
  return *((void *)this + 2);
}

BOOL AudioFileObject::IsDataFormatValid(AudioFileObject *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v2 = 0;
  if (*(double *)this >= 0.0 && *(double *)this <= 3000000.0)
  {
    int v3 = *((_DWORD *)this + 7);
    uint64_t v2 = 0;
    if ((v3 - 0x100000) >= 0xFFF00001)
    {
      if (*((_DWORD *)this + 2) != 1819304813) {
        return 1;
      }
      int v4 = *((_DWORD *)this + 8);
      if ((v4 - 65) >= 0xFFFFFFC0 && *((_DWORD *)this + 5) == 1)
      {
        unsigned int v5 = *((_DWORD *)this + 4);
        if (v5)
        {
          if (*((_DWORD *)this + 6) == v5 && v5 >= (v4 * v3 + 7) >> 3) {
            return 1;
          }
        }
      }
    }
  }
  return v2;
}

void *CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(void *a1, size_t size, int a3)
{
  *a1 = 0;
  if (a3)
  {
    unsigned int v5 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
    uint64_t v6 = v5;
    if (!size || v5)
    {
      bzero(v5, size);
      goto LABEL_7;
    }
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v7 = malloc_type_malloc(size, 0x7C51E058uLL);
  uint64_t v6 = v7;
  if (size && !v7) {
    goto LABEL_8;
  }
LABEL_7:
  *a1 = v6;
  return a1;
}

uint64_t ID3Size(unsigned int a1, const unsigned __int8 *a2, int *a3)
{
  uint64_t result = 0;
  *a3 = 0;
  if (a1 >= 3)
  {
    if (*(_WORD *)a2 == 17481 && a2[2] == 51)
    {
      if (a1 < 0xA || a2[3] == 255 || a2[4] == 255) {
        return 0;
      }
      uint64_t result = (((a2[7] & 0x7F) << 14) & 0xF01FC000 | ((a2[6] & 0x7F) << 21) | a2[9] & 0x7F | ((a2[8] & 0x7F) << 7))
             + 10;
      int v7 = 2;
    }
    else
    {
      if (*(_WORD *)a2 != 16724 || a2[2] != 71) {
        return 0;
      }
      uint64_t result = 128;
      int v7 = 1;
    }
    *a3 = v7;
  }
  return result;
}

uint64_t GetAudioFileFormatRegistry(void)
{
  std::mutex::lock(&AudioFileMutex(void)::global);
  uint64_t v0 = sAudioFileFormatRegistry;
  if (!sAudioFileFormatRegistry) {
    operator new();
  }
  std::mutex::unlock(&AudioFileMutex(void)::global);
  return v0;
}

void sub_18FF12EF8(_Unwind_Exception *a1)
{
}

void AudioFileFormatRegistry::AddAudioFileType(AudioFileFormatRegistry *this, AudioFileFormatBase *a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  LODWORD(v53) = v3;
  *((void *)&v53 + 1) = a2;
  unsigned int v5 = (char *)*((void *)this + 4);
  int v4 = (char *)*((void *)this + 5);
  uint64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    long long v8 = (char *)*((void *)this + 5);
  }
  else
  {
    unint64_t v7 = v6 >> 4;
    long long v8 = (char *)*((void *)this + 4);
    do
    {
      unint64_t v9 = v7 >> 1;
      uint64_t v10 = &v8[16 * (v7 >> 1)];
      unsigned int v12 = *(_DWORD *)v10;
      CFComparisonResult v11 = v10 + 16;
      v7 += ~(v7 >> 1);
      if (v12 < v3) {
        long long v8 = v11;
      }
      else {
        unint64_t v7 = v9;
      }
    }
    while (v7);
  }
  unint64_t v13 = *((void *)this + 6);
  if ((unint64_t)v4 >= v13)
  {
    unint64_t v18 = (v6 >> 4) + 1;
    if (v18 >> 60) {
      goto LABEL_63;
    }
    uint64_t v19 = v8 - v5;
    uint64_t v20 = (v8 - v5) >> 4;
    unint64_t v21 = v13 - (void)v5;
    unint64_t v22 = (uint64_t)(v13 - (void)v5) >> 3;
    if (v22 > v18) {
      unint64_t v18 = v22;
    }
    if (v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v18;
    }
    if (v23)
    {
      int64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v23);
    }
    else
    {
      int64_t v25 = 0;
      uint64_t v24 = 0;
    }
    AudioFileTypeID v27 = &v25[16 * v20];
    uint64_t v28 = &v25[16 * v24];
    if (v20 == v24)
    {
      if (v19 < 1)
      {
        if (v8 == v5) {
          unint64_t v30 = 1;
        }
        else {
          unint64_t v30 = v19 >> 3;
        }
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v30);
        AudioFileTypeID v27 = &v31[16 * (v30 >> 2)];
        uint64_t v28 = &v31[16 * v32];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        unint64_t v29 = v20 + 2;
        if (v20 >= -1) {
          unint64_t v29 = v20 + 1;
        }
        v27 -= 16 * (v29 >> 1);
      }
    }
    *(_OWORD *)AudioFileTypeID v27 = v53;
    uint64_t v33 = (char *)*((void *)this + 4);
    uint64_t v34 = v27;
    if (v33 != v8)
    {
      __int16 v35 = v8;
      AudioFileTypeID v36 = v27;
      do
      {
        uint64_t v34 = v36 - 16;
        *((_OWORD *)v36 - 1) = *((_OWORD *)v35 - 1);
        v35 -= 16;
        v36 -= 16;
      }
      while (v35 != v33);
    }
    int v37 = (char *)*((void *)this + 5);
    int64_t v38 = v37 - v8;
    if (v37 != v8) {
      memmove(v27 + 16, v8, v37 - v8);
    }
    int v39 = (void *)*((void *)this + 4);
    *((void *)this + 4) = v34;
    *((void *)this + 5) = &v27[v38 + 16];
    *((void *)this + 6) = v28;
    if (v39) {
      operator delete(v39);
    }
  }
  else if (v8 == v4)
  {
    *(_OWORD *)int v4 = v53;
    *((void *)this + 5) = v4 + 16;
  }
  else
  {
    uint64_t v14 = v8 + 16;
    ssize_t v15 = v4 - 16;
    ssize_t v16 = (_OWORD *)*((void *)this + 5);
    while (v15 < v4)
    {
      long long v17 = *(_OWORD *)v15;
      v15 += 16;
      *v16++ = v17;
    }
    *((void *)this + 5) = v16;
    if (v4 != v14) {
      memmove(&v4[-16 * ((v4 - v14) >> 4)], v8, v4 - v14);
    }
    uint64_t v26 = &v53;
    if (v8 <= (char *)&v53) {
      uint64_t v26 = &v53 + (*((void *)this + 5) > (unint64_t)&v53);
    }
    *(_OWORD *)long long v8 = *v26;
  }
  CFRange v41 = (_OWORD *)*((void *)this + 2);
  unint64_t v40 = *((void *)this + 3);
  if ((unint64_t)v41 < v40)
  {
    *CFRange v41 = v53;
    uint64_t v42 = v41 + 1;
    goto LABEL_62;
  }
  uint64_t v43 = *((void *)this + 1);
  uint64_t v44 = ((uint64_t)v41 - v43) >> 4;
  unint64_t v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 60) {
LABEL_63:
  }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  uint64_t v46 = v40 - v43;
  if (v46 >> 3 > v45) {
    unint64_t v45 = v46 >> 3;
  }
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v47 = v45;
  }
  if (v47) {
    unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v47);
  }
  else {
    uint64_t v48 = 0;
  }
  int8x16_t v49 = (_OWORD *)(v47 + 16 * v44);
  unint64_t v50 = v47 + 16 * v48;
  *int8x16_t v49 = v53;
  uint64_t v42 = v49 + 1;
  unsigned int v52 = (char *)*((void *)this + 1);
  uint64_t v51 = (char *)*((void *)this + 2);
  if (v51 != v52)
  {
    do
    {
      *--int8x16_t v49 = *((_OWORD *)v51 - 1);
      v51 -= 16;
    }
    while (v51 != v52);
    uint64_t v51 = (char *)*((void *)this + 1);
  }
  *((void *)this + 1) = v49;
  *((void *)this + 2) = v42;
  *((void *)this + 3) = v50;
  if (v51) {
    operator delete(v51);
  }
LABEL_62:
  *((void *)this + 2) = v42;
}

void sub_18FF1320C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NewAudioFileHandle(AudioFileFormatBase *a1)
{
  if (a1)
  {
    uint64_t v1 = (*(uint64_t (**)(AudioFileFormatBase *))(*(void *)a1 + 120))(a1);
    if (v1)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 136))(v1)) {
        operator new();
      }
    }
  }
  return 0;
}

void sub_18FF132EC(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A1C408233FA8ELL);
  _Unwind_Resume(a1);
}

uint64_t AudioFileFormatRegistry::Get(AudioFileFormatRegistry *this, unsigned int a2)
{
  int v4 = (_DWORD *)*((void *)this + 4);
  uint64_t v5 = *((void *)this + 5) - (void)v4;
  if (v5)
  {
    unint64_t v6 = v5 >> 4;
    do
    {
      unint64_t v7 = v6 >> 1;
      long long v8 = &v4[4 * (v6 >> 1)];
      unsigned int v10 = *v8;
      unint64_t v9 = v8 + 4;
      v6 += ~(v6 >> 1);
      if (v10 < a2) {
        int v4 = v9;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  if (*v4 == a2) {
    return *((void *)v4 + 1);
  }
  if (!AudioFileFormatRegistry::AddComponentFormats(this)) {
    return 0;
  }
  int v4 = (_DWORD *)*((void *)this + 4);
  uint64_t v12 = *((void *)this + 5) - (void)v4;
  if (v12)
  {
    unint64_t v13 = v12 >> 4;
    do
    {
      unint64_t v14 = v13 >> 1;
      ssize_t v15 = &v4[4 * (v13 >> 1)];
      unsigned int v17 = *v15;
      ssize_t v16 = v15 + 4;
      v13 += ~(v13 >> 1);
      if (v17 < a2) {
        int v4 = v16;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
  }
  if (*v4 == a2) {
    return *((void *)v4 + 1);
  }
  else {
    return 0;
  }
}

uint64_t AudioFileObject::ReadBytes(AudioFileObject *this, int a2, uint64_t a3, unsigned int *a4, void *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a4 && a5)
  {
    uint64_t v10 = *((void *)this + 9);
    if ((*(uint64_t (**)(AudioFileObject *))(*(void *)this + 224))(this) <= a3)
    {
      *a4 = 0;
      return 4294967257;
    }
    else
    {
      uint64_t v11 = v10 + a3;
      uint64_t v12 = v11 + *a4;
      uint64_t v13 = *((void *)this + 9) + (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 224))(this);
      if (v12 <= v13)
      {
        uint64_t v14 = *a4;
      }
      else
      {
        uint64_t v14 = (*(unsigned int (**)(AudioFileObject *))(*(void *)this + 224))(this)
            - v11
            + *((_DWORD *)this + 18);
        *a4 = v14;
      }
      LODWORD(result) = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 32 * (a2 == 0), v11, v14, a5, a4);
      if (result) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v12 <= v13;
      }
      if (v16) {
        return result;
      }
      else {
        return 4294967257;
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      unint64_t v18 = "AudioFileObject.cpp";
      __int16 v19 = 1024;
      int v20 = 773;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid num bytes parameter", (uint8_t *)&v17, 0x12u);
    }
    return 4294967246;
  }
}

uint64_t AudioFileObject::GetNumBytes(AudioFileObject *this)
{
  return *((void *)this + 1);
}

void CAFAudioFormat::New(CAFAudioFormat *this)
{
}

BOOL CAFAudioFormat::FileDataIsThisFormat(CAFAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  return a2 >= 4 && *a3 == 1717985635;
}

uint64_t CAFAudioFile::IsDataFormatSupported(CAFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  if (a2->mFormatID != 1819304813) {
    return 1;
  }
  UInt32 mBitsPerChannel = a2->mBitsPerChannel;
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  int v4 = (mFormatFlags >> 2) & 1;
  if (mBitsPerChannel > 8) {
    int v4 = 1;
  }
  if (v4 != 1 || (a2->mFormatFlags & 0x1F80) != 0) {
    return 0;
  }
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 mChannelsPerFrame = 1;
  }
  else {
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  }
  unsigned int v8 = (mFormatFlags >> 4) & 1;
  if (mChannelsPerFrame * ((mBitsPerChannel + 7) >> 3) == a2->mBytesPerFrame) {
    return 1;
  }
  else {
    return v8;
  }
}

uint64_t CAFAudioFile::GetEstimatedDuration(CAFAudioFile *this, double *a2)
{
  double v3 = *((double *)this + 3);
  uint64_t v4 = *((unsigned int *)this + 11);
  LODWORD(size) = 0;
  double v5 = 0.0;
  if (v3 != 0.0)
  {
    if ((*(unsigned int (**)(CAFAudioFile *, uint64_t, void, size_t *))(*(void *)this + 728))(this, 1885432692, 0, &size))
    {
      BOOL v7 = 0;
    }
    else
    {
      BOOL v7 = size >= 0x18;
    }
    if (v7)
    {
      uint64_t v11 = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v11, size, 1);
      unsigned int v8 = v11;
      if ((*(unsigned int (**)(CAFAudioFile *, uint64_t, void, void, size_t *, int8x8_t *))(*(void *)this + 744))(this, 1885432692, 0, 0, &size, v11))
      {
        if (!v8) {
          goto LABEL_12;
        }
      }
      else
      {
        int8x16_t v9 = vrev64q_s8(*(int8x16_t *)v8->i8);
        *(int8x16_t *)v8->i8 = v9;
        v8[2] = vrev32_s8(v8[2]);
        double v5 = (double)(v9.i64[1] & ~(v9.i64[1] >> 63)) / v3;
      }
      free(v8);
    }
    else
    {
      double v5 = (double)((*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 240))(this) * v4) / v3;
    }
  }
LABEL_12:
  *a2 = v5;
  return 0;
}

void sub_18FF138CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::OpenFromDataSource(CAFAudioFile *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 784))(this);
  if (v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    uint64_t v4 = "CAFAudioFile.cpp";
    __int16 v5 = 1024;
    int v6 = 1146;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAFAudioFile::OpenFromDataSource Failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

uint64_t CAFAudioFile::GetUserChunkSize(CAFAudioFile *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result = 1667787583;
  unsigned int v8 = (char *)this + 144;
  uint64_t v6 = *((void *)this + 18);
  uint64_t v7 = *((void *)v8 + 1);
  uint64_t v9 = v7 - v6;
  if (v7 != v6)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    unsigned int v13 = 1;
    do
    {
      if (*(_DWORD *)(v6 + 24 * v10) == a2)
      {
        if (v11 == a3)
        {
          uint64_t result = 0;
          *a4 = *(_DWORD *)(v6 + 24 * v10 + 8) - 12;
          return result;
        }
        ++v11;
      }
      uint64_t v10 = v13;
    }
    while (v12 > v13++);
  }
  return result;
}

void AIFFAudioFormat::New(AIFFAudioFormat *this)
{
}

BOOL AIFFAudioFormat::ExtensionIsThisFormat(AIFFAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3 = 1;
  if (CFStringCompare(theString1, @"aiff", 1uLL)) {
    return CFStringCompare(theString1, @"aif", 1uLL) == kCFCompareEqualTo;
  }
  return v3;
}

BOOL AIFFAudioFormat::FileDataIsThisFormat(AIFFAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  if (a2 < 0xC) {
    return 0;
  }
  return *a3 == 1297239878 && a3[2] == 1179011393;
}

BOOL CAFAudioFormat::ExtensionIsThisFormat(CAFAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3 = 1;
  if (CFStringCompare(theString1, @"caf", 1uLL)) {
    return CFStringCompare(theString1, @"caff", 1uLL) == kCFCompareEqualTo;
  }
  return v3;
}

BOOL AIFFAudioFile::IsDataFormatSupported(AIFFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  signed int mFormatID = a2->mFormatID;
  if (mFormatID == 1667326771) {
    return 1;
  }
  int v3 = *((_DWORD *)this + 21);
  if (v3 != 1095321155)
  {
    if (v3 == 1095321158)
    {
      if (mFormatID != 1819304813) {
        return 0;
      }
      AudioFormatFlags mFormatFlags = a2->mFormatFlags;
      if ((mFormatFlags & 5) != 4) {
        return 0;
      }
      if ((mFormatFlags & 2) != 0) {
        return 1;
      }
      return a2->mBitsPerChannel < 9 || (*((unsigned char *)this + 100) & 2) == 0;
    }
    goto LABEL_22;
  }
  uint64_t v5 = 0;
  if (mFormatID > 1634169708)
  {
    if (mFormatID <= 1768775987)
    {
      if (mFormatID == 1634169709) {
        goto LABEL_22;
      }
      int v6 = 1634492791;
    }
    else
    {
      if (mFormatID == 1768775988 || mFormatID == 1970037111) {
        goto LABEL_22;
      }
      int v6 = 1819304813;
    }
  }
  else if (mFormatID <= 1363430705)
  {
    if (mFormatID == 1296122675) {
      goto LABEL_22;
    }
    int v6 = 1296122678;
  }
  else
  {
    if (mFormatID == 1363430706 || mFormatID == 1363430723) {
      goto LABEL_22;
    }
    int v6 = 1365470320;
  }
  if (mFormatID == v6)
  {
LABEL_22:
    if (mFormatID != 1819304813 || (a2->mFormatFlags & 2) != 0) {
      return 1;
    }
    return a2->mBitsPerChannel < 9 || (*((unsigned char *)this + 100) & 2) == 0;
  }
  return v5;
}

int8x16_t AudioChannelLayout_BtoN(AudioChannelLayout *a1, unint64_t a2)
{
  unint64_t v2 = a2 - 12;
  if (a2 >= 0xC)
  {
    *(int8x8_t *)result.i8 = vrev32_s8(*(int8x8_t *)&a1->mChannelLayoutTag);
    *(void *)&a1->__int32 mChannelLayoutTag = result.i64[0];
    UInt32 v4 = bswap32(a1->mNumberChannelDescriptions);
    a1->mNumberChannelDescriptions = v4;
    if (a2 >= 0x20)
    {
      if (v4 >= (((unint64_t)(a2 & 0xFFFFFFFC) - 12) / 0x14)) {
        UInt32 v4 = ((unint64_t)(a2 & 0xFFFFFFFC) - 12) / 0x14;
      }
      a1->mNumberChannelDescriptions = v4;
      if (20 * (unint64_t)v4 <= v2) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = (v2 / 0x14);
      }
      if (v5)
      {
        int v6 = (unsigned int *)&a1->mChannelDescriptions[0].mCoordinates[2];
        do
        {
          int8x16_t result = vrev32q_s8(*((int8x16_t *)v6 - 1));
          *((int8x16_t *)v6 - 1) = result;
          *int v6 = bswap32(*v6);
          v6 += 5;
          --v5;
        }
        while (v5);
      }
    }
  }
  return result;
}

void DSPGraph::Interpreter::parseNamedFormatCommand(DSPGraph::Interpreter *this, const char **a2)
{
  memset(&v9, 0, 24);
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&v9) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "parseNamedFormatCommand");
    std::string::basic_string[abi:ne180100]<0>(&v7, "named format : expected name.");
    DSPGraph::ThrowException(1886548769, v5, 1178, &v8, &v7);
  }
  long long v6 = 0u;
  memset(v5, 0, sizeof(v5));
  DWORD2(v6) = 1;
  if ((DSPGraph::Interpreter::parseFormat((DSPGraph *)a2, (uint64_t)v5) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "parseNamedFormatCommand");
    std::string::basic_string[abi:ne180100]<0>(&v4, "named format : expected format.");
    DSPGraph::ThrowException(1886548769, &v8, 1183, &v7, &v4);
  }
  DSPGraph::Graph::setFormat(*((void *)this + 1), &v9, (DSPGraph *)v5);
  if (SHIBYTE(v9.mFramesPerPacket) < 0) {
    operator delete(*(void **)&v9.mSampleRate);
  }
}

void sub_18FF13F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v31 - 41) < 0) {
    operator delete(*(void **)(v31 - 64));
  }
  if (*(char *)(v31 - 17) < 0) {
    operator delete(*(void **)(v31 - 40));
  }
  _Unwind_Resume(exception_object);
}

char *DSPGraph::Graph::setFormat(uint64_t a1, AudioStreamBasicDescription *a2, DSPGraph *this)
{
  if (*(unsigned char *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "setFormat");
    std::string::basic_string[abi:ne180100]<0>(&v11, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v13, 2996, &v12, &v11);
  }
  if (*((_DWORD *)this + 2) == 1718773105 && *((_DWORD *)this + 8) != 64)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "setFormat");
    std::string::basic_string[abi:ne180100]<0>(&v11, "frequency domain format should be 64 bits.");
    DSPGraph::ThrowException(1718449215, &v13, 3000, &v12, &v11);
  }
  if (*(double *)this != floor(*(double *)this))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "setFormat");
    std::string::basic_string[abi:ne180100]<0>(&v11, "only integer sample rates are supported.");
    DSPGraph::ThrowException(1718449215, &v13, 3004, &v12, &v11);
  }
  if (!DSPGraph::MinimalSafetyCheck(this, a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "setFormat");
    std::string::basic_string[abi:ne180100]<0>(&v11, "format failed sanity check.");
    DSPGraph::ThrowException(1718449215, &v13, 3007, &v12, &v11);
  }
  long long v6 = (uint64_t *)(a1 + 600);
  *(void *)&long long v13 = a2;
  long long v7 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)a2, (long long **)&v13);
  long long v8 = *(_OWORD *)this;
  long long v9 = *((_OWORD *)this + 1);
  *(_OWORD *)(v7 + 68) = *(_OWORD *)((char *)this + 28);
  *(_OWORD *)(v7 + 56) = v9;
  *(_OWORD *)(v7 + 40) = v8;
  *(void *)&long long v13 = a2;
  return std::__hash_table<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)a2, (long long **)&v13)+ 40;
}

void sub_18FF141F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::FormatAndBlockSize>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    long long v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      long long v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          long long v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  long long v13 = (char *)operator new(0x58uLL);
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = v8;
  ssize_t v15 = (std::string *)(v13 + 16);
  BOOL v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  unint64_t v18 = a1 + 2;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 20) = 1;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int64_t v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          uint64_t v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *uint64_t v28 = *v34;
                  void *v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                uint64_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  int v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)long long v13 = *v37;
LABEL_75:
    void *v37 = v13;
    goto LABEL_76;
  }
  *(void *)long long v13 = *v18;
  void *v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    int v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_18FF14690(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

BOOL DSPGraph::MinimalSafetyCheck(DSPGraph *this, const AudioStreamBasicDescription *a2)
{
  BOOL result = 0;
  if (*(double *)this >= 0.0 && *(double *)this < 3000000.0)
  {
    unsigned int v4 = *((_DWORD *)this + 4);
    if (v4 >= 0xF4240) {
      return 0;
    }
    unsigned int v5 = *((_DWORD *)this + 5);
    if (v5 >= 0xF4240) {
      return 0;
    }
    unsigned int v6 = *((_DWORD *)this + 6);
    if (v6 >= 0xF4240) {
      return 0;
    }
    BOOL result = 0;
    if ((*((_DWORD *)this + 7) - 1) > 0x3FF || *((_DWORD *)this + 8) > 0x400u) {
      return result;
    }
    int v7 = *((_DWORD *)this + 2);
    if (!v7) {
      return 0;
    }
    BOOL v9 = v5 == 1 && v4 == v6;
    return v7 != 1819304813 || v9;
  }
  return result;
}

void DSPGraph::createAbsoluteURL(DSPGraph *this, const __CFString *a2, const __CFString *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v7 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, kCFURLPOSIXPathStyle, 0);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v43, v7);
  if (!v43)
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v41, "createAbsoluteURL");
    applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v33, a2);
    ssize_t v15 = (const __CFString **)applesauce::CF::StringRef::operator->(&v33);
    std::string::basic_string[abi:ne180100]<0>(v38, "???");
    double v17 = applesauce::CF::StringRef_proxy::convert_or(&v39, *v15, (uint64_t)v38);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v18 = &v39;
    }
    else {
      unint64_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    DSPGraph::strprintf((DSPGraph *)"Could not create URL from file path '%s'. CFURLCreateWithFileSystemPath failed.", v16, v17, v18);
  }
  CFURLRef v8 = CFURLGetBaseURL(v43);
  CFURLRef v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v42, v9);
  if ((void)v42)
  {
    CFRelease((CFTypeRef)v42);
    if (!a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v41, "createAbsoluteURL");
      std::string::basic_string[abi:ne180100]<0>(&v40, "Property strip resource path required if path is relative");
      DSPGraph::ThrowException(1886548769, &v42, 2016, &v41, &v40);
    }
    CFURLRef v10 = CFURLCreateWithFileSystemPath(v6, a3, kCFURLPOSIXPathStyle, 1u);
    applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&cf, v10);
    if (!cf)
    {
      std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v41, "createAbsoluteURL");
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v33, a3);
      float v19 = (const __CFString **)applesauce::CF::StringRef::operator->(&v33);
      std::string::basic_string[abi:ne180100]<0>(v36, "???");
      double v21 = applesauce::CF::StringRef_proxy::convert_or(&v39, *v19, (uint64_t)v36);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v22 = &v39;
      }
      else {
        unint64_t v22 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Could not create file URL from path '%s'.", v20, v21, v22);
    }
    CFURLRef v11 = (const __CFURL *)MEMORY[0x192FC7420](0, a2, 0, 0);
    CFURLRef v12 = v11;
    v35[1] = v11;
    if (!v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    CFURLRef v13 = CFURLCopyAbsoluteURL(v11);
    applesauce::CF::URLRef::URLRef(this, v13);
    if (!*(void *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(&v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v41, "createAbsoluteURL");
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)v35, a2);
      uint64_t v24 = (const __CFString **)applesauce::CF::StringRef::operator->(v35);
      std::string::basic_string[abi:ne180100]<0>(v34, "???");
      CFStringRef v25 = *v24;
      uint64_t v26 = &v39;
      applesauce::CF::StringRef_proxy::convert_or(&v39, v25, (uint64_t)v34);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v26 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v32, a3);
      uint64_t v27 = (const __CFString **)applesauce::CF::StringRef::operator->(&v32);
      std::string::basic_string[abi:ne180100]<0>(v31, "???");
      double v29 = applesauce::CF::StringRef_proxy::convert_or(&v33, *v27, (uint64_t)v31);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint8x8_t v30 = &v33;
      }
      else {
        uint8x8_t v30 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Could not create absolute URL from path '%s' with base '%s'.", v28, v29, v26, v30);
    }
    CFRelease(v12);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    CFURLRef v14 = v43;
    if (v43) {
      CFRetain(v43);
    }
    *(void *)this = v14;
  }
  if (v43) {
    CFRelease(v43);
  }
}

void sub_18FF14B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,const void *a30,const void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,const void *a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v45 - 105) < 0) {
    operator delete(*(void **)(v45 - 128));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  applesauce::CF::StringRef::~StringRef(&a17);
  if (*(char *)(v45 - 129) < 0) {
    operator delete(*(void **)(v45 - 152));
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  applesauce::CF::StringRef::~StringRef(&a30);
  if (*(char *)(v45 - 81) < 0) {
    operator delete(*(void **)(v45 - 104));
  }
  if (*(char *)(v45 - 57) < 0) {
    operator delete(*(void **)(v45 - 80));
  }
  applesauce::CF::URLRef::~URLRef(v44);
  applesauce::CF::URLRef::~URLRef(&a31);
  applesauce::CF::URLRef::~URLRef(&a38);
  applesauce::CF::URLRef::~URLRef((const void **)(v45 - 56));
  _Unwind_Resume(a1);
}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return this;
}

void sub_18FF14E2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t EmbeddedComponentManager::registerInternalAudioUnits(EmbeddedComponentManager *this)
{
  __int16 v1 = tkqMjk4y;
  SecTaskRef AppBooleanValue = (SecTaskRef)CACFPreferencesGetAppBooleanValue(@"AllAUsPublic", @"com.apple.coreaudio", 0);
  if ((AppBooleanValue & 1) == 0 && (v1 & 0xC000) == 0)
  {
    SecTaskRef AppBooleanValue = SecTaskCreateFromSelf(0);
    if (AppBooleanValue)
    {
      SecTaskRef v3 = AppBooleanValue;
      CFBooleanRef v4 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(AppBooleanValue, @"com.apple.coreaudio.register-internal-aus", 0);
      if (v4)
      {
        CFBooleanRef v5 = v4;
        CFTypeID v6 = CFGetTypeID(v4);
        if (v6 == CFBooleanGetTypeID() && CFBooleanGetValue(v5)) {
          atomic_fetch_or(&tkqMjk4y, 0x8000u);
        }
        CFRelease(v5);
      }
      CFRelease(v3);
    }
  }
  SystemAUsSoftLink::instance(AppBooleanValue);
  CFURLRef v7 = (SystemAUsSoftLink *)SystemAUsSoftLink::instance(void)::global();
  SystemAUsSoftLink::instance(v7);
  off_1EB3D5060();
  CFURLRef v8 = *(uint64_t (**)(void))(*(void *)GetAudioDSPManager() + 24);
  return v8();
}

void SystemAUsSoftLink::instance(SystemAUsSoftLink *this)
{
  {
    if (v1)
    {
      SystemAUsSoftLink::SystemAUsSoftLink(v1);
    }
  }
}

void sub_18FF14FFC(_Unwind_Exception *a1)
{
}

void SystemAUsSoftLink::SystemAUsSoftLink(SystemAUsSoftLink *this)
{
  SystemAUsSoftLink::instance(void)::global = 0;
  off_1EB3D5060 = 0;
  off_1EB3D5068 = 0;
  __int16 v1 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libEmbeddedSystemAUs.dylib", 1);
  if (!v1) {
    __assert_rtn("SystemAUsSoftLink", "AudioToolboxSoftLink.h", 58, "lib != nullptr");
  }
  unint64_t v2 = v1;
  DLSymbol<void ()(void)>::init(&SystemAUsSoftLink::instance(void)::global, v1, "RegisterAudioUnits_Toolbox");
  DLSymbol<void ()(void)>::init(&off_1EB3D5060, v2, "RegisterAudioUnits_Instruments");
  off_1EB3D5068 = dlsym(v2, "AudioOutputUnitPublish_Impl");
  if (!off_1EB3D5068) {
    __assert_rtn("init", "DLSymbol.h", 23, "mImpl != nullptr");
  }
}

void *DLSymbol<void ()(void)>::init(void *a1, void *__handle, char *__symbol)
{
  BOOL result = dlsym(__handle, __symbol);
  *a1 = result;
  if (!result) {
    __assert_rtn("init", "DLSymbol.h", 23, "mImpl != nullptr");
  }
  return result;
}

uint64_t GetAudioDSPManager()
{
  {
    GetAudioDSPManager::$_0::operator()();
    GetAudioDSPManager::instance = v1;
  }
  return GetAudioDSPManager::instance;
}

void sub_18FF15188(_Unwind_Exception *a1)
{
}

void GetAudioDSPManager::$_0::operator()()
{
  uint64_t v0 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (!v0)
  {
    dlerror();
    abort_report_np();
    goto LABEL_7;
  }
  uint64_t v1 = (void (*)(void))dlsym(v0, "GetAudioDSPManager");
  if (!v1)
  {
LABEL_7:
    dlerror();
    unint64_t v2 = (std::exception *)abort_report_np();
    DSPGraph::Exception::~Exception(v2);
    return;
  }
  v1();
}

void DSPGraph::Exception::~Exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1EDF9E170;
  if (SHIBYTE(this[11].__vftable) < 0) {
    operator delete(this[9].__vftable);
  }
  if (SHIBYTE(this[8].__vftable) < 0) {
    operator delete(this[6].__vftable);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1EDF9E170;
  if (SHIBYTE(this[11].__vftable) < 0) {
    operator delete(this[9].__vftable);
  }
  if (SHIBYTE(this[8].__vftable) < 0) {
    operator delete(this[6].__vftable);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x192FC8940);
}

unint64_t AT::RingBuffer::FetchAllWithZeroes(AT::RingBuffer *this, AudioBufferList *a2, unsigned int a3, uint64_t a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v13 = *((void *)this + 6);
  size_t v14 = *(_DWORD *)(v13 + 48) * a3;
  uint64_t v15 = a4 + a3;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  unint64_t v16 = AT::RingBuffer::Impl::CheckTimeBounds2((AT::RingBuffer::Impl *)v13, a4, v15, &v63, &v62);
  if (v16 == 4)
  {
    *a5 = a3;
    *a7 = 0;
    *a6 = 0;
    if (a2->mNumberBuffers)
    {
      unint64_t v17 = 0;
      uint64_t v18 = 16;
      do
      {
        bzero(*(void **)((char *)&a2->mNumberBuffers + v18), v14);
        ++v17;
        v18 += 16;
      }
      while (v17 < a2->mNumberBuffers);
      LODWORD(v19) = 4;
    }
    else
    {
      LODWORD(v19) = 4;
    }
  }
  else
  {
    __int16 v57 = a7;
    int v58 = a6;
    unsigned int v56 = a3;
    unint64_t v20 = (v63 - a4) & ~((v63 - a4) >> 63);
    if (v20 >= a3) {
      LODWORD(v20) = a3;
    }
    unint64_t v52 = a3;
    uint64_t v53 = v15;
    unint64_t v21 = (v15 - v62) & ~((v15 - v62) >> 63);
    if (v21 >= a3) {
      LODWORD(v21) = a3;
    }
    unsigned int v54 = v21;
    uint64_t v55 = a5;
    int v51 = *(_DWORD *)(v13 + 48);
    uint64_t v59 = v62;
    if (v62 > v63)
    {
      uint64_t v22 = (v51 * v20);
      uint64_t v23 = *(int *)(v13 + 40);
      uint64_t v24 = ((v23 & ((int)(v63 % v23) >> 31)) + (v63 % v23)) * v51;
      size_t v25 = ((v23 & ((int)(v62 % v23) >> 31)) + (v62 % v23)) * v51;
      if (v24 >= v25)
      {
        if (a2->mNumberBuffers)
        {
          size_t __n = v25;
          unint64_t v30 = 0;
          size_t v31 = *(unsigned int *)(v13 + 52) - v24;
          uint64_t v32 = *(void *)(v13 + 64);
          uint64_t v33 = 16;
          do
          {
            memcpy((void *)(*(void *)((char *)&a2->mNumberBuffers + v33) + v22), (const void *)(*(void *)(v32 + v33) + v24), v31);
            ++v30;
            unint64_t mNumberBuffers = a2->mNumberBuffers;
            v33 += 16;
          }
          while (v30 < mNumberBuffers);
          if (mNumberBuffers)
          {
            unint64_t v35 = 0;
            size_t v36 = v31 + v22;
            uint64_t v37 = *(void *)(v13 + 64);
            uint64_t v38 = 16;
            do
            {
              memcpy((void *)(*(void *)((char *)&a2->mNumberBuffers + v38) + v36), *(const void **)(v37 + v38), __n);
              ++v35;
              v38 += 16;
            }
            while (v35 < a2->mNumberBuffers);
          }
        }
      }
      else if (a2->mNumberBuffers)
      {
        unint64_t v26 = 0;
        size_t v27 = v25 - v24;
        uint64_t v28 = *(void *)(v13 + 64);
        uint64_t v29 = 16;
        do
        {
          memcpy((void *)(*(void *)((char *)&a2->mNumberBuffers + v29) + v22), (const void *)(*(void *)(v28 + v29) + v24), v27);
          ++v26;
          v29 += 16;
        }
        while (v26 < a2->mNumberBuffers);
      }
    }
    uint64_t v61 = 0;
    unint64_t v19 = AT::RingBuffer::Impl::CheckTimeBounds2((AT::RingBuffer::Impl *)v13, a4, v53, &v61, &v60);
    uint64_t v39 = v61;
    if (v59 < v61) {
      uint64_t v39 = v59;
    }
    unint64_t v40 = (v39 - a4) & ~((v39 - a4) >> 63);
    if (v40 >= v52) {
      unsigned int v41 = v52;
    }
    else {
      unsigned int v41 = v40;
    }
    if (v41 && a2->mNumberBuffers)
    {
      unint64_t v42 = 0;
      size_t v43 = *(_DWORD *)(v13 + 48) * v41;
      uint64_t v44 = 16;
      do
      {
        bzero(*(void **)((char *)&a2->mNumberBuffers + v44), v43);
        ++v42;
        v44 += 16;
      }
      while (v42 < a2->mNumberBuffers);
    }
    if (v54 && a2->mNumberBuffers)
    {
      unint64_t v45 = 0;
      uint64_t v46 = 16;
      do
      {
        bzero((void *)(*(void *)((char *)&a2->mNumberBuffers + v46) + v14 - v51 * v54), v51 * v54);
        ++v45;
        v46 += 16;
      }
      while (v45 < a2->mNumberBuffers);
    }
    *uint64_t v55 = v41;
    *__int16 v57 = v54;
    unsigned int *v58 = v56 - (v54 + v41);
    uint64_t v47 = a2->mNumberBuffers;
    if (v47)
    {
      p_UInt32 mDataByteSize = &a2->mBuffers[0].mDataByteSize;
      do
      {
        *p_UInt32 mDataByteSize = v14;
        p_mDataByteSize += 4;
        --v47;
      }
      while (v47);
    }
    unint64_t v16 = v19;
  }
  return v16 & 0xFFFFFFFF00000000 | v19;
}

unint64_t AT::RingBuffer::Impl::CheckTimeBounds2(AT::RingBuffer::Impl *this, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (a3 >= a2)
  {
    TimeBounds = AT::RingBuffer::Impl::GetTimeBounds(v14, (uint64_t)this);
    uint64_t v7 = v14[0];
    if (v15)
    {
      uint64_t v12 = v14[1];
      *a4 = a2;
      *a5 = a3;
      if (v7 <= a2)
      {
        if (v12 >= a3)
        {
          std::system_category();
          LODWORD(v7) = 0;
          unint64_t v6 = 0;
        }
        else
        {
          *a5 = v12;
          if (v12 <= a2)
          {
            *a4 = v12;
            AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
            unint64_t v6 = 0;
            LODWORD(v7) = 2;
          }
          else
          {
            AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
            unint64_t v6 = 0;
            LODWORD(v7) = 1;
          }
        }
      }
      else
      {
        *a4 = v7;
        if (v12 >= a3)
        {
          if (v7 >= a3)
          {
            *a5 = v7;
            AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
            unint64_t v6 = 0;
            LODWORD(v7) = -2;
          }
          else
          {
            AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
            unint64_t v6 = 0;
            LODWORD(v7) = -1;
          }
        }
        else
        {
          *a5 = v12;
          AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
          unint64_t v6 = 0;
          LODWORD(v7) = 3;
        }
      }
    }
    else
    {
      unint64_t v6 = v14[0] & 0xFFFFFFFF00000000;
    }
  }
  else
  {
    AT::RingBufferErrorCategory::instance(this);
    unint64_t v6 = 0;
    LODWORD(v7) = -50;
  }
  return v6 & 0xFFFFFFFF00000000 | v7;
}

uint64_t *AT::RingBuffer::Impl::GetTimeBounds(uint64_t *this, uint64_t a2)
{
  unint64_t v2 = this;
  int v3 = 8;
  while (1)
  {
    unsigned int v4 = atomic_load((unsigned int *)(a2 + 944));
    uint64_t v5 = a2 + 176 + 24 * (v4 & 0x1F);
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *(uint64_t **)(v5 + 8);
    if (*(_DWORD *)(v5 + 16) == v4) {
      break;
    }
    if (!--v3)
    {
      this = AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)this);
      char v8 = 0;
      uint64_t v7 = &AT::RingBufferErrorCategory::instance(void)::global;
      uint64_t v6 = 4;
      goto LABEL_6;
    }
  }
  char v8 = 1;
LABEL_6:
  uint64_t *v2 = v6;
  v2[1] = (uint64_t)v7;
  *((unsigned char *)v2 + 16) = v8;
  return this;
}

void DSPGraph::Graph::Graph(DSPGraph::Graph *this)
{
  *(void *)this = &unk_1EDF9CAC8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((void *)this + 16) = 850045863;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 90) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 449) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_DWORD *)this + 138) = 1065353216;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 1065353216;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 158) = 1065353216;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_DWORD *)this + 168) = 1065353216;
  *((void *)this + 91) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 95) = 0;
  *((void *)this + 96) = DSPGraph::Graph::generateSerialNumber(this);
  *((void *)this + 101) = 0;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((_DWORD *)this + 204) = 1065353216;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_DWORD *)this + 214) = 1065353216;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_DWORD *)this + 224) = 1065353216;
  *((void *)this + 113) = 0;
  *((void *)this + 115) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 116) = 0x7F6E6F726DLL;
  *((unsigned char *)this + 936) = 0;
  *((_DWORD *)this + 235) = 1667327590;
  *((void *)this + 118) = &unk_1EDF98450;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_DWORD *)this + 246) = 1065353216;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((void *)this + 135) = 0;
  *((_DWORD *)this + 272) = 1065353216;
  operator new();
}

void sub_18FF15A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v34 = v22;
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>>>::~__hash_table(v18 + 1056);
  std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](v26);
  std::unique_ptr<DSPGraph::Graph::profiler_t>::reset[abi:ne180100]((uint64_t *)(v18 + 1016), 0);
  a18 = a11;
  std::vector<DSPGraph::Graph::GraphBridge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  *(void *)(v18 + 944) = v23;
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table(v21);
  a18 = a12;
  std::vector<std::unique_ptr<DSPGraph::Subset>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table(v18 + 784);
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Graph>>::reset[abi:ne180100](v24, 0);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table(v18 + 640);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table(v25);
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::~__hash_table(v18 + 560);
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::~__hash_table(v18 + 520);
  uint64_t v28 = *(void **)(v18 + 496);
  if (v28)
  {
    *(void *)(v18 + 504) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 480) = v29;
    operator delete(v29);
  }
  if (*(char *)(v18 + 455) < 0) {
    operator delete(*(void **)(v18 + 432));
  }
  if (*(char *)(v18 + 431) < 0) {
    operator delete(*v19);
  }
  unint64_t v30 = *(void **)(v18 + 304);
  if (v30)
  {
    *(void *)(v18 + 312) = v30;
    operator delete(v30);
  }
  size_t v31 = (void **)(v18 + 256);
  uint64_t v32 = *(void **)(v18 + 280);
  if (v32)
  {
    *(void *)(v18 + 288) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v31;
  if (*v31)
  {
    *(void *)(v18 + 264) = v33;
    operator delete(v33);
  }
  std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::~__hash_table(v18 + 216);
  a18 = v18 + 192;
  std::vector<std::unique_ptr<DSPGraph::InternalBuffer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::mutex::~mutex(a14);
  std::__hash_table<std::unique_ptr<DSPGraph::Box>,std::hash<std::unique_ptr<DSPGraph::Box>>,std::equal_to<std::unique_ptr<DSPGraph::Box>>,std::allocator<std::unique_ptr<DSPGraph::Box>>>::~__hash_table(a17);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Graph>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::~lf_read_synchronized_write(v2 + 64);
    caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::~lf_read_synchronized_write(v2);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::lf_read_synchronized_write(caulk::concurrent::details::lf_read_sync_write_impl *a1)
{
  uint64_t result = caulk::concurrent::details::lf_read_sync_write_impl::lf_read_sync_write_impl(a1);
  *(_WORD *)(result + 8) = 1;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void DSPGraph::Interpreter::parseGraphNameCommand(DSPGraph::Interpreter *this, const char **a2)
{
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)v7) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "parseGraphNameCommand");
    std::string::basic_string[abi:ne180100]<0>(&v4, "expected a string in 'graphName' command");
    DSPGraph::ThrowException(1886548769, &v6, 1152, &v5, &v4);
  }
  if (v8 >= 0) {
    int v3 = (const std::string::value_type *)v7;
  }
  else {
    int v3 = (const std::string::value_type *)v7[0];
  }
  std::string::__assign_external((std::string *)(*((void *)this + 1) + 408), v3);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_18FF15D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  ResolvedOpaqueRef<AudioConverterAPI>::ResolvedOpaqueRef((uint64_t)v9, (int)inAudioConverter);
  uint64_t v1 = v13;
  if (!v13)
  {
    OSStatus v2 = -50;
    goto LABEL_12;
  }
  if (*((unsigned char *)v13 + 12) || !*((unsigned char *)v13 + 13))
  {
    v4[0] = 0;
    char v8 = 0;
    goto LABEL_4;
  }
  int v15 = 2741;
  long long v16 = 0u;
  long long v17 = 0u;
  kdebug_trace();
  v4[0] = 1;
  int v5 = 2741;
  long long v6 = 0u;
  long long v7 = 0u;
  v14[0] = 0;
  char v8 = 1;
  AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v14);
  uint64_t v1 = v13;
  if (v13)
  {
LABEL_4:
    if (v11)
    {
      atomic_fetch_add(v11, 0xFFFFFFFF);
      if (v10) {
        char v10 = 0;
      }
      CFURLRef v11 = 0;
    }
    BaseOpaqueObject::destroyOpaqueRef(v1);
    (*(void (**)(BaseOpaqueObject *))(*(void *)v1 + 8))(v1);
    uint64_t v13 = 0;
    if (!v8) {
      goto LABEL_10;
    }
  }
  AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v4);
LABEL_10:
  OSStatus v2 = 0;
LABEL_12:
  if (v12 && v11) {
    atomic_fetch_add(v11, 0xFFFFFFFF);
  }
  return v2;
}

void sub_18FF15FB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_18FF16000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, atomic_uint *a19, char a20)
{
  if (a20)
  {
    if (a19) {
      atomic_fetch_add(a19, 0xFFFFFFFF);
    }
  }
  _Unwind_Resume(a1);
}

void acv2::AudioConverterV2::~AudioConverterV2(acv2::AudioConverterChain **this)
{
  *this = (acv2::AudioConverterChain *)&unk_1EDF95598;
  std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100](this + 4, 0);
  AudioConverterAPI::~AudioConverterAPI((AudioConverterAPI *)this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *this = (acv2::AudioConverterChain *)&unk_1EDF95598;
  std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100](this + 4, 0);
  AudioConverterAPI::~AudioConverterAPI((AudioConverterAPI *)this);
}

void AudioConverterAPI::~AudioConverterAPI(AudioConverterAPI *this)
{
  *(void *)this = &unk_1EDF91D50;
  if (*((unsigned char *)this + 28))
  {
    *((unsigned char *)this + 28) = 0;
    kdebug_trace();
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t AT::RingBuffer::Clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  uint64_t v2 = v1 + 176;
  do
  {
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    v2 += 24;
  }
  while (v2 != v1 + 944);
  atomic_store(0, (unsigned int *)(v1 + 944));
  *(unsigned char *)(v1 + 948) = 1;
  return this;
}

uint64_t DSPGraph::Preprocessor::def(void *a1, unsigned __int8 **a2)
{
  uint64_t v2 = a1[1];
  if (a1[2] == v2) {
    goto LABEL_25;
  }
  unint64_t v3 = a1[4];
  size_t v4 = (uint64_t *)(v2 + 8 * (v3 >> 9));
  uint64_t v5 = *v4;
  uint64_t v6 = *v4 + 8 * (v3 & 0x1FF);
  uint64_t v7 = *(void *)(v2 + (((a1[5] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v3) & 0x1FF);
  if (v6 != v7)
  {
    char v8 = *((unsigned char *)a2 + 23);
    if (v8 >= 0) {
      unint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      unint64_t v9 = a2[1];
    }
    if (v8 >= 0) {
      char v10 = (unsigned __int8 *)a2;
    }
    else {
      char v10 = *a2;
    }
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(*(void *)v6 + 31);
      if ((v11 & 0x80u) == 0) {
        char v12 = (unsigned __int8 *)*(unsigned __int8 *)(*(void *)v6 + 31);
      }
      else {
        char v12 = *(unsigned __int8 **)(*(void *)v6 + 16);
      }
      if (v12 == v9)
      {
        uint64_t v13 = (const void **)(*(void *)v6 + 8);
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*v13, v10, *(void *)(*(void *)v6 + 16))) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!*(unsigned char *)(*(void *)v6 + 31)) {
            goto LABEL_24;
          }
          size_t v14 = v10;
          while (*(unsigned __int8 *)v13 == *v14)
          {
            uint64_t v13 = (const void **)((char *)v13 + 1);
            ++v14;
            if (!--v11) {
              goto LABEL_24;
            }
          }
        }
      }
      v6 += 8;
      if (v6 - v5 == 4096)
      {
        uint64_t v15 = v4[1];
        ++v4;
        uint64_t v5 = v15;
        uint64_t v6 = v15;
      }
    }
    while (v6 != v7);
LABEL_25:
    operator new();
  }
LABEL_24:
  if (v6 == v7) {
    goto LABEL_25;
  }
  return *(void *)v6;
}

void sub_18FF1630C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::StringSubMacro::StringSubMacro(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = &unk_1EDF9CB28;
  uint64_t v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EDF98190;
  uint64_t v7 = (std::string *)(a1 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 72) = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(unsigned char *)(a1 + 80) = 0;
  return a1;
}

void sub_18FF1641C(_Unwind_Exception *a1)
{
  DSPGraph::Macro::~Macro(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::unique_ptr<DSPGraph::Macro>>::__add_front_capacity(char **a1)
{
  unint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  uint64_t v5 = a1[4];
  if (v4 - (unint64_t)&v5[(void)a1[5]] < 0x200)
  {
    long long v6 = a1[3];
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    if (v2 - v3 >= (unint64_t)v8)
    {
      if (v6 == v7) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = v8 >> 2;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v12);
      uint64_t v15 = v14;
      long long v16 = operator new(0x1000uLL);
      if (v15)
      {
        long long v17 = &v13[8 * v15];
      }
      else
      {
        unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(1uLL);
        long long v17 = &v30[8 * v31];
        if (v13) {
          operator delete(v13);
        }
        uint64_t v13 = v30;
      }
      *(void *)uint64_t v13 = v16;
      uint64_t v32 = v13 + 8;
      uint64_t v33 = a1[1];
      if (v33 == a1[2])
      {
        size_t v36 = v13;
        uint64_t v34 = v13;
        unint64_t v50 = v13 + 8;
      }
      else
      {
        uint64_t v34 = v13;
        do
        {
          if (v32 == v17)
          {
            if (v13 <= v34)
            {
              if (v32 == v34) {
                unint64_t v41 = 1;
              }
              else {
                unint64_t v41 = (v32 - v34) >> 2;
              }
              unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v41);
              uint64_t v44 = v42;
              size_t v36 = &v42[8 * (v41 >> 2)];
              unint64_t v35 = v36;
              uint64_t v45 = v32 - v13;
              if (v32 != v13)
              {
                unint64_t v35 = &v36[v45 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v46 = 8 * (v45 >> 3);
                uint64_t v47 = v36;
                do
                {
                  uint64_t v48 = *(void *)v13;
                  v13 += 8;
                  *(void *)uint64_t v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              uint64_t v32 = &v42[8 * v43];
              if (v34) {
                operator delete(v34);
              }
              uint64_t v34 = v44;
            }
            else
            {
              uint64_t v37 = (v13 - v34) >> 3;
              if (v37 >= -1) {
                uint64_t v38 = v37 + 1;
              }
              else {
                uint64_t v38 = v37 + 2;
              }
              uint64_t v39 = v32;
              if (v32 != v13)
              {
                memmove(&v13[-8 * (v38 >> 1)], v13, v32 - v13);
                uint64_t v39 = v13;
              }
              uint64_t v40 = -(v38 >> 1);
              unint64_t v35 = &v32[-8 * (v38 >> 1)];
              size_t v36 = &v39[8 * v40];
            }
          }
          else
          {
            unint64_t v35 = v32;
            size_t v36 = v13;
            uint64_t v32 = v17;
          }
          long long v17 = v32;
          uint64_t v49 = *(void *)v33;
          v33 += 8;
          *(void *)unint64_t v35 = v49;
          unint64_t v50 = v35 + 8;
          uint64_t v32 = v50;
          uint64_t v13 = v36;
        }
        while (v33 != a1[2]);
      }
      int v51 = *a1;
      *a1 = v34;
      a1[1] = v36;
      a1[2] = v50;
      a1[3] = v17;
      if (v50 - v36 == 8) {
        uint64_t v52 = 256;
      }
      else {
        uint64_t v52 = (uint64_t)(a1[4] + 512);
      }
      a1[4] = (char *)v52;
      if (v51)
      {
        operator delete(v51);
      }
    }
    else
    {
      unint64_t v9 = operator new(0x1000uLL);
      char v10 = v9;
      if (v3 == v7)
      {
        if (v2 == v6)
        {
          if (v2 == v3) {
            unint64_t v18 = 1;
          }
          else {
            unint64_t v18 = (v2 - v7) >> 2;
          }
          unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v18);
          uint64_t v21 = &v19[8 * (v18 >> 2)];
          uint64_t v22 = a1[1];
          uint64_t v2 = v21;
          uint64_t v23 = a1[2] - v22;
          if (v23)
          {
            uint64_t v2 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v24 = 8 * (v23 >> 3);
            uint64_t v25 = v21;
            do
            {
              uint64_t v26 = *(void *)v22;
              v22 += 8;
              *(void *)uint64_t v25 = v26;
              v25 += 8;
              v24 -= 8;
            }
            while (v24);
          }
          size_t v27 = *a1;
          *a1 = v19;
          a1[1] = v21;
          a1[2] = v2;
          a1[3] = &v19[8 * v20];
          if (v27)
          {
            operator delete(v27);
            uint64_t v2 = a1[2];
          }
        }
        *(void *)uint64_t v2 = v10;
        uint64_t v28 = a1[2];
        a1[2] = v28 + 8;
        uint64_t v53 = *(void *)v28;
        a1[2] = v28;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)a1, &v53);
        uint64_t v11 = (uint64_t)a1[1];
      }
      else
      {
        *((void *)v3 - 1) = v9;
        uint64_t v11 = (uint64_t)(a1[1] - 8);
        a1[1] = (char *)v11;
      }
      if (&a1[2][-v11] == (char *)8) {
        uint64_t v29 = 256;
      }
      else {
        uint64_t v29 = (uint64_t)(a1[4] + 512);
      }
      a1[4] = (char *)v29;
    }
  }
  else
  {
    a1[4] = v5 + 512;
    uint64_t v53 = *((void *)v2 - 1);
    a1[2] = v2 - 8;
    std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)a1, &v53);
  }
}

void sub_18FF16798(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileClose(AudioFileID inAudioFile)
{
  AudioFileID v8 = inAudioFile;
  uint64_t v9 = 0;
  __lk.__m_ = &AudioFileMutex(void)::global;
  __lk.__owns_ = 1;
  std::mutex::lock(&AudioFileMutex(void)::global);
  if (!v8)
  {
    int v2 = 0;
    m = &AudioFileMutex(void)::global;
LABEL_19:
    std::mutex::unlock(m);
    goto LABEL_20;
  }
  uint64_t v1 = BaseOpaqueObject::ResolveOpaqueRef();
  uint64_t v9 = v1;
  if (v1)
  {
    int v2 = 1;
    if (*(_DWORD *)(v1 + 12))
    {
      ++*(_DWORD *)(v1 + 16);
      do
      {
        if (*(unsigned char *)(v1 + 20))
        {
          int v2 = 0;
          --*(_DWORD *)(v1 + 16);
          goto LABEL_17;
        }
        std::condition_variable::wait(&AudioFileCondVar(void)::global, &__lk);
        uint64_t v1 = v9;
      }
      while (*(_DWORD *)(v9 + 12));
      int v3 = *(unsigned __int8 *)(v9 + 20);
      --*(_DWORD *)(v9 + 16);
      if (v3)
      {
        int v2 = 0;
        goto LABEL_17;
      }
      int v5 = *(_DWORD *)(v1 + 12) + 1;
    }
    else
    {
      int v5 = 1;
    }
    *(_DWORD *)(v1 + 12) = v5;
    *(unsigned char *)(v1 + 20) = 1;
    std::condition_variable::notify_one(&AudioFileCondVar(void)::global);
    if (*(_DWORD *)(v9 + 16))
    {
      do
        std::condition_variable::wait(&AudioFileCondVar(void)::global, &__lk);
      while (*(_DWORD *)(v9 + 16));
      int v2 = 1;
    }
  }
  else
  {
    int v2 = 0;
    AudioFileID v8 = 0;
  }
LABEL_17:
  if (__lk.__owns_)
  {
    m = __lk.__m_;
    goto LABEL_19;
  }
LABEL_20:
  if (!v2)
  {
    OSStatus v6 = -38;
    goto LABEL_26;
  }
  if (!v9)
  {
    OSStatus v6 = -50;
    goto LABEL_26;
  }
  OSStatus v6 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 72))(v9);
  if (v6)
  {
LABEL_26:
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v8);
    return v6;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  uint64_t v9 = 0;
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v8);
  return 0;
}

void sub_18FF169B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AudioFileObjectHandle::~AudioFileObjectHandle(AudioFileObjectHandle *this)
{
  AudioFileObjectHandle::~AudioFileObjectHandle(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF93268;
  int v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t AudioFileObjectHandle::AFAPI_Close(AudioFileObject **this)
{
  return AudioFileObject::DoClose(this[3]);
}

uint64_t AudioFileObject::DoClose(AudioFileObject *this)
{
  if (*((unsigned char *)this + 136))
  {
    uint64_t result = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 216))(this);
    if (result) {
      return result;
    }
    *((unsigned char *)this + 136) = 0;
  }
  int v3 = *(uint64_t (**)(AudioFileObject *))(*(void *)this + 56);
  return v3(this);
}

void CAFAudioFile::~CAFAudioFile(CAFAudioFile *this)
{
  CAFAudioFile::~CAFAudioFile(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8D0D8;
  int v2 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v2) {
    MEMORY[0x192FC8940](v2, 0x1000C403E1C8BA9);
  }
  int v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  AudioFileObject::~AudioFileObject(this);
}

void AudioFileObject::~AudioFileObject(AudioFileObject *this)
{
  *(void *)this = &unk_1EDF8FE80;
  uint64_t v2 = *((void *)this + 13);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  AudioFileObject::DeletePacketTable(this);
  int v3 = (const void *)*((void *)this + 11);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 11) = 0;
  }
}

CompressedPacketTable *AudioFileObject::DeletePacketTable(AudioFileObject *this)
{
  uint64_t result = (CompressedPacketTable *)*((void *)this + 15);
  if (result)
  {
    CompressedPacketTable::~CompressedPacketTable(result);
    uint64_t result = (CompressedPacketTable *)MEMORY[0x192FC8940]();
  }
  *((void *)this + 15) = 0;
  return result;
}

uint64_t CAFAudioFile::Close(CAFAudioFile *this)
{
  uint64_t v2 = (char *)this + 216;
  double v3 = *((double *)this + 27);
  if (v3 != 0.0)
  {
    double v4 = *((double *)this + 3);
    BOOL v5 = v4 == 0.0 || v3 == v4;
    if (!v5 && CAFAudioFile::NumberValidFrames(this) >= 1)
    {
      double v6 = *((double *)this + 27) / *((double *)this + 3);
      unsigned int v7 = vcvtmd_s64_f64(v6 * (double)*((int *)this + 46) + 0.5);
      unsigned int v8 = vcvtmd_s64_f64(v6 * (double)*((int *)this + 47) + 0.5);
      *((void *)this + 22) = (int)(vcvtmd_s64_f64(v6* (double)(CAFAudioFile::NumberValidFrames(this)+ *((int *)this + 46)+ *((int *)this + 47))+ 0.5)- (v8+ v7));
      *((_DWORD *)this + 46) = v7;
      *((_DWORD *)this + 47) = v8;
      CAFAudioFile::UpdatePacketTableChunk(this);
      (*(void (**)(CAFAudioFile *, char *))(*(void *)this + 184))(this, v2);
    }
  }
  uint64_t v9 = *((void *)this + 13);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 13) = 0;
  return 0;
}

void Cached_DataSource::~Cached_DataSource(Cached_DataSource *this)
{
  Cached_DataSource::~Cached_DataSource(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1EDF91F08;
  if (*((unsigned char *)this + 72))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  double v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    free(v3);
    *((void *)this + 5) = 0;
  }
  double v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    free(v4);
    *((void *)this + 3) = 0;
  }
}

void UnixFile_DataSource::~UnixFile_DataSource(UnixFile_DataSource *this)
{
  UnixFile_DataSource::~UnixFile_DataSource(this);
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF92CA0;
  if (*((unsigned char *)this + 8)) {
    close(*((_DWORD *)this + 3));
  }
}

OSStatus AudioFileReadPackets(AudioFileID inAudioFile, Boolean inUseCache, UInt32 *outNumBytes, AudioStreamPacketDescription *outPacketDescriptions, SInt64 inStartingPacket, UInt32 *ioNumPackets, void *outBuffer)
{
  if (!ioNumPackets) {
    return -50;
  }
  OSStatus v8 = -50;
  if ((inStartingPacket & 0x8000000000000000) == 0 && *ioNumPackets)
  {
    uint64_t v13 = inUseCache;
    AudioFileID v16 = inAudioFile;
    uint64_t v17 = 0;
    if (AudioFileLocker::Lock((AudioFileLocker *)&v16))
    {
      if (v17)
      {
        OSStatus v14 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, AudioStreamPacketDescription *, SInt64, UInt32 *, void *))(*(void *)v17 + 104))(v17, v13, outNumBytes, outPacketDescriptions, inStartingPacket, ioNumPackets, outBuffer);
        AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v16);
        if (v14 == -39) {
          return 0;
        }
        else {
          return v14;
        }
      }
    }
    else
    {
      OSStatus v8 = -38;
    }
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v16);
  }
  return v8;
}

void sub_18FF1705C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18FF1701CLL);
  }
  __cxa_end_catch();
  JUMPOUT(0x18FF1703CLL);
}

OSStatus AudioFileGetPropertyInfo(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *outDataSize, UInt32 *isWritable)
{
  if (!inAudioFile) {
    return -50;
  }
  uint64_t v6 = *(void *)&inPropertyID;
  AudioFileID v9 = inAudioFile;
  uint64_t v10 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
  {
    if (v10) {
      OSStatus v7 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, UInt32 *))(*(void *)v10 + 136))(v10, v6, outDataSize, isWritable);
    }
    else {
      OSStatus v7 = -50;
    }
  }
  else
  {
    OSStatus v7 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  return v7;
}

void sub_18FF17148(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileGetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *ioDataSize, void *outPropertyData)
{
  OSStatus v4 = -50;
  if (inAudioFile && ioDataSize && outPropertyData)
  {
    uint64_t v7 = *(void *)&inPropertyID;
    AudioFileID v9 = inAudioFile;
    uint64_t v10 = 0;
    if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
    {
      if (v10) {
        OSStatus v4 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, void *))(*(void *)v10 + 144))(v10, v7, ioDataSize, outPropertyData);
      }
    }
    else
    {
      OSStatus v4 = -38;
    }
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  }
  return v4;
}

void sub_18FF17230(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AudioFileLocker::~AudioFileLocker(AudioFileLocker *this)
{
  std::mutex::lock(&AudioFileMutex(void)::global);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 12);
    if (v3)
    {
      *(_DWORD *)(v2 + 12) = v3 - 1;
      std::condition_variable::notify_one(&AudioFileCondVar(void)::global);
    }
  }
  std::mutex::unlock(&AudioFileMutex(void)::global);
}

uint64_t AudioFileLocker::Lock(AudioFileLocker *this)
{
  m = &AudioFileMutex(void)::global;
  v8.__m_ = &AudioFileMutex(void)::global;
  v8.__owns_ = 1;
  std::mutex::lock(&AudioFileMutex(void)::global);
  if (!*(void *)this)
  {
    uint64_t v5 = 0;
LABEL_18:
    std::mutex::unlock(m);
    return v5;
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3 || (uint64_t v3 = BaseOpaqueObject::ResolveOpaqueRef(), (*((void *)this + 1) = v3) != 0))
  {
    if (*(_DWORD *)(v3 + 12))
    {
      ++*(_DWORD *)(v3 + 16);
      do
      {
        if (*(unsigned char *)(v3 + 20))
        {
          uint64_t v5 = 0;
          --*(_DWORD *)(v3 + 16);
          goto LABEL_16;
        }
        std::condition_variable::wait(&AudioFileCondVar(void)::global, &v8);
        uint64_t v3 = *((void *)this + 1);
      }
      while (*(_DWORD *)(v3 + 12));
      int v4 = *(unsigned __int8 *)(v3 + 20);
      --*(_DWORD *)(v3 + 16);
      if (v4)
      {
        uint64_t v5 = 0;
        goto LABEL_16;
      }
      int v6 = *(_DWORD *)(v3 + 12) + 1;
    }
    else
    {
      int v6 = 1;
    }
    *(_DWORD *)(v3 + 12) = v6;
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    *(void *)this = 0;
  }
LABEL_16:
  if (v8.__owns_)
  {
    m = v8.__m_;
    goto LABEL_18;
  }
  return v5;
}

void sub_18FF173F8(_Unwind_Exception *a1)
{
}

uint64_t AudioFileObjectHandle::AFAPI_GetProperty(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3, void *a4)
{
  return (*(uint64_t (**)(void, uint64_t, unsigned int *, void *))(**((void **)this + 3) + 160))(*((void *)this + 3), a2, a3, a4);
}

uint64_t AudioFileObject::GetProperty(AudioFileObject *this, int a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  uint64_t v7 = 1886681407;
  if (a2 <= 1835493730)
  {
    if (a2 > 1701082481)
    {
      if (a2 > 1718775914)
      {
        if (a2 > 1768842862)
        {
          if (a2 == 1768842863)
          {
            if (*a3 != 8)
            {
              uint64_t v7 = 561211770;
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CFTypeRef cf = 136315394;
                *(void *)&cf[4] = "AudioFileObject.cpp";
                __int16 v29 = 1024;
                int v30 = 1793;
                uint64_t v23 = MEMORY[0x1E4F14500];
                uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
                goto LABEL_222;
              }
              return v7;
            }
            *(void *)CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            *(_WORD *)&cf[8] = 257;
            uint64_t v7 = (*(uint64_t (**)(AudioFileObject *, unsigned char *))(*(void *)this + 432))(this, cf);
            if (!v7)
            {
              uint64_t v17 = *(const void **)cf;
              if (*(void *)cf) {
                goto LABEL_118;
              }
              goto LABEL_217;
            }
          }
          else
          {
            if (a2 != 1769172837)
            {
              if (a2 == 1819243876)
              {
                if (*a3 == 8)
                {
                  *(void *)CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  *(_WORD *)&cf[8] = 257;
                  uint64_t v7 = (*(uint64_t (**)(AudioFileObject *, unsigned char *))(*(void *)this + 472))(this, cf);
                  if (v7
                    && (*(unsigned int (**)(AudioFileObject *, unsigned char *))(*(void *)this + 504))(this, cf))
                  {
                    goto LABEL_219;
                  }
                  std::unique_lock<std::mutex> v8 = *(const void **)cf;
                  if (*(void *)cf) {
                    goto LABEL_23;
                  }
                  goto LABEL_215;
                }
                uint64_t v7 = 561211770;
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CFTypeRef cf = 136315394;
                  *(void *)&cf[4] = "AudioFileObject.cpp";
                  __int16 v29 = 1024;
                  int v30 = 1829;
                  uint64_t v23 = MEMORY[0x1E4F14500];
                  uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
                  goto LABEL_222;
                }
              }
              return v7;
            }
            if (*a3 != 8)
            {
              uint64_t v7 = 561211770;
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CFTypeRef cf = 136315394;
                *(void *)&cf[4] = "AudioFileObject.cpp";
                __int16 v29 = 1024;
                int v30 = 1849;
                uint64_t v23 = MEMORY[0x1E4F14500];
                uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
                goto LABEL_222;
              }
              return v7;
            }
            *(void *)CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            *(_WORD *)&cf[8] = 257;
            uint64_t v7 = (*(uint64_t (**)(AudioFileObject *, unsigned char *))(*(void *)this + 480))(this, cf);
            if (!v7)
            {
              uint64_t v17 = *(const void **)cf;
              if (*(void *)cf)
              {
LABEL_118:
                CFRetain(v17);
                uint64_t v9 = *(void *)cf;
LABEL_218:
                *a4 = v9;
                goto LABEL_219;
              }
LABEL_217:
              uint64_t v9 = 0;
              goto LABEL_218;
            }
          }
          goto LABEL_219;
        }
        if (a2 != 1718775915)
        {
          if (a2 != 1735159669) {
            return v7;
          }
          if (*a3 != 8)
          {
            uint64_t v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFTypeRef cf = 136315394;
              *(void *)&cf[4] = "AudioFileObject.cpp";
              __int16 v29 = 1024;
              int v30 = 1864;
              uint64_t v23 = MEMORY[0x1E4F14500];
              uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_222;
            }
            return v7;
          }
          *(void *)CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(_WORD *)&cf[8] = 257;
          uint64_t v7 = (*(uint64_t (**)(AudioFileObject *, unsigned char *))(*(void *)this + 536))(this, cf);
          if (!v7)
          {
            uint64_t v17 = *(const void **)cf;
            if (*(void *)cf) {
              goto LABEL_118;
            }
            goto LABEL_217;
          }
LABEL_219:
          CACFDictionary::~CACFDictionary((CACFDictionary *)cf);
          return v7;
        }
        if (*a3 != 24)
        {
          uint64_t v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "AudioFileObject.cpp";
            __int16 v29 = 1024;
            int v30 = 1711;
            uint64_t v23 = MEMORY[0x1E4F14500];
            uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_222;
          }
          return v7;
        }
        uint64_t v20 = *(uint64_t (**)(void))(*(void *)this + 264);
        return v20();
      }
      if (a2 <= 1717988723)
      {
        if (a2 == 1701082482)
        {
          if (*a3 == 8)
          {
            *(void *)CFTypeRef cf = 0;
            uint64_t v7 = (*(uint64_t (**)(AudioFileObject *, unsigned char *))(*(void *)this + 544))(this, cf);
            *(double *)a4 = fmax(*(double *)cf, 0.0);
          }
          else
          {
            uint64_t v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFTypeRef cf = 136315394;
              *(void *)&cf[4] = "AudioFileObject.cpp";
              __int16 v29 = 1024;
              int v30 = 1880;
              uint64_t v23 = MEMORY[0x1E4F14500];
              uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_222;
            }
          }
          return v7;
        }
        if (a2 != 1701799487) {
          return v7;
        }
        if (*a3 == 4)
        {
          *(void *)CFTypeRef cf = 0;
          uint64_t v7 = (*(uint64_t (**)(void, unsigned char *))(**((void **)this + 13) + 40))(*((void *)this + 13), cf);
          if (v7) {
            return v7;
          }
          uint64_t v11 = *((void *)this + 9);
          uint64_t v12 = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 224))(this);
          int v13 = *(void *)cf >= v12 + v11;
          goto LABEL_225;
        }
        return 561211770;
      }
      if (a2 != 1717988724)
      {
        if (a2 != 1718383476) {
          return v7;
        }
        uint64_t v10 = *(uint64_t (**)(void))(*(void *)this + 200);
        return v10();
      }
      if (*a3 != 4)
      {
        uint64_t v7 = 561211770;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFTypeRef cf = 136315394;
          *(void *)&cf[4] = "AudioFileObject.cpp";
          __int16 v29 = 1024;
          int v30 = 1603;
          uint64_t v23 = MEMORY[0x1E4F14500];
          uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
          goto LABEL_222;
        }
        return v7;
      }
      uint64_t v7 = 0;
      int v13 = *((_DWORD *)this + 21);
LABEL_225:
      *(_DWORD *)a4 = v13;
      return v7;
    }
    if (a2 <= 1668112751)
    {
      if (a2 > 1651663219)
      {
        if (a2 == 1651663220)
        {
          if (*a3 != 4)
          {
            uint64_t v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFTypeRef cf = 136315394;
              *(void *)&cf[4] = "AudioFileObject.cpp";
              __int16 v29 = 1024;
              int v30 = 1666;
              uint64_t v23 = MEMORY[0x1E4F14500];
              uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_222;
            }
            return v7;
          }
          OSStatus v14 = *(uint64_t (**)(void))(*(void *)this + 320);
        }
        else
        {
          if (a2 != 1652125803) {
            return v7;
          }
          if (*a3 != 24)
          {
            uint64_t v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFTypeRef cf = 136315394;
              *(void *)&cf[4] = "AudioFileObject.cpp";
              __int16 v29 = 1024;
              int v30 = 1783;
              uint64_t v23 = MEMORY[0x1E4F14500];
              uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_222;
            }
            return v7;
          }
          OSStatus v14 = *(uint64_t (**)(void))(*(void *)this + 312);
        }
      }
      else
      {
        if (a2 != 1280922179)
        {
          if (a2 == 1650683508)
          {
            if (*a3 == 8)
            {
              uint64_t v7 = 0;
              *a4 = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 224))(this);
            }
            else
            {
              uint64_t v7 = 561211770;
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CFTypeRef cf = 136315394;
                *(void *)&cf[4] = "AudioFileObject.cpp";
                __int16 v29 = 1024;
                int v30 = 1631;
                uint64_t v23 = MEMORY[0x1E4F14500];
                uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
                goto LABEL_222;
              }
            }
          }
          return v7;
        }
        if (*a3 < 8) {
          return 561211770;
        }
        *a3 = 8;
        OSStatus v14 = *(uint64_t (**)(void))(*(void *)this + 608);
      }
      return v14();
    }
    if (a2 <= 1685022309)
    {
      if (a2 == 1668112752)
      {
        uint64_t v7 = (*(uint64_t (**)(AudioFileObject *, char *, uint64_t *))(*(void *)this + 400))(this, (char *)&v27 + 4, &v27);
        if (v7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v7;
          }
          *(_DWORD *)CFTypeRef cf = 136315394;
          *(void *)&cf[4] = "AudioFileObject.cpp";
          __int16 v29 = 1024;
          int v30 = 1686;
          uint64_t v23 = MEMORY[0x1E4F14500];
          uint64_t v24 = "%25s:%-5d  GetChannelLayoutSize failed";
        }
        else
        {
          if (*a3 == HIDWORD(v27)) {
            return (*(uint64_t (**)(AudioFileObject *, unsigned int *, uint64_t *))(*(void *)this + 408))(this, a3, a4);
          }
          uint64_t v7 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v7;
          }
          *(_DWORD *)CFTypeRef cf = 136315394;
          *(void *)&cf[4] = "AudioFileObject.cpp";
          __int16 v29 = 1024;
          int v30 = 1687;
          uint64_t v23 = MEMORY[0x1E4F14500];
          uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
        }
LABEL_222:
        _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, v24, cf, 0x12u);
        return v7;
      }
      if (a2 == 1684434292)
      {
        if (*a3 == 40)
        {
          uint64_t v7 = 0;
          long long v15 = *(_OWORD *)((char *)this + 24);
          long long v16 = *(_OWORD *)((char *)this + 40);
          a4[4] = *((void *)this + 7);
          *(_OWORD *)a4 = v15;
          *((_OWORD *)a4 + 1) = v16;
        }
        else
        {
          uint64_t v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "AudioFileObject.cpp";
            __int16 v29 = 1024;
            int v30 = 1614;
            uint64_t v23 = MEMORY[0x1E4F14500];
            uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_222;
          }
        }
      }
      return v7;
    }
    if (a2 != 1685022310)
    {
      if (a2 != 1685289589) {
        return v7;
      }
      if (*a3 != 4)
      {
        uint64_t v7 = 561211770;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFTypeRef cf = 136315394;
          *(void *)&cf[4] = "AudioFileObject.cpp";
          __int16 v29 = 1024;
          int v30 = 1694;
          uint64_t v23 = MEMORY[0x1E4F14500];
          uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
          goto LABEL_222;
        }
        return v7;
      }
      uint64_t v7 = 0;
      int v13 = *((_DWORD *)this + 33);
      goto LABEL_225;
    }
    if (*a3 != 8)
    {
      uint64_t v7 = 561211770;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFTypeRef cf = 136315394;
        *(void *)&cf[4] = "AudioFileObject.cpp";
        __int16 v29 = 1024;
        int v30 = 1620;
        uint64_t v23 = MEMORY[0x1E4F14500];
        uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
        goto LABEL_222;
      }
      return v7;
    }
    uint64_t v7 = 0;
    uint64_t v26 = *((void *)this + 9);
LABEL_161:
    *a4 = v26;
    return v7;
  }
  if (a2 <= 1886086769)
  {
    if (a2 > 1885564531)
    {
      if (a2 > 1886085752)
      {
        if (a2 == 1886085753)
        {
          if (*a3 != 24)
          {
            uint64_t v7 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFTypeRef cf = 136315394;
              *(void *)&cf[4] = "AudioFileObject.cpp";
              __int16 v29 = 1024;
              int v30 = 1774;
              uint64_t v23 = MEMORY[0x1E4F14500];
              uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
              goto LABEL_222;
            }
            return v7;
          }
          OSStatus v14 = *(uint64_t (**)(void))(*(void *)this + 304);
          return v14();
        }
        if (a2 != 1886086256) {
          return v7;
        }
        if (*a3 != 16) {
          return 561211770;
        }
        if (a4)
        {
          if ((*a4 & 0x8000000000000000) == 0)
          {
            OSStatus v14 = *(uint64_t (**)(void))(*(void *)this + 296);
            return v14();
          }
          return 1885563711;
        }
        return 4294967246;
      }
      if (a2 == 1885564532)
      {
        if (*a3 != 8)
        {
          uint64_t v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "AudioFileObject.cpp";
            __int16 v29 = 1024;
            int v30 = 1637;
            uint64_t v23 = MEMORY[0x1E4F14500];
            uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_222;
          }
          return v7;
        }
        uint64_t v25 = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 240))(this);
        uint64_t v7 = 0;
        uint64_t v26 = v25 & ~(v25 >> 63);
        goto LABEL_161;
      }
      if (a2 != 1885957732) {
        return v7;
      }
    }
    else
    {
      if (a2 <= 1852403299)
      {
        if (a2 == 1835493731)
        {
          uint64_t v10 = *(uint64_t (**)(void))(*(void *)this + 336);
        }
        else
        {
          if (a2 != 1835756659) {
            return v7;
          }
          uint64_t v10 = *(uint64_t (**)(void))(*(void *)this + 360);
        }
        return v10();
      }
      if (a2 != 1852403300)
      {
        if (a2 != 1869640813) {
          return v7;
        }
        if (*a3 != 4)
        {
          uint64_t v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "AudioFileObject.cpp";
            __int16 v29 = 1024;
            int v30 = 1625;
            uint64_t v23 = MEMORY[0x1E4F14500];
            uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_222;
          }
          return v7;
        }
        uint64_t v7 = 0;
        int v13 = *((_DWORD *)this + 20);
        goto LABEL_225;
      }
    }
    if (*a3 != 16) {
      return 561211770;
    }
    if (a4)
    {
      if ((*a4 & 0x8000000000000000) == 0)
      {
        uint64_t v10 = *(uint64_t (**)(void))(*(void *)this + 288);
        return v10();
      }
      return 1885563711;
    }
    return 4294967246;
  }
  if (a2 <= 1886616164)
  {
    if (a2 > 1886090593)
    {
      if (a2 != 1886090594)
      {
        if (a2 != 1886549346) {
          return v7;
        }
        if (*a3 != 24)
        {
          uint64_t v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "AudioFileObject.cpp";
            __int16 v29 = 1024;
            int v30 = 1650;
            uint64_t v23 = MEMORY[0x1E4F14500];
            uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_222;
          }
          return v7;
        }
        uint64_t v20 = *(uint64_t (**)(void))(*(void *)this + 664);
        return v20();
      }
      if (*a3 != 4)
      {
        uint64_t v7 = 561211770;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFTypeRef cf = 136315394;
          *(void *)&cf[4] = "AudioFileObject.cpp";
          __int16 v29 = 1024;
          int v30 = 1643;
          uint64_t v23 = MEMORY[0x1E4F14500];
          uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
          goto LABEL_222;
        }
        return v7;
      }
      int v21 = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 656))(this);
      goto LABEL_158;
    }
    if (a2 != 1886086770)
    {
      if (a2 != 1886089836) {
        return v7;
      }
      if (*a3 != 16) {
        return 561211770;
      }
      if (a4)
      {
        if ((*a4 & 0x8000000000000000) == 0)
        {
          OSStatus v14 = *(uint64_t (**)(void))(*(void *)this + 280);
          return v14();
        }
        return 1885563711;
      }
      return 4294967246;
    }
    if (*a3 != 24)
    {
      uint64_t v7 = 561211770;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFTypeRef cf = 136315394;
        *(void *)&cf[4] = "AudioFileObject.cpp";
        __int16 v29 = 1024;
        int v30 = 1702;
        uint64_t v23 = MEMORY[0x1E4F14500];
        uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
        goto LABEL_222;
      }
      return v7;
    }
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)this + 256);
    return v10();
  }
  if (a2 > 1920098671)
  {
    if (a2 != 1920098672)
    {
      if (a2 != 1935832164)
      {
        if (a2 == 1935893603)
        {
          if (*a3 == 8)
          {
            *(void *)CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            *(_WORD *)&cf[8] = 257;
            uint64_t v7 = (*(uint64_t (**)(AudioFileObject *, unsigned char *))(*(void *)this + 456))(this, cf);
            if (v7
              && (*(unsigned int (**)(AudioFileObject *, unsigned char *))(*(void *)this + 496))(this, cf))
            {
              goto LABEL_219;
            }
            std::unique_lock<std::mutex> v8 = *(const void **)cf;
            if (*(void *)cf)
            {
LABEL_23:
              CFRetain(v8);
              uint64_t v9 = *(void *)cf;
LABEL_216:
              uint64_t v7 = 0;
              goto LABEL_218;
            }
LABEL_215:
            uint64_t v9 = 0;
            goto LABEL_216;
          }
          uint64_t v7 = 561211770;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "AudioFileObject.cpp";
            __int16 v29 = 1024;
            int v30 = 1809;
            uint64_t v23 = MEMORY[0x1E4F14500];
            uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
            goto LABEL_222;
          }
        }
        return v7;
      }
      if (*a3 == 4)
      {
        *(_DWORD *)CFTypeRef cf = 0;
        uint64_t v22 = (*(uint64_t (**)(AudioFileObject *, unsigned char *))(*(void *)this + 696))(this, cf);
        uint64_t v7 = v22;
        int v13 = *(_DWORD *)cf;
        if (v22 || !*(_DWORD *)cf)
        {
          if (*((_DWORD *)this + 8) == 1819304813)
          {
            int v13 = *((_DWORD *)this + 14);
            if (*((unsigned char *)this + 36)) {
              int v13 = -v13;
            }
          }
          else if (v22)
          {
            return v7;
          }
        }
        uint64_t v7 = 0;
        goto LABEL_225;
      }
      return 561211770;
    }
    if (*a3 != 4) {
      return 561211770;
    }
    int v21 = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 272))(this);
LABEL_158:
    uint64_t v7 = 0;
    *(_DWORD *)a4 = v21;
    return v7;
  }
  if (a2 == 1886616165)
  {
    if (*a3 != 4)
    {
      uint64_t v7 = 561211770;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFTypeRef cf = 136315394;
        *(void *)&cf[4] = "AudioFileObject.cpp";
        __int16 v29 = 1024;
        int v30 = 1659;
        uint64_t v23 = MEMORY[0x1E4F14500];
        uint64_t v24 = "%25s:%-5d  inDataSize is wrong";
        goto LABEL_222;
      }
      return v7;
    }
    int v21 = (*(uint64_t (**)(AudioFileObject *))(*(void *)this + 640))(this);
    goto LABEL_158;
  }
  if (a2 != 1919380595) {
    return v7;
  }
  bzero(a4, *a3);
  unint64_t v18 = *(uint64_t (**)(AudioFileObject *, unsigned int *, uint64_t *))(*(void *)this + 384);
  return v18(this, a3, a4);
}

void sub_18FF18E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetProperty(CAFAudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  if (a2 > 1886283374)
  {
    if (a2 == 1886283375)
    {
      if (*a3 >= 0x10)
      {
        uint64_t valid = CAFAudioFile::NumberValidFrames(this);
        uint64_t result = 0;
        *a4 = valid;
        a4[1] = *((void *)this + 23);
        *a3 = 16;
        return result;
      }
      return 561211770;
    }
    if (a2 == 1920168566)
    {
      if ((*((unsigned char *)this + 100) & 2) == 0) {
        return 1869627199;
      }
      if (*a3 == 8)
      {
        uint64_t result = 0;
        *a4 = *((void *)this + 25);
        return result;
      }
      return 561211770;
    }
    goto LABEL_26;
  }
  if (a2 != 1667787108)
  {
    if (a2 == 1751217000)
    {
      if (*a3 == 20)
      {
        LODWORD(v20) = 20;
        return (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, void ***, uint64_t *))(*(void *)this
                                                                                                 + 576))(this, 1751217000, 0, &v20, a4);
      }
      return 561211770;
    }
LABEL_26:
    return AudioFileObject::GetProperty(this, a2, a3, a4);
  }
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v20 = v21;
  uint64_t v8 = *((void *)this + 18);
  if (*((void *)this + 19) != v8)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v20, *(_DWORD *)(v8 + 24 * v9), *(_DWORD *)(v8 + 24 * v9));
      uint64_t v9 = v10;
      uint64_t v8 = *((void *)this + 18);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v8) >> 3) > v10++);
    unint64_t v12 = *a3;
    if (v12 >= 4)
    {
      uint64_t v13 = (uint64_t)v20;
      if (v20 != v21)
      {
        unint64_t v14 = 0;
        unint64_t v15 = v12 >> 2;
        do
        {
          *((_DWORD *)a4 + v14) = *(_DWORD *)(v13 + 28);
          long long v16 = *(void **)(v13 + 8);
          uint64_t v17 = v13;
          if (v16)
          {
            do
            {
              uint64_t v13 = (uint64_t)v16;
              long long v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v13 = *(void *)(v17 + 16);
              BOOL v18 = *(void *)v13 == v17;
              uint64_t v17 = v13;
            }
            while (!v18);
          }
          ++v14;
        }
        while (v14 < v15 && (void **)v13 != v21);
      }
    }
  }
  return 0;
}

void sub_18FF19118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t ChunkyAudioFile::GetProperty(ChunkyAudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  if (a2 == 1751217000)
  {
    if (*a3 == 20)
    {
      LODWORD(v21) = 20;
      return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, void, void ***, uint64_t *))(*(void *)this
                                                                                                  + 576))(this, 1751217000, 0, &v21, a4);
    }
    else
    {
      return 561211770;
    }
  }
  else if (a2 == 1667787108)
  {
    v22[0] = 0;
    v22[1] = 0;
    int v21 = v22;
    uint64_t v7 = *((void *)this + 18);
    if (*((void *)this + 19) != v7)
    {
      uint64_t v8 = 0;
      unsigned int v9 = 1;
      do
      {
        int v10 = *(_DWORD *)(v7 + 24 * v8);
        if (v10 != (*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this))
        {
          unsigned int v11 = *(_DWORD *)(*((void *)this + 18) + 24 * v8);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v21, v11, v11);
        }
        uint64_t v8 = v9;
        uint64_t v7 = *((void *)this + 18);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v7) >> 3) > v9++);
      unint64_t v13 = *a3;
      if (v13 >= 4)
      {
        uint64_t v14 = (uint64_t)v21;
        if (v21 != v22)
        {
          unint64_t v15 = 0;
          unint64_t v16 = v13 >> 2;
          do
          {
            *((_DWORD *)a4 + v15) = *(_DWORD *)(v14 + 28);
            uint64_t v17 = *(void **)(v14 + 8);
            uint64_t v18 = v14;
            if (v17)
            {
              do
              {
                uint64_t v14 = (uint64_t)v17;
                uint64_t v17 = (void *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                uint64_t v14 = *(void *)(v18 + 16);
                BOOL v19 = *(void *)v14 == v18;
                uint64_t v18 = v14;
              }
              while (!v19);
            }
            ++v15;
          }
          while (v15 < v16 && (void **)v14 != v22);
        }
      }
    }
    return 0;
  }
  else
  {
    return AudioFileObject::GetProperty(this, a2, a3, a4);
  }
}

void sub_18FF1935C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t AIFFAudioFile::GetProperty(AIFFAudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t result = 561211770;
  if (a3 && a4)
  {
    if (a2 == 1768174447)
    {
      uint64_t result = 1886681407;
      uint64_t v6 = *((void *)this + 59);
      if (v6 && (*((unsigned char *)this + 100) & 2) == 0)
      {
        uint64_t result = 561211770;
        if (*a3 >= 8)
        {
          uint64_t result = 0;
          *a4 = v6;
          *a3 = 8;
        }
      }
    }
    else
    {
      return ChunkyAudioFile::GetProperty(this, a2, a3, a4);
    }
  }
  return result;
}

uint64_t AudioFileObjectHandle::AFAPI_GetPropertyInfo(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  return (*(uint64_t (**)(void, uint64_t, unsigned int *, unsigned int *))(**((void **)this + 3) + 152))(*((void *)this + 3), a2, a3, a4);
}

uint64_t AudioFileObject::GetPropertyInfo(AudioFileObject *this, int a2, unsigned int *a3, unsigned int *a4)
{
  int v15 = 0;
  uint64_t result = 1886681407;
  if (a2 > 1835493730)
  {
    if (a2 <= 1886086769)
    {
      if (a2 > 1885564531)
      {
        if (a2 <= 1886085752)
        {
          if (a2 == 1885564532) {
            goto LABEL_77;
          }
          int v11 = 1885957732;
          goto LABEL_72;
        }
        if (a2 == 1886085753) {
          goto LABEL_75;
        }
        unsigned __int16 v9 = 25712;
LABEL_71:
        int v11 = v9 | 0x706B0000;
LABEL_72:
        if (a2 != v11) {
          goto LABEL_92;
        }
        goto LABEL_73;
      }
      if (a2 <= 1852403299)
      {
        if (a2 == 1835493731)
        {
          uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 328))(this, a3, &v15);
        }
        else if (a2 == 1835756659)
        {
          uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 352))(this, a3, &v15);
        }
        goto LABEL_92;
      }
      if (a2 == 1852403300)
      {
LABEL_73:
        if (!a3) {
          goto LABEL_90;
        }
        unsigned int v13 = 16;
        goto LABEL_89;
      }
      if (a2 != 1869640813) {
        goto LABEL_92;
      }
    }
    else
    {
      if (a2 > 1886616164)
      {
        if (a2 <= 1920098671)
        {
          if (a2 != 1886616165)
          {
            if (a2 == 1919380595) {
              uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 376))(this, a3, &v15);
            }
            goto LABEL_92;
          }
        }
        else if (a2 != 1920098672)
        {
          if (a2 != 1935832164)
          {
            if (a2 == 1935893603) {
              uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 448))(this, a3, &v15);
            }
            goto LABEL_92;
          }
LABEL_29:
          if (!a3) {
            goto LABEL_84;
          }
          unsigned int v8 = 4;
          goto LABEL_83;
        }
        goto LABEL_61;
      }
      if (a2 <= 1886090593)
      {
        if (a2 == 1886086770) {
          goto LABEL_75;
        }
        unsigned __int16 v9 = 29292;
        goto LABEL_71;
      }
      if (a2 != 1886090594)
      {
        if (a2 != 1886549346) {
          goto LABEL_92;
        }
        if (a3)
        {
          uint64_t result = 0;
          unsigned int v12 = 24;
LABEL_104:
          *a3 = v12;
          goto LABEL_92;
        }
LABEL_105:
        uint64_t result = 0;
        goto LABEL_92;
      }
    }
LABEL_61:
    if (!a3) {
      goto LABEL_90;
    }
    unsigned int v13 = 4;
LABEL_89:
    *a3 = v13;
    goto LABEL_90;
  }
  if (a2 <= 1701082481)
  {
    if (a2 <= 1668112751)
    {
      if (a2 <= 1651663219)
      {
        if (a2 == 1280922179)
        {
          if (!a3) {
            goto LABEL_84;
          }
          unsigned int v8 = 8;
LABEL_83:
          *a3 = v8;
LABEL_84:
          unsigned int v14 = 0;
          uint64_t result = 0;
          if (!a4) {
            return result;
          }
          goto LABEL_94;
        }
        if (a2 != 1650683508) {
          goto LABEL_92;
        }
LABEL_77:
        int v15 = 1;
        if (!a3) {
          goto LABEL_105;
        }
        goto LABEL_103;
      }
      if (a2 != 1651663220)
      {
        if (a2 != 1652125803) {
          goto LABEL_92;
        }
        goto LABEL_75;
      }
      if (a3)
      {
        uint64_t result = 0;
        unsigned int v12 = 4;
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    if (a2 > 1685022309)
    {
      if (a2 == 1685022310)
      {
        if (a3)
        {
LABEL_103:
          uint64_t result = 0;
          unsigned int v12 = 8;
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      if (a2 != 1685289589) {
        goto LABEL_92;
      }
      if (a3)
      {
        unsigned int v10 = 4;
        goto LABEL_67;
      }
    }
    else
    {
      if (a2 == 1668112752)
      {
        uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 400))(this, a3, &v15);
        if (a3)
        {
          if (*a3 >= 0xC) {
            uint64_t result = result;
          }
          else {
            uint64_t result = 561211770;
          }
        }
        goto LABEL_92;
      }
      if (a2 != 1684434292) {
        goto LABEL_92;
      }
      if (a3)
      {
        unsigned int v10 = 40;
LABEL_67:
        *a3 = v10;
      }
    }
    uint64_t result = 0;
    int v15 = 1;
    goto LABEL_92;
  }
  if (a2 <= 1718775914)
  {
    if (a2 <= 1717988723)
    {
      if (a2 == 1701082482)
      {
        if (a3)
        {
          unsigned int v13 = 8;
          goto LABEL_89;
        }
        goto LABEL_90;
      }
      if (a2 != 1701799487) {
        goto LABEL_92;
      }
      goto LABEL_29;
    }
    if (a2 != 1717988724)
    {
      if (a2 == 1718383476) {
        uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 192))(this, a3, &v15);
      }
      goto LABEL_92;
    }
    goto LABEL_61;
  }
  if (a2 <= 1768842862)
  {
    if (a2 != 1718775915)
    {
      if (a2 != 1735159669) {
        goto LABEL_92;
      }
      uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 520))(this, a3, &v15);
LABEL_91:
      int v15 = 0;
      goto LABEL_92;
    }
LABEL_75:
    if (a3)
    {
      unsigned int v13 = 24;
      goto LABEL_89;
    }
LABEL_90:
    uint64_t result = 0;
    goto LABEL_91;
  }
  if (a2 != 1768842863)
  {
    if (a2 != 1769172837)
    {
      if (a2 == 1819243876) {
        uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 520))(this, a3, &v15);
      }
      goto LABEL_92;
    }
    uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 528))(this, a3, &v15);
    goto LABEL_91;
  }
  uint64_t result = (*(uint64_t (**)(AudioFileObject *, unsigned int *, int *))(*(void *)this + 424))(this, a3, &v15);
LABEL_92:
  if (!a4) {
    return result;
  }
  unsigned int v14 = v15;
LABEL_94:
  *a4 = v14;
  return result;
}

uint64_t AudioFileObjectHandle::AFAPI_ReadPackets(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  return (*(uint64_t (**)(void, uint64_t, unsigned int *, AudioStreamPacketDescription *, uint64_t, unsigned int *, void *))(**((void **)this + 3) + 88))(*((void *)this + 3), a2, a3, a4, a5, a6, a7);
}

uint64_t ChunkyAudioFile::GetPropertyInfo(ChunkyAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  switch(a2)
  {
    case 1920168566:
      if (a3) {
        *a3 = 8;
      }
      if (!a4) {
        return 0;
      }
      int v14 = (*((unsigned __int8 *)this + 100) >> 1) & 1;
LABEL_21:
      *a4 = v14;
      return 0;
    case 1751217000:
      if (a3) {
        *a3 = 20;
      }
      if (!a4) {
        return 0;
      }
      int v14 = 1;
      goto LABEL_21;
    case 1667787108:
      if (a4) {
        *a4 = 0;
      }
      if (a3)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        unint64_t v16 = &v17;
        uint64_t v6 = *((void *)this + 18);
        if (*((void *)this + 19) == v6)
        {
          unsigned int v12 = 0;
          unsigned int v13 = 0;
        }
        else
        {
          uint64_t v7 = 0;
          unsigned int v8 = 1;
          do
          {
            int v9 = *(_DWORD *)(v6 + 24 * v7);
            if (v9 != (*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this))
            {
              unsigned int v10 = *(_DWORD *)(*((void *)this + 18) + 24 * v7);
              std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v16, v10, v10);
            }
            uint64_t v7 = v8;
            uint64_t v6 = *((void *)this + 18);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v6) >> 3) > v8++);
          unsigned int v12 = v17;
          unsigned int v13 = 4 * v18;
        }
        *a3 = v13;
      }
      return 0;
  }
  return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
}

void sub_18FF19C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t AudioFileObject::ReadPackets(AudioFileObject *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      unsigned int v17 = 136315394;
      uint64_t v18 = "AudioFileObject.cpp";
      __int16 v19 = 1024;
      int v20 = 867;
      int v15 = MEMORY[0x1E4F14500];
      unint64_t v16 = "%25s:%-5d  NULL buffer";
      goto LABEL_17;
    }
    return 4294967246;
  }
  if (!a6 || !*a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      unsigned int v17 = 136315394;
      uint64_t v18 = "AudioFileObject.cpp";
      __int16 v19 = 1024;
      int v20 = 869;
      int v15 = MEMORY[0x1E4F14500];
      unint64_t v16 = "%25s:%-5d  invalid num packets parameter";
LABEL_17:
      _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v17, 0x12u);
      return 4294967246;
    }
    return 4294967246;
  }
  uint64_t v10 = *((unsigned int *)this + 10);
  unsigned int v17 = v10 * *a6;
  uint64_t result = (*(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t, unsigned int *, void *))(*(void *)this
                                                                                                  + 72))(this, a2, v10 * a5, &v17, a7);
  if (!result || result == -39)
  {
    int v12 = v17;
    unsigned int v13 = *((_DWORD *)this + 10);
    if (v17 != v13 * *a6)
    {
      int v14 = v17 / v13;
      *a6 = v17 / v13;
      int v12 = *((_DWORD *)this + 10) * v14;
    }
    if (a3) {
      *a3 = v12;
    }
    if (result == -39) {
      return 0;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t AIFFAudioFile::GetPropertyInfo(AIFFAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 != 1768174447) {
    return ChunkyAudioFile::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a3) {
    *a3 = 8;
  }
  if (a4) {
    *a4 = 0;
  }
  return 0;
}

uint64_t CAFAudioFile::GetMagicCookieDataSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 1;
  }
  uint64_t v3 = *((void *)this + 18);
  uint64_t v4 = *((void *)this + 19);
  uint64_t v5 = v4 - v3;
  if (v4 == v3)
  {
LABEL_7:
    if (a2)
    {
      int v10 = 0;
LABEL_11:
      *a2 = v10;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    unsigned int v8 = 1;
    while (*(_DWORD *)(v3 + 24 * v6) != 1802857321)
    {
      uint64_t v6 = v8;
      if (v7 <= v8++) {
        goto LABEL_7;
      }
    }
    if (a2)
    {
      int v10 = *(_DWORD *)(v3 + 24 * v6 + 8) - 12;
      goto LABEL_11;
    }
  }
  return 0;
}

uint64_t CAFAudioFile::GetPropertyInfo(CAFAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 > 1886283374)
  {
    if (a2 == 1886283375)
    {
      if (a3)
      {
        unsigned int v6 = 16;
        goto LABEL_21;
      }
LABEL_22:
      if (!a4) {
        return 0;
      }
      int v7 = 1;
LABEL_24:
      *a4 = v7;
      return 0;
    }
    if (a2 == 1920168566)
    {
      if (a3) {
        *a3 = 8;
      }
      if (!a4) {
        return 0;
      }
      int v7 = (*((unsigned __int8 *)this + 100) >> 1) & 1;
      goto LABEL_24;
    }
  }
  else
  {
    if (a2 == 1667787108)
    {
      if (a4) {
        *a4 = 0;
      }
      if (a3)
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
        int v15 = &v16;
        uint64_t v8 = *((void *)this + 18);
        if (*((void *)this + 19) == v8)
        {
          int v12 = 0;
          unsigned int v13 = 0;
        }
        else
        {
          uint64_t v9 = 0;
          unsigned int v10 = 1;
          do
          {
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v15, *(_DWORD *)(v8 + 24 * v9), *(_DWORD *)(v8 + 24 * v9));
            uint64_t v9 = v10;
            uint64_t v8 = *((void *)this + 18);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v8) >> 3) > v10++);
          int v12 = v16;
          unsigned int v13 = 4 * v17;
        }
        *a3 = v13;
      }
      return 0;
    }
    if (a2 == 1751217000)
    {
      if (a3)
      {
        unsigned int v6 = 20;
LABEL_21:
        *a3 = v6;
        goto LABEL_22;
      }
      goto LABEL_22;
    }
  }
  return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
}

void sub_18FF1A090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t CAFAudioFile::ReadPackets(CAFAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 10)) {
    BOOL v13 = *((_DWORD *)this + 11) == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    if (a6 && (uint64_t v14 = *a6, v14))
    {
      int v15 = (uint64_t *)*((void *)this + 15);
      if (!v15) {
        return 1685348671;
      }
      uint64_t v16 = v15[3];
      if (v16 <= a5)
      {
        if (a3) {
          *a3 = 0;
        }
        *a6 = 0;
        return 4294967257;
      }
      if (v14 + a5 > v16) {
        *a6 = v16 - a5;
      }
      if (a3) {
        *a3 = 0;
      }
      CompressedPacketTable::operator[]((uint64_t)buf, v15, a5);
      uint64_t v18 = *(void *)buf;
      CompressedPacketTable::operator[]((uint64_t)buf, v15, a5 + *a6 - 1);
      uint64_t v19 = *(void *)buf - v18 + v32[0];
      if (v19 <= 0xFFFFFFFFLL)
      {
        unsigned int v30 = *(_DWORD *)buf - v18 + v32[0];
        if (a7)
        {
          uint64_t v20 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, unsigned int *, void *))(*(void *)this + 72))(this, a2, v18, &v30, a7);
          uint64_t v21 = v20;
          if (v20 != -39 && v20)
          {
            if (a3) {
              *a3 = 0;
            }
            *a6 = 0;
            return v21;
          }
          LODWORD(v19) = v30;
          if (a3) {
            *a3 = v30;
          }
        }
        else
        {
          uint64_t v21 = 0;
        }
        if (*a6)
        {
          unint64_t v23 = 0;
          uint64_t v24 = 0;
          int64_t v25 = v18 + v19;
          if (a7) {
            uint64_t v26 = 0;
          }
          else {
            uint64_t v26 = v18;
          }
          p_UInt32 mDataByteSize = &a4->mDataByteSize;
          do
          {
            CompressedPacketTable::operator[]((uint64_t)buf, v15, a5 + v23);
            uint64_t v28 = v32[0];
            if (*(void *)buf + v32[0] > v25) {
              break;
            }
            if (a4)
            {
              UInt32 v29 = *(_DWORD *)&buf[8];
              *(void *)(p_mDataByteSize - 3) = v24 + v26;
              *(p_mDataByteSize - 1) = v29;
              *p_UInt32 mDataByteSize = v28;
            }
            v24 += v28;
            ++v23;
            p_mDataByteSize += 4;
          }
          while (v23 < *a6);
        }
        else
        {
          LODWORD(v23) = 0;
        }
        *a6 = v23;
        return v21;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      LOWORD(v32[0]) = 1024;
      *(_DWORD *)((char *)v32 + 2) = 3100;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid num packets parameter", buf, 0x12u);
    }
    return 4294967246;
  }
  return AudioFileObject::ReadPackets(this, a2, a3, a4, a5, a6, a7);
}

uint64_t AIFFAudioFile::GetChannelLayoutSize(AIFFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 1;
  }
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    uint64_t result = 0;
    int v4 = 32;
  }
  else
  {
    uint64_t v5 = *((void *)this + 18);
    uint64_t v6 = *((void *)this + 19) - v5;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
      unsigned int v9 = 1;
      while (1)
      {
        unsigned int v10 = (_DWORD *)(v5 + 24 * v7);
        if (*v10 == 1128808782) {
          break;
        }
        uint64_t v7 = v9;
        if (v8 <= v9++) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      unsigned int v10 = 0;
    }
    if (!a2) {
      return 0;
    }
    if (v10)
    {
      uint64_t result = 0;
      int v4 = v10[2] - 8;
    }
    else
    {
      int v4 = 0;
      uint64_t result = 1667787583;
    }
  }
  *a2 = v4;
  return result;
}

uint64_t ChunkyAudioFile::GetLoudnessInfo(ChunkyAudioFile *this, CACFDictionary *a2)
{
  unsigned int v14 = 0;
  uint64_t v4 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, void, unsigned int *))(*(void *)this + 736))(this, 1819243876, 0, &v14);
  if (!v4)
  {
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&bytes, v14, 1);
    uint64_t v4 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, void, void, unsigned int *, UInt8 *))(*(void *)this + 752))(this, 1819243876, 0, 0, &v14, bytes);
    if (!v4)
    {
      CFStringRef errorString = 0;
      char v11 = 1;
      CFDataRef v10 = CFDataCreate(0, bytes, v14);
      CFDictionaryRef v5 = (const __CFDictionary *)CFPropertyListCreateFromXMLData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, 0, &errorString);
      if (errorString) {
        CFRelease(errorString);
      }
      uint64_t v4 = 1667787583;
      if (v5)
      {
        CFDictionaryRef theDict = v5;
        char v9 = 1;
        CFTypeID v6 = CFGetTypeID(v5);
        if (v6 == CFDictionaryGetTypeID())
        {
          CACFDictionary::SetCFMutableDictionaryFromCopy(a2, theDict, 1);
          uint64_t v4 = 0;
        }
        CACFObject<void const*>::~CACFObject((uint64_t)&theDict);
      }
      CACFData::~CACFData((CACFData *)&v10);
    }
    if (bytes) {
      free(bytes);
    }
  }
  return v4;
}

void sub_18FF1A5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15) {
    free(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ChunkyAudioFile::GetUserChunkSize(ChunkyAudioFile *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result = 1667787583;
  unint64_t v8 = (char *)this + 144;
  uint64_t v6 = *((void *)this + 18);
  uint64_t v7 = *((void *)v8 + 1);
  uint64_t v9 = v7 - v6;
  if (v7 != v6)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    unsigned int v13 = 1;
    do
    {
      if (*(_DWORD *)(v6 + 24 * v10) == a2)
      {
        if (v11 == a3)
        {
          uint64_t v15 = v6 + 24 * v10;
          int v16 = *(_DWORD *)(v15 + 4);
          unint64_t v17 = *(void *)(v15 + 8);
          if (v17 <= ~v16)
          {
            uint64_t result = 0;
            *a4 = v17 - v16;
          }
          return result;
        }
        ++v11;
      }
      uint64_t v10 = v13;
    }
    while (v12 > v13++);
  }
  return result;
}

uint64_t AudioFileObject::GetEstimatedDuration(AudioFileObject *this, double *a2)
{
  uint64_t v3 = *((unsigned int *)this + 11);
  if (v3)
  {
    double v4 = *((double *)this + 3);
    double v5 = (double)((*(uint64_t (**)(AudioFileObject *))(*(void *)this + 240))(this) * v3) / v4;
  }
  else
  {
    double v5 = 0.0;
  }
  *a2 = v5;
  return 0;
}

uint64_t AudioFileObject::GetFormatListInfo(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 48;
  *a3 = 0;
  return 0;
}

uint64_t AIFFAudioFile::GetMagicCookieDataSize(AIFFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    if (a3) {
      *a3 = 0;
    }
    if (a2)
    {
      *a2 = 0;
      unsigned int v21 = 0;
      uint64_t v4 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, _WORD *, unsigned int *))(**((void **)this + 13)
                                                                                                + 48))(*((void *)this + 13), 0, *((void *)this + 9) + 8, 10, v22, &v21);
      if (v4) {
        return v4;
      }
      __int16 v14 = 0;
      uint64_t v15 = v22;
      unsigned int v16 = v21;
      char v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0xF6400000000;
      if (v21 < 0xA) {
        goto LABEL_23;
      }
      if (v22[0] != 2935)
      {
        if (v22[0] != 30475)
        {
LABEL_23:
          if (AC3PacketParser::IsValid((AC3PacketParser *)&v14)) {
            *a2 = 11;
          }
          if (v19) {
            free(v19);
          }
          return v4;
        }
        char v17 = 1;
      }
      LOBYTE(v14) = 1;
      goto LABEL_23;
    }
    return 0;
  }
  if (a3) {
    *a3 = 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *((void *)this + 19);
  uint64_t v7 = v6 - v5;
  if (v6 == v5)
  {
LABEL_17:
    int v12 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    unsigned int v10 = 1;
    while (*(_DWORD *)(v5 + 24 * v8) != 2002876005)
    {
      uint64_t v8 = v10;
      if (v9 <= v10++) {
        goto LABEL_17;
      }
    }
    int v12 = *(_DWORD *)(v5 + 24 * v8 + 8) - 8;
  }
  uint64_t v4 = 0;
  *a2 = v12;
  return v4;
}

void CACFFormatter::CACFFormatter(CACFFormatter *this, const void *a2)
{
  *(void *)this = 0;
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"%@", a2);
  CFIndex usedBufLen = 0;
  v6.length = CFStringGetLength(v3);
  v6.location = 0;
  CFStringGetBytes(v3, v6, 0x8000100u, 0x3Fu, 0, 0, 0, &usedBufLen);
  uint64_t v4 = (char *)malloc_type_malloc(usedBufLen + 1, 0x409FA1A0uLL);
  *(void *)this = v4;
  CFStringGetCString(v3, v4, usedBufLen + 1, 0x8000100u);
  CFRelease(v3);
}

void sub_18FF1A9E4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::addProperty(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  unsigned int v41 = a2;
  if (*(unsigned char *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v40, "addProperty");
    std::string::basic_string[abi:ne180100]<0>(&v39, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v32, 2217, &v40, &v39);
  }
  LODWORD(v32) = a2;
  std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100]((uint64_t)&v32 + 8, a3);
  char v35 = a4;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  std::vector<char> __src = 0;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 560, a2, &v41);
  *((_DWORD *)v7 + 6) = v32;
  uint64_t v8 = (void **)(v7 + 4);
  int v9 = *((unsigned __int8 *)v7 + 56);
  if (v9 == v34)
  {
    if (v8 != (void **)((char *)&v32 + 8) && v9 != 0) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, *((char **)&v32 + 1), v33, (unint64_t)&v33[-*((void *)&v32 + 1)]);
    }
  }
  else
  {
    if (*((unsigned char *)v7 + 56))
    {
      int v11 = *v8;
      if (v11)
      {
        void v7[5] = (uint64_t)v11;
        operator delete(v11);
      }
      char v12 = 0;
    }
    else
    {
      char *v8 = 0;
      void v7[5] = 0;
      void v7[6] = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, *((const void **)&v32 + 1), (uint64_t)v33, (size_t)&v33[-*((void *)&v32 + 1)]);
      char v12 = 1;
    }
    *((unsigned char *)v7 + 56) = v12;
  }
  *((unsigned char *)v7 + 64) = v35;
  unsigned int v13 = (char *)__src;
  if (v7 + 3 != (uint64_t *)&v32)
  {
    __int16 v14 = (char *)v7[9];
    uint64_t v15 = v37;
    int64_t v16 = v37 - (unsigned char *)__src;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)__src) >> 3);
    uint64_t v18 = v7[11];
    if (0xAAAAAAAAAAAAAAABLL * ((v18 - (uint64_t)v14) >> 3) >= v17)
    {
      uint64_t v25 = v7[10];
      uint64_t v22 = v7 + 10;
      uint64_t v24 = (char *)v25;
      uint64_t v26 = v25 - (void)v14;
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v14) >> 3);
      if (v27 < v17)
      {
        uint64_t v28 = (char *)__src + 24 * v27;
        if (v24 != v14)
        {
          memmove(v14, __src, v26 - 4);
          __int16 v14 = (char *)*v22;
        }
        int64_t v16 = v15 - v28;
        if (v15 == v28) {
          goto LABEL_34;
        }
        size_t v29 = v16 - 4;
        unsigned int v30 = v14;
        uint64_t v31 = v28;
        goto LABEL_33;
      }
    }
    else
    {
      if (v14)
      {
        v7[10] = (uint64_t)v14;
        operator delete(v14);
        uint64_t v18 = 0;
        v7[9] = 0;
        v7[10] = 0;
        v7[11] = 0;
      }
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_42;
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
      uint64_t v20 = 2 * v19;
      if (2 * v19 <= v17) {
        uint64_t v20 = v17;
      }
      unint64_t v21 = v19 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v20;
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
LABEL_42:
      }
        std::vector<float>::__throw_length_error[abi:ne180100]();
      __int16 v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v21);
      v7[10] = (uint64_t)v14;
      uint64_t v22 = v7 + 10;
      *(v22 - 1) = (uint64_t)v14;
      v22[1] = (uint64_t)&v14[24 * v23];
    }
    if (v15 == v13)
    {
LABEL_34:
      *uint64_t v22 = (uint64_t)&v14[v16];
      unsigned int v13 = (char *)__src;
      goto LABEL_35;
    }
    size_t v29 = v16 - 4;
    unsigned int v30 = v14;
    uint64_t v31 = v13;
LABEL_33:
    memmove(v30, v31, v29);
    goto LABEL_34;
  }
LABEL_35:
  if (v13)
  {
    uint64_t v37 = v13;
    operator delete(v13);
  }
  if (v34)
  {
    if (*((void *)&v32 + 1))
    {
      uint64_t v33 = (char *)*((void *)&v32 + 1);
      operator delete(*((void **)&v32 + 1));
    }
  }
}

void sub_18FF1ACCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_18FF1AD80(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    CFStringRef v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (off_t i = *v9; i; off_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  char v12 = (void *)(a1 + 16);
  unsigned int v13 = (char *)operator new(0x60uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(void *)unsigned int v13 = 0;
  *((void *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *((void *)v13 + 11) = 0;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unsigned __int8 v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v20 = operator new(8 * *(void *)&prime);
  unint64_t v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  uint64_t v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v12;
    size_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *uint64_t v23 = *v29;
          *size_t v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v30) = v29;
          size_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        uint64_t v23 = v29;
        size_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v6);
  off_t i = (uint64_t *)v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    *uint64_t v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v6) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_18FF1B1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::Graph::GraphProperty>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

AudioUnitParameterValue DSPGraph::AUBox::getParameter(AudioUnit *this, AudioUnitParameterID a2, AudioUnitScope a3, AudioUnitElement a4)
{
  outint Value = 0.0;
  OSStatus Parameter = AudioUnitGetParameter(this[106], a2, a3, a4, &outValue);
  if (Parameter)
  {
    int v6 = Parameter;
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v7, "AudioUnitGetParameter");
    DSPGraph::ThrowException(v6, &v9, 1728, &v8, &v7);
  }
  return outValue;
}

void sub_18FF1B2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPCAURegistrar_IsActiveHost(int a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
  uint64_t v10 = 0;
  unint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  unint64_t v3 = *(NSObject **)(v2 + 224);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN14IPCAURegistrar12IsActiveHostEi_block_invoke;
  block[3] = &unk_1E56885F0;
  int v9 = a1;
  block[4] = &v10;
  void block[5] = v2;
  dispatch_sync(v3, block);
  if (kInterAppAudioScope)
  {
    uint64_t v4 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *((unsigned __int8 *)v11 + 24);
    *(_DWORD *)long long buf = 136315906;
    float v15 = "IPCAURegistrar.mm";
    __int16 v16 = 1024;
    int v17 = 523;
    __int16 v18 = 1024;
    int v19 = a1;
    __int16 v20 = 1024;
    int v21 = v5;
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IsActiveHost(%d): %d", buf, 0x1Eu);
  }
LABEL_7:
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t CADeprecated::TSingleton<IPCAURegistrar>::instance()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&CADeprecated::TSingleton<IPCAURegistrar>::sOnce, memory_order_acquire) != -1)
  {
    unint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&CADeprecated::TSingleton<IPCAURegistrar>::sOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAURegistrar>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<IPCAURegistrar>::sInstance;
}

void AUOOPWorkgroupManager_AddRemoteIOWorkgroup(int a1, void *a2)
{
  char v15[4] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2;
  uint64_t v4 = auoop::gWorkgroupManager(v3);
  uint64_t v6 = caulk::mach::details::retain_os_object(v3, v5);
  caulk::mach::details::release_os_object(0, v7);
  v12[0] = MEMORY[0x1E4FB7EA0] + 16;
  v12[1] = v6;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  caulk::mach::details::release_os_object(0, v8);
  int v11 = a1;
  caulk::mach::os_workgroup_managed::copy_mach_port((caulk::mach::os_workgroup_managed *)v12);
  int v9 = (_DWORD *)auoop::tlsWorkgroupPort();
  *int v9 = v10;
  v15[0] = &unk_1EDFA0E28;
  v15[1] = &v11;
  int v15[2] = v12;
  void v15[3] = v15;
  auoop::WorkgroupManager_Base::mutateWorkgroups(v4, (uint64_t)v15);
  std::__function::__value_func<BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__value_func[abi:ne180100](v15);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v12);
}

void sub_18FF1B610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)va);

  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void auoop::WorkgroupManager_Base::mutateWorkgroups(uint64_t a1, uint64_t a2)
{
  LOBYTE(__p) = 0;
  char v39 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 != v5)
  {
    while (1)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));

      if (!WeakRetained) {
        break;
      }
      v4 += 24;
      if (v4 == v5)
      {
        uint64_t v4 = v5;
        goto LABEL_11;
      }
    }
    if (v4 != v5)
    {
      for (uint64_t i = v4 + 24; i != v5; i += 24)
      {
        id v8 = objc_loadWeakRetained((id *)(i + 16));

        if (v8)
        {
          *(_OWORD *)uint64_t v4 = *(_OWORD *)i;
          id v9 = objc_loadWeakRetained((id *)(i + 16));
          objc_storeWeak((id *)(v4 + 16), v9);

          v4 += 24;
        }
      }
    }
  }
LABEL_11:
  uint64_t v10 = *(void *)(a1 + 16);
  if (v4 != v10)
  {
    uint64_t v11 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(*(void *)(a1 + 16), *(void *)(a1 + 16), v4);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12 != v11)
    {
      do
      {
        uint64_t v13 = v12 - 24;
        objc_destroyWeak((id *)(v12 - 8));
        uint64_t v12 = v13;
      }
      while (v13 != v11);
    }
    *(void *)(a1 + 16) = v11;
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (!v14) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (((v4 == v10) & ~(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v14 + 48))(v14, a1 + 8)) != 0) {
    goto LABEL_46;
  }
  if (!v39)
  {
    std::string __p = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    std::vector<auoop::TrackedWorkgroup>::__init_with_size[abi:ne180100]<auoop::TrackedWorkgroup*,auoop::TrackedWorkgroup*>(&__p, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
    char v39 = 1;
LABEL_46:
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    goto LABEL_47;
  }
  if (&__p == (void **)(a1 + 8)) {
    goto LABEL_46;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16);
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
  uint64_t v18 = (uint64_t)v38;
  int v19 = (id *)__p;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (unsigned char *)__p) >> 3) >= v17)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (unsigned char *)__p) >> 3) >= v17)
    {
      uint64_t v30 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(*(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)__p);
      uint64_t v31 = v37;
      if (v37 != (id *)v30)
      {
        do
        {
          unint64_t v32 = v31 - 3;
          objc_destroyWeak(v31 - 1);
          uint64_t v31 = v32;
        }
        while (v32 != (id *)v30);
      }
      uint64_t v37 = (id *)v30;
    }
    else
    {
      uint64_t v28 = v16 + 8 * (((char *)v37 - (unsigned char *)__p) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(*(void *)(a1 + 8), v28, (uint64_t)__p);
      size_t v29 = v37;
      while (v28 != v15)
      {
        *(_OWORD *)size_t v29 = *(_OWORD *)v28;
        objc_copyWeak(v29 + 2, (id *)(v28 + 16));
        v29 += 3;
        v28 += 24;
      }
      uint64_t v37 = v29;
    }
  }
  else
  {
    if (__p)
    {
      __int16 v20 = v37;
      int v21 = __p;
      if (v37 != __p)
      {
        do
        {
          uint64_t v22 = v20 - 3;
          objc_destroyWeak(v20 - 1);
          __int16 v20 = v22;
        }
        while (v22 != v19);
        int v21 = __p;
      }
      uint64_t v37 = v19;
      operator delete(v21);
      uint64_t v18 = 0;
      std::string __p = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    if (v17 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_55;
    }
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
    uint64_t v24 = 2 * v23;
    if (2 * v23 <= v17) {
      uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
    }
    unint64_t v25 = v23 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v24;
    if (v25 > 0xAAAAAAAAAAAAAAALL) {
LABEL_55:
    }
      std::vector<float>::__throw_length_error[abi:ne180100]();
    unint64_t v26 = (id *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v25);
    std::string __p = v26;
    uint64_t v37 = v26;
    uint64_t v38 = &v26[3 * v27];
    while (v16 != v15)
    {
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v16;
      objc_copyWeak(v26 + 2, (id *)(v16 + 16));
      v26 += 3;
      v16 += 24;
    }
    uint64_t v37 = v26;
  }
  if (a1) {
    goto LABEL_46;
  }
LABEL_47:
  if (v39)
  {
    uint64_t v33 = (os_unfair_lock_s *)(a1 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
    char v35 = *(uint64_t **)(a1 + 40);
    unsigned __int8 v34 = *(uint64_t **)(a1 + 48);
    while (v35 != v34)
      auoop::WorkgroupPropagator::propagate(*v35++, (uint64_t *)&__p);
    os_unfair_lock_unlock(v33);
    if (v39)
    {
      p_p = &__p;
      std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](&p_p);
    }
  }
}

void sub_18FF1BA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  if (v14) {
    os_unfair_lock_unlock(v14);
  }
  if (a13)
  {
    a14 = &a10;
    std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<auoop::TrackedWorkgroup>::__init_with_size[abi:ne180100]<auoop::TrackedWorkgroup*,auoop::TrackedWorkgroup*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<auoop::TrackedWorkgroup>::__vallocate[abi:ne180100](a1, a4);
    uint64_t v7 = a1[1];
    while (a2 != a3)
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
      objc_copyWeak((id *)(v7 + 16), (id *)(a2 + 16));
      v7 += 24;
      a2 += 24;
    }
    a1[1] = v7;
  }
}

void sub_18FF1BB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;
        objc_destroyWeak(v4 - 1);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<auoop::TrackedWorkgroup>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__function::__func<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0,std::allocator<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::operator()(uint64_t a1, auoop::WorkgroupManager_Base::State *a2)
{
  int v3 = **(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void **)(*(void *)(a1 + 16) + 8);
  applesauce::dispatch::v1::source::operator*(v4);
  objc_claimAutoreleasedReturnValue();
  auoop::WorkgroupManager_Base::State::addWorkgroup(a2, v3, v4);

  return 1;
}

void sub_18FF1BC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void auoop::WorkgroupManager_Base::State::addWorkgroup(auoop::WorkgroupManager_Base::State *this, int a2, id val)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  if (v5 != *(void *)this)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(void *)this) >> 3);
    do
    {
      unint64_t v7 = v6 >> 1;
      uint64_t v8 = v4 + 24 * (v6 >> 1);
      unint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = v8 + 24;
      v6 += ~(v6 >> 1);
      if (v9 > (unint64_t)val) {
        unint64_t v6 = v7;
      }
      else {
        uint64_t v4 = v10;
      }
    }
    while (v6);
    uint64_t v5 = v4;
  }
  LODWORD(v54) = a2;
  *((void *)&v54 + 1) = val;
  objc_initWeak(&v55, val);
  uint64_t v11 = *(void *)this;
  unint64_t v12 = *((void *)this + 1);
  uint64_t v13 = v5 - *(void *)this;
  uint64_t v14 = v13 / 24;
  uint64_t v15 = *(void *)this + 24 * (v13 / 24);
  unint64_t v16 = *((void *)this + 2);
  if (v12 >= v16)
  {
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v11) >> 3) + 1;
    if (v20 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v11) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    uint64_t v59 = (char *)this + 16;
    if (v22)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v22);
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v29 = (uint64_t)&v24[24 * v14];
    unsigned int v56 = v24;
    *(void *)&long long v57 = v29;
    *((void *)&v57 + 1) = v29;
    int v58 = &v24[24 * v23];
    if (v14 == v23)
    {
      if (v13 < 1)
      {
        if (v5 == v11) {
          unint64_t v32 = 1;
        }
        else {
          unint64_t v32 = 2 * v14;
        }
        uint64_t v63 = (char *)this + 16;
        uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v32);
        char v35 = v33;
        char v36 = &v33[24 * (v32 >> 2)];
        uint64_t v37 = &v33[24 * v34];
        uint64_t v38 = v57;
        if (*((void *)&v57 + 1) == (void)v57)
        {
          int64x2_t v41 = vdupq_n_s64(v57);
          char v39 = &v33[24 * (v32 >> 2)];
        }
        else
        {
          uint64_t v53 = &v33[24 * v34];
          char v39 = &v36[*((void *)&v57 + 1) - v57];
          long long v40 = (id *)&v33[24 * (v32 >> 2)];
          do
          {
            *(_OWORD *)long long v40 = *(_OWORD *)v38;
            objc_moveWeak(v40 + 2, (id *)(v38 + 16));
            v40 += 3;
            v38 += 24;
          }
          while (v40 != (id *)v39);
          int64x2_t v41 = (int64x2_t)v57;
          uint64_t v37 = v53;
        }
        unint64_t v42 = v58;
        uint64_t v60 = v56;
        unsigned int v56 = v35;
        *(void *)&long long v57 = v36;
        int64x2_t v61 = v41;
        *((void *)&v57 + 1) = v39;
        int v58 = v37;
        uint64_t v62 = v42;
        std::__split_buffer<auoop::TrackedWorkgroup>::~__split_buffer((uint64_t)&v60);
        uint64_t v29 = *((void *)&v57 + 1);
      }
      else
      {
        uint64_t v30 = v14 + 2;
        if (v14 >= -1) {
          uint64_t v30 = v14 + 1;
        }
        uint64_t v31 = -3 * (v30 >> 1);
        uint64_t v29 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(v29, v29, v29 - 24 * (v30 >> 1));
        *(void *)&long long v57 = v57 + 8 * v31;
        *((void *)&v57 + 1) = v29;
      }
    }
    *(_OWORD *)uint64_t v29 = v54;
    objc_moveWeak((id *)(v29 + 16), &v55);
    uint64_t v43 = (id *)v57;
    uint64_t v44 = *((void *)&v57 + 1) + 24;
    *((void *)&v57 + 1) += 24;
    uint64_t v45 = *(id **)this;
    if (*(void *)this != v15)
    {
      uint64_t v46 = (id *)(v11 + 24 * v14 - 8);
      uint64_t v47 = (id *)(v57 - 8);
      do
      {
        uint64_t v48 = v47;
        uint64_t v49 = v46 - 2;
        *((_OWORD *)v47 - 1) = *((_OWORD *)v46 - 1);
        objc_moveWeak(v47, v46);
        v46 -= 3;
        uint64_t v47 = v48 - 3;
      }
      while (v49 != v45);
      uint64_t v43 = v48 - 2;
      uint64_t v44 = *((void *)&v57 + 1);
    }
    *(void *)&long long v57 = v43;
    uint64_t v50 = *((void *)this + 1);
    if (v50 != v15)
    {
      do
      {
        *(_OWORD *)uint64_t v44 = *(_OWORD *)v15;
        objc_moveWeak((id *)(v44 + 16), (id *)(v15 + 16));
        v44 += 24;
        v15 += 24;
      }
      while (v15 != v50);
      uint64_t v43 = (id *)v57;
      uint64_t v15 = *((void *)this + 1);
    }
    int v51 = *(char **)this;
    *(void *)this = v43;
    *((void *)this + 1) = v44;
    uint64_t v52 = (char *)*((void *)this + 2);
    *((void *)this + 2) = v58;
    *((void *)&v57 + 1) = v15;
    int v58 = v52;
    unsigned int v56 = v51;
    *(void *)&long long v57 = v51;
    std::__split_buffer<auoop::TrackedWorkgroup>::~__split_buffer((uint64_t)&v56);
  }
  else if (v15 == v12)
  {
    *(_OWORD *)uint64_t v15 = v54;
    objc_moveWeak((id *)(v11 + 24 * v14 + 16), &v55);
    *((void *)this + 1) = v15 + 24;
  }
  else
  {
    uint64_t v17 = v15 + 24;
    unint64_t v18 = v12 - 24;
    uint64_t v19 = *((void *)this + 1);
    while (v18 < v12)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v18;
      objc_moveWeak((id *)(v19 + 16), (id *)(v18 + 16));
      v19 += 24;
      v18 += 24;
    }
    *((void *)this + 1) = v19;
    if (v12 != v17)
    {
      unint64_t v25 = (id *)(v12 - 8);
      uint64_t v26 = 8 * ((uint64_t)(v12 - v17) >> 3);
      do
      {
        *((_OWORD *)v25 - 1) = *(_OWORD *)(v15 + v26 - 24);
        id WeakRetained = objc_loadWeakRetained((id *)(v15 + v26 - 8));
        objc_storeWeak(v25, WeakRetained);

        v25 -= 3;
        v26 -= 24;
      }
      while (v26);
    }
    *(_OWORD *)uint64_t v15 = v54;
    id v28 = objc_loadWeakRetained(&v55);
    objc_storeWeak((id *)(v11 + 24 * v14 + 16), v28);
  }
  objc_destroyWeak(&v55);
}

void sub_18FF1C0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__split_buffer<auoop::TrackedWorkgroup>::~__split_buffer((uint64_t)va);
  objc_destroyWeak(v5);
  _Unwind_Resume(a1);
}

uint64_t auoop::gWorkgroupManager(auoop *this)
{
  {
    operator new();
  }
  return auoop::gWorkgroupManager(void)::global;
}

void sub_18FF1C178(_Unwind_Exception *a1)
{
}

char *DSPGraph::Graph::addParameter(DSPGraph::Graph *this, unsigned int a2, float a3, char a4)
{
  unsigned int v11 = a2;
  if (*((unsigned char *)this + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v9, "addParameter");
    std::string::basic_string[abi:ne180100]<0>(&v8, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v10, 2309, &v9, &v8);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)this + 65, a2, &v11);
  *((_DWORD *)result + 6) = a2;
  *((float *)result + 7) = a3;
  result[32] = a4;
  *((void *)result + 6) = *((void *)result + 5);
  return result;
}

void sub_18FF1C244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    long long v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      long long v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = a1 + 2;
  long long v10 = (char *)operator new(0x40uLL);
  *(void *)long long v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((void *)v10 + 7) = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v19 = operator new(8 * *(void *)&prime);
  unint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  unint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    id v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *unint64_t v22 = *v28;
          *id v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          id v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        unint64_t v22 = v28;
        id v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v30 = *a1;
  uint64_t v31 = *(void **)(*a1 + 8 * v6);
  if (v31)
  {
    *(void *)long long v10 = *v31;
LABEL_72:
    *uint64_t v31 = v10;
    goto LABEL_73;
  }
  *(void *)long long v10 = *v12;
  void *v12 = v10;
  *(void *)(v30 + 8 * v6) = v12;
  if (*(void *)v10)
  {
    unint64_t v32 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_18FF1C680(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_FormatEmploysDependentPackets(RegistryAccess *a1, unsigned int *a2)
{
  RegistryAccess::instance(a1);
  uint64_t v4 = qword_1EB3D4FB0;
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, RegistryAccess *, uint64_t, void, void))(*(void *)v4 + 16))(v4, a1, 1819304813, 0, 0);
  if (v5
    || (uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, RegistryAccess *, void, void))(*(void *)v4 + 16))(v4, 1819304813, a1, 0, 0)) != 0)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v5 + 32))(v5, a2);
  }
  else
  {
    uint64_t v6 = 1718449215;
  }
  os_unfair_recursive_lock_unlock();
  return v6;
}

void sub_18FF1C7A4(_Unwind_Exception *a1)
{
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioChannelLayout *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v4 = funopen(&v10, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  uint64_t v5 = v4;
  long long v10 = v4;
  if (a2)
  {
    fprintf(v4, "tag=0x%x", a2->mChannelLayoutTag);
    if (a2->mChannelLayoutTag)
    {
      if (a2->mChannelLayoutTag == 0x10000) {
        fprintf(v5, ", channel bitmap=0x%x\n", a2->mChannelBitmap);
      }
    }
    else
    {
      uint64_t v6 = "s";
      if (a2->mNumberChannelDescriptions == 1) {
        uint64_t v6 = "";
      }
      fprintf(v5, ", %d channel description%s [", a2->mNumberChannelDescriptions, v6);
      if (a2->mNumberChannelDescriptions)
      {
        unint64_t v7 = 0;
        mChannelDescriptions = a2->mChannelDescriptions;
        do
        {
          if (v7) {
            fwrite(", ", 2uLL, 1uLL, v5);
          }
          CFStringRef outPropertyData = 0;
          UInt32 ioPropertyDataSize = 8;
          if (AudioFormatGetProperty(0x63736E6Du, 0x14u, mChannelDescriptions, &ioPropertyDataSize, &outPropertyData))
          {
            fprintf(v5, "%d", mChannelDescriptions->mChannelLabel);
          }
          else
          {
            CFStringGetCString(outPropertyData, buffer, 96, 0x8000100u);
            fputs(buffer, v5);
            CFRelease(outPropertyData);
          }
          ++v7;
          ++mChannelDescriptions;
        }
        while (v7 < a2->mNumberChannelDescriptions);
      }
      fputc(93, v5);
    }
  }
  else
  {
    fwrite("NULL", 4uLL, 1uLL, v4);
  }
  long long v9 = CAMemoryStream::cstr(&v10);
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  *(void *)this = v9;
  fclose(v10);
  free(v11);
}

void sub_18FF1C9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, FILE *a12, void *a13)
{
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  uint8x8_t v8 = (unsigned int *)inSpecifier;
  uint64_t v9 = *(void *)&inSpecifierSize;
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  if ((!ioPropertyDataSize || !outPropertyData)
    && inPropertyID != 1752589411
    && inPropertyID != 1986093932
    && inPropertyID != 1752589667)
  {
    return -50;
  }
  OSStatus DecoderSpecificBitStreamFromESDS = 1886547824;
  if ((int)inPropertyID <= 1701733229)
  {
    if ((int)inPropertyID <= 1668047725)
    {
      if ((int)inPropertyID > 1634496372)
      {
        if ((int)inPropertyID <= 1667523439)
        {
          if ((int)inPropertyID <= 1635151458)
          {
            if (inPropertyID != 1634496373)
            {
              if (inPropertyID == 1635148901)
              {
                if (inSpecifierSize != 4) {
                  return 561213539;
                }
                if (!inSpecifier) {
                  return -50;
                }
                uint64_t v62 = *(unsigned int *)inSpecifier;
                RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
                uint64_t v63 = qword_1EB3D4FB0;
                os_unfair_recursive_lock_lock_with_options();
                OSStatus v15 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, void *))(*(void *)v63 + 104))(v63, v62, ioPropertyDataSize, outPropertyData);
              }
              else
              {
                if (inPropertyID != 1635149166) {
                  return DecoderSpecificBitStreamFromESDS;
                }
                if (inSpecifierSize != 4) {
                  return 561213539;
                }
                uint64_t v13 = *(unsigned int *)inSpecifier;
                RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
                uint64_t v14 = qword_1EB3D4FB0;
                os_unfair_recursive_lock_lock_with_options();
                OSStatus v15 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, void *))(*(void *)v14 + 96))(v14, v13, ioPropertyDataSize, outPropertyData);
              }
LABEL_405:
              OSStatus DecoderSpecificBitStreamFromESDS = v15;
              os_unfair_recursive_lock_unlock();
              return DecoderSpecificBitStreamFromESDS;
            }
            OSStatus v12 = 561213539;
            if (inSpecifierSize != 8) {
              return v12;
            }
            if (!inSpecifier) {
              return -50;
            }
            if (*ioPropertyDataSize != 8) {
              return 561211770;
            }
            v146.Float64 mSampleRate = 0.0;
            OSStatus DecoderSpecificBitStreamFromESDS = AudioFormatProperty_AlbumLoudness((CFArrayRef *)inSpecifier, (const __CFDictionary **)&v146);
            goto LABEL_531;
          }
          if (inPropertyID != 1635151459)
          {
            if (inPropertyID == 1650551910)
            {
              OSStatus v12 = 561213539;
              if (inSpecifierSize != 24) {
                return v12;
              }
              if (inSpecifier)
              {
                *(_OWORD *)&v146.Float64 mSampleRate = *(_OWORD *)inSpecifier;
                *(void *)&v146.mBytesPerPacket = *((void *)inSpecifier + 2);
                SanitizeClientAudioChannelLayout((const AudioChannelLayout *)v153);
              }
              return -50;
            }
            if (inPropertyID != 1651340391) {
              return DecoderSpecificBitStreamFromESDS;
            }
            OSStatus v12 = 561213539;
            if (inSpecifierSize != 4) {
              return v12;
            }
            if (!inSpecifier) {
              return -50;
            }
            if (*ioPropertyDataSize != 4) {
              return 561211770;
            }
            int v31 = AudioFormatProperty_BitmapForLayoutTag(*(_DWORD *)inSpecifier);
            if (!v31) {
              return 1718449215;
            }
            goto LABEL_390;
          }
          goto LABEL_263;
        }
        if ((int)inPropertyID <= 1667787890)
        {
          switch(inPropertyID)
          {
            case 0x63646370u:
              if (!inSpecifier) {
                return -50;
              }
              if (inSpecifierSize < 0x10) {
                return 561213539;
              }
              return AudioFormatProperty_CanDecodeAudioFormatIndicatedByCodecsParameterValue((uint64_t)inSpecifier, ioPropertyDataSize, outPropertyData);
            case 0x63686571u:
              OSStatus v12 = 561213539;
              if (*ioPropertyDataSize == 4)
              {
                if (inSpecifierSize != 16) {
                  return v12;
                }
                if (inSpecifier)
                {
                  LODWORD(v145.mSampleRate) = 0;
                  SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
                }
                return -50;
              }
              break;
            case 0x63686861u:
              OSStatus v12 = 561213539;
              if (*ioPropertyDataSize == 4)
              {
                if (inSpecifierSize != 8) {
                  return v12;
                }
                if (inSpecifier) {
                  operator new[]();
                }
                return -50;
              }
              break;
            default:
              return DecoderSpecificBitStreamFromESDS;
          }
          return 561211770;
        }
        if (inPropertyID != 1667787891)
        {
          if (inPropertyID == 1667788144)
          {
            OSStatus v12 = 561213539;
            if (inSpecifierSize != 16) {
              return v12;
            }
            if (inSpecifier) {
              SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
            }
            return -50;
          }
          if (inPropertyID != 1668047725) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (!inSpecifier) {
            return -50;
          }
          OSStatus v12 = 561213539;
          if (inSpecifierSize == 4)
          {
            unsigned int v35 = 0;
          }
          else
          {
            if (inSpecifierSize != 8) {
              return v12;
            }
            unsigned int v35 = *((_DWORD *)inSpecifier + 1);
          }
          int v70 = *(_DWORD *)inSpecifier;
          UInt32 v71 = AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(*(_DWORD *)inSpecifier, v35, v5);
          if (*ioPropertyDataSize < v71) {
            return 561211770;
          }
          if (*ioPropertyDataSize > v71) {
            *UInt32 ioPropertyDataSize = v71;
          }
          AudioFormatProperty_ChannelLayoutForWAVEChannelMask(v70, v35, (AudioChannelLayout *)outPropertyData, v72);
          return 0;
        }
        OSStatus v12 = 561213539;
        if (inSpecifierSize < 0x51) {
          return v12;
        }
        if (!inSpecifier) {
          return -50;
        }
        uint64_t v45 = *((unsigned int *)inSpecifier + 19);
        v146.Float64 mSampleRate = *((Float64 *)inSpecifier + 10);
        Float64 mSampleRate = v146.mSampleRate;
        *(void *)&v146.signed int mFormatID = *(void *)&v146.mSampleRate + v45;
        *(void *)&v146.mBytesPerPacket = 0;
        if ((LOBYTE(v146.mSampleRate) & 3) != 0 && v45)
        {
          UInt32 v46 = 0;
          char v47 = LOBYTE(v146.mSampleRate) + 1;
          int v48 = -8;
          *(void *)&Float64 v49 = *(void *)&v146.mSampleRate + 1;
          do
          {
            v146.mFramesPerPacket = v48 + 16;
            v146.Float64 mSampleRate = v49;
            UInt32 v46 = *(unsigned __int8 *)(*(void *)&v49 - 1) | (v46 << 8);
            v146.mBytesPerPacket = v46;
            v48 += 8;
            if ((v47 & 3) == 0) {
              break;
            }
            ++v47;
          }
          while ((*(void *)&v49)++ < (unint64_t)(*(void *)&mSampleRate + v45));
          v146.mBytesPerPacket = v46 << (24 - v48);
        }
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        LODWORD(v145.mSampleRate) = v45;
        LODWORD(v139) = 0;
        signed int v51 = *((_DWORD *)inSpecifier + 2);
        if (v51 > 1902207330)
        {
          if (v51 > 2053202274)
          {
            if (v51 > 2053202791)
            {
              if (v51 == 2053202792) {
                goto LABEL_650;
              }
              if (v51 == 2053464883)
              {
LABEL_572:
                *(_DWORD *)CFStringRef outPropertyData = bswap32(v51);
                *((_WORD *)outPropertyData + 2) = bswap32(*((unsigned __int16 *)inSpecifier + 36)) >> 16;
                *((unsigned char *)outPropertyData + 6) = 1;
                if (*ioPropertyDataSize >= 9)
                {
                  OSStatus DecoderSpecificBitStreamFromESDS = 560226676;
                  if ((v45 - 46) >= 0xFFFFFFDF
                    && mSampleRate != 0.0
                    && *ioPropertyDataSize - 8 >= (int)v45 - 8
                    && *(_DWORD *)(*(void *)&mSampleRate + 4) == 862152036)
                  {
                    memcpy((char *)outPropertyData + 8, (const void *)(*(void *)&mSampleRate + 8), (v45 - 8));
                    OSStatus DecoderSpecificBitStreamFromESDS = 0;
                    *((unsigned char *)outPropertyData + 7) = v45 - 8;
                    *UInt32 ioPropertyDataSize = v45;
                  }
                  return DecoderSpecificBitStreamFromESDS;
                }
                return 561211770;
              }
              int v74 = 2053202800;
              goto LABEL_637;
            }
            if (v51 == 2053202275) {
              goto LABEL_650;
            }
            int v109 = 2053202739;
          }
          else
          {
            if (v51 > 1902207847)
            {
              if (v51 == 1902207848 || v51 == 1902207856) {
                goto LABEL_650;
              }
              int v52 = 1902469939;
              goto LABEL_538;
            }
            if (v51 == 1902207331) {
              goto LABEL_650;
            }
            int v109 = 1902207795;
          }
        }
        else
        {
          if (v51 <= 1885430114)
          {
            if (v51 > 1633772399)
            {
              if (v51 != 1633772400)
              {
                if (v51 != 1633889587)
                {
                  int v52 = 1700998451;
                  goto LABEL_538;
                }
LABEL_646:
                *(_DWORD *)CFStringRef outPropertyData = bswap32(v51);
                *((_WORD *)outPropertyData + 2) = bswap32(*((unsigned __int16 *)inSpecifier + 36)) >> 16;
                *((unsigned char *)outPropertyData + 6) = 1;
                if (v45 == 10)
                {
                  OSStatus DecoderSpecificBitStreamFromESDS = 0;
                  *((unsigned char *)outPropertyData + 7) = 10;
                  uint64_t v138 = **(void **)&mSampleRate;
                  *((_WORD *)outPropertyData + 8) = *(_WORD *)(*(void *)&mSampleRate + 8);
                  *((void *)outPropertyData + 1) = v138;
                }
                else
                {
                  if (v45 != 11 || *(_DWORD *)(*(void *)&mSampleRate + 4) != 862151012) {
                    return 560360820;
                  }
                  LOWORD(v153[0].mFormatID) = 0;
                  *(void *)&v153[0].Float64 mSampleRate = 30475;
                  LODWORD(v143[0]) = 10;
                  ConvertAC3MP4CookieToAC3Header(*(unsigned char **)&mSampleRate, (uint64_t)v153, (unsigned __int8 *)v143, ioPropertyDataSize);
                  OSStatus DecoderSpecificBitStreamFromESDS = 0;
                  *((void *)outPropertyData + 1) = *(void *)&v153[0].mSampleRate;
                  *((_WORD *)outPropertyData + 8) = v153[0].mFormatID;
                  *((unsigned char *)outPropertyData + 7) = 10;
                }
                UInt32 v23 = 18;
                goto LABEL_715;
              }
LABEL_650:
              OSStatus DecoderSpecificBitStreamFromESDS = ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS((uint64_t)&v146, (int *)&v145, (int *)&v139);
              if (DecoderSpecificBitStreamFromESDS) {
                return DecoderSpecificBitStreamFromESDS;
              }
              *(_DWORD *)CFStringRef outPropertyData = bswap32(v8[2]);
              *((_WORD *)outPropertyData + 2) = bswap32(*((unsigned __int16 *)v8 + 36)) >> 16;
              *((unsigned char *)outPropertyData + 6) = 1;
              size_t mSampleRate_low = LODWORD(v145.mSampleRate);
              *((unsigned char *)outPropertyData + 7) = LOBYTE(v145.mSampleRate);
              memcpy((char *)outPropertyData + 8, (const void *)(*((void *)v8 + 10) + v139), mSampleRate_low);
              UInt32 v23 = mSampleRate_low + 8;
              goto LABEL_715;
            }
            if (v51 == 1633772320) {
              goto LABEL_650;
            }
            int v74 = 1633772392;
LABEL_637:
            if (v51 != v74) {
              return DecoderSpecificBitStreamFromESDS;
            }
            goto LABEL_650;
          }
          if (v51 > 1885430631)
          {
            if (v51 == 1885430632 || v51 == 1885430640) {
              goto LABEL_650;
            }
            int v52 = 1885692723;
LABEL_538:
            if (v51 != v52) {
              return DecoderSpecificBitStreamFromESDS;
            }
            goto LABEL_572;
          }
          if (v51 == 1885430115) {
            goto LABEL_650;
          }
          int v109 = 1885430579;
        }
        if (v51 != v109) {
          return DecoderSpecificBitStreamFromESDS;
        }
        goto LABEL_646;
      }
      if ((int)inPropertyID > 1633971810)
      {
        if ((int)inPropertyID > 1634038641)
        {
          if (inPropertyID == 1634038642)
          {
            RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
            uint64_t v43 = qword_1EB3D4FB0;
            os_unfair_recursive_lock_lock_with_options();
            OSStatus v15 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, UInt32 *, void *))(*(void *)v43 + 136))(v43, v9, v8, ioPropertyDataSize, outPropertyData);
            goto LABEL_405;
          }
          if (inPropertyID == 1634100078)
          {
            OSStatus v12 = 561213539;
            if (inSpecifierSize != 40) {
              return v12;
            }
            if (!inSpecifier) {
              return -50;
            }
            if (*ioPropertyDataSize != 8) {
              return 561211770;
            }
            AudioFormatProperty_FormatCategoryName((const AudioStreamBasicDescription *)inSpecifier, (const __CFString **)outPropertyData, (uint64_t)inSpecifier, (const __CFString *)ioPropertyDataSize);
            return 0;
          }
          if (inPropertyID != 1634100080) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (inSpecifier)
          {
            if (inSpecifierSize < 0x10) {
              return 561213539;
            }
            return AudioFormatProperty_AudioFormatFromCodecsParameterValue((uint64_t)inSpecifier, outPropertyData);
          }
          return -50;
        }
        if (inPropertyID == 1633971811)
        {
LABEL_263:
          if (inSpecifierSize != 40) {
            return 561213539;
          }
          if (!inSpecifier) {
            return -50;
          }
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          uint64_t v39 = qword_1EB3D4FB0;
          os_unfair_recursive_lock_lock_with_options();
          OSStatus v15 = (*(uint64_t (**)(uint64_t, unsigned int *, UInt32 *, void *, BOOL))(*(void *)v39 + 152))(v39, v8, ioPropertyDataSize, outPropertyData, inPropertyID == 1635151459);
          goto LABEL_405;
        }
        if (inPropertyID == 1634034290)
        {
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          uint64_t v55 = qword_1EB3D4FB0;
          os_unfair_recursive_lock_lock_with_options();
          OSStatus v15 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, UInt32 *, void *))(*(void *)v55 + 128))(v55, v9, v8, ioPropertyDataSize, outPropertyData);
          goto LABEL_405;
        }
        if (inPropertyID != 1634034540) {
          return DecoderSpecificBitStreamFromESDS;
        }
LABEL_266:
        if (inSpecifierSize != 40) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        uint64_t v40 = qword_1EB3D4FB0;
        os_unfair_recursive_lock_lock_with_options();
        OSStatus v15 = (*(uint64_t (**)(uint64_t, unsigned int *, UInt32 *, void *, BOOL))(*(void *)v40 + 144))(v40, v8, ioPropertyDataSize, outPropertyData, inPropertyID == 1634034540);
        goto LABEL_405;
      }
      if ((int)inPropertyID <= 1633906533)
      {
        if (inPropertyID != 1633776744)
        {
          if (inPropertyID != 1633904998) {
            return DecoderSpecificBitStreamFromESDS;
          }
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          uint64_t v38 = qword_1EB3D4FB0;
          os_unfair_recursive_lock_lock_with_options();
          OSStatus v15 = (*(uint64_t (**)(uint64_t, UInt32 *, void *))(*(void *)v38 + 112))(v38, ioPropertyDataSize, outPropertyData);
          goto LABEL_405;
        }
        if (!inSpecifier) {
          return -50;
        }
        OSStatus v12 = 561213539;
        if (inSpecifierSize < 0x38) {
          return v12;
        }
        if (*ioPropertyDataSize < 4) {
          return 561211770;
        }
        OSStatus CanBeAuthorized = AudioFormatProperty_AudibleProtectedContentCanBeAuthorized((uint64_t)inSpecifier, outPropertyData);
        goto LABEL_365;
      }
      if (inPropertyID == 1633906534)
      {
        RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
        uint64_t v41 = qword_1EB3D4FB0;
        os_unfair_recursive_lock_lock_with_options();
        OSStatus v15 = (*(uint64_t (**)(uint64_t, UInt32 *, void *))(*(void *)v41 + 120))(v41, ioPropertyDataSize, outPropertyData);
        goto LABEL_405;
      }
      if (inPropertyID == 1633969004) {
        goto LABEL_266;
      }
      if (inPropertyID != 1633971568) {
        return DecoderSpecificBitStreamFromESDS;
      }
      if (*ioPropertyDataSize != 40) {
        return 561211770;
      }
      if (!inSpecifier) {
        return -50;
      }
      OSStatus v27 = MPEGPacketParser_ASBDFromMPEGPacket((unsigned int *)inSpecifier, inSpecifierSize, (AudioStreamBasicDescription *)outPropertyData);
LABEL_317:
      OSStatus v12 = v27;
      if (v27) {
        return v12;
      }
      OSStatus DecoderSpecificBitStreamFromESDS = 0;
      goto LABEL_319;
    }
    if ((int)inPropertyID <= 1668446575)
    {
      if ((int)inPropertyID > 1668116587)
      {
        if ((int)inPropertyID > 1668178795)
        {
          if (inPropertyID == 1668178796)
          {
            if (!inSpecifier) {
              return -50;
            }
            return AudioFormatProperty_ChannelLayoutForISOChannelLayout(inSpecifierSize, (unsigned int *)inSpecifier, 0, ioPropertyDataSize, (AudioChannelLayout *)outPropertyData);
          }
          if (inPropertyID == 1668180324)
          {
            if (!inSpecifier) {
              return -50;
            }
            OSStatus v12 = 561213539;
            if (inSpecifierSize < 0xC) {
              return v12;
            }
            if (*ioPropertyDataSize < 8) {
              return 561211770;
            }
            return AudioFormatProperty_CodingNameForDecodeFormatID((int *)inSpecifier, (int *)ioPropertyDataSize, (int *)outPropertyData);
          }
          if (inPropertyID != 1668309350) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (inSpecifier)
          {
            if (inSpecifierSize < 0x40) {
              return 561213539;
            }
            return AudioFormatProperty_CodecsParameterValueFromAudioFormat((uint64_t)inSpecifier, (CFStringRef *)outPropertyData);
          }
        }
        else
        {
          if (inPropertyID == 1668116588)
          {
            OSStatus v12 = 561213539;
            if (inSpecifierSize != 4) {
              return v12;
            }
            if (!inSpecifier) {
              return -50;
            }
            unsigned int v42 = *(_DWORD *)inSpecifier;
            v146.signed int mFormatID = 0;
            *(void *)&v146.Float64 mSampleRate = v42;
            LODWORD(v153[0].mSampleRate) = 0;
            AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)&v146, (unsigned int *)v153);
            if (20 * (unint64_t)LODWORD(v153[0].mSampleRate) + 12 > *ioPropertyDataSize) {
              return 561211770;
            }
            return AudioFormatProperty_ChannelLayoutForTag(v42, (AudioChannelLayout *)outPropertyData);
          }
          if (inPropertyID == 1668116596)
          {
            OSStatus v12 = 561213539;
            if (*ioPropertyDataSize == 4)
            {
              if (inSpecifierSize < 0xC) {
                return v12;
              }
              if (!inSpecifier) {
                return -50;
              }
              if (caulk::numeric::exceptional_cast<unsigned int,unsigned long>(20
                                                                                            * *((unsigned int *)inSpecifier
                                                                                              + 2) + 12) <= inSpecifierSize)
              {
                LODWORD(v153[0].mSampleRate) = 0;
                SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
              }
              return v12;
            }
            return 561211770;
          }
          if (inPropertyID != 1668178285) {
            return DecoderSpecificBitStreamFromESDS;
          }
          OSStatus v12 = 561213539;
          if (*ioPropertyDataSize != 8) {
            return 561211770;
          }
          if (inSpecifier)
          {
            if (inSpecifierSize == 20) {
              return AudioFormatProperty_ChannelName((AudioChannelDescription *)inSpecifier, (const __CFString **)outPropertyData, (uint64_t)inSpecifier, (const __CFString *)ioPropertyDataSize);
            }
            if (inSpecifierSize != 4) {
              return v12;
            }
            int v20 = *(_DWORD *)inSpecifier;
            *(void *)&v146.AudioFormatFlags mFormatFlags = 0;
            *(Float64 *)((char *)&v146.mSampleRate + 4) = 0.0;
            LODWORD(v146.mSampleRate) = v20;
            return AudioFormatProperty_ChannelName((AudioChannelDescription *)&v146, (const __CFString **)outPropertyData, (uint64_t)inSpecifier, (const __CFString *)ioPropertyDataSize);
          }
        }
        return -50;
      }
      if ((int)inPropertyID <= 1668051810)
      {
        if (inPropertyID == 1668047726)
        {
          if (!inSpecifier) {
            return -50;
          }
          return AudioFormatProperty_ISOChannelLayoutForChannelLayout((AudioChannelLayout *)inSpecifier, inSpecifierSize, ioPropertyDataSize, (unsigned __int8 *)outPropertyData);
        }
        if (inPropertyID != 1668048489) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inSpecifierSize < 0x38) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        AudioCodecPropertyID v19 = 1868786720;
        return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v19);
      }
      if (inPropertyID == 1668051811)
      {
        OSStatus v12 = 561213539;
        if (inSpecifierSize != 8) {
          return v12;
        }
        if (!inSpecifier) {
          return -50;
        }
        if (*ioPropertyDataSize != 4) {
          return 561211770;
        }
        return AudioFormat_ComputeLoudnessScalar(*(void *)inSpecifier, 1, 0, (float *)outPropertyData);
      }
      if (inPropertyID == 1668113260)
      {
        if (!inSpecifier) {
          return -50;
        }
        if (*ioPropertyDataSize >= 4)
        {
          if (*ioPropertyDataSize != 4) {
            *UInt32 ioPropertyDataSize = 4;
          }
          return AudioFormatProperty_WAVEChannelMaskForChannelLayout((const AudioChannelLayout *)inSpecifier, (unsigned int *)outPropertyData);
        }
        return 561211770;
      }
      if (inPropertyID != 1668116578) {
        return DecoderSpecificBitStreamFromESDS;
      }
      OSStatus v12 = 561213539;
      if (inSpecifierSize != 4) {
        return v12;
      }
      if (!inSpecifier) {
        return -50;
      }
      unsigned int v28 = (*(_DWORD *)inSpecifier >> 11) & 0x800 | *(_DWORD *)inSpecifier & 0xFFA3FFFF | (*(_DWORD *)inSpecifier >> 6) & 0x7000;
      LODWORD(v146.mSampleRate) = 0x10000;
      *(void *)((char *)&v146.mSampleRate + 4) = v28;
      LODWORD(v153[0].mSampleRate) = 0;
      AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)&v146, (unsigned int *)v153);
      if (20 * (unint64_t)LODWORD(v153[0].mSampleRate) + 12 > *ioPropertyDataSize) {
        return 561211770;
      }
      AudioFormatProperty_ChannelLayoutForBitmap(v28, (AudioChannelLayout *)outPropertyData, v29);
      return 0;
    }
    if ((int)inPropertyID > 1685283691)
    {
      if ((int)inPropertyID <= 1701081955)
      {
        if (inPropertyID == 1685283692)
        {
          if (!inSpecifier) {
            return -50;
          }
          OSStatus v12 = 561213539;
          if (inSpecifierSize < 4) {
            return v12;
          }
          if (*ioPropertyDataSize < 0x14) {
            return 561211770;
          }
          *(void *)CFStringRef outPropertyData = *(unsigned int *)inSpecifier;
          SetDefaultChannelPosition((uint64_t)outPropertyData);
          return 0;
        }
        if (inPropertyID == 1701014883)
        {
          if (!inSpecifier) {
            return -50;
          }
          if (inSpecifierSize < 0x18) {
            return 561213539;
          }
          return AudioFormatProperty_EncapsulatedMagicCookieFromCanonicalMagicCookie((unsigned int *)inSpecifier, ioPropertyDataSize, (uint64_t)outPropertyData);
        }
        if (inPropertyID != 1701077868) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (*ioPropertyDataSize != 32) {
          return 561211770;
        }
        if (!inSpecifier) {
          return -50;
        }
        *(_OWORD *)CFStringRef outPropertyData = 0u;
        *((_OWORD *)outPropertyData + 1) = 0u;
        OSStatus v24 = AudioFormatProperty_ChannelLayoutFromESD((unsigned __int8 *)inSpecifier, inSpecifierSize, (AudioChannelLayout *)outPropertyData);
        goto LABEL_260;
      }
      if (inPropertyID == 1701081956)
      {
        if (*ioPropertyDataSize != 40) {
          return 561211770;
        }
        if (!inSpecifier) {
          return -50;
        }
        OSStatus v27 = AudioFormatProperty_ASBDFromESD((unsigned __int8 *)inSpecifier, inSpecifierSize, (AudioStreamBasicDescription *)outPropertyData);
        goto LABEL_317;
      }
      if (inPropertyID == 1701147492)
      {
        if (!inSpecifier) {
          return -50;
        }
        OSStatus v30 = AudioFormatProperty_ESDFromESDS((unsigned __int8 *)inSpecifier, inSpecifierSize, outPropertyData, ioPropertyDataSize);
LABEL_430:
        OSStatus v12 = v30;
        if (v30) {
          return v12;
        }
        return 0;
      }
      if (inPropertyID != 1701406313) {
        return DecoderSpecificBitStreamFromESDS;
      }
      if (!inSpecifier) {
        return -50;
      }
      OSStatus v12 = 561213539;
      if (inSpecifierSize < 8) {
        return v12;
      }
      if (*ioPropertyDataSize < 4) {
        return 561211770;
      }
      int v33 = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(*(_DWORD *)inSpecifier, *((_DWORD *)inSpecifier + 1));
      if (!v33) {
        return 560360820;
      }
    }
    else
    {
      if ((int)inPropertyID <= 1684369509)
      {
        if (inPropertyID != 1668446576)
        {
          if (inPropertyID == 1668509293)
          {
            OSStatus v12 = 561213539;
            if (*ioPropertyDataSize != 8) {
              return 561211770;
            }
            if (!inSpecifier) {
              return -50;
            }
            if (inSpecifierSize != 20 && inSpecifierSize != 4) {
              return v12;
            }
            return AudioFormatProperty_ChannelShortName(*(_DWORD *)inSpecifier, (const __CFString **)outPropertyData, (uint64_t)inSpecifier, (const __CFString *)ioPropertyDataSize);
          }
          if (inPropertyID != 1684235116) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (inSpecifier)
          {
            if (inSpecifierSize != 56) {
              return 561213539;
            }
            return AudioFormatProperty_ChannelLayoutForISOChannelLayout(*((_DWORD *)inSpecifier + 12), *((unsigned int **)inSpecifier + 5), (const AudioStreamBasicDescription *)inSpecifier, ioPropertyDataSize, (AudioChannelLayout *)outPropertyData);
          }
          return -50;
        }
        if (!inSpecifier) {
          return 2003329396;
        }
        OSStatus v12 = 561213539;
        if (inSpecifierSize != 4) {
          return v12;
        }
        if (*ioPropertyDataSize != 4) {
          return 561211770;
        }
        AudioFormatProperty_FormatIsEncrypted(*(unsigned int *)inSpecifier, (unsigned int *)outPropertyData);
        return 0;
      }
      if (inPropertyID == 1684369510)
      {
        if (!inSpecifier) {
          return -50;
        }
        if (inSpecifierSize < 0x38) {
          return 561213539;
        }
        AudioCodecPropertyID v19 = 1684369510;
        return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v19);
      }
      if (inPropertyID == 1685218164)
      {
        if (!inSpecifier) {
          return -50;
        }
        OSStatus v12 = 561213539;
        if (inSpecifierSize < 0x48) {
          return v12;
        }
        if (*ioPropertyDataSize < 4) {
          return 561211770;
        }
        return AudioFormat_GetDRCTypeFromPacket((uint64_t)inSpecifier, outPropertyData);
      }
      if (inPropertyID != 1685220460) {
        return DecoderSpecificBitStreamFromESDS;
      }
      OSStatus v12 = 561213539;
      if (inSpecifierSize < 4) {
        return v12;
      }
      if (!inSpecifier) {
        return -50;
      }
      if (*ioPropertyDataSize < 4) {
        return 561211770;
      }
      int v32 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(*((unsigned int *)inSpecifier + 2 * (inSpecifierSize > 0x27)), (int *)&v146);
      int v33 = 1;
      if (v32 > 1633772388)
      {
        unsigned int v34 = v32 - 1633772389;
        if (v34 <= 0xE && ((1 << v34) & 0x488F) != 0) {
          goto LABEL_713;
        }
        goto LABEL_590;
      }
      if ((v32 - 778924081) >= 2)
      {
        if (v32 == 778924083)
        {
          if (v9 < 0x28) {
            int v33 = 18;
          }
          else {
            int v33 = MPEGAudioMaximumNumberOfDependentPackets((const AudioStreamBasicDescription *)v8, 0);
          }
          goto LABEL_713;
        }
        if (v32 != 1633772320) {
LABEL_590:
        }
          int v33 = 0;
      }
    }
LABEL_713:
    OSStatus DecoderSpecificBitStreamFromESDS = 0;
    *(_DWORD *)CFStringRef outPropertyData = v33;
    goto LABEL_714;
  }
  if ((int)inPropertyID <= 1818520673)
  {
    if ((int)inPropertyID > 1718642283)
    {
      if ((int)inPropertyID <= 1768186733)
      {
        if ((int)inPropertyID <= 1752589666)
        {
          if (inPropertyID == 1718642284)
          {
            if (!inSpecifier) {
              return -50;
            }
            OSStatus v12 = 561213539;
            if (!inSpecifierSize) {
              return v12;
            }
            if (*ioPropertyDataSize != 4) {
              return 561211770;
            }
            return AudioFormatProperty_FirstPlayableFormatFromList((RegistryAccess *)(inSpecifierSize / 0x30uLL), (AudioFormatListItem *)inSpecifier, (unsigned int *)outPropertyData);
          }
          if (inPropertyID != 1719034482)
          {
            if (inPropertyID != 1752589411) {
              return DecoderSpecificBitStreamFromESDS;
            }
            if (inSpecifierSize != 4) {
              return 561213539;
            }
            if (!inSpecifier) {
              return -50;
            }
            uint64_t v17 = *(unsigned int *)inSpecifier;
            RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
            uint64_t v18 = qword_1EB3D4FB0;
            os_unfair_recursive_lock_lock_with_options();
            OSStatus v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v18 + 104))(v18, v17, 0, 0);
            goto LABEL_405;
          }
          goto LABEL_238;
        }
        if (inPropertyID == 1752589667)
        {
          if (inSpecifierSize != 4) {
            return 561213539;
          }
          if (!inSpecifier) {
            return -50;
          }
          uint64_t v56 = *(unsigned int *)inSpecifier;
          RegistryAccess::instance(*(RegistryAccess **)&inPropertyID);
          uint64_t v57 = qword_1EB3D4FB0;
          os_unfair_recursive_lock_lock_with_options();
          OSStatus v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v57 + 96))(v57, v56, 0, 0);
          goto LABEL_405;
        }
        if (inPropertyID != 1768174436)
        {
          if (inPropertyID != 1768174451) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (inSpecifierSize < 0xA) {
            return 561213539;
          }
          if (!inSpecifier) {
            return -50;
          }
          if (*(unsigned char *)inSpecifier == 84 && *((unsigned char *)inSpecifier + 1) == 65 && *((unsigned char *)inSpecifier + 2) == 71)
          {
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
            *(_DWORD *)CFStringRef outPropertyData = 128;
            return DecoderSpecificBitStreamFromESDS;
          }
          *(void *)&v146.Float64 mSampleRate = &unk_1EDF8C248;
          LOBYTE(v146.mFormatID) = 0;
          *(void *)&v146.UInt32 mBytesPerFrame = &v146.mBytesPerFrame;
          *(void *)&v146.UInt32 mBitsPerChannel = &v146.mBytesPerFrame;
          uint64_t v147 = 0;
          char v148 = 0;
          uint64_t v150 = 0;
          uint64_t v149 = 0;
          __int16 v151 = 0;
          *(void *)((char *)&v146.mFormatID + 1) = *(void *)inSpecifier;
          *(_WORD *)((char *)&v146.mBytesPerPacket + 1) = *((_WORD *)inSpecifier + 4);
          if (!ID3TagBase::Init((ID3TagBase *)&v146))
          {
            OSStatus v12 = 2003329396;
            *(void *)&v146.Float64 mSampleRate = &unk_1EDF8C248;
            std::__list_imp<ID3FrameInfo>::clear(&v146.mBytesPerFrame);
            return v12;
          }
          *UInt32 ioPropertyDataSize = 4;
          *(_DWORD *)CFStringRef outPropertyData = v149;
          *(void *)&v146.Float64 mSampleRate = &unk_1EDF8C248;
          std::__list_imp<ID3FrameInfo>::clear(&v146.mBytesPerFrame);
          return 0;
        }
        if (inSpecifierSize < 0xA) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        v146.Float64 mSampleRate = 0.0;
        if (AudioFormatProperty_ID3TagToDictionary((unsigned __int8 *)inSpecifier, inSpecifierSize, (__CFDictionary **)&v146))return 2003329396; {
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        }
LABEL_531:
        *(Float64 *)CFStringRef outPropertyData = v146.mSampleRate;
        return DecoderSpecificBitStreamFromESDS;
      }
      if ((int)inPropertyID <= 1769170536)
      {
        if (inPropertyID == 1768186734)
        {
          if (!inSpecifier) {
            return -50;
          }
          OSStatus v12 = 561213539;
          if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize) {
            return v12;
          }
          return AudioFormatProperty_DecodeFormatIDsForCodingName((int *)inSpecifier, ioPropertyDataSize, (unsigned int *)outPropertyData);
        }
        if (inPropertyID == 1768187246)
        {
          if (!inSpecifier) {
            return -50;
          }
          OSStatus v12 = 561213539;
          if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize) {
            return v12;
          }
          return AudioFormatProperty_DecodeFormatIDsForEncapsulatedMagicCookieName((int *)inSpecifier, ioPropertyDataSize, (unsigned int *)outPropertyData);
        }
        if (inPropertyID != 1768780388) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inSpecifier)
        {
          if (inSpecifierSize < 0x38) {
            return 561213539;
          }
          AudioCodecPropertyID v19 = 1768780388;
          return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v19);
        }
        return -50;
      }
      if (inPropertyID != 1769170537)
      {
        if (inPropertyID != 1769172323)
        {
          if (inPropertyID != 1818389604) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (inSpecifierSize)
          {
            if (inSpecifier)
            {
              v146.Float64 mSampleRate = 0.0;
              OSStatus DecoderSpecificBitStreamFromESDS = ISOLoudnessBoxForLoudnessInfoDictionary(*(const __CFDictionary **)inSpecifier, (const __CFData **)&v146);
              if (!DecoderSpecificBitStreamFromESDS)
              {
                Float64 v36 = v146.mSampleRate;
                if (*(void *)&v146.mSampleRate)
                {
                  *(void *)CFStringRef outPropertyData = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDataRef *)&v146.mSampleRate);
                  *UInt32 ioPropertyDataSize = 8;
                  CFRelease(*(CFTypeRef *)&v36);
                }
              }
              return DecoderSpecificBitStreamFromESDS;
            }
            return -50;
          }
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        return GetMagicCookieFromISOSampleEntry((uint64_t)inSpecifier, inSpecifierSize, ioPropertyDataSize, (uint64_t)outPropertyData);
      }
      if (!inSpecifier) {
        return -50;
      }
      OSStatus CanBeAuthorized = AudioFormatProperty_FormatIDFromISOAudioSampleEntry((uint64_t)inSpecifier, inSpecifierSize);
LABEL_365:
      OSStatus DecoderSpecificBitStreamFromESDS = CanBeAuthorized;
      if (CanBeAuthorized) {
        return DecoderSpecificBitStreamFromESDS;
      }
      goto LABEL_714;
    }
    if ((int)inPropertyID > 1717855599)
    {
      if ((int)inPropertyID > 1718383475)
      {
        if (inPropertyID == 1718383476)
        {
          if (inSpecifier)
          {
            if (!inSpecifierSize) {
              return 561213539;
            }
            if (*ioPropertyDataSize != 48) {
              return AudioFormatProperty_FormatList((const AudioFormatInfo *)inSpecifier, inSpecifierSize, ioPropertyDataSize, (AudioFormatListItem *)outPropertyData);
            }
            LODWORD(v153[0].mSampleRate) = 0;
            OSStatus DecoderSpecificBitStreamFromESDS = AudioFormatProperty_FormatListSize((const AudioFormatInfo *)inSpecifier, inSpecifierSize, (unsigned int *)v153);
            if (DecoderSpecificBitStreamFromESDS) {
              return DecoderSpecificBitStreamFromESDS;
            }
            CADeprecated::CAAutoFree<AudioFormatListItem>::CAAutoFree(&v146, LODWORD(v153[0].mSampleRate), 1);
            OSStatus FormatListFromCodecs = AudioFormatProperty_FormatList((const AudioFormatInfo *)v8, v9, (unsigned int *)v153, *(AudioFormatListItem **)&v146.mSampleRate);
            goto LABEL_630;
          }
          return 2003329396;
        }
        if (inPropertyID == 1718449257)
        {
          if (*ioPropertyDataSize == 40) {
            return AudioFormatProperty_FormatInfo(*(uint64_t *)&inSpecifierSize, inSpecifier, (AudioStreamBasicDescription *)outPropertyData);
          }
          return 561211770;
        }
        if (inPropertyID != 1718509933) {
          return DecoderSpecificBitStreamFromESDS;
        }
        OSStatus v12 = 561213539;
        if (inSpecifierSize != 40) {
          return v12;
        }
        if (!inSpecifier) {
          return -50;
        }
        if (*ioPropertyDataSize == 8) {
          return AudioFormatProperty_FormatName((AudioStreamBasicDescription *)inSpecifier, (const __CFString **)outPropertyData);
        }
        return 561211770;
      }
      if (inPropertyID == 1717855600 || inPropertyID == 1717925990)
      {
LABEL_238:
        if (!inSpecifier) {
          return -50;
        }
        OSStatus v12 = 561213539;
        if (inSpecifierSize != 4)
        {
          if (inSpecifierSize != 40) {
            return v12;
          }
          uint8x8_t v8 = (unsigned int *)((char *)inSpecifier + 8);
        }
        if (*ioPropertyDataSize != 4) {
          return 561211770;
        }
        uint64_t v37 = (RegistryAccess *)*v8;
        if (inPropertyID == 1717855600) {
          return AudioFormatProperty_FormatEmploysDependentPackets(v37, (unsigned int *)outPropertyData);
        }
        if (inPropertyID == 1719034482 || inPropertyID == 1717925990) {
          return AudioFormatProperty_FormatIsVBR(v37, (unsigned int *)outPropertyData);
        }
        return 0;
      }
      if (inPropertyID != 1718183273) {
        return DecoderSpecificBitStreamFromESDS;
      }
      if (inSpecifier)
      {
        OSStatus v12 = 561213539;
        if (inSpecifierSize < 4) {
          return v12;
        }
        if (*ioPropertyDataSize < 8) {
          return 561211770;
        }
        LODWORD(v146.mSampleRate) = 1969977198;
        int v21 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(*(unsigned int *)inSpecifier, (int *)&v146);
        int v22 = LODWORD(v146.mSampleRate);
        if (LODWORD(v146.mSampleRate) != 1969977198)
        {
          OSStatus DecoderSpecificBitStreamFromESDS = 0;
          *(_DWORD *)CFStringRef outPropertyData = v21;
          *((_DWORD *)outPropertyData + 1) = v22;
          UInt32 v23 = 8;
          goto LABEL_715;
        }
        return 560360820;
      }
      return -50;
    }
    if ((int)inPropertyID > 1702061156)
    {
      if (inPropertyID == 1702061157)
      {
        if (!inSpecifier) {
          return -50;
        }
        OSStatus v30 = AudioFormatProperty_ESDSFromESD((unsigned __int8 *)inSpecifier, inSpecifierSize, (char *)outPropertyData, ioPropertyDataSize);
      }
      else
      {
        if (inPropertyID != 1702061673 && inPropertyID != 1702064996) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (*ioPropertyDataSize < 0x28) {
          return 561211770;
        }
        if (!inSpecifier) {
          return -50;
        }
        OSStatus v30 = AudioFormatProperty_AudioFormatInfoFromESDS((unsigned __int8 *)inSpecifier, inSpecifierSize, ioPropertyDataSize, (AudioStreamBasicDescription *)outPropertyData);
      }
      goto LABEL_430;
    }
    if (inPropertyID == 1701733230)
    {
      if (!inSpecifier) {
        return -50;
      }
      OSStatus v12 = 561213539;
      if (inSpecifierSize < 8 || (unint64_t)*((unsigned int *)inSpecifier + 1) + 8 > inSpecifierSize) {
        return v12;
      }
      return AudioFormatProperty_EncapsulatedMagicCookieNameForCodingName((int *)inSpecifier, ioPropertyDataSize, (int *)outPropertyData);
    }
    if (inPropertyID != 1702060908) {
      return DecoderSpecificBitStreamFromESDS;
    }
    if (*ioPropertyDataSize != 32) {
      return 561211770;
    }
    if (!inSpecifier) {
      return -50;
    }
    *(_OWORD *)CFStringRef outPropertyData = 0u;
    *((_OWORD *)outPropertyData + 1) = 0u;
    OSStatus v24 = AudioFormatProperty_ChannelLayoutFromESDS((unsigned __int8 *)inSpecifier, inSpecifierSize, (AudioChannelLayout *)outPropertyData);
LABEL_260:
    OSStatus v12 = v24;
    if (v24) {
      return v12;
    }
    OSStatus DecoderSpecificBitStreamFromESDS = 0;
    goto LABEL_262;
  }
  if ((int)inPropertyID > 1935893601)
  {
    if ((int)inPropertyID <= 1986946670)
    {
      if ((int)inPropertyID <= 1936745323)
      {
        if (inPropertyID != 1935893602)
        {
          if (inPropertyID == 1935962211)
          {
            OSStatus v12 = -50;
            if (inSpecifierSize != 40 || !inSpecifier) {
              return v12;
            }
            if (*ioPropertyDataSize >= 0xE)
            {
              if (*ioPropertyDataSize != 14) {
                *UInt32 ioPropertyDataSize = 14;
              }
              return AudioFormatProperty_ISOPCMConfigForASBD(inSpecifier, (uint64_t)outPropertyData);
            }
            return 561211770;
          }
          if (inPropertyID != 1936286825) {
            return DecoderSpecificBitStreamFromESDS;
          }
          if (inSpecifierSize < 0x38) {
            return 561213539;
          }
          if (!inSpecifier) {
            return -50;
          }
          AudioCodecPropertyID v19 = 1936286825;
          return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v19);
        }
        if (inSpecifierSize != 8) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        *(float *)CFStringRef outPropertyData = AudioFormatProperty_SoundCheckVolumeDB(*(const __CFDictionary **)inSpecifier, 8, (float *)inSpecifier);
LABEL_714:
        UInt32 v23 = 4;
        goto LABEL_715;
      }
      if (inPropertyID != 1936745324)
      {
        if (inPropertyID != 1952540515)
        {
          if (inPropertyID == 1986093932) {
            SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
          }
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inSpecifierSize != 4) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        UInt32 v64 = 0;
        int v65 = *(_DWORD *)inSpecifier;
        UInt32 v66 = *ioPropertyDataSize >> 2;
        uint64_t v67 = 2u;
        do
        {
          if (v67 != 49 && (unsigned __int16)gAllLayoutTags[v67] == v65)
          {
            if (outPropertyData && v64 < v66) {
              *((_DWORD *)outPropertyData + v64) = gAllLayoutTags[v67];
            }
            ++v64;
          }
          ++v67;
        }
        while (v67 != 122);
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        UInt32 v23 = 4 * v64;
        goto LABEL_715;
      }
      if (!inSpecifier) {
        return -50;
      }
      OSStatus v12 = 561213539;
      if (inSpecifierSize < 0x20) {
        return v12;
      }
      if (*ioPropertyDataSize < 4) {
        return 561211770;
      }
      int v31 = AudioFormatProperty_SpeakerHemispheresForChannelLayout((const AudioChannelLayout *)inSpecifier, *(const AudioChannelLayout **)&inSpecifierSize);
LABEL_390:
      OSStatus DecoderSpecificBitStreamFromESDS = 0;
      *(_DWORD *)CFStringRef outPropertyData = v31;
      return DecoderSpecificBitStreamFromESDS;
    }
    if ((int)inPropertyID <= 2020107115)
    {
      if (inPropertyID == 1986946671)
      {
        if (!inSpecifier) {
          return -50;
        }
        if (inSpecifierSize < 0x38) {
          return 561213539;
        }
        return AudioFormatProperty_VorbisModeInfoFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, (uint64_t)outPropertyData);
      }
      if (inPropertyID == 1987076466)
      {
        if (!inSpecifier) {
          return -50;
        }
        if (inSpecifierSize < 0x38) {
          return 561213539;
        }
        AudioCodecPropertyID v19 = 1987076466;
        return GetCodecPropertyFromFormatInfo((const AudioFormatInfo *)inSpecifier, ioPropertyDataSize, outPropertyData, v19);
      }
      if (inPropertyID != 2020106611) {
        return DecoderSpecificBitStreamFromESDS;
      }
      OSStatus v12 = 561213539;
      if (inSpecifierSize < 8) {
        return v12;
      }
      if (!inSpecifier) {
        return -50;
      }
      OSStatus DecoderSpecificBitStreamFromESDS = 0;
      int v25 = bswap32(*(_DWORD *)inSpecifier);
      if (v25 > 1902207330)
      {
        if (v25 > 2053202274)
        {
          if (v25 > 2053202799)
          {
            if (v25 == 2053464883 || v25 == 2053319475) {
              goto LABEL_619;
            }
            unsigned __int16 v76 = 25456;
          }
          else
          {
            if (v25 == 2053202275) {
              goto LABEL_611;
            }
            if (v25 == 2053202739) {
              goto LABEL_594;
            }
            unsigned __int16 v76 = 25448;
          }
          int v26 = v76 | 0x7A610000;
        }
        else
        {
          if (v25 > 1902207855)
          {
            if (v25 == 1902207856) {
              goto LABEL_611;
            }
            if (v25 == 1902324531) {
              goto LABEL_619;
            }
            int v85 = 1902469939;
            goto LABEL_604;
          }
          if (v25 == 1902207331) {
            goto LABEL_611;
          }
          if (v25 == 1902207795) {
            goto LABEL_594;
          }
          int v26 = 1902207848;
        }
      }
      else
      {
        if (v25 <= 1885430114)
        {
          if (v25 <= 1633889586)
          {
            if (v25 != 1633772320 && v25 != 1633772392)
            {
              int v26 = 1633772400;
              goto LABEL_610;
            }
LABEL_611:
            DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)&v146);
            memset(v153, 0, 40);
            uint64_t v88 = *((unsigned __int8 *)v8 + 7) + 2;
            MEMORY[0x1F4188790](v89);
            *(void *)&Float64 v91 = (char *)&v139 - v90;
            bzero(&v146, 0x4C8uLL);
            **(unsigned char **)&Float64 v91 = 5;
            size_t v92 = *((unsigned __int8 *)v8 + 7);
            *(unsigned char *)(*(void *)&v91 + 1) = v92;
            memcpy((void *)(*(void *)&v91 + 2), v8 + 2, v92);
            unint64_t v93 = *(void *)&v91 + v88;
            v145.Float64 mSampleRate = v91;
            *(void *)&v145.signed int mFormatID = *(void *)&v91 + v88;
            *(void *)&v145.mBytesPerPacket = 0;
            if ((LOBYTE(v91) & 3) != 0)
            {
              int v94 = 0;
              char v95 = LOBYTE(v91) + 1;
              int v96 = -8;
              do
              {
                int v97 = v96;
                int v98 = **(unsigned char **)&v91;
                ++*(void *)&v91;
                int v94 = v98 | (v94 << 8);
                v96 += 8;
                if ((v95 & 3) == 0) {
                  break;
                }
                ++v95;
              }
              while (*(void *)&v91 < v93);
              v145.Float64 mSampleRate = v91;
              v145.mBytesPerPacket = v94 << (24 - v96);
              v145.mFramesPerPacket = v97 + 16;
            }
            DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload(&v146, (uint64_t)&v145, 0);
            OSStatus DecoderSpecificBitStreamFromESDS = 1718449215;
            if (DecoderConfigDescr::GetASBD((DecoderConfigDescr *)&v146, v153)
              || *ioPropertyDataSize < 0x28)
            {
              goto LABEL_680;
            }
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
            v153[0].signed int mFormatID = bswap32(*v8);
            *((void *)outPropertyData + 4) = *(void *)&v153[0].mBitsPerChannel;
            long long v99 = *(_OWORD *)&v153[0].mBytesPerPacket;
            *(_OWORD *)CFStringRef outPropertyData = *(_OWORD *)&v153[0].mSampleRate;
            *((_OWORD *)outPropertyData + 1) = v99;
            UInt32 v100 = 40;
LABEL_679:
            *UInt32 ioPropertyDataSize = v100;
LABEL_680:
            std::string::size_type v123 = &v146;
LABEL_705:
            DecoderConfigDescr::~DecoderConfigDescr((DecoderConfigDescr *)v123);
            return DecoderSpecificBitStreamFromESDS;
          }
          if (v25 != 1633889587)
          {
            if (v25 != 1700997939)
            {
              int v85 = 1700998451;
LABEL_604:
              if (v25 != v85) {
                return DecoderSpecificBitStreamFromESDS;
              }
            }
LABEL_619:
            if (*ioPropertyDataSize <= 0x27) {
              goto LABEL_620;
            }
            UInt32 v23 = 0;
            OSStatus DecoderSpecificBitStreamFromESDS = 560226676;
            memset(v153, 0, 40);
            size_t v101 = *((unsigned __int8 *)inSpecifier + 7);
            if ((v101 - 5) > 0x20 || v101 > 0x25) {
              goto LABEL_715;
            }
            unsigned int v102 = v101 + 8;
            *(void *)&v146.Float64 mSampleRate = bswap32(v101 + 8) | 0x3363656400000000;
            memcpy(&v146.mFormatID, v8 + 2, v101);
            OSStatus DecoderSpecificBitStreamFromESDS = ParseEAC3MP4Cookie((unsigned int *)&v146, v102, 0, 0, (unsigned int *)v153, 0, v103, v104, v139, v140, v141, v142);
            *UInt32 ioPropertyDataSize = 0;
            if (DecoderSpecificBitStreamFromESDS) {
              return DecoderSpecificBitStreamFromESDS;
            }
            signed int v105 = bswap32(*v8);
            if (v105 > 1902324530)
            {
              if (v105 == 1902324531)
              {
                signed int v105 = 1902469939;
              }
              else if (v105 == 2053319475)
              {
                signed int v105 = 2053464883;
              }
            }
            else if (v105 == 1700997939)
            {
              signed int v105 = 1700998451;
            }
            else if (v105 == 1885547315)
            {
              signed int v105 = 1885692723;
            }
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
            v153[0].signed int mFormatID = v105;
            *((void *)outPropertyData + 4) = *(void *)&v153[0].mBitsPerChannel;
            long long v86 = *(_OWORD *)&v153[0].mBytesPerPacket;
            long long v87 = *(_OWORD *)&v153[0].mSampleRate;
            goto LABEL_722;
          }
LABEL_594:
          OSStatus DecoderSpecificBitStreamFromESDS = 1718449215;
          memset(&v146, 0, sizeof(v146));
          if (ParseAC3Header((unsigned __int8 *)inSpecifier + 8, *((unsigned __int8 *)inSpecifier + 7), &v146, 0, 0, 0, 0, 0)|| *ioPropertyDataSize < 0x28)
          {
            UInt32 v23 = 0;
            goto LABEL_715;
          }
          OSStatus DecoderSpecificBitStreamFromESDS = 0;
          v146.signed int mFormatID = bswap32(*v8);
          *((void *)outPropertyData + 4) = *(void *)&v146.mBitsPerChannel;
          long long v87 = *(_OWORD *)&v146.mSampleRate;
          long long v86 = *(_OWORD *)&v146.mBytesPerPacket;
LABEL_722:
          *(_OWORD *)CFStringRef outPropertyData = v87;
          *((_OWORD *)outPropertyData + 1) = v86;
LABEL_319:
          UInt32 v23 = 40;
          goto LABEL_715;
        }
        if (v25 > 1885430639)
        {
          if (v25 == 1885430640) {
            goto LABEL_611;
          }
          if (v25 == 1885547315) {
            goto LABEL_619;
          }
          int v85 = 1885692723;
          goto LABEL_604;
        }
        if (v25 == 1885430115) {
          goto LABEL_611;
        }
        if (v25 == 1885430579) {
          goto LABEL_594;
        }
        int v26 = 1885430632;
      }
LABEL_610:
      if (v25 != v26) {
        return DecoderSpecificBitStreamFromESDS;
      }
      goto LABEL_611;
    }
    if (inPropertyID != 2020107116)
    {
      if (inPropertyID != 2020109667)
      {
        if (inPropertyID != 2020110438) {
          return DecoderSpecificBitStreamFromESDS;
        }
        if (inSpecifierSize < 8) {
          return 561213539;
        }
        if (!inSpecifier) {
          return -50;
        }
        OSStatus DecoderSpecificBitStreamFromESDS = 0;
        *(_DWORD *)CFStringRef outPropertyData = bswap32(*((unsigned __int16 *)inSpecifier + 2)) >> 16;
        UInt32 v23 = 2;
        goto LABEL_715;
      }
      if (inSpecifierSize < 8) {
        return 561213539;
      }
      if (!inSpecifier) {
        return -50;
      }
      OSStatus DecoderSpecificBitStreamFromESDS = 0;
      int v68 = bswap32(*(_DWORD *)inSpecifier);
      if (v68 > 1902207330)
      {
        if (v68 > 2053202274)
        {
          if (v68 > 2053202791)
          {
            if (v68 == 2053202792) {
              goto LABEL_694;
            }
            if (v68 == 2053464883) {
              goto LABEL_583;
            }
            int v77 = 2053202800;
            goto LABEL_683;
          }
          if (v68 == 2053202275) {
            goto LABEL_694;
          }
          int v124 = 2053202739;
        }
        else
        {
          if (v68 > 1902207847)
          {
            if (v68 == 1902207848 || v68 == 1902207856) {
              goto LABEL_694;
            }
            int v69 = 1902469939;
            goto LABEL_566;
          }
          if (v68 == 1902207331) {
            goto LABEL_694;
          }
          int v124 = 1902207795;
        }
      }
      else
      {
        if (v68 <= 1885430114)
        {
          if (v68 > 1633772399)
          {
            if (v68 != 1633772400)
            {
              if (v68 != 1633889587)
              {
                int v69 = 1700998451;
                goto LABEL_566;
              }
LABEL_692:
              UInt32 v125 = *((unsigned __int8 *)inSpecifier + 7);
              if (*ioPropertyDataSize < v125) {
                return 1718449215;
              }
              return ConvertAC3HeaderToAC3MP4Cookie((unsigned __int8 *)inSpecifier + 8, v125, (unsigned __int8 *)outPropertyData, ioPropertyDataSize);
            }
LABEL_694:
            DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v153);
            memset(&v145, 0, sizeof(v145));
            uint64_t v126 = *((unsigned __int8 *)v8 + 7) + 2;
            MEMORY[0x1F4188790](v127);
            uint64_t v129 = (char *)&v139 - v128;
            bzero(v153, 0x4C8uLL);
            unsigned char *v129 = 5;
            size_t v130 = *((unsigned __int8 *)v8 + 7);
            v129[1] = v130;
            memcpy(v129 + 2, v8 + 2, v130);
            CFDictionaryRef v131 = &v129[v126];
            v143[0] = v129;
            v143[1] = &v129[v126];
            uint64_t v144 = 0;
            if ((v129 & 3) != 0)
            {
              int v132 = 0;
              char v133 = (_BYTE)v129 + 1;
              int v134 = -8;
              do
              {
                int v135 = v134;
                int v136 = *v129++;
                int v132 = v136 | (v132 << 8);
                v134 += 8;
                if ((v133 & 3) == 0) {
                  break;
                }
                ++v133;
              }
              while (v129 < v131);
              v143[0] = v129;
              LODWORD(v144) = v132 << (24 - v134);
              HIDWORD(v144) = v135 + 16;
            }
            DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload(v153, (uint64_t)v143, 0);
            OSStatus DecoderSpecificBitStreamFromESDS = 1718449215;
            DecoderConfigDescr::GetASBD((DecoderConfigDescr *)v153, &v145);
            v153[0].signed int mFormatID = 64;
            *(void *)&v153[0].AudioFormatFlags mFormatFlags = 5;
            v153[0].UInt32 mChannelsPerFrame = 0;
            *(void *)&v153[0].mFramesPerPacket = 6144 * v145.mChannelsPerFrame;
            DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v152);
            MP4AudioESDS::SetDecoderConfigDescriptor((uint64_t)&v146, (long long *)v153);
            if (v152[2] == 64) {
              UInt32 v137 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount((DecoderConfigDescr *)v152) + 37;
            }
            else {
              UInt32 v137 = 19;
            }
            if (*ioPropertyDataSize >= v137) {
              operator new[]();
            }
            MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)&v146);
            std::string::size_type v123 = v153;
            goto LABEL_705;
          }
          if (v68 == 1633772320) {
            goto LABEL_694;
          }
          int v77 = 1633772392;
LABEL_683:
          if (v68 != v77) {
            return DecoderSpecificBitStreamFromESDS;
          }
          goto LABEL_694;
        }
        if (v68 > 1885430631)
        {
          if (v68 == 1885430632 || v68 == 1885430640) {
            goto LABEL_694;
          }
          int v69 = 1885692723;
LABEL_566:
          if (v68 != v69) {
            return DecoderSpecificBitStreamFromESDS;
          }
LABEL_583:
          size_t v83 = *((unsigned __int8 *)inSpecifier + 7);
          if ((v83 - 38) >= 0xFFFFFFDF
            && outPropertyData
            && (unsigned int v84 = v83 + 8, *ioPropertyDataSize >= (int)v83 + 8))
          {
            *(_DWORD *)CFStringRef outPropertyData = bswap32(v84);
            *((_DWORD *)outPropertyData + 1) = 862152036;
            memcpy((char *)outPropertyData + 8, v8 + 2, v83);
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
            *UInt32 ioPropertyDataSize = v84;
          }
          else
          {
            OSStatus DecoderSpecificBitStreamFromESDS = 1718449215;
            *UInt32 ioPropertyDataSize = 0;
          }
          return DecoderSpecificBitStreamFromESDS;
        }
        if (v68 == 1885430115) {
          goto LABEL_694;
        }
        int v124 = 1885430579;
      }
      if (v68 != v124) {
        return DecoderSpecificBitStreamFromESDS;
      }
      goto LABEL_692;
    }
    OSStatus v12 = 561213539;
    if (inSpecifierSize < 8) {
      return v12;
    }
    if (!inSpecifier) {
      return -50;
    }
    OSStatus DecoderSpecificBitStreamFromESDS = 0;
    int v60 = bswap32(*(_DWORD *)inSpecifier);
    if (v60 > 1902207330)
    {
      if (v60 > 2053202274)
      {
        if (v60 > 2053202791)
        {
          if (v60 == 2053202792) {
            goto LABEL_669;
          }
          if (v60 == 2053464883)
          {
LABEL_578:
            if (*ioPropertyDataSize <= 0x1F)
            {
LABEL_620:
              *UInt32 ioPropertyDataSize = 0;
              return 561211770;
            }
            UInt32 v23 = 0;
            OSStatus DecoderSpecificBitStreamFromESDS = 560226676;
            LODWORD(v153[0].mSampleRate) = 0;
            size_t v78 = *((unsigned __int8 *)inSpecifier + 7);
            if ((v78 - 5) > 0x20 || v78 > 0x25) {
              goto LABEL_715;
            }
            unsigned int v79 = v78 + 8;
            *(void *)&v146.Float64 mSampleRate = bswap32(v78 + 8) | 0x3363656400000000;
            memcpy(&v146.mFormatID, v8 + 2, v78);
            OSStatus DecoderSpecificBitStreamFromESDS = ParseEAC3MP4Cookie((unsigned int *)&v146, v79, 0, 0, 0, v153, v80, v81, v139, v140, v141, v142);
            *UInt32 ioPropertyDataSize = 0;
            if (DecoderSpecificBitStreamFromESDS) {
              return DecoderSpecificBitStreamFromESDS;
            }
            *(void *)((char *)outPropertyData + 12) = 0;
            *(void *)((char *)outPropertyData + 4) = 0;
            *((_DWORD *)outPropertyData + 7) = 0;
            *(void *)((char *)outPropertyData + 20) = 0;
            int v82 = LODWORD(v153[0].mSampleRate);
            goto LABEL_668;
          }
          int v75 = 2053202800;
          goto LABEL_654;
        }
        if (v60 == 2053202275) {
          goto LABEL_669;
        }
        int v111 = 2053202739;
      }
      else
      {
        if (v60 > 1902207847)
        {
          if (v60 == 1902207848 || v60 == 1902207856) {
            goto LABEL_669;
          }
          int v61 = 1902469939;
          goto LABEL_548;
        }
        if (v60 == 1902207331) {
          goto LABEL_669;
        }
        int v111 = 1902207795;
      }
    }
    else
    {
      if (v60 <= 1885430114)
      {
        if (v60 > 1633772399)
        {
          if (v60 != 1633772400)
          {
            if (v60 != 1633889587)
            {
              int v61 = 1700998451;
              goto LABEL_548;
            }
LABEL_663:
            LODWORD(v146.mSampleRate) = 0;
            if (ParseAC3Header((unsigned __int8 *)inSpecifier + 8, *((unsigned __int8 *)inSpecifier + 7), 0, (unsigned int *)&v146, 0, 0, 0, 0))OSStatus DecoderSpecificBitStreamFromESDS = 1718449215; {
            else
            }
              OSStatus DecoderSpecificBitStreamFromESDS = 0;
            if (*ioPropertyDataSize < 0x20) {
              return DecoderSpecificBitStreamFromESDS;
            }
            *(void *)((char *)outPropertyData + 12) = 0;
            *(void *)((char *)outPropertyData + 4) = 0;
            *((_DWORD *)outPropertyData + 7) = 0;
            *(void *)((char *)outPropertyData + 20) = 0;
            int v82 = LODWORD(v146.mSampleRate);
LABEL_668:
            *(_DWORD *)CFStringRef outPropertyData = v82;
LABEL_262:
            UInt32 v23 = 32;
            goto LABEL_715;
          }
LABEL_669:
          DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)&v146);
          uint64_t v112 = *((unsigned __int8 *)v8 + 7) + 2;
          MEMORY[0x1F4188790](v113);
          *(void *)&Float64 v115 = (char *)&v139 - v114;
          LODWORD(v145.mSampleRate) = 0;
          bzero(&v146, 0x4C8uLL);
          **(unsigned char **)&Float64 v115 = 5;
          size_t v116 = *((unsigned __int8 *)v8 + 7);
          *(unsigned char *)(*(void *)&v115 + 1) = v116;
          memcpy((void *)(*(void *)&v115 + 2), v8 + 2, v116);
          unint64_t v117 = *(void *)&v115 + v112;
          v153[0].Float64 mSampleRate = v115;
          *(void *)&v153[0].signed int mFormatID = *(void *)&v115 + v112;
          *(void *)&v153[0].mBytesPerPacket = 0;
          if ((LOBYTE(v115) & 3) != 0)
          {
            int v118 = 0;
            char v119 = LOBYTE(v115) + 1;
            int v120 = -8;
            do
            {
              int v121 = v120;
              int v122 = **(unsigned char **)&v115;
              ++*(void *)&v115;
              int v118 = v122 | (v118 << 8);
              v120 += 8;
              if ((v119 & 3) == 0) {
                break;
              }
              ++v119;
            }
            while (*(void *)&v115 < v117);
            v153[0].Float64 mSampleRate = v115;
            v153[0].mFramesPerPacket = v121 + 16;
            v153[0].mBytesPerPacket = v118 << (24 - v120);
          }
          DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload(&v146, (uint64_t)v153, 0);
          if (DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)&v146, (unsigned int *)&v145)) {
            OSStatus DecoderSpecificBitStreamFromESDS = 1718449215;
          }
          else {
            OSStatus DecoderSpecificBitStreamFromESDS = 0;
          }
          if (*ioPropertyDataSize < 0x20) {
            goto LABEL_680;
          }
          *(void *)((char *)outPropertyData + 12) = 0;
          *(void *)((char *)outPropertyData + 4) = 0;
          *((_DWORD *)outPropertyData + 7) = 0;
          *(void *)((char *)outPropertyData + 20) = 0;
          *(_DWORD *)CFStringRef outPropertyData = LODWORD(v145.mSampleRate);
          UInt32 v100 = 32;
          goto LABEL_679;
        }
        if (v60 == 1633772320) {
          goto LABEL_669;
        }
        int v75 = 1633772392;
LABEL_654:
        if (v60 != v75) {
          return DecoderSpecificBitStreamFromESDS;
        }
        goto LABEL_669;
      }
      if (v60 > 1885430631)
      {
        if (v60 == 1885430632 || v60 == 1885430640) {
          goto LABEL_669;
        }
        int v61 = 1885692723;
LABEL_548:
        if (v60 != v61) {
          return DecoderSpecificBitStreamFromESDS;
        }
        goto LABEL_578;
      }
      if (v60 == 1885430115) {
        goto LABEL_669;
      }
      int v111 = 1885430579;
    }
    if (v60 != v111) {
      return DecoderSpecificBitStreamFromESDS;
    }
    goto LABEL_663;
  }
  if ((int)inPropertyID > 1852008556)
  {
    if ((int)inPropertyID <= 1885433452)
    {
      if (inPropertyID != 1852008557)
      {
        if (inPropertyID == 1852992877)
        {
          OSStatus v12 = 561213539;
          if (inSpecifierSize != 16) {
            return v12;
          }
          if (inSpecifier) {
            SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
          }
          return -50;
        }
        if (inPropertyID == 1868983411)
        {
          if (inSpecifier)
          {
            OSStatus v12 = 561213539;
            if (!inSpecifierSize) {
              return v12;
            }
            if (*ioPropertyDataSize == 48)
            {
              LODWORD(v153[0].mSampleRate) = 0;
              OSStatus DecoderSpecificBitStreamFromESDS = FetchFormatListFromCodecs((uint64_t (*)(void))GetOutputFormatListFromCodec, (const AudioFormatInfo *)inSpecifier, inSpecifierSize, (unsigned int *)v153, 0);
              if (DecoderSpecificBitStreamFromESDS) {
                return DecoderSpecificBitStreamFromESDS;
              }
              CADeprecated::CAAutoFree<AudioFormatListItem>::CAAutoFree(&v146, LODWORD(v153[0].mSampleRate), 1);
              if (LODWORD(v153[0].mSampleRate) < 0x30)
              {
                OSStatus DecoderSpecificBitStreamFromESDS = 561211770;
                goto LABEL_631;
              }
              OSStatus FormatListFromCodecs = FetchFormatListFromCodecs((uint64_t (*)(void))GetOutputFormatListFromCodec, (const AudioFormatInfo *)v8, v9, (unsigned int *)v153, *(AudioFormatListItem **)&v146.mSampleRate);
LABEL_630:
              OSStatus DecoderSpecificBitStreamFromESDS = FormatListFromCodecs;
              if (!FormatListFromCodecs)
              {
                Float64 v106 = v146.mSampleRate;
                long long v108 = *(_OWORD *)(*(void *)&v146.mSampleRate + 16);
                long long v107 = *(_OWORD *)(*(void *)&v146.mSampleRate + 32);
                *(_OWORD *)CFStringRef outPropertyData = **(_OWORD **)&v146.mSampleRate;
                *((_OWORD *)outPropertyData + 1) = v108;
                *((_OWORD *)outPropertyData + 2) = v107;
LABEL_634:
                free(*(void **)&v106);
                return DecoderSpecificBitStreamFromESDS;
              }
LABEL_631:
              *UInt32 ioPropertyDataSize = 0;
              Float64 v106 = v146.mSampleRate;
              if (!*(void *)&v146.mSampleRate) {
                return DecoderSpecificBitStreamFromESDS;
              }
              goto LABEL_634;
            }
            if (*ioPropertyDataSize >= 0x30) {
              return FetchFormatListFromCodecs((uint64_t (*)(void))GetOutputFormatListFromCodec, (const AudioFormatInfo *)inSpecifier, inSpecifierSize, ioPropertyDataSize, (AudioFormatListItem *)outPropertyData);
            }
            return 561211770;
          }
          return 2003329396;
        }
        return DecoderSpecificBitStreamFromESDS;
      }
      OSStatus v12 = 561213539;
      if (*ioPropertyDataSize == 4)
      {
        if (inSpecifierSize < 0xC) {
          return v12;
        }
        if (!inSpecifier) {
          return -50;
        }
        if (20 * *((_DWORD *)inSpecifier + 2) + 12 <= inSpecifierSize)
        {
          LODWORD(v153[0].mSampleRate) = 0;
          SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
        }
        return v12;
      }
      return 561211770;
    }
    if (inPropertyID == 1885433453)
    {
      OSStatus v12 = 561213539;
      if (inSpecifierSize != 32) {
        return v12;
      }
      if (inSpecifier)
      {
        long long v59 = *((_OWORD *)inSpecifier + 1);
        *(_OWORD *)&v146.Float64 mSampleRate = *(_OWORD *)inSpecifier;
        *(_OWORD *)&v146.mBytesPerPacket = v59;
        SanitizeClientAudioChannelLayout((const AudioChannelLayout *)v153);
      }
      return -50;
    }
    if (inPropertyID == 1885565796)
    {
      if (*ioPropertyDataSize == 40)
      {
        OSStatus v12 = -50;
        if (inSpecifierSize != 14 || !inSpecifier) {
          return v12;
        }
        return AudioFormatProperty_ASBDForISOPCMConfig((uint64_t)inSpecifier, (uint64_t)outPropertyData);
      }
      return 561211770;
    }
    if (inPropertyID != 1886677364) {
      return DecoderSpecificBitStreamFromESDS;
    }
    OSStatus v12 = 561213539;
    if (!inSpecifierSize) {
      return v12;
    }
    if (!inSpecifier) {
      return -50;
    }
    if (*ioPropertyDataSize < 0x10) {
      return 561211770;
    }
    OSStatus DecoderSpecificBitStreamFromESDS = ParseiTunesSMPBData((char *)inSpecifier, inSpecifierSize, (AudioFilePacketTableInfo *)outPropertyData);
    UInt32 v23 = 16;
LABEL_715:
    *UInt32 ioPropertyDataSize = v23;
    return DecoderSpecificBitStreamFromESDS;
  }
  if ((int)inPropertyID > 1835230309)
  {
    if (inPropertyID != 1835230310)
    {
      if (inPropertyID != 1835230563)
      {
        if (inPropertyID == 1835884912)
        {
          OSStatus v12 = 561213539;
          if (inSpecifierSize != 16) {
            return v12;
          }
          if (inSpecifier) {
            SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
          }
          return -50;
        }
        return DecoderSpecificBitStreamFromESDS;
      }
      if (!inSpecifier) {
        return -50;
      }
      if (inSpecifierSize < 0x18) {
        return 561213539;
      }
      return AudioFormatProperty_CanonicalMagicCookieFromEncapsulatedMagicCookie((unsigned int *)inSpecifier, ioPropertyDataSize, outPropertyData);
    }
    if (*ioPropertyDataSize == 50)
    {
      if (!inSpecifier) {
        return -50;
      }
      return AudioFormatProperty_FLACdfLaAtomFromOldFLACMagicCookie(inSpecifier, inSpecifierSize, (char *)outPropertyData);
    }
    return 561211770;
  }
  if (inPropertyID == 1818520674)
  {
    if (inSpecifierSize)
    {
      if (inSpecifier)
      {
        v146.Float64 mSampleRate = 0.0;
        OSStatus DecoderSpecificBitStreamFromESDS = LoudnessInfoDictionaryForISOLoudnessBox(*(const __CFData **)inSpecifier, (const __CFDictionary **)&v146);
        if (!DecoderSpecificBitStreamFromESDS)
        {
          Float64 v58 = v146.mSampleRate;
          if (*(void *)&v146.mSampleRate)
          {
            *(void *)CFStringRef outPropertyData = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)&v146.mSampleRate);
            *UInt32 ioPropertyDataSize = 8;
            CFRelease(*(CFTypeRef *)&v58);
          }
        }
        return DecoderSpecificBitStreamFromESDS;
      }
      return -50;
    }
    return 561213539;
  }
  if (inPropertyID == 1819242093)
  {
    OSStatus v12 = 561213539;
    if (*ioPropertyDataSize == 8)
    {
      if (inSpecifierSize < 0xC) {
        return v12;
      }
      if (inSpecifier) {
        SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
      }
      return -50;
    }
    return 561211770;
  }
  if (inPropertyID != 1819504237) {
    return DecoderSpecificBitStreamFromESDS;
  }
  OSStatus v12 = 561213539;
  if (*ioPropertyDataSize != 8) {
    return 561211770;
  }
  if (inSpecifierSize >= 0xC)
  {
    if (inSpecifier) {
      SanitizeClientAudioChannelLayout((const AudioChannelLayout *)&v146);
    }
    return -50;
  }
  return v12;
}

void sub_18FF1FF1C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18FF1FF28);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF1FF34(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18FF1FF40);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF1FF88(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18FF20084);
  }
  JUMPOUT(0x18FF20124);
}

void sub_18FF1FFC4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(void *)(v2 + 112)) {
      (*(void (**)(void))(v2 + 120))();
    }
    JUMPOUT(0x18FF20124);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF1FFE8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18FF1FFF8);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF20018(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18FF20028);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF2007C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_18FF200B8(uint64_t a1, int a2)
{
  if (a2)
  {
    os_unfair_recursive_lock_unlock();
    JUMPOUT(0x18FF20124);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF200D4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(v2 + 120))(v3);
    }
    JUMPOUT(0x18FF20124);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF20108(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18FF20114);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF20118(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18FF1E948);
  }
  JUMPOUT(0x18FF20084);
}

void sub_18FF2014C()
{
}

CFStringRef AudioFormatProperty_FormatCategoryName(const AudioStreamBasicDescription *a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  uint64_t v6 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    uint64_t v6 = (__CFBundle *)sAudioToolboxBundle;
  }
  signed int mFormatID = a1->mFormatID;
  CFStringRef v8 = @"Dolby Atmos";
  if (mFormatID > 1902324530)
  {
    BOOL v9 = mFormatID == 1902324531;
    int v10 = 2053319475;
  }
  else
  {
    BOOL v9 = mFormatID == 1700997939;
    int v10 = 1885547315;
  }
  if (!v9 && mFormatID != v10)
  {
    if (a1->mChannelsPerFrame <= 2) {
      CFStringRef v8 = @"Stereo";
    }
    else {
      CFStringRef v8 = @"Multichannel";
    }
  }
  CFStringRef result = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v8, @"FormatNames", v6, a4);
  *a2 = result;
  return result;
}

void *ThreadSafeCFCopyLocalizedStringFromTableInBundle(const __CFString *a1, const __CFString *a2, __CFBundle *a3, const __CFString *a4)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v10);
  if (a3) {
    unint64_t v7 = (void *)CFBundleCopyLocalizedString(a3, a1, a1, a2);
  }
  else {
    unint64_t v7 = (void *)CFRetain(a1);
  }
  CFStringRef v8 = v7;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v10);
  return v8;
}

void sub_18FF202A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void RegistryAccess::instance(RegistryAccess *this)
{
  {
    if (v1) {
      RegistryAccess::RegistryAccess(v1);
    }
  }
}

void sub_18FF2031C(_Unwind_Exception *a1)
{
}

uint64_t SanitizeClientAudioChannelLayout(AudioChannelLayout const*,unsigned int)::$_0::__invoke(uint64_t result)
{
  if (result) {
    JUMPOUT(0x192FC8910);
  }
  return result;
}

void SanitizeClientAudioChannelLayout(const AudioChannelLayout *a1)
{
}

FILE *CAMemoryStream::cstr(FILE **this)
{
  fflush(*this);
  uint64_t v2 = this[1];
  if (!v2)
  {
    uint64_t v2 = (FILE *)malloc_type_malloc(1uLL, 0xADAE35E5uLL);
    this[1] = v2;
    this[3] = (FILE *)1;
  }
  *((unsigned char *)&this[2]->_p + (void)v2) = 0;
  return this[1];
}

unint64_t caulk::numeric::exceptional_cast<unsigned int,unsigned long>(unint64_t result)
{
  if (HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
  }
  return result;
}

void sub_18FF20518(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t acv2::ConverterFactory::EmploysDependentPackets(acv2::ConverterFactory *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t AudioFormatProperty_ChannelShortName(int a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    uint64_t v6 = (__CFBundle *)sAudioToolboxBundle;
  }
  if ((a1 & 0xFFFF0000) == 0x10000)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFStringRef v10 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Discrete", @"AudioChannelLabels", v6, v9);
    snprintf(__str, 0x10uLL, "-%u", (unsigned __int16)a1);
    CFStringAppendCString(Mutable, __str, 0x8000100u);
    CFStringInsert(Mutable, 0, v10);
    *a2 = CFStringCreateCopy(v7, Mutable);
    CFRelease(Mutable);
    CFRelease(v10);
    return 0;
  }
  else
  {
    uint64_t result = 560360820;
    if (a1 > 199)
    {
      if (a1 > 300)
      {
        switch(a1)
        {
          case 301:
            CFStringRef v12 = @"phoneL";
            goto LABEL_73;
          case 302:
            CFStringRef v12 = @"phoneR";
            goto LABEL_73;
          case 303:
            return result;
          case 304:
            CFStringRef v12 = @"Click";
            goto LABEL_73;
          case 305:
            CFStringRef v12 = @"Lang";
            goto LABEL_73;
          default:
            if (a1 == 400)
            {
              CFStringRef v12 = @"Discrete";
              CFStringRef v13 = @"AudioChannelLabels";
            }
            else
            {
              if (a1 != 99999) {
                return result;
              }
              CFStringRef v12 = @"AAAAA - NOTE";
LABEL_73:
              CFStringRef v13 = @"AudioChannelShortLabels";
            }
            CFStringRef v14 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v12, v13, v6, a4);
            uint64_t result = 0;
            *a2 = v14;
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 200:
            CFStringRef v12 = @"W";
            goto LABEL_73;
          case 201:
          case 206:
            CFStringRef v12 = @"X";
            goto LABEL_73;
          case 202:
          case 207:
            CFStringRef v12 = @"Y";
            goto LABEL_73;
          case 203:
            CFStringRef v12 = @"Z";
            goto LABEL_73;
          case 204:
            CFStringRef v12 = @"Mid";
            goto LABEL_73;
          case 205:
            CFStringRef v12 = @"Side";
            goto LABEL_73;
          default:
            return result;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case -1:
          CFStringRef v12 = @"?";
          goto LABEL_73;
        case 0:
          CFStringRef v12 = @"_";
          goto LABEL_73;
        case 1:
          CFStringRef v12 = @"L";
          goto LABEL_73;
        case 2:
          CFStringRef v12 = @"R";
          goto LABEL_73;
        case 3:
          CFStringRef v12 = @"C";
          goto LABEL_73;
        case 4:
          CFStringRef v12 = @"LFE";
          goto LABEL_73;
        case 5:
          CFStringRef v12 = @"Ls";
          goto LABEL_73;
        case 6:
          CFStringRef v12 = @"Rs";
          goto LABEL_73;
        case 7:
          CFStringRef v12 = @"Lc";
          goto LABEL_73;
        case 8:
          CFStringRef v12 = @"Rc";
          goto LABEL_73;
        case 9:
          CFStringRef v12 = @"Cs";
          goto LABEL_73;
        case 10:
          CFStringRef v12 = @"Lsd";
          goto LABEL_73;
        case 11:
          CFStringRef v12 = @"Rsd";
          goto LABEL_73;
        case 12:
          CFStringRef v12 = @"Ts";
          goto LABEL_73;
        case 13:
          CFStringRef v12 = @"Vhl";
          goto LABEL_73;
        case 14:
          CFStringRef v12 = @"Vhc";
          goto LABEL_73;
        case 15:
          CFStringRef v12 = @"Vhr";
          goto LABEL_73;
        case 16:
          CFStringRef v12 = @"Tbl";
          goto LABEL_73;
        case 17:
          CFStringRef v12 = @"Tbc";
          goto LABEL_73;
        case 18:
          CFStringRef v12 = @"Tbr";
          goto LABEL_73;
        case 33:
          CFStringRef v12 = @"Rls";
          goto LABEL_73;
        case 34:
          CFStringRef v12 = @"Rrs";
          goto LABEL_73;
        case 35:
          CFStringRef v12 = @"Lw";
          goto LABEL_73;
        case 36:
          CFStringRef v12 = @"Rw";
          goto LABEL_73;
        case 37:
          CFStringRef v12 = @"LFE2";
          goto LABEL_73;
        case 38:
          CFStringRef v12 = @"Lt";
          goto LABEL_73;
        case 39:
          CFStringRef v12 = @"Rt";
          goto LABEL_73;
        case 40:
          CFStringRef v12 = @"HI";
          goto LABEL_73;
        case 41:
          CFStringRef v12 = @"VI-N";
          goto LABEL_73;
        case 42:
          CFStringRef v12 = @"Mono";
          goto LABEL_73;
        case 43:
          CFStringRef v12 = @"Dlg";
          goto LABEL_73;
        case 44:
          CFStringRef v12 = @"Csd";
          goto LABEL_73;
        case 45:
          CFStringRef v12 = @"Haptic";
          goto LABEL_73;
        case 49:
          CFStringRef v12 = @"Ltm";
          goto LABEL_73;
        case 51:
          CFStringRef v12 = @"Rtm";
          goto LABEL_73;
        case 52:
          CFStringRef v12 = @"Ltr";
          goto LABEL_73;
        case 53:
          CFStringRef v12 = @"Ctr";
          goto LABEL_73;
        case 54:
          CFStringRef v12 = @"Rtr";
          goto LABEL_73;
        case 55:
          CFStringRef v12 = @"Lss";
          goto LABEL_73;
        case 56:
          CFStringRef v12 = @"Rss";
          goto LABEL_73;
        case 57:
          CFStringRef v12 = @"Lb";
          goto LABEL_73;
        case 58:
          CFStringRef v12 = @"Rb";
          goto LABEL_73;
        case 59:
          CFStringRef v12 = @"Cb";
          goto LABEL_73;
        case 60:
          CFStringRef v12 = @"Lts";
          goto LABEL_73;
        case 61:
          CFStringRef v12 = @"Rts";
          goto LABEL_73;
        case 62:
          CFStringRef v12 = @"LFE3";
          goto LABEL_73;
        case 63:
          CFStringRef v12 = @"Lbs";
          goto LABEL_73;
        case 64:
          CFStringRef v12 = @"Rbs";
          goto LABEL_73;
        case 65:
          CFStringRef v12 = @"Leos";
          goto LABEL_73;
        case 66:
          CFStringRef v12 = @"Reos";
          goto LABEL_73;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t AudioFormatProperty_FirstPlayableFormatFromList(RegistryAccess *a1, AudioFormatListItem *a2, unsigned int *a3)
{
  int v5 = (int)a1;
  if (a1 == 1 && a2->mASBD.mFormatID == 1819304813)
  {
    uint64_t v6 = 0;
    *a3 = 0;
  }
  else
  {
    RegistryAccess::instance(a1);
    uint64_t v7 = qword_1EB3D4FB0;
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {
      uint64_t v8 = 0;
      p_signed int mFormatID = &a2->mASBD.mFormatID;
      while (1)
      {
        AudioFormatID v10 = *p_mFormatID;
        p_mFormatID += 12;
        if ((*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(*(void *)v7 + 16))(v7, v10, 1819304813, 0, 0))
        {
          break;
        }
        if (v5 == ++v8) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      LODWORD(v8) = -1;
    }
    if ((int)v8 < 0) {
      unsigned int v11 = -1;
    }
    else {
      unsigned int v11 = v8;
    }
    uint64_t v6 = ((int)v8 >> 31) & 0x666D743F;
    *a3 = v11;
    os_unfair_recursive_lock_unlock();
  }
  return v6;
}

void sub_18FF20B38(_Unwind_Exception *a1)
{
}

uint64_t acv2::ConverterRegistry::GetAvailableEncodeSampleRates(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, unsigned int *a4, void *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t FactoryBySpecifier = acv2::ConverterRegistry::FindFactoryBySpecifier(this, a2, a3);
  if (FactoryBySpecifier)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)FactoryBySpecifier + 88);
    return v6();
  }
  else
  {
    AudioConverterLog();
    uint64_t v8 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      AudioFormatID v10 = "ConverterFactory.cpp";
      __int16 v11 = 1024;
      int v12 = 613;
      _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for encode sample rates", (uint8_t *)&v9, 0x12u);
    }
    return 1718449215;
  }
}

uint64_t AudioFormatProperty_ChannelLayoutName(const AudioChannelLayout *a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  signed int mChannelLayoutTag = a1->mChannelLayoutTag;
  unsigned int v22 = a1->mChannelLayoutTag;
  uint64_t v7 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    uint64_t v7 = (__CFBundle *)sAudioToolboxBundle;
    if (mChannelLayoutTag)
    {
LABEL_3:
      if (mChannelLayoutTag == 0x10000)
      {
        int8x8_t mChannelBitmap = (int8x8_t)a1->mChannelBitmap;
        int8x8_t v9 = vcnt_s8(mChannelBitmap);
        v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
        __int32 v10 = v9.i32[0];
        if (v9.i32[0] == 1)
        {
          AudioFormatProperty_ChannelLayoutForBitmap(mChannelBitmap.i32[0], &v21, v9);
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          AudioChannelLabel mChannelLabel = v21.mChannelDescriptions[0].mChannelLabel;
          p_AudioChannelLabel mChannelLabel = (AudioChannelLayout *)&mChannelLabel;
          return AudioFormatProperty_ChannelName((AudioChannelDescription *)p_mChannelLabel, a2, a3, a4);
        }
        signed int mChannelLayoutTag = AudioFormatProperty_LayoutTagForBitmap(mChannelBitmap.i32[0]);
        unsigned int v22 = mChannelLayoutTag;
        if (mChannelLayoutTag == 0x10000)
        {
          *(void *)&v21.signed int mChannelLayoutTag = 0;
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v21, (20 * v10 + 12), 0);
          CFStringRef v14 = *(AudioChannelLayout **)&v21.mChannelLayoutTag;
          AudioFormatProperty_ChannelLayoutForBitmap(mChannelBitmap.i32[0], *(AudioChannelLayout **)&v21.mChannelLayoutTag, v15);
          uint64_t v13 = AudioFormatProperty_ChannelLayoutNameFromDescriptions(v14, a2, 0);
          if (v14) {
            free(v14);
          }
          return v13;
        }
      }
LABEL_18:
      unsigned int v17 = mChannelLayoutTag & 0xFFFF0000;
      if ((mChannelLayoutTag & 0xFFFF0000) == 0xBF0000)
      {
        CFStringRef v20 = @"High-Order Ambisonics, ACN/N3D";
      }
      else if (v17 == 12451840)
      {
        CFStringRef v20 = @"High-Order Ambisonics, ACN/SN3D";
      }
      else
      {
        if (v17 == 9633792)
        {
          if ((unsigned __int16)mChannelLayoutTag == 1) {
            CFStringRef v18 = @"Discrete Channel";
          }
          else {
            CFStringRef v18 = @"Discrete Channels";
          }
          AudioCodecPropertyID v19 = ThreadSafeCFCopyLocalizedStringFromTableInBundle(v18, @"AudioChannelLayouts", v7, a4);
          *a2 = CFStringCreateWithFormat(0, 0, @"%d %@", (unsigned __int16)mChannelLayoutTag, v19);
          CFRelease(v19);
          return 0;
        }
        uint64_t v13 = 560360820;
        if (mChannelLayoutTag <= 10420230)
        {
          if (mChannelLayoutTag > 8454151)
          {
            if (mChannelLayoutTag <= 9371654)
            {
              if (mChannelLayoutTag > 8912899)
              {
                if (mChannelLayoutTag <= 9109509)
                {
                  switch(mChannelLayoutTag)
                  {
                    case 8912900:
                      CFStringRef v20 = @"3.1 (L R C LFE)";
                      break;
                    case 8978437:
                      CFStringRef v20 = @"4.1 (L R C LFE Cs)";
                      break;
                    case 9043973:
                      CFStringRef v20 = @"4.1 (L R Ls Rs LFE)";
                      break;
                    default:
                      return v13;
                  }
                }
                else if (mChannelLayoutTag > 9240581)
                {
                  if (mChannelLayoutTag == 9240582)
                  {
                    CFStringRef v20 = @"6.0 (C L R Ls Rs Cs)";
                  }
                  else
                  {
                    if (mChannelLayoutTag != 9306119) {
                      return v13;
                    }
                    CFStringRef v20 = @"6.1 (C L R Ls Rs Cs LFE)";
                  }
                }
                else if (mChannelLayoutTag == 9109510)
                {
                  CFStringRef v20 = @"6.0 (L R Ls Rs C Cs)";
                }
                else
                {
                  if (mChannelLayoutTag != 9175047) {
                    return v13;
                  }
                  CFStringRef v20 = @"7.0 (L R Ls Rs C Rls Rrs)";
                }
              }
              else if (mChannelLayoutTag <= 8650755)
              {
                switch(mChannelLayoutTag)
                {
                  case 8454152:
                    CFStringRef v20 = @"7.1 (L R Ls Rs C LFE Lc Rc)";
                    break;
                  case 8519688:
                    CFStringRef v20 = @"SMPTE DTV (L R C LFE Ls Rs Lt Rt)";
                    break;
                  case 8585219:
                    CFStringRef v20 = @"3.0 (L R Cs)";
                    break;
                  default:
                    return v13;
                }
              }
              else if (mChannelLayoutTag > 8781827)
              {
                if (mChannelLayoutTag == 8781828)
                {
                  CFStringRef v20 = @"3.1 (L R LFE Cs)";
                }
                else
                {
                  if (mChannelLayoutTag != 8847365) {
                    return v13;
                  }
                  CFStringRef v20 = @"4.1 (L R LFE Ls Rs)";
                }
              }
              else if (mChannelLayoutTag == 8650756)
              {
                CFStringRef v20 = @"4.0 (L R Ls Rs)";
              }
              else
              {
                if (mChannelLayoutTag != 8716291) {
                  return v13;
                }
                CFStringRef v20 = @"2.1 (L R LFE)";
              }
            }
            else if (mChannelLayoutTag <= 9895939)
            {
              if (mChannelLayoutTag <= 9568276)
              {
                switch(mChannelLayoutTag)
                {
                  case 9371655:
                    CFStringRef v20 = @"7.0 (C L R Ls Rs Rls Rrs)";
                    break;
                  case 9437192:
                    CFStringRef v20 = @"8.0 (C L R Ls Rs Rls Rrs Cs)";
                    break;
                  case 9502736:
                    CFStringRef v20 = @"TMH 10.2 (16 channel)";
                    break;
                  default:
                    return v13;
                }
              }
              else if (mChannelLayoutTag > 9764865)
              {
                if (mChannelLayoutTag == 9764866)
                {
                  CFStringRef v20 = @"1.1 (C LFE)";
                }
                else
                {
                  if (mChannelLayoutTag != 9830403) {
                    return v13;
                  }
                  CFStringRef v20 = @"3.0 (L C R)";
                }
              }
              else if (mChannelLayoutTag == 9568277)
              {
                CFStringRef v20 = @"TMH 10.2 (21 channel)";
              }
              else
              {
                if (mChannelLayoutTag != 9699335) {
                  return v13;
                }
                CFStringRef v20 = @"7.0 (L R Ls Rs C Lc Rc)";
              }
            }
            else if (mChannelLayoutTag > 10158085)
            {
              if (mChannelLayoutTag > 10289158)
              {
                if (mChannelLayoutTag == 10289159)
                {
                  CFStringRef v20 = @"6.1 (L C R Ls Rs LFE Cs)";
                }
                else
                {
                  if (mChannelLayoutTag != 10354695) {
                    return v13;
                  }
                  CFStringRef v20 = @"6.1 (L C R Ls Rs LFE Ts)";
                }
              }
              else if (mChannelLayoutTag == 10158086)
              {
                CFStringRef v20 = @"6.0 (L C R Ls Rs Cs)";
              }
              else
              {
                if (mChannelLayoutTag != 10223623) {
                  return v13;
                }
                CFStringRef v20 = @"7.0 (L C R Ls Rs Rls Rrs)";
              }
            }
            else if (mChannelLayoutTag > 10027011)
            {
              if (mChannelLayoutTag == 10027012)
              {
                CFStringRef v20 = @"3.1 (L R Cs LFE)";
              }
              else
              {
                if (mChannelLayoutTag != 10092549) {
                  return v13;
                }
                CFStringRef v20 = @"4.1 (L C R Cs LFE)";
              }
            }
            else if (mChannelLayoutTag == 9895940)
            {
              CFStringRef v20 = @"4.0 (L C R Cs)";
            }
            else
            {
              if (mChannelLayoutTag != 9961476) {
                return v13;
              }
              CFStringRef v20 = @"3.1 (L C R LFE)";
            }
          }
          else if (mChannelLayoutTag <= 7471106)
          {
            if (mChannelLayoutTag > 7012355)
            {
              if (mChannelLayoutTag <= 7208965)
              {
                switch(mChannelLayoutTag)
                {
                  case 7012356:
                    CFStringRef v20 = @"Ambisonic B Format (W X Y Z)";
                    break;
                  case 7077892:
                    CFStringRef v20 = @"Quadraphonic";
                    break;
                  case 7143429:
                    CFStringRef v20 = @"Pentagonal";
                    break;
                  default:
                    return v13;
                }
              }
              else if (mChannelLayoutTag > 7340039)
              {
                if (mChannelLayoutTag == 7340040)
                {
                  CFStringRef v20 = @"Cube";
                }
                else
                {
                  if (mChannelLayoutTag != 7405571) {
                    return v13;
                  }
                  CFStringRef v20 = @"3.0 (L R C)";
                }
              }
              else if (mChannelLayoutTag == 7208966)
              {
                CFStringRef v20 = @"Hexagonal";
              }
              else
              {
                if (mChannelLayoutTag != 7274504) {
                  return v13;
                }
                CFStringRef v20 = @"Octagonal";
              }
            }
            else if (mChannelLayoutTag <= 6750209)
            {
              switch(mChannelLayoutTag)
              {
                case 6553601:
                  CFStringRef v20 = @"Mono";
                  break;
                case 6619138:
                  CFStringRef v20 = @"Stereo (L R)";
                  break;
                case 6684674:
                  CFStringRef v20 = @"Stereo Headphones";
                  break;
                default:
                  return v13;
              }
            }
            else if (mChannelLayoutTag > 6881281)
            {
              if (mChannelLayoutTag == 6881282)
              {
                CFStringRef v20 = @"X-Y";
              }
              else
              {
                if (mChannelLayoutTag != 6946818) {
                  return v13;
                }
                CFStringRef v20 = @"Binaural";
              }
            }
            else if (mChannelLayoutTag == 6750210)
            {
              CFStringRef v20 = @"Matrix Stereo (Lt Rt)";
            }
            else
            {
              if (mChannelLayoutTag != 6815746) {
                return v13;
              }
              CFStringRef v20 = @"Mid-Side";
            }
          }
          else if (mChannelLayoutTag <= 7929861)
          {
            if (mChannelLayoutTag <= 7667716)
            {
              switch(mChannelLayoutTag)
              {
                case 7471107:
                  CFStringRef v20 = @"3.0 (C L R)";
                  break;
                case 7536644:
                  CFStringRef v20 = @"4.0 (L R C Cs)";
                  break;
                case 7602180:
                  CFStringRef v20 = @"4.0 (C L R Cs)";
                  break;
                default:
                  return v13;
              }
            }
            else if (mChannelLayoutTag > 7798788)
            {
              if (mChannelLayoutTag == 7798789)
              {
                CFStringRef v20 = @"5.0 (L C R Ls Rs)";
              }
              else
              {
                if (mChannelLayoutTag != 7864325) {
                  return v13;
                }
                CFStringRef v20 = @"5.0 (C L R Ls Rs)";
              }
            }
            else if (mChannelLayoutTag == 7667717)
            {
              CFStringRef v20 = @"5.0 (L R C Ls Rs)";
            }
            else
            {
              if (mChannelLayoutTag != 7733253) {
                return v13;
              }
              CFStringRef v20 = @"5.0 (L R Ls Rs C)";
            }
          }
          else if (mChannelLayoutTag > 8192006)
          {
            if (mChannelLayoutTag > 8323079)
            {
              if (mChannelLayoutTag == 8323080)
              {
                CFStringRef v20 = @"7.1 (C Lc Rc L R Ls Rs LFE)";
              }
              else
              {
                if (mChannelLayoutTag != 8388616) {
                  return v13;
                }
                CFStringRef v20 = @"7.1 (L R C LFE Ls Rs Rls Rrs)";
              }
            }
            else if (mChannelLayoutTag == 8192007)
            {
              CFStringRef v20 = @"6.1 (L R C LFE Ls Rs Cs)";
            }
            else
            {
              if (mChannelLayoutTag != 8257544) {
                return v13;
              }
              CFStringRef v20 = @"7.1 (L R C LFE Ls Rs Lc Rc)";
            }
          }
          else if (mChannelLayoutTag > 8060933)
          {
            if (mChannelLayoutTag == 8060934)
            {
              CFStringRef v20 = @"5.1 (L C R Ls Rs LFE)";
            }
            else
            {
              if (mChannelLayoutTag != 8126470) {
                return v13;
              }
              CFStringRef v20 = @"5.1 (C L R Ls Rs LFE)";
            }
          }
          else if (mChannelLayoutTag == 7929862)
          {
            CFStringRef v20 = @"5.1 (L R C LFE Ls Rs)";
          }
          else
          {
            if (mChannelLayoutTag != 7995398) {
              return v13;
            }
            CFStringRef v20 = @"5.1 (L R Ls Rs C LFE)";
          }
        }
        else if (mChannelLayoutTag <= 12320774)
        {
          if (mChannelLayoutTag <= 11337734)
          {
            if (mChannelLayoutTag > 10878983)
            {
              if (mChannelLayoutTag <= 11075588)
              {
                switch(mChannelLayoutTag)
                {
                  case 10878984:
                    CFStringRef v20 = @"7.1 (L C R Ls Rs LFE Cs Vhc)";
                    break;
                  case 10944520:
                    CFStringRef v20 = @"7.1 (L C R Ls Rs LFE Ts Vhc)";
                    break;
                  case 11010052:
                    CFStringRef v20 = @"3.1 (C L R LFE)";
                    break;
                  default:
                    return v13;
                }
              }
              else if (mChannelLayoutTag > 11206661)
              {
                if (mChannelLayoutTag == 11206662)
                {
                  CFStringRef v20 = @"6.0 (C L R Rls Rrs Ts)";
                }
                else
                {
                  if (mChannelLayoutTag != 11272198) {
                    return v13;
                  }
                  CFStringRef v20 = @"6.0 (C Cs L R Rls Rrs)";
                }
              }
              else if (mChannelLayoutTag == 11075589)
              {
                CFStringRef v20 = @"4.1 (C L R Cs LFE)";
              }
              else
              {
                if (mChannelLayoutTag != 11141126) {
                  return v13;
                }
                CFStringRef v20 = @"6.0 (Lc Rc L R Ls Rs)";
              }
            }
            else if (mChannelLayoutTag <= 10616839)
            {
              switch(mChannelLayoutTag)
              {
                case 10420231:
                  CFStringRef v20 = @"6.1 (L C R Ls Rs LFE Vhc)";
                  break;
                case 10485768:
                  CFStringRef v20 = @"7.1 (L C R Ls Rs LFE Rls Rrs)";
                  break;
                case 10551304:
                  CFStringRef v20 = @"7.1 (L C R Ls Rs LFE Lc Rc)";
                  break;
                default:
                  return v13;
              }
            }
            else if (mChannelLayoutTag > 10747911)
            {
              if (mChannelLayoutTag == 10747912)
              {
                CFStringRef v20 = @"7.1 (L C R Ls Rs LFE Vhl Vhr)";
              }
              else
              {
                if (mChannelLayoutTag != 10813448) {
                  return v13;
                }
                CFStringRef v20 = @"7.1 (L C R Ls Rs LFE Cs Ts)";
              }
            }
            else if (mChannelLayoutTag == 10616840)
            {
              CFStringRef v20 = @"7.1 (L C R Ls Rs LFE Lsd Rsd)";
            }
            else
            {
              if (mChannelLayoutTag != 10682376) {
                return v13;
              }
              CFStringRef v20 = @"7.1 (L C R Ls Rs LFE Lw Rw)";
            }
          }
          else if (mChannelLayoutTag <= 11796488)
          {
            if (mChannelLayoutTag <= 11534342)
            {
              switch(mChannelLayoutTag)
              {
                case 11337735:
                  CFStringRef v20 = @"6.1 (Lc Rc L R Ls Rs LFE)";
                  break;
                case 11403271:
                  CFStringRef v20 = @"6.1 (C L R Rls Rrs Ts LFE)";
                  break;
                case 11468807:
                  CFStringRef v20 = @"6.1 (C Cs L R Rls Rrs LFE)";
                  break;
                default:
                  return v13;
              }
            }
            else if (mChannelLayoutTag > 11665415)
            {
              if (mChannelLayoutTag == 11665416)
              {
                CFStringRef v20 = @"8.0 (Lc Rc L R Ls Rs Rls Rrs)";
              }
              else
              {
                if (mChannelLayoutTag != 11730952) {
                  return v13;
                }
                CFStringRef v20 = @"8.0 (Lc C Rc L R Ls Cs Rs)";
              }
            }
            else if (mChannelLayoutTag == 11534343)
            {
              CFStringRef v20 = @"7.1 (Lc C Rc L R Ls Rs)";
            }
            else
            {
              if (mChannelLayoutTag != 11599880) {
                return v13;
              }
              CFStringRef v20 = @"7.1 (Lc C Rc L R Ls Rs LFE)";
            }
          }
          else if (mChannelLayoutTag > 12058631)
          {
            if (mChannelLayoutTag > 12189700)
            {
              if (mChannelLayoutTag == 12189701)
              {
                CFStringRef v20 = @"5.0 (L R C Rls Rrs)";
              }
              else
              {
                if (mChannelLayoutTag != 12255238) {
                  return v13;
                }
                CFStringRef v20 = @"5.1 (L R C LFE Rls Rrs)";
              }
            }
            else if (mChannelLayoutTag == 12058632)
            {
              CFStringRef v20 = @"7.1 (C L R Ls Rs LFE Vhl Vhr)";
            }
            else
            {
              if (mChannelLayoutTag != 12124164) {
                return v13;
              }
              CFStringRef v20 = @"4.0 (L R Rls Rrs)";
            }
          }
          else if (mChannelLayoutTag > 11927558)
          {
            if (mChannelLayoutTag == 11927559)
            {
              CFStringRef v20 = @"6.1 (C L R Ls Rs LFE Cs)";
            }
            else
            {
              if (mChannelLayoutTag != 11993096) {
                return v13;
              }
              CFStringRef v20 = @"7.1 (C L R Ls Rs Rls Rrs LFE)";
            }
          }
          else if (mChannelLayoutTag == 11796489)
          {
            CFStringRef v20 = @"8.1 (Lc Rc L R Ls Rs Rls Rrs LFE)";
          }
          else
          {
            if (mChannelLayoutTag != 11862025) {
              return v13;
            }
            CFStringRef v20 = @"8.1 (Lc C Rc L R Ls Cs Rs LFE)";
          }
        }
        else if (mChannelLayoutTag > 13434887)
        {
          if (mChannelLayoutTag <= 13893636)
          {
            if (mChannelLayoutTag <= 13631499)
            {
              switch(mChannelLayoutTag)
              {
                case 13434888:
                  CFStringRef v20 = @"7.1 (L R C LFE Ls Rs Vhl Vhr)";
                  break;
                case 13500428:
                  CFStringRef v20 = @"10.2 (L R C LFE2 Rls Rrs LFE3 Lss Rss Vhl Vhr Ctr)";
                  break;
                case 13565962:
                  CFStringRef v20 = @"9.1 (L R C LFE Ls Rs Vhl Vhr Lts Rts)";
                  break;
                default:
                  return v13;
              }
            }
            else if (mChannelLayoutTag > 13762571)
            {
              if (mChannelLayoutTag == 13762572)
              {
                CFStringRef v20 = @"11.1 (L R C LFE Rls Rrs Lss Rss Vhl Vhr Ltr Rtr)";
              }
              else
              {
                if (mChannelLayoutTag != 13828110) {
                  return v13;
                }
                CFStringRef v20 = @"13.1 (L R C LFE Rls Rrs Lss Rss Vhl Vhr Ltr Rtr Leos Reos)";
              }
            }
            else if (mChannelLayoutTag == 13631500)
            {
              CFStringRef v20 = @"11.1 (L R C LFE Ls Rs Vhl Vhr Vhc Lts Rts Ts)";
            }
            else
            {
              if (mChannelLayoutTag != 13697038) {
                return v13;
              }
              CFStringRef v20 = @"13.1 (L R C LFE Ls Rs Lbs Rbs Vhl Vhr Vhc Lts Rts Ts)";
            }
          }
          else if (mChannelLayoutTag > 14155780)
          {
            if (mChannelLayoutTag > 14286854)
            {
              if (mChannelLayoutTag == 14286855)
              {
                CFStringRef v20 = @"6.1 (L R Ls Rs C Cs LFE)";
              }
              else
              {
                if (mChannelLayoutTag != 14352392) {
                  return v13;
                }
                CFStringRef v20 = @"7.1 (L R Rls Rrs Ls Rs C LFE)";
              }
            }
            else if (mChannelLayoutTag == 14155781)
            {
              CFStringRef v20 = @"5.0 (L R Rls Rrs C)";
            }
            else
            {
              if (mChannelLayoutTag != 14221318) {
                return v13;
              }
              CFStringRef v20 = @"5.1 (L R Rls Rrs C LFE)";
            }
          }
          else if (mChannelLayoutTag > 14024710)
          {
            if (mChannelLayoutTag == 14024711)
            {
              CFStringRef v20 = @"6.1 (L C R Ls Rs Cs LFE)";
            }
            else
            {
              if (mChannelLayoutTag != 14090248) {
                return v13;
              }
              CFStringRef v20 = @"7.1 (L C R Ls Rs Rls Rrs LFE)";
            }
          }
          else if (mChannelLayoutTag == 13893637)
          {
            CFStringRef v20 = @"5.0 (L C R Rls Rrs)";
          }
          else
          {
            if (mChannelLayoutTag != 13959174) {
              return v13;
            }
            CFStringRef v20 = @"5.1 (L C R Rls Rrs LFE)";
          }
        }
        else if (mChannelLayoutTag <= 12910595)
        {
          if (mChannelLayoutTag <= 12648463)
          {
            switch(mChannelLayoutTag)
            {
              case 12320775:
                CFStringRef v20 = @"6.1 (L R C LFE Cs Ls Rs)";
                break;
              case 12386312:
                CFStringRef v20 = @"7.1 (L R C LFE Rls Rrs Ls Rs)";
                break;
              case 12582924:
                CFStringRef v20 = @"7.1.4 (L R C LFE Ls Rs Rls Rrs Vhl Vhr Ltr Rtr)";
                break;
              default:
                return v13;
            }
          }
          else if (mChannelLayoutTag > 12779529)
          {
            if (mChannelLayoutTag == 12779530)
            {
              CFStringRef v20 = @"5.1.4 (L R C LFE Ls Rs Vhl Vhr Ltr Rtr)";
            }
            else
            {
              if (mChannelLayoutTag != 12845066) {
                return v13;
              }
              CFStringRef v20 = @"7.1.2 (L R C LFE Ls Rs Rls Rrs Ltm Rtm)";
            }
          }
          else if (mChannelLayoutTag == 12648464)
          {
            CFStringRef v20 = @"9.1.6 (L R C LFE Ls Rs Rls Rrs Lw Rw Vhl Vhr Ltm Rtm Ltr Rtr)";
          }
          else
          {
            if (mChannelLayoutTag != 12713992) {
              return v13;
            }
            CFStringRef v20 = @"5.1.2 (L R C LFE Ls Rs Ltm Rtm)";
          }
        }
        else if (mChannelLayoutTag > 13172743)
        {
          if (mChannelLayoutTag > 13303821)
          {
            if (mChannelLayoutTag == 13303822)
            {
              CFStringRef v20 = @"7.1.6 (L R Rls Rrs Ls Rs C LFE Vhl Vhr Ltm Rtm Ltr Rtr)";
            }
            else
            {
              if (mChannelLayoutTag != 13369368) {
                return v13;
              }
              CFStringRef v20 = @"22.2 (Lw Rw C LFE2 Rls Rrs L R Cs LFE3 Lss Rss Vhl Vhr Vhc Ts Ltr Rtr Ltm Rtm Ctr Cb Lb Rb)";
            }
          }
          else if (mChannelLayoutTag == 13172744)
          {
            CFStringRef v20 = @"7.1 (L R Ls Rs Rls Rrs C LFE)";
          }
          else
          {
            if (mChannelLayoutTag != 13238284) {
              return v13;
            }
            CFStringRef v20 = @"7.1.4 (L R Rls Rrs Ls Rs C LFE Vhl Vhr Ltr Rtr)";
          }
        }
        else if (mChannelLayoutTag > 13041670)
        {
          if (mChannelLayoutTag == 13041671)
          {
            CFStringRef v20 = @"6.1 (L R Ls Rs Cs C LFE)";
          }
          else
          {
            if (mChannelLayoutTag != 13107207) {
              return v13;
            }
            CFStringRef v20 = @"6.1 (L C R Ls Cs Rs LFE)";
          }
        }
        else if (mChannelLayoutTag == 12910596)
        {
          CFStringRef v20 = @"4.0 (L R Cs C)";
        }
        else
        {
          if (mChannelLayoutTag != 12976134) {
            return v13;
          }
          CFStringRef v20 = @"6.0 (L R Ls Rs Cs C)";
        }
      }
      uint64_t v13 = 0;
      *a2 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v20, @"AudioChannelLayouts", v7, a4);
      return v13;
    }
  }
  else if (mChannelLayoutTag)
  {
    goto LABEL_3;
  }
  if (a1->mNumberChannelDescriptions == 1)
  {
    AudioChannelLabel v12 = a1->mChannelDescriptions[0].mChannelLabel;
    *(void *)&v21.mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 0;
    *(void *)&v21.int8x8_t mChannelBitmap = 0;
    v21.signed int mChannelLayoutTag = v12;
    p_AudioChannelLabel mChannelLabel = &v21;
    return AudioFormatProperty_ChannelName((AudioChannelDescription *)p_mChannelLabel, a2, a3, a4);
  }
  if (!AudioFormatProperty_TagForChannelLayout(a1, &v22))
  {
    signed int mChannelLayoutTag = v22;
    goto LABEL_18;
  }
  return AudioFormatProperty_ChannelLayoutNameFromDescriptions(a1, a2, 0);
}

void sub_18FF21EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_FormatInfo(uint64_t a1, const void *a2, AudioStreamBasicDescription *a3)
{
  uint64_t mFormatID = a3->mFormatID;
  if ((int)mFormatID > 1819304812)
  {
    if (mFormatID == 1970037111)
    {
      uint64_t Property = 0;
      a3->UInt32 mBitsPerChannel = 8;
      UInt32 mChannelsPerFrame = a3->mChannelsPerFrame;
      a3->mFramesPerPacket = 1;
      a3->int mBytesPerFrame = mChannelsPerFrame;
      a3->UInt32 mBytesPerPacket = mChannelsPerFrame;
      uint64_t v8 = 1970037111;
      goto LABEL_30;
    }
    if (mFormatID != 1819304813) {
      goto LABEL_14;
    }
    a3->mFramesPerPacket = 1;
    UInt32 mBitsPerChannel = a3->mBitsPerChannel;
    if (!mBitsPerChannel) {
      return 0;
    }
    UInt32 v10 = a3->mChannelsPerFrame;
    if (!v10) {
      return 0;
    }
    AudioFormatFlags mFormatFlags = a3->mFormatFlags;
    if ((mFormatFlags & 8) != 0)
    {
      if ((mBitsPerChannel & 7) != 0) {
        return 1718449215;
      }
      uint64_t Property = 0;
      UInt32 v27 = mBitsPerChannel >> 3;
      if ((mFormatFlags & 0x20) != 0) {
        UInt32 v10 = 1;
      }
      int mBytesPerFrame = v27 * v10;
      a3->int mBytesPerFrame = mBytesPerFrame;
    }
    else
    {
      int mBytesPerFrame = a3->mBytesPerFrame;
      UInt32 mBytesPerPacket = a3->mBytesPerPacket;
      if (!mBytesPerFrame)
      {
        uint64_t Property = 0;
        a3->int mBytesPerFrame = mBytesPerPacket;
        return Property;
      }
      if (mBytesPerPacket)
      {
        if (mBytesPerFrame == mBytesPerPacket) {
          return 0;
        }
        return 1718449215;
      }
      uint64_t Property = 0;
    }
    a3->UInt32 mBytesPerPacket = mBytesPerFrame;
    return Property;
  }
  if (mFormatID == 1634492791)
  {
    uint64_t Property = 0;
    a3->UInt32 mBitsPerChannel = 8;
    UInt32 v21 = a3->mChannelsPerFrame;
    a3->mFramesPerPacket = 1;
    a3->int mBytesPerFrame = v21;
    a3->UInt32 mBytesPerPacket = v21;
    uint64_t v8 = 1634492791;
    goto LABEL_30;
  }
  if (mFormatID == 1768775988)
  {
    uint64_t Property = 0;
    a3->UInt32 mBitsPerChannel = 0;
    *(void *)&a3->mFramesPerPacket = 64;
    a3->UInt32 mBytesPerPacket = 34 * a3->mChannelsPerFrame;
    uint64_t v8 = 1768775988;
LABEL_30:
    *(void *)&a3->uint64_t mFormatID = v8;
    return Property;
  }
LABEL_14:
  int v37 = 1969977198;
  OSType v14 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(mFormatID, &v37);
  inCodec[0] = 0;
  if (OpenCodecComponent(v14, inCodec, 0x61646563u))
  {
    if (OpenCodecComponent(v14, inCodec, 0x61656E63u))
    {
      int8x8_t v15 = (RegistryAccess *)OpenCodecComponent(v14, inCodec, 0x61636463u);
      if (v15) {
        goto LABEL_19;
      }
    }
  }
  *(AudioCodec *)Float64 v36 = inCodec[0];
  UInt32 outSize = 0;
  Boolean outWritable = 0;
  if (AudioCodecGetPropertyInfo(inCodec[0], 0x61636669u, &outSize, &outWritable))
  {
    AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)v36);
LABEL_19:
    if (!a1 || !a2) {
      goto LABEL_49;
    }
    long long v16 = *(_OWORD *)&a3->mBytesPerPacket;
    *(_OWORD *)&outPropertyData.mASBD.Float64 mSampleRate = *(_OWORD *)&a3->mSampleRate;
    *(_OWORD *)&outPropertyData.mASBD.UInt32 mBytesPerPacket = v16;
    uint64_t v17 = *(void *)&a3->mBitsPerChannel;
    outPropertyData.mASBD.uint64_t mFormatID = v14;
    *(void *)&outPropertyData.mASBD.UInt32 mBitsPerChannel = v17;
    outPropertyData.mMagicCookie = a2;
    outPropertyData.UInt32 mMagicCookieSize = a1;
    v36[0] = 0;
    uint64_t Property = AudioFormatProperty_FormatListSize(&outPropertyData, 0x38u, v36);
    if (!Property)
    {
      uint64_t Property = 2003329396;
      if (v36[0] >= 0x30)
      {
        std::vector<unsigned char>::vector(inCodec, v36[0]);
        AudioCodec v18 = inCodec[0];
        uint64_t v19 = AudioFormatProperty_FormatList(&outPropertyData, 0x38u, v36, (AudioFormatListItem *)inCodec[0]);
        uint64_t Property = v19;
        if (v19 == -9405 || v19 == 2003332927)
        {
          char v20 = 1;
        }
        else if (v19)
        {
          char v20 = 0;
        }
        else if (v36[0] >= 0x30)
        {
          int8x8_t v29 = (char *)v18 + 48 * (v36[0] / 0x30);
          long long v30 = *((_OWORD *)v29 - 3);
          long long v31 = *((_OWORD *)v29 - 2);
          *(void *)&a3->UInt32 mBitsPerChannel = *((void *)v29 - 2);
          *(_OWORD *)&a3->Float64 mSampleRate = v30;
          *(_OWORD *)&a3->UInt32 mBytesPerPacket = v31;
          char v20 = 0;
          uint64_t Property = 0;
          if (v37 != 1969977198) {
            a3->uint64_t mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(a3->mFormatID, v37);
          }
        }
        else
        {
          char v20 = 0;
          uint64_t Property = 2003329396;
        }
        int8x8_t v15 = inCodec[0];
        if (inCodec[0])
        {
          inCodec[1] = inCodec[0];
          operator delete(inCodec[0]);
        }
        if (v20)
        {
LABEL_49:
          RegistryAccess::instance(v15);
          uint64_t v28 = qword_1EB3D4FB0;
          os_unfair_recursive_lock_lock_with_options();
          uint64_t Property = (*(uint64_t (**)(uint64_t, uint64_t, const void *, AudioStreamBasicDescription *))(*(void *)v28 + 88))(v28, a1, a2, a3);
          os_unfair_recursive_lock_unlock();
        }
      }
    }
    return Property;
  }
  long long v24 = *(_OWORD *)&a3->mBytesPerPacket;
  *(_OWORD *)&outPropertyData.mASBD.Float64 mSampleRate = *(_OWORD *)&a3->mSampleRate;
  *(_OWORD *)&outPropertyData.mASBD.UInt32 mBytesPerPacket = v24;
  uint64_t v25 = *(void *)&a3->mBitsPerChannel;
  outPropertyData.mASBD.uint64_t mFormatID = v14;
  *(void *)&outPropertyData.mASBD.UInt32 mBitsPerChannel = v25;
  outPropertyData.mMagicCookie = a2;
  outPropertyData.UInt32 mMagicCookieSize = a1;
  UInt32 outSize = 56;
  uint64_t Property = AudioCodecGetProperty(*(AudioCodec *)v36, 0x61636669u, &outSize, &outPropertyData);
  if (!Property)
  {
    long long v26 = *(_OWORD *)&outPropertyData.mASBD.mBytesPerPacket;
    *(_OWORD *)&a3->Float64 mSampleRate = *(_OWORD *)&outPropertyData.mASBD.mSampleRate;
    *(_OWORD *)&a3->UInt32 mBytesPerPacket = v26;
    *(void *)&a3->UInt32 mBitsPerChannel = *(void *)&outPropertyData.mASBD.mBitsPerChannel;
    if (v37 != 1969977198) {
      a3->uint64_t mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(a3->mFormatID, v37);
    }
  }
  AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)v36);
  return Property;
}

void sub_18FF22320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool_AP::AudioMetadataMemoryPool_AP(AudioMetadataMemoryPool_AP *this)
{
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = (char *)this + 16;
  AudioCodec v18 = (char *)this + 16;
  OSType v14 = (char *)operator new(0x8000uLL);
  int8x8_t v15 = v14;
  long long v16 = v14;
  uint64_t v17 = v14 + 0x8000;
  std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(this, &v14);
  std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v14);
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = v4 - *(void *)this;
  if ((unint64_t)v5 >> 15)
  {
    if (v5 != 0x8000)
    {
      uint64_t v12 = v3 + 0x8000;
      while (v4 != v12)
      {
        uint64_t v13 = *(std::__shared_weak_count **)(v4 - 8);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        v4 -= 16;
      }
      *((void *)this + 1) = v12;
    }
  }
  else
  {
    unint64_t v6 = 2048 - (v5 >> 4);
    if (v6 <= (*(void *)v2 - v4) >> 4)
    {
      bzero(*((void **)this + 1), 16 * v6);
      *((void *)this + 1) = v4 + 16 * v6;
    }
    else
    {
      uint64_t v7 = *(void *)v2 - v3;
      uint64_t v8 = v7 >> 3;
      if ((unint64_t)(v7 >> 3) <= 0x800) {
        uint64_t v8 = 2048;
      }
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      AudioCodec v18 = v2;
      if (v9 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      UInt32 v10 = (char *)operator new(16 * v9);
      __int16 v11 = &v10[16 * (v5 >> 4)];
      OSType v14 = v10;
      int8x8_t v15 = v11;
      uint64_t v17 = &v10[16 * v9];
      bzero(v11, 16 * v6);
      long long v16 = &v11[16 * v6];
      std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(this, &v14);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v14);
    }
  }
}

void sub_18FF224D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = v9 + 3;
  std::vector<std::pair<BOOL,std::shared_ptr<unsigned char []>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = v9;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    void *v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t AudioFileGetLoudnessInfoFromSoundCheckDictionary(AudioFileObject *a1, CACFDictionary *a2)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v7 = 257;
  uint64_t v4 = (*(uint64_t (**)(AudioFileObject *, CFDictionaryRef *))(*(void *)a1 + 456))(a1, &Mutable);
  if (!v4) {
    AudioFileGetLoudnessInfoFromSoundCheckDictionary(&Mutable, a2);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v4;
}

void sub_18FF22608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

uint64_t AudioFileObject::GetSoundCheckDictionary(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

void DSPGraph::Interpreter::compileFile(DSPGraph::Interpreter *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X2>, long long **a4@<X3>, void *a5@<X8>)
{
  v23[20] = *MEMORY[0x1E4F143B8];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  memset(&v17, 0, sizeof(v17));
  UInt32 v10 = (std::string *)((char *)a2 - 1);
  do
  {
    int v11 = v10->__r_.__value_.__s.__data_[1];
    UInt32 v10 = (std::string *)((char *)v10 + 1);
  }
  while (v11);
  std::string::append[abi:ne180100]<char const*,0>(&v17.__pn_, a2, v10);
  std::__fs::filesystem::__status(&v17, &__ec);
  if (buf[0] != 1 || __ec.__val_ != 0)
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8764);
    }
    uint64_t v13 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_error_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, "cannot find file \"%s\"", buf, 0xCu);
    }
LABEL_22:
    *a5 = 0;
    goto LABEL_23;
  }
  std::ifstream::basic_ifstream((uint64_t *)buf);
  uint64_t v14 = v22;
  if (v22)
  {
    std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, *(void **)&v21[*(void *)(*(void *)buf - 24) + 24], 0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    DSPGraph::Interpreter::compileText(a1, (char *)p_p, a3, a4, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8764);
    }
    long long v16 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_error_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_ERROR, "cannot open file \"%s\"", (uint8_t *)&__p, 0xCu);
    }
  }
  *(void *)long long buf = *MEMORY[0x1E4FBA3F8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FC84E0](v21);
  std::istream::~istream();
  MEMORY[0x192FC8840](v23);
  if (!v14) {
    goto LABEL_22;
  }
LABEL_23:
  if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_18FF22960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a25);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x192FC84D0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x192FC84D0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_18FF22B40(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x192FC8840](v1);
  _Unwind_Resume(a1);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, std::string *a2, std::string *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = (char *)a3 - (char *)a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    UInt32 v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    UInt32 v10 = this;
  }
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    uint64_t v13 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    uint64_t v14 = (char *)v13 + size;
    do
    {
      std::string::value_type v15 = v4->__r_.__value_.__s.__data_[0];
      uint64_t v4 = (std::string *)((char *)v4 + 1);
      *v14++ = v15;
    }
    while (v4 != a3);
    *uint64_t v14 = 0;
    std::string::size_type v16 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v16;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    }
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v7 > 0x16)
    {
      uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v17 = v7 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string::value_type *)operator new(v17 + 1);
      std::string::size_type v24 = v7;
      int64_t v25 = v18 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v25) = v7;
      p_p = (std::string::value_type *)&__p;
    }
    do
    {
      std::string::value_type v19 = v4->__r_.__value_.__s.__data_[0];
      uint64_t v4 = (std::string *)((char *)v4 + 1);
      *p_p++ = v19;
    }
    while (v4 != a3);
    std::string::value_type *p_p = 0;
    if (v25 >= 0) {
      char v20 = (const std::string::value_type *)&__p;
    }
    else {
      char v20 = (const std::string::value_type *)__p;
    }
    if (v25 >= 0) {
      std::string::size_type v21 = HIBYTE(v25);
    }
    else {
      std::string::size_type v21 = v24;
    }
    std::string::append(this, v20, v21);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
  }
  return this;
}

void sub_18FF22D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *this, void *a2, void *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (!a2)
  {
    BOOL v6 = 1;
    if (!a3) {
      goto LABEL_17;
    }
LABEL_11:
    if (a3[3] == a3[4])
    {
      if ((*(unsigned int (**)(void *))(*a3 + 72))(a3) == -1) {
        goto LABEL_17;
      }
      if (!v6) {
        return;
      }
    }
    else if (!v6)
    {
      return;
    }
LABEL_19:
    uint64_t v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(this, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  if (a2[3] != a2[4])
  {
    BOOL v6 = 0;
    if (!a3) {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  int v7 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
  BOOL v6 = v7 == -1;
  if (v7 == -1) {
    a2 = 0;
  }
  if (a3) {
    goto LABEL_11;
  }
LABEL_17:
  if (!v6)
  {
    a3 = 0;
    goto LABEL_19;
  }
}

void sub_18FF22EB0(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_18FF22ECC(_Unwind_Exception *a1)
{
}

void ___ZL12setupLoggingv_block_invoke()
{
}

void sub_18FF22F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

OSStatus AudioOutputUnitStart(AudioUnit ci)
{
  if (!ci) {
    return -50;
  }
  uint64_t v1 = (uint64_t (***)(void))(*(uint64_t (**)(AudioUnit))(*(void *)ci + 8))(ci);
  if (!v1) {
    return 560947818;
  }
  uint64_t v2 = v1;
  if (*(_WORD *)((**v1)(v1) + 38) != 24949) {
    return -3000;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)((**v2)(v2) + 112) + 144);
  if (!v3) {
    return -4;
  }
  uint64_t v4 = v2[3];
  return v3(v4);
}

BOOL writeCommandToReserved(int a1, uint64_t a2, char *__src)
{
  unsigned int v5 = *(unsigned __int16 *)__src;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= v5) {
    size_t v7 = *(unsigned __int16 *)__src;
  }
  else {
    size_t v7 = v6;
  }
  if (v7)
  {
    memcpy(*(void **)a2, __src, v7);
    v5 -= v7;
    *(_DWORD *)(a2 + 8) -= v7;
    *(void *)a2 += v7;
  }
  if (!v5) {
    return 1;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  if (v5 >= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = v5;
  }
  if (!v9) {
    return 0;
  }
  memcpy(*(void **)(a2 + 16), &__src[v7], v9);
  *(_DWORD *)(a2 + 24) -= v9;
  *(void *)(a2 + 16) += v9;
  return v5 <= v8;
}

void XPCListener::accept_connection(XPCListener *this, void **a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  AudioConverterLog();
  uint64_t v4 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 3);
    std::recursive_mutex::lock((std::recursive_mutex *)(v5 + 56));
    uint64_t v6 = (*(void *)(v5 + 128) - *(void *)(v5 + 120)) >> 3;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v5 + 56));
    *(_DWORD *)long long buf = 136315906;
    uint64_t v22 = "AudioConverterService.cpp";
    __int16 v23 = 1024;
    int v24 = 251;
    __int16 v25 = 2048;
    uint64_t v26 = v5;
    __int16 v27 = 1024;
    int v28 = v6 + 1;
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverterService -> %p:  New connection, number of converters: %u", buf, 0x22u);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  size_t v7 = *a2;
  xpc_object_t v16 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v16 = xpc_null_create();
  }
  unsigned int v8 = (dispatch_object_t *)*((void *)this + 3);
  size_t v9 = *v8;
  if (*v8) {
    dispatch_retain(*v8);
  }
  dispatch_object_t object = v9;
  AudioConverterLog();
  uint64_t v18 = AudioConverterLog(void)::gLog;
  __int16 v19 = 0;
  std::__optional_copy_base<swix::timeout_config,false>::__optional_copy_base[abi:ne180100](v20, *((void *)this + 1) + 96);
  uint64_t v10 = *((void *)this + 3);
  std::recursive_mutex::lock((std::recursive_mutex *)(v10 + 56));
  if (*(void *)(v10 + 128) - *(void *)(v10 + 120) >= 0xF99uLL)
  {
    AudioConverterLog();
    unint64_t v11 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(v10 + 56));
      uint64_t v12 = (*(void *)(v10 + 128) - *(void *)(v10 + 120)) >> 3;
      std::recursive_mutex::unlock((std::recursive_mutex *)(v10 + 56));
      *(_DWORD *)long long buf = 136316162;
      uint64_t v22 = "AudioConverterService.cpp";
      __int16 v23 = 1024;
      int v24 = 165;
      __int16 v25 = 2048;
      uint64_t v26 = v10;
      __int16 v27 = 1024;
      int v28 = 500;
      __int16 v29 = 1024;
      int v30 = v12;
      _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService -> %p: The service only supports upto %u converters. Current Number of out-of-process converters: %u Returning kAudio_MemFullError.", buf, 0x28u);
    }
  }
  if (*(void *)(v10 + 128) == *(void *)(v10 + 120)) {
    XOSTransactor::beginTransaction((XOSTransactor *)(v10 + 168));
  }
  operator new();
}

void sub_18FF23678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,dispatch_object_t object,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::recursive_mutex::unlock(v38);
  swix::connection_config::~connection_config((swix::connection_config *)&a11);
  _Unwind_Resume(a1);
}

void std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_1EDFA0960;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v3 + 1), v2);
  v3[5] = *(void *)(a1 + 40);
  return v3;
}

void sub_18FF2393C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1},std::allocator<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDF8B468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void remoteAudioConverterClient(uint64_t a1, void **a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  inactive = dispatch_workloop_create_inactive("ACClient");
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  uint64_t v4 = *a2;
  xpc_object_t v8 = v4;
  if (v4)
  {
    xpc_retain(v4);
    if (!inactive) {
      goto LABEL_4;
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    if (!inactive)
    {
LABEL_4:
      dispatch_object_t object = inactive;
      uint64_t v10 = 0;
      __int16 v11 = 0;
      char v12 = 0;
      char v13 = 0;
      dispatch_release(inactive);
      operator new();
    }
  }
  dispatch_retain(inactive);
  goto LABEL_4;
}

void sub_18FF23BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<swix::connection_config,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(unsigned char *)(a1 + 120)) {
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 88));
    }
    uint64_t v2 = *(NSObject **)(a1 + 56);
    if (v2) {
      dispatch_release(v2);
    }
    xpc_release(*(xpc_object_t *)(a1 + 48));
    *(void *)(a1 + 48) = 0;
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t AudioFormatProperty_ChannelLayoutForTag(signed int a1, AudioChannelLayout *a2)
{
  if (a1 == 0x10000) {
    return 1718449215;
  }
  uint64_t v80 = v2;
  uint64_t v81 = v3;
  a2->signed int mChannelLayoutTag = a1;
  a2->int8x8_t mChannelBitmap = 0;
  v79.int8x8_t mChannelBitmap = 0;
  v79.mNumberChannelDescriptions = 0;
  unsigned int v78 = 0;
  v79.signed int mChannelLayoutTag = a1;
  AudioFormatProperty_NumberOfChannelsForLayout(&v79, &v78);
  uint64_t v7 = v78;
  a2->mNumberChannelDescriptions = v78;
  mChannelDescriptions = a2->mChannelDescriptions;
  bzero(a2->mChannelDescriptions, 20 * v7);
  if (a1 == -266338299)
  {
    uint64_t result = 0;
    a2->signed int mChannelLayoutTag = 0;
    a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 0x20000;
    a2[1].signed int mChannelLayoutTag = 131073;
    LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 131074;
    a2[2].mNumberChannelDescriptions = 131075;
    LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
    return result;
  }
  if (a1 == -267386874)
  {
    uint64_t result = 0;
    a2->signed int mChannelLayoutTag = 0;
    a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 208;
    a2[1].signed int mChannelLayoutTag = 209;
    LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 0x20000;
    a2[2].mNumberChannelDescriptions = 131073;
    LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 131074;
    a2[3].mChannelDescriptions[0].mChannelFlags = 131075;
    return result;
  }
  unsigned int v9 = a1 & 0xFFFF0000;
  if ((int)(a1 & 0xFFFF0000) >= 12451840)
  {
    if (v9 != 12451840 && v9 != 12517376) {
      goto LABEL_28;
    }
    uint64_t result = 560360820;
    BOOL v11 = v9 == 12451840;
    int v12 = 196608;
    if (v11) {
      int v12 = 0x20000;
    }
    if (v7 <= 0xFE01)
    {
      double v13 = sqrt((double)v7) + 0.5;
      if (v13 * v13 == v7)
      {
        if (!v7) {
          return 0;
        }
        uint64_t result = 0;
        do
        {
          mChannelDescriptions->AudioChannelLabel mChannelLabel = v12;
          ++mChannelDescriptions;
          ++v12;
          --v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    if (v9 != -268369920)
    {
      if (v9 == 9633792)
      {
        if (v7)
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            uint64_t result = 0;
            mChannelDescriptions->AudioChannelLabel mChannelLabel = i | 0x10000;
            ++mChannelDescriptions;
          }
          return result;
        }
        return 0;
      }
LABEL_28:
      uint64_t result = 560360820;
      if (a1 > 10420230)
      {
        if (a1 > 12320774)
        {
          if (a1 <= 13434887)
          {
            if (a1 > 12910595)
            {
              if (a1 <= 13172743)
              {
                if (a1 <= 13041670)
                {
                  if (a1 != 12910596)
                  {
                    if (a1 != 12976134) {
                      return result;
                    }
                    a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                    a2[1].signed int mChannelLayoutTag = 2;
                    LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                    a2[2].mNumberChannelDescriptions = 6;
                    LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 9;
                    AudioChannelFlags v15 = 3;
                    goto LABEL_361;
                  }
                  a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                  a2[1].signed int mChannelLayoutTag = 2;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 9;
                  UInt32 v33 = 3;
                  goto LABEL_338;
                }
                if (a1 == 13041671)
                {
                  a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                  a2[1].signed int mChannelLayoutTag = 2;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                  a2[2].mNumberChannelDescriptions = 6;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 9;
                  AudioChannelFlags v37 = 3;
                  goto LABEL_376;
                }
                if (a1 != 13107207) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 3;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 5;
                int v44 = 9;
LABEL_306:
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v44;
                AudioChannelFlags v37 = 6;
LABEL_376:
                a2[3].mChannelDescriptions[0].mChannelFlags = v37;
                AudioChannelBitmap v25 = 4;
                goto LABEL_377;
              }
              if (a1 <= 13303821)
              {
                if (a1 != 13172744)
                {
                  if (a1 != 13238284) {
                    return result;
                  }
                  a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                  a2[1].signed int mChannelLayoutTag = 2;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
                  a2[2].mNumberChannelDescriptions = 34;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                  a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                  a2[4].int8x8_t mChannelBitmap = 3;
                  int v31 = 4;
                  goto LABEL_350;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                a2[2].mNumberChannelDescriptions = 6;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
                AudioChannelFlags v56 = 34;
                goto LABEL_283;
              }
              if (a1 != 13303822)
              {
                if (a1 != 13369368) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 35;
                a2[1].signed int mChannelLayoutTag = 36;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 37;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
                a2[3].mChannelDescriptions[0].mChannelFlags = 34;
                a2[4].int8x8_t mChannelBitmap = 1;
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 2;
                a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 9;
                a2[6].signed int mChannelLayoutTag = 62;
                LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 55;
                a2[7].mNumberChannelDescriptions = 56;
                LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 13;
                a2[8].mChannelDescriptions[0].mChannelFlags = 15;
                a2[9].int8x8_t mChannelBitmap = 14;
                LODWORD(a2[9].mChannelDescriptions[0].mCoordinates[1]) = 12;
                a2[10].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 52;
                a2[11].signed int mChannelLayoutTag = 54;
                LODWORD(a2[11].mChannelDescriptions[0].mCoordinates[0]) = 49;
                a2[12].mNumberChannelDescriptions = 51;
                LODWORD(a2[12].mChannelDescriptions[0].mCoordinates[2]) = 53;
                a2[13].mChannelDescriptions[0].mChannelFlags = 59;
                a2[14].int8x8_t mChannelBitmap = 57;
                LODWORD(a2[14].mChannelDescriptions[0].mCoordinates[1]) = 58;
                goto LABEL_378;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
              a2[2].mNumberChannelDescriptions = 34;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              a2[3].mChannelDescriptions[0].mChannelFlags = 6;
              a2[4].int8x8_t mChannelBitmap = 3;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 4;
              a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 13;
              a2[6].signed int mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 49;
              a2[7].mNumberChannelDescriptions = 51;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 52;
              AudioChannelFlags v26 = 54;
LABEL_363:
              a2[8].mChannelDescriptions[0].mChannelFlags = v26;
              goto LABEL_378;
            }
            if (a1 > 12648463)
            {
              if (a1 <= 12779529)
              {
                if (a1 != 12648464)
                {
                  if (a1 != 12713992) {
                    return result;
                  }
                  a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                  a2[1].signed int mChannelLayoutTag = 2;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                  a2[2].mNumberChannelDescriptions = 4;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                  a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                  a2[4].int8x8_t mChannelBitmap = 49;
                  int v21 = 51;
                  goto LABEL_367;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                a2[4].int8x8_t mChannelBitmap = 33;
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 34;
                a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 35;
                a2[6].signed int mChannelLayoutTag = 36;
                LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 13;
                a2[7].mNumberChannelDescriptions = 15;
                LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 49;
                a2[8].mChannelDescriptions[0].mChannelFlags = 51;
                a2[9].int8x8_t mChannelBitmap = 52;
                int v38 = 54;
                goto LABEL_270;
              }
              if (a1 == 12779530)
              {
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                a2[4].int8x8_t mChannelBitmap = 13;
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 15;
                a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 52;
                AudioChannelLayoutTag v39 = 54;
              }
              else
              {
                if (a1 != 12845066) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                a2[4].int8x8_t mChannelBitmap = 33;
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 34;
                a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 49;
                AudioChannelLayoutTag v39 = 51;
              }
LABEL_340:
              a2[6].signed int mChannelLayoutTag = v39;
              goto LABEL_378;
            }
            if (a1 != 12320775)
            {
              if (a1 != 12386312)
              {
                if (a1 != 12582924) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                a2[4].int8x8_t mChannelBitmap = 33;
                int v31 = 34;
                goto LABEL_350;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
              a2[3].mChannelDescriptions[0].mChannelFlags = 34;
              AudioChannelBitmap v51 = 5;
              goto LABEL_300;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            a2[2].mNumberChannelDescriptions = 4;
            int v59 = 9;
            goto LABEL_298;
          }
          if (a1 > 13893636)
          {
            if (a1 <= 14155780)
            {
              if (a1 <= 14024710)
              {
                if (a1 != 13893637)
                {
                  if (a1 != 13959174) {
                    return result;
                  }
                  a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                  a2[1].signed int mChannelLayoutTag = 3;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                  a2[2].mNumberChannelDescriptions = 33;
                  int v19 = 34;
                  goto LABEL_326;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 3;
                int v58 = 2;
                goto LABEL_369;
              }
              if (a1 != 14024711)
              {
                if (a1 != 14090248) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                AudioChannelLayoutTag v46 = 3;
                goto LABEL_208;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              AudioChannelLayoutTag v54 = 3;
              goto LABEL_331;
            }
            if (a1 > 14286854)
            {
              if (a1 != 14286855)
              {
                if (a1 != 14352392) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
                a2[2].mNumberChannelDescriptions = 34;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                AudioChannelFlags v56 = 6;
LABEL_283:
                a2[3].mChannelDescriptions[0].mChannelFlags = v56;
                AudioChannelBitmap v48 = 3;
                goto LABEL_366;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              a2[2].mNumberChannelDescriptions = 6;
              int v74 = 3;
LABEL_375:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v74;
              AudioChannelFlags v37 = 9;
              goto LABEL_376;
            }
            if (a1 != 14155781)
            {
              if (a1 != 14221318) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
              UInt32 v16 = 34;
              goto LABEL_145;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
            UInt32 v23 = 34;
            goto LABEL_288;
          }
          if (a1 > 13631499)
          {
            if (a1 > 13762571)
            {
              if (a1 == 13762572)
              {
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
                a2[3].mChannelDescriptions[0].mChannelFlags = 34;
                a2[4].int8x8_t mChannelBitmap = 55;
                int v31 = 56;
LABEL_350:
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = v31;
                a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 13;
                a2[6].signed int mChannelLayoutTag = 15;
                LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 52;
                UInt32 v60 = 54;
                goto LABEL_351;
              }
              if (a1 != 13828110) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
              a2[3].mChannelDescriptions[0].mChannelFlags = 34;
              a2[4].int8x8_t mChannelBitmap = 55;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 56;
              a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 13;
              a2[6].signed int mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 52;
              a2[7].mNumberChannelDescriptions = 54;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 65;
              AudioChannelFlags v26 = 66;
              goto LABEL_363;
            }
            if (a1 != 13631500)
            {
              if (a1 != 13697038) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              a2[3].mChannelDescriptions[0].mChannelFlags = 6;
              a2[4].int8x8_t mChannelBitmap = 63;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 64;
              a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 13;
              a2[6].signed int mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 14;
              a2[7].mNumberChannelDescriptions = 60;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 61;
              AudioChannelFlags v26 = 12;
              goto LABEL_363;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            a2[2].mNumberChannelDescriptions = 4;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
            a2[3].mChannelDescriptions[0].mChannelFlags = 6;
            a2[4].int8x8_t mChannelBitmap = 13;
            LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 15;
            a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 14;
            a2[6].signed int mChannelLayoutTag = 60;
            LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 61;
            UInt32 v60 = 12;
            goto LABEL_351;
          }
          if (a1 != 13434888)
          {
            if (a1 != 13500428)
            {
              if (a1 != 13565962) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              a2[3].mChannelDescriptions[0].mChannelFlags = 6;
              a2[4].int8x8_t mChannelBitmap = 13;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 15;
              a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 60;
              AudioChannelLayoutTag v39 = 61;
              goto LABEL_340;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            a2[2].mNumberChannelDescriptions = 37;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
            a2[3].mChannelDescriptions[0].mChannelFlags = 34;
            a2[4].int8x8_t mChannelBitmap = 62;
            LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 55;
            a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 56;
            a2[6].signed int mChannelLayoutTag = 13;
            LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 15;
            UInt32 v60 = 53;
LABEL_351:
            a2[7].mNumberChannelDescriptions = v60;
            goto LABEL_378;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
          a2[1].signed int mChannelLayoutTag = 2;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
          a2[2].mNumberChannelDescriptions = 4;
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
          AudioChannelFlags v69 = 6;
LABEL_335:
          a2[3].mChannelDescriptions[0].mChannelFlags = v69;
          a2[4].int8x8_t mChannelBitmap = 13;
          int v21 = 15;
          goto LABEL_367;
        }
        if (a1 > 11337734)
        {
          if (a1 > 11796488)
          {
            if (a1 <= 12058631)
            {
              if (a1 <= 11927558)
              {
                if (a1 == 11796489)
                {
                  a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
                  a2[1].signed int mChannelLayoutTag = 8;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
                  a2[2].mNumberChannelDescriptions = 2;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                  a2[3].mChannelDescriptions[0].mChannelFlags = 6;
                  a2[4].int8x8_t mChannelBitmap = 33;
                  int v17 = 34;
                }
                else
                {
                  if (a1 != 11862025) {
                    return result;
                  }
                  a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
                  a2[1].signed int mChannelLayoutTag = 3;
                  LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 8;
                  a2[2].mNumberChannelDescriptions = 1;
                  LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 2;
                  a2[3].mChannelDescriptions[0].mChannelFlags = 5;
                  a2[4].int8x8_t mChannelBitmap = 9;
                  int v17 = 6;
                }
                LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = v17;
                a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 4;
                goto LABEL_378;
              }
              if (a1 != 11927559)
              {
                if (a1 != 11993096) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
                AudioChannelLayoutTag v46 = 1;
LABEL_208:
                a2[1].signed int mChannelLayoutTag = v46;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 5;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
                a2[3].mChannelDescriptions[0].mChannelFlags = 33;
                AudioChannelBitmap v48 = 34;
LABEL_366:
                a2[4].int8x8_t mChannelBitmap = v48;
                int v21 = 4;
                goto LABEL_367;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
              AudioChannelLayoutTag v73 = 1;
              goto LABEL_372;
            }
            if (a1 <= 12189700)
            {
              if (a1 != 12058632)
              {
                if (a1 != 12124164) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 33;
                UInt32 v33 = 34;
                goto LABEL_338;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
              AudioChannelLayoutTag v66 = 1;
LABEL_334:
              a2[1].signed int mChannelLayoutTag = v66;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              a2[2].mNumberChannelDescriptions = 5;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
              AudioChannelFlags v69 = 4;
              goto LABEL_335;
            }
            if (a1 == 12189701)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              int v58 = 3;
LABEL_369:
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v58;
              a2[2].mNumberChannelDescriptions = 33;
              int v63 = 34;
              goto LABEL_370;
            }
            if (a1 != 12255238) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            UInt32 v53 = 4;
            goto LABEL_251;
          }
          if (a1 <= 11534342)
          {
            if (a1 != 11337735)
            {
              if (a1 == 11403271)
              {
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
                a2[1].signed int mChannelLayoutTag = 1;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 33;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 34;
                AudioChannelFlags v37 = 12;
              }
              else
              {
                if (a1 != 11468807) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
                a2[1].signed int mChannelLayoutTag = 9;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
                a2[2].mNumberChannelDescriptions = 2;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
                AudioChannelFlags v37 = 34;
              }
              goto LABEL_376;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
            a2[1].signed int mChannelLayoutTag = 8;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
            a2[2].mNumberChannelDescriptions = 2;
            int v44 = 5;
            goto LABEL_306;
          }
          if (a1 <= 11665415)
          {
            if (a1 == 11534343)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
              a2[1].signed int mChannelLayoutTag = 3;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 8;
              a2[2].mNumberChannelDescriptions = 1;
              int v59 = 2;
LABEL_298:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v59;
              a2[3].mChannelDescriptions[0].mChannelFlags = 5;
              AudioChannelBitmap v25 = 6;
              goto LABEL_377;
            }
            if (a1 != 11599880) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
            AudioChannelLayoutTag v24 = 3;
LABEL_365:
            a2[1].signed int mChannelLayoutTag = v24;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 8;
            a2[2].mNumberChannelDescriptions = 1;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 2;
            a2[3].mChannelDescriptions[0].mChannelFlags = 5;
            AudioChannelBitmap v48 = 6;
            goto LABEL_366;
          }
          if (a1 != 11665416)
          {
            if (a1 != 11730952) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
            a2[1].signed int mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 8;
            a2[2].mNumberChannelDescriptions = 1;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 2;
            a2[3].mChannelDescriptions[0].mChannelFlags = 5;
            AudioChannelBitmap v51 = 9;
LABEL_300:
            a2[4].int8x8_t mChannelBitmap = v51;
            int v21 = 6;
            goto LABEL_367;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
          a2[1].signed int mChannelLayoutTag = 8;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
          UInt32 v55 = 2;
LABEL_345:
          a2[2].mNumberChannelDescriptions = v55;
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
          AudioChannelFlags v68 = 6;
          goto LABEL_346;
        }
        if (a1 <= 10878983)
        {
          if (a1 > 10616839)
          {
            if (a1 <= 10747911)
            {
              if (a1 == 10616840)
              {
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 3;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 5;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
                a2[3].mChannelDescriptions[0].mChannelFlags = 4;
                a2[4].int8x8_t mChannelBitmap = 10;
                int v21 = 11;
              }
              else
              {
                if (a1 != 10682376) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 3;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
                a2[2].mNumberChannelDescriptions = 5;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
                a2[3].mChannelDescriptions[0].mChannelFlags = 4;
                a2[4].int8x8_t mChannelBitmap = 35;
                int v21 = 36;
              }
              goto LABEL_367;
            }
            if (a1 != 10747912)
            {
              if (a1 != 10813448) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 3;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              a2[2].mNumberChannelDescriptions = 5;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
              a2[3].mChannelDescriptions[0].mChannelFlags = 4;
              a2[4].int8x8_t mChannelBitmap = 9;
              int v21 = 12;
              goto LABEL_367;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            AudioChannelLayoutTag v66 = 3;
            goto LABEL_334;
          }
          if (a1 == 10420231)
          {
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 4;
            AudioChannelBitmap v25 = 14;
LABEL_377:
            a2[4].int8x8_t mChannelBitmap = v25;
            goto LABEL_378;
          }
          if (a1 == 10485768)
          {
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            AudioChannelFlags v68 = 4;
LABEL_346:
            a2[3].mChannelDescriptions[0].mChannelFlags = v68;
            a2[4].int8x8_t mChannelBitmap = 33;
            int v21 = 34;
            goto LABEL_367;
          }
          if (a1 != 10551304) {
            return result;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
          a2[1].signed int mChannelLayoutTag = 3;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
          a2[2].mNumberChannelDescriptions = 5;
          int v35 = 6;
          goto LABEL_294;
        }
        if (a1 > 11075588)
        {
          if (a1 > 11206661)
          {
            if (a1 == 11206662)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
              a2[1].signed int mChannelLayoutTag = 1;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              a2[2].mNumberChannelDescriptions = 33;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 34;
              AudioChannelFlags v15 = 12;
              goto LABEL_361;
            }
            if (a1 != 11272198) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
            a2[1].signed int mChannelLayoutTag = 9;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
            UInt32 v53 = 2;
LABEL_251:
            a2[2].mNumberChannelDescriptions = v53;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
            AudioChannelFlags v15 = 34;
LABEL_361:
            a2[3].mChannelDescriptions[0].mChannelFlags = v15;
            goto LABEL_378;
          }
          if (a1 != 11075589)
          {
            if (a1 != 11141126) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
            a2[1].signed int mChannelLayoutTag = 8;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 1;
            UInt32 v29 = 2;
            goto LABEL_260;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
          AudioChannelLayoutTag v47 = 1;
          goto LABEL_279;
        }
        switch(a1)
        {
          case 10878984:
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 4;
            AudioChannelBitmap v72 = 9;
            break;
          case 10944520:
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 4;
            AudioChannelBitmap v72 = 12;
            break;
          case 11010052:
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
            AudioChannelLayoutTag v18 = 1;
            goto LABEL_188;
          default:
            return result;
        }
        a2[4].int8x8_t mChannelBitmap = v72;
        int v21 = 14;
        goto LABEL_367;
      }
      if (a1 <= 8454151)
      {
        if (a1 > 7471106)
        {
          if (a1 > 7929861)
          {
            if (a1 > 8192006)
            {
              if (a1 > 8323079)
              {
                if (a1 == 8323080)
                {
                  a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
                  AudioChannelLayoutTag v24 = 7;
                  goto LABEL_365;
                }
                if (a1 != 8388616) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                UInt32 v55 = 4;
                goto LABEL_345;
              }
              if (a1 == 8192007)
              {
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
                a2[2].mNumberChannelDescriptions = 4;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
                AudioChannelFlags v65 = 6;
LABEL_373:
                a2[3].mChannelDescriptions[0].mChannelFlags = v65;
                AudioChannelBitmap v25 = 9;
                goto LABEL_377;
              }
              if (a1 != 8257544) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              AudioChannelFlags v32 = 6;
              goto LABEL_295;
            }
            if (a1 > 8060933)
            {
              if (a1 == 8060934)
              {
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                AudioChannelLayoutTag v45 = 3;
              }
              else
              {
                if (a1 != 8126470) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
                AudioChannelLayoutTag v45 = 1;
              }
              a2[1].signed int mChannelLayoutTag = v45;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              a2[2].mNumberChannelDescriptions = 5;
              int v19 = 6;
              goto LABEL_326;
            }
            if (a1 != 7929862)
            {
              if (a1 != 7995398) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              UInt32 v16 = 6;
LABEL_145:
              a2[2].mNumberChannelDescriptions = v16;
              int v19 = 3;
LABEL_326:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v19;
              AudioChannelFlags v15 = 4;
              goto LABEL_361;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
            UInt32 v29 = 4;
LABEL_260:
            a2[2].mNumberChannelDescriptions = v29;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
            AudioChannelFlags v15 = 6;
            goto LABEL_361;
          }
          if (a1 > 7667716)
          {
            if (a1 > 7798788)
            {
              if (a1 == 7798789)
              {
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                AudioChannelLayoutTag v50 = 3;
              }
              else
              {
                if (a1 != 7864325) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
                AudioChannelLayoutTag v50 = 1;
              }
              a2[1].signed int mChannelLayoutTag = v50;
              int v49 = 2;
            }
            else
            {
              if (a1 != 7667717)
              {
                if (a1 != 7733253) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                UInt32 v23 = 6;
LABEL_288:
                a2[2].mNumberChannelDescriptions = v23;
                int v63 = 3;
                goto LABEL_370;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              int v49 = 3;
            }
LABEL_343:
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v49;
            a2[2].mNumberChannelDescriptions = 5;
            int v63 = 6;
            goto LABEL_370;
          }
          if (a1 != 7471107)
          {
            if (a1 == 7536644)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              int v57 = 3;
              goto LABEL_337;
            }
            if (a1 != 7602180) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
            AudioChannelLayoutTag v36 = 1;
            goto LABEL_264;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
          AudioChannelLayoutTag v52 = 1;
          goto LABEL_302;
        }
        if (a1 <= 7012355)
        {
          if (a1 <= 6750209)
          {
            switch(a1)
            {
              case 6553601:
                mChannelDescriptions->AudioChannelLabel mChannelLabel = 42;
                goto LABEL_378;
              case 6619138:
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                AudioChannelLayoutTag v20 = 2;
                break;
              case 6684674:
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 301;
                AudioChannelLayoutTag v20 = 302;
                break;
              default:
                return result;
            }
          }
          else if (a1 > 6881281)
          {
            if (a1 == 6881282)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 206;
              AudioChannelLayoutTag v20 = 207;
            }
            else
            {
              if (a1 != 6946818) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 208;
              AudioChannelLayoutTag v20 = 209;
            }
          }
          else if (a1 == 6750210)
          {
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 38;
            AudioChannelLayoutTag v20 = 39;
          }
          else
          {
            if (a1 != 6815746) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 204;
            AudioChannelLayoutTag v20 = 205;
          }
          goto LABEL_348;
        }
        if (a1 <= 7208965)
        {
          if (a1 != 7012356)
          {
            if (a1 == 7077892)
            {
              for (uint64_t j = 0; j != 80; j += 20)
              {
                UInt32 v71 = (char *)a2 + j;
                *((_DWORD *)v71 + 4) = 2;
                *((_DWORD *)v71 + 7) = 1065353216;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              a2[2].mNumberChannelDescriptions = 6;
              a2->mChannelDescriptions[0].mCoordinates[0] = -45.0;
              a2[1].mNumberChannelDescriptions = 1110704128;
              a2[1].mChannelDescriptions[0].mCoordinates[2] = -135.0;
              a2[2].mChannelDescriptions[0].mChannelFlags = 1124532224;
            }
            else
            {
              if (a1 != 7143429) {
                return result;
              }
              for (uint64_t k = 0; k != 100; k += 20)
              {
                uint64_t v41 = (char *)a2 + k;
                *((_DWORD *)v41 + 4) = 2;
                *((_DWORD *)v41 + 7) = 1065353216;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              a2[2].mNumberChannelDescriptions = 6;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
              a2->mChannelDescriptions[0].mCoordinates[0] = -72.0;
              a2[1].mNumberChannelDescriptions = 1116733440;
              a2[1].mChannelDescriptions[0].mCoordinates[2] = -144.0;
              a2[2].mChannelDescriptions[0].mChannelFlags = 1125122048;
              a2[3].int8x8_t mChannelBitmap = 0;
            }
            goto LABEL_378;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 200;
          a2[1].signed int mChannelLayoutTag = 201;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 202;
          UInt32 v33 = 203;
          goto LABEL_338;
        }
        if (a1 <= 7340039)
        {
          if (a1 == 7208966)
          {
            for (uint64_t m = 0; m != 120; m += 20)
            {
              uint64_t v62 = (char *)a2 + m;
              *((_DWORD *)v62 + 4) = 2;
              *((_DWORD *)v62 + 7) = 1065353216;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
            a2[2].mNumberChannelDescriptions = 6;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
            a2[3].mChannelDescriptions[0].mChannelFlags = 9;
            a2->mChannelDescriptions[0].mCoordinates[0] = -60.0;
            a2[1].mNumberChannelDescriptions = 1114636288;
            a2[1].mChannelDescriptions[0].mCoordinates[2] = -120.0;
            a2[2].mChannelDescriptions[0].mChannelFlags = 1123024896;
            a2[3].int8x8_t mChannelBitmap = 0;
            a2[3].mChannelDescriptions[0].mCoordinates[1] = 180.0;
          }
          else
          {
            if (a1 != 7274504) {
              return result;
            }
            for (uint64_t n = 0; n != 160; n += 20)
            {
              int v28 = (char *)a2 + n;
              *((_DWORD *)v28 + 4) = 2;
              *((_DWORD *)v28 + 7) = 1065353216;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
            a2[2].mNumberChannelDescriptions = 6;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
            a2[3].mChannelDescriptions[0].mChannelFlags = 9;
            a2[4].int8x8_t mChannelBitmap = 35;
            LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 36;
            a2->mChannelDescriptions[0].mCoordinates[0] = -45.0;
            a2[1].mNumberChannelDescriptions = 1110704128;
            a2[1].mChannelDescriptions[0].mCoordinates[2] = -135.0;
            a2[2].mChannelDescriptions[0].mChannelFlags = 1124532224;
            a2[3].int8x8_t mChannelBitmap = 0;
            a2[3].mChannelDescriptions[0].mCoordinates[1] = 180.0;
            a2[4].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = -1028390912;
            a2[5].signed int mChannelLayoutTag = 1119092736;
          }
          goto LABEL_378;
        }
        if (a1 == 7340040)
        {
          unint64_t v75 = 0;
          unsigned __int16 v76 = &a2->mChannelDescriptions[0].mCoordinates[2];
          do
          {
            *((_DWORD *)v76 - 3) = 2;
            *unsigned __int16 v76 = 1.0;
            float v77 = 45.0;
            if (v75 < 4) {
              float v77 = 0.0;
            }
            *(v76 - 1) = v77;
            ++v75;
            v76 += 5;
          }
          while (v75 != 8);
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
          a2[1].signed int mChannelLayoutTag = 2;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
          a2[2].mNumberChannelDescriptions = 6;
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 13;
          a2[3].mChannelDescriptions[0].mChannelFlags = 15;
          a2[4].int8x8_t mChannelBitmap = 52;
          LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 54;
          a2->mChannelDescriptions[0].mCoordinates[0] = -45.0;
          a2[1].mNumberChannelDescriptions = 1110704128;
          a2[1].mChannelDescriptions[0].mCoordinates[2] = -135.0;
          a2[2].mChannelDescriptions[0].mChannelFlags = 1124532224;
          a2[3].int8x8_t mChannelBitmap = -1036779520;
          a2[3].mChannelDescriptions[0].mCoordinates[1] = 45.0;
          a2[4].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = -1022951424;
          a2[5].signed int mChannelLayoutTag = 1124532224;
          goto LABEL_378;
        }
        if (a1 != 7405571) {
          return result;
        }
        a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
        a2[1].signed int mChannelLayoutTag = 2;
        int v22 = 3;
LABEL_303:
        LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v22;
        goto LABEL_378;
      }
      if (a1 <= 9371654)
      {
        if (a1 <= 8912899)
        {
          if (a1 <= 8650755)
          {
            if (a1 == 8454152)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              a2[2].mNumberChannelDescriptions = 6;
              int v35 = 3;
LABEL_294:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v35;
              AudioChannelFlags v32 = 4;
LABEL_295:
              a2[3].mChannelDescriptions[0].mChannelFlags = v32;
              a2[4].int8x8_t mChannelBitmap = 7;
              int v21 = 8;
              goto LABEL_367;
            }
            if (a1 == 8519688)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 5;
              a2[3].mChannelDescriptions[0].mChannelFlags = 6;
              a2[4].int8x8_t mChannelBitmap = 38;
              int v21 = 39;
              goto LABEL_367;
            }
            if (a1 != 8585219) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            int v22 = 9;
          }
          else
          {
            if (a1 > 8781827)
            {
              if (a1 != 8781828)
              {
                if (a1 != 8847365) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                int v49 = 4;
                goto LABEL_343;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              int v57 = 4;
LABEL_337:
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v57;
              UInt32 v33 = 9;
              goto LABEL_338;
            }
            if (a1 == 8650756)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
              UInt32 v33 = 6;
LABEL_338:
              a2[2].mNumberChannelDescriptions = v33;
              goto LABEL_378;
            }
            if (a1 != 8716291) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            int v22 = 4;
          }
          goto LABEL_303;
        }
        if (a1 <= 9109509)
        {
          if (a1 != 8912900)
          {
            if (a1 == 8978437)
            {
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 4;
              int v63 = 9;
              goto LABEL_370;
            }
            if (a1 != 9043973) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
            UInt32 v43 = 6;
            goto LABEL_280;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
          a2[1].signed int mChannelLayoutTag = 2;
          int v42 = 3;
          goto LABEL_329;
        }
        if (a1 <= 9240581)
        {
          if (a1 != 9109510)
          {
            if (a1 != 9175047) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
            a2[2].mNumberChannelDescriptions = 6;
            int v30 = 3;
            goto LABEL_310;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
          a2[1].signed int mChannelLayoutTag = 2;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
          a2[2].mNumberChannelDescriptions = 6;
          int v64 = 3;
LABEL_360:
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v64;
          AudioChannelFlags v15 = 9;
          goto LABEL_361;
        }
        if (a1 != 9240582)
        {
          if (a1 != 9306119) {
            return result;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
          AudioChannelLayoutTag v54 = 1;
LABEL_331:
          a2[1].signed int mChannelLayoutTag = v54;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
          a2[2].mNumberChannelDescriptions = 5;
          int v74 = 6;
          goto LABEL_375;
        }
        a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
        AudioChannelLayoutTag v67 = 1;
      }
      else
      {
        if (a1 <= 9895939)
        {
          if (a1 > 9568276)
          {
            if (a1 <= 9764865)
            {
              if (a1 != 9568277)
              {
                if (a1 != 9699335) {
                  return result;
                }
                a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
                a2[1].signed int mChannelLayoutTag = 2;
                LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 5;
                a2[2].mNumberChannelDescriptions = 6;
                LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 3;
                a2[3].mChannelDescriptions[0].mChannelFlags = 7;
                AudioChannelBitmap v25 = 8;
                goto LABEL_377;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 14;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 10;
              a2[3].mChannelDescriptions[0].mChannelFlags = 11;
              a2[4].int8x8_t mChannelBitmap = 5;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 6;
              a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 13;
              a2[6].signed int mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 35;
              a2[7].mNumberChannelDescriptions = 36;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 44;
              a2[8].mChannelDescriptions[0].mChannelFlags = 9;
              a2[9].int8x8_t mChannelBitmap = 4;
              LODWORD(a2[9].mChannelDescriptions[0].mCoordinates[1]) = 37;
              a2[10].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 7;
              a2[11].signed int mChannelLayoutTag = 8;
              LODWORD(a2[11].mChannelDescriptions[0].mCoordinates[0]) = 40;
              a2[12].mNumberChannelDescriptions = 41;
              LODWORD(a2[12].mChannelDescriptions[0].mCoordinates[2]) = 45;
LABEL_378:
              if (!v7) {
                return 0;
              }
              do
              {
                SetDefaultChannelPosition((uint64_t)mChannelDescriptions);
                uint64_t result = 0;
                ++mChannelDescriptions;
                --v7;
              }
              while (v7);
              return result;
            }
            if (a1 != 9764866)
            {
              if (a1 != 9830403) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              AudioChannelLayoutTag v52 = 3;
LABEL_302:
              a2[1].signed int mChannelLayoutTag = v52;
              int v22 = 2;
              goto LABEL_303;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
            AudioChannelLayoutTag v20 = 4;
LABEL_348:
            a2[1].signed int mChannelLayoutTag = v20;
            goto LABEL_378;
          }
          if (a1 != 9371655)
          {
            if (a1 != 9437192)
            {
              if (a1 != 9502736) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              a2[1].signed int mChannelLayoutTag = 2;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
              a2[2].mNumberChannelDescriptions = 14;
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 10;
              a2[3].mChannelDescriptions[0].mChannelFlags = 11;
              a2[4].int8x8_t mChannelBitmap = 5;
              LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = 6;
              a2[5].mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 13;
              a2[6].signed int mChannelLayoutTag = 15;
              LODWORD(a2[6].mChannelDescriptions[0].mCoordinates[0]) = 35;
              a2[7].mNumberChannelDescriptions = 36;
              LODWORD(a2[7].mChannelDescriptions[0].mCoordinates[2]) = 44;
              a2[8].mChannelDescriptions[0].mChannelFlags = 9;
              a2[9].int8x8_t mChannelBitmap = 4;
              int v38 = 37;
LABEL_270:
              LODWORD(a2[9].mChannelDescriptions[0].mCoordinates[1]) = v38;
              goto LABEL_378;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
            a2[1].signed int mChannelLayoutTag = 1;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 33;
            a2[4].int8x8_t mChannelBitmap = 34;
            int v21 = 9;
LABEL_367:
            LODWORD(a2[4].mChannelDescriptions[0].mCoordinates[1]) = v21;
            goto LABEL_378;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 3;
          AudioChannelLayoutTag v34 = 1;
          goto LABEL_309;
        }
        if (a1 <= 10158085)
        {
          if (a1 > 10027011)
          {
            if (a1 != 10027012)
            {
              if (a1 != 10092549) {
                return result;
              }
              a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
              AudioChannelLayoutTag v47 = 3;
LABEL_279:
              a2[1].signed int mChannelLayoutTag = v47;
              LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
              UInt32 v43 = 9;
LABEL_280:
              a2[2].mNumberChannelDescriptions = v43;
              int v63 = 4;
LABEL_370:
              LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v63;
              goto LABEL_378;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 2;
            int v42 = 9;
            goto LABEL_329;
          }
          if (a1 != 9895940)
          {
            if (a1 != 9961476) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            AudioChannelLayoutTag v18 = 3;
LABEL_188:
            a2[1].signed int mChannelLayoutTag = v18;
            int v42 = 2;
LABEL_329:
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = v42;
            UInt32 v33 = 4;
            goto LABEL_338;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
          AudioChannelLayoutTag v36 = 3;
LABEL_264:
          a2[1].signed int mChannelLayoutTag = v36;
          int v57 = 2;
          goto LABEL_337;
        }
        if (a1 > 10289158)
        {
          if (a1 != 10289159)
          {
            if (a1 != 10354695) {
              return result;
            }
            a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
            a2[1].signed int mChannelLayoutTag = 3;
            LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
            a2[2].mNumberChannelDescriptions = 5;
            LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
            a2[3].mChannelDescriptions[0].mChannelFlags = 4;
            AudioChannelBitmap v25 = 12;
            goto LABEL_377;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
          AudioChannelLayoutTag v73 = 3;
LABEL_372:
          a2[1].signed int mChannelLayoutTag = v73;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
          a2[2].mNumberChannelDescriptions = 5;
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
          AudioChannelFlags v65 = 4;
          goto LABEL_373;
        }
        if (a1 != 10158086)
        {
          if (a1 != 10223623) {
            return result;
          }
          a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
          AudioChannelLayoutTag v34 = 3;
LABEL_309:
          a2[1].signed int mChannelLayoutTag = v34;
          LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
          a2[2].mNumberChannelDescriptions = 5;
          int v30 = 6;
LABEL_310:
          LODWORD(a2[2].mChannelDescriptions[0].mCoordinates[2]) = v30;
          a2[3].mChannelDescriptions[0].mChannelFlags = 33;
          AudioChannelBitmap v25 = 34;
          goto LABEL_377;
        }
        a2->mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 1;
        AudioChannelLayoutTag v67 = 3;
      }
      a2[1].signed int mChannelLayoutTag = v67;
      LODWORD(a2[1].mChannelDescriptions[0].mCoordinates[0]) = 2;
      a2[2].mNumberChannelDescriptions = 5;
      int v64 = 6;
      goto LABEL_360;
    }
    if (!v7) {
      return 0;
    }
    for (iuint64_t i = 0; ii != v7; ++ii)
    {
      uint64_t result = 0;
      mChannelDescriptions->AudioChannelLabel mChannelLabel = ii | 0x40000;
      ++mChannelDescriptions;
    }
  }
  return result;
}

uint64_t AudioFormatProperty_TagForChannelLayout(const AudioChannelLayout *a1, unsigned int *a2)
{
  unsigned int v21 = 0;
  uint64_t v4 = AudioFormatProperty_NumberOfChannelsForLayout(a1, &v21);
  if (!v4)
  {
    AudioChannelLayoutTag mChannelLayoutTag = a1->mChannelLayoutTag;
    if (a1->mChannelLayoutTag)
    {
      if (mChannelLayoutTag == 0x10000)
      {
        unsigned int v7 = AudioFormatProperty_LayoutTagForBitmap(a1->mChannelBitmap);
        if (v7 == 0x10000)
        {
          return 560360820;
        }
        else
        {
          uint64_t v4 = 0;
          *a2 = v7;
        }
      }
      else
      {
        uint64_t v4 = 0;
        *a2 = mChannelLayoutTag;
      }
    }
    else
    {
      AudioChannelLayoutTag v20 = 0;
      unsigned int v8 = v21;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v20, 20 * v21 + 12, 0);
      char v9 = 0;
      unsigned int v19 = 0;
      *(void *)&v18.int8x8_t mChannelBitmap = 0;
      char v10 = 1;
      BOOL v11 = v20;
      while (2)
      {
        char v12 = v10;
        for (uint64_t i = 2; i != 122; ++i)
        {
          int v14 = gAllLayoutTags[i];
          if ((i & 0x7FFFFFFE) == 0x5C || i == 49) {
            unsigned int v16 = v8;
          }
          else {
            unsigned int v16 = 0;
          }
          signed int v17 = v14 | v16;
          v18.AudioChannelLayoutTag mChannelLayoutTag = v14 | v16;
          if (!AudioFormatProperty_NumberOfChannelsForLayout(&v18, &v19)
            && v8 == v19
            && !AudioFormatProperty_ChannelLayoutForTag(v17, v11)
            && (equalChannels(a1, v11, v9 & 1) & 1) != 0)
          {
            goto LABEL_27;
          }
        }
        if (!AudioFormatProperty_ChannelLayoutForTag(v8 | 0xF0010000, v11)
          && (equalChannels(a1, v11, v9 & 1) & 1) != 0)
        {
          signed int v17 = v8 | 0xF0010000;
LABEL_27:
          uint64_t v4 = 0;
          *a2 = v17;
          goto LABEL_28;
        }
        char v10 = 0;
        char v9 = 1;
        if (v12) {
          continue;
        }
        break;
      }
      uint64_t v4 = 560360820;
LABEL_28:
      if (v11) {
        free(v11);
      }
    }
  }
  return v4;
}

void sub_18FF262C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15) {
    free(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_NumberOfChannelsForLayout(const AudioChannelLayout *a1, unsigned int *a2)
{
  *a2 = 0;
  AudioChannelLayoutTag mChannelLayoutTag = a1->mChannelLayoutTag;
  if ((a1->mChannelLayoutTag & 0x80000000) != 0)
  {
    if (mChannelLayoutTag == -267386874)
    {
      AudioChannelLayoutTag mChannelLayoutTag = 6;
      goto LABEL_25;
    }
    if (mChannelLayoutTag == -266338299)
    {
      AudioChannelLayoutTag mChannelLayoutTag = 5;
LABEL_25:
      uint64_t result = 0;
      *a2 = mChannelLayoutTag;
      return result;
    }
  }
  else
  {
    if (mChannelLayoutTag == 0x10000)
    {
      uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a1->mChannelBitmap);
      v3.i16[0] = vaddlv_u8(v3);
      AudioChannelLayoutTag mChannelLayoutTag = v3.i32[0];
      goto LABEL_25;
    }
    if (!mChannelLayoutTag)
    {
      AudioChannelLayoutTag mChannelLayoutTag = a1->mNumberChannelDescriptions;
      goto LABEL_25;
    }
  }
  BOOL v4 = (mChannelLayoutTag & 0xFFFEFFFF) == 0 || mChannelLayoutTag > 0xFFFEFFFF;
  if (v4
    || ((unsigned int v5 = mChannelLayoutTag & 0xFFFF0000, (mChannelLayoutTag & 0xFFFF0000) != 0x930000)
      ? (BOOL v6 = v5 == -268369920)
      : (BOOL v6 = 1),
        v6
     || v5 == 12451840
     || v5 == 12517376
     || mChannelLayoutTag == -267386874
     || mChannelLayoutTag == -266338299
     || (uint64_t result = 560360820, mChannelLayoutTag - 14417920 >= 0xFF880000)
     && gAllLayoutTags[HIWORD(mChannelLayoutTag) - 98] == mChannelLayoutTag))
  {
    AudioChannelLayoutTag mChannelLayoutTag = (unsigned __int16)mChannelLayoutTag;
    goto LABEL_25;
  }
  return result;
}

uint64_t equalChannels(const AudioChannelLayout *a1, const AudioChannelLayout *a2, int a3)
{
  unint64_t mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions != a2->mNumberChannelDescriptions)
  {
    char v13 = 0;
    return v13 & 1;
  }
  if (!mNumberChannelDescriptions)
  {
    BOOL v5 = 1;
    goto LABEL_30;
  }
  uint64_t v4 = 0;
  BOOL v5 = 0;
  mChannelDescriptions = a2->mChannelDescriptions;
  unsigned int v7 = a1->mChannelDescriptions;
  while (1)
  {
    AudioChannelLabel mChannelLabel = v7->mChannelLabel;
    ++v7;
    int v8 = mChannelLabel;
    AudioChannelLabel v11 = mChannelDescriptions->mChannelLabel;
    ++mChannelDescriptions;
    int v10 = v11;
    if (a3)
    {
      if (v8 > 300)
      {
        if (v8 == 301)
        {
LABEL_10:
          int v8 = 1;
        }
        else if (v8 == 302)
        {
LABEL_9:
          int v8 = 2;
        }
      }
      else
      {
        switch(v8)
        {
          case 206:
          case 208:
            goto LABEL_10;
          case 207:
          case 209:
            goto LABEL_9;
          default:
            if (v8 == 42) {
              int v8 = 3;
            }
            break;
        }
      }
      int v12 = 1;
      if (v10 <= 300)
      {
        switch(v10)
        {
          case 206:
          case 208:
            goto LABEL_25;
          case 207:
          case 209:
            goto LABEL_17;
          default:
            if (v10 == 42) {
              int v10 = 3;
            }
            goto LABEL_20;
        }
      }
      if (v10 == 301) {
        goto LABEL_25;
      }
      if (v10 == 302)
      {
LABEL_17:
        int v12 = 2;
        goto LABEL_25;
      }
LABEL_20:
      if (v8 == 3 && v10 == 3) {
        break;
      }
    }
    int v12 = v10;
LABEL_25:
    if (v8 == v12)
    {
      BOOL v5 = ++v4 >= mNumberChannelDescriptions;
      if (mNumberChannelDescriptions != v4) {
        continue;
      }
    }
    LOBYTE(mNumberChannelDescriptions) = 0;
    goto LABEL_30;
  }
  int v12 = 3;
  if (mNumberChannelDescriptions != 1) {
    goto LABEL_25;
  }
  uint64_t v15 = 0;
  do
  {
    float v16 = fabsf(a1->mChannelDescriptions[0].mCoordinates[v15]);
    LOBYTE(mNumberChannelDescriptions) = v16 < 0.00000011921;
  }
  while (v16 < 0.00000011921 && v15++ != 2);
LABEL_30:
  char v13 = v5 | mNumberChannelDescriptions;
  return v13 & 1;
}

uint64_t SetDefaultChannelPosition(uint64_t result)
{
  if ((*(unsigned char *)(result + 4) & 3) != 0) {
    return result;
  }
  *(_DWORD *)(result + 4) = 2;
  *(void *)(result + 12) = 0x3F80000000000000;
  int v1 = *(_DWORD *)result;
  if (*(int *)result > 207)
  {
    if (v1 > 300)
    {
      if (v1 == 302)
      {
LABEL_12:
        int v2 = 1106247680;
        goto LABEL_44;
      }
      if (v1 != 301)
      {
LABEL_45:
        *(void *)(result + 4) = 0;
        *(_DWORD *)(result + 16) = 0;
        return result;
      }
    }
    else if (v1 != 208)
    {
      if (v1 != 209) {
        goto LABEL_45;
      }
      goto LABEL_12;
    }
LABEL_11:
    int v2 = -1041235968;
LABEL_44:
    *(_DWORD *)(result + 8) = v2;
    return result;
  }
  switch(v1)
  {
    case 1:
      goto LABEL_11;
    case 2:
      goto LABEL_12;
    case 3:
      *(_DWORD *)(result + 8) = 0;
      return result;
    case 5:
    case 10:
      int v2 = -1025769472;
      goto LABEL_44;
    case 6:
    case 11:
      int v2 = 1121714176;
      goto LABEL_44;
    case 7:
      int v2 = -1049624576;
      goto LABEL_44;
    case 8:
      int v2 = 1097859072;
      goto LABEL_44;
    case 9:
    case 44:
      int v2 = 1127481344;
      goto LABEL_44;
    case 12:
      int32x2_t v3 = (int32x2_t)0x42B4000000000000;
      goto LABEL_42;
    case 13:
      int32x2_t v3 = (int32x2_t)0x42340000C2340000;
      goto LABEL_42;
    case 14:
      int32x2_t v3 = (int32x2_t)0x41F0000000000000;
      goto LABEL_42;
    case 15:
      int32x2_t v3 = vdup_n_s32(0x42340000u);
      goto LABEL_42;
    case 16:
      int32x2_t v3 = (int32x2_t)0x41F00000C3160000;
      goto LABEL_42;
    case 17:
      int32x2_t v3 = (int32x2_t)0x41F0000043340000;
      goto LABEL_42;
    case 18:
      int32x2_t v3 = (int32x2_t)0x41F0000043160000;
      goto LABEL_42;
    case 33:
    case 63:
      int v2 = -1021968384;
      goto LABEL_44;
    case 34:
    case 64:
      int v2 = 1125515264;
      goto LABEL_44;
    case 35:
    case 65:
      int v2 = -1032847360;
      goto LABEL_44;
    case 36:
    case 66:
      int v2 = 1114636288;
      goto LABEL_44;
    case 37:
      int v2 = -1036779520;
      goto LABEL_44;
    case 49:
      int32x2_t v3 = (int32x2_t)0x42340000C2B40000;
      goto LABEL_42;
    case 51:
      int32x2_t v3 = (int32x2_t)0x4234000042B40000;
      goto LABEL_42;
    case 52:
      int32x2_t v3 = (int32x2_t)0x42340000C3070000;
      goto LABEL_42;
    case 53:
      int32x2_t v3 = (int32x2_t)0x4234000043340000;
      goto LABEL_42;
    case 54:
      int32x2_t v3 = (int32x2_t)0x4234000043070000;
      goto LABEL_42;
    case 55:
      int v2 = -1028390912;
      goto LABEL_44;
    case 56:
      int v2 = 1119092736;
      goto LABEL_44;
    case 57:
      int32x2_t v3 = (int32x2_t)0xC1700000C2340000;
      goto LABEL_42;
    case 58:
      int32x2_t v3 = (int32x2_t)0xC170000042340000;
      goto LABEL_42;
    case 59:
      int32x2_t v3 = (int32x2_t)0xC170000000000000;
      goto LABEL_42;
    case 60:
      int32x2_t v3 = (int32x2_t)0x420C0000C2DC0000;
      goto LABEL_42;
    case 61:
      int32x2_t v3 = (int32x2_t)0x420C000042DC0000;
LABEL_42:
      *(int32x2_t *)(result + 8) = v3;
      break;
    case 62:
      int v2 = 1110704128;
      goto LABEL_44;
    default:
      goto LABEL_45;
  }
  return result;
}

uint64_t AT::RingBuffer::Store(AT::RingBuffer *this, const AudioBufferList *a2, unsigned int a3, uint64_t a4)
{
  if (!a3) {
    goto LABEL_69;
  }
  uint64_t v5 = *((void *)this + 6);
  if (*(_DWORD *)(v5 + 40) < a3)
  {
    AT::RingBufferErrorCategory::instance(this);
    return 3;
  }
  if (**(_DWORD **)(v5 + 64) != a2->mNumberBuffers)
  {
    AT::RingBufferErrorCategory::instance(this);
    return 4294967291;
  }
  uint64_t v9 = a4 + a3;
  uint64_t v10 = v5 + 176;
  AudioChannelLabel v11 = (unsigned int *)(v5 + 944);
  char v12 = atomic_load((unsigned int *)(v5 + 944));
  if (*(void *)(v5 + 176 + 24 * (v12 & 0x1F) + 8) > a4 || *(unsigned char *)(v5 + 948) && *(unsigned char *)(v5 + 949))
  {
    unsigned int v13 = atomic_load(v11);
    uint64_t v14 = v10 + 24 * (++v13 & 0x1F);
    *(void *)uint64_t v14 = a4;
    *(void *)(v14 + 8) = a4;
    *(_DWORD *)(v14 + 16) = v13;
    atomic_store(v13, v11);
    *(unsigned char *)(v5 + 948) = 0;
  }
  else
  {
    AudioChannelLayoutTag v24 = (unsigned int *)(v5 + 944);
    char v25 = atomic_load((unsigned int *)(v5 + 944));
    uint64_t v26 = *(unsigned int *)(v5 + 40);
    if (v9 - *(void *)(v10 + 24 * (v25 & 0x1F)) > v26)
    {
      uint64_t v27 = v9 - v26;
      char v28 = atomic_load(v24);
      uint64_t v29 = *(void *)(v10 + 24 * (v28 & 0x1F) + 8);
      unsigned int v30 = atomic_load(v24);
      unsigned int v31 = v30 + 1;
      uint64_t v32 = v10 + 24 * (v31 & 0x1F);
      *(void *)uint64_t v32 = v27;
      if (v27 <= v29) {
        uint64_t v27 = v29;
      }
      *(void *)(v32 + 8) = v27;
      *(_DWORD *)(v32 + 16) = v31;
      atomic_store(v31, v24);
    }
  }
  char v15 = atomic_load((unsigned int *)(v5 + 944));
  uint64_t v16 = *(void *)(v10 + 24 * (v15 & 0x1F) + 8);
  uint64_t v17 = *(int *)(v5 + 40);
  int v18 = *(_DWORD *)(v5 + 48);
  if (v16 >= a4)
  {
    size_t v20 = ((v17 & ((int)(a4 % v17) >> 31)) + (a4 % v17)) * v18;
    goto LABEL_29;
  }
  uint64_t v102 = a4 + a3;
  uint64_t v19 = ((v17 & ((int)(v16 % v17) >> 31)) + (v16 % v17)) * v18;
  size_t v20 = ((v17 & ((int)(a4 % v17) >> 31)) + (a4 % v17)) * v18;
  unsigned int v21 = *(_DWORD **)(v5 + 64);
  if (v19 >= v20)
  {
    if (*v21)
    {
      uint64_t v101 = v5 + 176;
      unint64_t v33 = 0;
      size_t v34 = *(unsigned int *)(v5 + 52) - v19;
      uint64_t v35 = 4;
      do
      {
        bzero((void *)(*(void *)&v21[v35] + v19), v34);
        ++v33;
        v35 += 4;
      }
      while (v33 < *v21);
      AudioChannelLayoutTag v36 = *(_DWORD **)(v5 + 64);
      if (*v36)
      {
        unint64_t v37 = 0;
        uint64_t v38 = 4;
        do
        {
          bzero(*(void **)&v36[v38], v20);
          ++v37;
          v38 += 4;
        }
        while (v37 < *v36);
      }
      goto LABEL_27;
    }
  }
  else if (*v21)
  {
    uint64_t v101 = v5 + 176;
    unint64_t v22 = 0;
    uint64_t v23 = 4;
    do
    {
      bzero((void *)(*(void *)&v21[v23] + v19), v20 - v19);
      ++v22;
      v23 += 4;
    }
    while (v22 < *v21);
LABEL_27:
    uint64_t v10 = v101;
    uint64_t v9 = v102;
    goto LABEL_29;
  }
  uint64_t v9 = a4 + a3;
LABEL_29:
  LODWORD(v39) = *(_DWORD *)(v5 + 40);
  int v40 = v9 % (int)v39;
  size_t v41 = ((v39 & (v40 >> 31)) + v40) * *(_DWORD *)(v5 + 48);
  size_t v42 = v41 - v20;
  if (v41 > v20)
  {
    if (!*(unsigned char *)(v5 + 168))
    {
      int v58 = *(_DWORD **)(v5 + 64);
      if (*v58)
      {
        unint64_t v59 = 0;
        uint64_t v60 = 4;
        do
        {
          memcpy((void *)(*(void *)&v58[v60] + v20), *(const void **)((char *)&a2->mNumberBuffers + v60 * 4), v42);
          ++v59;
          v60 += 4;
        }
        while (v59 < *v58);
      }
      goto LABEL_68;
    }
    UInt32 v43 = *(unsigned int **)(v5 + 112);
    uint64_t v44 = *v43;
    if (v44)
    {
      int v45 = *(_DWORD *)(v5 + 96) * a3;
      AudioChannelLayoutTag v46 = v43 + 4;
      p_mData = &a2->mBuffers[0].mData;
      do
      {
        AudioChannelBitmap v48 = *p_mData;
        p_mData += 2;
        *AudioChannelLayoutTag v46 = v48;
        *((_DWORD *)v46 - 1) = v45;
        v46 += 2;
        --v44;
      }
      while (v44);
    }
    int v49 = *(unsigned int **)(v5 + 136);
    uint64_t v50 = *v49;
    if (v50)
    {
      int v51 = *(_DWORD *)(v5 + 24) * a3;
      AudioChannelLayoutTag v52 = v49 + 4;
      UInt32 v53 = (uint64_t *)(*(void *)(v5 + 64) + 16);
      do
      {
        uint64_t v54 = *v53;
        v53 += 2;
        *AudioChannelLayoutTag v52 = v54 + v20;
        *((_DWORD *)v52 - 1) = v51;
        v52 += 2;
        --v50;
      }
      while (v50);
    }
    uint64_t v55 = *(void *)(v5 + 160);
    unsigned int v110 = a3;
    long long v108 = v49;
    int v109 = v43;
    goto LABEL_67;
  }
  if (!*(unsigned char *)(v5 + 168))
  {
    int v61 = *(_DWORD **)(v5 + 64);
    if (*v61)
    {
      uint64_t v62 = v10;
      unint64_t v63 = 0;
      size_t v64 = *(unsigned int *)(v5 + 52) - v20;
      uint64_t v65 = 4;
      do
      {
        memcpy((void *)(*(void *)&v61[v65] + v20), *(const void **)((char *)&a2->mNumberBuffers + v65 * 4), v64);
        ++v63;
        v65 += 4;
      }
      while (v63 < *v61);
      AudioChannelLayoutTag v66 = *(_DWORD **)(v5 + 64);
      uint64_t v10 = v62;
      if (*v66)
      {
        unint64_t v67 = 0;
        uint64_t v68 = 4;
        do
        {
          memcpy(*(void **)&v66[v68], (const void *)(*(void *)((char *)&a2->mNumberBuffers + v68 * 4) + v64), v41);
          ++v67;
          v68 += 4;
        }
        while (v67 < *v66);
      }
    }
    goto LABEL_68;
  }
  int v56 = (v39 & ((int)(a4 % (int)v39) >> 31)) + a4 % (int)v39;
  unsigned int v57 = v39 - v56;
  if (v39 != v56)
  {
    AudioChannelFlags v69 = *(unsigned int **)(v5 + 112);
    uint64_t v70 = *v69;
    if (v70)
    {
      int v71 = *(_DWORD *)(v5 + 96) * v57;
      AudioChannelBitmap v72 = v69 + 4;
      AudioChannelLayoutTag v73 = &a2->mBuffers[0].mData;
      do
      {
        int v74 = *v73;
        v73 += 2;
        void *v72 = v74;
        *((_DWORD *)v72 - 1) = v71;
        v72 += 2;
        --v70;
      }
      while (v70);
    }
    unint64_t v75 = *(unsigned int **)(v5 + 136);
    uint64_t v76 = *v75;
    if (v76)
    {
      int v77 = *(_DWORD *)(v5 + 24) * v57;
      unsigned int v78 = v75 + 4;
      AudioChannelLayout v79 = (uint64_t *)(*(void *)(v5 + 64) + 16);
      do
      {
        uint64_t v80 = *v79;
        v79 += 2;
        *unsigned int v78 = v80 + v20;
        *((_DWORD *)v78 - 1) = v77;
        v78 += 2;
        --v76;
      }
      while (v76);
    }
    uint64_t v81 = *(void *)(v5 + 160);
    unsigned int v110 = v57;
    long long v108 = v75;
    int v109 = v69;
    uint64_t v103 = (int *)&v110;
    uint64_t v104 = &v109;
    signed int v105 = &v108;
    Float64 v106 = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
    long long v107 = &v103;
    with_resolved(v81, (uint64_t (**)(uint64_t, uint64_t))&v106);
    uint64_t v39 = *(int *)(v5 + 40);
    int v40 = v9 % v39;
  }
  unsigned int v82 = (v39 & (v40 >> 31)) + v40;
  if (v82)
  {
    size_t v83 = *(unsigned int **)(v5 + 112);
    uint64_t v84 = *v83;
    if (v84)
    {
      int v85 = *(_DWORD *)(v5 + 96);
      uint64_t v86 = v85 * v57;
      int v87 = v85 * v82;
      uint64_t v88 = v83 + 4;
      uint64_t v89 = &a2->mBuffers[0].mData;
      do
      {
        uint64_t v90 = (char *)*v89;
        v89 += 2;
        void *v88 = &v90[v86];
        *((_DWORD *)v88 - 1) = v87;
        v88 += 2;
        --v84;
      }
      while (v84);
    }
    Float64 v91 = *(unsigned int **)(v5 + 136);
    uint64_t v92 = *v91;
    if (v92)
    {
      int v93 = *(_DWORD *)(v5 + 24) * v82;
      int v94 = v91 + 4;
      char v95 = (uint64_t *)(*(void *)(v5 + 64) + 16);
      do
      {
        uint64_t v96 = *v95;
        v95 += 2;
        *int v94 = v96;
        *((_DWORD *)v94 - 1) = v93;
        v94 += 2;
        --v92;
      }
      while (v92);
    }
    uint64_t v55 = *(void *)(v5 + 160);
    unsigned int v110 = v82;
    long long v108 = v91;
    int v109 = v83;
LABEL_67:
    uint64_t v103 = (int *)&v110;
    uint64_t v104 = &v109;
    signed int v105 = &v108;
    Float64 v106 = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>;
    long long v107 = &v103;
    with_resolved(v55, (uint64_t (**)(uint64_t, uint64_t))&v106);
  }
LABEL_68:
  char v97 = atomic_load((unsigned int *)(v5 + 944));
  uint64_t v98 = *(void *)(v10 + 24 * (v97 & 0x1F));
  unsigned int v99 = atomic_load((unsigned int *)(v5 + 944));
  uint64_t v100 = v10 + 24 * (++v99 & 0x1F);
  *(void *)uint64_t v100 = v98;
  *(void *)(v100 + 8) = v9;
  *(_DWORD *)(v100 + 16) = v99;
  atomic_store(v99, (unsigned int *)(v5 + 944));
LABEL_69:
  std::system_category();
  return 0;
}

void createHapticCommandWriter(void *a1, int a2)
{
  id v3 = a1;
  if (setupLogging(void)::once != -1) {
    dispatch_once(&setupLogging(void)::once, &__block_literal_global_2537);
  }
  id v4 = v3;
  xpc_object_t v5 = v4;
  if (!v4) {
    xpc_object_t v5 = xpc_null_create();
  }

  int v8 = 1;
  uint64_t v7 = MEMORY[0x1E4FB94B8] + 16;
  xpc_object_t v10 = xpc_null_create();
  int v9 = a2;
  applesauce::xpc::object::object(&v11, v5);
  BOOL v6 = v10;
  xpc_object_t v10 = v11;
  AudioChannelLabel v11 = 0;

  operator new();
}

void sub_18FF26EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x192FC7BD0](&a9);

  _Unwind_Resume(a1);
}

void SharableMemoryBlock::SharableMemoryBlock(SharableMemoryBlock *this)
{
  *((_WORD *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = MEMORY[0x1E4FB94A8] + 16;
  *((void *)this + 4) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 6) = xpc_null_create();
}

void **applesauce::xpc::object::object(void **a1, void *a2)
{
  id v3 = a2;
  *a1 = v3;
  if (!v3)
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v5 = *a1;
    *a1 = v4;
  }
  return a1;
}

std::string *swix::connection_config::connection_config(std::string *this, const swix::connection_config *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  BOOL v6 = (void *)*((void *)a2 + 6);
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  uint64_t v7 = *((void *)a2 + 7);
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v7;
  if (v7) {
    dispatch_retain(v7);
  }
  std::string::size_type v8 = *((void *)a2 + 8);
  LOWORD(this[3].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 36);
  this[2].__r_.__value_.__r.__words[2] = v8;
  std::__optional_copy_base<swix::timeout_config,false>::__optional_copy_base[abi:ne180100](&this[3].__r_.__value_.__s.__data_[8], (uint64_t)a2 + 80);
  return this;
}

void sub_18FF27058(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<swix::timeout_config,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    *(void *)a1 = *(void *)a2;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 8), a2 + 8);
    a1[40] = 1;
  }
  return a1;
}

void sub_18FF270FC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22AudioComponentMgr_Base36postRegistrationsChangedNotificationEv_block_invoke()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  uint64_t v0 = *(id *)gAudioComponentLogCategory;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    long long v4 = "AudioComponentPluginMgr.mm";
    __int16 v5 = 1024;
    int v6 = 1117;
    _os_log_impl(&dword_18FEC0000, v0, OS_LOG_TYPE_DEFAULT, "%25s:%-5d component registrations changed", (uint8_t *)&v3, 0x12u);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"com.apple.coreaudio.AudioComponentRegistrationsChanged", 0, 0, 1u);
}

uint64_t writeCommand(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4 = *a2;
  __dst = 0;
  LODWORD(__n) = 0;
  uint64_t v14 = 0;
  size_t v15 = 0;
  unsigned int v11 = 0;
  uint64_t v5 = HapticSharedMemoryWriter::reserveForWrite(a1, v4, (uint64_t)&__dst, &v11);
  if (v5)
  {
    if (!__dst) {
      __assert_rtn("write", "HapticSharedMemoryWriter.h", 134, "res.address0 != NULL");
    }
    uint64_t v6 = __n;
    if (!__n) {
      __assert_rtn("write", "HapticSharedMemoryWriter.h", 135, "res.size0 != 0");
    }
    memcpy(__dst, a2, __n);
    int v7 = v15;
    if (v14 && v15)
    {
      memcpy(v14, (char *)a2 + v6, v15);
      int v7 = 0;
      LODWORD(v15) = 0;
    }
    LODWORD(__n) = 0;
    std::string::size_type v8 = *(_DWORD **)(a1 + 24);
    int v9 = HIDWORD(v15) - v7;
    if (HIDWORD(v15) - v7 < 0) {
      v9 += *v8;
    }
    v8[1] = v9;
    __dmb(0xBu);
  }
  return v5;
}

uint64_t HapticSharedMemoryWriter::reserveForWrite(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if ((a2 & 3) != 0) {
    __assert_rtn("reserveForWrite", "HapticSharedMemoryWriter.h", 25, "(inSize & 3) == 0");
  }
  uint64_t v5 = *(unsigned int **)(a1 + 24);
  if (!v5)
  {
    if (kHSHMScope)
    {
      xpc_object_t v10 = *(id *)kHSHMScope;
      if (!v10)
      {
LABEL_23:
        uint64_t result = 0;
        *a4 = 0;
        return result;
      }
    }
    else
    {
      xpc_object_t v10 = MEMORY[0x1E4F14500];
      id v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v34 = 136315650;
      uint64_t v35 = "HapticSharedMemoryWriter.h";
      __int16 v36 = 1024;
      int v37 = 29;
      __int16 v38 = 2080;
      uint64_t v39 = "reserveForWrite";
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Cannot write to shared ring buffer (already deallocated?)!", (uint8_t *)&v34, 0x1Cu);
    }

    goto LABEL_23;
  }
  unsigned int v7 = *v5;
  *a4 = *v5;
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    if (kHSHMScope)
    {
      uint64_t result = (uint64_t)*(id *)kHSHMScope;
      int v9 = result;
      if (!result) {
        return result;
      }
    }
    else
    {
      int v9 = MEMORY[0x1E4F14500];
      id v18 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v19 = *a4;
      int v34 = 136316162;
      uint64_t v35 = "HapticSharedMemoryWriter.h";
      int v37 = 39;
      __int16 v38 = 2080;
      __int16 v36 = 1024;
      uint64_t v39 = "reserveForWrite";
      __int16 v40 = 1024;
      unsigned int v41 = a2;
      __int16 v42 = 1024;
      unsigned int v43 = v19;
      _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s: WARNING: Command block size (%u) is larger than entire ring buffer (%u)", (uint8_t *)&v34, 0x28u);
    }

    return 0;
  }
  if (a2 < v7 >> 1)
  {
    for (int i = -5; ; ++i)
    {
      uint64_t v13 = (int)v5[1];
      int v14 = v13 - v5[2];
      if (v14 < 0) {
        unsigned int v15 = ~v14;
      }
      else {
        unsigned int v15 = *v5 + ~v14;
      }
      if (v15 >= a2) {
        goto LABEL_44;
      }
      if (!i) {
        break;
      }
      usleep(0x1388u);
    }
    if (v14 < 0) {
      unsigned int v20 = ~v14;
    }
    else {
      unsigned int v20 = *v5 + ~v14;
    }
    if (v20 >= a2)
    {
LABEL_44:
      signed int v27 = *v5;
      uint64_t v26 = v5 + 4;
      signed int v25 = v27;
      if ((int)(v13 + a2) >= v27) {
        int v28 = v25;
      }
      else {
        int v28 = 0;
      }
      int v29 = v13 + a2 - v28;
      *(_DWORD *)(a3 + 28) = v29;
      *(void *)a3 = (char *)v26 + v13;
      if (v29 <= (int)v13)
      {
        unsigned int v30 = v25 - v13;
        *(_DWORD *)(a3 + 8) = v30;
        BOOL v31 = a2 >= v30;
        unsigned int v32 = a2 - v30;
        if (v32 != 0 && v31)
        {
          *(void *)(a3 + 16) = v26;
          *(_DWORD *)(a3 + 24) = v32;
        }
        return 1;
      }
      else
      {
        *(_DWORD *)(a3 + 8) = a2;
        *(void *)(a3 + 16) = 0;
        uint64_t result = 1;
        *(_DWORD *)(a3 + 24) = 0;
      }
      return result;
    }
    if (kHSHMScope)
    {
      uint64_t v17 = *(id *)kHSHMScope;
      if (!v17) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v17 = MEMORY[0x1E4F14500];
      id v33 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v34 = 136315650;
      uint64_t v35 = "HapticSharedMemoryWriter.h";
      __int16 v36 = 1024;
      int v37 = 50;
      __int16 v38 = 2080;
      uint64_t v39 = "reserveForWrite";
      unint64_t v22 = "%25s:%-5d %s: WARNING: Unable to wait for enough write space in ring buffer";
      uint64_t v23 = v17;
      os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (!kHSHMScope)
  {
    uint64_t v17 = MEMORY[0x1E4F14500];
    id v21 = MEMORY[0x1E4F14500];
LABEL_34:
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      int v34 = 136315650;
      uint64_t v35 = "HapticSharedMemoryWriter.h";
      __int16 v36 = 1024;
      int v37 = 55;
      __int16 v38 = 2080;
      uint64_t v39 = "reserveForWrite";
      unint64_t v22 = "%25s:%-5d %s: WARNING: Not enough space in ring buffer";
      uint64_t v23 = v17;
      os_log_type_t v24 = OS_LOG_TYPE_DEBUG;
LABEL_36:
      _os_log_impl(&dword_18FEC0000, v23, v24, v22, (uint8_t *)&v34, 0x1Cu);
    }
LABEL_37:

    return 0;
  }
  uint64_t result = (uint64_t)*(id *)kHSHMScope;
  uint64_t v17 = result;
  if (result) {
    goto LABEL_34;
  }
  return result;
}

uint64_t AIFFAudioFile::OpenFromDataSource(AIFFAudioFile *this)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  unsigned int v72 = 0;
  unint64_t v71 = 0;
  inSpecifier = 0;
  UInt32 inSpecifierSize = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  long long outPropertyData = 0u;
  long long v69 = 0u;
  uint64_t v70 = 0;
  *((void *)this + 9) = 0;
  (*(void (**)(AIFFAudioFile *, void))(*(void *)this + 232))(this, 0);
  *((unsigned char *)this + 190) = 0;
  int v2 = (char *)this + 190;
  uint64_t v3 = (*(uint64_t (**)(void, unint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v71);
  if (v3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      unsigned int v6 = 0;
      goto LABEL_6;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&long long v78 = "AIFFAudioFile.cpp";
    WORD4(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 10) = 1290;
    unsigned int v4 = MEMORY[0x1E4F14500];
    uint64_t v5 = "%25s:%-5d  GetSize Failed";
LABEL_4:
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
    goto LABEL_5;
  }
  uint64_t v9 = (*(uint64_t (**)(void, void, void, uint64_t, signed int *, unsigned int *))(**((void **)this + 13)
                                                                                                + 48))(*((void *)this + 13), 0, 0, 8, &v75, &v72);
  uint64_t v3 = v9;
  uint64_t v7 = 1685348671;
  if (v9 == -39) {
    goto LABEL_125;
  }
  if (v9)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&long long v78 = "AIFFAudioFile.cpp";
    WORD4(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 10) = 1296;
    unsigned int v4 = MEMORY[0x1E4F14500];
    uint64_t v5 = "%25s:%-5d  FSRead Failed 1";
    goto LABEL_4;
  }
  signed int v10 = v75;
  signed int v75 = bswap32(v75);
  if (v10 != 1297239878) {
    goto LABEL_125;
  }
  signed int v76 = bswap32(v76);
  uint64_t v11 = v76 + 8;
  char v12 = (char *)*((void *)this + 19);
  unint64_t v13 = *((void *)this + 20);
  if ((unint64_t)v12 >= v13)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    id v16 = (char *)*((void *)this + 18);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v16) >> 3);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v16) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 < 0x555555555555555) {
      unint64_t v15 = v18;
    }
    if (v15)
    {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v15);
      id v16 = (char *)*((void *)this + 18);
      char v12 = (char *)*((void *)this + 19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    id v21 = (void *)(v15 + 24 * v17);
    *id v21 = 0x8464F524DLL;
    unint64_t v22 = v15 + 24 * v20;
    v21[1] = v11;
    v21[2] = 0;
    int v14 = v21 + 3;
    if (v12 != v16)
    {
      do
      {
        long long v23 = *(_OWORD *)(v12 - 24);
        *(v21 - 1) = *((void *)v12 - 1);
        *(_OWORD *)(v21 - 3) = v23;
        v21 -= 3;
        v12 -= 24;
      }
      while (v12 != v16);
      id v16 = (char *)*((void *)this + 18);
    }
    *((void *)this + 18) = v21;
    *((void *)this + 19) = v14;
    *((void *)this + 20) = v22;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(void *)char v12 = 0x8464F524DLL;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 2) = 0;
    int v14 = v12 + 24;
  }
  *((void *)this + 19) = v14;
  if ((uint64_t)v71 > (v76 + 8)) {
    unint64_t v71 = (v76 + 8);
  }
  uint64_t v3 = (*(uint64_t (**)(void, void, void, uint64_t, int8x16_t *, unsigned int *))(**((void **)this + 13)
                                                                                               + 48))(*((void *)this + 13), 0, 0, 12, &v87, &v72);
  if (v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&long long v78 = "AIFFAudioFile.cpp";
      WORD4(v78) = 1024;
      *(_DWORD *)((char *)&v78 + 10) = 1318;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  FSRead Failed 2", buf, 0x12u);
    }
    unsigned int v6 = 1179603533;
    goto LABEL_6;
  }
  __int32 v24 = v87.i32[2];
  unsigned int v25 = bswap32(v87.u32[2]);
  *((_DWORD *)this + 21) = v25;
  if (v25 != 1095321155 && v25 != 1095321158)
  {
    uint64_t v7 = 4294967246;
    goto LABEL_125;
  }
  unsigned int v6 = 1179603533;
  if (v71 < 0xD) {
    goto LABEL_42;
  }
  __int32 v65 = v24;
  char v28 = 0;
  unint64_t v29 = 12;
  while (1)
  {
    uint64_t v30 = (*(uint64_t (**)(void, void, unint64_t, uint64_t, signed int *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v29, 8, &v75, &v72);
    uint64_t v3 = v30;
    if (v30) {
      break;
    }
    signed int v31 = v75;
    unsigned int v6 = bswap32(v75);
    signed int v75 = v6;
    signed int v76 = bswap32(v76);
    unint64_t v32 = v76 + 8;
    int v33 = v71 - v29;
    unint64_t v34 = (v71 - v29);
    if (v31 == 1145983827 && v32 >= 0x11 && v32 > v34)
    {
      if (v73 != 1129270605)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&long long v78 = "AIFFAudioFile.cpp";
          WORD4(v78) = 1024;
          *(_DWORD *)((char *)&v78 + 10) = 1355;
          _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Never found the Common Chunk", buf, 0x12u);
        }
        BOOL v57 = 1;
        goto LABEL_116;
      }
      uint64_t v3 = FillDescriptionFromCommonChunk((uint64_t)&v73, &outPropertyData, inSpecifierSize, inSpecifier);
      if (v3)
      {
        unsigned int v6 = 1397968452;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&long long v78 = "AIFFAudioFile.cpp";
          WORD4(v78) = 1024;
          *(_DWORD *)((char *)&v78 + 10) = 1359;
          uint64_t v26 = MEMORY[0x1E4F14500];
          signed int v27 = "%25s:%-5d  FillDescriptionFromCommonChunk Failed";
          goto LABEL_172;
        }
LABEL_6:
        *((_DWORD *)this + 20) = v6 == 1397968452;
        uint64_t v7 = v3;
        if (v3 != -39) {
          goto LABEL_117;
        }
        if (*(_DWORD *)((char *)&v74 + 10)) {
          BOOL v8 = *((void *)this + 9) == 0;
        }
        else {
          BOOL v8 = 1;
        }
        if (v8) {
          uint64_t v7 = 1685348671;
        }
        else {
          uint64_t v7 = 0;
        }
        goto LABEL_125;
      }
      unint64_t v32 = ((v33 - 16) & -(int)v69) + 16;
    }
    if (v32 > v34) {
      goto LABEL_42;
    }
    __int16 v38 = (unsigned int *)*((void *)this + 19);
    unint64_t v37 = *((void *)this + 20);
    if ((unint64_t)v38 >= v37)
    {
      __int16 v40 = (unsigned int *)*((void *)this + 18);
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v40) >> 3);
      unint64_t v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)v40) >> 3);
      if (2 * v43 > v42) {
        unint64_t v42 = 2 * v43;
      }
      if (v43 >= 0x555555555555555) {
        unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v44);
        __int16 v40 = (unsigned int *)*((void *)this + 18);
        __int16 v38 = (unsigned int *)*((void *)this + 19);
      }
      else
      {
        uint64_t v45 = 0;
      }
      unint64_t v46 = v44 + 24 * v41;
      *(_DWORD *)unint64_t v46 = v6;
      *(_DWORD *)(v46 + 4) = 8;
      *(void *)(v46 + 8) = v32;
      *(void *)(v46 + 16) = v29;
      unint64_t v47 = v46;
      if (v38 != v40)
      {
        do
        {
          long long v48 = *(_OWORD *)(v38 - 6);
          *(void *)(v47 - 8) = *((void *)v38 - 1);
          *(_OWORD *)(v47 - 24) = v48;
          v47 -= 24;
          v38 -= 6;
        }
        while (v38 != v40);
        __int16 v40 = (unsigned int *)*((void *)this + 18);
      }
      uint64_t v39 = (_DWORD *)(v46 + 24);
      *((void *)this + 18) = v47;
      *((void *)this + 19) = v46 + 24;
      *((void *)this + 20) = v44 + 24 * v45;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *__int16 v38 = v6;
      v38[1] = 8;
      uint64_t v39 = v38 + 6;
      *((void *)v38 + 1) = v32;
      *((void *)v38 + 2) = v29;
    }
    *((void *)this + 19) = v39;
    if (v75 > 1397968451)
    {
      if (v75 == 1397968452)
      {
        *((void *)this + 56) = v29;
        uint64_t v3 = (*(uint64_t (**)(void, void, unint64_t, uint64_t, int8x16_t *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v29, 16, &v87, &v72);
        if (v3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_6;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&long long v78 = "AIFFAudioFile.cpp";
          WORD4(v78) = 1024;
          *(_DWORD *)((char *)&v78 + 10) = 1420;
          uint64_t v26 = MEMORY[0x1E4F14500];
          signed int v27 = "%25s:%-5d  FSRead Failed 6";
LABEL_172:
          _os_log_impl(&dword_18FEC0000, v26, OS_LOG_TYPE_ERROR, v27, buf, 0x12u);
          goto LABEL_6;
        }
        int8x16_t v54 = vrev32q_s8(v87);
        int8x16_t v87 = v54;
        *((void *)this + 9) = v29 + v54.u32[2] + 16;
        (*(void (**)(AIFFAudioFile *, unint64_t))(*(void *)this + 232))(this, v54.u32[1] - (unint64_t)v54.u32[2] - 8);
        goto LABEL_103;
      }
      if (v75 == 2002876005)
      {
        UInt32 inSpecifierSize = v32 - 8;
        if (v32 != 8)
        {
          CADeprecated::CAAutoFree<unsigned char>::allocBytes(&inSpecifier, (v32 - 8), 0);
          uint64_t v3 = (*(uint64_t (**)(void, void, unint64_t, void, void *, UInt32 *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v29 + 8, inSpecifierSize, inSpecifier, &inSpecifierSize);
          if (v3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_6;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&long long v78 = "AIFFAudioFile.cpp";
            WORD4(v78) = 1024;
            *(_DWORD *)((char *)&v78 + 10) = 1447;
            uint64_t v26 = MEMORY[0x1E4F14500];
            signed int v27 = "%25s:%-5d  FSRead Failed 5";
            goto LABEL_172;
          }
        }
        goto LABEL_103;
      }
    }
    else
    {
      if (v75 == 1129270605)
      {
        uint64_t v50 = *(uint64_t (**)(void))(**((void **)this + 13) + 48);
        if (v65 == 1128679745)
        {
          uint64_t v3 = v50();
          if (v3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_6;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&long long v78 = "AIFFAudioFile.cpp";
            WORD4(v78) = 1024;
            *(_DWORD *)((char *)&v78 + 10) = 1378;
            uint64_t v26 = MEMORY[0x1E4F14500];
            signed int v27 = "%25s:%-5d  FSRead Failed 3";
            goto LABEL_172;
          }
          *(void *)&long long v73 = _byteswap_uint64(__PAIR64__(v73, DWORD1(v73)));
          WORD4(v73) = bswap32(WORD4(v73)) >> 16;
          *(_DWORD *)((char *)&v73 + 10) = bswap32(*(unsigned int *)((char *)&v73 + 10));
          HIWORD(v73) = bswap32(HIWORD(v73)) >> 16;
          *(_DWORD *)((char *)&v74 + 10) = bswap32(*(unsigned int *)((char *)&v74 + 10));
          signed int v51 = (DWORD1(v73) - 21) & 0xFFFFFFFE;
          if (v51 >= 1)
          {
            uint64_t v52 = v51 >= 256 ? 256 : v51;
            uint64_t v3 = (*(uint64_t (**)(void, void, unint64_t, uint64_t, char *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v29 + 30, v52, (char *)this + 190, &v72);
            if (v3)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_6;
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)&long long v78 = "AIFFAudioFile.cpp";
              WORD4(v78) = 1024;
              *(_DWORD *)((char *)&v78 + 10) = 1386;
              uint64_t v26 = MEMORY[0x1E4F14500];
              signed int v27 = "%25s:%-5d  FSRead Failed 4";
              goto LABEL_172;
            }
          }
          if (!*v2)
          {
            int v53 = *(_DWORD *)((char *)&v74 + 10);
            *((void *)this + 24) = *(unsigned int *)((char *)&v74 + 10);
            *(_DWORD *)((char *)this + 191) = v53;
            *((unsigned char *)this + 190) = 4;
          }
        }
        else
        {
          uint64_t v3 = v50();
          if (v3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_6;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&long long v78 = "AIFFAudioFile.cpp";
            WORD4(v78) = 1024;
            *(_DWORD *)((char *)&v78 + 10) = 1402;
            uint64_t v26 = MEMORY[0x1E4F14500];
            signed int v27 = "%25s:%-5d  FSRead Failed 5";
            goto LABEL_172;
          }
          *(int8x8_t *)&long long v73 = vrev32_s8(*(int8x8_t *)&v73);
          WORD4(v73) = bswap32(WORD4(v73)) >> 16;
          *(_DWORD *)((char *)&v73 + 10) = bswap32(*(unsigned int *)((char *)&v73 + 10));
          HIWORD(v73) = bswap32(HIWORD(v73)) >> 16;
          *(_DWORD *)((char *)&v74 + 10) = 1313820229;
          *(_DWORD *)int v2 = 1852788256;
          *((unsigned char *)this + 194) = 101;
          unsigned char *v2 = 4;
        }
        goto LABEL_103;
      }
      if (v75 == 1229206304)
      {
        *((void *)this + 59) = v29 + 8;
        if (ID3ParserOpen((uint64_t)this, (uint64_t)AIFFID3CallbackProc, (uint64_t)this + 464)) {
          *((void *)this + 59) = 0;
        }
LABEL_103:
        char v28 = v76 & 1;
        v29 += ((v76 + 1) & 0xFFFFFFFE) + 8;
        BOOL v49 = v29 >= v71;
        goto LABEL_104;
      }
    }
    if ((v75 & 0xE0) != 0 || (v28 & 1) == 0) {
      goto LABEL_103;
    }
    BOOL v49 = 0;
    char v28 = 0;
    --v29;
LABEL_104:
    if (v49) {
      goto LABEL_42;
    }
  }
  if (v30 != -39)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&long long v78 = "AIFFAudioFile.cpp";
      WORD4(v78) = 1024;
      *(_DWORD *)((char *)&v78 + 10) = 1338;
      uint64_t v26 = MEMORY[0x1E4F14500];
      signed int v27 = "%25s:%-5d  FSRead Failed 1";
      goto LABEL_172;
    }
    goto LABEL_6;
  }
LABEL_42:
  if (v73 != 1129270605)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_115;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&long long v78 = "AIFFAudioFile.cpp";
    WORD4(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 10) = 1472;
    uint64_t v55 = MEMORY[0x1E4F14500];
    int v56 = "%25s:%-5d  Never found the Common Chunk";
LABEL_114:
    _os_log_impl(&dword_18FEC0000, v55, OS_LOG_TYPE_ERROR, v56, buf, 0x12u);
    goto LABEL_115;
  }
  if (!DWORD2(outPropertyData))
  {
    uint64_t v3 = FillDescriptionFromCommonChunk((uint64_t)&v73, &outPropertyData, inSpecifierSize, inSpecifier);
    if (v3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&long long v78 = "AIFFAudioFile.cpp";
        WORD4(v78) = 1024;
        *(_DWORD *)((char *)&v78 + 10) = 1478;
        uint64_t v26 = MEMORY[0x1E4F14500];
        signed int v27 = "%25s:%-5d  FillDescriptionFromCommonChunk Failed";
        goto LABEL_172;
      }
      goto LABEL_6;
    }
  }
  if (*(double *)&outPropertyData <= 0.0)
  {
    uint64_t v7 = 1718449215;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_115;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&long long v78 = "AIFFAudioFile.cpp";
    WORD4(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 10) = 1482;
    uint64_t v55 = MEMORY[0x1E4F14500];
    int v56 = "%25s:%-5d  Invalid sampling rate";
    goto LABEL_114;
  }
  (*(void (**)(AIFFAudioFile *, void, double))(*(void *)this + 648))(this, v69, *(double *)&outPropertyData);
  (*(void (**)(AIFFAudioFile *, void))(*(void *)this + 248))(this, *(unsigned int *)((char *)&v73 + 10));
  uint64_t v3 = (*(uint64_t (**)(AIFFAudioFile *, long long *))(*(void *)this + 176))(this, &outPropertyData);
  if (v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&long long v78 = "AIFFAudioFile.cpp";
      WORD4(v78) = 1024;
      *(_DWORD *)((char *)&v78 + 10) = 1487;
      uint64_t v26 = MEMORY[0x1E4F14500];
      signed int v27 = "%25s:%-5d  bad data format";
      goto LABEL_172;
    }
    goto LABEL_6;
  }
  if (DWORD2(outPropertyData) != 1819304813) {
    goto LABEL_169;
  }
  uint64_t v61 = 0;
  uint64_t v62 = *((void *)this + 9) + 8;
  while (2)
  {
    if ((*(unsigned int (**)(void, void, uint64_t, uint64_t, int8x16_t *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v62 + v61, 10, &v87, &v72))
    {
      uint64_t v7 = 0;
      goto LABEL_125;
    }
    *(_WORD *)long long buf = 0;
    *(void *)((char *)&v78 + 4) = &v87;
    HIDWORD(v78) = v72;
    unsigned __int8 v79 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    int v85 = 0;
    int v86 = 3940;
    if (v72 >= 0xA)
    {
      if (v87.u16[0] == 2935) {
        goto LABEL_145;
      }
      if (v87.u16[0] == 30475)
      {
        unsigned __int8 v79 = 1;
LABEL_145:
        buf[0] = 1;
      }
    }
    if (!AC3PacketParser::IsValid((AC3PacketParser *)buf)) {
      goto LABEL_167;
    }
    if (v61 != 24576)
    {
      if (v84) {
        free(v84);
      }
      v61 += 6144;
      continue;
    }
    break;
  }
  *(void *)&long long outPropertyData = v80;
  long long v69 = v81;
  uint64_t v70 = v82;
  DWORD2(outPropertyData) = 1667326771;
  HIDWORD(outPropertyData) = (2 * v79) | 0xC;
  LODWORD(v69) = 6144;
  if (!(*(unsigned int (**)(AIFFAudioFile *, long long *))(*(void *)this + 176))(this, &outPropertyData))
  {
    (*(void (**)(AIFFAudioFile *, uint64_t))(*(void *)this + 648))(this, 6144);
    uint64_t v64 = (*(uint64_t (**)(AIFFAudioFile *))(*(void *)this + 224))(this);
    (*(void (**)(AIFFAudioFile *, uint64_t))(*(void *)this + 248))(this, v64 / 6144);
    *((_DWORD *)this + 122) = v83;
  }
LABEL_167:
  if (v84) {
    free(v84);
  }
LABEL_169:
  uint64_t v7 = 0;
LABEL_115:
  BOOL v57 = v6 == 1397968452;
LABEL_116:
  *((_DWORD *)this + 20) = v57;
LABEL_117:
  if ((*((unsigned char *)this + 100) & 2) != 0 && DWORD2(outPropertyData) == 1819304813)
  {
    if (v70 > 8 && (BYTE12(outPropertyData) & 2) == 0) {
      uint64_t v7 = 1886547263;
    }
    else {
      uint64_t v7 = v7;
    }
  }
LABEL_125:
  if (inSpecifier) {
    free(inSpecifier);
  }
  if (v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&long long v78 = "AIFFAudioFile.cpp";
      WORD4(v78) = 1024;
      *(_DWORD *)((char *)&v78 + 10) = 1045;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d   AIFFAudioFile::OpenFromDataSource Failed", buf, 0x12u);
    }
    return v7;
  }
  if ((*((unsigned char *)this + 100) & 2) == 0) {
    return v7;
  }
  uint64_t result = 1886547263;
  int v60 = *((_DWORD *)this + 8);
  if (v60 != 842231401 && v60 != 1936684916) {
    return v7;
  }
  return result;
}

void sub_18FF28980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  int v14 = *(void **)(v12 + 72);
  if (v14) {
    free(v14);
  }
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AC3PacketParser::IsValid(AC3PacketParser *this)
{
  if (!*(unsigned char *)this) {
    return 0;
  }
  if (*((unsigned char *)this + 1)) {
    return 1;
  }
  if (ParseAC3Header(*((unsigned __int8 **)this + 1), 0xAu, (AudioStreamBasicDescription *)((char *)this + 24), (unsigned int *)this + 16, (unsigned int *)this + 17, 0, (unsigned int *)this + 21, 0))return 0; {
  uint64_t result = 1;
  }
  *((unsigned char *)this + 1) = 1;
  return result;
}

uint64_t FillDescriptionFromCommonChunk(uint64_t a1, void *outPropertyData, UInt32 inSpecifierSize, void *inSpecifier)
{
  outPropertyData[4] = 0;
  *(_OWORD *)long long outPropertyData = 0u;
  *((_OWORD *)outPropertyData + 1) = 0u;
  char v8 = *(unsigned char *)(a1 + 16);
  int v9 = v8;
  int v10 = *(unsigned __int8 *)(a1 + 17) | ((v8 & 0x7F) << 8);
  uint64_t v11 = bswap32(*(_DWORD *)(a1 + 18));
  uint64_t v12 = bswap32(*(_DWORD *)(a1 + 22));
  double v13 = 0.0;
  if (v10) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v11 == 0;
  }
  if (!v14 || v12 != 0)
  {
    if (v10 == 0x7FFF)
    {
      double v13 = INFINITY;
    }
    else
    {
      double v16 = ldexp((double)(v11 - 0x80000000) + 2147483650.0, v10 - 16414);
      double v13 = v16 + ldexp((double)(v12 - 0x80000000) + 2147483650.0, v10 - 16446);
    }
  }
  uint64_t result = 1718449215;
  if (v9 < 0) {
    double v13 = -v13;
  }
  *(double *)long long outPropertyData = v13;
  int v18 = *(_DWORD *)(a1 + 26);
  *((_DWORD *)outPropertyData + 2) = v18;
  int v19 = *(__int16 *)(a1 + 8);
  int v20 = *(__int16 *)(a1 + 14);
  *((_DWORD *)outPropertyData + 7) = v19;
  *((_DWORD *)outPropertyData + 8) = v20;
  if (v18 == 1196641568)
  {
    *((_DWORD *)outPropertyData + 2) = 1634169709;
LABEL_15:
    *(void *)((char *)outPropertyData + 12) = 0;
    outPropertyData[4] = 0;
    *(void *)((char *)outPropertyData + 20) = 0;
    UInt32 ioPropertyDataSize = 40;
    uint64_t result = AudioFormatGetProperty(0x666D7469u, inSpecifierSize, inSpecifier, &ioPropertyDataSize, outPropertyData);
    if (*((_DWORD *)outPropertyData + 2) != 1819304813) {
      return result;
    }
    int v21 = *((_DWORD *)outPropertyData + 3);
    goto LABEL_55;
  }
  unsigned int v22 = (v20 + 7) >> 3;
  if (v18 <= 1768829491)
  {
    if (v18 > 1313820228)
    {
      if (v18 == 1313820229)
      {
        int v34 = v22 * v19;
        *((_DWORD *)outPropertyData + 5) = 1;
        *((_DWORD *)outPropertyData + 6) = v34;
        *((_DWORD *)outPropertyData + 4) = v34;
        *((_DWORD *)outPropertyData + 2) = 1819304813;
        if ((v20 & 7) != 0)
        {
          int v21 = 20;
          *((_DWORD *)outPropertyData + 3) = 20;
          int v28 = 22;
        }
        else
        {
          int v21 = 12;
          *((_DWORD *)outPropertyData + 3) = 12;
          int v28 = 14;
        }
        goto LABEL_51;
      }
      if (v18 != 1718367026)
      {
        int v24 = 1718367796;
        goto LABEL_36;
      }
    }
    else
    {
      if (v18 == 842231401)
      {
        uint64_t result = 0;
        int v29 = 4 * v19;
        *((_DWORD *)outPropertyData + 5) = 1;
        *((_DWORD *)outPropertyData + 6) = v29;
        *((_DWORD *)outPropertyData + 4) = v29;
        int v30 = 32;
        goto LABEL_49;
      }
      if (v18 != 1179398962)
      {
        int v24 = 1179399732;
LABEL_36:
        if (v18 != v24) {
          goto LABEL_15;
        }
        uint64_t result = 0;
        int v25 = 8 * v19;
        *((_DWORD *)outPropertyData + 5) = 1;
        *((_DWORD *)outPropertyData + 6) = v25;
        *((_DWORD *)outPropertyData + 4) = v25;
        *((_DWORD *)outPropertyData + 8) = 64;
        outPropertyData[1] = 0x96C70636DLL;
        int v21 = 9;
LABEL_55:
        *((_DWORD *)outPropertyData + 3) = v21 | 2;
        return result;
      }
    }
    int v27 = 4 * v19;
    *((_DWORD *)outPropertyData + 5) = 1;
    *((_DWORD *)outPropertyData + 6) = v27;
    *((_DWORD *)outPropertyData + 4) = v27;
    *((_DWORD *)outPropertyData + 8) = 32;
    outPropertyData[1] = 0x96C70636DLL;
    int v28 = 11;
    int v21 = 9;
    goto LABEL_51;
  }
  if (v18 > 1836253268)
  {
    if (v18 <= 1936684915)
    {
      if (v18 == 1836253269) {
        return result;
      }
      if (v18 != 1918990112) {
        goto LABEL_15;
      }
      uint64_t result = 0;
      int v23 = v22 * v19;
      *((_DWORD *)outPropertyData + 5) = 1;
      *((_DWORD *)outPropertyData + 6) = v23;
      *((_DWORD *)outPropertyData + 4) = v23;
      *((_DWORD *)outPropertyData + 2) = 1819304813;
      if ((v20 + 7) <= 0xF) {
        int v21 = 10;
      }
      else {
        int v21 = 14;
      }
      goto LABEL_55;
    }
    if (v18 != 1936684916)
    {
      if (v18 != 1953984371) {
        goto LABEL_15;
      }
      uint64_t result = 0;
      int v26 = v22 * v19;
      *((_DWORD *)outPropertyData + 5) = 1;
      *((_DWORD *)outPropertyData + 6) = v26;
      *((_DWORD *)outPropertyData + 4) = v26;
      outPropertyData[1] = 0xE6C70636DLL;
      int v21 = 14;
      goto LABEL_55;
    }
    uint64_t result = 0;
    int v35 = 2 * v19;
    *((_DWORD *)outPropertyData + 5) = 1;
    *((_DWORD *)outPropertyData + 6) = v35;
    *((_DWORD *)outPropertyData + 4) = v35;
    int v30 = 16;
LABEL_49:
    *((_DWORD *)outPropertyData + 8) = v30;
    outPropertyData[1] = 0xC6C70636DLL;
    return result;
  }
  switch(v18)
  {
    case 1768829492:
      int v31 = 3 * v19;
      *((_DWORD *)outPropertyData + 5) = 1;
      *((_DWORD *)outPropertyData + 6) = v31;
      *((_DWORD *)outPropertyData + 4) = v31;
      int v32 = 24;
      break;
    case 1768829746:
      int v33 = 4 * v19;
      *((_DWORD *)outPropertyData + 5) = 1;
      *((_DWORD *)outPropertyData + 6) = v33;
      *((_DWORD *)outPropertyData + 4) = v33;
      int v32 = 32;
      break;
    case 1836253264:
      return result;
    default:
      goto LABEL_15;
  }
  *((_DWORD *)outPropertyData + 8) = v32;
  outPropertyData[1] = 0xC6C70636DLL;
  int v28 = 14;
  int v21 = 12;
LABEL_51:
  if (inSpecifierSize < 0x16)
  {
    uint64_t result = 0;
    goto LABEL_55;
  }
  uint64_t result = 0;
  if (!*((_WORD *)inSpecifier + 10)) {
    *((_DWORD *)outPropertyData + 3) = v28;
  }
  return result;
}

uint64_t updateReservedWriteIndex(uint64_t result, _DWORD *a2)
{
  int v2 = *(_DWORD **)(result + 24);
  int v3 = a2[7] - (a2[2] + a2[6]);
  if (v3 < 0) {
    v3 += *v2;
  }
  v2[1] = v3;
  __dmb(0xBu);
  return result;
}

uint64_t reserveForWrite(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  return HapticSharedMemoryWriter::reserveForWrite(a1, a3, a2, a4);
}

float clientParamValueToFixedParamValue(int a1, float result)
{
  if (a1 == 1015 || a1 == 1001) {
    return result * 0.5 + 0.5;
  }
  return result;
}

uint64_t clientParamToFixedParam(int a1)
{
  uint64_t result = 0;
  if (a1 > 1999)
  {
    if (a1 <= 2009)
    {
      if (a1 == 2000)
      {
        return 330;
      }
      else if (a1 == 2001)
      {
        return 331;
      }
    }
    else
    {
      switch(a1)
      {
        case 2010:
          return 333;
        case 2011:
          return 334;
        case 2012:
          return 335;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1000:
        return 330;
      case 1001:
        return 331;
      case 1010:
        return 333;
      case 1011:
        return 334;
      case 1012:
        return 335;
      case 1013:
        uint64_t result = 336;
        break;
      case 1015:
        uint64_t result = 332;
        break;
      case 1016:
        uint64_t result = 337;
        break;
      default:
        return result;
    }
  }
  return result;
}

void ___ZL17connectionHandlerP17_xpc_connection_s_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18FF29238(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __AudioConverterPrepare_block_invoke_3(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  }
  return result;
}

void __AudioConverterPrepare_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  AudioConverterLog();
  uint64_t v0 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315394;
    xpc_object_t object = "AudioConverterOOP.cpp";
    __int16 v6 = 1024;
    int v7 = 851;
    _os_log_impl(&dword_18FEC0000, v0, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing AudioConverterService", buf, 0x12u);
  }
  remoteAudioConverterClientWithActivatedEndpoint((uint64_t)&v3, v1, v2);
}

void sub_18FF29558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::function<void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::operator=(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v7 != a1)
  {
    unsigned int v4 = v8;
    uint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_18FF298D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

uint64_t std::construct_at[abi:ne180100]<swix::connection_config,swix::connection_config,swix::connection_config*>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  xpc_object_t v6 = xpc_null_create();
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *((void *)a2 + 6) = v6;
  *((void *)a2 + 7) = 0;
  uint64_t v7 = *((void *)a2 + 8);
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 88, (uint64_t)a2 + 88);
    *(unsigned char *)(a1 + 120) = 1;
  }
  return a1;
}

uint64_t std::unique_ptr<AudioConverterService>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1 = gService_0;
  gService_0 = result;
  if (v1)
  {
    int v2 = *(NSObject **)(v1 + 152);
    if (v2)
    {
      dispatch_source_cancel(v2);
      uint64_t v3 = *(NSObject **)(v1 + 152);
      *(void *)(v1 + 152) = 0;
      if (v3) {
        dispatch_release(v3);
      }
    }
    long long v4 = *(NSObject **)(v1 + 160);
    if (v4)
    {
      dispatch_sync(v4, &__block_literal_global_25);
      long long v5 = *(NSObject **)(v1 + 160);
      *(void *)(v1 + 160) = 0;
      if (v5) {
        dispatch_release(v5);
      }
    }
    XOSTransactor::endTransaction((XOSTransactor *)(v1 + 168));
    xpc_object_t v6 = *(NSObject **)(v1 + 160);
    if (v6) {
      dispatch_release(v6);
    }
    uint64_t v7 = *(NSObject **)(v1 + 152);
    if (v7) {
      dispatch_release(v7);
    }
    std::unique_ptr<auoop::WorkgroupMirror>::reset[abi:ne180100]((uint64_t *)(v1 + 144));
    uint64_t v8 = (void **)(v1 + 120);
    std::vector<std::unique_ptr<RemoteAudioConverter>>::__destroy_vector::operator()[abi:ne180100](&v8);
    std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v1 + 56));
    std::__optional_destruct_base<applesauce::xpc::endpoint,false>::~__optional_destruct_base[abi:ne180100](v1 + 40);
    swix::connection::~connection((swix::connection *)(v1 + 8));
    JUMPOUT(0x192FC8940);
  }
  return result;
}

RemoteAudioConverter *std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](RemoteAudioConverter **a1, RemoteAudioConverter *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    RemoteAudioConverter::~RemoteAudioConverter(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void std::__function::__func<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1},std::allocator<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = gService_0;
  uint64_t v3 = *(RemoteAudioConverter **)(a1 + 8);
  long long v4 = (std::recursive_mutex *)(gService_0 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(gService_0 + 56));
  xpc_object_t v6 = *(RemoteAudioConverter ***)(v2 + 120);
  long long v5 = *(RemoteAudioConverter ***)(v2 + 128);
  if (v6 != v5)
  {
    while (*v6 != v3)
    {
      if (++v6 == v5) {
        goto LABEL_4;
      }
    }
  }
  if (v6 == v5) {
LABEL_4:
  }
    std::terminate();
  uint64_t v7 = v6 + 1;
  if (v6 + 1 != v5)
  {
    do
    {
      xpc_object_t v6 = v7;
      uint64_t v8 = v7 - 1;
      int v9 = *v7;
      *v7++ = 0;
      std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](v8, v9);
    }
    while (v7 != v5);
    long long v5 = *(RemoteAudioConverter ***)(v2 + 128);
  }
  while (v5 != v6)
    std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](--v5, 0);
  *(void *)(v2 + 128) = v6;
  if (v6 == *(RemoteAudioConverter ***)(v2 + 120)) {
    XOSTransactor::endTransaction((XOSTransactor *)(v2 + 168));
  }
  std::recursive_mutex::unlock(v4);
  AudioConverterLog();
  int v10 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    std::recursive_mutex::lock((std::recursive_mutex *)(v11 + 56));
    uint64_t v12 = (*(void *)(v11 + 128) - *(void *)(v11 + 120)) >> 3;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v11 + 56));
    int v13 = 136315906;
    BOOL v14 = "AudioConverterService.cpp";
    __int16 v15 = 1024;
    int v16 = 179;
    __int16 v17 = 2048;
    uint64_t v18 = v11;
    __int16 v19 = 1024;
    int v20 = v12;
    _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverterService -> %p:  Client disconnected, number of converters: %u", (uint8_t *)&v13, 0x22u);
  }
}

void sub_18FF29CE0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(**(void **)(a1 + 40) + 24);
  if (!v1) {
    std::terminate();
  }
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  v5[0] = MEMORY[0x1E4FB94C8] + 16;
  v5[1] = v3;
  long long v5[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  swix::connection::state::cancel_connection();
  swix::connection::~connection((swix::connection *)v5);
}

void sub_18FF29DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  swix::connection::~connection((swix::connection *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

swix::message *swix::message::message(swix::message *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = xpc_null_create();
  *((void *)this + 2) = 0;
  return this;
}

int64_t swix::coder<int>::decode(void *a1, const char *a2)
{
  int64_t result = xpc_dictionary_get_int64(a1, a2);
  if (result != (int)result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_1EDF950F8;
  }
  return result;
}

void swix::connection::activate(swix::connection *this)
{
  swix::connection::xpc_connection((uint64_t *)&connection, this);
  xpc_connection_activate(connection);
  xpc_release(connection);
}

void sub_18FF29F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void AudioConverterXPC_Server::dispatch_message(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  swix::message::message((swix::message *)a3);
  switch(*(_DWORD *)a2)
  {
    case 0x47504E1:
      pid_t v6 = getpid();
      MEMORY[0x192FC7D90](inDesc, a2);
      uint64_t v7 = *(void *)&inDesc[0].componentManufacturer;
      *(void *)a3 = *(void *)&inDesc[0].componentType;
      *(void *)&inDesc[0].OSType componentManufacturer = xpc_null_create();
      uint64_t v8 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v7;
      xpc_release(v8);
      int v9 = *(void **)&inDesc[0].componentManufacturer;
      *(void *)(a3 + 16) = *(void *)&inDesc[0].componentFlagsMask;
      xpc_release(v9);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", 0);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), "process", v6);
      return;
    case 0x47504E2:
      uint64_t Next = 0;
      *(_OWORD *)&inDesc[0].componentType = xmmword_1901C6160;
      inDesc[0].componentFlagsMasuint64_t k = 0;
      do
        uint64_t Next = AudioComponentFindNext(Next, inDesc);
      while (Next);
      goto LABEL_26;
    case 0x47504E3:
      swix::coder<AudioStreamBasicDescription>::decode((uint64_t)buf, *(xpc_object_t *)(a2 + 8), "sourceFormat");
      *(_OWORD *)&inDesc[0].componentType = *(_OWORD *)buf;
      *(_OWORD *)&inDesc[0].componentFlagsMasuint64_t k = v85;
      *(void *)&inDesc[1].componentFlags = v86;
      swix::coder<AudioStreamBasicDescription>::decode((uint64_t)buf, *(xpc_object_t *)(a2 + 8), "destinationFormat");
      *(_OWORD *)&inDesc[2].componentType = *(_OWORD *)buf;
      *(_OWORD *)&inDesc[2].componentFlagsMasuint64_t k = v85;
      *(void *)&inDesc[3].componentFlags = v86;
      int v24 = swix::coder<std::span<AudioClassDescription const,18446744073709551615ul>>::decode(*(void **)(a2 + 8));
      v72[0] = *(_OWORD *)&inDesc[0].componentType;
      v72[1] = *(_OWORD *)&inDesc[0].componentFlagsMask;
      uint64_t v73 = *(void *)&inDesc[1].componentFlags;
      v70[0] = *(_OWORD *)&inDesc[2].componentType;
      v70[1] = *(_OWORD *)&inDesc[2].componentFlagsMask;
      uint64_t v71 = *(void *)&inDesc[3].componentFlags;
      unint64_t v26 = AudioConverterXPC_Server::instantiateSpecific(a1, (uint64_t)v72, v70, (uint64_t)v24, v25);
      MEMORY[0x192FC7D90](buf, a2);
      uint64_t v27 = *(void *)&buf[8];
      *(void *)a3 = *(void *)buf;
      *(void *)&_DWORD buf[8] = xpc_null_create();
      int v28 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v27;
      xpc_release(v28);
      int v29 = *(void **)&buf[8];
      *(void *)(a3 + 16) = v85;
      xpc_release(v29);
      if (HIDWORD(v26)) {
        int64_t v30 = 0;
      }
      else {
        int64_t v30 = (int)v26;
      }
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v30);
      return;
    case 0x47504E4:
      long long v79 = 0u;
      memset(&inDesc[1].componentFlags, 0, 48);
      memset(inDesc, 0, 32);
      xpc_object_t v31 = xpc_null_create();
      xpc_object_t v80 = v31;
      swix::coder<AudioStreamBasicDescription>::decode((uint64_t)buf, *(xpc_object_t *)(a2 + 8), "sourceFormat");
      *(_OWORD *)&inDesc[0].componentType = *(_OWORD *)buf;
      *(_OWORD *)&inDesc[0].componentFlagsMasuint64_t k = v85;
      *(void *)&inDesc[1].componentFlags = v86;
      swix::coder<AudioStreamBasicDescription>::decode((uint64_t)buf, *(xpc_object_t *)(a2 + 8), "destinationFormat");
      *(_OWORD *)&inDesc[2].componentType = *(_OWORD *)buf;
      *(_OWORD *)&inDesc[2].componentFlagsMasuint64_t k = v85;
      *(void *)&inDesc[3].componentFlags = v86;
      int v32 = swix::coder<std::span<AudioClassDescription const,18446744073709551615ul>>::decode(*(void **)(a2 + 8));
      uint64_t v34 = v33;
      *(void *)&long long v79 = v32;
      *((void *)&v79 + 1) = v33;
      swix::xpcobj_coder<applesauce::xpc::object>::decode(&v69, *(xpc_object_t *)(a2 + 8), "ipcResources");
      int v35 = v69;
      xpc_object_t v80 = v69;
      xpc_release(v31);
      long long v69 = 0;
      *(_OWORD *)long long buf = *(_OWORD *)&inDesc[0].componentType;
      long long v85 = *(_OWORD *)&inDesc[0].componentFlagsMask;
      uint64_t v86 = *(void *)&inDesc[1].componentFlags;
      *(_OWORD *)long long v81 = *(_OWORD *)&inDesc[2].componentType;
      long long v82 = *(_OWORD *)&inDesc[2].componentFlagsMask;
      uint64_t v83 = *(void *)&inDesc[3].componentFlags;
      unint64_t v36 = AudioConverterXPC_Server::instantiateSpecific(a1, (uint64_t)buf, (long long *)v81, (uint64_t)v32, v34);
      if (HIDWORD(v36) || (unint64_t v37 = v36, !v36)) {
        AudioConverterXPC_Server::setUpRenderer();
      }
      MEMORY[0x192FC7D90](buf, a2);
      uint64_t v38 = *(void *)&buf[8];
      *(void *)a3 = *(void *)buf;
      *(void *)&_DWORD buf[8] = xpc_null_create();
      uint64_t v39 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v38;
      xpc_release(v39);
      __int16 v40 = *(void **)&buf[8];
      *(void *)(a3 + 16) = v85;
      xpc_release(v40);
      if (HIDWORD(v37)) {
        int64_t v41 = 0;
      }
      else {
        int64_t v41 = (int)v37;
      }
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v41);
      xpc_release(v35);
      return;
    case 0x47504E5:
      xpc_object_t v14 = xpc_null_create();
      *(void *)long long buf = v14;
      swix::xpcobj_coder<applesauce::xpc::object>::decode(&v68, *(xpc_object_t *)(a2 + 8), "ipcResources");
      *(void *)long long buf = v68;
      xpc_release(v14);
      uint64_t v68 = 0;
      AudioConverterXPC_Server::setUpRenderer();
    case 0x47504E6:
      xpc_object_t v52 = xpc_null_create();
      *(void *)&inDesc[0].componentType = 0;
      xpc_dictionary_get_data(*(xpc_object_t *)(a2 + 8), "configParams", (size_t *)&inDesc[0].componentType);
      swix::xpcobj_coder<applesauce::xpc::object>::decode(&v67, *(xpc_object_t *)(a2 + 8), "ipcResources");
      xpc_object_t v67 = v52;
      xpc_release(v52);
      xpc_object_t v67 = 0;
      operator new();
    case 0x47504E7:
      uint64_t v53 = **(void **)(a1 + 16);
      uint64_t v54 = *(void *)(v53 + 48);
      *(void *)(v53 + 48) = 0;
      if (v54) {
        (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
      }
      AudioConverterLog();
      uint64_t v55 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        inDesc[0].componentType = 136315394;
        *(void *)&inDesc[0].OSType componentSubType = "RemoteAudioConverter.cpp";
        LOWORD(inDesc[0].componentFlags) = 1024;
        *(UInt32 *)((char *)&inDesc[0].componentFlags + 2) = 153;
        _os_log_impl(&dword_18FEC0000, v55, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverterService: Destroyed property server", (uint8_t *)inDesc, 0x12u);
      }
LABEL_26:
      MEMORY[0x192FC7D90](inDesc, a2);
      uint64_t v49 = *(void *)&inDesc[0].componentManufacturer;
      *(void *)a3 = *(void *)&inDesc[0].componentType;
      *(void *)&inDesc[0].OSType componentManufacturer = xpc_null_create();
      uint64_t v50 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v49;
      xpc_release(v50);
      signed int v51 = *(void **)&inDesc[0].componentManufacturer;
      *(void *)(a3 + 16) = *(void *)&inDesc[0].componentFlagsMask;
      xpc_release(v51);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", 0);
      break;
    case 0x47504E8:
      OSStatus v42 = AudioConverterDispose(*(AudioConverterRef *)(**(void **)(a1 + 16) + 8));
      uint64_t v43 = **(void **)(a1 + 16);
      uint64_t v44 = *(void *)(v43 + 40);
      *(void *)(v43 + 40) = 0;
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
      MEMORY[0x192FC7D90](inDesc, a2);
      uint64_t v45 = *(void *)&inDesc[0].componentManufacturer;
      *(void *)a3 = *(void *)&inDesc[0].componentType;
      *(void *)&inDesc[0].OSType componentManufacturer = xpc_null_create();
      unint64_t v46 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v45;
      xpc_release(v46);
      unint64_t v47 = *(void **)&inDesc[0].componentManufacturer;
      *(void *)(a3 + 16) = *(void *)&inDesc[0].componentFlagsMask;
      xpc_release(v47);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v42);
      break;
    case 0x47504E9:
      xpc_object_t v60 = xpc_null_create();
      swix::xpcobj_coder<applesauce::xpc::object>::decode(&v66, *(xpc_object_t *)(a2 + 8), "workgroups");
      uint64_t v61 = v66;
      xpc_release(v60);
      AudioChannelLayoutTag v66 = 0;
      uint64_t v62 = *(auoop::WorkgroupMirror **)(**(void **)(a1 + 16) + 56);
      *(void *)&inDesc[0].componentType = v61;
      if (v61 && object_getClass(v61) == (Class)MEMORY[0x1E4F14590]) {
        xpc_retain(v61);
      }
      else {
        *(void *)&inDesc[0].componentType = xpc_null_create();
      }
      auoop::WorkgroupMirror::update(v62, (const applesauce::xpc::dict *)inDesc);
      xpc_release(*(xpc_object_t *)&inDesc[0].componentType);
      MEMORY[0x192FC7D90](inDesc, a2);
      uint64_t v63 = *(void *)&inDesc[0].componentManufacturer;
      *(void *)a3 = *(void *)&inDesc[0].componentType;
      *(void *)&inDesc[0].OSType componentManufacturer = xpc_null_create();
      uint64_t v64 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v63;
      xpc_release(v64);
      __int32 v65 = *(void **)&inDesc[0].componentManufacturer;
      *(void *)(a3 + 16) = *(void *)&inDesc[0].componentFlagsMask;
      xpc_release(v65);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", 0);
      xpc_release(v61);
      break;
    case 0x47504EA:
      int v15 = swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "propertyID");
      LODWORD(v75) = 0;
      LOBYTE(v77) = 0;
      uint64_t v16 = *(void *)(**(void **)(a1 + 16) + 8);
      LODWORD(v76) = v15;
      *(void *)long long v81 = &v75;
      __n_4[0] = &v77;
      *(void *)long long buf = &v76;
      *(void *)&_DWORD buf[8] = v81;
      *(void *)&long long v85 = __n_4;
      *(void *)&inDesc[0].componentType = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>;
      *(void *)&inDesc[0].OSType componentManufacturer = buf;
      unsigned int v17 = with_resolved(v16, (uint64_t (**)(uint64_t, uint64_t))inDesc);
      unsigned int v18 = v17;
      int v19 = v77;
      if (v17) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = v75;
      }
      MEMORY[0x192FC7D90](inDesc, a2);
      uint64_t v21 = *(void *)&inDesc[0].componentManufacturer;
      *(void *)a3 = *(void *)&inDesc[0].componentType;
      *(void *)&inDesc[0].OSType componentManufacturer = xpc_null_create();
      unsigned int v22 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v21;
      xpc_release(v22);
      int v23 = *(void **)&inDesc[0].componentManufacturer;
      *(void *)(a3 + 16) = *(void *)&inDesc[0].componentFlagsMask;
      xpc_release(v23);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", (int)v18);
      if (!v18)
      {
        xpc_dictionary_set_uint64(*(xpc_object_t *)(a3 + 8), "dataSize", v20);
        xpc_dictionary_set_BOOL(*(xpc_object_t *)(a3 + 8), "outWritable", v19 != 0);
      }
      break;
    case 0x47504EB:
      xpc_object_t v56 = xpc_null_create();
      swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "propertyID");
      swix::xpcobj_coder<swix::data>::decode((xpc_object_t *)inDesc, *(xpc_object_t *)(a2 + 8), "inData");
      BOOL v57 = *(void **)&inDesc[0].componentType;
      xpc_object_t v58 = xpc_null_create();
      *(void *)&inDesc[0].componentType = v58;
      xpc_release(v56);
      xpc_release(v58);
      swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "dataSize");
      xpc_dictionary_get_BOOL(*(xpc_object_t *)(a2 + 8), "inputRequiredForProperty");
      memset(__n_4, 0, sizeof(__n_4));
      xpc_null_create();
      bytes_ptr = xpc_data_get_bytes_ptr(v57);
      xpc_data_get_length(v57);
      PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)inDesc, bytes_ptr);
    case 0x47504EC:
      xpc_object_t v10 = xpc_null_create();
      swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "propertyID");
      swix::xpcobj_coder<swix::data>::decode((xpc_object_t *)inDesc, *(xpc_object_t *)(a2 + 8), "inData");
      uint64_t v11 = *(void **)&inDesc[0].componentType;
      xpc_object_t v12 = xpc_null_create();
      *(void *)&inDesc[0].componentType = v12;
      xpc_release(v10);
      xpc_release(v12);
      swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "dataSize");
      int v13 = xpc_data_get_bytes_ptr(v11);
      xpc_data_get_length(v11);
      PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)inDesc, v13);
    default:
      return;
  }
}

void sub_18FF2B038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint8_t buf,int a34,int a35,__int16 a36,__int16 a37,__int16 a38,__int16 a39)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AudioConverterXPC_Client::~AudioConverterXPC_Client(AudioConverterXPC_Client *this)
{
  swix::ipc_interface::~ipc_interface(this);
  JUMPOUT(0x192FC8940);
}

void AudioConverterService::setupMemoryPressureWarnings(AudioConverterService *this)
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v3 = dispatch_queue_create("memoryPresureWarningQueue", v2);
  uint64_t v4 = *((void *)this + 20);
  *((void *)this + 20) = v3;
  if (v4)
  {
    dispatch_release(v4);
    uint64_t v3 = *((void *)this + 20);
  }
  long long v5 = dispatch_source_create(MEMORY[0x1E4F14468], 0, 0x10uLL, v3);
  pid_t v6 = *((void *)this + 19);
  *((void *)this + 19) = v5;
  if (v6)
  {
    dispatch_release(v6);
    long long v5 = *((void *)this + 19);
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = ___ZN21AudioConverterService27setupMemoryPressureWarningsEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_13;
  handler[4] = this;
  dispatch_source_set_event_handler(v5, handler);
  dispatch_activate(*((dispatch_object_t *)this + 19));
}

void AudioConverterService::setupTempDirectory(AudioConverterService *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.audio.AudioConverterService");
  unsetenv("TMPDIR");
  if (!_set_user_dir_suffix()
    || ((v5 & 0x80u) == 0 ? (uint64_t v1 = (char *)__p) : (uint64_t v1 = (char *)__p[0]),
        (v5 & 0x80u) == 0 ? (size_t v2 = v5) : (size_t v2 = (size_t)__p[1]),
        !confstr(65537, v1, v2)))
  {
    AudioConverterLog();
    uint64_t v3 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v7 = "AudioConverterService.cpp";
      __int16 v8 = 1024;
      int v9 = 87;
      _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService: Failed to set user dir suffix. Converter audio captures will not be written.", buf, 0x12u);
    }
  }
  if ((char)v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18FF2B640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void RemoteAudioConverter::~RemoteAudioConverter(RemoteAudioConverter *this)
{
  uint64_t v1 = *(void **)this;
  *(void *)this = 0;
  if (v1)
  {
    uint64_t v2 = v1[6];
    v1[6] = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[5];
    v1[5] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    swix::ipc_interface::~ipc_interface((swix::ipc_interface *)(v1 + 2));
    MEMORY[0x192FC8940](v1, 0xA0C4062EF92D7);
  }
}

void applesauce::xpc::connection::create(applesauce::xpc::connection *this, const char *name, dispatch_queue_s *a3)
{
  xpc_connection_t v4 = xpc_connection_create(name, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *(void *)this = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *(void *)this = v5;
    if (!v5) {
      goto LABEL_5;
    }
  }
  if (object_getClass(v5) == (Class)MEMORY[0x1E4F14578])
  {
    xpc_retain(v5);
    goto LABEL_7;
  }
LABEL_5:
  *(void *)this = xpc_null_create();
LABEL_7:
  xpc_release(v5);
}

void remoteAudioConverterClientWithActivatedEndpoint(uint64_t a1, uint64_t a2, dispatch_queue_s *a3)
{
  applesauce::xpc::connection::create((applesauce::xpc::connection *)&object, "com.apple.audio.AudioConverterService", a3);
  remoteAudioConverterClient(a1, &object);
}

void sub_18FF2B804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  uint64_t v12 = v11;
  *uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

uint64_t GetOutputFormatListFromCodec(OpaqueAudioComponentInstance *a1, const AudioFormatInfo *a2, unsigned int *a3, AudioFormatListItem *a4)
{
  UInt32 outSize = 0;
  if (!a3) {
    return 561211770;
  }
  uint64_t PropertyInfo = AudioCodecGetPropertyInfo(a1, 0x6F663469u, &outSize, 0);
  if (!PropertyInfo)
  {
    UInt32 v9 = outSize;
    UInt32 v10 = outSize / 0x28;
    if (a4)
    {
      UInt32 outSize = 40 * v10;
      if (v9 >= 0x28)
      {
        size_t v12 = 40 * v10;
        int v13 = malloc_type_malloc(v12, 0x2C8E6D5CuLL);
        if (!v13)
        {
          exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          int v24 = std::bad_alloc::bad_alloc(exception);
        }
        xpc_object_t v14 = v13;
        bzero(v13, v12);
        long long v15 = *(_OWORD *)&a2->mASBD.mSampleRate;
        long long v16 = *(_OWORD *)&a2->mASBD.mBytesPerPacket;
        unsigned char v14[4] = *(void *)&a2->mASBD.mBitsPerChannel;
        *(_OWORD *)xpc_object_t v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        uint64_t PropertyInfo = AudioCodecGetProperty(a1, 0x6F663469u, &outSize, v14);
        if (!PropertyInfo)
        {
          LODWORD(v17) = outSize / 0x28;
          UInt32 v18 = *a3 / 0x30;
          if (v18 >= outSize / 0x28) {
            uint64_t v17 = v17;
          }
          else {
            uint64_t v17 = v18;
          }
          if (v17)
          {
            int v19 = v14;
            uint64_t v20 = v17;
            do
            {
              long long v21 = *(_OWORD *)v19;
              long long v22 = *((_OWORD *)v19 + 1);
              *(void *)&a4->mASBD.UInt32 mBitsPerChannel = v19[4];
              *(_OWORD *)&a4->mASBD.Float64 mSampleRate = v21;
              *(_OWORD *)&a4->mASBD.UInt32 mBytesPerPacket = v22;
              a4->AudioChannelLayoutTag mChannelLayoutTag = 0;
              ++a4;
              v19 += 5;
              --v20;
            }
            while (v20);
          }
          *a3 = 48 * v17;
        }
        free(v14);
      }
      else
      {
        return 2003329396;
      }
    }
    else
    {
      uint64_t PropertyInfo = 0;
      *a3 = 48 * v10;
    }
  }
  return PropertyInfo;
}

void sub_18FF2BA10(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void connectionHandler(xpc_object_t object)
{
  if (connectionHandler(_xpc_connection_s *)::onceToken != -1) {
    dispatch_once(&connectionHandler(_xpc_connection_s *)::onceToken, &__block_literal_global_4);
  }
  uint64_t v2 = gService_0;
  if (object)
  {
    xpc_retain(object);
    xpc_object_t v4 = object;
    xpc_object_t v3 = object;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v4 = v3;
    if (!v3) {
      goto LABEL_8;
    }
  }
  if (object_getClass(v3) == (Class)MEMORY[0x1E4F14578])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
LABEL_8:
  xpc_object_t v4 = xpc_null_create();
LABEL_9:
  XPCListener::accept_connection((XPCListener *)(v2 + 8), &v4);
}

void sub_18FF2BB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v10);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

BOOL AllowUnsafeMainThreadServicing(const char *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getenv("CA_AllowUnsafeMainThreadServicing");
  if (v2)
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    xpc_object_t v3 = *(NSObject **)gAudioComponentLogCategory;
    if (os_log_type_enabled(*(os_log_t *)gAudioComponentLogCategory, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315650;
      uint64_t v7 = "AudioComponentAPI.cpp";
      __int16 v8 = 1024;
      int v9 = 310;
      __int16 v10 = 2080;
      uint64_t v11 = a1;
      _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allowing unsafe servicing of main thread (%s).", (uint8_t *)&v6, 0x1Cu);
    }
  }
  return v2 != 0;
}

void AudioConverterServiceRun(void)
{
}

OSStatus MusicDeviceStartNote(MusicDeviceComponent inUnit, MusicDeviceInstrumentID inInstrument, MusicDeviceGroupID inGroupID, NoteInstanceID *outNoteInstanceID, UInt32 inOffsetSampleFrame, const MusicDeviceNoteParams *inParams)
{
  if (!inUnit) {
    return -50;
  }
  uint64_t v7 = *(void *)&inOffsetSampleFrame;
  uint64_t v9 = *(void *)&inGroupID;
  uint64_t v10 = *(void *)&inInstrument;
  uint64_t v11 = (uint64_t (***)(void))(*(uint64_t (**)(MusicDeviceComponent))(*(void *)inUnit + 8))(inUnit);
  if (!v11) {
    return 560947818;
  }
  uint64_t v12 = v11;
  if (*(_WORD *)((**v11)(v11) + 38) != 24949) {
    return -3000;
  }
  int v13 = *(uint64_t (**)(uint64_t (**)(void), uint64_t, uint64_t, NoteInstanceID *, uint64_t, const MusicDeviceNoteParams *))(*(void *)((**v12)(v12) + 112) + 176);
  if (!v13) {
    return -4;
  }
  xpc_object_t v14 = v12[3];
  return v13(v14, v10, v9, outNoteInstanceID, v7, inParams);
}

void AudioConverterPrepare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t v4 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E4F14430], QOS_CLASS_USER_INITIATED, 0);
  xpc_object_t v5 = dispatch_queue_create("AudioConverterPrepareQueue", v4);
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2000000000;
  int v9 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __AudioConverterPrepare_block_invoke;
  block[3] = &unk_1E56877C8;
  block[4] = v8;
  dispatch_async(v5, block);
  dispatch_async(v5, &__block_literal_global_5144);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  unsigned int v6[2] = __AudioConverterPrepare_block_invoke_3;
  void v6[3] = &unk_1E5687810;
  void v6[4] = a3;
  v6[5] = v8;
  dispatch_barrier_async(v5, v6);
  _Block_object_dispose(v8, 8);
  if (v5) {
    dispatch_release(v5);
  }
}

uint64_t APAC::MetadataBitStreamPacker::pack(uint64_t a1, uint64_t a2, int a3, __int16 *a4)
{
  uint64_t v20 = a2;
  uint64_t v21 = a2;
  uint64_t v5 = a2 + a3;
  uint64_t v22 = v5;
  uint64_t v23 = 0x2000000000;
  int v6 = a2 & 3;
  int v24 = v6;
  if (*((unsigned char *)a4 + 4) != 1 || (*((unsigned char *)a4 + 5) & 0xFE) != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v19 = "Metadata version mismatch";
    goto LABEL_28;
  }
  if (*a4 != -1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v19 = "metadata.header.syncWords has an incorrect value";
    goto LABEL_28;
  }
  if (a3 <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v19 = "Cannot pack metadata.header.syncWords";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, 0xFFFF, 0x10u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 15)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v19 = "Cannot pack metadata.header.chunkSize";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, (unsigned __int16)a4[1], 0x10u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v19 = "Cannot pack metadata.header.version.major";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, *((unsigned __int8 *)a4 + 4), 8u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v19 = "Cannot pack metadata.header.version.minor";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, *((unsigned __int8 *)a4 + 5), 8u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v19 = "Cannot pack metadata.header.informationFrame";
    goto LABEL_28;
  }
  uint64_t v9 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, *((unsigned __int8 *)a4 + 6), 1u);
  int v10 = *((unsigned __int8 *)a4 + 5);
  if (v10 == 3)
  {
    APAC::MetadataBitStreamPacker::packMetadataFrame(a1, (uint64_t)(a4 + 725540), *((unsigned __int8 *)a4 + 6), &v20);
  }
  else if (v10 == 2)
  {
    if (*((unsigned char *)a4 + 6)) {
      APAC::MetadataBitStreamPacker::packStaticMetadata(v9, (unsigned __int8 *)a4 + 8, &v20);
    }
    APAC::MetadataBitStreamPacker::packDynamicMetadata(a1, (unsigned __int8 *)a4 + 174192, &v20);
  }
  int v12 = v20;
  int v11 = v21;
  int v13 = HIDWORD(v23);
  AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)&v20);
  uint64_t v20 = a2;
  uint64_t v21 = a2;
  uint64_t v22 = v5;
  uint64_t v23 = 0x2000000000;
  int v24 = v6;
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, (unsigned __int16)*a4, 0x10u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 15)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v19 = "Cannot pack actualChunkSize";
LABEL_28:
    void *exception = v19;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v14 = 8 * (v11 - v12) - v13;
  unsigned int v15 = (v14 + 32) >> 3;
  if ((v14 & 7) != 0) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = v15;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, (unsigned __int16)(v16 - 4), 0x10u);
  AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)&v20);
  return v16;
}

uint64_t AT::TBitstreamWriter<unsigned int>::PutBits(uint64_t result, int a2, unsigned int a3)
{
  if (a3 < 0x20) {
    int v3 = ~(-1 << a3);
  }
  else {
    int v3 = -1;
  }
  unsigned int v4 = v3 & a2;
  int v5 = *(_DWORD *)(result + 28);
  if (*(_DWORD *)(result + 32))
  {
    int v6 = v5 - 24;
    if (v5 - 24 <= a3)
    {
      int v7 = *(_DWORD *)(result + 24);
      do
      {
        a3 -= v6;
        char v8 = (v7 << v6) | (v4 >> a3);
        uint64_t v9 = *(unsigned char **)(result + 8);
        *(void *)(result + 8) = v9 + 1;
        *uint64_t v9 = v8;
        int v10 = *(_DWORD *)(result + 32) - 1;
        *(_DWORD *)(result + 32) = v10;
        *(void *)(result + 24) = 0x2000000000;
        v4 &= ~(-1 << a3);
        int v5 = 32;
        if (a3 < 8) {
          break;
        }
        int v7 = 0;
        int v6 = 8;
      }
      while (v10);
    }
    if (a3)
    {
      *(_DWORD *)(result + 24) = (*(_DWORD *)(result + 24) << a3) | v4;
      *(_DWORD *)(result + 28) = v5 - a3;
    }
  }
  else
  {
    *(_DWORD *)(result + 28) = v5 - a3;
    if ((int)(v5 - a3) < 1)
    {
      int v11 = *(_DWORD *)(result + 24);
      unsigned int v12 = (v11 << v5) | (v4 >> (a3 - v5));
      int v13 = (v11 << a3) | v4;
      if (v5 == a3) {
        unsigned int v12 = v13;
      }
      *(_DWORD *)(result + 24) = v12;
      int v14 = *(_DWORD **)(result + 8);
      if ((uint64_t)(*(void *)(result + 16) - (void)v14) >= 4)
      {
        *int v14 = bswap32(v12);
        int v15 = *(_DWORD *)(result + 28);
        *(_DWORD *)(result + 24) = v4 & ~(-1 << -(char)v15);
        *(_DWORD *)(result + 28) = v15 + 32;
        int v14 = *(_DWORD **)(result + 8);
      }
      *(void *)(result + 8) = v14 + 1;
    }
    else
    {
      *(_DWORD *)(result + 24) = (*(_DWORD *)(result + 24) << a3) | v4;
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packStaticMetadata(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned int v4 = a2 + 424;
  int v5 = a2 + 428;
  int v6 = a2 + 27864;
  int v7 = a2 + 173156;
  uint64_t v8 = APAC::MetadataBitStreamPacker::packReferenceScreen(a1, a2, a3);
  uint64_t v9 = APAC::MetadataBitStreamPacker::packCodeBookData(v8, v4, a3);
  uint64_t v10 = APAC::MetadataBitStreamPacker::packGroupStaticData(v9, v5, a3);
  uint64_t v11 = APAC::MetadataBitStreamPacker::packSceneComponenentStaticData(v10, v6, a3);
  return APAC::MetadataBitStreamPacker::packExtendedData(v11, v7, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packDynamicMetadata(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  int v5 = a2 + 32516;
  int v6 = a2 + 1271024;
  APAC::MetadataBitStreamPacker::packGroupDynamicData(a1, a2, a3);
  uint64_t v7 = APAC::MetadataBitStreamPacker::packSceneComponenentDynamicData(a1, v5, a3);
  return APAC::MetadataBitStreamPacker::packExtendedData(v7, v6, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packMetadataFrame(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v16 = "Cannot pack mdFrame.mRendererMetadataPresent";
    goto LABEL_17;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 1), 1u);
  if (*(unsigned char *)(a2 + 1))
  {
    if (a3)
    {
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v16 = "Cannot pack glbCfg.mHasData";
        goto LABEL_17;
      }
      uint64_t v9 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 16), 1u);
      if (*(unsigned char *)(a2 + 16)) {
        APAC::MetadataBitStreamPacker::packGlobalConfig(v9, a2 + 16, a4);
      }
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 10)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v16 = "Cannot pack mdFrame.mRendererMetadata.mGroupCount";
        goto LABEL_17;
      }
      uint64_t v10 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int16 *)(a2 + 8), 0xBu);
      if (*(_WORD *)(a2 + 8))
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = 48 * *(unsigned __int16 *)(a2 + 8);
        while (1)
        {
          uint64_t v14 = *(void *)(a2 + 4784);
          if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 4792) - v14) >> 4) <= v12) {
            break;
          }
          uint64_t v10 = APAC::MetadataBitStreamPacker::packGroupConfig(v10, (unsigned __int16 *)(v14 + v11), a4);
          ++v12;
          v11 += 48;
          if (v13 == v11) {
            goto LABEL_12;
          }
        }
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v16 = "metadata.mMetadataFrame.mRendererMetadata.mGroupConfig does not have enough elements";
LABEL_17:
        void *exception = v16;
        __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
      }
    }
LABEL_12:
    return APAC::MetadataBitStreamPacker::packRendererMetadata(a1, (unsigned __int16 *)(a2 + 8), a4);
  }
  return result;
}

uint64_t AT::TBitstreamWriter<unsigned int>::Flush(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 28);
  if ((v2 & 7) != 0)
  {
    uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits(result, 0, *(_DWORD *)(result + 28) & 7);
    int v2 = *(_DWORD *)(v1 + 28);
  }
  if (v2 == 32)
  {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 8);
    int v4 = 24 - v2;
    do
    {
      *(unsigned char *)uint64_t v3 = *(_DWORD *)(v1 + 24) >> v4;
      uint64_t v3 = *(void *)(v1 + 8) + 1;
      *(void *)(v1 + 8) = v3;
      v4 -= 8;
    }
    while (v4 != -8);
  }
  *(_DWORD *)(v1 + 28) = 32;
  *(_DWORD *)(v1 + 32) = v3 & 3;
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packGlobalConfig(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unint64_t v12 = "Cannot pack glbCfg.mNumParameters";
LABEL_37:
    void *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int16 *)(a2 + 2), 0xBu);
  uint64_t v6 = *(unsigned __int16 *)(a2 + 2);
  if (*(_WORD *)(a2 + 2))
  {
    uint64_t v7 = (_WORD *)(a2 + 4);
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        unint64_t v12 = "Cannot pack glbCfg.mParamIndexList[n]";
        goto LABEL_37;
      }
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)*v7, 0xBu);
      switch(*v7)
      {
        case 0:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mApplyPostProcReverb";
            goto LABEL_37;
          }
          int v8 = *(unsigned __int8 *)(a2 + 4100);
          goto LABEL_12;
        case 1:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mIs6DoF";
            goto LABEL_37;
          }
          int v8 = *(unsigned __int8 *)(a2 + 4101);
          goto LABEL_12;
        case 2:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mHasSceneRadiationPattern";
            goto LABEL_37;
          }
          int v8 = *(unsigned __int8 *)(a2 + 4102);
LABEL_12:
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 1;
          goto LABEL_31;
        case 3:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mTargetPlaybackSystemIndex";
            goto LABEL_37;
          }
          int v8 = *(unsigned __int8 *)(a2 + 4103);
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 5;
          goto LABEL_31;
        case 4:
          uint64_t result = APAC::MetadataBitStreamPacker::packAuthoringInformation(result, (unsigned __int8 *)(a2 + 4106), a3);
          goto LABEL_32;
        case 5:
          uint64_t result = APAC::MetadataBitStreamPacker::packReferenceScreen(result, a2 + 4116, a3);
          goto LABEL_32;
        case 6:
          uint64_t result = APAC::MetadataBitStreamPacker::packDBMD(result, (unsigned __int8 *)(a2 + 4156), a3);
          goto LABEL_32;
        case 7:
          uint64_t result = APAC::MetadataBitStreamPacker::packBinauralization(result, (unsigned __int8 *)(a2 + 4480), a3);
          goto LABEL_32;
        case 8:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mHCFilter.mDataLocationIndex";
            goto LABEL_37;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 4496), 2u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mHCFilter.mCustomData_TableID";
            goto LABEL_37;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int16 *)(a2 + 4498), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mHCFilter.mCustomData_EntryID";
            goto LABEL_37;
          }
          int v8 = *(unsigned __int16 *)(a2 + 4500);
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 9;
          goto LABEL_31;
        case 9:
          uint64_t result = APAC::MetadataBitStreamPacker::packSPAD(result, (unsigned __int8 *)(a2 + 4504), a3);
          goto LABEL_32;
        case 0xA:
          uint64_t result = APAC::MetadataBitStreamPacker::packDistanceAttenuation(result, (unsigned __int8 *)(a2 + 4648), a3);
          goto LABEL_32;
        case 0xB:
          uint64_t result = APAC::MetadataBitStreamPacker::packPosition(result, (unsigned __int8 *)(a2 + 4668), a3);
          goto LABEL_32;
        case 0xC:
          uint64_t result = APAC::MetadataBitStreamPacker::packGenericRenderingConfig(result, (unsigned __int8 *)(a2 + 4716), a3);
          goto LABEL_32;
        case 0xD:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 5)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mContentKind";
            goto LABEL_37;
          }
          int v8 = *(unsigned __int8 *)(a2 + 4104);
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 6;
          goto LABEL_31;
        case 0xE:
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, 0, 4u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unint64_t v12 = "Cannot pack glbCfg.mMaxNumBlocks";
            goto LABEL_37;
          }
          int v8 = *(unsigned __int8 *)(a2 + 4105);
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 8;
LABEL_31:
          uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits(v9, v8, v10);
LABEL_32:
          ++v7;
          if (!--v6) {
            return result;
          }
          break;
        case 0xF:
          uint64_t result = APAC::MetadataBitStreamPacker::packChannelBedHeadphoneMetadata(result, (unsigned __int8 *)(a2 + 4736), (uint64_t)a3);
          goto LABEL_32;
        default:
          goto LABEL_32;
      }
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packGroupConfig(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack gpCfg.mGroupID";
    goto LABEL_48;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 0xBu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack gpCfg.mIsGlobal";
    goto LABEL_48;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 2), 1u);
  if (*((unsigned char *)a2 + 2)) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack gpCfg.mIsPerASC";
    goto LABEL_48;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 3), 1u);
  int v6 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (!*((unsigned char *)a2 + 3))
  {
    if (v6 <= 10)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v13 = "Cannot pack gpCfg.mMemberCount";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[9], 0xBu);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack gpCfg.mHasConjunctMembers";
      }
      else
      {
        uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 20), 1u);
        if (*((unsigned char *)a2 + 20))
        {
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
          {
            int v8 = a2 + 11;
            goto LABEL_26;
          }
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          uint64_t v13 = "Cannot pack gpCfg.mStartASCID";
        }
        else
        {
          if (!a2[9]) {
            return result;
          }
          uint64_t v10 = 0;
          uint64_t v11 = 2 * a2[9];
          while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
          {
            uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int16 *)(*((void *)a2 + 3) + v10), 0xBu);
            v10 += 2;
            if (v11 == v10) {
              return result;
            }
          }
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          uint64_t v13 = "Cannot pack gpCfg.mASCIDList[n]";
        }
      }
    }
LABEL_48:
    void *exception = v13;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v6 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack gpCfg.mASCID";
    goto LABEL_48;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 0xBu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack gpCfg.mASCType";
    goto LABEL_48;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 6), 3u);
  int v7 = *((unsigned __int8 *)a2 + 6);
  if (v7 == 2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
    {
      int v8 = a2 + 7;
      goto LABEL_26;
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack gpCfg.mHOAID";
    goto LABEL_48;
  }
  if (v7 == 1)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v13 = "Cannot pack gpCfg.mObjectID";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 0xBu);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack gpCfg.mIsObjectInBed";
      }
      else
      {
        uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 10), 1u);
        if (!*((unsigned char *)a2 + 10)) {
          return result;
        }
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
        {
          int v8 = a2 + 6;
          goto LABEL_26;
        }
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack gpCfg.mBedASCID";
      }
    }
    goto LABEL_48;
  }
  if (*((unsigned char *)a2 + 6)) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack gpCfg.mChBedID";
    goto LABEL_48;
  }
  int v8 = a2 + 8;
LABEL_26:
  int v9 = *v8;
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v9, 0xBu);
}

uint64_t APAC::MetadataBitStreamPacker::packRendererMetadata(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = "Cannot pack rMd.mGroupCount";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 0xBu);
  if (*a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 40200 * *a2;
    do
    {
      uint64_t result = APAC::MetadataBitStreamPacker::packGroupData(a1, (unsigned __int8 *)(*((void *)a2 + 600) + v7), a3);
      v7 += 40200;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packGroupData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack gpData.mHasData";
    goto LABEL_12;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack gpData.mGroupID";
    goto LABEL_12;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 0xBu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack gpData.mNumBlocks";
LABEL_12:
    void *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 6u);
  uint64_t v7 = a2[4];
  if (a2[4])
  {
    uint64_t v8 = (unsigned __int16 *)(a2 + 8);
    do
    {
      uint64_t result = APAC::MetadataBitStreamPacker::packBlockData(a1, v8, a3);
      v8 += 628;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packBlockData(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack blkMd.mRtime";
    goto LABEL_12;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 0xAu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack blkMd.mHasInterpolationLength";
    goto LABEL_12;
  }
  uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 2), 1u);
  if (!*((unsigned char *)a2 + 2)) {
    goto LABEL_6;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack blkMd.mInterpolationLength";
LABEL_12:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 0xBu);
LABEL_6:
  return APAC::MetadataBitStreamPacker::packRendererData(v5, (uint64_t)(a2 + 4), a3);
}

uint64_t APAC::MetadataBitStreamPacker::packRendererData(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack rData.mNumParameters";
    goto LABEL_58;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int16 *)(a2 + 2), 0xBu);
  uint64_t v6 = *(unsigned __int16 *)(a2 + 2);
  if (*(_WORD *)(a2 + 2))
  {
    uint64_t v7 = (_WORD *)(a2 + 4);
    do
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack rData.mParamIndexList[n]";
        goto LABEL_58;
      }
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)*v7, 0xBu);
      switch(*v7)
      {
        case 0:
          uint64_t v8 = (unsigned __int8 *)(a2 + 68);
          goto LABEL_43;
        case 1:
          uint64_t result = APAC::MetadataBitStreamPacker::packObjectSpread(result, (unsigned __int8 *)(a2 + 116), a3);
          goto LABEL_52;
        case 2:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mGain";
            goto LABEL_58;
          }
          int v9 = *(_DWORD *)(a2 + 132);
          goto LABEL_50;
        case 3:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mObjectDiffuse";
            goto LABEL_58;
          }
          int v9 = *(_DWORD *)(a2 + 136);
          goto LABEL_50;
        case 4:
          uint64_t result = APAC::MetadataBitStreamPacker::packObjectChannelLock(result, a2 + 140, a3);
          goto LABEL_52;
        case 5:
          uint64_t result = APAC::MetadataBitStreamPacker::packObjectDivergence(result, a2 + 148, a3);
          goto LABEL_52;
        case 6:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mIsScreenSizeAdaptationEnabled";
            goto LABEL_58;
          }
          int v9 = *(unsigned __int8 *)(a2 + 168);
          goto LABEL_46;
        case 7:
          uint64_t result = APAC::MetadataBitStreamPacker::packZoneExclusion(result, (unsigned __int8 *)(a2 + 172), a3);
          goto LABEL_52;
        case 8:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mBinauralizationPreset";
            goto LABEL_58;
          }
          int v9 = *(unsigned __int8 *)(a2 + 1037);
          goto LABEL_35;
        case 9:
          uint64_t result = APAC::MetadataBitStreamPacker::packSceneReverb(result, (unsigned __int8 *)(a2 + 568), a3);
          goto LABEL_52;
        case 0xA:
          uint64_t result = APAC::MetadataBitStreamPacker::packPostProcReverb(result, (unsigned __int8 *)(a2 + 780), a3);
          goto LABEL_52;
        case 0xB:
          uint64_t result = APAC::MetadataBitStreamPacker::packRadiationPattern(result, (unsigned __int8 *)(a2 + 792), a3);
          goto LABEL_52;
        case 0xC:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mHPVirtualize.mBypass";
            goto LABEL_58;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1024), 1u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mHPVirtualize.mHasDRR";
            goto LABEL_58;
          }
          uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1025), 1u);
          if (!*(unsigned char *)(a2 + 1025)) {
            goto LABEL_52;
          }
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mHPVirtualize.mDRR";
LABEL_58:
            void *exception = v13;
            __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
          }
          int v9 = *(_DWORD *)(a2 + 1028);
LABEL_50:
          uint64_t v10 = (uint64_t)a3;
          unsigned int v11 = 32;
          break;
        case 0xD:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mHeadLock.mHeadLocked";
            goto LABEL_58;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1032), 1u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mHeadLock.mIsExternalized";
            goto LABEL_58;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1033), 1u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mHeadLock.mReference";
            goto LABEL_58;
          }
          int v9 = *(unsigned __int8 *)(a2 + 1034);
          goto LABEL_35;
        case 0xE:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mParallax";
            goto LABEL_58;
          }
          int v9 = *(unsigned __int8 *)(a2 + 1035);
          goto LABEL_46;
        case 0xF:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mPreferredDoF.mDoFIndex";
            goto LABEL_58;
          }
          int v9 = *(unsigned __int8 *)(a2 + 1036);
LABEL_35:
          uint64_t v10 = (uint64_t)a3;
          unsigned int v11 = 3;
          break;
        case 0x10:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mFieldOfView.mAzimuth";
            goto LABEL_58;
          }
          int v9 = *(_DWORD *)(a2 + 1040);
          goto LABEL_50;
        case 0x11:
          uint64_t result = APAC::MetadataBitStreamPacker::packMaskingZone(result, (unsigned __int8 *)(a2 + 1044), a3);
          goto LABEL_52;
        case 0x12:
          uint64_t v8 = (unsigned __int8 *)(a2 + 1096);
          goto LABEL_43;
        case 0x13:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mHOA_Radius";
            goto LABEL_58;
          }
          int v9 = *(_DWORD *)(a2 + 1144);
          goto LABEL_50;
        case 0x14:
          uint64_t v8 = (unsigned __int8 *)(a2 + 1148);
LABEL_43:
          uint64_t result = APAC::MetadataBitStreamPacker::packPosition(result, v8, a3);
          goto LABEL_52;
        case 0x15:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mHOA_InteriorOrExterior";
            goto LABEL_58;
          }
          int v9 = *(unsigned __int8 *)(a2 + 1196);
LABEL_46:
          uint64_t v10 = (uint64_t)a3;
          unsigned int v11 = 1;
          break;
        case 0x16:
          uint64_t result = APAC::MetadataBitStreamPacker::packHOARenderingMatrix(result, (unsigned __int8 *)(a2 + 1200), a3);
          goto LABEL_52;
        case 0x17:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mNFCRefDist";
            goto LABEL_58;
          }
          int v9 = *(_DWORD *)(a2 + 1240);
          goto LABEL_50;
        case 0x18:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v13 = "Cannot pack rData.mPropagationDelay.mProcessingIndex";
            goto LABEL_58;
          }
          int v9 = *(unsigned __int8 *)(a2 + 1244);
          uint64_t v10 = (uint64_t)a3;
          unsigned int v11 = 2;
          break;
        default:
          goto LABEL_52;
      }
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits(v10, v9, v11);
LABEL_52:
      ++v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packPosition(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack pos.mPositionPresent";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v10 = "Cannot pack pos.mIsCartesian";
      goto LABEL_21;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
    if (a2[1])
    {
      uint64_t v5 = 0;
      while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)&a2[v5 + 20], 0x20u);
        v5 += 4;
        if (v5 == 12) {
          goto LABEL_13;
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v10 = "Cannot pack pos.mCoordinate[n]";
LABEL_21:
      void *exception = v10;
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v10 = "Cannot pack pos.mAzimuth";
      goto LABEL_21;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v10 = "Cannot pack pos.mElevation";
      goto LABEL_21;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v10 = "Cannot pack pos.mRadius";
      goto LABEL_21;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
  }
LABEL_13:
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack pos.mRotationPresent";
    goto LABEL_21;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[16], 1u);
  if (a2[16])
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 + 32;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
    {
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)&v8[v7], 0x20u);
      v7 += 4;
      if (v7 == 16) {
        return result;
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack pos.mQuaternion[n]";
    goto LABEL_21;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packObjectSpread(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack spread.mIsCartesian";
    goto LABEL_16;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack spread.mWidth";
    goto LABEL_16;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack spread.mHeight";
    goto LABEL_16;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack spread.mHasDepth";
    goto LABEL_16;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (!a2[1]) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack spread.mDepth";
LABEL_16:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = *((_DWORD *)a2 + 3);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packObjectChannelLock(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack chLock.mHasMaxDistance";
    goto LABEL_10;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1), 1u);
  if (!*(unsigned char *)(a2 + 1)) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack chLock.mMaxDistance";
LABEL_10:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = *(_DWORD *)(a2 + 4);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packObjectDivergence(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack objDiv.mDivergence";
    goto LABEL_15;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)a2, 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack objDiv.mIsCartesian";
    goto LABEL_15;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 4), 1u);
  int v5 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (*(unsigned char *)(a2 + 4))
  {
    if (v5 > 31)
    {
      int v6 = (int *)(a2 + 12);
      goto LABEL_8;
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack objDiv.mPositionRange";
LABEL_15:
    void *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v5 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack objDiv.mAzimuthRange";
    goto LABEL_15;
  }
  int v6 = (int *)(a2 + 16);
LABEL_8:
  int v7 = *v6;
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packZoneExclusion(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v14 = "Cannot pack zoneExclusion.mIsZoneDefined";
    goto LABEL_45;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v14 = "Cannot pack zoneExclusion.mKeepPreviousZone";
    goto LABEL_45;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1]) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v14 = "Cannot pack zoneExclusion.mIsCartesian";
    goto LABEL_45;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 1u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v14 = "Cannot pack zoneExclusion.mNumZones";
LABEL_45:
    void *exception = v14;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 4u);
  uint64_t v6 = a2[3];
  if (a2[3])
  {
    int v7 = a2 + 19;
    uint64_t v8 = (int *)(a2 + 36);
    do
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v14 = "Cannot pack zoneExclusion.mUsePreDefinedZone[n]";
        goto LABEL_45;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(v7 - 15), 1u);
      if (*(v7 - 15))
      {
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          uint64_t v14 = "Cannot pack zoneExclusion.mZoneIndex[n]";
          goto LABEL_45;
        }
        int v9 = *v7;
        uint64_t v10 = (uint64_t)a3;
        unsigned int v11 = 4;
      }
      else
      {
        int v12 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
        if (a2[2])
        {
          if (v12 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMinX";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v8, 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMaxX";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[1], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMinY";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[2], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMaxY";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[3], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMinZ";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[4], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMaxZ";
            goto LABEL_45;
          }
          int v9 = v8[5];
        }
        else
        {
          if (v12 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.spherical.mMinAzimuth";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v8, 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.spherical.mMaxAzimuth";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[1], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.spherical.mMinElevation";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[2], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.spherical.mMaxElevation";
            goto LABEL_45;
          }
          int v9 = v8[3];
        }
        uint64_t v10 = (uint64_t)a3;
        unsigned int v11 = 32;
      }
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits(v10, v9, v11);
      ++v7;
      v8 += 6;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packMaskingZone(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v12 = "Cannot pack maskingZone.mIsZoneDefined";
    goto LABEL_44;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v12 = "Cannot pack maskingZone.mUsePreDefinedZone";
    goto LABEL_44;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  int v6 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (!a2[1])
  {
    if (v6 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v12 = "Cannot pack maskingZone.mIsCartesian";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 1u);
      int v10 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
      if (a2[2])
      {
        if (v10 <= 31)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          int v12 = "Cannot pack maskingZone.mZone.mMinX";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            int v12 = "Cannot pack maskingZone.mZone.mMaxX";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
            {
              exceptiouint64_t n = __cxa_allocate_exception(8uLL);
              int v12 = "Cannot pack maskingZone.mZone.mMinY";
            }
            else
            {
              AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
              if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
              {
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                int v12 = "Cannot pack maskingZone.mZone.mMaxY";
              }
              else
              {
                AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
                if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
                {
                  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                  int v12 = "Cannot pack maskingZone.mZone.mMinZ";
                }
                else
                {
                  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
                  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
                  {
                    int v7 = *((_DWORD *)a2 + 6);
LABEL_24:
                    uint64_t v8 = (uint64_t)a3;
                    unsigned int v9 = 32;
                    goto LABEL_25;
                  }
                  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                  int v12 = "Cannot pack maskingZone.mZone.mMaxZ";
                }
              }
            }
          }
        }
      }
      else if (v10 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v12 = "Cannot pack maskingZone.mZone.mMinAzimuth";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 7), 0x20u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          int v12 = "Cannot pack maskingZone.mZone.mMaxAzimuth";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 8), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            int v12 = "Cannot pack maskingZone.mZone.mMinElevation";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 9), 0x20u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
            {
              exceptiouint64_t n = __cxa_allocate_exception(8uLL);
              int v12 = "Cannot pack maskingZone.mZone.mMaxElevation";
            }
            else
            {
              AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 10), 0x20u);
              if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
              {
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                int v12 = "Cannot pack maskingZone.mZone.mMinDistance";
              }
              else
              {
                AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 11), 0x20u);
                if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
                {
                  int v7 = *((_DWORD *)a2 + 12);
                  goto LABEL_24;
                }
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                int v12 = "Cannot pack maskingZone.mZone.mMaxDistance";
              }
            }
          }
        }
      }
    }
LABEL_44:
    void *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v6 <= 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v12 = "Cannot pack maskingZone.mZoneIndex";
    goto LABEL_44;
  }
  int v7 = a2[3];
  uint64_t v8 = (uint64_t)a3;
  unsigned int v9 = 4;
LABEL_25:
  return AT::TBitstreamWriter<unsigned int>::PutBits(v8, v7, v9);
}

uint64_t APAC::MetadataBitStreamPacker::packSceneReverb(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v11 = "Cannot pack reverb.mReverbProcIndex";
    goto LABEL_28;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  int v6 = *a2;
  if (v6 != 3)
  {
    if (v6 != 2)
    {
      if (v6 != 1) {
        return result;
      }
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
      {
        int v7 = *((unsigned __int16 *)a2 + 1);
LABEL_12:
        uint64_t v8 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7, 0xAu);
        return APAC::MetadataBitStreamPacker::packParametricReverb(v8, (uint64_t)(a2 + 144), a3);
      }
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v11 = "Cannot pack reverb.mAUSMReverbPreset";
      goto LABEL_28;
    }
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 1)
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 2u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 8)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 3), 9u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 >= 9)
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 4), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
          {
            int v7 = *((unsigned __int16 *)a2 + 5);
            goto LABEL_12;
          }
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          unsigned int v11 = "Cannot pack reverb.mFallbackCustomeIR.mAUSMReverbPreset";
LABEL_28:
          void *exception = v11;
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
LABEL_25:
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        unsigned int v11 = "Cannot pack reverb.mCustomData_EntryID";
        goto LABEL_28;
      }
LABEL_24:
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v11 = "Cannot pack reverb.mCustomData_TableID";
      goto LABEL_28;
    }
LABEL_23:
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v11 = "Cannot pack reverb.mDataLocationIndex";
    goto LABEL_28;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1) {
    goto LABEL_23;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8) {
    goto LABEL_24;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 3), 9u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8) {
    goto LABEL_25;
  }
  uint64_t v9 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 4), 9u);
  return APAC::MetadataBitStreamPacker::packFallbackRoomGeometry(v9, (uint64_t)(a2 + 12), a3);
}

{
  uint64_t result;
  int v6;
  int v7;
  int v8;
  void *exception;
  const char *v10;
  uint64_t vars8;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v10 = "Cannot pack sR.reverbProcIndex";
    goto LABEL_19;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  int v6 = *a2;
  if (v6 != 2)
  {
    if (v6 != 1) {
      return result;
    }
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
    {
      int v7 = *((unsigned __int16 *)a2 + 1);
      goto LABEL_9;
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v10 = "Cannot pack sR.reverbProcPreset";
LABEL_19:
    void *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v10 = "Cannot pack sR.codeBookID";
    goto LABEL_19;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[5], 4u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v10 = "Cannot pack sR.IRFilterID";
    goto LABEL_19;
  }
  int v7 = *((unsigned __int16 *)a2 + 3);
LABEL_9:
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7, 0xAu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v10 = "Cannot pack sR.mixLevel";
    goto LABEL_19;
  }
  uint64_t v8 = a2[4];
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8, 7u);
}

uint64_t APAC::MetadataBitStreamPacker::packPostProcReverb(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack ppReverb.mReverbProcIndex";
    goto LABEL_13;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  if (*a2 != 1) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack ppReverb.mEarlyReflectionTimeProvided";
    goto LABEL_13;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (!a2[1]) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack ppReverb.mEarlyReflectionTime";
LABEL_13:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = *((_DWORD *)a2 + 1);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packRadiationPattern(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack radPattern.mAuSMProcIndex";
    goto LABEL_20;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  switch(*a2)
  {
    case 1u:
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v8 = "Cannot pack radPattern.mSourceType";
LABEL_20:
        void *exception = v8;
        __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
      }
      int v6 = *((unsigned __int16 *)a2 + 1);
LABEL_10:
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0xAu);
    case 2u:
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v8 = "Cannot pack radPattern.mDataLocationIndex";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 2u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          uint64_t v8 = "Cannot pack radPattern.mCustomData_TableID";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 3), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 9)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v8 = "Cannot pack radPattern.mCustomData_EntryID";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 4), 9u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
            {
              int v6 = *((unsigned __int16 *)a2 + 5);
              goto LABEL_10;
            }
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v8 = "Cannot pack radPattern.mFallbackCustomIR.mSourceType";
          }
        }
      }
      goto LABEL_20;
    case 3u:
      return APAC::MetadataBitStreamPacker::packParametricRadiationPattern(result, a2 + 16, a3);
    case 4u:
      return APAC::MetadataBitStreamPacker::packHOADirectivityModel(result, (void *)a2 + 22, a3);
    default:
      return result;
  }
}

{
  uint64_t result;
  int v6;
  void *exception;
  const char *v8;
  uint64_t vars8;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack rP.isPHASE";
    goto LABEL_13;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack rP.AuSMProcIndex";
    goto LABEL_13;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 3u);
  if (a2[1] != 1) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack rP.sourceType";
LABEL_13:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = *((unsigned __int16 *)a2 + 1);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0xAu);
}

uint64_t APAC::MetadataBitStreamPacker::packHOARenderingMatrix(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v15 = "Cannot pack matrix.mDataLocationIndex";
    goto LABEL_19;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 2u);
  int v6 = *a2;
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v15 = "Cannot pack matrix.mHOAOrder";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[6], 4u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          int v15 = "Cannot pack matrix.mChannelLayoutTag";
        }
        else
        {
          uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
          uint64_t v8 = 0;
          uint64_t v9 = 0;
          uint64_t v10 = (a2[6] + 1) * (a2[6] + 1);
          uint64_t v11 = *((unsigned __int16 *)a2 + 4);
          while (1)
          {
            uint64_t v12 = v8;
            uint64_t v13 = v11;
            if (v11) {
              break;
            }
LABEL_16:
            ++v9;
            v8 += 4 * v11;
            if (v9 == v10) {
              return result;
            }
          }
          while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
          {
            uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 2) + v12), 0x20u);
            v12 += 4;
            if (!--v13) {
              goto LABEL_16;
            }
          }
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          int v15 = "Cannot pack matrix.mCoeff[idx]";
        }
      }
LABEL_19:
      void *exception = v15;
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    if (*a2) {
      return result;
    }
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v15 = "Cannot pack matrix.mCustomData_TableID";
    goto LABEL_19;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 9u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v15 = "Cannot pack matrix.mCustomData_EntryID";
    goto LABEL_19;
  }
  int v7 = *((unsigned __int16 *)a2 + 2);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7, 9u);
}

uint64_t APAC::MetadataBitStreamPacker::packParametricRadiationPattern(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v15 = "Cannot pack parametric.mDirectivityModel";
    goto LABEL_33;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 5u);
  int v6 = *a2;
  if (v6 == 3)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v15 = "Cannot pack parametric.mSphereRadius";
      goto LABEL_33;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 38), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v15 = "Cannot pack parametric.mCapOpeningAngle";
      goto LABEL_33;
    }
    int v10 = *((_DWORD *)a2 + 39);
    return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v10, 0x20u);
  }
  if (v6 != 2)
  {
    if (v6 != 1) {
      return result;
    }
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
    {
      uint64_t v7 = *((unsigned int *)a2 + 1);
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)(v7 - 1), 0xAu);
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 4 * v7;
        while (1)
        {
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 17) {
            goto LABEL_27;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 1) + v8) - 1, 0x12u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            int v15 = "Cannot pack parametric.mPattern[sb]";
            goto LABEL_33;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 4) + v8), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31) {
            break;
          }
          uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 7) + v8), 0x20u);
          v8 += 4;
          if (v9 == v8) {
            return result;
          }
        }
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v15 = "Cannot pack parametric.mSharpness[sb]";
        goto LABEL_33;
      }
      return result;
    }
LABEL_35:
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v15 = "Cannot pack tmpInt";
    goto LABEL_33;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 17) {
    goto LABEL_35;
  }
  uint64_t v11 = *((unsigned int *)a2 + 1);
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (int)v11 - 1, 0x12u);
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 4 * v11;
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 17)
      {
LABEL_27:
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v15 = "Cannot pack tmpFreq";
        goto LABEL_33;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 1) + v12) - 1, 0x12u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v15 = "Cannot pack parametric.mInnerAngle[sb]";
        goto LABEL_33;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 10) + v12), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v15 = "Cannot pack parametric.mOuterAngle[sb]";
        goto LABEL_33;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 13) + v12), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31) {
        break;
      }
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 16) + v12), 0x20u);
      v12 += 4;
      if (v13 == v12) {
        return result;
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v15 = "Cannot pack parametric.mOuterGain[sb]";
LABEL_33:
    void *exception = v15;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packHOADirectivityModel(uint64_t a1, void *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack tmpUI10";
    goto LABEL_13;
  }
  uint64_t v5 = *(unsigned __int16 *)a2;
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)(v5 - 1), 0xAu);
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 2 * v5;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 12)
    {
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)(*(_WORD *)(a2[1] + v7) - 1), 0xDu);
      v7 += 2;
      if (v8 == v7) {
        goto LABEL_6;
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack tmpUI13";
LABEL_13:
    void *exception = v13;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
LABEL_6:
  uint64_t v9 = a2[4];
  if (a2[5] != v9)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
    {
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(v9 + 4 * v10), 0x20u);
      unint64_t v10 = v11;
      uint64_t v9 = a2[4];
      ++v11;
      if (v10 >= (a2[5] - v9) >> 2) {
        return result;
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack hoaModel.mCoeffs[n]";
    goto LABEL_13;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packParametricReverb(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mPreDelay.mHasData";
    goto LABEL_54;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 4), 1u);
  if (*(unsigned char *)(a2 + 4))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack reverbParams.mPreDelay.mValue";
      goto LABEL_54;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)a2, 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mRT60.mHasData";
    goto LABEL_54;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 12), 1u);
  if (*(unsigned char *)(a2 + 12))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack reverbParams.mRT60.mValue";
      goto LABEL_54;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 8), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mWetDryMix.mHasData";
    goto LABEL_54;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 20), 1u);
  if (*(unsigned char *)(a2 + 20))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack reverbParams.mWetDryMix.mValue";
      goto LABEL_54;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 16), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mReverbWidth.mHasData";
    goto LABEL_54;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 28), 1u);
  if (*(unsigned char *)(a2 + 28))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack reverbParams.mReverbWidth.mValue";
      goto LABEL_54;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 24), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mHFDampingCutoffFreq.mHasData";
    goto LABEL_54;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 36), 1u);
  if (*(unsigned char *)(a2 + 36))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack reverbParams.mHFDampingCutoffFreq.mValue";
      goto LABEL_54;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 32), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mEarlyReflectionOnly";
    goto LABEL_54;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 40), 1u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mEarlyReflectionLevel.mHasData";
    goto LABEL_54;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 48), 1u);
  if (*(unsigned char *)(a2 + 48))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack reverbParams.mEarlyReflectionLevel.mValue";
      goto LABEL_54;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 44), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mEarlyReflectionTime.mHasData";
    goto LABEL_54;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 56), 1u);
  if (*(unsigned char *)(a2 + 56))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack reverbParams.mEarlyReflectionTime.mValue";
      goto LABEL_54;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 52), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mLateReverbLevel.mHasData";
    goto LABEL_54;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 64), 1u);
  if (!*(unsigned char *)(a2 + 64)) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack reverbParams.mLateReverbLevel.mValue";
LABEL_54:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = *(_DWORD *)(a2 + 60);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packFallbackRoomGeometry(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  for (uint64_t i = 0; i != 40; i += 4)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v9 = "Cannot pack fallbackRoomGeometry.mOctaveBandRt60[n]";
      goto LABEL_14;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + i + 4), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v9 = "Cannot pack fallbackRoomGeometry.mOctaveBandEarlyRoomEnergy[n]";
      goto LABEL_14;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + i + 44), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v9 = "Cannot pack fallbackRoomGeometry.mOctaveBandLateRoomEnergy[n]";
      goto LABEL_14;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + i + 84), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 32)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack fallbackRoomGeometry.mRoomVolume";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 124), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack fallbackRoomGeometry.mRoomSurface";
LABEL_14:
    void *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = *(_DWORD *)(a2 + 128);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packAuthoringInformation(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack authorInfo.mAuthoringToolNameIndex";
    goto LABEL_20;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack authorInfo.mAuthoringToolVersion.mMajor";
    goto LABEL_20;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack authorInfo.mAuthoringToolVersion.mMinor";
    goto LABEL_20;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack authorInfo.mAuthoringToolVersion.mPatch";
    goto LABEL_20;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack authorInfo.mRendererNameIndex";
    goto LABEL_20;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack authorInfo.mRendererVersion.mMajor";
    goto LABEL_20;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[5], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack authorInfo.mRendererVersion.mMinor";
    goto LABEL_20;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[6], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack authorInfo.mRendererVersion.mPatch";
LABEL_20:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v5 = a2[7];
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v5, 8u);
}

uint64_t APAC::MetadataBitStreamPacker::packReferenceScreen(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unint64_t v10 = "Cannot pack refScreen.mAspectRatio";
    goto LABEL_27;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)a2, 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unint64_t v10 = "Cannot pack refScreen.mIsCartesian";
    goto LABEL_27;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 4), 1u);
  int v5 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (*(unsigned char *)(a2 + 4))
  {
    if (v5 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unint64_t v10 = "Cannot pack refScreen.mScreenCentrePosition.mX";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 8), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        unint64_t v10 = "Cannot pack refScreen.mScreenCentrePosition.mY";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 12), 0x20u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          unint64_t v10 = "Cannot pack refScreen.mScreenCentrePosition.mZ";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 16), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
          {
            int v6 = (int *)(a2 + 32);
            goto LABEL_14;
          }
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          unint64_t v10 = "Cannot pack refScreen.mScreenWidth.mX";
        }
      }
    }
LABEL_27:
    void *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v5 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unint64_t v10 = "Cannot pack refScreen.mScreenCentrePosition.mAzimuth";
    goto LABEL_27;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 20), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unint64_t v10 = "Cannot pack refScreen.mScreenCentrePosition.mElevation";
    goto LABEL_27;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 24), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unint64_t v10 = "Cannot pack refScreen.mScreenCentrePosition.mRadius";
    goto LABEL_27;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 28), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unint64_t v10 = "Cannot pack refScreen.mScreenWidth.mAzimuth";
    goto LABEL_27;
  }
  int v6 = (int *)(a2 + 36);
LABEL_14:
  int v7 = *v6;
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packDBMD(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack dbmd.mSurroundDownmix";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack dbmd.mSurroundToStereoDownmix";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack dbmd.mPositionAdjustment";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 3u);
  uint64_t v5 = 0;
  int v6 = a2 + 3;
  int v7 = (int *)(a2 + 16);
  do
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v13 = "Cannot pack dbmd.mIsAutoTrim[cfg]";
      goto LABEL_25;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6[v5], 1u);
    if (!v6[v5])
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack dbmd.mMixingGains[cfg].mFrontGain";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(v7 - 1), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack dbmd.mMixingGains[cfg].mBackGain";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v7, 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack dbmd.mMixingGains[cfg].mTopGain";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[1], 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack dbmd.mMixingGains[cfg].mEarLevelBalance";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[2], 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v13 = "Cannot pack dbmd.mMixingGains[cfg].mHeightBalance";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[3], 0x20u);
    }
    ++v5;
    v7 += 5;
  }
  while (v5 != 9);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v13 = "Cannot pack tmp";
LABEL_25:
    void *exception = v13;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t v8 = a2[192];
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (v8 - 1), 7u);
  if (v8)
  {
    unint64_t v10 = a2 + 193;
    do
    {
      int v11 = *v10++;
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v11, 1u);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packBinauralization(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack binaural.mIsDirectBinauralization";
    goto LABEL_27;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v11 = "Cannot pack binaural.mChannelLayoutTag";
      goto LABEL_27;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack binaural.mHRTFType";
    goto LABEL_27;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[8], 3u);
  int v6 = a2[8];
  if (v6 == 2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v11 = "Cannot pack binaural.mDataLocationIndex";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[14], 2u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v11 = "Cannot pack binaural.mCustomData_TableID";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 5), 9u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          int v11 = "Cannot pack binaural.mCustomData_EntryID";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 6), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 2)
          {
            int v7 = a2 + 15;
            unsigned int v8 = 3;
            goto LABEL_15;
          }
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          int v11 = "Cannot pack binaural.mFallbackCustomHRTF.mHRTFType";
        }
      }
    }
LABEL_27:
    void *exception = v11;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v6 != 1) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack binaural.mPredefinedIR_ID";
    goto LABEL_27;
  }
  int v7 = a2 + 9;
  unsigned int v8 = 8;
LABEL_15:
  int v9 = *v7;
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v9, v8);
}

{
  uint64_t result;
  int v6;
  void *exception;
  const char *v8;
  uint64_t vars8;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack binaural.isDirectBinauralization";
    goto LABEL_16;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v8 = "Cannot pack binaural.channelLayoutTag";
LABEL_16:
      void *exception = v8;
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack binaural.HRTFType";
    goto LABEL_16;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[8], 3u);
  if (a2[8] != 1) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack binaural.codeBookID";
    goto LABEL_16;
  }
  int v6 = a2[9];
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 4u);
}

uint64_t APAC::MetadataBitStreamPacker::packSPAD(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack spad.mDataLocationIndex";
    goto LABEL_10;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack spad.mCustomData_TableID";
    goto LABEL_10;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 9u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack spad.mCustomData_EntryID";
LABEL_10:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 2), 9u);
  return APAC::MetadataBitStreamPacker::packFallbackSPAD(v5, a2 + 8, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packDistanceAttenuation(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack distAttnParams.mAttnLawIndex";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack distAttnParams.mDistNorm";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack distAttnParams.mRefDistance";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack distAttnParams.mMaxDistance";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v8 = "Cannot pack distAttnParams.mAttnNormIndex";
LABEL_14:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v5 = a2[16];
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v5, 1u);
}

uint64_t APAC::MetadataBitStreamPacker::packGenericRenderingConfig(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack cfg.mHasPreset";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  int v5 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (*a2)
  {
    if (v5 > 10)
    {
      int v6 = *((unsigned __int16 *)a2 + 1);
      uint64_t v7 = (uint64_t)a3;
      unsigned int v8 = 11;
      goto LABEL_11;
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack cfg.mPresetIndex";
LABEL_21:
    void *exception = v11;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v5 <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack cfg.mDataLocationIndex";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack cfg.mCustomData_TableID";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 3), 9u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack cfg.mCustomData_EntryID";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 4), 9u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack cfg.mFallbackIndex";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 5), 0xBu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 16)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack cfg.mDataByteSize";
    goto LABEL_21;
  }
  int v6 = *((_DWORD *)a2 + 3);
  uint64_t v7 = (uint64_t)a3;
  unsigned int v8 = 17;
LABEL_11:
  return AT::TBitstreamWriter<unsigned int>::PutBits(v7, v6, v8);
}

uint64_t APAC::MetadataBitStreamPacker::packChannelBedHeadphoneMetadata(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  AT::TBitstreamWriter<unsigned int>::PutBits(a3, *a2 - 1, 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a3, a2[1] - 1, 8u);
  if (a2[1])
  {
    unint64_t v5 = 0;
    do
    {
      AT::TBitstreamWriter<unsigned int>::PutBits(a3, *(unsigned __int8 *)(*((void *)a2 + 1) + v5++), 3u);
      unint64_t v6 = a2[1];
    }
    while (v5 < v6);
    int v7 = -3 * v6 - 8;
  }
  else
  {
    int v7 = -8;
  }
  unsigned int v8 = v7 + 8 * *a2;
  return AT::TBitstreamWriter<unsigned int>::PutBits(a3, 0, v8);
}

uint64_t APAC::MetadataBitStreamPacker::packFallbackSPAD(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t v5 = 2;
  do
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v11 = "Cannot pack fallback.mDeviceID[n]";
      goto LABEL_25;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[v5], 8u);
    if (a2[v5]) {
      BOOL v6 = v5 == 9;
    }
    else {
      BOOL v6 = 1;
    }
    ++v5;
  }
  while (!v6);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack fallback.mOrientation";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 4u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack fallback.mNumMicrophones";
    goto LABEL_25;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 8u);
  uint64_t v8 = a2[1];
  if (a2[1])
  {
    uint64_t v9 = 0;
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v11 = "Cannot pack fallback.mMicType[n]";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(*((void *)a2 + 2) + v9), 4u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v11 = "Cannot pack fallback.mMicPosAzimuth[n]";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 5) + 4 * v9), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v11 = "Cannot pack fallback.mMicPosElevation[n]";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 8) + 4 * v9), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v11 = "Cannot pack fallback.mMicPosRadius[n]";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((void *)a2 + 11) + 4 * v9), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2) {
        break;
      }
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(*((void *)a2 + 14) + v9++), 3u);
      if (v8 == v9) {
        return result;
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v11 = "Cannot pack fallback.mMicDirection[n]";
LABEL_25:
    void *exception = v11;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packGroupDynamicData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack grpDD.hasData";
    goto LABEL_10;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack grpDD.groupCount";
LABEL_10:
    void *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 7u);
  if (a2[1])
  {
    unint64_t v6 = 0;
    int v7 = a2 + 4;
    do
    {
      uint64_t result = APAC::MetadataBitStreamPacker::packDynamicGroup(result, v7, a3);
      ++v6;
      v7 += 256;
    }
    while (v6 < a2[1]);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packSceneComponenentDynamicData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v15 = "Cannot pack scDD.ASCCount";
LABEL_15:
    void *exception = v15;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (*a2)
  {
    unint64_t v6 = 0;
    int v7 = a2 + 8728;
    for (uint64_t i = a2; ; i += 9752)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        int v15 = "Cannot pack scDD.ASCData[n].ASCType";
        goto LABEL_15;
      }
      uint64_t v9 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, i[4], 2u);
      int v10 = i[4];
      if (v10 == 2) {
        break;
      }
      if (v10 == 1)
      {
        APAC::MetadataBitStreamPacker::packObjectMetadata(v9, i + 72, a3);
        goto LABEL_12;
      }
      if (!i[4])
      {
        int v11 = i + 8;
LABEL_10:
        uint64_t v9 = APAC::MetadataBitStreamPacker::packCommonDynamicMetadata(v9, v11, a3);
      }
LABEL_12:
      uint64_t v12 = APAC::MetadataBitStreamPacker::packProprietaryDynamicData(v9, v7 - 1152, a3);
      uint64_t v13 = APAC::MetadataBitStreamPacker::packExtendedData(v12, v7 - 1028, a3);
      uint64_t result = APAC::MetadataBitStreamPacker::packExtendedData(v13, v7, a3);
      ++v6;
      v7 += 9752;
      if (v6 >= *a2) {
        return result;
      }
    }
    int v11 = i + 40;
    goto LABEL_10;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packExtendedData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v10 = "Cannot pack extData.hasData";
    goto LABEL_9;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v10 = "Cannot pack extData.chunkSize";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 0xAu);
      uint64_t v6 = *((unsigned __int16 *)a2 + 1) + 1;
      int v7 = a2 + 4;
      while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 7)
      {
        int v8 = *v7++;
        uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8, 8u);
        if (!--v6) {
          return result;
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v10 = "Cannot pack extData.dataChunk[n]";
    }
LABEL_9:
    void *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packCommonDynamicMetadata(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack cmmMd.hasADMMetadata";
    goto LABEL_31;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack cmmMd.absoluteDistance.hasData";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 1u);
  if (a2[4])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v8 = "Cannot pack cmmMd.absoluteDistance.distance";
      goto LABEL_31;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack cmmMd.gain.hasData";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[12], 1u);
  if (a2[12])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v8 = "Cannot pack cmmMd.gain.isDB";
      goto LABEL_31;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[13], 1u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      int v8 = "Cannot pack cmmMd.gain.gain";
      goto LABEL_31;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack cmmMd.headLocked";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[22], 1u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack cmmMd.headphoneVirtualize.hasData";
    goto LABEL_31;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[24], 1u);
  if (!a2[24]) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack cmmMd.headphoneVirtualize.bypass";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[25], 1u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack cmmMd.headphoneVirtualize.DRR";
LABEL_31:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = *((_DWORD *)a2 + 7);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0x20u);
}

void APAC::MetadataBitStreamPacker::packObjectMetadata(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack objMd.objectID";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack objMd.numBlocks";
LABEL_14:
    void *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 4u);
  if (a2[1])
  {
    unint64_t v5 = 0;
    int v6 = a2 + 4;
    do
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v9 = "Cannot pack objMd.blockData[n].isNewBlk";
        goto LABEL_14;
      }
      uint64_t v7 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v6, 1u);
      if (v5 && v5 < a2[1] - 1)
      {
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          uint64_t v9 = "Cannot pack objMd.blockData[n].rtime";
          goto LABEL_14;
        }
        uint64_t v7 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)v6 + 1), 0xAu);
      }
      APAC::MetadataBitStreamPacker::packBlockData(v7, (uint64_t)v6, 513, a3);
      ++v5;
      v6 += 500;
    }
    while (v5 < a2[1]);
  }
}

uint64_t APAC::MetadataBitStreamPacker::packProprietaryDynamicData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v12 = "Cannot pack pDD.hasData";
    goto LABEL_24;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v12 = "Cannot pack pDD.numParameters";
LABEL_24:
    void *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 5u);
  if (a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 90;
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v12 = "Cannot pack pDD.paramIndexList[n]";
        goto LABEL_24;
      }
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[v6], 5u);
      switch(v7[v6])
      {
        case 0u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v12 = "Cannot pack pDD.lookDirection.azimuth";
            goto LABEL_24;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v12 = "Cannot pack pDD.lookDirection.elevation";
            goto LABEL_24;
          }
          int v8 = *((_DWORD *)a2 + 2);
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 32;
          goto LABEL_20;
        case 1u:
          uint64_t result = APAC::MetadataBitStreamPacker::packAudioSceneMaskingZone(result, a2 + 12, a3);
          goto LABEL_21;
        case 2u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v12 = "Cannot pack pDD.preferredDoF";
            goto LABEL_24;
          }
          int v8 = a2[44];
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 3;
          goto LABEL_20;
        case 3u:
          uint64_t result = APAC::MetadataBitStreamPacker::packParametricReverb(result, a2 + 48, a3);
          goto LABEL_21;
        case 4u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v12 = "Cannot pack pDD.headLocked";
            goto LABEL_24;
          }
          int v8 = a2[88];
          goto LABEL_19;
        case 5u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v12 = "Cannot pack pDD.parallax";
            goto LABEL_24;
          }
          int v8 = a2[89];
LABEL_19:
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 1;
LABEL_20:
          uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits(v9, v8, v10);
LABEL_21:
          if (++v6 >= (unint64_t)a2[1]) {
            return result;
          }
          break;
        default:
          goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packAudioSceneMaskingZone(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v12 = "Cannot pack mZ.isZoneDefined";
    goto LABEL_45;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v12 = "Cannot pack mZ.keepPreviousZone";
    goto LABEL_45;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1]) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v12 = "Cannot pack mZ.usePreDefinedZone";
    goto LABEL_45;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 1u);
  int v6 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (!a2[2])
  {
    if (v6 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v12 = "Cannot pack mZ.cartesian";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 1u);
      int v10 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
      if (a2[3])
      {
        if (v10 <= 31)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          uint64_t v12 = "Cannot pack mZ.co_tu.cartesian.minX";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v12 = "Cannot pack mZ.co_tu.cartesian.maxX";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
            {
              exceptiouint64_t n = __cxa_allocate_exception(8uLL);
              uint64_t v12 = "Cannot pack mZ.co_tu.cartesian.minY";
            }
            else
            {
              AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
              if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
              {
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                uint64_t v12 = "Cannot pack mZ.co_tu.cartesian.maxY";
              }
              else
              {
                AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
                if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
                {
                  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 6), 0x20u);
                  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
                  {
                    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                    uint64_t v12 = "Cannot pack mZ.co_tu.cartesian.maxZ";
                    goto LABEL_45;
                  }
LABEL_25:
                  int v7 = *((_DWORD *)a2 + 7);
                  uint64_t v8 = (uint64_t)a3;
                  unsigned int v9 = 32;
                  goto LABEL_26;
                }
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                uint64_t v12 = "Cannot pack mZ.co_tu.cartesian.minZ";
              }
            }
          }
        }
      }
      else if (v10 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        uint64_t v12 = "Cannot pack mZ.co_tu.spherical.minAzimuth";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          uint64_t v12 = "Cannot pack mZ.co_tu.spherical.maxAzimuth";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            uint64_t v12 = "Cannot pack mZ.co_tu.spherical.minElevation";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
            {
              exceptiouint64_t n = __cxa_allocate_exception(8uLL);
              uint64_t v12 = "Cannot pack mZ.co_tu.spherical.maxElevation";
            }
            else
            {
              AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
              if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
              {
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                uint64_t v12 = "Cannot pack mZ.co_tu.spherical.minDistance";
              }
              else
              {
                AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 6), 0x20u);
                if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31) {
                  goto LABEL_25;
                }
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                uint64_t v12 = "Cannot pack mZ.co_tu.spherical.maxDistance";
              }
            }
          }
        }
      }
    }
LABEL_45:
    void *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v6 <= 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v12 = "Cannot pack mZ.zoneIndex";
    goto LABEL_45;
  }
  int v7 = a2[4];
  uint64_t v8 = (uint64_t)a3;
  unsigned int v9 = 4;
LABEL_26:
  return AT::TBitstreamWriter<unsigned int>::PutBits(v8, v7, v9);
}

uint64_t APAC::MetadataBitStreamPacker::packParametricReverb(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.hasPreDelay";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack pR.preDelayMSec";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.hasEarlyReflectionLevel";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack pR.earlyReflectionLevel";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.hasRT60";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 1u);
  if (a2[2])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack pR.RT60Msec";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.hasWetDryMix";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 1u);
  if (a2[3])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack pR.wetDryMix";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.hasReverbWidth";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 1u);
  if (a2[4])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack pR.reverbWidth";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 6), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.hasHighFrequencyDamping";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[5], 1u);
  if (a2[5])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack pR.highFrequencyDamping";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 7), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.hasEarlyReflectionOnly";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[6], 1u);
  if (a2[6])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v8 = "Cannot pack pR.earlyReflectionOnly";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[32], 1u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.hasEarlyReflectionTime";
    goto LABEL_52;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[7], 1u);
  if (!a2[7]) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot pack pR.earlyReflectionTimeMsec";
LABEL_52:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = *((_DWORD *)a2 + 9);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0x20u);
}

void APAC::MetadataBitStreamPacker::packBlockData(uint64_t a1, uint64_t a2, __int16 a3, _DWORD *a4)
{
  if (!*(unsigned char *)a2) {
    return;
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.cartesian";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 4), 1u);
  int v7 = a4[7] + 8 * (a4[4] - a4[2]) - 32;
  if (*(unsigned char *)(a2 + 4))
  {
    if (v7 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.position.co_ut.cartesian.X";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 8), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.position.co_ut.cartesian.Y";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 12), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.position.co_ut.cartesian.Z";
      goto LABEL_156;
    }
  }
  else
  {
    if (v7 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.position.co_ut.spherical.azimuth";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 8), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.position.co_ut.spherical.elevation";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 12), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.position.co_ut.spherical.distance";
      goto LABEL_156;
    }
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 16), 0x20u);
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.hasADMMetadata";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 20), 1u);
  if (!*(unsigned char *)(a2 + 20)) {
    return;
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.absoluteDistance.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 24), 1u);
  if (*(unsigned char *)(a2 + 24))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.absoluteDistance.distance";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 28), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.spread.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 32), 1u);
  if (*(unsigned char *)(a2 + 32))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.spread.width";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 36), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.spread.height";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 40), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.spread.depth";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 44), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.gain.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 48), 1u);
  if (*(unsigned char *)(a2 + 48))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.gain.isDB";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 49), 1u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.gain.gain";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 52), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.diffuse.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 56), 1u);
  if (*(unsigned char *)(a2 + 56))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.diffuse.diffuse";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 60), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.channelLock.channelLock";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 64), 1u);
  if (*(unsigned char *)(a2 + 64))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.channelLock.hasMaxDistance";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 65), 1u);
    if (*(unsigned char *)(a2 + 65))
    {
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        unsigned int v9 = "Cannot pack blkData.channelLock.maxDistance";
        goto LABEL_156;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 68), 0x20u);
    }
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.objectDivergence.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 72), 1u);
  if (*(unsigned char *)(a2 + 72))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.objectDivergence.objectDivergence";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 76), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.objectDivergence.positionOrAzimuthRange";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 88), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.screenRef";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 92), 1u);
  uint64_t v10 = a3;
  BOOL v12 = a3 == 1;
  int v11 = HIBYTE(a3);
  BOOL v12 = v12 && v11 == 1;
  int v13 = v12;
  if (v12)
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.importance.hasData";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 93), 1u);
    if (*(unsigned char *)(a2 + 93))
    {
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        unsigned int v9 = "Cannot pack blkData.importance.importance";
        goto LABEL_156;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 94), 4u);
    }
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.headLocked";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 95), 1u);
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.headphoneVirtualize.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 96), 1u);
  if (*(unsigned char *)(a2 + 96))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.headphoneVirtualize.bypass";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 97), 1u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v9 = "Cannot pack blkData.headphoneVirtualize.DRR";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 100), 0x20u);
  }
  if (v13)
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 > 3)
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 106), 4u);
      if (*(unsigned char *)(a2 + 106))
      {
        uint64_t v14 = 0;
        for (uint64_t i = (int *)(a2 + 140); ; i += 6)
        {
          int v16 = a4[7] + 8 * (a4[4] - a4[2]) - 32;
          if (*(unsigned char *)(a2 + 4))
          {
            if (v16 <= 31) {
              goto LABEL_110;
            }
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *i, 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31) {
              goto LABEL_111;
            }
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[1], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31) {
              goto LABEL_112;
            }
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[2], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31) {
              goto LABEL_113;
            }
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[3], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31) {
              goto LABEL_114;
            }
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[4], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31) {
              goto LABEL_115;
            }
            uint64_t v17 = (int *)(a2 + 24 * v14 + 160);
          }
          else
          {
            if (v16 <= 31) {
              goto LABEL_116;
            }
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *i, 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31) {
              goto LABEL_117;
            }
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[1], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31) {
              goto LABEL_118;
            }
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[2], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31) {
              goto LABEL_119;
            }
            uint64_t v17 = i + 3;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *v17, 0x20u);
          if (++v14 >= (unint64_t)*(unsigned __int8 *)(a2 + 106)) {
            return;
          }
        }
      }
      return;
    }
    goto LABEL_150;
  }
  if (v10 != 1 || v11 != 2) {
    return;
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.zoneExclusion.isZoneDefined";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 104), 1u);
  if (!*(unsigned char *)(a2 + 104)) {
    return;
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.zoneExclusion.keepPreviousZone";
LABEL_156:
    void *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 105), 1u);
  if (*(unsigned char *)(a2 + 105)) {
    return;
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 3)
  {
LABEL_150:
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack blkData.zoneExclusion.numZones";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 106), 4u);
  if (*(unsigned char *)(a2 + 106))
  {
    uint64_t v18 = a2 + 160;
    int v19 = (int *)(a2 + 140);
    uint64_t v20 = 122;
    do
    {
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        unsigned int v9 = "Cannot pack blkData.zoneExclusion.usePreDefinedZone[w]";
        goto LABEL_156;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(v18 + v20 - 175), 1u);
      if (*(unsigned char *)(v18 + v20 - 175))
      {
        if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 3)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          unsigned int v9 = "Cannot pack blkData.zoneExclusion.zoneIndex[w]";
          goto LABEL_156;
        }
        int v21 = *(unsigned __int8 *)(a2 + v20);
        uint64_t v22 = (uint64_t)a4;
        unsigned int v23 = 4;
      }
      else
      {
        int v24 = a4[7] + 8 * (a4[4] - a4[2]) - 32;
        if (*(unsigned char *)(a2 + 4))
        {
          if (v24 <= 31)
          {
LABEL_110:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.minX";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *v19, 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_111:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.maxX";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[1], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_112:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.minY";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[2], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_113:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.maxY";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[3], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_114:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.minZ";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[4], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_115:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.maxZ";
            goto LABEL_156;
          }
          int v21 = v19[5];
        }
        else
        {
          if (v24 <= 31)
          {
LABEL_116:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.spherical.minAzimuth";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *v19, 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_117:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.spherical.maxAzimuth";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[1], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_118:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.spherical.minElevation";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[2], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_119:
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            unsigned int v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.spherical.maxElevation";
            goto LABEL_156;
          }
          int v21 = v19[3];
        }
        uint64_t v22 = (uint64_t)a4;
        unsigned int v23 = 32;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits(v22, v21, v23);
      unint64_t v25 = v20 - 121;
      ++v20;
      v19 += 6;
    }
    while (v25 < *(unsigned __int8 *)(a2 + 106));
  }
}

uint64_t APAC::MetadataBitStreamPacker::packDynamicGroup(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack dG.groupID";
    goto LABEL_23;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack dG.isGlobal";
    goto LABEL_23;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1]) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack dG.memberCount";
    goto LABEL_23;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack dG.hasConjunctMembers";
    goto LABEL_23;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 1u);
  if (!a2[3])
  {
    if (!a2[2]) {
      return result;
    }
    unint64_t v7 = 0;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 6)
    {
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[v7++ + 5], 7u);
      if (v7 >= a2[2]) {
        return result;
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack dG.ASCIDList[n]";
LABEL_23:
    void *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack dG.startASCID";
    goto LABEL_23;
  }
  int v6 = a2[4];
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 7u);
}

uint64_t APAC::MetadataBitStreamPacker::packReferenceScreen(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack refScreen.hasData";
    goto LABEL_10;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack refScreen.APCount";
LABEL_10:
    void *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 4u);
  if (a2[1])
  {
    unint64_t v6 = 0;
    unint64_t v7 = a2 + 4;
    do
    {
      uint64_t result = APAC::MetadataBitStreamPacker::packScreenData(result, v7, a3);
      ++v6;
      v7 += 28;
    }
    while (v6 < a2[1]);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packCodeBookData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = "Cannot pack cbD.hasData";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v3 = *a2;
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v3, 1u);
}

uint64_t APAC::MetadataBitStreamPacker::packGroupStaticData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack grpSD.hasData";
    goto LABEL_10;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v9 = "Cannot pack grpSD.groupCount";
LABEL_10:
    void *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 7u);
  if (a2[1])
  {
    unint64_t v6 = 0;
    unint64_t v7 = a2 + 4;
    do
    {
      uint64_t result = APAC::MetadataBitStreamPacker::packStaticGroup(result, v7, a3);
      ++v6;
      v7 += 216;
    }
    while (v6 < a2[1]);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packSceneComponenentStaticData(uint64_t a1, unsigned char *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = "Cannot pack scSD.ASCCount";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (*a2)
  {
    unint64_t v6 = 0;
    unint64_t v7 = a2 + 4;
    do
    {
      uint64_t result = APAC::MetadataBitStreamPacker::packASCStaticData(result, v7, a3);
      ++v6;
      v7 += 1144;
    }
    while (v6 < *a2);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packASCStaticData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.sceneComponentID";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.sceneComponentType";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.startChannelIndex";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.rendererSubType";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.rendererVersion";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.channelLayoutTag";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.HOAOrder";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[12], 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.HOAOrdering";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[13], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.HOANormalization";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[14], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.NFCRefDist.hasData";
    goto LABEL_30;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[16], 1u);
  if (a2[16])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v10 = "Cannot pack sD.NFCRefDist.nfcRefDist";
LABEL_30:
      void *exception = v10;
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v10 = "Cannot pack sD.screenRef";
    goto LABEL_30;
  }
  uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[24], 1u);
  uint64_t v6 = APAC::MetadataBitStreamPacker::packProprietaryStaticData(v5, a2 + 28, a3);
  uint64_t v7 = APAC::MetadataBitStreamPacker::packDolbyStaticData(v6, a2 + 112, a3);
  return APAC::MetadataBitStreamPacker::packExtendedData(v7, a2 + 114, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packProprietaryStaticData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    BOOL v12 = "Cannot pack pSD.hasData";
    goto LABEL_31;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    BOOL v12 = "Cannot pack pSD.numParameters";
LABEL_31:
    void *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 5u);
  if (a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 52;
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        BOOL v12 = "Cannot pack pSD.paramIndexList[n]";
        goto LABEL_31;
      }
      uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[v6], 5u);
      switch(v7[v6])
      {
        case 0u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            BOOL v12 = "Cannot pack pSD.isComplexSH";
            goto LABEL_31;
          }
          int v8 = a2[2];
          goto LABEL_12;
        case 1u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            BOOL v12 = "Cannot pack pSD.isCSPhase";
            goto LABEL_31;
          }
          int v8 = a2[3];
LABEL_12:
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 1;
          goto LABEL_27;
        case 2u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            BOOL v12 = "Cannot pack pSD.productionCoordinate";
            goto LABEL_31;
          }
          int v8 = a2[4];
          goto LABEL_18;
        case 3u:
          uint64_t result = APAC::MetadataBitStreamPacker::packSceneReverb(result, a2 + 6, a3);
          goto LABEL_28;
        case 4u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            BOOL v12 = "Cannot pack pSD.postProcReverbIndex";
            goto LABEL_31;
          }
          int v8 = a2[14];
LABEL_18:
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 2;
          goto LABEL_27;
        case 5u:
          uint64_t result = APAC::MetadataBitStreamPacker::packRadiationPattern(result, a2 + 16, a3);
          goto LABEL_28;
        case 6u:
          uint64_t result = APAC::MetadataBitStreamPacker::packBinauralization(result, a2 + 24, a3);
          goto LABEL_28;
        case 7u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            BOOL v12 = "Cannot pack pSD.HCFilterCodeBookID";
            goto LABEL_31;
          }
          int v8 = a2[36];
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 4;
          goto LABEL_27;
        case 8u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            BOOL v12 = "Cannot pack pSD.hoaRotation.pitch";
            goto LABEL_31;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 10), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            BOOL v12 = "Cannot pack pSD.hoaRotation.yaw";
            goto LABEL_31;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 11), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            BOOL v12 = "Cannot pack pSD.hoaRotation.roll";
            goto LABEL_31;
          }
          int v8 = *((_DWORD *)a2 + 12);
          uint64_t v9 = (uint64_t)a3;
          unsigned int v10 = 32;
LABEL_27:
          uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits(v9, v8, v10);
LABEL_28:
          if (++v6 >= (unint64_t)a2[1]) {
            return result;
          }
          break;
        default:
          goto LABEL_28;
      }
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packDolbyStaticData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack pDolby.hasData";
    goto LABEL_10;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int v8 = "Cannot pack pDolby.headphoneRenderingData";
LABEL_10:
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  int v6 = a2[1];
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 2u);
}

uint64_t APAC::MetadataBitStreamPacker::packStaticGroup(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack sG.groupID";
    goto LABEL_22;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack sG.isGlobal";
    goto LABEL_22;
  }
  uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1]) {
    goto LABEL_13;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack sG.memberCount";
    goto LABEL_22;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack sG.hasConjunctMembers";
    goto LABEL_22;
  }
  uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 1u);
  if (a2[3])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 6)
    {
      uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 7u);
      goto LABEL_13;
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack sG.startASCID";
LABEL_22:
    void *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (a2[2])
  {
    unint64_t v6 = 0;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 6)
    {
      uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[v6++ + 5], 7u);
      if (v6 >= a2[2]) {
        goto LABEL_13;
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    uint64_t v9 = "Cannot pack sG.ASCIDList[m]";
    goto LABEL_22;
  }
LABEL_13:
  return APAC::MetadataBitStreamPacker::packProprietaryStaticData(v5, a2 + 132, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packScreenData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v10 = "Cannot pack sD.hasData";
    goto LABEL_31;
  }
  uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2) {
    return result;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v10 = "Cannot pack sD.aspectRatio";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v10 = "Cannot pack sD.cartesian";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  int v6 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (!a2[1])
  {
    if (v6 <= 31)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      unsigned int v10 = "Cannot pack sD.screenCentrePosition.co_ut.spherical.azimuth";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        unsigned int v10 = "Cannot pack sD.screenCentrePosition.co_ut.spherical.elevation";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
        {
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          unsigned int v10 = "Cannot pack sD.screenCentrePosition.co_ut.spherical.distance";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
          {
            uint64_t v7 = (int *)(a2 + 24);
            goto LABEL_17;
          }
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          unsigned int v10 = "Cannot pack sD.screenWidth.azimuth";
        }
      }
    }
LABEL_31:
    void *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v6 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v10 = "Cannot pack sD.screenCentrePosition.co_ut.cartesian.X";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v10 = "Cannot pack sD.screenCentrePosition.co_ut.cartesian.Y";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v10 = "Cannot pack sD.screenCentrePosition.co_ut.cartesian.Z";
    goto LABEL_31;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    unsigned int v10 = "Cannot pack sD.screenWidth.X";
    goto LABEL_31;
  }
  uint64_t v7 = (int *)(a2 + 20);
LABEL_17:
  int v8 = *v7;
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packConfig(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = a2;
  uint64_t v9 = a2;
  uint64_t v10 = a2 + a3;
  uint64_t v11 = 0x2000000000;
  int v12 = a2 & 3;
  APAC::MetadataBitStreamPacker::packMetadataConfig(a1, a4, &v8);
  int v4 = 8 * (v9 - v8) - HIDWORD(v11);
  unsigned int v5 = (v4 + 32) >> 3;
  if ((v4 & 7) != 0) {
    uint64_t v6 = v5 + 1;
  }
  else {
    uint64_t v6 = v5;
  }
  AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)&v8);
  return v6;
}

void APAC::MetadataBitStreamPacker::packMetadataConfig(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = "Cannot pack mdCfg.mRendererMetadataConfigPresent";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1), 1u);
  if (*(unsigned char *)(a2 + 1))
  {
    APAC::MetadataBitStreamPacker::packRendererMetadataConfig(v5, (unsigned __int16 *)(a2 + 8), a3);
  }
}

void APAC::MetadataBitStreamPacker::packRendererMetadataConfig(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int64_t v41 = "Cannot pack rMdCfg.mGlobalConfig.mHasData";
    goto LABEL_25;
  }
  int v3 = a3;
  int v4 = a2;
  uint64_t v5 = a2 + 4;
  uint64_t v6 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 8), 1u);
  if (*v5) {
    APAC::MetadataBitStreamPacker::packGlobalConfig(v6, (uint64_t)v5, v3);
  }
  if (v3[7] + 8 * (v3[4] - v3[2]) - 32 <= 10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    int64_t v41 = "Cannot pack rMdCfg.mGroupCount";
LABEL_25:
    void *exception = v41;
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t v7 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v3, *v4, 0xBu);
  if (*v4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = (APAC::Metadata::RendererData::RadiationPattern *)v44;
    uint64_t v11 = 1248 * *v4;
    do
    {
      APAC::MetadataBitStreamPacker::packGroupConfig(v7, (unsigned __int16 *)(*((void *)v4 + 597) + v8), v3);
      if (v3[7] + 8 * (v3[4] - v3[2]) - 32 <= 0)
      {
        uint64_t v39 = __cxa_allocate_exception(8uLL);
        *uint64_t v39 = "Cannot pack rMdCfg.mRendererData[gp].mHasData";
        __cxa_throw(v39, MEMORY[0x1E4FBA308], 0);
      }
      uint64_t v7 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v3, *(unsigned __int8 *)(*((void *)v4 + 600) + v9), 1u);
      uint64_t v12 = *((void *)v4 + 600);
      uint64_t v13 = v12 + v9;
      if (*(unsigned char *)(v12 + v9))
      {
        memcpy(__dst, (const void *)(v12 + v9), 0x314uLL);
        uint64_t v14 = *(void *)(v13 + 792);
        *((_DWORD *)v10 + 2) = *(_DWORD *)(v13 + 800);
        *(void *)uint64_t v10 = v14;
        v44[2] = *(void *)(v13 + 808);
        unint64_t v46 = 0;
        unint64_t v47 = 0;
        uint64_t v45 = 0;
        int v15 = *(unsigned char **)(v13 + 816);
        int v16 = *(unsigned char **)(v13 + 824);
        int64_t v17 = v16 - v15;
        if (v16 != v15)
        {
          uint64_t v42 = v8;
          if (v17 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v12;
          uint64_t v19 = v11;
          uint64_t v20 = v3;
          int v21 = v4;
          uint64_t v22 = v10;
          unsigned int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v17 >> 2);
          uint64_t v45 = v23;
          unint64_t v46 = v23;
          unint64_t v47 = &v23[4 * v24];
          memmove(v23, v15, v17);
          unint64_t v46 = &v23[4 * (v17 >> 2)];
          uint64_t v10 = v22;
          int v4 = v21;
          int v3 = v20;
          uint64_t v11 = v19;
          uint64_t v12 = v18;
          uint64_t v8 = v42;
        }
        memset(v48, 0, sizeof(v48));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v48, *(const void **)(v12 + v9 + 840), *(void *)(v12 + v9 + 848), (uint64_t)(*(void *)(v12 + v9 + 848) - *(void *)(v12 + v9 + 840)) >> 2);
        memset(v49, 0, sizeof(v49));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v49, *(const void **)(v12 + v9 + 864), *(void *)(v12 + v9 + 872), (uint64_t)(*(void *)(v12 + v9 + 872) - *(void *)(v12 + v9 + 864)) >> 2);
        memset(v50, 0, sizeof(v50));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v50, *(const void **)(v12 + v9 + 888), *(void *)(v12 + v9 + 896), (uint64_t)(*(void *)(v12 + v9 + 896) - *(void *)(v12 + v9 + 888)) >> 2);
        memset(v51, 0, sizeof(v51));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v51, *(const void **)(v12 + v9 + 912), *(void *)(v12 + v9 + 920), (uint64_t)(*(void *)(v12 + v9 + 920) - *(void *)(v12 + v9 + 912)) >> 2);
        memset(v52, 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v52, *(const void **)(v12 + v9 + 936), *(void *)(v12 + v9 + 944), (uint64_t)(*(void *)(v12 + v9 + 944) - *(void *)(v12 + v9 + 936)) >> 2);
        void v52[3] = *(void *)(v12 + v9 + 960);
        __int16 v53 = *(_WORD *)(v12 + v9 + 968);
        uint64_t v55 = 0;
        xpc_object_t v56 = 0;
        uint64_t v54 = 0;
        unint64_t v25 = *(unsigned char **)(v12 + v9 + 976);
        unint64_t v26 = *(unsigned char **)(v12 + v9 + 984);
        int64_t v27 = v26 - v25;
        if (v26 != v25)
        {
          if (v27 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v54 = (char *)operator new(v26 - v25);
          uint64_t v55 = v54;
          int v28 = &v54[2 * (v27 >> 1)];
          xpc_object_t v56 = v28;
          memmove(v54, v25, v27);
          uint64_t v55 = v28;
        }
        memset(v57, 0, sizeof(v57));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v57, *(const void **)(v12 + v9 + 1000), *(void *)(v12 + v9 + 1008), (uint64_t)(*(void *)(v12 + v9 + 1008) - *(void *)(v12 + v9 + 1000)) >> 2);
        long long v29 = *(_OWORD *)(v12 + v9 + 1024);
        long long v30 = *(_OWORD *)(v12 + v9 + 1056);
        long long v59 = *(_OWORD *)(v12 + v9 + 1040);
        long long v60 = v30;
        long long v58 = v29;
        long long v31 = *(_OWORD *)(v12 + v9 + 1072);
        long long v32 = *(_OWORD *)(v12 + v9 + 1088);
        long long v33 = *(_OWORD *)(v12 + v9 + 1120);
        long long v63 = *(_OWORD *)(v12 + v9 + 1104);
        long long v64 = v33;
        long long v61 = v31;
        long long v62 = v32;
        long long v34 = *(_OWORD *)(v12 + v9 + 1136);
        long long v35 = *(_OWORD *)(v12 + v9 + 1152);
        long long v36 = *(_OWORD *)(v12 + v9 + 1168);
        *(_OWORD *)((char *)v67 + 13) = *(_OWORD *)(v12 + v9 + 1181);
        long long v66 = v35;
        v67[0] = v36;
        long long v65 = v34;
        uint64_t v37 = *(void *)(v12 + v9 + 1200);
        int v69 = *(_DWORD *)(v12 + v9 + 1208);
        uint64_t v68 = v37;
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        std::string __p = 0;
        uint64_t v38 = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(v12 + v9 + 1216), *(void *)(v12 + v9 + 1224), (uint64_t)(*(void *)(v12 + v9 + 1224) - *(void *)(v12 + v9 + 1216)) >> 2);
        uint64_t v73 = *(void *)(v12 + v9 + 1240);
        APAC::MetadataBitStreamPacker::packRendererData((uint64_t)v38, (uint64_t)__dst, v3);
        if (__p)
        {
          uint64_t v71 = __p;
          operator delete(__p);
        }
        APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern(v10);
      }
      v9 += 1248;
      v8 += 48;
    }
    while (v11 != v9);
  }
}

void sub_18FF35328(_Unwind_Exception *a1)
{
  int v2 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v2;
    operator delete(v2);
  }
  int v3 = (void *)STACK[0x408];
  if (STACK[0x408])
  {
    STACK[0x410] = (unint64_t)v3;
    operator delete(v3);
  }
  int v4 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x3D8];
  if (STACK[0x3D8])
  {
    STACK[0x3E0] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)STACK[0x390];
  if (STACK[0x390])
  {
    STACK[0x398] = (unint64_t)v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18FF35468(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern(APAC::Metadata::RendererData::RadiationPattern *this)
{
  int v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    *((void *)this + 27) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    *((void *)this + 24) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
  size_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
}

void APAC::Metadata::RendererData::~RendererData(APAC::Metadata::RendererData *this)
{
  int v2 = (void *)*((void *)this + 152);
  if (v2)
  {
    *((void *)this + 153) = v2;
    operator delete(v2);
  }
  APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern((APAC::Metadata::RendererData *)((char *)this + 792));
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_18FF355C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void ___Z33_CASInitAudioConverterDeferredLogv_block_invoke()
{
  AudioConverterLog();
  caulk::deferred_logger::create_v((uint64_t *)&v3, (caulk::deferred_logger *)AudioConverterLog(void)::gLog, v0);
  long long v1 = v3;
  long long v3 = 0uLL;
  int v2 = (std::__shared_weak_count *)*((void *)&gAudioConverterDeferredLog + 1);
  gAudioConverterDeferredLog = v1;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    if (*((void *)&v3 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
    }
  }
}

float AAAnalysisBase::GetProgress(AAAnalysisBase *this)
{
  return *((float *)this + 20);
}

uint64_t AALoudnessInfoAnalyzer::CompleteFinal(AALoudnessInfoAnalyzer *this, float a2, float a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v16 = 257;
  (*(void (**)(void, CFMutableDictionaryRef *))(**((void **)this + 12) + 16))(*((void *)this + 12), &Mutable);
  uint64_t v14 = 0;
  int v11 = 0;
  int v12 = 1;
  int v4 = *((_DWORD *)this + 26);
  if (v4)
  {
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"sound check info"))
    {
      CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, @"sound check info", &v14);
      uint64_t v5 = v14;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v9 = 8;
    uint64_t v10 = v5;
    uint64_t v13 = &v9;
    int v11 = 1;
    (*(void (**)(AALoudnessInfoAnalyzer *, __CFString *, int *, int *))(*(void *)this + 48))(this, @"sound check info", &v12, &v11);
    int v4 = *((_DWORD *)this + 26);
  }
  if ((v4 & 2) != 0)
  {
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"main loudness parameters"))
    {
      CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, @"main loudness parameters", &v14);
      uint64_t v6 = v14;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v9 = 8;
    uint64_t v10 = v6;
    uint64_t v13 = &v9;
    int v11 = 1;
    (*(void (**)(AALoudnessInfoAnalyzer *, __CFString *, int *, int *))(*(void *)this + 48))(this, @"main loudness parameters", &v12, &v11);
    int v4 = *((_DWORD *)this + 26);
  }
  if ((v4 & 4) != 0)
  {
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"additional loudness parameters"))
    {
      CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, @"additional loudness parameters", &v14);
      uint64_t v7 = v14;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v9 = 8;
    uint64_t v10 = v7;
    uint64_t v13 = &v9;
    int v11 = 1;
    (*(void (**)(AALoudnessInfoAnalyzer *, __CFString *, int *, int *))(*(void *)this + 48))(this, @"additional loudness parameters", &v12, &v11);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return 0;
}

void sub_18FF358B8(_Unwind_Exception *a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 32));
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t AALoudnessInfoAnalyzer::PushAudio(BufferedSoundCheckAnalyzer **this, unsigned int a2, const AudioBufferList *a3)
{
  BufferedSoundCheckAnalyzer::ProcessBuffer(this[12], a2, a3, 0);
  uint64_t v5 = (uint64_t)this[9] + a2;
  uint64_t v6 = (uint64_t)this[7];
  if (v5 >= v6) {
    uint64_t v5 = (uint64_t)this[7];
  }
  this[9] = (BufferedSoundCheckAnalyzer *)v5;
  *((float *)this + 20) = (float)((float)v5 * 100.0) / (float)v6;
  return 0;
}

void AALoudnessInfoAnalyzer::Prepare(AALoudnessInfoAnalyzer *this)
{
}

void AALoudnessInfoAnalyzer::~AALoudnessInfoAnalyzer(AALoudnessInfoAnalyzer *this)
{
  AALoudnessInfoAnalyzer::~AALoudnessInfoAnalyzer(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EDF93658;
  int v2 = *((void *)this + 12);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 12) = 0;
  }
  long long v3 = *((void *)this + 11);
  if (v3)
  {
    MEMORY[0x192FC8940](v3, 0x1000C4077774924);
    *((void *)this + 11) = 0;
  }
  *(void *)this = &unk_1EDF8EE80;
  MEMORY[0x192FC7C80]((char *)this + 48);
}

uint64_t CA::AudioMetadataSerializer::serialize(int a1, unsigned int *a2, unsigned int a3, uint64_t a4, double a5, double a6, double a7, unint64_t **a8)
{
  uint64_t v9 = a8;
  uint64_t v10 = (unsigned char *)a4;
  v548 = &v549;
  v549 = 0;
  v552 = 0;
  uint64_t v553 = 0;
  uint64_t v550 = 0;
  v551 = (uint64_t *)&v552;
  v554 = (uint64_t *)&v555;
  v555 = 0;
  v558 = 0;
  uint64_t v559 = 0;
  uint64_t v556 = 0;
  v557 = (uint64_t *)&v558;
  v560 = (uint64_t *)&v561;
  v561 = 0;
  v564 = 0;
  uint64_t v565 = 0;
  uint64_t v562 = 0;
  v563 = (uint64_t *)&v564;
  v566 = (uint64_t *)&v567;
  v567 = 0;
  v570 = 0;
  uint64_t v571 = 0;
  uint64_t v568 = 0;
  v569 = (uint64_t *)&v570;
  v573 = 0;
  uint64_t v574 = 0;
  v572 = &v573;
  if (*a2)
  {
    unint64_t v14 = 0;
    v540 = a2;
    do
    {
      uint64_t v15 = *(void *)(*(void *)(a2 + 1) + 8 * v14);
      if (*(void *)v15)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "APR_");
        std::string::basic_string[abi:ne180100]<0>(&v585, *(char **)v15);
        if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v585.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v577) < 0) {
          operator delete(__p);
        }
        if (v16 >= 0x10000)
        {
          if (*(unsigned char *)(v15 + 24))
          {
            uint64_t v537 = *(void *)(v15 + 28);
            unint64_t v538 = v538 & 0xFFFFFFFFFFFFFF00 | 1;
          }
          else
          {
            v538 &= 0xFFFFFFFFFFFFFF00;
            v537 &= 0xFFFFFFFFFFFFFF00;
          }
          unint64_t v17 = v536 & 0xFFFFFFFFFFFFFF00;
          if (*(unsigned char *)(v15 + 36))
          {
            unint64_t v18 = *(void *)(v15 + 40);
            v17 |= 1uLL;
          }
          else
          {
            unint64_t v18 = v535 & 0xFFFFFFFFFFFFFF00;
          }
          unint64_t v535 = v18;
          unint64_t v536 = v17;
          if (v539 != 3)
          {
            __int16 v19 = v16;
            uint64_t v20 = v549;
            int v21 = &v549;
LABEL_17:
            uint64_t v22 = v21;
            if (v20)
            {
              while (1)
              {
                int v21 = (uint64_t **)v20;
                unsigned int v23 = *((unsigned __int16 *)v20 + 16);
                if (v23 > (unsigned __int16)v16)
                {
                  uint64_t v20 = *v21;
                  goto LABEL_17;
                }
                if (v23 >= (unsigned __int16)v16) {
                  break;
                }
                uint64_t v20 = v21[1];
                if (!v20)
                {
                  uint64_t v22 = v21 + 1;
                  goto LABEL_24;
                }
              }
              uint64_t v24 = v21;
            }
            else
            {
LABEL_24:
              uint64_t v24 = operator new(0x40uLL);
              v24[16] = v19;
              *((void *)v24 + 6) = 0;
              *((void *)v24 + 7) = 0;
              *((void *)v24 + 5) = 0;
              *(void *)uint64_t v24 = 0;
              *((void *)v24 + 1) = 0;
              *((void *)v24 + 2) = v21;
              *uint64_t v22 = (uint64_t *)v24;
              unint64_t v25 = (uint64_t *)v24;
              if (*v548)
              {
                v548 = (uint64_t **)*v548;
                unint64_t v25 = *v22;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v549, v25);
              ++v550;
            }
            *((unsigned char *)v24 + 40) = v539;
            *((void *)v24 + 6) = v15;
            *((void *)v24 + 7) = 0;
            if (v539 != 2)
            {
              unint64_t v26 = *(unsigned int *)(v15 + 52);
              if (v26)
              {
                for (unint64_t i = 0; i < v26; ++i)
                {
                  uint64_t v28 = *(void *)(v15 + 56);
                  if (**(void **)(v28 + 8 * i))
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "ACO_");
                    std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v28 + 8 * i));
                    if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v585.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v577) < 0) {
                      operator delete(__p);
                    }
                    if (v29 >= 0x10000)
                    {
                      uint64_t v30 = *(void *)(v28 + 8 * i);
                      *long long v31 = v539;
                      *((void *)v31 + 1) = v30;
                      *((void *)v31 + 2) = 0;
                      double v32 = *(unsigned char *)(v15 + 24) ? *(double *)(v15 + 28) : 0.0;
                      uint64_t v33 = *(void *)(v28 + 8 * i);
                      unint64_t v34 = *(unsigned int *)(v33 + 24);
                      if (v34)
                      {
                        unint64_t v35 = 0;
                        char v541 = 0;
                        do
                        {
                          uint64_t v36 = *(void *)(v33 + 28);
                          if (**(void **)(v36 + 8 * v35))
                          {
                            std::string::basic_string[abi:ne180100]<0>(&__p, "AO_");
                            std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v36 + 8 * v35));
                            if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v585.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v577) < 0) {
                              operator delete(__p);
                            }
                            if (v37 >= 0x10000)
                            {
                              uint64_t v38 = v555;
                              if (!v555) {
                                goto LABEL_56;
                              }
                              uint64_t v39 = &v555;
                              do
                              {
                                __int16 v40 = v38;
                                int64_t v41 = v39;
                                unsigned int v42 = *((unsigned __int16 *)v38 + 16);
                                uint64_t v43 = (uint64_t **)(v38 + 1);
                                if (v42 >= (unsigned __int16)v37)
                                {
                                  uint64_t v43 = (uint64_t **)v40;
                                  uint64_t v39 = (uint64_t **)v40;
                                }
                                uint64_t v38 = *v43;
                              }
                              while (v38);
                              if (v39 == &v555) {
                                goto LABEL_56;
                              }
                              if (v42 < (unsigned __int16)v37) {
                                __int16 v40 = (uint64_t *)v41;
                              }
                              if (*((unsigned __int16 *)v40 + 16) > (unsigned __int16)v37)
                              {
LABEL_56:
                                uint64_t v44 = *(void *)(v36 + 8 * v35);
                                if (*(unsigned char *)(v44 + 16)) {
                                  double v45 = *(double *)(v44 + 20);
                                }
                                else {
                                  double v45 = 0.0;
                                }
                                if (*(unsigned char *)(v44 + 28)) {
                                  double v8 = *(double *)(v44 + 32);
                                }
                                else {
                                  *(void *)&v8 &= 0xFFFFFFFFFFFFFF00;
                                }
                                double v46 = v32 + v45;
                                double v47 = v32 + v45;
                                double v48 = v32 + v45 + v8;
                                if (*(unsigned char *)(v44 + 28)) {
                                  uint64_t v49 = *(void *)&v48;
                                }
                                else {
                                  uint64_t v49 = 0;
                                }
                                if (v50 != 3)
                                {
                                  int v51 = v50;
                                  if (v50 != 4) {
                                    char v541 = 1;
                                  }
                                  *(unsigned char *)xpc_object_t v52 = v51;
                                  v52[1] = (uint64_t *)v44;
                                  *((double *)v52 + 2) = v46;
                                  if (v51 != 2
                                  {
                                  }
                                }
                              }
                            }
                            unint64_t v34 = *(unsigned int *)(v33 + 24);
                          }
                          ++v35;
                        }
                        while (v35 < v34);
                        if (v541) {
                      }
                        }
                    }
                    unint64_t v26 = *(unsigned int *)(v15 + 52);
                  }
                }
                uint64_t v9 = a8;
                uint64_t v10 = (unsigned char *)a4;
              }
            }
          }
        }
      }
      ++v14;
      a2 = v540;
    }
    while (v14 < *v540);
  }
  if (!a3)
  {
    __int16 v53 = a2;
    unint64_t v54 = a2[3];
    if (v54)
    {
      for (unint64_t j = 0; j < v54; ++j)
      {
        uint64_t v56 = *((void *)v53 + 2);
        if (**(void **)(v56 + 8 * j))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ACO_");
          std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v56 + 8 * j));
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v585.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v577) < 0) {
            operator delete(__p);
          }
          if (v57 >= 0x10000)
          {
            uint64_t v58 = *(void *)(v56 + 8 * j);
            char *v59 = 0;
            *((void *)v59 + 1) = v58;
            *((void *)v59 + 2) = 0;
          }
          unint64_t v54 = v53[3];
        }
      }
    }
    unint64_t v60 = v53[6];
    if (v60)
    {
      for (unint64_t k = 0; k < v60; ++k)
      {
        uint64_t v62 = *(void *)(v53 + 7);
        if (**(void **)(v62 + 8 * k))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "AO_");
          std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v62 + 8 * k));
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v585.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v577) < 0) {
            operator delete(__p);
          }
          if (v63 >= 0x10000)
          {
            long long v64 = *(uint64_t **)(v62 + 8 * k);
            *(unsigned char *)long long v65 = 0;
            v65[1] = v64;
            v65[2] = 0;
          }
          unint64_t v60 = v53[6];
        }
      }
    }
    unint64_t v66 = v53[15];
    if (v66)
    {
      uint64_t v67 = 0;
      while (1)
      {
        uint64_t v68 = *((void *)v53 + 8);
        if (**(void **)(v68 + 8 * v67)) {
          break;
        }
LABEL_119:
        if (++v67 >= v66) {
          goto LABEL_120;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AS_");
      std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v68 + 8 * v67));
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v585.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v577) < 0) {
        operator delete(__p);
      }
      if (HIDWORD(v69))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v68 + 8 * v67));
        if ((SHIBYTE(v577) & 0x80000000) == 0)
        {
          if (HIBYTE(v577) > 7u && HIBYTE(__p) == 48) {
            goto LABEL_118;
          }
          goto LABEL_117;
        }
        if (v576 <= 7)
        {
          operator delete(__p);
LABEL_117:
          uint64_t v71 = *(uint64_t **)(v68 + 8 * v67);
          *(unsigned char *)uint64_t v72 = 0;
          v72[1] = v71;
          _OWORD v72[2] = 0;
          goto LABEL_118;
        }
        int v70 = *((unsigned __int8 *)__p + 7);
        operator delete(__p);
        if (v70 != 48) {
          goto LABEL_117;
        }
      }
LABEL_118:
      unint64_t v66 = v53[15];
      goto LABEL_119;
    }
LABEL_120:
    unint64_t v73 = v53[18];
    if (v73)
    {
      uint64_t v74 = 0;
      while (1)
      {
        uint64_t v75 = *(void *)(v53 + 19);
        if (**(void **)(v75 + 8 * v74)) {
          break;
        }
LABEL_137:
        if (++v74 >= v73) {
          goto LABEL_138;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AT_");
      std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v75 + 8 * v74));
      char v78 = v77;
      v584.__r_.__value_.__r.__words[0] = v76;
      LODWORD(v584.__r_.__value_.__r.__words[1]) = v77;
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v585.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v577) < 0) {
        operator delete(__p);
      }
      if (v78)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v75 + 8 * v74));
        if ((SHIBYTE(v577) & 0x80000000) == 0)
        {
          if (HIBYTE(v577) > 7u && HIBYTE(__p) == 48) {
            goto LABEL_136;
          }
          goto LABEL_135;
        }
        if (v576 <= 7)
        {
          operator delete(__p);
LABEL_135:
          xpc_object_t v80 = *(uint64_t **)(v75 + 8 * v74);
          *(unsigned char *)long long v81 = 0;
          v81[1] = v80;
          v81[2] = 0;
          goto LABEL_136;
        }
        int v79 = *((unsigned __int8 *)__p + 7);
        operator delete(__p);
        if (v79 != 48) {
          goto LABEL_135;
        }
      }
LABEL_136:
      unint64_t v73 = v53[18];
      goto LABEL_137;
    }
LABEL_138:
    unint64_t v82 = v53[21];
    if (v82)
    {
      for (unint64_t m = 0; m < v82; ++m)
      {
        uint64_t v84 = *((void *)v53 + 11);
        if (**(void **)(v84 + 8 * m))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ATU_");
          std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v84 + 8 * m));
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v585.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v577) < 0) {
            operator delete(__p);
          }
          if (HIDWORD(v85))
          {
            uint64_t v86 = *(uint64_t **)(v84 + 8 * m);
            *(unsigned char *)uint64_t v87 = 0;
            v87[1] = v86;
            v87[2] = 0;
          }
          unint64_t v82 = v53[21];
        }
      }
    }
    unint64_t v88 = v53[9];
    if (v88)
    {
      uint64_t v89 = 0;
      while (1)
      {
        uint64_t v90 = *((void *)v53 + 5);
        if (**(void **)(v90 + 8 * v89)) {
          break;
        }
LABEL_166:
        if (++v89 >= v88) {
          goto LABEL_167;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
      std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v90 + 8 * v89));
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v585.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v577) < 0) {
        operator delete(__p);
      }
      if (HIDWORD(v91))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v90 + 8 * v89));
        if ((SHIBYTE(v577) & 0x80000000) == 0)
        {
          if (HIBYTE(v577) > 7u && HIBYTE(__p) == 48) {
            goto LABEL_165;
          }
          goto LABEL_164;
        }
        if (v576 <= 7)
        {
          operator delete(__p);
LABEL_164:
          int v93 = *(uint64_t **)(v90 + 8 * v89);
          *(unsigned char *)int v94 = 0;
          v94[1] = v93;
          v94[2] = 0;
          goto LABEL_165;
        }
        int v92 = *((unsigned __int8 *)__p + 7);
        operator delete(__p);
        if (v92 != 48) {
          goto LABEL_164;
        }
      }
LABEL_165:
      unint64_t v88 = v53[9];
      goto LABEL_166;
    }
LABEL_167:
    unint64_t v95 = v53[12];
    if (v95)
    {
      uint64_t v96 = 0;
      while (1)
      {
        uint64_t v97 = *(void *)(v53 + 13);
        if (**(void **)(v97 + 8 * v96)) {
          break;
        }
LABEL_184:
        if (++v96 >= v95) {
          goto LABEL_185;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AC_");
      std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v97 + 8 * v96));
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v585.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v577) < 0) {
        operator delete(__p);
      }
      if (HIDWORD(v98))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v97 + 8 * v96));
        if ((SHIBYTE(v577) & 0x80000000) == 0)
        {
          if (HIBYTE(v577) > 7u && HIBYTE(__p) == 48) {
            goto LABEL_183;
          }
          goto LABEL_182;
        }
        if (v576 <= 7)
        {
          operator delete(__p);
LABEL_182:
          uint64_t v100 = *(uint64_t **)(v97 + 8 * v96);
          *(unsigned char *)uint64_t v101 = 0;
          v101[1] = v100;
          v101[2] = 0;
          goto LABEL_183;
        }
        int v99 = *((unsigned __int8 *)__p + 7);
        operator delete(__p);
        if (v99 != 48) {
          goto LABEL_182;
        }
      }
LABEL_183:
      unint64_t v95 = v53[12];
      goto LABEL_184;
    }
  }
LABEL_185:
  unsigned int v542 = -66576;
  if (!*v9) {
    goto LABEL_1070;
  }
  *(void *)v547 = 1;
  *uint64_t v10 = a3;
  uint64_t v102 = v548;
  if (v548 != &v549)
  {
    do
    {
      uint64_t v103 = v102[1];
      if (*((unsigned __int8 *)v102 + 40) - 3 > 1)
      {
        if (v103)
        {
          do
          {
            signed int v105 = (uint64_t **)v103;
            uint64_t v103 = (uint64_t *)*v103;
          }
          while (v103);
        }
        else
        {
          do
          {
            signed int v105 = (uint64_t **)v102[2];
            BOOL v446 = *v105 == (uint64_t *)v102;
            uint64_t v102 = v105;
          }
          while (!v446);
        }
      }
      else
      {
        uint64_t v104 = v102;
        if (v103)
        {
          do
          {
            signed int v105 = (uint64_t **)v103;
            uint64_t v103 = (uint64_t *)*v103;
          }
          while (v103);
        }
        else
        {
          do
          {
            signed int v105 = (uint64_t **)v104[2];
            BOOL v446 = *v105 == (uint64_t *)v104;
            uint64_t v104 = v105;
          }
          while (!v446);
        }
        if (v548 == v102) {
          v548 = v105;
        }
        --v550;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v549, (uint64_t *)v102);
        operator delete(v102);
      }
      uint64_t v102 = v105;
    }
    while (v105 != &v549);
  }
  Float64 v106 = v551;
  if (v551 != (uint64_t *)&v552)
  {
    do
    {
      long long v107 = (uint64_t *)v106[1];
      if (*((unsigned __int8 *)v106 + 40) - 3 > 1)
      {
        if (v107)
        {
          do
          {
            int v109 = v107;
            long long v107 = (uint64_t *)*v107;
          }
          while (v107);
        }
        else
        {
          do
          {
            int v109 = (uint64_t *)v106[2];
            BOOL v446 = *v109 == (void)v106;
            Float64 v106 = v109;
          }
          while (!v446);
        }
      }
      else
      {
        long long v108 = v106;
        if (v107)
        {
          do
          {
            int v109 = v107;
            long long v107 = (uint64_t *)*v107;
          }
          while (v107);
        }
        else
        {
          do
          {
            int v109 = (uint64_t *)v108[2];
            BOOL v446 = *v109 == (void)v108;
            long long v108 = v109;
          }
          while (!v446);
        }
        if (v551 == v106) {
          v551 = v109;
        }
        --v553;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v552, v106);
        operator delete(v106);
      }
      Float64 v106 = v109;
    }
    while (v109 != (uint64_t *)&v552);
  }
  unsigned int v110 = v554;
  if (v554 != (uint64_t *)&v555)
  {
    do
    {
      int v111 = (uint64_t *)v110[1];
      if (*((unsigned __int8 *)v110 + 40) - 3 > 1)
      {
        if (v111)
        {
          do
          {
            uint64_t v113 = v111;
            int v111 = (uint64_t *)*v111;
          }
          while (v111);
        }
        else
        {
          do
          {
            uint64_t v113 = (uint64_t *)v110[2];
            BOOL v446 = *v113 == (void)v110;
            unsigned int v110 = v113;
          }
          while (!v446);
        }
      }
      else
      {
        uint64_t v112 = v110;
        if (v111)
        {
          do
          {
            uint64_t v113 = v111;
            int v111 = (uint64_t *)*v111;
          }
          while (v111);
        }
        else
        {
          do
          {
            uint64_t v113 = (uint64_t *)v112[2];
            BOOL v446 = *v113 == (void)v112;
            uint64_t v112 = v113;
          }
          while (!v446);
        }
        if (v554 == v110) {
          v554 = v113;
        }
        --v556;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v555, v110);
        operator delete(v110);
      }
      unsigned int v110 = v113;
    }
    while (v113 != (uint64_t *)&v555);
  }
  uint64_t v114 = v563;
  if (v563 != (uint64_t *)&v564)
  {
    do
    {
      Float64 v115 = (uint64_t *)v114[1];
      if (*((unsigned __int8 *)v114 + 40) - 3 > 1)
      {
        if (v115)
        {
          do
          {
            unint64_t v117 = v115;
            Float64 v115 = (uint64_t *)*v115;
          }
          while (v115);
        }
        else
        {
          do
          {
            unint64_t v117 = (uint64_t *)v114[2];
            BOOL v446 = *v117 == (void)v114;
            uint64_t v114 = v117;
          }
          while (!v446);
        }
      }
      else
      {
        size_t v116 = v114;
        if (v115)
        {
          do
          {
            unint64_t v117 = v115;
            Float64 v115 = (uint64_t *)*v115;
          }
          while (v115);
        }
        else
        {
          do
          {
            unint64_t v117 = (uint64_t *)v116[2];
            BOOL v446 = *v117 == (void)v116;
            size_t v116 = v117;
          }
          while (!v446);
        }
        if (v563 == v114) {
          v563 = v117;
        }
        --v565;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v564, v114);
        operator delete(v114);
      }
      uint64_t v114 = v117;
    }
    while (v117 != (uint64_t *)&v564);
  }
  int v118 = v566;
  if (v566 != (uint64_t *)&v567)
  {
    do
    {
      char v119 = (uint64_t *)v118[1];
      if (*((unsigned __int8 *)v118 + 40) - 3 > 1)
      {
        if (v119)
        {
          do
          {
            int v121 = v119;
            char v119 = (uint64_t *)*v119;
          }
          while (v119);
        }
        else
        {
          do
          {
            int v121 = (uint64_t *)v118[2];
            BOOL v446 = *v121 == (void)v118;
            int v118 = v121;
          }
          while (!v446);
        }
      }
      else
      {
        int v120 = v118;
        if (v119)
        {
          do
          {
            int v121 = v119;
            char v119 = (uint64_t *)*v119;
          }
          while (v119);
        }
        else
        {
          do
          {
            int v121 = (uint64_t *)v120[2];
            BOOL v446 = *v121 == (void)v120;
            int v120 = v121;
          }
          while (!v446);
        }
        if (v566 == v118) {
          v566 = v121;
        }
        --v568;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v567, v118);
        operator delete(v118);
      }
      int v118 = v121;
    }
    while (v121 != (uint64_t *)&v567);
  }
  int v122 = v557;
  if (v557 != (uint64_t *)&v558)
  {
    do
    {
      std::string::size_type v123 = (uint64_t *)v122[1];
      if (*((unsigned __int8 *)v122 + 40) - 3 > 1)
      {
        if (v123)
        {
          do
          {
            UInt32 v125 = v123;
            std::string::size_type v123 = (uint64_t *)*v123;
          }
          while (v123);
        }
        else
        {
          do
          {
            UInt32 v125 = (uint64_t *)v122[2];
            BOOL v446 = *v125 == (void)v122;
            int v122 = v125;
          }
          while (!v446);
        }
      }
      else
      {
        int v124 = v122;
        if (v123)
        {
          do
          {
            UInt32 v125 = v123;
            std::string::size_type v123 = (uint64_t *)*v123;
          }
          while (v123);
        }
        else
        {
          do
          {
            UInt32 v125 = (uint64_t *)v124[2];
            BOOL v446 = *v125 == (void)v124;
            int v124 = v125;
          }
          while (!v446);
        }
        if (v557 == v122) {
          v557 = v125;
        }
        --v559;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v558, v122);
        operator delete(v122);
      }
      int v122 = v125;
    }
    while (v125 != (uint64_t *)&v558);
  }
  uint64_t v126 = v560;
  if (v560 != (uint64_t *)&v561)
  {
    do
    {
      uint64_t v127 = (uint64_t *)v126[1];
      if (*((unsigned __int8 *)v126 + 40) - 3 > 1)
      {
        if (v127)
        {
          do
          {
            uint64_t v129 = v127;
            uint64_t v127 = (uint64_t *)*v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            uint64_t v129 = (uint64_t *)v126[2];
            BOOL v446 = *v129 == (void)v126;
            uint64_t v126 = v129;
          }
          while (!v446);
        }
      }
      else
      {
        uint64_t v128 = v126;
        if (v127)
        {
          do
          {
            uint64_t v129 = v127;
            uint64_t v127 = (uint64_t *)*v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            uint64_t v129 = (uint64_t *)v128[2];
            BOOL v446 = *v129 == (void)v128;
            uint64_t v128 = v129;
          }
          while (!v446);
        }
        if (v560 == v126) {
          v560 = v129;
        }
        --v562;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v561, v126);
        operator delete(v126);
      }
      uint64_t v126 = v129;
    }
    while (v129 != (uint64_t *)&v561);
  }
  size_t v130 = v569;
  if (v569 != (uint64_t *)&v570)
  {
    do
    {
      CFDictionaryRef v131 = (uint64_t *)v130[1];
      if (*((unsigned __int8 *)v130 + 40) - 3 > 1)
      {
        if (v131)
        {
          do
          {
            char v133 = v131;
            CFDictionaryRef v131 = (uint64_t *)*v131;
          }
          while (v131);
        }
        else
        {
          do
          {
            char v133 = (uint64_t *)v130[2];
            BOOL v446 = *v133 == (void)v130;
            size_t v130 = v133;
          }
          while (!v446);
        }
      }
      else
      {
        int v132 = v130;
        if (v131)
        {
          do
          {
            char v133 = v131;
            CFDictionaryRef v131 = (uint64_t *)*v131;
          }
          while (v131);
        }
        else
        {
          do
          {
            char v133 = (uint64_t *)v132[2];
            BOOL v446 = *v133 == (void)v132;
            int v132 = v133;
          }
          while (!v446);
        }
        if (v569 == v130) {
          v569 = v133;
        }
        --v571;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v570, v130);
        operator delete(v130);
      }
      size_t v130 = v133;
    }
    while (v133 != (uint64_t *)&v570);
  }
  int v134 = *v9;
  int v135 = v548;
  if (v548 == &v549)
  {
    v241 = a8;
  }
  else
  {
    v543 = *v9;
    do
    {
      int v136 = *(unint64_t **)v547;
      if (a3 == 2)
      {
        if (*(void *)v547 + 1 > (unint64_t)v134) {
          goto LABEL_1070;
        }
        *(unsigned char *)(a4 + *(void *)v547) = *((unsigned char *)v135 + 40) << 6;
        int v136 = (unint64_t *)((char *)v136 + 1);
      }
      if ((unint64_t *)((char *)v136 + 1) > v134) {
        goto LABEL_1070;
      }
      __int16 v137 = *((_WORD *)v135 + 16);
      *((unsigned char *)v136 + a4) = 0;
      if ((unint64_t *)((char *)v136 + 3) >= v134) {
        goto LABEL_1070;
      }
      *((unsigned char *)v136 + a4 + 1) = HIBYTE(v137);
      *(void *)v547 = (char *)v136 + 3;
      *((unsigned char *)v136 + a4 + 2) = v137;
      if (*((unsigned char *)v135 + 40) == 2)
      {
          goto LABEL_1070;
      }
      else
      {
        uint64_t v138 = v135[6];
        memset(&v583, 0, sizeof(v583));
        std::string __p = 0;
        unint64_t v576 = 0;
        int64_t v577 = 0;
        if (*((_DWORD *)v138 + 13))
        {
          v139 = 0;
          unsigned int v140 = 0;
          unint64_t v141 = 0;
          unint64_t v142 = 0;
          do
          {
            CFTypeID v143 = *(char ***)(v138[7] + 8 * v142);
            std::string::basic_string[abi:ne180100]<0>(&v585, "ACO_");
            std::string::basic_string[abi:ne180100]<0>(&v584, *v143);
            if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v584.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v585.__r_.__value_.__l.__data_);
            }
            if (v144 >= 0x10000)
            {
              if ((unint64_t)v139 >= v141)
              {
                uint64_t v146 = v139 - v140;
                if (v139 - v140 <= -3)
                {
                  std::string __p = v140;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v147 = v146 >> 1;
                if (v141 - (unint64_t)v140 <= (v146 >> 1) + 1) {
                  uint64_t v148 = v147 + 1;
                }
                else {
                  uint64_t v148 = v141 - (void)v140;
                }
                if (v141 - (unint64_t)v140 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v149 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v149 = v148;
                }
                if (v149) {
                  uint64_t v149 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v149);
                }
                else {
                  uint64_t v150 = 0;
                }
                __int16 v151 = (char *)(v149 + 2 * v147);
                *(_WORD *)__int16 v151 = v144;
                AudioStreamBasicDescription v145 = v151 + 2;
                while (v139 != v140)
                {
                  __int16 v152 = *((_WORD *)v139 - 1);
                  v139 -= 2;
                  *((_WORD *)v151 - 1) = v152;
                  v151 -= 2;
                }
                unint64_t v141 = v149 + 2 * v150;
                unint64_t v576 = (unint64_t)v145;
                if (v140) {
                  operator delete(v140);
                }
                unsigned int v140 = v151;
              }
              else
              {
                *(_WORD *)v139 = v144;
                AudioStreamBasicDescription v145 = v139 + 2;
              }
              unint64_t v576 = (unint64_t)v145;
              v139 = v145;
            }
            ++v142;
          }
          while (v142 < *((unsigned int *)v138 + 13));
          int64_t v577 = v141;
          std::string __p = v140;
        }
        if (*((unsigned char *)v138 + 105))
        {
          std::string::size_type size = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v155 = v583.__r_.__value_.__r.__words[0];
            std::string::size_type v156 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            int64_t v157 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v157 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v158 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v157) {
              int64_t v157 = 2 * v158;
            }
            if (v158 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v159 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v159 = v157;
            }
            if (v159) {
              std::string::size_type v160 = (std::string::size_type)operator new(v159);
            }
            else {
              std::string::size_type v160 = 0;
            }
            std::string::size_type v161 = v160 + v156;
            std::string v162 = (unsigned char *)(v160 + v156);
            *std::string v162 = 0;
            std::string::size_type v154 = (std::string::size_type)(v162 + 1);
            if (size != (char *)v155)
            {
              uint64_t v163 = &size[~v155];
              do
              {
                char v164 = *--size;
                (v163--)[v160] = v164;
              }
              while (size != (char *)v155);
              std::string::size_type size = (char *)v583.__r_.__value_.__r.__words[0];
              std::string::size_type v161 = v160;
            }
            v583.__r_.__value_.__r.__words[0] = v161;
            v583.__r_.__value_.__r.__words[2] = v160 + v159;
            if (size) {
              operator delete(size);
            }
          }
          else
          {
            *(unsigned char *)v583.__r_.__value_.__l.__size_ = 0;
            std::string::size_type v154 = (std::string::size_type)(size + 1);
          }
          v583.__r_.__value_.__l.__size_ = v154;
        }
        if (*((unsigned char *)v138 + 148))
        {
          char v165 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v167 = v583.__r_.__value_.__r.__words[0];
            std::string::size_type v168 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            int64_t v169 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v169 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v170 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v169) {
              int64_t v169 = 2 * v170;
            }
            if (v170 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v171 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v171 = v169;
            }
            if (v171) {
              std::string::size_type v172 = (std::string::size_type)operator new(v171);
            }
            else {
              std::string::size_type v172 = 0;
            }
            std::string::size_type v173 = v172 + v168;
            BOOL v174 = (unsigned char *)(v172 + v168);
            *BOOL v174 = 1;
            std::string::size_type v166 = (std::string::size_type)(v174 + 1);
            if (v165 != (char *)v167)
            {
              uint64_t v175 = &v165[~v167];
              do
              {
                char v176 = *--v165;
                (v175--)[v172] = v176;
              }
              while (v165 != (char *)v167);
              char v165 = (char *)v583.__r_.__value_.__r.__words[0];
              std::string::size_type v173 = v172;
            }
            v583.__r_.__value_.__r.__words[0] = v173;
            v583.__r_.__value_.__r.__words[2] = v172 + v171;
            if (v165) {
              operator delete(v165);
            }
          }
          else
          {
            *(unsigned char *)v583.__r_.__value_.__l.__size_ = 1;
            std::string::size_type v166 = (std::string::size_type)(v165 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v166;
          if (*((unsigned char *)v138 + 140)) {
            char v177 = 0x80;
          }
          else {
            char v177 = 0;
          }
          std::string v178 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v180 = v583.__r_.__value_.__r.__words[0];
            std::string::size_type v181 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            int64_t v182 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v182 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v183 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v182) {
              int64_t v182 = 2 * v183;
            }
            if (v183 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v184 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v184 = v182;
            }
            if (v184) {
              std::string::size_type v185 = (std::string::size_type)operator new(v184);
            }
            else {
              std::string::size_type v185 = 0;
            }
            std::string::size_type v186 = v185 + v181;
            uint64_t v187 = (char *)(v185 + v181);
            *uint64_t v187 = v177;
            std::string::size_type v179 = (std::string::size_type)(v187 + 1);
            if (v178 != (char *)v180)
            {
              v188 = &v178[~v180];
              do
              {
                char v189 = *--v178;
                (v188--)[v185] = v189;
              }
              while (v178 != (char *)v180);
              std::string v178 = (char *)v583.__r_.__value_.__r.__words[0];
              std::string::size_type v186 = v185;
            }
            v583.__r_.__value_.__r.__words[0] = v186;
            v583.__r_.__value_.__r.__words[2] = v185 + v184;
            if (v178) {
              operator delete(v178);
            }
          }
          else
          {
            *(unsigned char *)v583.__r_.__value_.__l.__size_ = v177;
            std::string::size_type v179 = (std::string::size_type)(v178 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v179;
        }
        if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v138 + 19)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v138 + 21)))))))
        {
          uint64_t v190 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v192 = v583.__r_.__value_.__r.__words[0];
            std::string::size_type v193 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            int64_t v194 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v194 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v195 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v194) {
              int64_t v194 = 2 * v195;
            }
            if (v195 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v196 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v196 = v194;
            }
            if (v196) {
              std::string::size_type v197 = (std::string::size_type)operator new(v196);
            }
            else {
              std::string::size_type v197 = 0;
            }
            std::string::size_type v198 = v197 + v193;
            uint64_t v199 = (unsigned char *)(v197 + v193);
            *uint64_t v199 = 2;
            std::string::size_type v191 = (std::string::size_type)(v199 + 1);
            if (v190 != (char *)v192)
            {
              std::string v200 = &v190[~v192];
              do
              {
                char v201 = *--v190;
                (v200--)[v197] = v201;
              }
              while (v190 != (char *)v192);
              uint64_t v190 = (char *)v583.__r_.__value_.__r.__words[0];
              std::string::size_type v198 = v197;
            }
            v583.__r_.__value_.__r.__words[0] = v198;
            v583.__r_.__value_.__r.__words[2] = v197 + v196;
            if (v190) {
              operator delete(v190);
            }
          }
          else
          {
            *(unsigned char *)v583.__r_.__value_.__l.__size_ = 2;
            std::string::size_type v191 = (std::string::size_type)(v190 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v191;
        }
        if (*((unsigned char *)v138 + 24))
        {
          std::string v202 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v204 = v583.__r_.__value_.__r.__words[0];
            std::string::size_type v205 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            int64_t v206 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v206 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v207 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v206) {
              int64_t v206 = 2 * v207;
            }
            if (v207 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v208 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v208 = v206;
            }
            if (v208) {
              std::string::size_type v209 = (std::string::size_type)operator new(v208);
            }
            else {
              std::string::size_type v209 = 0;
            }
            std::string::size_type v210 = v209 + v205;
            v211 = (unsigned char *)(v209 + v205);
            unsigned char *v211 = 3;
            std::string::size_type v203 = (std::string::size_type)(v211 + 1);
            if (v202 != (char *)v204)
            {
              unint64_t v212 = &v202[~v204];
              do
              {
                char v213 = *--v202;
                (v212--)[v209] = v213;
              }
              while (v202 != (char *)v204);
              std::string v202 = (char *)v583.__r_.__value_.__r.__words[0];
              std::string::size_type v210 = v209;
            }
            v583.__r_.__value_.__r.__words[0] = v210;
            v583.__r_.__value_.__r.__words[2] = v209 + v208;
            if (v202) {
              operator delete(v202);
            }
          }
          else
          {
            *(unsigned char *)v583.__r_.__value_.__l.__size_ = 3;
            std::string::size_type v203 = (std::string::size_type)(v202 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v203;
        }
        if (*((unsigned char *)v138 + 36))
        {
          uint64_t v214 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v216 = v583.__r_.__value_.__r.__words[0];
            std::string::size_type v217 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            int64_t v218 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v218 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v219 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v218) {
              int64_t v218 = 2 * v219;
            }
            if (v219 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v220 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v220 = v218;
            }
            if (v220) {
              std::string::size_type v221 = (std::string::size_type)operator new(v220);
            }
            else {
              std::string::size_type v221 = 0;
            }
            std::string::size_type v222 = v221 + v217;
            uint64_t v223 = (unsigned char *)(v221 + v217);
            *uint64_t v223 = 4;
            std::string::size_type v215 = (std::string::size_type)(v223 + 1);
            if (v214 != (char *)v216)
            {
              v224 = &v214[~v216];
              do
              {
                char v225 = *--v214;
                (v224--)[v221] = v225;
              }
              while (v214 != (char *)v216);
              uint64_t v214 = (char *)v583.__r_.__value_.__r.__words[0];
              std::string::size_type v222 = v221;
            }
            v583.__r_.__value_.__r.__words[0] = v222;
            v583.__r_.__value_.__r.__words[2] = v221 + v220;
            if (v214) {
              operator delete(v214);
            }
          }
          else
          {
            *(unsigned char *)v583.__r_.__value_.__l.__size_ = 4;
            std::string::size_type v215 = (std::string::size_type)(v214 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v215;
        }
        if (*((float *)v138 + 12) != 0.0)
        {
          double v226 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v228 = v583.__r_.__value_.__r.__words[0];
            std::string::size_type v229 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            int64_t v230 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v230 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v231 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v230) {
              int64_t v230 = 2 * v231;
            }
            if (v231 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v232 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v232 = v230;
            }
            if (v232) {
              std::string::size_type v233 = (std::string::size_type)operator new(v232);
            }
            else {
              std::string::size_type v233 = 0;
            }
            std::string::size_type v234 = v233 + v229;
            v235 = (unsigned char *)(v233 + v229);
            unsigned char *v235 = 5;
            std::string::size_type v227 = (std::string::size_type)(v235 + 1);
            if (v226 != (char *)v228)
            {
              uint64_t v236 = &v226[~v228];
              do
              {
                char v237 = *--v226;
                (v236--)[v233] = v237;
              }
              while (v226 != (char *)v228);
              double v226 = (char *)v583.__r_.__value_.__r.__words[0];
              std::string::size_type v234 = v233;
            }
            v583.__r_.__value_.__r.__words[0] = v234;
            v583.__r_.__value_.__r.__words[2] = v233 + v232;
            if (v226) {
              operator delete(v226);
            }
          }
          else
          {
            *(unsigned char *)v583.__r_.__value_.__l.__size_ = 5;
            std::string::size_type v227 = (std::string::size_type)(v226 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v227;
        }
        if (__p) {
          operator delete(__p);
        }
        if (v583.__r_.__value_.__r.__words[0]) {
          operator delete(v583.__r_.__value_.__l.__data_);
        }
        if (!v238) {
          goto LABEL_1070;
        }
      }
      unint64_t v239 = v135[1];
      if (v239)
      {
        do
        {
          unint64_t v240 = (uint64_t **)v239;
          unint64_t v239 = (uint64_t *)*v239;
        }
        while (v239);
      }
      else
      {
        do
        {
          unint64_t v240 = (uint64_t **)v135[2];
          BOOL v446 = *v240 == (uint64_t *)v135;
          int v135 = v240;
        }
        while (!v446);
      }
      int v135 = v240;
      int v134 = v543;
    }
    while (v240 != &v549);
    v241 = a8;
    int v134 = *a8;
  }
  v242 = v551;
  if (v551 == (uint64_t *)&v552) {
    goto LABEL_596;
  }
  v544 = v134;
  do
  {
    v243 = *(unint64_t **)v547;
    if (a3 == 2)
    {
      if (*(void *)v547 + 1 > (unint64_t)v134) {
        goto LABEL_1070;
      }
      *(unsigned char *)(a4 + *(void *)v547) = *((unsigned char *)v242 + 40) << 6;
      v243 = (unint64_t *)((char *)v243 + 1);
    }
    if ((unint64_t *)((char *)v243 + 1) > v134) {
      goto LABEL_1070;
    }
    __int16 v244 = *((_WORD *)v242 + 16);
    *((unsigned char *)v243 + a4) = 16;
    if ((unint64_t *)((char *)v243 + 3) >= v134) {
      goto LABEL_1070;
    }
    *((unsigned char *)v243 + a4 + 1) = HIBYTE(v244);
    *(void *)v547 = (char *)v243 + 3;
    *((unsigned char *)v243 + a4 + 2) = v244;
    if (*((unsigned char *)v242 + 40) == 2)
    {
        goto LABEL_1070;
      goto LABEL_589;
    }
    uint64_t v245 = v242[6];
    memset(&v583, 0, sizeof(v583));
    std::string __p = 0;
    unint64_t v576 = 0;
    int64_t v577 = 0;
    if (*(_DWORD *)(v245 + 24))
    {
      uint64_t v246 = 0;
      uint64_t v247 = 0;
      unint64_t v248 = 0;
      unint64_t v249 = 0;
      do
      {
        v250 = *(char ***)(*(void *)(v245 + 28) + 8 * v249);
        std::string::basic_string[abi:ne180100]<0>(&v585, "AO_");
        std::string::basic_string[abi:ne180100]<0>(&v584, *v250);
        if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v584.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v585.__r_.__value_.__l.__data_);
        }
        if (v251 >= 0x10000)
        {
          unint64_t v252 = v555;
          if (v555)
          {
            uint64_t v253 = &v555;
            do
            {
              int v254 = v252;
              v255 = v253;
              unsigned int v256 = *((unsigned __int16 *)v252 + 16);
              CFTypeRef v257 = (uint64_t **)(v252 + 1);
              if (v256 >= (unsigned __int16)v251)
              {
                CFTypeRef v257 = (uint64_t **)v254;
                uint64_t v253 = (uint64_t **)v254;
              }
              unint64_t v252 = *v257;
            }
            while (v252);
            if (v253 != &v555)
            {
              if (v256 < (unsigned __int16)v251) {
                int v254 = (uint64_t *)v255;
              }
              if (*((unsigned __int16 *)v254 + 16) <= (unsigned __int16)v251)
              {
                if ((unint64_t)v246 >= v248)
                {
                  uint64_t v259 = v246 - v247;
                  if (v246 - v247 <= -3)
                  {
                    std::string __p = v247;
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v260 = v259 >> 1;
                  if (v248 - (unint64_t)v247 <= (v259 >> 1) + 1) {
                    uint64_t v261 = v260 + 1;
                  }
                  else {
                    uint64_t v261 = v248 - (void)v247;
                  }
                  if (v248 - (unint64_t)v247 >= 0x7FFFFFFFFFFFFFFELL) {
                    uint64_t v262 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v262 = v261;
                  }
                  if (v262) {
                    uint64_t v262 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v262);
                  }
                  else {
                    uint64_t v263 = 0;
                  }
                  std::string v264 = (char *)(v262 + 2 * v260);
                  *(_WORD *)std::string v264 = v251;
                  v258 = v264 + 2;
                  while (v246 != v247)
                  {
                    __int16 v265 = *((_WORD *)v246 - 1);
                    v246 -= 2;
                    *((_WORD *)v264 - 1) = v265;
                    v264 -= 2;
                  }
                  unint64_t v248 = v262 + 2 * v263;
                  unint64_t v576 = (unint64_t)v258;
                  if (v247) {
                    operator delete(v247);
                  }
                  uint64_t v247 = v264;
                }
                else
                {
                  *(_WORD *)uint64_t v246 = v251;
                  v258 = v246 + 2;
                }
                unint64_t v576 = (unint64_t)v258;
                uint64_t v246 = v258;
              }
            }
          }
        }
        ++v249;
      }
      while (v249 < *(unsigned int *)(v245 + 24));
      int64_t v577 = v248;
      std::string __p = v247;
      v241 = a8;
    }
    char v266 = (*(unsigned char *)(v245 + 96) << 6) + 4 * *(unsigned char *)(v245 + 97);
    std::string::size_type v268 = v583.__r_.__value_.__r.__words[2];
    long long v267 = (char *)v583.__r_.__value_.__l.__size_;
    if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v270 = v583.__r_.__value_.__r.__words[0];
      std::string::size_type v271 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
      int64_t v272 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
      if (v272 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v272) {
        int64_t v272 = 2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]);
      }
      if (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v273 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v273 = v272;
      }
      if (v273) {
        std::string::size_type v274 = (std::string::size_type)operator new(v273);
      }
      else {
        std::string::size_type v274 = 0;
      }
      std::string::size_type v275 = v274 + v271;
      CFArrayRef v276 = (unsigned char *)(v274 + v271);
      *CFArrayRef v276 = v266;
      std::string v269 = v276 + 1;
      if (v267 != (char *)v270)
      {
        char v277 = &v267[~v270];
        do
        {
          char v278 = *--v267;
          (v277--)[v274] = v278;
        }
        while (v267 != (char *)v270);
        long long v267 = (char *)v583.__r_.__value_.__r.__words[0];
        std::string::size_type v275 = v274;
      }
      std::string::size_type v268 = v274 + v273;
      v583.__r_.__value_.__r.__words[0] = v275;
      v583.__r_.__value_.__r.__words[2] = v268;
      if (v267) {
        operator delete(v267);
      }
    }
    else
    {
      *(unsigned char *)v583.__r_.__value_.__l.__size_ = v266;
      std::string v269 = v267 + 1;
    }
    v583.__r_.__value_.__l.__size_ = (std::string::size_type)v269;
    if (*(unsigned char *)(v245 + 77))
    {
      if ((unint64_t)v269 >= v268)
      {
        std::string::size_type v280 = v583.__r_.__value_.__r.__words[0];
        long long v281 = &v269[-v583.__r_.__value_.__r.__words[0]];
        int64_t v282 = (int64_t)&v269[-v583.__r_.__value_.__r.__words[0] + 1];
        if (v282 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (2 * (v268 - v583.__r_.__value_.__r.__words[0]) > v282) {
          int64_t v282 = 2 * (v268 - v583.__r_.__value_.__r.__words[0]);
        }
        if (v268 - v583.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v283 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v283 = v282;
        }
        if (v283) {
          std::string::size_type v284 = (std::string::size_type)operator new(v283);
        }
        else {
          std::string::size_type v284 = 0;
        }
        std::string::size_type v285 = v284 + v283;
        v281[v284] = 0;
        std::string::size_type v279 = (std::string::size_type)&v281[v284 + 1];
        if (v269 == (unsigned char *)v280)
        {
          v583.__r_.__value_.__r.__words[0] = (std::string::size_type)&v281[v284];
          v583.__r_.__value_.__l.__size_ = (std::string::size_type)&v281[v284 + 1];
          v583.__r_.__value_.__r.__words[2] = v285;
        }
        else
        {
          v286 = &v269[~v280];
          do
          {
            char v287 = *--v269;
            (v286--)[v284] = v287;
          }
          while (v269 != (unsigned char *)v280);
          std::string v269 = (unsigned char *)v583.__r_.__value_.__r.__words[0];
          v583.__r_.__value_.__r.__words[0] = v284;
          v583.__r_.__value_.__l.__size_ = (std::string::size_type)&v281[v284 + 1];
          v583.__r_.__value_.__r.__words[2] = v285;
          if (!v269) {
            goto LABEL_583;
          }
        }
        operator delete(v269);
      }
      else
      {
        *std::string v269 = 0;
        std::string::size_type v279 = (std::string::size_type)(v269 + 1);
      }
LABEL_583:
      v583.__r_.__value_.__l.__size_ = v279;
    }
    if (__p) {
      operator delete(__p);
    }
    if (v583.__r_.__value_.__r.__words[0]) {
      operator delete(v583.__r_.__value_.__l.__data_);
    }
    if (!v288) {
      goto LABEL_1070;
    }
LABEL_589:
    v289 = (uint64_t *)v242[1];
    if (v289)
    {
      do
      {
        v290 = (uint64_t **)v289;
        v289 = (uint64_t *)*v289;
      }
      while (v289);
    }
    else
    {
      do
      {
        v290 = (uint64_t **)v242[2];
        BOOL v446 = *v290 == v242;
        v242 = (uint64_t *)v290;
      }
      while (!v446);
    }
    v242 = (uint64_t *)v290;
    int v134 = v544;
  }
  while (v290 != &v552);
  int v134 = *v241;
LABEL_596:
  v291 = v554;
  if (v554 != (uint64_t *)&v555)
  {
    v545 = v134;
    while (1)
    {
      v292 = *(unint64_t **)v547;
      if (a3 == 2)
      {
        if (*(void *)v547 + 1 > (unint64_t)v134) {
          goto LABEL_1070;
        }
        *(unsigned char *)(a4 + *(void *)v547) = *((unsigned char *)v291 + 40) << 6;
        v292 = (unint64_t *)((char *)v292 + 1);
      }
      if ((unint64_t *)((char *)v292 + 1) > v134) {
        goto LABEL_1070;
      }
      __int16 v293 = *((_WORD *)v291 + 16);
      *((unsigned char *)v292 + a4) = 32;
      if ((unint64_t *)((char *)v292 + 3) >= v134) {
        goto LABEL_1070;
      }
      *((unsigned char *)v292 + a4 + 1) = HIBYTE(v293);
      *(void *)v547 = (char *)v292 + 3;
      *((unsigned char *)v292 + a4 + 2) = v293;
      if (*((unsigned char *)v291 + 40) == 2)
      {
          goto LABEL_1070;
        goto LABEL_866;
      }
      uint64_t v294 = v291[6];
      memset(&v585, 0, sizeof(v585));
      memset(&v584, 0, sizeof(v584));
      v295 = *(char ***)(v294 + 104);
      if (v295)
      {
        std::string::basic_string[abi:ne180100]<0>(&v583, "AP_");
        std::string::basic_string[abi:ne180100]<0>(&v582, *v295);
        if (SHIBYTE(v582.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v582.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v583.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v583.__r_.__value_.__l.__data_);
        }
        if (HIDWORD(v296))
        {
          v297 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(1uLL);
          _DWORD *v297 = v296;
          v584.__r_.__value_.__l.__size_ = (std::string::size_type)(v297 + 1);
          v584.__r_.__value_.__r.__words[2] = (std::string::size_type)&v297[v298];
          v584.__r_.__value_.__r.__words[0] = (std::string::size_type)v297;
        }
      }
      memset(&v583, 0, sizeof(v583));
      if (*(_DWORD *)(v294 + 112))
      {
        v299 = 0;
        v300 = 0;
        std::string::size_type v301 = 0;
        unint64_t v302 = 0;
        do
        {
          v303 = *(char ***)(*(void *)(v294 + 116) + 8 * v302);
          std::string::basic_string[abi:ne180100]<0>(&v582, "AO_");
          std::string::basic_string[abi:ne180100]<0>(&v581, *v303);
          if (SHIBYTE(v581.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v581.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v582.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v582.__r_.__value_.__l.__data_);
          }
          if (v304 >= 0x10000)
          {
            if ((unint64_t)v299 >= v301)
            {
              uint64_t v306 = v299 - v300;
              if (v299 - v300 <= -3)
              {
                v583.__r_.__value_.__r.__words[2] = v301;
                v583.__r_.__value_.__r.__words[0] = (std::string::size_type)v300;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v307 = v306 >> 1;
              if (v301 - (unint64_t)v300 <= (v306 >> 1) + 1) {
                uint64_t v308 = v307 + 1;
              }
              else {
                uint64_t v308 = v301 - (void)v300;
              }
              if (v301 - (unint64_t)v300 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v309 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v309 = v308;
              }
              if (v309) {
                uint64_t v309 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v309);
              }
              else {
                uint64_t v310 = 0;
              }
              v311 = (char *)(v309 + 2 * v307);
              *(_WORD *)v311 = v304;
              std::string::size_type v305 = (std::string::size_type)(v311 + 2);
              while (v299 != v300)
              {
                __int16 v312 = *((_WORD *)v299 - 1);
                v299 -= 2;
                *((_WORD *)v311 - 1) = v312;
                v311 -= 2;
              }
              std::string::size_type v301 = v309 + 2 * v310;
              v583.__r_.__value_.__l.__size_ = v305;
              if (v300) {
                operator delete(v300);
              }
              v300 = v311;
            }
            else
            {
              *(_WORD *)v299 = v304;
              std::string::size_type v305 = (std::string::size_type)(v299 + 2);
            }
            v583.__r_.__value_.__l.__size_ = v305;
            v299 = (char *)v305;
          }
          ++v302;
        }
        while (v302 < *(unsigned int *)(v294 + 112));
        v583.__r_.__value_.__r.__words[2] = v301;
        v583.__r_.__value_.__r.__words[0] = (std::string::size_type)v300;
      }
      memset(&v582, 0, sizeof(v582));
      if (*(_DWORD *)(v294 + 124))
      {
        v313 = 0;
        v314 = 0;
        std::string::size_type v315 = 0;
        unint64_t v316 = 0;
        do
        {
          v317 = *(char ***)(*(void *)(v294 + 128) + 8 * v316);
          std::string::basic_string[abi:ne180100]<0>(&v581, "AO_");
          std::string::basic_string[abi:ne180100]<0>(&v580, *v317);
          if (SHIBYTE(v580.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v580.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v581.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v581.__r_.__value_.__l.__data_);
          }
          if (v318 >= 0x10000)
          {
            if ((unint64_t)v313 >= v315)
            {
              uint64_t v320 = v313 - v314;
              if (v313 - v314 <= -3)
              {
                v582.__r_.__value_.__r.__words[2] = v315;
                v582.__r_.__value_.__r.__words[0] = (std::string::size_type)v314;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v321 = v320 >> 1;
              if (v315 - (unint64_t)v314 <= (v320 >> 1) + 1) {
                uint64_t v322 = v321 + 1;
              }
              else {
                uint64_t v322 = v315 - (void)v314;
              }
              if (v315 - (unint64_t)v314 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v323 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v323 = v322;
              }
              if (v323) {
                uint64_t v323 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v323);
              }
              else {
                uint64_t v324 = 0;
              }
              v325 = (char *)(v323 + 2 * v321);
              *(_WORD *)v325 = v318;
              std::string::size_type v319 = (std::string::size_type)(v325 + 2);
              while (v313 != v314)
              {
                __int16 v326 = *((_WORD *)v313 - 1);
                v313 -= 2;
                *((_WORD *)v325 - 1) = v326;
                v325 -= 2;
              }
              std::string::size_type v315 = v323 + 2 * v324;
              v582.__r_.__value_.__l.__size_ = v319;
              if (v314) {
                operator delete(v314);
              }
              v314 = v325;
            }
            else
            {
              *(_WORD *)v313 = v318;
              std::string::size_type v319 = (std::string::size_type)(v313 + 2);
            }
            v582.__r_.__value_.__l.__size_ = v319;
            v313 = (char *)v319;
          }
          ++v316;
        }
        while (v316 < *(unsigned int *)(v294 + 124));
        v582.__r_.__value_.__r.__words[2] = v315;
        v582.__r_.__value_.__r.__words[0] = (std::string::size_type)v314;
      }
      memset(&v581, 0, sizeof(v581));
      if (*(_DWORD *)(v294 + 136))
      {
        v327 = 0;
        v328 = 0;
        std::string::size_type v329 = 0;
        unint64_t v330 = 0;
        do
        {
          v331 = *(char ***)(*(void *)(v294 + 140) + 8 * v330);
          std::string::basic_string[abi:ne180100]<0>(&v580, "ATU_");
          std::string::basic_string[abi:ne180100]<0>(&v579, *v331);
          if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v579.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v580.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v580.__r_.__value_.__l.__data_);
          }
          if (HIDWORD(v332))
          {
            if ((unint64_t)v327 >= v329)
            {
              uint64_t v334 = (v327 - v328) >> 2;
              unint64_t v335 = v334 + 1;
              if ((unint64_t)(v334 + 1) >> 62)
              {
                v581.__r_.__value_.__r.__words[2] = v329;
                v581.__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v329 - (void)v328) >> 1 > v335) {
                unint64_t v335 = (uint64_t)(v329 - (void)v328) >> 1;
              }
              if (v329 - (unint64_t)v328 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v336 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v336 = v335;
              }
              if (v336) {
                unint64_t v336 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v336);
              }
              else {
                uint64_t v337 = 0;
              }
              v338 = (char *)(v336 + 4 * v334);
              *(_DWORD *)v338 = v332;
              std::string::size_type v333 = (std::string::size_type)(v338 + 4);
              while (v327 != v328)
              {
                int v339 = *((_DWORD *)v327 - 1);
                v327 -= 4;
                *((_DWORD *)v338 - 1) = v339;
                v338 -= 4;
              }
              std::string::size_type v329 = v336 + 4 * v337;
              v581.__r_.__value_.__l.__size_ = v333;
              if (v328) {
                operator delete(v328);
              }
              v328 = v338;
            }
            else
            {
              *(_DWORD *)v327 = v332;
              std::string::size_type v333 = (std::string::size_type)(v327 + 4);
            }
            v581.__r_.__value_.__l.__size_ = v333;
            v327 = (char *)v333;
          }
          ++v330;
        }
        while (v330 < *(unsigned int *)(v294 + 136));
        v581.__r_.__value_.__r.__words[2] = v329;
        v581.__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
      }
      if (*(unsigned char *)(v294 + 174)) {
        char v340 = ((*(unsigned char *)(v294 + 160) != 0) << 7) | 0x40;
      }
      else {
        char v340 = (*(unsigned char *)(v294 + 160) != 0) << 7;
      }
      char v341 = v340 + 16 * *(unsigned char *)(v294 + 168) - 16;
      char v342 = v340 | 0x20;
      if (*(unsigned char *)(v294 + 168)) {
        char v342 = v341;
      }
      unsigned int v343 = *(unsigned __int8 *)(v294 + 169);
      if (v343 >= 0xA) {
        LOBYTE(v343) = 10;
      }
      char v344 = v342 | v343;
      v345 = (char *)v585.__r_.__value_.__l.__size_;
      if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v347 = v585.__r_.__value_.__r.__words[0];
        std::string::size_type v348 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
        int64_t v349 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
        if (v349 < 0) {
          goto LABEL_1077;
        }
        std::string::size_type v350 = v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0];
        if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v349) {
          int64_t v349 = 2 * v350;
        }
        if (v350 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v351 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v351 = v349;
        }
        if (v351) {
          std::string::size_type v352 = (std::string::size_type)operator new(v351);
        }
        else {
          std::string::size_type v352 = 0;
        }
        std::string::size_type v353 = v352 + v348;
        v354 = (unsigned char *)(v352 + v348);
        unsigned char *v354 = v344;
        std::string::size_type v346 = (std::string::size_type)(v354 + 1);
        if (v345 != (char *)v347)
        {
          v355 = &v345[~v347];
          do
          {
            char v356 = *--v345;
            (v355--)[v352] = v356;
          }
          while (v345 != (char *)v347);
          v345 = (char *)v585.__r_.__value_.__r.__words[0];
          std::string::size_type v353 = v352;
        }
        v585.__r_.__value_.__r.__words[0] = v353;
        v585.__r_.__value_.__r.__words[2] = v352 + v351;
        if (v345) {
          operator delete(v345);
        }
      }
      else
      {
        *(unsigned char *)v585.__r_.__value_.__l.__size_ = v344;
        std::string::size_type v346 = (std::string::size_type)(v345 + 1);
      }
      v585.__r_.__value_.__l.__size_ = v346;
      if (*(unsigned char *)(v294 + 171)) {
        char v357 = ((*(unsigned char *)(v294 + 170) == 1) << 7) | 0x40;
      }
      else {
        char v357 = (*(unsigned char *)(v294 + 170) == 1) << 7;
      }
      if (*(unsigned char *)(v294 + 172)) {
        v357 |= 0x20u;
      }
      char v358 = *(unsigned char *)(v294 + 173) ? v357 | 0x10 : v357;
      v360 = (char *)v585.__r_.__value_.__r.__words[2];
      v359 = (char *)v585.__r_.__value_.__l.__size_;
      if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v362 = v585.__r_.__value_.__r.__words[0];
        std::string::size_type v363 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
        int64_t v364 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
        if (v364 < 0) {
          goto LABEL_1077;
        }
        if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v364) {
          int64_t v364 = 2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]);
        }
        if (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v365 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v365 = v364;
        }
        if (v365) {
          std::string::size_type v366 = (std::string::size_type)operator new(v365);
        }
        else {
          std::string::size_type v366 = 0;
        }
        std::string::size_type v367 = v366 + v363;
        v368 = (unsigned char *)(v366 + v363);
        unsigned char *v368 = v358;
        v361 = v368 + 1;
        if (v359 != (char *)v362)
        {
          v369 = &v359[~v362];
          do
          {
            char v370 = *--v359;
            (v369--)[v366] = v370;
          }
          while (v359 != (char *)v362);
          v359 = (char *)v585.__r_.__value_.__r.__words[0];
          std::string::size_type v367 = v366;
        }
        v360 = (char *)(v366 + v365);
        v585.__r_.__value_.__r.__words[0] = v367;
        v585.__r_.__value_.__r.__words[2] = v366 + v365;
        if (v359) {
          operator delete(v359);
        }
      }
      else
      {
        *(unsigned char *)v585.__r_.__value_.__l.__size_ = v358;
        v361 = v359 + 1;
      }
      v585.__r_.__value_.__l.__size_ = (std::string::size_type)v361;
      if (*(unsigned char *)(v294 + 16)) {
        break;
      }
LABEL_766:
      if (*(unsigned char *)(v294 + 28))
      {
        v380 = (char *)v585.__r_.__value_.__l.__size_;
        if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v382 = v585.__r_.__value_.__r.__words[0];
          std::string::size_type v383 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
          int64_t v384 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
          if (v384 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v385 = v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0];
          if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v384) {
            int64_t v384 = 2 * v385;
          }
          if (v385 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v386 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v386 = v384;
          }
          if (v386) {
            std::string::size_type v387 = (std::string::size_type)operator new(v386);
          }
          else {
            std::string::size_type v387 = 0;
          }
          std::string::size_type v388 = v387 + v383;
          v389 = (unsigned char *)(v387 + v383);
          unsigned char *v389 = 1;
          std::string::size_type v381 = (std::string::size_type)(v389 + 1);
          if (v380 != (char *)v382)
          {
            v390 = &v380[~v382];
            do
            {
              char v391 = *--v380;
              (v390--)[v387] = v391;
            }
            while (v380 != (char *)v382);
            v380 = (char *)v585.__r_.__value_.__r.__words[0];
            std::string::size_type v388 = v387;
          }
          v585.__r_.__value_.__r.__words[0] = v388;
          v585.__r_.__value_.__r.__words[2] = v387 + v386;
          if (v380) {
            operator delete(v380);
          }
        }
        else
        {
          *(unsigned char *)v585.__r_.__value_.__l.__size_ = 1;
          std::string::size_type v381 = (std::string::size_type)(v380 + 1);
        }
        v585.__r_.__value_.__l.__size_ = v381;
      }
      if (!*(unsigned char *)(v294 + 172)) {
        goto LABEL_834;
      }
      std::string::size_type v393 = v585.__r_.__value_.__r.__words[2];
      v392 = (char *)v585.__r_.__value_.__l.__size_;
      if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v395 = v585.__r_.__value_.__r.__words[0];
        std::string::size_type v396 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
        int64_t v397 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
        if (v397 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v397) {
          int64_t v397 = 2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]);
        }
        if (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v398 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v398 = v397;
        }
        if (v398) {
          std::string::size_type v399 = (std::string::size_type)operator new(v398);
        }
        else {
          std::string::size_type v399 = 0;
        }
        std::string::size_type v400 = v399 + v396;
        v401 = (unsigned char *)(v399 + v396);
        unsigned char *v401 = 2;
        v394 = v401 + 1;
        if (v392 != (char *)v395)
        {
          v402 = &v392[~v395];
          do
          {
            char v403 = *--v392;
            (v402--)[v399] = v403;
          }
          while (v392 != (char *)v395);
          v392 = (char *)v585.__r_.__value_.__r.__words[0];
          std::string::size_type v400 = v399;
        }
        std::string::size_type v393 = v399 + v398;
        v585.__r_.__value_.__r.__words[0] = v400;
        v585.__r_.__value_.__r.__words[2] = v393;
        if (v392) {
          operator delete(v392);
        }
      }
      else
      {
        *(unsigned char *)v585.__r_.__value_.__l.__size_ = 2;
        v394 = v392 + 1;
      }
      v585.__r_.__value_.__l.__size_ = (std::string::size_type)v394;
      if (*(unsigned char *)(v294 + 85)) {
        char v404 = 32 * *(unsigned char *)(v294 + 48) + ((*(unsigned char *)(v294 + 84) != 0) << 7) + 64;
      }
      else {
        char v404 = (*(unsigned char *)(v294 + 84) != 0) << 7;
      }
      if (*(unsigned char *)(v294 + 86))
      {
        if (*(unsigned __int8 *)(v294 + 64) != *(unsigned __int8 *)(v294 + 80)) {
          __assert_rtn("encode_object", "AudioMetadataSerializer.cpp", 951, "object.audioObjectInteraction.positionInteractionRange.min.isCartesian == object.audioObjectInteraction.positionInteractionRange.max.isCartesian");
        }
        if (*(unsigned char *)(v294 + 64)) {
          char v405 = 12;
        }
        else {
          char v405 = 8;
        }
        v404 |= v405;
      }
      if ((unint64_t)v394 >= v393)
      {
        std::string::size_type v407 = v585.__r_.__value_.__r.__words[0];
        v408 = &v394[-v585.__r_.__value_.__r.__words[0]];
        int64_t v409 = (int64_t)&v394[-v585.__r_.__value_.__r.__words[0] + 1];
        if (v409 < 0) {
LABEL_1077:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (2 * (v393 - v585.__r_.__value_.__r.__words[0]) > v409) {
          int64_t v409 = 2 * (v393 - v585.__r_.__value_.__r.__words[0]);
        }
        if (v393 - v585.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v410 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v410 = v409;
        }
        if (v410) {
          std::string::size_type v411 = (std::string::size_type)operator new(v410);
        }
        else {
          std::string::size_type v411 = 0;
        }
        std::string::size_type v412 = v411 + v410;
        v408[v411] = v404;
        std::string::size_type v406 = (std::string::size_type)&v408[v411 + 1];
        if (v394 == (unsigned char *)v407)
        {
          v585.__r_.__value_.__r.__words[0] = (std::string::size_type)&v408[v411];
          v585.__r_.__value_.__l.__size_ = (std::string::size_type)&v408[v411 + 1];
          v585.__r_.__value_.__r.__words[2] = v412;
        }
        else
        {
          v413 = &v394[~v407];
          do
          {
            char v414 = *--v394;
            (v413--)[v411] = v414;
          }
          while (v394 != (unsigned char *)v407);
          v394 = (unsigned char *)v585.__r_.__value_.__r.__words[0];
          v585.__r_.__value_.__r.__words[0] = v411;
          v585.__r_.__value_.__l.__size_ = (std::string::size_type)&v408[v411 + 1];
          v585.__r_.__value_.__r.__words[2] = v412;
          if (!v394) {
            goto LABEL_830;
          }
        }
        operator delete(v394);
      }
      else
      {
        unsigned char *v394 = v404;
        std::string::size_type v406 = (std::string::size_type)(v394 + 1);
      }
LABEL_830:
      v585.__r_.__value_.__l.__size_ = v406;
      if (*(unsigned char *)(v294 + 85))
      {
      }
      if (*(unsigned char *)(v294 + 86))
      {
      }
LABEL_834:
      int64_t v415 = v585.__r_.__value_.__r.__words[2];
      v416 = (char *)v585.__r_.__value_.__l.__size_;
      if (*(float *)(v294 + 148) != 0.0 || *(float *)(v294 + 152) != 0.0 || *(float *)(v294 + 156) != 0.0)
      {
        if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v418 = v585.__r_.__value_.__r.__words[0];
          std::string::size_type v419 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
          int64_t v420 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
          if (v420 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v421 = v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0];
          if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v420) {
            int64_t v420 = 2 * v421;
          }
          if (v421 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v422 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v422 = v420;
          }
          if (v422) {
            std::string::size_type v423 = (std::string::size_type)operator new(v422);
          }
          else {
            std::string::size_type v423 = 0;
          }
          std::string::size_type v424 = v423 + v419;
          v425 = (unsigned char *)(v423 + v419);
          unsigned char *v425 = 3;
          std::string::size_type v417 = (std::string::size_type)(v425 + 1);
          if (v416 != (char *)v418)
          {
            v426 = &v416[~v418];
            do
            {
              char v427 = *--v416;
              (v426--)[v423] = v427;
            }
            while (v416 != (char *)v418);
            v416 = (char *)v585.__r_.__value_.__r.__words[0];
            std::string::size_type v424 = v423;
          }
          v585.__r_.__value_.__r.__words[0] = v424;
          v585.__r_.__value_.__r.__words[2] = v423 + v422;
          if (v416) {
            operator delete(v416);
          }
        }
        else
        {
          *(unsigned char *)v585.__r_.__value_.__l.__size_ = 3;
          std::string::size_type v417 = (std::string::size_type)(v416 + 1);
        }
        v585.__r_.__value_.__l.__size_ = v417;
        int64_t v415 = v585.__r_.__value_.__r.__words[2];
        v416 = (char *)v585.__r_.__value_.__l.__size_;
      }
      v428 = (void *)v585.__r_.__value_.__r.__words[0];
      std::string __p = (void *)v585.__r_.__value_.__r.__words[0];
      unint64_t v576 = (unint64_t)v416;
      int64_t v577 = v415;
      memset(&v585, 0, sizeof(v585));
      char v578 = 1;
      if (v581.__r_.__value_.__r.__words[0]) {
        operator delete(v581.__r_.__value_.__l.__data_);
      }
      if (v582.__r_.__value_.__r.__words[0]) {
        operator delete(v582.__r_.__value_.__l.__data_);
      }
      if (v583.__r_.__value_.__r.__words[0]) {
        operator delete(v583.__r_.__value_.__l.__data_);
      }
      if (v584.__r_.__value_.__r.__words[0]) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      {
        if (v428) {
          operator delete(v428);
        }
        goto LABEL_1070;
      }
      if (v428) {
        operator delete(v428);
      }
LABEL_866:
      v429 = (uint64_t *)v291[1];
      if (v429)
      {
        do
        {
          v430 = (uint64_t **)v429;
          v429 = (uint64_t *)*v429;
        }
        while (v429);
      }
      else
      {
        do
        {
          v430 = (uint64_t **)v291[2];
          BOOL v446 = *v430 == v291;
          v291 = (uint64_t *)v430;
        }
        while (!v446);
      }
      v291 = (uint64_t *)v430;
      int v134 = v545;
      if (v430 == &v555)
      {
        int v134 = *a8;
        goto LABEL_873;
      }
    }
    if (v361 >= v360)
    {
      std::string::size_type v372 = v585.__r_.__value_.__r.__words[0];
      v373 = &v361[-v585.__r_.__value_.__r.__words[0]];
      int64_t v374 = (int64_t)&v361[-v585.__r_.__value_.__r.__words[0] + 1];
      if (v374 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (2 * (uint64_t)&v360[-v585.__r_.__value_.__r.__words[0]] > (unint64_t)v374) {
        int64_t v374 = 2 * (void)&v360[-v585.__r_.__value_.__r.__words[0]];
      }
      if ((unint64_t)&v360[-v585.__r_.__value_.__r.__words[0]] >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v375 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v375 = v374;
      }
      if (v375) {
        std::string::size_type v376 = (std::string::size_type)operator new(v375);
      }
      else {
        std::string::size_type v376 = 0;
      }
      std::string::size_type v377 = v376 + v375;
      v373[v376] = 0;
      std::string::size_type v371 = (std::string::size_type)&v373[v376 + 1];
      if (v361 == (char *)v372)
      {
        v585.__r_.__value_.__r.__words[0] = (std::string::size_type)&v373[v376];
        v585.__r_.__value_.__l.__size_ = (std::string::size_type)&v373[v376 + 1];
        v585.__r_.__value_.__r.__words[2] = v377;
      }
      else
      {
        v378 = &v361[~v372];
        do
        {
          char v379 = *--v361;
          (v378--)[v376] = v379;
        }
        while (v361 != (char *)v372);
        v361 = (char *)v585.__r_.__value_.__r.__words[0];
        v585.__r_.__value_.__r.__words[0] = v376;
        v585.__r_.__value_.__l.__size_ = (std::string::size_type)&v373[v376 + 1];
        v585.__r_.__value_.__r.__words[2] = v377;
        if (!v361) {
          goto LABEL_765;
        }
      }
      operator delete(v361);
    }
    else
    {
      char *v361 = 0;
      std::string::size_type v371 = (std::string::size_type)(v361 + 1);
    }
LABEL_765:
    v585.__r_.__value_.__l.__size_ = v371;
    goto LABEL_766;
  }
LABEL_873:
  v431 = v557;
  if (v557 == (uint64_t *)&v558)
  {
    v489 = a8;
LABEL_985:
    v490 = v560;
    if (v560 == (uint64_t *)&v561)
    {
LABEL_1065:
      {
        unsigned int v542 = 0;
        *v489 = *(unint64_t **)v547;
      }
    }
    else
    {
      while (1)
      {
        v491 = *(unint64_t **)v547;
        if (a3 == 2)
        {
          if (*(void *)v547 + 1 > (unint64_t)v134) {
            break;
          }
          *(unsigned char *)(a4 + *(void *)v547) = *((unsigned char *)v490 + 40) << 6;
          v491 = (unint64_t *)((char *)v491 + 1);
        }
        if ((unint64_t *)((char *)v491 + 1) > v134) {
          break;
        }
        *((unsigned char *)v491 + a4) = 64;
        v492 = (char *)v491 + 6;
        if ((unint64_t *)((char *)v491 + 6) >= v134) {
          break;
        }
        v493 = v134;
        *((unsigned char *)v491 + a4 + 1) = *((unsigned char *)v490 + 35);
        v494 = (char *)v491 + a4;
        v494[2] = *((_WORD *)v490 + 17);
        v494[3] = BYTE1(*((_DWORD *)v490 + 8));
        v494[4] = *((_DWORD *)v490 + 8);
        char v495 = *((unsigned char *)v490 + 36);
        *(void *)v547 = v492;
        v494[5] = v495;
        if (*((unsigned char *)v490 + 40) == 2)
        {
            break;
        }
        else
        {
          uint64_t v496 = v490[6];
          memset(&v584, 0, sizeof(v584));
          if (*(void *)(v496 + 16)) {
            v497 = *(char **)(v496 + 16);
          }
          else {
            v497 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v497);
          if (*(void *)(v496 + 24)) {
            v498 = *(char **)(v496 + 24);
          }
          else {
            v498 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v585, v498);
          unint64_t v499 = HIBYTE(v577);
          if (v577 < 0) {
            unint64_t v499 = v576;
          }
          if (v499 != 4) {
            goto LABEL_1015;
          }
          p_p = &__p;
          if (v577 < 0) {
            p_p = __p;
          }
          if (*p_p != 825241648) {
            goto LABEL_1015;
          }
          std::string::size_type v501 = HIBYTE(v585.__r_.__value_.__r.__words[2]);
          if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v501 = v585.__r_.__value_.__l.__size_;
          }
          if (v501 != 3) {
            goto LABEL_1015;
          }
          v502 = &v585;
          if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v502 = (std::string *)v585.__r_.__value_.__r.__words[0];
          }
          int data_low = LOWORD(v502->__r_.__value_.__l.__data_);
          int v504 = v502->__r_.__value_.__s.__data_[2];
          if (data_low == 17232 && v504 == 77)
          {
            v520 = (char *)v584.__r_.__value_.__l.__size_;
            if (v584.__r_.__value_.__l.__size_ >= v584.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v522 = v584.__r_.__value_.__r.__words[0];
              std::string::size_type v523 = v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0];
              int64_t v524 = v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0] + 1;
              if (v524 < 0) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              std::string::size_type v525 = v584.__r_.__value_.__r.__words[2] - v584.__r_.__value_.__r.__words[0];
              if (2 * (v584.__r_.__value_.__r.__words[2] - v584.__r_.__value_.__r.__words[0]) > v524) {
                int64_t v524 = 2 * v525;
              }
              if (v525 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v526 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v526 = v524;
              }
              if (v526) {
                std::string::size_type v527 = (std::string::size_type)operator new(v526);
              }
              else {
                std::string::size_type v527 = 0;
              }
              std::string::size_type v528 = v527 + v523;
              v529 = (unsigned char *)(v527 + v523);
              unsigned char *v529 = 1;
              std::string::size_type v521 = (std::string::size_type)(v529 + 1);
              if (v520 != (char *)v522)
              {
                v530 = &v520[~v522];
                do
                {
                  char v531 = *--v520;
                  (v530--)[v527] = v531;
                }
                while (v520 != (char *)v522);
                v520 = (char *)v584.__r_.__value_.__r.__words[0];
                std::string::size_type v528 = v527;
              }
              v584.__r_.__value_.__r.__words[0] = v528;
              v584.__r_.__value_.__r.__words[2] = v527 + v526;
              if (v520) {
                operator delete(v520);
              }
            }
            else
            {
              *(unsigned char *)v584.__r_.__value_.__l.__size_ = 1;
              std::string::size_type v521 = (std::string::size_type)(v520 + 1);
            }
            v584.__r_.__value_.__l.__size_ = v521;
          }
          else
          {
LABEL_1015:
            v506 = (char *)v584.__r_.__value_.__l.__size_;
            if (v584.__r_.__value_.__l.__size_ >= v584.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v508 = v584.__r_.__value_.__r.__words[0];
              std::string::size_type v509 = v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0];
              int64_t v510 = v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0] + 1;
              if (v510 < 0) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              std::string::size_type v511 = v584.__r_.__value_.__r.__words[2] - v584.__r_.__value_.__r.__words[0];
              if (2 * (v584.__r_.__value_.__r.__words[2] - v584.__r_.__value_.__r.__words[0]) > v510) {
                int64_t v510 = 2 * v511;
              }
              if (v511 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v512 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v512 = v510;
              }
              if (v512) {
                std::string::size_type v513 = (std::string::size_type)operator new(v512);
              }
              else {
                std::string::size_type v513 = 0;
              }
              std::string::size_type v514 = v513 + v509;
              *(unsigned char *)(v513 + v509) = 0;
              std::string::size_type v507 = v513 + v509 + 1;
              if (v506 != (char *)v508)
              {
                v515 = &v506[~v508];
                do
                {
                  char v516 = *--v506;
                  (v515--)[v513] = v516;
                }
                while (v506 != (char *)v508);
                v506 = (char *)v584.__r_.__value_.__r.__words[0];
                std::string::size_type v514 = v513;
              }
              v584.__r_.__value_.__r.__words[0] = v514;
              v584.__r_.__value_.__r.__words[2] = v513 + v512;
              if (v506) {
                operator delete(v506);
              }
            }
            else
            {
              *(unsigned char *)v584.__r_.__value_.__l.__size_ = 0;
              std::string::size_type v507 = (std::string::size_type)(v506 + 1);
            }
            v584.__r_.__value_.__l.__size_ = v507;
          }
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v585.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v577) < 0) {
            operator delete(__p);
          }
          if (v584.__r_.__value_.__r.__words[0]) {
            operator delete(v584.__r_.__value_.__l.__data_);
          }
          if (!v517) {
            break;
          }
        }
        v518 = (uint64_t *)v490[1];
        if (v518)
        {
          do
          {
            v519 = (uint64_t **)v518;
            v518 = (uint64_t *)*v518;
          }
          while (v518);
        }
        else
        {
          do
          {
            v519 = (uint64_t **)v490[2];
            BOOL v446 = *v519 == v490;
            v490 = (uint64_t *)v519;
          }
          while (!v446);
        }
        v490 = (uint64_t *)v519;
        int v134 = v493;
        if (v519 == &v561)
        {
          v489 = a8;
          int v134 = *a8;
          goto LABEL_1065;
        }
      }
    }
  }
  else
  {
    while (1)
    {
      v432 = *(unint64_t **)v547;
      if (a3 == 2)
      {
        if (*(void *)v547 + 1 > (unint64_t)v134) {
          break;
        }
        *(unsigned char *)(a4 + *(void *)v547) = *((unsigned char *)v431 + 40) << 6;
        v432 = (unint64_t *)((char *)v432 + 1);
      }
      if ((unint64_t *)((char *)v432 + 1) > v134) {
        break;
      }
      int v433 = *((_DWORD *)v431 + 8);
      *((unsigned char *)v432 + a4) = 48;
      v434 = (char *)v432 + 5;
      if ((unint64_t *)((char *)v432 + 5) >= v134) {
        break;
      }
      v435 = v134;
      *((unsigned char *)v432 + a4 + 1) = HIBYTE(v433);
      v436 = (char *)v432 + a4;
      v436[2] = BYTE2(v433);
      v436[3] = BYTE1(v433);
      *(void *)v547 = v434;
      v436[4] = v433;
      if (*((unsigned char *)v431 + 40) == 2)
      {
          break;
      }
      else
      {
        uint64_t v437 = v431[6];
        memset(&v582, 0, sizeof(v582));
        if (*(void *)(v437 + 16)) {
          v438 = *(char **)(v437 + 16);
        }
        else {
          v438 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v438);
        if (*(void *)(v437 + 24)) {
          v439 = *(char **)(v437 + 24);
        }
        else {
          v439 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&v585, v439);
        unint64_t v440 = HIBYTE(v577);
        if (v577 < 0) {
          unint64_t v440 = v576;
        }
        if (v440 != 4) {
          goto LABEL_903;
        }
        v441 = &__p;
        if (v577 < 0) {
          v441 = __p;
        }
        if (*v441 != 825241648) {
          goto LABEL_903;
        }
        std::string::size_type v442 = HIBYTE(v585.__r_.__value_.__r.__words[2]);
        if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v442 = v585.__r_.__value_.__l.__size_;
        }
        if (v442 != 3) {
          goto LABEL_903;
        }
        v443 = &v585;
        if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v443 = (std::string *)v585.__r_.__value_.__r.__words[0];
        }
        int v444 = LOWORD(v443->__r_.__value_.__l.__data_);
        int v445 = v443->__r_.__value_.__s.__data_[2];
        BOOL v446 = v444 == 17232 && v445 == 77;
        if (v446)
        {
          v477 = (char *)v582.__r_.__value_.__l.__size_;
          if (v582.__r_.__value_.__l.__size_ >= v582.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v479 = v582.__r_.__value_.__r.__words[0];
            std::string::size_type v480 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0];
            int64_t v481 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0] + 1;
            if (v481 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v482 = v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0];
            if (2 * (v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0]) > v481) {
              int64_t v481 = 2 * v482;
            }
            if (v482 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v483 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v483 = v481;
            }
            if (v483) {
              std::string::size_type v484 = (std::string::size_type)operator new(v483);
            }
            else {
              std::string::size_type v484 = 0;
            }
            std::string::size_type v485 = v484 + v480;
            v486 = (unsigned char *)(v484 + v480);
            unsigned char *v486 = 1;
            std::string::size_type v478 = (std::string::size_type)(v486 + 1);
            if (v477 != (char *)v479)
            {
              v487 = &v477[~v479];
              do
              {
                char v488 = *--v477;
                (v487--)[v484] = v488;
              }
              while (v477 != (char *)v479);
              v477 = (char *)v582.__r_.__value_.__r.__words[0];
              std::string::size_type v485 = v484;
            }
            v582.__r_.__value_.__r.__words[0] = v485;
            v582.__r_.__value_.__r.__words[2] = v484 + v483;
            if (v477) {
              operator delete(v477);
            }
          }
          else
          {
            *(unsigned char *)v582.__r_.__value_.__l.__size_ = 1;
            std::string::size_type v478 = (std::string::size_type)(v477 + 1);
          }
          v582.__r_.__value_.__l.__size_ = v478;
        }
        else
        {
LABEL_903:
          v447 = (char *)v582.__r_.__value_.__l.__size_;
          if (v582.__r_.__value_.__l.__size_ >= v582.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v449 = v582.__r_.__value_.__r.__words[0];
            std::string::size_type v450 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0];
            int64_t v451 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0] + 1;
            if (v451 < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v452 = v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0];
            if (2 * (v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0]) > v451) {
              int64_t v451 = 2 * v452;
            }
            if (v452 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v453 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v453 = v451;
            }
            if (v453) {
              std::string::size_type v454 = (std::string::size_type)operator new(v453);
            }
            else {
              std::string::size_type v454 = 0;
            }
            std::string::size_type v455 = v454 + v450;
            v456 = (unsigned char *)(v454 + v450);
            unsigned char *v456 = 0;
            std::string::size_type v448 = (std::string::size_type)(v456 + 1);
            if (v447 != (char *)v449)
            {
              v457 = &v447[~v449];
              do
              {
                char v458 = *--v447;
                (v457--)[v454] = v458;
              }
              while (v447 != (char *)v449);
              v447 = (char *)v582.__r_.__value_.__r.__words[0];
              std::string::size_type v455 = v454;
            }
            v582.__r_.__value_.__r.__words[0] = v455;
            v582.__r_.__value_.__r.__words[2] = v454 + v453;
            if (v447) {
              operator delete(v447);
            }
          }
          else
          {
            *(unsigned char *)v582.__r_.__value_.__l.__size_ = 0;
            std::string::size_type v448 = (std::string::size_type)(v447 + 1);
          }
          v582.__r_.__value_.__l.__size_ = v448;
        }
        v459 = *(void **)(v437 + 32);
        if (v459 && *v459)
        {
          std::string::basic_string[abi:ne180100]<0>(&v584, "AC_");
          std::string::basic_string[abi:ne180100]<0>(&v583, **(char ***)(v437 + 32));
          if (SHIBYTE(v583.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v583.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v584.__r_.__value_.__l.__data_);
          }
          BOOL v461 = HIDWORD(v460) != 0;
          if (HIDWORD(v460)) {
            char v462 = 0x80;
          }
          else {
            char v462 = 0;
          }
        }
        else
        {
          BOOL v461 = 0;
          LODWORD(v460) = 0;
          char v462 = 0;
        }
        v463 = (char *)v582.__r_.__value_.__l.__size_;
        if (v582.__r_.__value_.__l.__size_ >= v582.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v465 = v582.__r_.__value_.__r.__words[0];
          std::string::size_type v466 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0];
          int64_t v467 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0] + 1;
          if (v467 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v468 = v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0];
          if (2 * (v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0]) > v467) {
            int64_t v467 = 2 * v468;
          }
          if (v468 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v469 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v469 = v467;
          }
          if (v469) {
            std::string::size_type v470 = (std::string::size_type)operator new(v469);
          }
          else {
            std::string::size_type v470 = 0;
          }
          std::string::size_type v471 = v470 + v466;
          *(unsigned char *)(v470 + v466) = v462;
          std::string::size_type v464 = v470 + v466 + 1;
          if (v463 != (char *)v465)
          {
            v472 = &v463[~v465];
            do
            {
              char v473 = *--v463;
              (v472--)[v470] = v473;
            }
            while (v463 != (char *)v465);
            v463 = (char *)v582.__r_.__value_.__r.__words[0];
            std::string::size_type v471 = v470;
          }
          v582.__r_.__value_.__r.__words[0] = v471;
          v582.__r_.__value_.__r.__words[2] = v470 + v469;
          if (v463) {
            operator delete(v463);
          }
        }
        else
        {
          *(unsigned char *)v582.__r_.__value_.__l.__size_ = v462;
          std::string::size_type v464 = (std::string::size_type)(v463 + 1);
        }
        v582.__r_.__value_.__l.__size_ = v464;
        if (v461) {
        if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
        }
          operator delete(v585.__r_.__value_.__l.__data_);
        if (SHIBYTE(v577) < 0) {
          operator delete(__p);
        }
        if (v582.__r_.__value_.__r.__words[0]) {
          operator delete(v582.__r_.__value_.__l.__data_);
        }
        if (!v474) {
          break;
        }
      }
      v475 = (uint64_t *)v431[1];
      if (v475)
      {
        do
        {
          v476 = (uint64_t **)v475;
          v475 = (uint64_t *)*v475;
        }
        while (v475);
      }
      else
      {
        do
        {
          v476 = (uint64_t **)v431[2];
          BOOL v446 = *v476 == v431;
          v431 = (uint64_t *)v476;
        }
        while (!v446);
      }
      v431 = (uint64_t *)v476;
      int v134 = v435;
      if (v476 == &v558)
      {
        v489 = a8;
        int v134 = *a8;
        goto LABEL_985;
      }
    }
  }
LABEL_1070:
  return v542;
}