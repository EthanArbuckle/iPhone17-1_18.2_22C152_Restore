void sub_18FFA5B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::ShouldAutomaticallyEnableSpatialRendering(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = *(void *)(a1 + 344);
  if (v2)
  {
    UInt32 outSize = 0;
    BOOL v5 = AudioCodecGetPropertyInfo(*(AudioCodec *)(v2 + 168), 0x696D7264u, &outSize, 0) || outSize == 0;
    if (!v5 && !*(unsigned char *)(a1 + 529))
    {
      uint64_t v7 = 0;
      unsigned int v8 = **a2;
      unsigned int v9 = v8 & 0xFFFF0000;
      while (v9 != *(unsigned __int16 *)((char *)&AudioFormat_IsSupportedAUSpatialMixerOutputChannelLayout(AudioChannelLayout const*)::unsupportedLayouts
                                        + v7
                                        + 2) << 16)
      {
        v7 += 4;
        if (v7 == 36)
        {
          uint64_t result = 1;
          if (v8 <= 0xFFFEFFFF && v9 >> 28 == 15) {
            return 0;
          }
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t acv2::AudioConverterChain::AddCodec(void *a1, uint64_t *a2)
{
  a1[43] = *a2;
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v5 = v2;
  acv2::AudioConverterChain::AddStep(a1, &v5);
  uint64_t result = v5;
  if (v5)
  {
    v4 = *(uint64_t (**)(void))(*(void *)v5 + 8);
    return v4();
  }
  return result;
}

void sub_18FFA5CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *ACMetadataContainer::resetMetadataEvents(uint64_t *this, AudioMetadataFrame *a2)
{
  *((_DWORD *)this + 8) = 0;
  this[3] = 0;
  if (a2)
  {
    uint64_t v3 = (uint64_t)this;
    v4 = (void *)*this;
    int64_t v5 = *(void *)(v3 + 8) - (void)v4;
    if (v5 >= 1)
    {
      bzero(v4, v5);
      v4 = *(void **)v3;
    }
    *(void *)(v3 + 8) = v4;
    memset(v7, 0, 44);
    BYTE8(v7[1]) = 1;
    *(void *)&v7[2] = 0x10000002CLL;
    this = AudioMetadataFrame::begin_new((uint64_t *)v3, (unsigned int *)v7);
    uint64_t v6 = *(void *)a2;
    if (*((void *)a2 + 1) - *(void *)a2 >= 0x2CuLL)
    {
      if (v6)
      {
        *(void *)(v3 + 24) = v6 + 44;
        *(_DWORD *)(v3 + 32) = *(_DWORD *)(v6 + 40);
      }
    }
  }
  return this;
}

uint64_t acv2::AudioConverterChain::GetInputLayoutSize(acv2::AudioConverterChain *this, unsigned int *a2, unsigned __int8 *a3)
{
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  std::vector<char>::pointer begin = __p.__begin_;
  *(void *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  uint64_t InputLayout = acv2::AudioConverterChain::GetInputLayout(this, &__p, a3);
  if (InputLayout) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = caulk::numeric::exceptional_cast<unsigned int,unsigned long>(__p.__end_ - __p.__begin_);
  }
  *a2 = v8;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return InputLayout;
}

void sub_18FFA5E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::GetOutputLayoutSize(acv2::AudioConverterChain *this, unsigned int *a2, unsigned __int8 *a3)
{
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  std::vector<char>::pointer begin = __p.__begin_;
  *(void *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  uint64_t OutputLayout = acv2::AudioConverterChain::GetOutputLayout(this, &__p, a3);
  if (OutputLayout) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = caulk::numeric::exceptional_cast<unsigned int,unsigned long>(__p.__end_ - __p.__begin_);
  }
  *a2 = v8;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return OutputLayout;
}

void sub_18FFA5EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::GetOutputLayout(acv2::AudioConverterChain *this, std::vector<char> *a2, unsigned __int8 *a3)
{
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  std::vector<char>::pointer begin = __p.__begin_;
  *(void *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  if (!acv2::AudioConverterChain::GetOutputLayoutPriv(this, &__p, a3))
  {
    unsigned int v8 = __p.__begin_;
    if (*(_DWORD *)__p.__begin_ == 0x10000)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
      v11.i16[0] = vaddlv_u8(v11);
      if (!v11.i32[0]) {
        goto LABEL_2;
      }
    }
    else if (*(_DWORD *)__p.__begin_)
    {
      if (!(unsigned __int16)*(_DWORD *)__p.__begin_) {
        goto LABEL_2;
      }
    }
    else if (!*((_DWORD *)__p.__begin_ + 2))
    {
      goto LABEL_2;
    }
LABEL_25:
    if (&__p == a2)
    {
      uint64_t InputLayoutPriv = 0;
    }
    else
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, v8, __p.__end_, __p.__end_ - v8);
      uint64_t InputLayoutPriv = 0;
      unsigned int v8 = __p.__begin_;
      if (!__p.__begin_) {
        return InputLayoutPriv;
      }
    }
    goto LABEL_29;
  }
LABEL_2:
  uint64_t InputLayoutPriv = acv2::AudioConverterChain::GetInputLayoutPriv(this, &__p, a3);
  unsigned int v8 = __p.__begin_;
  if (InputLayoutPriv)
  {
    if (!__p.__begin_) {
      return InputLayoutPriv;
    }
    goto LABEL_29;
  }
  int v9 = *(_DWORD *)__p.__begin_;
  if (*(_DWORD *)__p.__begin_ == 0x10000)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
    v12.i16[0] = vaddlv_u8(v12);
    __int32 v10 = v12.i32[0];
  }
  else if (v9)
  {
    __int32 v10 = (unsigned __int16)*(_DWORD *)__p.__begin_;
  }
  else
  {
    __int32 v10 = *((_DWORD *)__p.__begin_ + 2);
  }
  uint64_t InputLayoutPriv = 1718449215;
  if (v10)
  {
    if (v9 == 0x10000)
    {
      uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
      v14.i16[0] = vaddlv_u8(v14);
      int v13 = v14.i32[0];
    }
    else
    {
      int v13 = v9 ? (unsigned __int16)*(_DWORD *)__p.__begin_ : *((_DWORD *)__p.__begin_ + 2);
    }
    if (v13 == *((_DWORD *)this + 17)) {
      goto LABEL_25;
    }
  }
LABEL_29:
  __p.__end_ = v8;
  operator delete(v8);
  return InputLayoutPriv;
}

void sub_18FFA60A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::GetOutputLayoutPriv(acv2::AudioConverterChain *this, std::vector<char> *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *((void *)this + 43);
  if (v4 && *(unsigned char *)(v4 + 196))
  {
    int64_t v5 = (char **)*((void *)this + 43);
    return acv2::CodecConverter::GetOutputLayout(v5, a2, a3);
  }
  uint64_t v7 = *((void *)this + 47);
  if (*(_DWORD *)v7 == 0x10000)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v7 + 4));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.i32[0]) {
      goto LABEL_11;
    }
    return 1718449215;
  }
  if (*(_DWORD *)v7)
  {
    if ((unsigned __int16)*(_DWORD *)v7) {
      goto LABEL_11;
    }
    return 1718449215;
  }
  if (!*(_DWORD *)(v7 + 8)) {
    return 1718449215;
  }
LABEL_11:
  if ((std::vector<char> *)((char *)this + 376) != a2) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, (char *)v7, *((char **)this + 48), *((void *)this + 48) - v7);
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

uint64_t acv2::AudioConverterChain::GetInputLayoutPriv(acv2::AudioConverterChain *this, std::vector<char> *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *((void *)this + 43);
  if (v4 && *(unsigned char *)(v4 + 197))
  {
    int64_t v5 = (char **)*((void *)this + 43);
    return acv2::CodecConverter::GetInputLayout(v5, a2, a3);
  }
  uint64_t v7 = *((void *)this + 44);
  if (*(_DWORD *)v7 == 0x10000)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v7 + 4));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.i32[0]) {
      goto LABEL_11;
    }
    return 1718449215;
  }
  if (*(_DWORD *)v7)
  {
    if ((unsigned __int16)*(_DWORD *)v7) {
      goto LABEL_11;
    }
    return 1718449215;
  }
  if (!*(_DWORD *)(v7 + 8)) {
    return 1718449215;
  }
LABEL_11:
  if ((std::vector<char> *)((char *)this + 352) != a2) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, (char *)v7, *((char **)this + 45), *((void *)this + 45) - v7);
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

uint64_t acv2::AudioConverterChain::GetInputLayout(acv2::AudioConverterChain *this, std::vector<char> *a2, unsigned __int8 *a3)
{
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  std::vector<char>::pointer begin = __p.__begin_;
  *(void *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  if (!acv2::AudioConverterChain::GetInputLayoutPriv(this, &__p, a3))
  {
    uint8x8_t v8 = __p.__begin_;
    if (*(_DWORD *)__p.__begin_ == 0x10000)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
      v11.i16[0] = vaddlv_u8(v11);
      if (!v11.i32[0]) {
        goto LABEL_2;
      }
    }
    else if (*(_DWORD *)__p.__begin_)
    {
      if (!(unsigned __int16)*(_DWORD *)__p.__begin_) {
        goto LABEL_2;
      }
    }
    else if (!*((_DWORD *)__p.__begin_ + 2))
    {
      goto LABEL_2;
    }
LABEL_25:
    if (&__p == a2)
    {
      uint64_t OutputLayoutPriv = 0;
    }
    else
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, v8, __p.__end_, __p.__end_ - v8);
      uint64_t OutputLayoutPriv = 0;
      uint8x8_t v8 = __p.__begin_;
      if (!__p.__begin_) {
        return OutputLayoutPriv;
      }
    }
    goto LABEL_29;
  }
LABEL_2:
  uint64_t OutputLayoutPriv = acv2::AudioConverterChain::GetOutputLayoutPriv(this, &__p, a3);
  uint8x8_t v8 = __p.__begin_;
  if (OutputLayoutPriv)
  {
    if (!__p.__begin_) {
      return OutputLayoutPriv;
    }
    goto LABEL_29;
  }
  int v9 = *(_DWORD *)__p.__begin_;
  if (*(_DWORD *)__p.__begin_ == 0x10000)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
    v12.i16[0] = vaddlv_u8(v12);
    __int32 v10 = v12.i32[0];
  }
  else if (v9)
  {
    __int32 v10 = (unsigned __int16)*(_DWORD *)__p.__begin_;
  }
  else
  {
    __int32 v10 = *((_DWORD *)__p.__begin_ + 2);
  }
  uint64_t OutputLayoutPriv = 1718449215;
  if (v10)
  {
    if (v9 == 0x10000)
    {
      uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
      v14.i16[0] = vaddlv_u8(v14);
      int v13 = v14.i32[0];
    }
    else
    {
      int v13 = v9 ? (unsigned __int16)*(_DWORD *)__p.__begin_ : *((_DWORD *)__p.__begin_ + 2);
    }
    if (v13 == *((_DWORD *)this + 7)) {
      goto LABEL_25;
    }
  }
LABEL_29:
  __p.__end_ = v8;
  operator delete(v8);
  return OutputLayoutPriv;
}

void sub_18FFA63E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void acv2::AudioConverterChain::GetChainBuildSettings(acv2::AudioConverterChain *this, uint64_t a2)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  uint64_t v4 = (double *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  int64_t v5 = (char *)this + 32;
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 15) = 0;
  uint64_t v6 = (uint64_t *)((char *)this + 128);
  *(_DWORD *)((char *)this + 23) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_DWORD *)((char *)this + 111) = 0;
  LOBYTE(v19) = 0;
  std::vector<char>::vector((std::vector<char> *)((char *)this + 128), 0x20uLL, (const std::vector<char>::value_type *)&v19);
  uint64_t v7 = *v6;
  *(void *)uint64_t v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  uint8x8_t v8 = *(uint64_t **)(a2 + 296);
  if (v8 != *(uint64_t **)(a2 + 304))
  {
    uint64_t v9 = *v8;
    *(void *)this = *(void *)(*v8 + 272);
    *((_DWORD *)this + 2) = *(_DWORD *)(v9 + 280);
    double *v4 = (*(double (**)(void))(**(void **)(v9 + 160) + 56))(*(void *)(v9 + 160));
    *((unsigned char *)this + 24) = (*(uint64_t (**)(void))(**(void **)(v9 + 160) + 72))(*(void *)(v9 + 160));
  }
  *((_DWORD *)this + 14) = *(_DWORD *)(a2 + 432);
  int v10 = *(unsigned __int8 *)(a2 + 448);
  *((unsigned char *)this + 112) = v10;
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 328);
    if (*(void *)(a2 + 320) != v11)
    {
      uint64_t v12 = *(void *)(v11 - 8);
      if ((acv2::AudioConverterChain *)((char *)this + 88) != (acv2::AudioConverterChain *)(v12 + 192)) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 88, *(char **)(v12 + 192), *(void *)(v12 + 200), (uint64_t)(*(void *)(v12 + 200) - *(void *)(v12 + 192)) >> 2);
      }
    }
  }
  *((unsigned char *)this + 25) = *(unsigned char *)(a2 + 417);
  int v13 = *(unsigned __int8 *)(a2 + 416);
  *((unsigned char *)this + 26) = v13;
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 424);
    if (v14)
    {
      long long v19 = 0uLL;
      uint64_t v20 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v19, *(const void **)(v14 + 176), *(void *)(v14 + 184), (uint64_t)(*(void *)(v14 + 184) - *(void *)(v14 + 176)) >> 2);
      v15 = *(void **)v5;
      if (*(void *)v5)
      {
        *((void *)this + 5) = v15;
        operator delete(v15);
        *(void *)int64_t v5 = 0;
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
      }
      *((_OWORD *)this + 2) = v19;
      *((void *)this + 6) = v20;
    }
  }
  *((_DWORD *)this + 15) = *(_DWORD *)(a2 + 412);
  uint64_t v16 = *(void *)(a2 + 344);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 372);
    *((unsigned char *)this + 72) = *(unsigned char *)(v16 + 380);
    *((void *)this + 8) = v17;
    v18 = *(OpaqueAudioComponentInstance **)(v16 + 168);
    *((void *)this + 10) = v18;
    AudioCodecUninitialize(v18);
    *(void *)(v16 + 168) = 0;
  }
  *(_WORD *)((char *)this + 113) = *(_WORD *)(a2 + 528);
  if (v6 != (uint64_t *)(a2 + 376)) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v6, *(char **)(a2 + 376), *(char **)(a2 + 384), *(void *)(a2 + 384) - *(void *)(a2 + 376));
  }
}

void sub_18FFA6610(_Unwind_Exception *a1)
{
  acv2::ChainBuildSettings::~ChainBuildSettings(v1);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::RebuildConverterChain(acv2::AudioConverterChain *this, const acv2::ChainBuildSettings *a2)
{
  {
    operator new();
  }
  uint64_t v4 = acv2::GlobalConverterRegistry(void)::sImpl;
  os_unfair_recursive_lock_lock_with_options();
  if (v4) {
    os_unfair_recursive_lock_unlock();
  }
  long long v5 = *((_OWORD *)this + 3);
  v12[2] = *((_OWORD *)this + 2);
  v12[3] = v5;
  v12[4] = *((_OWORD *)this + 4);
  long long v6 = *((_OWORD *)this + 1);
  v12[0] = *(_OWORD *)this;
  v12[1] = v6;
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__clear[abi:ne180100]((void *)this + 13);
  *((void *)this + 38) = *((void *)this + 37);
  *((void *)this + 41) = *((void *)this + 40);
  *((void *)this + 43) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 53) = 0;
  uint64_t result = (*(uint64_t (**)(void, _OWORD *, const acv2::ChainBuildSettings *, acv2::AudioConverterChain *, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v12, a2, this, v4 + 40);
  if (!result)
  {
    if (*((void *)this + 13) == *((void *)this + 14)) {
      operator new();
    }
    uint64_t v8 = *((void *)this + 43);
    if (v8) {
      unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
    }
    else {
      unsigned int v9 = 0;
    }
    int v10 = (*((_DWORD *)this + 17) > 1u) & (*((_DWORD *)this + 13) >> 5);
    BOOL v11 = *(double *)this != *((double *)this + 5);
    *((unsigned char *)this + 80) = (*((_DWORD *)this + 7) > 1u) & (*((_DWORD *)this + 3) >> 5);
    *((unsigned char *)this + 81) = v10;
    *((unsigned char *)this + 82) = v11;
    LODWORD(result) = acv2::AudioConverterChain::PostBuild(this);
    if (v9) {
      return v9;
    }
    else {
      return result;
    }
  }
  return result;
}

void sub_18FFA68B8(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1080C4066A550C5);
  _Unwind_Resume(a1);
}

void acv2::ChainBuildSettings::~ChainBuildSettings(acv2::ChainBuildSettings *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
}

uint64_t acv2::AudioConverterChain::SetDownmixEnabled(acv2::AudioConverterChain *this, int a2)
{
  if (*((unsigned __int8 *)this + 417) == a2) {
    return 0;
  }
  *((unsigned char *)this + 417) = a2;
  acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)v5, (uint64_t)this);
  uint64_t v2 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)v5);
  if (__p)
  {
    BOOL v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    unsigned int v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v2;
}

void sub_18FFA6A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)va);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::SetMixMap(acv2::AudioConverterChain *this, unint64_t a2, const float *a3)
{
  if (!*((unsigned char *)this + 417)) {
    return 1869627199;
  }
  acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)v11, (uint64_t)this);
  int v13 = __src;
  int v10 = 0;
  std::vector<float>::insert(&__src, (char *)__src, a2, (char *)&v10);
  if (a2)
  {
    long long v6 = __src;
    do
    {
      int v7 = *(_DWORD *)a3++;
      *v6++ = v7;
      --a2;
    }
    while (a2);
  }
  *((unsigned char *)this + 416) = 1;
  v11[26] = 1;
  uint64_t v8 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)v11);
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    int v13 = __src;
    operator delete(__src);
  }
  return v8;
}

void sub_18FFA6AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)va);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::SetChannelMap(acv2::AudioConverterChain *this, int *a2)
{
  if (!*((unsigned char *)this + 417))
  {
    std::vector<int>::size_type v5 = *((unsigned int *)this + 17);
    long long v6 = malloc_type_malloc(4 * v5, 0x7C51E058uLL);
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v21 = std::bad_alloc::bad_alloc(exception);
    }
    uint64_t v8 = v6;
    unsigned int v29 = 4 * v5;
    acv2::AudioConverterChain::GetProperty(this, 1667788144, &v29, v6);
    if (v5)
    {
      if (*a2 == *v8)
      {
        std::vector<int>::size_type v9 = 0;
        while (v5 - 1 != v9)
        {
          int v10 = a2[v9 + 1];
          int v11 = v8[++v9];
          if (v10 != v11)
          {
            if (v9 < v5) {
              goto LABEL_13;
            }
            break;
          }
        }
        uint64_t v2 = 0;
        goto LABEL_33;
      }
LABEL_13:
      *((unsigned char *)this + 448) = 1;
      acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)v23, (uint64_t)this);
      if (*a2)
      {
LABEL_14:
        v12.__i_ = __position.__begin_;
        __position.__end_ = __position.__begin_;
        std::vector<int>::value_type __x = -1;
        std::vector<int>::insert(&__position, v12, v5, &__x);
        std::vector<int>::pointer begin = __position.__begin_;
        if (v5 <= 1) {
          uint64_t v14 = 1;
        }
        else {
          uint64_t v14 = v5;
        }
        do
        {
          int v15 = *a2++;
          *begin++ = v15;
          --v14;
        }
        while (v14);
      }
      else
      {
        std::vector<int>::size_type v16 = 0;
        while (v5 - 1 != v16)
        {
          std::vector<int>::size_type v17 = v16 + 1;
          uint64_t v18 = a2[v16 + 1];
          std::vector<int>::size_type v16 = v17;
          if (v17 != v18)
          {
            if (v17 < v5) {
              goto LABEL_14;
            }
            break;
          }
        }
        __position.__end_ = __position.__begin_;
      }
      uint64_t v2 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (__position.__begin_)
      {
        __position.__end_ = __position.__begin_;
        operator delete(__position.__begin_);
      }
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v2 = 0;
    }
    if (!v8) {
      return v2;
    }
LABEL_33:
    free(v8);
    return v2;
  }
  return 1869627199;
}

void sub_18FFA6D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)va);
  if (v3) {
    free(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::SetIOChannelLayout(acv2::CodecConverter **this, int a2, AudioChannelLayout *a3, UInt32 a4)
{
  if (a2) {
    uint64_t v5 = 44;
  }
  else {
    uint64_t v5 = 47;
  }
  if (a2) {
    long long v6 = (std::vector<char> *)(this + 44);
  }
  else {
    long long v6 = (std::vector<char> *)(this + 47);
  }
  if (a2) {
    BOOL v7 = (acv2::AudioConverterChain *)this;
  }
  else {
    BOOL v7 = (acv2::AudioConverterChain *)(this + 5);
  }
  if (a3 && a4)
  {
    uint64_t result = 561211770;
    if (a4 >= 0xC && 20 * a3->mNumberChannelDescriptions + 12 <= a4)
    {
      *(_DWORD *)std::vector<int>::value_type __x = 0;
      uint64_t result = AudioFormatProperty_NumberOfChannelsForLayout(a3, (unsigned int *)__x);
      if (!result)
      {
        if (*(_DWORD *)__x != *((_DWORD *)v7 + 7)) {
          return 4294967246;
        }
        std::vector<int>::const_iterator v12 = this[43];
        if (!v12) {
          goto LABEL_33;
        }
        if (a2)
        {
          if (*((unsigned char *)v12 + 197))
          {
            acv2::CodecConverter::SetInputChannelLayout(this[43], a3, *(int *)__x);
            return 0;
          }
LABEL_33:
          CA::ChannelLayout::operator=(v6, a3);
          return 0;
        }
        if (*(_DWORD *)__x != *((_DWORD *)v12 + 21)
          || (uint64_t result = acv2::CodecConverter::SetOutputChannelLayout(this[43], a3, a4, *(int *)__x), !result)
          || result == 561476212
          || !*((unsigned char *)v12 + 196))
        {
          CA::ChannelLayout::ChannelLayout(&v17, a3);
          int ShouldAutomaticallyEnableSpatialRendering = acv2::AudioConverterChain::ShouldAutomaticallyEnableSpatialRendering((uint64_t)this, (unsigned int **)&v17);
          if (v17.__begin_)
          {
            v17.__end_ = v17.__begin_;
            operator delete(v17.__begin_);
          }
          if (ShouldAutomaticallyEnableSpatialRendering) {
            *((unsigned char *)this + 528) = 1;
          }
          goto LABEL_33;
        }
      }
    }
  }
  else
  {
    __x[0] = 0;
    std::vector<char>::vector(&v17, 0x20uLL, __x);
    std::vector<char>::pointer begin = v17.__begin_;
    *(void *)v17.__begin_ = 0;
    *((_DWORD *)begin + 2) = 0;
    uint64_t v14 = (char *)this[v5];
    if (v14)
    {
      v6->__end_ = v14;
      operator delete(v14);
      v6->__begin_ = 0;
      v6->__end_ = 0;
      v6->__end_cap_.__value_ = 0;
      std::vector<char>::pointer begin = v17.__begin_;
    }
    uint64_t result = 0;
    this[v5] = (acv2::CodecConverter *)begin;
    *(_OWORD *)&v6->__end_ = *(_OWORD *)&v17.__end_;
  }
  return result;
}

void sub_18FFA6F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::SetDitherAlgorithm(acv2::AudioConverterChain *this, unsigned int a2, int16x8_t a3)
{
  if (*((_DWORD *)this + 108) == a2) {
    return 0;
  }
  if (a2 - 1 >= 3)
  {
    uint64_t v3 = 1718449215;
    a3.i32[0] = bswap32(a2);
    *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
    v6.i64[0] = 0x1F0000001FLL;
    v6.i64[1] = 0x1F0000001FLL;
    v7.i64[0] = 0x5F0000005FLL;
    v7.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v7, (uint32x4_t)vsraq_n_s32(v6, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
    char v17 = 4;
    int16x8_t v15 = a3;
    *(_DWORD *)__s = vmovn_s16(a3).u32[0];
    __s[4] = 0;
    size_t v8 = strlen(__s);
    uint64_t v9 = _os_log_pack_size() + 88;
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v8 + v9 + 1, 16);
    if (message)
    {
      int v11 = (caulk::concurrent::message *)message;
      uint64_t v12 = _os_log_pack_fill();
      int v13 = (char *)v11 + v9;
      char v17 = 4;
      *(_DWORD *)__s = vmovn_s16(v15).u32[0];
      __s[4] = 0;
      stpcpy(v13, __s);
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = v13;
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = a2;
      if (v17 < 0) {
        operator delete(*(void **)__s);
      }
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v11);
    }
  }
  else
  {
    *((_DWORD *)this + 108) = a2;
    acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)__s, (uint64_t)this);
    uint64_t v3 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)__s);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    if (v18)
    {
      long long v19 = v18;
      operator delete(v18);
    }
  }
  return v3;
}

void sub_18FFA70E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<char> *CA::ChannelLayout::ChannelLayout(std::vector<char> *this, const AudioChannelLayout *a2)
{
  UInt32 mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions <= 1) {
    UInt32 mNumberChannelDescriptions = 1;
  }
  uint64_t v5 = std::vector<char>::vector(this, 20 * mNumberChannelDescriptions + 12);
  memcpy(v5->__begin_, a2, 20 * a2->mNumberChannelDescriptions + 12);
  return this;
}

std::vector<char> *CA::ChannelLayout::operator=(std::vector<char> *this, _DWORD *a2)
{
  unsigned int v4 = a2[2];
  if (v4 <= 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = a2[2];
  }
  unint64_t v6 = 20 * v5 + 12;
  std::vector<char>::pointer begin = this->__begin_;
  uint64_t v9 = (char *)(this->__end_ - begin);
  if (v6 <= (unint64_t)v9)
  {
    if (v6 < (unint64_t)v9) {
      this->__end_ = &begin[v6];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(this, v6 - (void)v9);
    std::vector<char>::pointer begin = this->__begin_;
    unsigned int v4 = a2[2];
  }
  memcpy(begin, a2, 20 * v4 + 12);
  return this;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    unsigned int v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_18FFA7254(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::insert(void *a1, char *__src, unint64_t a3, char *a4)
{
  if (a3)
  {
    unsigned int v4 = a4;
    unint64_t v6 = __src;
    size_t v8 = (char *)a1[1];
    uint64_t v9 = a1[2];
    if (a3 <= (v9 - (uint64_t)v8) >> 2)
    {
      uint64_t v16 = v8 - __src;
      if (a3 <= (v8 - __src) >> 2)
      {
        long long v19 = (char *)a1[1];
        uint64_t v18 = a3;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = v16 >> 2;
        long long v19 = &v8[4 * (a3 - (v16 >> 2))];
        do
        {
          *(_DWORD *)&v8[v17] = *(_DWORD *)a4;
          v17 += 4;
        }
        while (4 * a3 - 4 * v18 != v17);
        a1[1] = v19;
        if (v8 == __src) {
          return;
        }
      }
      uint64_t v20 = &__src[4 * a3];
      v21 = &v19[-4 * a3];
      v22 = v19;
      if (v21 < v8)
      {
        v22 = v19;
        do
        {
          int v23 = *(_DWORD *)v21;
          v21 += 4;
          *(_DWORD *)v22 = v23;
          v22 += 4;
        }
        while (v21 < v8);
      }
      a1[1] = v22;
      if (v19 != v20) {
        memmove(&v19[-4 * ((v19 - v20) >> 2)], __src, v19 - v20);
      }
      if (v6 <= v4)
      {
        if (a1[1] <= (unint64_t)v4) {
          unint64_t v24 = 0;
        }
        else {
          unint64_t v24 = a3;
        }
        v4 += 4 * v24;
      }
      do
      {
        *(_DWORD *)unint64_t v6 = *(_DWORD *)v4;
        v6 += 4;
        --v18;
      }
      while (v18);
    }
    else
    {
      int v10 = (char *)*a1;
      unint64_t v11 = a3 + ((uint64_t)&v8[-*a1] >> 2);
      if (v11 >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = (__src - v10) >> 2;
      uint64_t v13 = v9 - (void)v10;
      if (v13 >> 1 > v11) {
        unint64_t v11 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v11;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      v25 = (_DWORD *)(v14 + 4 * v12);
      v26 = (char *)&v25[a3];
      uint64_t v27 = 4 * a3;
      v28 = v25;
      do
      {
        *v28++ = *(_DWORD *)v4;
        v27 -= 4;
      }
      while (v27);
      unsigned int v29 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        v30 = v6;
        do
        {
          int v31 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *--v25 = v31;
        }
        while (v30 != v29);
      }
      unint64_t v32 = v14 + 4 * v15;
      v33 = (char *)a1[1];
      int64_t v34 = v33 - v6;
      if (v33 != v6) {
        memmove(v26, v6, v33 - v6);
      }
      v35 = (char *)*a1;
      *a1 = v25;
      a1[1] = &v26[v34];
      a1[2] = v32;
      if (v35)
      {
        operator delete(v35);
      }
    }
  }
}

uint64_t checkEnvVar(const char *a1)
{
  uint64_t result = (uint64_t)getenv(a1);
  if (!result) {
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)result);
  unint64_t v2 = v7;
  if ((v7 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)__p[1];
  }
  if (v2 == 2)
  {
    uint64_t v3 = __p[0];
    if ((v7 & 0x80u) == 0) {
      unsigned int v5 = __p;
    }
    else {
      unsigned int v5 = (void **)__p[0];
    }
    if (*(_WORD *)v5 == 20302)
    {
LABEL_9:
      if ((char)v7 < 0) {
        operator delete(v3);
      }
      return 0;
    }
  }
  else if (v2 == 1)
  {
    uint64_t v3 = __p[0];
    unsigned int v4 = __p;
    if ((v7 & 0x80u) != 0) {
      unsigned int v4 = (void **)__p[0];
    }
    if (*(unsigned char *)v4 == 48) {
      goto LABEL_9;
    }
  }
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void std::vector<AudioStreamPacketDescription>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  unsigned int v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v18 = &v3[16 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  unsigned __int8 v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    uint64_t v18 = &v4[16 * v6];
LABEL_19:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v10);
  uint64_t v12 = &v11[16 * v5];
  unint64_t v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[16 * v6];
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void caulk::bad_expected_access<int>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x192FC8940);
}

void std::vector<std::unique_ptr<ACOutputBuffer>>::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t audiomxd_enabled()
{
  {
    audiomxd_enabled::global = _os_feature_enabled_impl();
  }
  return audiomxd_enabled::global;
}

void sub_18FFA7700(_Unwind_Exception *a1)
{
}

void sub_18FFA7874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<APComponent>>::erase[abi:ne180100](uint64_t a1, long long *a2)
{
  uint64_t v3 = a2 + 1;
  unsigned int v4 = *(long long **)(a1 + 8);
  if (a2 + 1 == v4)
  {
    unint64_t v5 = a2;
  }
  else
  {
    do
    {
      unint64_t v5 = v3;
      long long v6 = *v3;
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      unsigned __int8 v7 = (std::__shared_weak_count *)*((void *)v3 - 1);
      *(v3 - 1) = v6;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      ++v3;
    }
    while (v5 + 1 != v4);
    uint64_t v3 = *(long long **)(a1 + 8);
  }
  while (v3 != v5)
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v3 - 1);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    --v3;
  }
  *(void *)(a1 + 8) = v5;
}

uint64_t std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1>,BOOL ()(APComponent &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0D98;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1>,BOOL ()(APComponent &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA0D98;
  result[1] = v3;
  return result;
}

void std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1>,BOOL ()(APComponent &)>::~__func()
{
}

__n128 std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0>,BOOL ()(APComponent &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA0D50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0>,BOOL ()(APComponent &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EDFA0D50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0>,BOOL ()(APComponent &)>::~__func()
{
}

void AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 1;
  unint64_t v5 = [(id)AudioComponentMgr_NSExtension::sExtensionServiceBundle bundleIdentifier];
  CFBundleRef BundleWithIdentifier = CFBundleGetBundleWithIdentifier(v5);
  CFBundleRef v7 = BundleWithIdentifier;
  if (BundleWithIdentifier)
  {
    CFRetain(BundleWithIdentifier);
    CFTypeRef v15 = v7;
    CFArrayRef v8 = CFBundleCopyExecutableArchitectures(v7);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v14, v8);
    CFTypeRef v9 = v15;
    unint64_t v10 = v4;
    unint64_t v11 = v10;
    if (v10) {
      CFRetain(v10);
    }
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v11);

    uint64_t v17 = 0;
    uint64_t v12 = operator new(0x20uLL);
    *uint64_t v12 = &unk_1EDFA0C30;
    v12[1] = &v15;
    v12[2] = &v14;
    v12[3] = a2;
    uint64_t v17 = v12;
    AudioComponentRegistrationInfo::parseInfoPlistArray(5, (uint64_t)v9, (CFArrayRef *)&cf, (uint64_t)v16);
    std::__function::__value_func<void ()(AudioComponentRegistrationInfo &)>::~__value_func[abi:ne180100](v16);
    if (cf) {
      CFRelease(cf);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v15) {
      CFRelease(v15);
    }
  }
}

void sub_18FFA7BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(AudioComponentRegistrationInfo &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void applesauce::CF::ArrayRef::~ArrayRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

const void **applesauce::CF::ObjectRef<__CFBundle *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::__function::__func<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0,std::allocator<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::operator()()
{
  id v0 = [(id)AudioComponentMgr_NSExtension::sExtensionServiceBundle bundlePath];
  uint64_t v1 = v0;
  if (v0) {
    CFRetain(v0);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v1);

  APComponent_FromBundle_Loadable::create_shared();
}

void sub_18FFA7E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(exception_object);
}

void APComponent_FromBundle_Loadable::create_shared()
{
}

void sub_18FFA7FB4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<APComponent_FromBundle_Loadable *,std::shared_ptr<APComponent_FromBundle_Loadable>::__shared_ptr_default_delete<APComponent_FromBundle_Loadable,APComponent_FromBundle_Loadable>,std::allocator<APComponent_FromBundle_Loadable>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void std::__shared_ptr_pointer<APComponent_FromBundle_Loadable *,std::shared_ptr<APComponent_FromBundle_Loadable>::__shared_ptr_default_delete<APComponent_FromBundle_Loadable,APComponent_FromBundle_Loadable>,std::allocator<APComponent_FromBundle_Loadable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t APComponent_FromBundle_Base::APComponent_FromBundle_Base(uint64_t a1, int a2, const void **a3, const void **a4, uint64_t a5)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(_DWORD *)(a5 + 20);
  int v10 = *(_DWORD *)(a5 + 32);
  void v16[3] = 0;
  APComponent::APComponent(a1, 1, a2, a5, v9, (CFTypeRef *)(a5 + 24), v10, (uint64_t)v16);
  std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__value_func[abi:ne180100](v16);
  *(void *)a1 = &unk_1EDF94108;
  unint64_t v11 = *a3;
  if (v11) {
    CFRetain(v11);
  }
  *(void *)(a1 + 160) = v11;
  uint64_t v12 = *a4;
  if (v12) {
    CFRetain(v12);
  }
  *(void *)(a1 + 168) = v12;
  uint64_t v13 = *(void *)(a5 + 40);
  if (v13) {
    CFRetain(*(CFTypeRef *)(a5 + 40));
  }
  *(void *)(a1 + 176) = v13;
  uint64_t v14 = *(void *)(a5 + 48);
  if (v14) {
    CFRetain(*(CFTypeRef *)(a5 + 48));
  }
  *(void *)(a1 + 184) = v14;
  APComponent::setTags((APComponent *)a1, *(CFTypeRef *)(a5 + 56));
  return a1;
}

void sub_18FFA8188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef APComponent_FromBundle_Base::architectures@<X0>(CFTypeRef this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 21);
  if (v3) {
    this = CFRetain(*((CFTypeRef *)this + 21));
  }
  *a2 = v3;
  return this;
}

uint64_t APComponent::ResolveFactoryFunction(APComponent *this)
{
  return 4294967292;
}

uint64_t APComponent::asCarbonComponentWrapper(APComponent *this)
{
  return 0;
}

uint64_t APComponent::asRemoteComponent(APComponent *this)
{
  return 0;
}

uint64_t APComponent::getV3Class(APComponent *this)
{
  return 0;
}

uint64_t APComponent::getExtension(APComponent *this)
{
  return 0;
}

void APComponent_FromBundle_Base::~APComponent_FromBundle_Base(APComponent *this)
{
  APComponent_FromBundle_Base::~APComponent_FromBundle_Base(this);
  JUMPOUT(0x192FC8940);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EDF94108;
  uint64_t v2 = (const void *)*((void *)this + 23);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 22);
  if (v3) {
    CFRelease(v3);
  }
  unsigned int v4 = (const void *)*((void *)this + 21);
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (const void *)*((void *)this + 20);
  if (v5) {
    CFRelease(v5);
  }
  APComponent::~APComponent(this);
}

uint64_t APComponent::GetInstance(APComponent *this)
{
  return 0;
}

__n128 std::__function::__func<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0,std::allocator<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA0C30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0,std::allocator<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EDFA0C30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0,std::allocator<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::~__func()
{
}

void ___ZN34AudioComponentMgr_RegistrarService18retrieveComponentsEbb_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  uint64_t v3 = *(id *)gAudioComponentLogCategory;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315650;
    long long v6 = "AudioComponentPluginMgr.mm";
    __int16 v7 = 1024;
    int v8 = 590;
    __int16 v9 = 2112;
    id v10 = v2;
    _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d reg server remote proxy error %@", (uint8_t *)&v5, 0x1Cu);
  }
}

void sub_18FFA84B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AudioComponentMgr_NSExtension::_prepareRemoveComponent(char **this, APComponent *a2)
{
  *((unsigned char *)a2 + 72) = 1;
  uint64_t v4 = (*(uint64_t (**)(APComponent *))(*(void *)a2 + 64))(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (!*(void *)(v4 + 200)) {
      return;
    }
    AudioComponentMgr_Base::_addComponent(this, (void *)(v4 + 200));
    long long v6 = this + 1;
    __int16 v7 = this[2];
    int v8 = this[3];
    while (v7 != v8)
    {
      uint64_t v9 = *(void *)v7;
      v7 += 16;
      *long long v6 = v9;
      long long v6 = (void *)(v9 + 24);
    }
    *long long v6 = 0;
    id v10 = *(std::__shared_weak_count **)(v5 + 208);
    *(void *)(v5 + 200) = 0;
    *(void *)(v5 + 208) = 0;
    if (!v10) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v11 = *((void *)a2 + 18);
  if (v11)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(v11);
    uint64_t v13 = *(std::__shared_weak_count **)(v12 + 208);
    *(void *)(v12 + 200) = 0;
    *(void *)(v12 + 208) = 0;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    id v10 = (std::__shared_weak_count *)*((void *)a2 + 19);
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 19) = 0;
    if (v10)
    {
LABEL_12:
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
}

uint64_t AudioComponentMgr_RegistrarService::isComponentRegistrationAllowed(AudioComponentMgr_RegistrarService *this, const AudioComponentDescription *a2)
{
  return 1;
}

uint64_t AudioComponentMgr_RegistrarService::setComponentUserTags(AudioComponentMgr_RegistrarService *this, OpaqueAudioComponent *a2, const __CFArray *a3)
{
  if (!a2) {
    return 4294964296;
  }
  uint64_t v4 = (**(uint64_t (***)(OpaqueAudioComponent *))a2)(a2);
  if (!v4) {
    return 4294964296;
  }
  uint64_t v5 = dictionaryFromComponentDescription((const AudioComponentDescription *)(v4 + 36), *(unsigned int *)(v4 + 56));
  GlobalComponentPluginMgr((uint64_t *)v8);
  long long v6 = AudioComponentMgr_RegistrarService::syncPrefServerProxy((AudioComponentMgr_RegistrarService *)v8[1]);
  [v6 setComponentUserTags:v5 tags:a3];

  if (v8[0]) {
    std::recursive_mutex::unlock(v8[0]);
  }

  return 0;
}

void sub_18FFA86F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9) {
    std::recursive_mutex::unlock(a9);
  }

  _Unwind_Resume(a1);
}

id AudioComponentMgr_RegistrarService::syncPrefServerProxy(AudioComponentMgr_RegistrarService *this)
{
  id v2 = (void *)*((void *)this + 13);
  if (!v2)
  {
    assertXPCServiceReachable(&cfstr_ComAppleAudioA_1.isa);
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F29268]) initWithMachServiceName:@"com.apple.audio.AudioComponentPrefs" options:4096];
    uint64_t v4 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EDFB9950];
    [v3 setRemoteObjectInterface:v4];

    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke;
    v9[3] = &__block_descriptor_40_e5_v8__0l;
    v9[4] = this;
    [v3 setInterruptionHandler:v9];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke_2;
    v8[3] = &__block_descriptor_40_e5_v8__0l;
    v8[4] = this;
    [v3 setInvalidationHandler:v8];
    [v3 resume];
    uint64_t v5 = (void *)*((void *)this + 13);
    *((void *)this + 13) = v3;

    id v2 = (void *)*((void *)this + 13);
  }
  long long v6 = [v2 synchronousRemoteObjectProxyWithErrorHandler:&__block_literal_global_51];
  return v6;
}

void sub_18FFA8890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke(uint64_t a1, const char *a2)
{
}

void ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke_2(uint64_t a1, const char *a2)
{
}

void ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  uint64_t v3 = *(id *)gAudioComponentLogCategory;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315650;
    long long v6 = "AudioComponentPluginMgr.mm";
    __int16 v7 = 1024;
    int v8 = 382;
    __int16 v9 = 2112;
    id v10 = v2;
    _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d preference server proxy error: %@", (uint8_t *)&v5, 0x1Cu);
  }
}

void sub_18FFA89E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AudioComponentMgr_RegistrarService::lostPrefServerConnection(AudioComponentMgr_RegistrarService *this, const char *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  uint64_t v3 = *(id *)gAudioComponentLogCategory;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315650;
    long long v6 = "AudioComponentPluginMgr.mm";
    __int16 v7 = 1024;
    int v8 = 333;
    __int16 v9 = 2080;
    id v10 = this;
    _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d preference server connection %s", (uint8_t *)&v5, 0x1Cu);
  }
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v7 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, char *))(a1 + 8))(v3, &v7);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v4;
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v8);
  return v7 != 0;
}

void *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1EDFA0768;
  a2[1] = v2;
  return std::__function::__value_func<void ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

void std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(void *a1)
{
  *a1 = &unk_1EDFA0768;
  std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](a1 + 2);
  JUMPOUT(0x192FC8940);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(void *a1)
{
  *a1 = &unk_1EDFA0768;
  std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::operator()(uint64_t result, void *a2)
{
  **(_DWORD **)(result + 8) = *a2;
  return result;
}

void *std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDFA07B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::~__func()
{
}

id AudioComponentMgr_RegistrarService::copyComponentUserTags(AudioComponentMgr_RegistrarService *this, OpaqueAudioComponent *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = (**(uint64_t (***)(OpaqueAudioComponent *))a2)(a2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = dictionaryFromComponentDescription((const AudioComponentDescription *)(v3 + 36), *(unsigned int *)(v3 + 56));
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000;
  uint64_t v12 = __Block_byref_object_copy_;
  uint64_t v13 = __Block_byref_object_dispose_;
  id v14 = 0;
  uint64_t v5 = AudioComponentMgr_RegistrarService::syncPrefServerProxy(this);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN34AudioComponentMgr_RegistrarService21copyComponentUserTagsEP20OpaqueAudioComponent_block_invoke;
  v8[3] = &unk_1E5680CC8;
  v8[4] = &v9;
  [v5 getComponentUserTags:v4 reply:v8];

  id v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_18FFA8E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void ___ZN34AudioComponentMgr_RegistrarService21copyComponentUserTagsEP20OpaqueAudioComponent_block_invoke(uint64_t a1, void *a2)
{
}

void AudioComponentMgr_NSExtension::requestIcon(AudioComponentMgr_RegistrarService *a1, OpaqueAudioComponent *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = (**(uint64_t (***)(OpaqueAudioComponent *))a2)(a2);
    if (v6)
    {
      uint64_t v7 = v6;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN29AudioComponentMgr_NSExtension11requestIconEP20OpaqueAudioComponentR13APIconRequest_block_invoke;
      aBlock[3] = &__block_descriptor_40_e16_v16__0__NSData_8l;
      aBlock[4] = a3;
      uint64_t v8 = _Block_copy(aBlock);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
      if (v9)
      {
        id v10 = *(id *)(v9 + 160);
        uint64_t v11 = AudioComponentMgr_RegistrarService::syncPrefServerProxy(a1);
        [v11 getExtensionIcon:v10 reply:v8];

LABEL_17:
        return;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
      if (v12)
      {
        uint64_t v13 = *(const void **)(v12 + 160);
        if (v13) {
          CFRetain(*(CFTypeRef *)(v12 + 160));
        }
        v21[0] = v13;
        id v14 = AudioComponentMgr_RegistrarService::syncPrefServerProxy(a1);
        [v14 getInterAppIcon:v13 reply:v8];

        if (v13) {
          CFRelease(v13);
        }
        goto LABEL_17;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a3);

      id v15 = *(id *)(a3 + 8);
      if (v15) {
        return;
      }
    }
  }
  if (!Impl_AudioGetComponentInfo(a2, &v19, 0) && v19.componentManufacturer == 1634758764)
  {
    uint64_t v22 = 0;
    int v23 = &v22;
    uint64_t v24 = 0x2020000000;
    uint64_t v16 = (void (*)(OpaqueAudioComponent *))getCAUI_retrieveHostIconForAudioUnitSymbolLoc(void)::ptr;
    v25 = getCAUI_retrieveHostIconForAudioUnitSymbolLoc(void)::ptr;
    if (!getCAUI_retrieveHostIconForAudioUnitSymbolLoc(void)::ptr)
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = ___ZL45getCAUI_retrieveHostIconForAudioUnitSymbolLocv_block_invoke;
      v21[3] = &unk_1E5688B80;
      v21[4] = &v22;
      ___ZL45getCAUI_retrieveHostIconForAudioUnitSymbolLocv_block_invoke(v21);
      uint64_t v16 = (void (*)(OpaqueAudioComponent *))v23[3];
    }
    _Block_object_dispose(&v22, 8);
    if (!v16)
    {
      uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v18 = [NSString stringWithUTF8String:"UIImage *SOFT_CAUI_retrieveHostIconForAudioUnit(AudioComponent)"];
      objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, @"AudioComponentPluginMgr.mm", 917, @"%s", dlerror());

      __break(1u);
      return;
    }
    uint64_t v8 = v16(a2);
    objc_storeStrong((id *)(a3 + 8), v8);
    goto LABEL_17;
  }
}

void sub_18FFA91B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN29AudioComponentMgr_NSExtension11requestIconEP20OpaqueAudioComponentR13APIconRequest_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = (void *)[objc_alloc(NSClassFromString(&cfstr_Uiimage.isa)) initWithData:v4];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), v3);
}

void sub_18FFA929C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *___ZL45getCAUI_retrieveHostIconForAudioUnitSymbolLocv_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E5680D08;
    uint64_t v7 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *CoreAudioKitLibrary()"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"AUAudioUnit_Internal.h", 352, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  __n128 result = dlsym(v2, "CAUI_retrieveHostIconForAudioUnit");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getCAUI_retrieveHostIconForAudioUnitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void sub_18FFA943C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void AudioComponentMgr_Base::findCarbonComponent(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke_2(uint64_t a1, const char *a2)
{
}

void ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke_3(uint64_t a1, const char *a2)
{
}

void AudioComponentMgr_RegistrarService::lostRegServerConnection(AudioComponentMgr_RegistrarService *this, const char *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  uint64_t v3 = *(id *)gAudioComponentLogCategory;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315650;
    long long v6 = "AudioComponentPluginMgr.mm";
    __int16 v7 = 1024;
    int v8 = 326;
    __int16 v9 = 2080;
    id v10 = this;
    _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d registration server connection %s", (uint8_t *)&v5, 0x1Cu);
  }
}

void AudioComponentMgr_NSExtension::~AudioComponentMgr_NSExtension(AudioComponentMgr_NSExtension *this)
{
  *(void *)this = &unk_1EDF943F8;
  uint64_t v2 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;

  *(void *)this = &unk_1EDF94938;
  uint64_t v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);

  *(void *)this = &unk_1EDF931E0;
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1EDF936C0;
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_1EDF943F8;
  uint64_t v2 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;

  *(void *)this = &unk_1EDF94938;
  uint64_t v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);

  *(void *)this = &unk_1EDF931E0;
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1EDF936C0;
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t AudioComponentMgr_Base::hasSpeechSynthesizerSupport(AudioComponentMgr_Base *this)
{
  return 0;
}

void AudioComponentMgr_Base::_prepareRemoveComponent(AudioComponentMgr_Base *this, APComponent *a2)
{
  *((unsigned char *)a2 + 72) = 1;
}

uint64_t AudioComponentMgr_Base::handleDuplicateRegistrationAttempt()
{
  return 0;
}

uint64_t AudioComponentMgr_Base::isComponentRegistrationAllowed(AudioComponentMgr_Base *this, const AudioComponentDescription *a2)
{
  return 1;
}

uint64_t AudioComponentMgr_Base::setComponentUserTags(AudioComponentMgr_Base *this, OpaqueAudioComponent *a2, const __CFArray *a3)
{
  return 4294967292;
}

uint64_t AudioComponentMgr_Base::copyComponentUserTags(AudioComponentMgr_Base *this, OpaqueAudioComponent *a2)
{
  return 0;
}

void AudioComponentMgr_Base::requestIcon(uint64_t a1, uint64_t (***a2)(void))
{
  if (a2)
  {
    uint64_t v2 = (**a2)(a2);
    if (v2)
    {
      uint64_t v3 = *(void (**)(void))(*(void *)v2 + 48);
      v3();
    }
  }
}

void AudioComponentMgr_Base::~AudioComponentMgr_Base(AudioComponentMgr_Base *this)
{
  *(void *)this = &unk_1EDF936C0;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x192FC8940);
}

{
  void **v1;

  *(void *)this = &unk_1EDF936C0;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void AudioComponentMgr_iOS::initPhase2(AudioComponentMgr_iOS *this)
{
  uint64_t v1 = (EmbeddedComponentManager *)EmbeddedComponentManager::registerInternalAudioUnits(this);
  EmbeddedComponentManager::registerInternalAudioCodecs(v1);
}

void AudioComponentMgr_iOS::~AudioComponentMgr_iOS(AudioComponentMgr_iOS *this)
{
  *(void *)this = &unk_1EDF931E0;
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1EDF936C0;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x192FC8940);
}

{
  void **v2;

  *(void *)this = &unk_1EDF931E0;
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1EDF936C0;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

double AudioComponentMgr_RegistrarService::buildExtensionServiceComponentList@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t AudioComponentMgr_RegistrarService::extensionServiceIdentifier(AudioComponentMgr_RegistrarService *this)
{
  return 0;
}

void AudioComponentMgr_RegistrarService::~AudioComponentMgr_RegistrarService(id *this)
{
  *this = &unk_1EDF94938;
  uint64_t v2 = this + 14;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);

  *this = &unk_1EDF931E0;
  uint64_t v2 = this + 6;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &unk_1EDF936C0;
  uint64_t v2 = this + 2;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x192FC8940);
}

{
  void **v2;

  *this = &unk_1EDF94938;
  uint64_t v2 = this + 14;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);

  *this = &unk_1EDF931E0;
  uint64_t v2 = this + 6;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &unk_1EDF936C0;
  uint64_t v2 = this + 2;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void ___ZN22AudioComponentMgr_BaseC2Ev_block_invoke()
{
  GlobalComponentPluginMgr((uint64_t *)v1);
  AudioComponentVector::showAll((AudioComponentVector *)&v1[1]->__m_.__opaque[8], "notify request");
  id v0 = v1[0];
  if (v1[0])
  {
    std::recursive_mutex::unlock(v0);
  }
}

void sub_18FFA9D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9) {
    std::recursive_mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void APComponent_InterApp::getIcon(uint64_t a1, uint64_t a2)
{
  IPCAUIcons::GetIconFromBundle(*(IPCAUIcons **)(a1 + 160), (const __CFString *)a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(a2 + 8), v3);
}

void APComponent_InterApp::~APComponent_InterApp(APComponent *this)
{
  APComponent_InterApp::~APComponent_InterApp(this);
  JUMPOUT(0x192FC8940);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF92D48;
  uint64_t v2 = (const void *)*((void *)this + 20);
  if (v2) {
    CFRelease(v2);
  }
  APComponent::~APComponent(this);
}

uint64_t AudioComponentMgr_NSExtension::setExtensionComponentList(AudioComponentMgr_NSExtension *this, NSString *a2, NSArray *a3)
{
  int v5 = a2;
  long long v6 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 560558179;
  __int16 v7 = AudioComponentMgr_RegistrarService::syncPrefServerProxy(this);
  uint64_t v8 = *((unsigned __int8 *)this + 80);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___ZN29AudioComponentMgr_NSExtension25setExtensionComponentListEP8NSStringP7NSArray_block_invoke;
  v11[3] = &unk_1E5680CA0;
  v11[4] = &v12;
  [v7 setExtensionComponentList:v5 linkedSDKRequiresEntitlement:v8 components:v6 reply:v11];

  uint64_t v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);

  return v9;
}

void sub_18FFA9F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN29AudioComponentMgr_NSExtension25setExtensionComponentListEP8NSStringP7NSArray_block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

id AudioComponentMgr_NSExtension::getExtensionComponentList(AudioComponentMgr_NSExtension *this, NSString *a2)
{
  id v3 = a2;
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000;
  uint64_t v12 = __Block_byref_object_copy_;
  uint64_t v13 = __Block_byref_object_dispose_;
  id v14 = 0;
  id v4 = AudioComponentMgr_RegistrarService::syncPrefServerProxy(this);
  uint64_t v5 = *((unsigned __int8 *)this + 80);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN29AudioComponentMgr_NSExtension25getExtensionComponentListEP8NSString_block_invoke;
  v8[3] = &unk_1E5680CC8;
  v8[4] = &v9;
  [v4 getExtensionComponentList:v3 linkedSDKRequiresEntitlement:v5 reply:v8];

  id v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_18FFAA084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZN29AudioComponentMgr_NSExtension25getExtensionComponentListEP8NSString_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZN29AudioComponentMgr_NSExtension23iconForInterAppBundleIDEPK10__CFStringR13APIconRequest_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)[objc_alloc(NSClassFromString(&cfstr_Uiimage.isa)) initWithData:v4];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), v3);
}

void sub_18FFAA138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t AudioComponentCopyUserTags(uint64_t a1)
{
  GlobalComponentPluginMgr((uint64_t *)&v4);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 56))(v5, a1);
  if (v4) {
    std::recursive_mutex::unlock(v4);
  }
  return v2;
}

void sub_18FFAA1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9) {
    std::recursive_mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioComponentSetUserTags(uint64_t a1, uint64_t a2)
{
  GlobalComponentPluginMgr((uint64_t *)&v6);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, a1, a2);
  if (v6) {
    std::recursive_mutex::unlock(v6);
  }
  return v4;
}

void sub_18FFAA250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9) {
    std::recursive_mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<APComponent *,std::shared_ptr<APComponent>::__shared_ptr_default_delete<APComponent,APComponent>,std::allocator<APComponent>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void *std::__function::__func<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*),std::allocator<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*)>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EDF9E440;
  result[1] = v3;
  return result;
}

void std::__function::__func<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*),std::allocator<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*)>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func()
{
}

uint64_t AudioComponentRelease(uint64_t (***a1)(void))
{
  if (!a1) {
    return 4294967246;
  }
  uint64_t v1 = (**a1)(a1);
  if (!v1) {
    return 4294964296;
  }
  uint64_t v2 = (APComponent *)v1;
  GlobalComponentPluginMgr((uint64_t *)&v9);
  uint64_t v3 = v10;
  (*(void (**)(uint64_t, APComponent *))(*(void *)v10 + 104))(v10, v2);
  AudioComponentVector::remove((AudioComponentVector *)(v3 + 16), v2);
  uint64_t v4 = (void *)(v3 + 8);
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  id v6 = *(uint64_t **)(v3 + 24);
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    void *v4 = v7;
    uint64_t v4 = (void *)(v7 + 24);
  }
  void *v4 = 0;
  dispatch_async(MEMORY[0x1E4F14428], &__block_literal_global_82);
  if (v9) {
    std::recursive_mutex::unlock(v9);
  }
  return 0;
}

void sub_18FFAA3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9) {
    std::recursive_mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

IPCAUClient *IPCAUClient::IPCAUFactoryFunction(IPCAUClient *this, const AudioComponentDescription *a2)
{
  mach_msg_return_t v14;
  int v15;
  BOOL v16;
  const char **v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  int v27;
  mach_port_name_t v28;
  mach_msg_return_t v29;
  mach_msg_return_t v30;
  int v31;
  int v32;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  unsigned char buf[52];
  long long v43;
  uint64_t v44;
  uint8_t v45[8];
  char v46;
  uint64_t v47;
  CFRange v48;

  uint64_t v2 = this;
  v47 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v3 = CADeprecated::TSingleton<IPCAUClient>::instance(this);
    v40 = v3;
    v41 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    if (AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey < 0)
    {
      AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey = 0;
      MainBundle = CFBundleGetMainBundle();
      if (MainBundle
        && (ValueForInfoDictionaryKey = (const __CFArray *)CFBundleGetValueForInfoDictionaryKey(MainBundle, @"UIBackgroundModes"), (v6 = ValueForInfoDictionaryKey) != 0)&& (CFTypeID v7 = CFGetTypeID(ValueForInfoDictionaryKey), v7 == CFArrayGetTypeID())&& (v48.length = CFArrayGetCount(v6), v48.location = 0, CFArrayContainsValue(v6, v48, @"audio")))
      {
        AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey = 1;
      }
      else if (!AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey)
      {
LABEL_11:
        if (kInterAppAudioScope)
        {
          uint64_t v8 = *(NSObject **)kInterAppAudioScope;
          if (!*(void *)kInterAppAudioScope)
          {
LABEL_124:
            uint64_t v2 = 0;
            goto LABEL_125;
          }
        }
        else
        {
          uint64_t v8 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "IPCAURegistrar.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1600;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "AudioComponentInstanceNew";
        _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: failing because app does not have 'audio' in its UIBackgroundModes", buf, 0x1Cu);
        if (!AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey) {
          goto LABEL_124;
        }
      }
    }
    else if (!AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey)
    {
      goto LABEL_11;
    }
    uint64_t v9 = *(void *)(v3 + 88);
    *(void *)buf = v3 + 88;
    buf[8] = 0;
    v39 = 268435460;
    buf[8] = (*(uint64_t (**)(uint64_t))(v9 + 16))(v3 + 88);
    *(void *)(v3 + 224) = (*(_DWORD *)(v3 + 224) + 1);
    CADeprecated::CAGuard::Locker::~Locker((CADeprecated::CAGuard::Locker *)buf);
    int v10 = 5;
    while (1)
    {
      int v11 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
      *(_OWORD *)&buf[32] = *(_OWORD *)v2;
      *(_DWORD *)&buf[48] = *((_DWORD *)v2 + 4);
      int v12 = *(_DWORD *)(v3 + 224);
      *(void *)&buf[24] = *MEMORY[0x1E4F14068];
      LODWORD(v43) = v12;
      mach_port_name_t reply_port = mig_get_reply_port();
      *(void *)buf = 5395;
      *(_DWORD *)&buf[8] = v11;
      *(_DWORD *)&buf[12] = reply_port;
      *(void *)&buf[16] = 0x15F9800000000;
      if (MEMORY[0x1E4F14B18])
      {
        voucher_mach_msg_set((mach_msg_header_t *)buf);
        mach_port_name_t reply_port = *(_DWORD *)&buf[12];
      }
      id v14 = mach_msg((mach_msg_header_t *)buf, 275, 0x38u, 0x30u, reply_port, gMediaServerTimeout, 0);
      int v15 = v14;
      if ((v14 - 268435458) <= 0xE && ((1 << (v14 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&buf[12]);
      }
      else
      {
        if (!v14)
        {
          if (*(_DWORD *)&buf[20] == 71)
          {
            int v15 = -308;
          }
          else if (*(_DWORD *)&buf[20] == 90108)
          {
            if ((*(_DWORD *)buf & 0x80000000) == 0)
            {
              if (*(_DWORD *)&buf[4] == 40)
              {
                if (!*(_DWORD *)&buf[8])
                {
                  int v15 = *(_DWORD *)&buf[32];
                  if (!*(_DWORD *)&buf[32])
                  {
                    int v15 = *(_DWORD *)&buf[36];
                    goto LABEL_49;
                  }
                  goto LABEL_42;
                }
              }
              else if (*(_DWORD *)&buf[4] == 36)
              {
                if (*(_DWORD *)&buf[8]) {
                  uint64_t v16 = 1;
                }
                else {
                  uint64_t v16 = *(_DWORD *)&buf[32] == 0;
                }
                if (v16) {
                  int v15 = -300;
                }
                else {
                  int v15 = *(_DWORD *)&buf[32];
                }
                goto LABEL_42;
              }
            }
            int v15 = -300;
          }
          else
          {
            int v15 = -301;
          }
LABEL_42:
          mach_msg_destroy((mach_msg_header_t *)buf);
          goto LABEL_43;
        }
        mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
      }
      if (v15 == 268435460)
      {
        if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
          mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&buf[12]);
        }
        mach_msg_destroy((mach_msg_header_t *)buf);
        goto LABEL_56;
      }
LABEL_43:
      if (v15 != 268435459)
      {
        if (!v15)
        {
LABEL_49:
          if (kInterAppAudioScope)
          {
            uint64_t v18 = *(NSObject **)kInterAppAudioScope;
            if (!*(void *)kInterAppAudioScope) {
              goto LABEL_66;
            }
          }
          else
          {
            uint64_t v18 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "IPCAUClient.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 215;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v15;
            _os_log_impl(&dword_18FEC0000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d CheckLaunch says mustWait: %d", buf, 0x18u);
          }
LABEL_66:
          if (v15)
          {
            *(void *)v45 = v3 + 88;
            v46 = 0;
            v46 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 88) + 16))(v3 + 88);
            while (1)
            {
              uint64_t v22 = *(_DWORD *)(v3 + 228);
              if (v22) {
                break;
              }
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)v45 + 64))(*(void *)v45, 20000000000))
              {
                if (kInterAppAudioScope)
                {
                  int v23 = *(NSObject **)kInterAppAudioScope;
                  if (!*(void *)kInterAppAudioScope) {
                    goto LABEL_123;
                  }
                }
                else
                {
                  int v23 = MEMORY[0x1E4F14500];
                }
                if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_123;
                }
                *(_DWORD *)buf = 136315394;
                *(void *)&buf[4] = "IPCAUClient.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 224;
                v26 = "%25s:%-5d Timed out waiting for app to launch";
LABEL_122:
                _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, v26, buf, 0x12u);
                goto LABEL_123;
              }
            }
            if (v22 == 1)
            {
              if (kInterAppAudioScope)
              {
                int v23 = *(NSObject **)kInterAppAudioScope;
                if (!*(void *)kInterAppAudioScope)
                {
LABEL_123:
                  CADeprecated::CAGuard::Locker::~Locker((CADeprecated::CAGuard::Locker *)v45);
                  goto LABEL_124;
                }
              }
              else
              {
                int v23 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                goto LABEL_123;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = "IPCAUClient.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 229;
              v26 = "%25s:%-5d Failed to launch app";
              goto LABEL_122;
            }
            if (kInterAppAudioScope)
            {
              v25 = *(NSObject **)kInterAppAudioScope;
              if (!*(void *)kInterAppAudioScope)
              {
LABEL_92:
                CADeprecated::CAGuard::Locker::~Locker((CADeprecated::CAGuard::Locker *)v45);
                goto LABEL_93;
              }
            }
            else
            {
              v25 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = "IPCAUClient.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 233;
              _os_log_impl(&dword_18FEC0000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d App seems to be running after wait", buf, 0x12u);
            }
            goto LABEL_92;
          }
          if (kInterAppAudioScope)
          {
            uint64_t v24 = *(NSObject **)kInterAppAudioScope;
            if (!*(void *)kInterAppAudioScope) {
              goto LABEL_93;
            }
          }
          else
          {
            uint64_t v24 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "IPCAUClient.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 235;
            _os_log_impl(&dword_18FEC0000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d App appears to be already running", buf, 0x12u);
          }
LABEL_93:
          uint64_t v27 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
          v44 = 0;
          v43 = 0u;
          memset(&buf[4], 0, 48);
          *(void *)&buf[24] = *MEMORY[0x1E4F14068];
          *(_OWORD *)&buf[32] = *(_OWORD *)v2;
          *(_DWORD *)&buf[48] = *((_DWORD *)v2 + 4);
          v28 = mig_get_reply_port();
          *(_DWORD *)&buf[8] = v27;
          *(_DWORD *)&buf[12] = v28;
          *(_DWORD *)buf = 5395;
          *(void *)&buf[16] = 0x15F9900000000;
          if (MEMORY[0x1E4F14B18])
          {
            voucher_mach_msg_set((mach_msg_header_t *)buf);
            v28 = *(_DWORD *)&buf[12];
          }
          unsigned int v29 = mach_msg((mach_msg_header_t *)buf, 275, 0x34u, 0x4Cu, v28, gMediaServerTimeout, 0);
          v30 = v29;
          if ((v29 - 268435458) <= 0xE && ((1 << (v29 - 2)) & 0x4003) != 0)
          {
            mig_put_reply_port(*(mach_port_t *)&buf[12]);
            goto LABEL_109;
          }
          if (!v29)
          {
            if (*(_DWORD *)&buf[20] == 90109
              && (*(_DWORD *)buf & 0x80000000) != 0
              && *(_DWORD *)&buf[24] == 1
              && *(_DWORD *)&buf[4] == 68
              && !*(_DWORD *)&buf[8]
              && *(unsigned __int16 *)&buf[38] << 16 == 1114112)
            {
              int v31 = *(_DWORD *)&buf[28];
              unint64_t v32 = *(_DWORD *)&buf[48];
              if (*(_DWORD *)&buf[28] && v32 != getpid())
              {
                int64_t v34 = *(uint64_t **)(v3 + 336);
                v35 = *(uint64_t **)(v3 + 344);
                if (v34 != v35)
                {
                  v36 = 0;
                  do
                  {
                    v38 = *v34++;
                    v37 = v38;
                    if (*(_DWORD *)(v38 + 48) == v31) {
                      v36 = v37;
                    }
                  }
                  while (v34 != v35);
                  if (v36) {
                    operator new();
                  }
                }
                operator new();
              }
              goto LABEL_113;
            }
LABEL_112:
            mach_msg_destroy((mach_msg_header_t *)buf);
            goto LABEL_113;
          }
          mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
LABEL_109:
          if (v30 == 268435460)
          {
            if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
              mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&buf[12]);
            }
            goto LABEL_112;
          }
LABEL_113:
          if (kInterAppAudioScope)
          {
            uint64_t v2 = *(IPCAUClient **)kInterAppAudioScope;
            if (!*(void *)kInterAppAudioScope)
            {
LABEL_125:
              CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v40);
              return v2;
            }
          }
          else
          {
            uint64_t v2 = (IPCAUClient *)MEMORY[0x1E4F14500];
          }
          if (!os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR)) {
            goto LABEL_124;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "IPCAUClient.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 243;
          AudioComponentDescription v19 = "%25s:%-5d Host can't be node";
          uint64_t v20 = v2;
          v21 = 18;
LABEL_62:
          _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
          goto LABEL_124;
        }
        v39 = v15;
LABEL_56:
        if (kInterAppAudioScope)
        {
          uint64_t v2 = *(IPCAUClient **)kInterAppAudioScope;
          if (!*(void *)kInterAppAudioScope) {
            goto LABEL_125;
          }
        }
        else
        {
          uint64_t v2 = (IPCAUClient *)MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR)) {
          goto LABEL_124;
        }
        CAX4CCString::CAX4CCString((CAX4CCString *)v45, v39);
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "IPCAUClient.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 211;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v45;
        AudioComponentDescription v19 = "%25s:%-5d CheckLaunchAUServer failed (%s)";
        uint64_t v20 = v2;
        v21 = 28;
        goto LABEL_62;
      }
      sleep(1u);
      uint64_t v17 = (const char **)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
      AURegistrationServerConnection::Connect(v17);
      if (!--v10)
      {
        v39 = 268435459;
        goto LABEL_56;
      }
    }
  }
  return v2;
}

void sub_18FFAB248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  v21 = (void *)*((void *)v19 + 25);
  if (v21)
  {
    *((void *)v19 + 26) = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)*((void *)v19 + 22);
  if (v22)
  {
    *((void *)v19 + 23) = v22;
    operator delete(v22);
  }
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(v19);
  MEMORY[0x192FC8940](v19, 0x10F1C40DC43F475);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<APComponent_InterApp *,std::shared_ptr<APComponent_InterApp>::__shared_ptr_default_delete<APComponent_InterApp,APComponent_InterApp>,std::allocator<APComponent_InterApp>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void std::__shared_ptr_pointer<APComponent_InterApp *,std::shared_ptr<APComponent_InterApp>::__shared_ptr_default_delete<APComponent_InterApp,APComponent_InterApp>,std::allocator<APComponent_InterApp>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

CFAbsoluteTime AudioComponentGetLastActiveTime(AudioComponent comp)
{
  double v1 = 0.0;
  if (!comp) {
    return v1;
  }
  uint64_t v2 = (**(uint64_t (***)(AudioComponent))comp)(comp);
  if (!v2) {
    return v1;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  if (!v3) {
    return v1;
  }
  uint64_t v4 = v3;
  double valuePtr = 0.0;
  if (!*(void *)(v3 + 160)) {
    return v1;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDictionaryRef v6 = (const __CFDictionary *)APComponent_InterApp::GetLastActiveTime(void)::activeTimes;
  if (Current <= 2.5 && APComponent_InterApp::GetLastActiveTime(void)::activeTimes) {
    goto LABEL_11;
  }
  if (APComponent_InterApp::GetLastActiveTime(void)::activeTimes)
  {
    CFRelease((CFTypeRef)APComponent_InterApp::GetLastActiveTime(void)::activeTimes);
    APComponent_InterApp::GetLastActiveTime(void)::activeTimes = 0;
  }
  CFPropertyListRef v7 = CFPreferencesCopyAppValue(@"InterAppProcessActiveTimes", @"com.apple.coreaudio");
  APComponent_InterApp::GetLastActiveTime(void)::activeTimes = (uint64_t)v7;
  if (v7)
  {
    CFRetain(v7);
    CFDictionaryRef v6 = (const __CFDictionary *)APComponent_InterApp::GetLastActiveTime(void)::activeTimes;
LABEL_11:
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, *(const void **)(v4 + 160));
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
      return valuePtr;
    }
  }
  return v1;
}

uint64_t AudioComponentInstanceSetNoCanDo(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    if (result)
    {
      uint64_t result = APComponentInstance::selectorToMethodPtr(*(APComponentInstance **)(result + 8), *(std::__shared_weak_count **)(result + 16), a2);
      if (result) {
        *(void *)uint64_t result = 0;
      }
    }
  }
  return result;
}

uint64_t *std::unique_ptr<XOSTransactor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    XOSTransactor::endTransaction((XOSTransactor *)v2);

    JUMPOUT(0x192FC8940);
  }
  return result;
}

void AUOOPRenderingServerUser::~AUOOPRenderingServerUser(AUOOPRenderingServerUser *this)
{
  this->_vptr$CAPrint = (void **)&unk_1EDF93A88;
  BaseOpaqueObject::destroyOpaqueRef((BaseOpaqueObject *)this);

  BaseOpaqueObject::~BaseOpaqueObject((BaseOpaqueObject *)this);
}

{
  uint64_t vars8;

  AUOOPRenderingServerUser::~AUOOPRenderingServerUser(this);
  JUMPOUT(0x192FC8940);
}

BOOL TOpaqueObject<AUOOPRenderingServerUser,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AUOOPRenderingServerUser>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

void std::vector<KVOAggregator::Record>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 32)
  {

    objc_destroyWeak((id *)(i - 24));
  }
  *(void *)(a1 + 8) = a2;
}

void sub_18FFABA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = applesauce::dispatch::v1::source::operator*(v3);
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFABACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFABBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSString * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e30_v24__0__NSError_8__NSString_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = _Block_copy(v4);
    id v11 = v8;
    id v12 = _Block_copy(v9);
    id v5 = _Block_copy(aBlock);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_18FFABD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  CFPropertyListRef v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFABDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAC068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFAC218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFAC44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(v18);
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v19 - 72));

  _Unwind_Resume(a1);
}

void sub_18FFAC70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = v11;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c40_ZTSN5caulk8weak_refI15NSXPCConnectionEE(uint64_t a1)
{
}

void __copy_helper_block_ea8_32c40_ZTSN5caulk8weak_refI15NSXPCConnectionEE(uint64_t a1, uint64_t a2)
{
}

void *caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(void *a1, void *a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EDFA1410;
  v5[1] = a1;
  v5[3] = v5;
  id v3 = a2;
  *a1 = v3;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v5);

  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100](v5);
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_18FFAC818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  uint64_t v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJU8__strongP12NSDictionaryEE10sync_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c75_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryEEEEEE_e17_v16__0__NSError_8l;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v7);
  id v3 = [v2 synchronousRemoteObjectProxyWithErrorHandler:v5];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100](v7);
  return v3;
}

void sub_18FFAC930(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::reply(uint64_t a1)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v5, a1 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJU8__strongP12NSDictionaryEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c75_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryEEEEEE_e34_v24__0__NSError_8__NSDictionary_16l;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  double v1 = _Block_copy(aBlock);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100](v5);
  return v1;
}

void sub_18FFACA3C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJU8__strongP12NSDictionaryEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_18FFACC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c75_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c75_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_18FFACCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJU8__strongP12NSDictionaryEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_18FFACCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary *> &&)#1},std::allocator<std::tuple<NSDictionary *> &>,void ()(NSError,std::tuple<NSDictionary *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  CFPropertyListRef v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary *> &&)#1},std::allocator<std::tuple<NSDictionary *> &>,void ()(NSError,std::tuple<NSDictionary *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1410;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary *> &&)#1},std::allocator<std::tuple<NSDictionary *> &>,void ()(NSError,std::tuple<NSDictionary *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1410;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary *> &&)#1},std::allocator<std::tuple<NSDictionary *> &>,void ()(NSError,std::tuple<NSDictionary *>)>::~__func()
{
}

id caulk::strong<AURemoteMessageChannel>(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1);
  return WeakRetained;
}

void __destroy_helper_block_ea8_32c47_ZTSN5caulk8weak_refI22AURemoteMessageChannelEE(uint64_t a1)
{
}

void __copy_helper_block_ea8_32c47_ZTSN5caulk8weak_refI22AURemoteMessageChannelEE(uint64_t a1, uint64_t a2)
{
}

void sub_18FFACF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFACFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSArray * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e29_v24__0__NSError_8__NSArray_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = _Block_copy(v4);
    id v11 = v8;
    id v12 = _Block_copy(v9);
    id v5 = _Block_copy(aBlock);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_18FFAD140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  CFPropertyListRef v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFAD1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAD30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v11 = v10;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E__e17_v16__0__NSError_8l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = _Block_copy(v4);
    id v11 = v8;
    id v12 = _Block_copy(v9);
    id v5 = _Block_copy(aBlock);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_18FFAD454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = applesauce::dispatch::v1::source::operator*(v3);
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFAD4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAD61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

void sub_18FFAD75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FFAD8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  va_start(va, a8);
  id v12 = v10;

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *caulk::xpc::message<objc_object  {objcproto23AUAudioUnitHostProtocol}* {__strong}>::message(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *a1 = v5;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)(a1 + 1), a3);

  return a1;
}

void sub_18FFAD960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

id caulk::xpc::message<objc_object  {objcproto23AUAudioUnitHostProtocol}* {__strong}>::async_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v7, (uint64_t)(a1 + 1));
  uint64_t v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU34objcproto23AUAudioUnitHostProtocol11objc_objectJEE11async_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v6, (uint64_t)v7);
  id v3 = [v2 remoteObjectProxyWithErrorHandler:v5];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v6);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v7);
  return v3;
}

void sub_18FFADAEC(_Unwind_Exception *a1)
{
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v1);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU34objcproto23AUAudioUnitHostProtocol11objc_objectJEE11async_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void *__destroy_helper_block_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE(uint64_t a1)
{
  return _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE(uint64_t a1, uint64_t a2)
{
  return _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_(a1 + 32, a2 + 32);
}

void _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_18FFADC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_EclEOU8__strongS3_S6_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_E7destroyEv(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

void *_ZNKSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_E7__cloneEPNS0_6__baseIS7_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E4D0;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_E7__cloneEv()
{
  return 0;
}

void _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_ED0Ev(uint64_t a1)
{
  JUMPOUT(0x192FC8940);
}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_ED1Ev(uint64_t a1)
{
  return a1;
}

void sub_18FFADEF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEU13block_pointerFvDpT_ESH_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  CFPropertyListRef v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFADFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c174_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEU13block_pointerFvDpT_ESH_iEUlS4_SC_E_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c174_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEU13block_pointerFvDpT_ESH_iEUlS4_SC_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAE118(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18FFAE1FC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18FFAE398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEU13block_pointerFvDpT_ESF_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  CFPropertyListRef v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFAE454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c164_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEU13block_pointerFvDpT_ESF_iEUlS4_SA_E_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c164_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEU13block_pointerFvDpT_ESF_iEUlS4_SA_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAE5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFAE684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFAE820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP18MIDICIProfileStateEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  CFPropertyListRef v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFAE8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP18MIDICIProfileStateEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP18MIDICIProfileStateEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAEA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFAEB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP10NSIndexSetEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  CFPropertyListRef v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFAEC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c146_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP10NSIndexSetEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c146_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP10NSIndexSetEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAEFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, ...)
{
  va_start(va, a14);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18FFAF0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFAF19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFAF2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},float>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    id v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_iEUlS4_fE__e20_v20__0__NSError_8f16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = _Block_copy(v4);
    id v11 = v8;
    id v12 = _Block_copy(v9);
    id v5 = _Block_copy(aBlock);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_18FFAF404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2, float a3)
{
  id v7 = a2;
  id v5 = *(void **)(a1 + 32);
  id v6 = applesauce::dispatch::v1::source::operator*(v5);
  dispatch_source_cancel(v6);

  (*(void (**)(float))(*(void *)(a1 + 40) + 16))(a3);
}

void sub_18FFAF494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_iEUlS4_fE_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_iEUlS4_fE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAF604(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18FFAF858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFAF9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<-[AURemoteHost getParameter:sequenceNumber:reply:]::$_4>::~unique_ptr[abi:ne180100]((id **)va);
  _Unwind_Resume(a1);
}

void sub_18FFAFA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFAFBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP8NSNumberEEEEU13block_pointerFvDpT_ESF_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFAFC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP8NSNumberEEEEU13block_pointerFvDpT_ESF_iEUlS4_SA_E_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP8NSNumberEEEEU13block_pointerFvDpT_ESF_iEUlS4_SA_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFAFE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP15AUParameterTreeEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFAFF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c151_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP15AUParameterTreeEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c151_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP15AUParameterTreeEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFB0044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFB0178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer((id *)va);
  _Unwind_Resume(a1);
}

void PropertyNotificationDeferrer::PropertyNotificationDeferrer(PropertyNotificationDeferrer *this, AURemoteHost *a2)
{
  id v3 = a2;
  *(void *)this = v3;
  *((unsigned char *)this + 8) = 0;
  uint64_t v4 = [(AURemoteHost *)v3 propertyObserverQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN28PropertyNotificationDeferrerC2EP12AURemoteHost_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v4, block);
}

void sub_18FFB0270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PropertyNotificationDeferrer::changedProperties(id *this)
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x3032000000;
  uint64_t v9 = __Block_byref_object_copy__1666;
  int v10 = __Block_byref_object_dispose__1667;
  id v11 = 0;
  char v2 = [*this propertyObserverQueue];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZN28PropertyNotificationDeferrer17changedPropertiesEv_block_invoke;
  v5[3] = &unk_1E5688480;
  void v5[4] = &v6;
  void v5[5] = this;
  dispatch_sync(v2, v5);

  *((unsigned char *)this + 8) = 1;
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_18FFB0398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void PropertyNotificationDeferrer::~PropertyNotificationDeferrer(id *this)
{
  char v2 = [*this propertyObserverQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN28PropertyNotificationDeferrerD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
}

uint64_t ___ZN28PropertyNotificationDeferrerD2Ev_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(unsigned char *)(v1 + 8))
  {
    id v2 = *(id *)v1;
    uint64_t v3 = [*(id *)v1 deferPropertyChangeNotifications] - 1;
    return [v2 setDeferPropertyChangeNotifications:v3];
  }
  return result;
}

uint64_t __Block_byref_object_copy__1666(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1667(uint64_t a1)
{
}

void ___ZN28PropertyNotificationDeferrer17changedPropertiesEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v1 + 8)) {
    __assert_rtn("changedProperties_block_invoke", "AURemoteExtensionContext.mm", 101, "!mPropertiesFetched");
  }
  id v3 = *(id *)v1;
  uint64_t v4 = [*(id *)v1 deferPropertyChangeNotifications] - 1;
  [v3 setDeferPropertyChangeNotifications:v4];
  if (!v4)
  {
    id v5 = [*(id *)v1 pendingChangedProperties];
    uint64_t v6 = [v5 count];

    if (v6)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [*(id *)v1 _fetchAndClearPendingChangedProperties];
      MEMORY[0x1F41817F8]();
    }
  }
}

void sub_18FFB0594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN28PropertyNotificationDeferrerC2EP12AURemoteHost_block_invoke(uint64_t a1)
{
  uint64_t v1 = **(void ***)(a1 + 32);
  uint64_t v2 = [v1 deferPropertyChangeNotifications] + 1;
  return [v1 setDeferPropertyChangeNotifications:v2];
}

void sub_18FFB07A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSArrayEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = applesauce::dispatch::v1::source::operator*(v3);
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFB0868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSArrayEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSArrayEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFB0A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v8 = v7;

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer((id *)va);
  _Unwind_Resume(a1);
}

void sub_18FFB0B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void KVOAggregator::removeObserver(KVOAggregator *this, NSObject *a2, NSObject *a3, NSString *a4)
{
  int v23 = a2;
  id v7 = a3;
  uint64_t v8 = a4;
  uint64_t v9 = KVOAggregator::find(this, v7, v8, 0);
  uint64_t v10 = (uint64_t)v9;
  std::vector<char>::pointer end = this->mRecords.__end_;
  if (end == v9)
  {
    std::vector<char>::pointer end = v9;
  }
  else
  {
    int v12 = *((_DWORD *)v9 + 6) - 1;
    *((_DWORD *)v9 + 6) = v12;
    if (!v12)
    {
      [v7 removeObserver:v23 forKeyPath:v8 context:this];
      uint64_t v13 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<KVOAggregator::Record *,KVOAggregator::Record *,KVOAggregator::Record *>(v10 + 32, (uint64_t)this->mRecords.__end_, v10);
      std::vector<KVOAggregator::Record>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, v13);
      std::vector<char>::pointer end = this->mRecords.__end_;
    }
  }
  for (uint64_t i = this->mRecords.__begin_; ; uint64_t i = (Record *)((char *)i + 32))
  {
    if (i == end)
    {
      uint64_t i = end;
      goto LABEL_10;
    }
    id WeakRetained = objc_loadWeakRetained((id *)i + 1);

    if (!WeakRetained) {
      break;
    }
  }
  if (i != end)
  {
    for (j = (Record *)((char *)i + 32); j != end; j = (Record *)((char *)j + 32))
    {
      id v19 = objc_loadWeakRetained((id *)j + 1);

      if (v19)
      {
        *(void *)uint64_t i = *(void *)j;
        id v20 = objc_loadWeakRetained((id *)j + 1);
        objc_storeWeak((id *)i + 1, v20);

        uint64_t v21 = *((void *)j + 2);
        *((void *)j + 2) = 0;
        uint64_t v22 = (void *)*((void *)i + 2);
        *((void *)i + 2) = v21;

        *((_DWORD *)i + 6) = *((_DWORD *)j + 6);
        uint64_t i = (Record *)((char *)i + 32);
      }
    }
  }
LABEL_10:
  uint64_t v16 = this->mRecords.__end_;
  if (v16 != i)
  {
    uint64_t v17 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<KVOAggregator::Record *,KVOAggregator::Record *,KVOAggregator::Record *>((uint64_t)v16, (uint64_t)this->mRecords.__end_, (uint64_t)i);
    std::vector<KVOAggregator::Record>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, v17);
  }
}

void sub_18FFB0D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

Record *KVOAggregator::find(KVOAggregator *this, NSObject *a2, NSString *a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = a3;
  v69 = v7;
  objc_initWeak(&v70, v7);
  v71 = v8;
  int v72 = 0;
  std::vector<char>::pointer begin = this->mRecords.__begin_;
  int64_t v10 = this->mRecords.__end_ - this->mRecords.__begin_;
  if (!v10) {
    goto LABEL_11;
  }
  unint64_t v11 = v10 >> 5;
  do
  {
    unint64_t v12 = v11 >> 1;
    uint64_t v13 = (void *)((char *)begin + 32 * (v11 >> 1));
    if (*v13 < (unint64_t)v69
      || *v13 <= (unint64_t)v69 && [*((id *)begin + 4 * v12 + 2) compare:v71] < 0)
    {
      std::vector<char>::pointer begin = (Record *)(v13 + 4);
      unint64_t v12 = v11 + ~v12;
    }
    unint64_t v11 = v12;
  }
  while (v12);
  if (this->mRecords.__end_ == begin
    || *(NSObject **)begin != v69
    || (id v14 = begin, [*((id *)begin + 2) compare:v71]))
  {
LABEL_11:
    if (a4)
    {
      int v15 = this->mRecords.__begin_;
      std::vector<char>::pointer end = this->mRecords.__end_;
      uint64_t v17 = begin - this->mRecords.__begin_;
      uint64_t v18 = v17 >> 5;
      id v14 = (Record *)((char *)this->mRecords.__begin_ + (v17 & 0xFFFFFFFFFFFFFFE0));
      value = this->mRecords.__end_cap_.__value_;
      if (end >= value)
      {
        unint64_t v24 = ((end - v15) >> 5) + 1;
        if (v24 >> 59) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = value - v15;
        if (v25 >> 4 > v24) {
          unint64_t v24 = v25 >> 4;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        p_end_cap = &this->mRecords.__end_cap_;
        if (v26) {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v26);
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v29 = v17 >> 5;
        uint64_t v30 = v26 + 32 * v18;
        *(void *)&long long v73 = v26;
        *((void *)&v73 + 1) = v30;
        *(void *)&long long v74 = v30;
        *((void *)&v74 + 1) = v26 + 32 * v27;
        if (v17 >> 5 == v27)
        {
          if (v17 < 1)
          {
            if (begin == v15) {
              unint64_t v45 = 1;
            }
            else {
              unint64_t v45 = v17 >> 4;
            }
            v78 = &this->mRecords.__end_cap_;
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v45);
            v47 = (id *)&v46[32 * (v45 >> 2)];
            *(void *)&long long v76 = v46;
            *((void *)&v76 + 1) = v47;
            *(void *)&long long v77 = v47;
            *((void *)&v77 + 1) = &v46[32 * v48];
            uint64_t v49 = *((void *)&v73 + 1);
            if ((void)v74 != *((void *)&v73 + 1))
            {
              v50 = (char *)v47 + v74 - *((void *)&v73 + 1);
              do
              {
                id *v47 = *(id *)v49;
                objc_moveWeak(v47 + 1, (id *)(v49 + 8));
                v51 = *(void **)(v49 + 16);
                *(void *)(v49 + 16) = 0;
                v47[2] = v51;
                *((_DWORD *)v47 + 6) = *(_DWORD *)(v49 + 24);
                v47 += 4;
                v49 += 32;
              }
              while (v47 != (id *)v50);
              v47 = (id *)v50;
            }
            int v31 = v8;
            *(void *)&long long v77 = v47;
            long long v52 = v73;
            long long v53 = v74;
            long long v73 = v76;
            long long v74 = v77;
            long long v76 = v52;
            long long v77 = v53;
            std::__split_buffer<KVOAggregator::Record>::~__split_buffer((uint64_t)&v76);
            uint64_t v30 = v74;
          }
          else
          {
            int v31 = v8;
            unint64_t v32 = v29 + 2;
            if (v29 >= -1) {
              unint64_t v32 = v29 + 1;
            }
            unint64_t v33 = v32 >> 1;
            uint64_t v30 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<KVOAggregator::Record *,KVOAggregator::Record *,KVOAggregator::Record *>(v30, v30, v30 - 32 * (v32 >> 1));
            *((void *)&v73 + 1) -= 32 * v33;
            *(void *)&long long v74 = v30;
          }
        }
        else
        {
          int v31 = v8;
        }
        *(void *)uint64_t v30 = v69;
        objc_copyWeak((id *)(v30 + 8), &v70);
        *(void *)(v30 + 16) = v71;
        *(_DWORD *)(v30 + 24) = v72;
        v54 = (Record *)*((void *)&v73 + 1);
        uint64_t v55 = v74 + 32;
        *(void *)&long long v74 = v74 + 32;
        v56 = this->mRecords.__begin_;
        if (v14 == this->mRecords.__begin_)
        {
          v60 = (Record *)*((void *)&v73 + 1);
        }
        else
        {
          uint64_t v57 = 0;
          do
          {
            v58 = (char *)v54 + v57;
            *(void *)((char *)v54 + v57 - 32) = *(void *)((char *)v14 + v57 - 32);
            objc_moveWeak((id *)((char *)v54 + v57 - 24), (id *)((char *)v14 + v57 - 24));
            uint64_t v59 = *(void *)((char *)v14 + v57 - 16);
            *(void *)((char *)v14 + v57 - 16) = 0;
            *((void *)v58 - 2) = v59;
            *((_DWORD *)v58 - 2) = *(_DWORD *)((char *)v14 + v57 - 8);
            v57 -= 32;
          }
          while ((Record *)((char *)v14 + v57) != v56);
          v60 = (Record *)((char *)v54 + v57);
          uint64_t v55 = v74;
        }
        *((void *)&v73 + 1) = v60;
        v61 = this->mRecords.__end_;
        if (v14 != v61)
        {
          do
          {
            *(void *)uint64_t v55 = *(void *)v14;
            objc_moveWeak((id *)(v55 + 8), (id *)v14 + 1);
            uint64_t v62 = *((void *)v14 + 2);
            *((void *)v14 + 2) = 0;
            *(void *)(v55 + 16) = v62;
            *(_DWORD *)(v55 + 24) = *((_DWORD *)v14 + 6);
            v55 += 32;
            id v14 = (Record *)((char *)v14 + 32);
          }
          while (v14 != v61);
          v60 = (Record *)*((void *)&v73 + 1);
          id v14 = this->mRecords.__end_;
        }
        v63 = this->mRecords.__begin_;
        this->mRecords.__begin_ = v60;
        this->mRecords.__end_ = (Record *)v55;
        v64 = this->mRecords.__end_cap_.__value_;
        this->mRecords.__end_cap_.__value_ = (Record *)*((void *)&v74 + 1);
        *(void *)&long long v74 = v14;
        *((void *)&v74 + 1) = v64;
        *(void *)&long long v73 = v63;
        *((void *)&v73 + 1) = v63;
        std::__split_buffer<KVOAggregator::Record>::~__split_buffer((uint64_t)&v73);
        id v14 = v54;
        uint64_t v8 = v31;
      }
      else if (v14 == end)
      {
        *(void *)id v14 = v69;
        v28 = (id *)((char *)v15 + 32 * v18);
        objc_copyWeak(v28 + 1, &v70);
        v28[2] = v71;
        *((_DWORD *)v28 + 6) = v72;
        this->mRecords.__end_ = (Record *)((char *)v14 + 32);
      }
      else
      {
        uint64_t v67 = v17 >> 5;
        v68 = this->mRecords.__begin_;
        id v20 = (Record *)((char *)v14 + 32);
        v66 = v8;
        if ((unint64_t)end < 0x20)
        {
          uint64_t v22 = this->mRecords.__end_;
        }
        else
        {
          uint64_t v21 = (id *)((char *)end - 32);
          uint64_t v22 = this->mRecords.__end_;
          do
          {
            *(void *)uint64_t v22 = *v21;
            objc_moveWeak((id *)v22 + 1, v21 + 1);
            id v23 = v21[2];
            v21[2] = 0;
            *((void *)v22 + 2) = v23;
            *((_DWORD *)v22 + 6) = *((_DWORD *)v21 + 6);
            uint64_t v22 = (Record *)((char *)v22 + 32);
            v21 += 4;
          }
          while (v21 < (id *)end);
        }
        this->mRecords.__end_ = v22;
        if (end != v20)
        {
          uint64_t v34 = 0;
          uint64_t v35 = (end - v20) >> 5;
          uint64_t v36 = -32 * v35;
          v37 = (char *)v68 + 32 * v67 + 32 * v35;
          do
          {
            v38 = (char *)end + v34;
            *(void *)((char *)end + v34 - 32) = *(void *)&v37[v34 - 32];
            id WeakRetained = objc_loadWeakRetained((id *)((char *)end + v34 - 56));
            objc_storeWeak((id *)((char *)end + v34 - 24), WeakRetained);

            uint64_t v40 = *(void *)&v37[v34 - 16];
            *(void *)&v37[v34 - 16] = 0;
            v41 = *(void **)((char *)end + v34 - 16);
            *((void *)v38 - 2) = v40;

            *((_DWORD *)v38 - 2) = *(_DWORD *)&v37[v34 - 8];
            v34 -= 32;
          }
          while (v36 != v34);
        }
        v42 = (id *)&v69;
        if (v14 <= (Record *)&v69) {
          v42 = (id *)&(&v69)[4 * (this->mRecords.__end_ > (Record *)&v69)];
        }
        *(void *)id v14 = *v42;
        id v43 = objc_loadWeakRetained(v42 + 1);
        v44 = (id *)((char *)v68 + 32 * v67);
        objc_storeWeak(v44 + 1, v43);

        objc_storeStrong(v44 + 2, v42[2]);
        *((_DWORD *)v44 + 6) = *((_DWORD *)v42 + 6);
        uint64_t v8 = v66;
      }
    }
    else
    {
      id v14 = this->mRecords.__end_;
    }
  }

  objc_destroyWeak(&v70);
  return v14;
}

void sub_18FFB127C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19)
{
  std::__split_buffer<KVOAggregator::Record>::~__split_buffer((uint64_t)&a19);

  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<KVOAggregator::Record *,KVOAggregator::Record *,KVOAggregator::Record *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(void *)a3 = *(void *)v5;
      id WeakRetained = objc_loadWeakRetained((id *)(v5 + 8));
      objc_storeWeak((id *)(a3 + 8), WeakRetained);

      uint64_t v7 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      uint64_t v8 = *(void **)(a3 + 16);
      *(void *)(a3 + 16) = v7;

      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v5 + 24);
      a3 += 32;
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::__split_buffer<KVOAggregator::Record>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;

    objc_destroyWeak((id *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_18FFB147C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void KVOAggregator::addObserver(KVOAggregator *this, NSObject *a2, NSObject *a3, NSString *a4)
{
  unint64_t v11 = a2;
  uint64_t v7 = a3;
  uint64_t v8 = a4;
  uint64_t v9 = KVOAggregator::find(this, v7, v8, 1);
  int v10 = *((_DWORD *)v9 + 6);
  *((_DWORD *)v9 + 6) = v10 + 1;
  if (!v10) {
    [v7 addObserver:v11 forKeyPath:v8 options:0 context:this];
  }
}

void sub_18FFB154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB16B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v8 = v7;

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer((id *)va);
  _Unwind_Resume(a1);
}

void sub_18FFB1850(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},objc_object * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c147_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e20_v24__0__NSError_8_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    uint64_t v9 = _Block_copy(v4);
    id v11 = v8;
    id v12 = _Block_copy(v9);
    uint64_t v5 = _Block_copy(aBlock);

    id v6 = v11;
    id v11 = 0;
  }
  return v5;
}

void sub_18FFB19A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = a2;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = applesauce::dispatch::v1::source::operator*(v6);
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFB1A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c147_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c147_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFB1BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  uint64_t v13 = v12;

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer(&a9);
  _Unwind_Resume(a1);
}

void sub_18FFB1C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB1D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB1DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t maintainWakeMonitor(int a1)
{
  pthread_mutex_lock(&maintainWakeMonitor(BOOL)::lock);
  int v2 = maintainWakeMonitor(BOOL)::count;
  if (a1)
  {
    ++maintainWakeMonitor(BOOL)::count;
    if (!v2)
    {
      getpid();
      proc_disable_wakemon();
    }
  }
  else
  {
    --maintainWakeMonitor(BOOL)::count;
    if (v2 == 1)
    {
      getpid();
      proc_set_wakemon_defaults();
    }
  }
  return pthread_mutex_unlock(&maintainWakeMonitor(BOOL)::lock);
}

void sub_18FFB1F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB267C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, audioipc::eventlink_primitive *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, caulk::mach::details *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
  {
    if (v35 < 0) {
      operator delete(__p);
    }
    if (*(unsigned char *)(v36 + 200))
    {
      a28 = (void *)(v36 + 168);
      std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
    }
    audioipc::eventlink_primitive::~eventlink_primitive(a9);
    caulk::ipc::mapped_memory::reset(v33);
    if (*(unsigned char *)(v36 + 56)) {
      caulk::thread::~thread(v34);
    }
    v38 = *(std::__shared_weak_count **)(v36 + 32);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    BaseOpaqueObject::~BaseOpaqueObject((BaseOpaqueObject *)v36);
    MEMORY[0x192FC8940](v36, 0x10E3C4077E7D444);

    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-10875 userInfo:0];

    JUMPOUT(0x18FFB25D0);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = applesauce::dispatch::v1::source::operator*(v3);
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFB2964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE_(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFB2AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFB2BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer(&a14);
  _Unwind_Resume(a1);
}

void sub_18FFB324C()
{
}

void sub_18FFB34C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrormmmU8__strongP6NSDatabjEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8 = a6;
  id v11 = a2;
  uint64_t v9 = *(void **)(a1 + 32);
  int v10 = applesauce::dispatch::v1::source::operator*(v9);
  dispatch_source_cancel(v10);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18FFB35D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c151_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrormmmU8__strongP6NSDatabjEEEU13block_pointerFvDpT_ESC_iEUlS4_mmmS7_bjE_(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c151_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrormmmU8__strongP6NSDatabjEEEU13block_pointerFvDpT_ESC_iEUlS4_mmmS7_bjE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFB372C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id MarshalBusArray(AUAudioUnitBusArray *a1, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v15 = a1;
  id v17 = (id)objc_opt_new();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  obj = v15;
  uint64_t v3 = [(AUAudioUnitBusArray *)obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        id v8 = objc_alloc_init(AUAudioUnitBus_XPC);
        v8->_scope = a2;
        v8->_element = v4 + i;
        uint64_t v9 = [v7 format];
        format = v8->_format;
        v8->_format = (AVAudioFormat *)v9;

        -[AUAudioUnitBus_XPC setEnabled:](v8, "setEnabled:", [v7 isEnabled]);
        if (objc_opt_respondsToSelector())
        {
          id v11 = [v7 name];
          [(AUAudioUnitBus *)v8 setName:v11];
        }
        if (objc_opt_respondsToSelector())
        {
          uint64_t v12 = [v7 supportedChannelLayoutTags];
          supportedChannelLayoutTags = v8->_supportedChannelLayoutTags;
          v8->_supportedChannelLayoutTags = (NSArray *)v12;
        }
        [v17 addObject:v8];
      }
      uint64_t v3 = [(AUAudioUnitBusArray *)obj countByEnumeratingWithState:&v18 objects:v22 count:16];
      v4 += i;
    }
    while (v3);
  }

  return v17;
}

void sub_18FFB3988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_18FFB3C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFB3D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18FFB3DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbbU8__strongP7NSArrayS8_bbimmEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a6;
  id v11 = a5;
  id v14 = a2;
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = applesauce::dispatch::v1::source::operator*(v12);
  dispatch_source_cancel(v13);

  (*(void (**)(void, id, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v14, a3);
}

void sub_18FFB3EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c162_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbbU8__strongP7NSArrayS8_bbimmEEEU13block_pointerFvDpT_ESC_iEUlS4_bbS7_S7_bbimmE_(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v3 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c162_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbbU8__strongP7NSArrayS8_bbimmEEEU13block_pointerFvDpT_ESC_iEUlS4_bbS7_S7_bbimmE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18FFB4574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }

  _Unwind_Resume(a1);
}

caulk::log_category *caulk::log_category::log_category(caulk::log_category *this, const char *subsystem, const char *category)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  os_log_t v4 = os_log_create(subsystem, category);
  uint64_t v5 = *(void **)this;
  *(void *)this = v4;

  return this;
}

id native_instruments_window_workaround(AudioComponentDescription const&)::$_0::operator() const(objc_class *)::{lambda(objc_object *,objc_selector *,NSString *)#1}::__invoke(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v7 = v5;
  id v8 = v6;
  if ([v8 isEqualToString:@"canBecomeKeyWindow"])
  {
    Class = object_getClass(v7);
    IMP MethodImplementation = class_getMethodImplementation(Class, (SEL)native_instruments_window_workaround(AudioComponentDescription const&)::$_0::operator() const(objc_class *)::sel_canBecomeKeyWindow);
    uint64_t v11 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", ((uint64_t (*)(id, uint64_t))MethodImplementation)(v7, a2));
  }
  else
  {
    if ([v8 isEqualToString:@"canBecomeMainWindow"])
    {
      uint64_t v12 = object_getClass(v7);
      IMP v13 = class_getMethodImplementation(v12, (SEL)native_instruments_window_workaround(AudioComponentDescription const&)::$_0::operator() const(objc_class *)::sel_canBecomeMainWindow);
      objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", ((uint64_t (*)(id, uint64_t))v13)(v7, a2));
    }
    else
    {
      native_instruments_window_workaround(AudioComponentDescription const&)::$_0::operator() const(objc_class *)::imp_valueForKey(v7, a2, v8);
    uint64_t v11 = };
  }
  id v14 = (void *)v11;

  return v14;
}

void sub_18FFB47F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFB4950(_Unwind_Exception *a1)
{
  id v5 = v3;
  objc_destroyWeak(v5);

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_18FFB4A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  va_start(va, a6);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18FFB4BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  va_start(va, a6);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18FFB4D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AURemoteHost;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void KVOAggregator::removeAllObservations(KVOAggregator *this, NSObject *a2)
{
  id v8 = a2;
  std::vector<char>::pointer begin = this->mRecords.__begin_;
  std::vector<char>::pointer end = this->mRecords.__end_;
  if (this->mRecords.__begin_ != end)
  {
    id v5 = (char *)begin + 8;
    do
    {
      id WeakRetained = objc_loadWeakRetained((id *)v5);
      [WeakRetained removeObserver:v8 forKeyPath:*((void *)v5 + 1) context:this];

      id v7 = (Record *)(v5 + 24);
      v5 += 32;
    }
    while (v7 != end);
    std::vector<char>::pointer begin = this->mRecords.__begin_;
  }
  std::vector<KVOAggregator::Record>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, (uint64_t)begin);
}

void sub_18FFB4E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB4F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB503C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18FFB5270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ServiceProcessGlobals::ServiceProcessGlobals(ServiceProcessGlobals *this)
{
  uint64_t v1 = (char *)operator new(0xB0uLL);
  *((void *)v1 + 1) = 0;
  *((void *)v1 + 2) = 0;
  *(void *)uint64_t v1 = &unk_1EDFA29A0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *((void *)v1 + 4) = &unk_1EDF9E3B0;
  *((void *)v1 + 7) = v1 + 32;
  *((void *)v1 + 11) = 0;
  *((void *)v1 + 12) = 0;
  *((void *)v1 + 13) = 0;
  *((void *)v1 + 14) = 850045863;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *((void *)v1 + 21) = 0;
  ServiceProcessGlobals::instance(void)::global = (uint64_t)(v1 + 24);
  ServiceProcessGlobals::instance(void)::global = (uint64_t)v1;
}

uint64_t std::__shared_ptr_emplace<auoop::WorkgroupMirror>::__on_zero_shared(uint64_t a1)
{
  return caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::~guarded_lookup_hash_table(a1 + 32);
}

void std::__shared_ptr_emplace<auoop::WorkgroupMirror>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA29A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<auoop::WorkgroupMirror>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA29A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18FFB55F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFB5744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFB5C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FFB5DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class ___ZL24getAUViewControllerClassv_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    v7[2] = (void *)3221225472;
    _OWORD v7[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_1703;
    v7[4] = &__block_descriptor_40_e5_v8__0l;
    void v7[5] = v7;
    long long v8 = xmmword_1E5680E10;
    uint64_t v9 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreAudioKitLibrary()"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AUAudioUnit_Internal.h", 352, @"%s", v7[0]);

    goto LABEL_10;
  }
  if (v7[0]) {
    free(v7[0]);
  }
  Class result = objc_getClass("AUViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = [NSString stringWithUTF8String:"Class getAUViewControllerClass()_block_invoke"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"AUAudioUnit_Internal.h", 353, @"Unable to find class %s", "AUViewController");

LABEL_10:
    __break(1u);
  }
  getAUViewControllerClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18FFB5FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_1703()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void sub_18FFB6138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB632C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFB63B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFB6694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_18FFB68D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFB6B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TOpaqueObject<ExtAudioFile,OpaqueExtAudioFile *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<ExtAudioFile>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

uint64_t ExtAudioFile::PrintObject(const void **this, __sFILE *a2)
{
  return fprintf(a2, "<ExtAudioFile@%p -> AudioFile %p>", this, this[2]);
}

void ExtAudioFile::~ExtAudioFile(ExtAudioFile *this, uint64_t a2, void *a3)
{
  ExtAudioFile::~ExtAudioFile(this, a2, a3);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDF8D700;
  ExtAudioFile::Close(this, a2, a3);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 39, 0);
  MEMORY[0x192FC7C80]((char *)this + 272);
  MEMORY[0x192FC7C80]((char *)this + 264);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t ExtAudioFile::Close(ExtAudioFile *this, uint64_t a2, void *a3)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 8);
  if (!v3) {
    return 0;
  }
  if (*((void *)this + 41))
  {
    uint64_t v5 = CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance();
    std::mutex::lock((std::mutex *)v5);
    id v6 = *(ExtAudioFile ***)(v5 + 112);
    id v7 = *(ExtAudioFile ***)(v5 + 120);
    long long v8 = v6;
    if (v6 != v7)
    {
      while (*v8 != this)
      {
        if (++v8 == v7)
        {
          long long v8 = *(ExtAudioFile ***)(v5 + 120);
          break;
        }
      }
    }
    if (v8 != v7)
    {
      int64_t v9 = (char *)v7 - (char *)(v8 + 1);
      if (v7 != v8 + 1)
      {
        memmove(v8, v8 + 1, (char *)v7 - (char *)(v8 + 1));
        id v6 = *(ExtAudioFile ***)(v5 + 112);
      }
      id v7 = (ExtAudioFile **)((char *)v8 + v9);
      *(void *)(v5 + 120) = (char *)v8 + v9;
    }
    if (v6 == v7)
    {
      dispatch_time_t v10 = dispatch_time(0, 2000000000);
      global_queue = dispatch_get_global_queue(0, 0);
      *(void *)block = MEMORY[0x1E4F143A8];
      *(void *)&block[8] = 0x40000000;
      *(void *)&block[16] = ___ZN25ExtAudioFileAsyncWriteMgr12RemoveClientEP12ExtAudioFile_block_invoke;
      *(void *)&block[24] = &__block_descriptor_tmp_1743;
      *(void *)&block[32] = v5;
      dispatch_after(v10, global_queue, block);
    }
    std::mutex::unlock((std::mutex *)v5);
    ExtAudioFile::PerformAsyncWrites(this, 1);
    uint64_t v12 = *((void *)this + 41);
    if (v12)
    {
      std::unique_ptr<AT::RingBuffer::Impl>::reset[abi:ne180100]((uint64_t *)(v12 + 48));
      MEMORY[0x192FC8940](v12, 0x1020C4047CAF6D5);
    }
    *((void *)this + 41) = 0;
    IMP v13 = (void *)*((void *)this + 43);
    if (v13)
    {
      uint64_t v14 = v13[1];
      if (v14) {
        MEMORY[0x192FC8910](v14, 0x1000C8077774924);
      }
      operator delete(v13);
    }
    *((void *)this + 43) = 0;
    int v15 = (void *)*((void *)this + 44);
    if (v15)
    {
      uint64_t v16 = v15[1];
      if (v16) {
        MEMORY[0x192FC8910](v16, 0x1000C8077774924);
      }
      operator delete(v15);
    }
    *((void *)this + 44) = 0;
    int v3 = *((_DWORD *)this + 8);
  }
  if (v3 == 4 && *((void *)this + 19))
  {
    *((unsigned char *)this + 30) = 1;
    uint64_t v17 = ExtAudioFile::WritePacketsFromCallback(this, (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))this, a3);
    *((unsigned char *)this + 30) = 0;
    if (!*((_DWORD *)this + 50))
    {
      *(void *)isWritable = 0;
      if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x706E666Fu, &isWritable[1], isWritable))
      {
        if (isWritable[0])
        {
          isWritable[1] = 8;
          uint64_t v25 = *((void *)this + 19);
          int v36 = 1886546285;
          v38[0] = &isWritable[1];
          int v35 = &v31;
          inPropertyData.mNumberValidFrames = (SInt64)&v36;
          *(void *)&inPropertyData.uint64_t mPrimingFrames = v38;
          uint64_t v34 = &v35;
          *(void *)block = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
          *(void *)&block[8] = &inPropertyData;
          if (!with_resolved(v25, (uint64_t (**)(uint64_t, uint64_t))block)
            && !ExtAudioFile::GetFilePacketTable((AudioFileID *)this, &inPropertyData))
          {
            uint64_t mPrimingFrames = inPropertyData.mPrimingFrames;
            uint64_t mRemainderFrames = inPropertyData.mRemainderFrames;
            *(void *)&inPropertyData.uint64_t mPrimingFrames = v31;
            inPropertyData.mNumberValidFrames = inPropertyData.mNumberValidFrames
                                              + mPrimingFrames
                                              + mRemainderFrames
                                              - ((int)v31
                                               + (uint64_t)SHIDWORD(v31));
            OSStatus v28 = AudioFileSetProperty(*((AudioFileID *)this + 2), 0x706E666Fu, 0x10u, &inPropertyData);
            if (v28)
            {
              unsigned int v29 = v28;
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v38, v29);
                *(_DWORD *)block = 136315906;
                *(void *)&block[4] = "ExtAudioFile.cpp";
                *(_WORD *)&block[12] = 1024;
                *(_DWORD *)&block[14] = 1596;
                *(_WORD *)&block[18] = 2080;
                *(void *)&block[20] = v38;
                *(_WORD *)&block[28] = 2080;
                *(void *)&block[30] = "couldn't set packet table info on audio file";
                _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", block, 0x26u);
              }
              exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(exception, "couldn't set packet table info on audio file", v29);
            }
          }
        }
      }
    }
    ExtAudioFile::CopyEncoderCookieToFile(this);
  }
  else
  {
    uint64_t v17 = 0;
  }
  long long v18 = (OpaqueAudioConverter *)*((void *)this + 19);
  if (v18)
  {
    AudioConverterDispose(v18);
    *((void *)this + 19) = 0;
  }
  long long v19 = (OpaqueAudioFileID *)*((void *)this + 2);
  if (v19 && *((unsigned char *)this + 28))
  {
    AudioFileClose(v19);
    *((void *)this + 2) = 0;
  }
  if (!*((unsigned char *)this + 120))
  {
    uint64_t v20 = *((void *)this + 14);
    if (v20) {
      MEMORY[0x192FC8910](v20, 0x1000C8077774924);
    }
    *((void *)this + 14) = 0;
    *((_DWORD *)this + 27) = 0;
  }
  uint64_t v21 = *((void *)this + 16);
  if (v21) {
    MEMORY[0x192FC8910](v21, 0x1000C80451B5BE8);
  }
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  uint64_t v22 = *((void *)this + 18);
  if (v22) {
    MEMORY[0x192FC8910](v22, 0x1000C80451B5BE8);
  }
  *((void *)this + 18) = 0;
  uint64_t v23 = *((void *)this + 36);
  if (v23) {
    MEMORY[0x192FC8910](v23, 0x1000C8077774924);
  }
  *((void *)this + 36) = 0;
  *((_DWORD *)this + 8) = 0;
  return v17;
}

void sub_18FFB7134(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set(void **a1, void *a2)
{
  int v2 = *a1;
  if (*a1 != a2)
  {
    if (v2)
    {
      uint64_t v5 = v2[1];
      if (v5) {
        MEMORY[0x192FC8910](v5, 0x1000C8077774924);
      }
      operator delete(v2);
    }
    *a1 = a2;
  }
}

uint64_t CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::sOnce, memory_order_acquire) != -1)
  {
    int v3 = &v1;
    int v2 = &v3;
    std::__call_once(&CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::sOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::sInstance;
}

uint64_t ExtAudioFile::PerformAsyncWrites(ExtAudioFile *this, int a2)
{
  char v4 = 0;
  do
  {
    uint64_t v13 = 0;
    *(void *)&v15.__val_ = AT::RingBuffer::GetTimeBounds(*(AT::RingBuffer **)(*((void *)this + 41) + 48), &v14, &v13);
    CheckRingBufferResult(v15, -66570, "get ring buffer bounds on fetch");
    if (v13 - *((void *)this + 47) >= *((unsigned int *)this + 84)) {
      uint64_t v5 = *((unsigned int *)this + 84);
    }
    else {
      uint64_t v5 = v13 - *((void *)this + 47);
    }
    if (a2) {
      unsigned int v6 = 1;
    }
    else {
      unsigned int v6 = *((_DWORD *)this + 84);
    }
    if (v6 <= v5)
    {
      uint64_t v7 = *((void *)this + 43);
      uint64_t v8 = *((void *)this + 44);
      CADeprecated::CABufferList::VerifyNotTrashingOwnedBuffer(*(void *)(v8 + 8));
      memcpy((void *)(v8 + 24), (const void *)(v7 + 24), (16 * *(unsigned int *)(v7 + 24)) | 8);
      int64_t v9 = (AudioBufferList *)*((void *)this + 44);
      if ((a2 & 1) == 0) {
        LODWORD(v5) = ExtAudioFile::AlignIO(this, v5);
      }
      dispatch_time_t v10 = v9 + 1;
      *(void *)&v16.__val_ = AT::RingBuffer::Fetch(*((AT::RingBuffer **)this + 41), v10, v5, *((void *)this + 47));
      CheckRingBufferResult(v16, -66570, "fetch ring buffer");
      *((void *)this + 47) += v5;
      do
      {
        int v11 = ExtAudioFile::Write(this, v5, v10);
        if (!v11) {
          break;
        }
        usleep(0x3D090u);
      }
      while (v11 != -66559);
      char v4 = 1;
    }
  }
  while (v5 && (a2 & 1) != 0);
  return v4 & 1;
}

void sub_18FFB7380(void *a1, int a2)
{
  char v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v5 = v4[66];
    __cxa_end_catch();
    if (!v5) {
      goto LABEL_7;
    }
  }
  else
  {
    __cxa_end_catch();
    int v5 = -1;
  }
  if (!*(_DWORD *)(v2 + 360)) {
    *(_DWORD *)(v2 + 360) = v5;
  }
LABEL_7:
  JUMPOUT(0x18FFB735CLL);
}

uint64_t ExtAudioFile::WritePacketsFromCallback(ExtAudioFile *this, int (*inInputDataProcUserData)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *), void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v5 = (AudioBufferList *)((char *)this + 96);
  do
  {
    int v6 = *((_DWORD *)this + 22);
    UInt32 ioOutputDataPacketSize = *((_DWORD *)this + 23);
    *((_DWORD *)this + 27) = v6;
    uint64_t v7 = *((void *)this + 18);
    if (v7)
    {
      uint64_t v8 = (AudioStreamPacketDescription *)*((void *)this + 16);
      if (*((unsigned char *)this + 160))
      {
        uint64_t v9 = AudioConverterFillComplexBufferWithPacketDependencyInfo(*((void *)this + 19), (uint64_t)ExtAudioFile::WriteInputProc, (uint64_t)inInputDataProcUserData, (uint64_t)&ioOutputDataPacketSize, (uint64_t)v5, (uint64_t)v8, v7);
        int v10 = 1;
        if (!v9) {
          goto LABEL_10;
        }
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v8 = (AudioStreamPacketDescription *)*((void *)this + 16);
    }
    uint64_t v9 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 19), (AudioConverterComplexInputDataProc)ExtAudioFile::WriteInputProc, inInputDataProcUserData, &ioOutputDataPacketSize, v5, v8);
    int v10 = 0;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_8:
    if (v9 != 1752656245 && v9 != 1852139886)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v29, v9);
        *(_DWORD *)buf = 136315906;
        *(void *)&buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1694;
        __int16 v31 = 2080;
        unint64_t v32 = v29;
        __int16 v33 = 2080;
        uint64_t v34 = "convert audio packets (write)";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "convert audio packets (write)", v9);
    }
LABEL_10:
    if (!ioOutputDataPacketSize) {
      break;
    }
    int v11 = (const void *)*((void *)this + 14);
    if (*((unsigned char *)this + 408)) {
      uint64_t v12 = mach_absolute_time();
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (OpaqueAudioFileID *)*((void *)this + 2);
    uint64_t v14 = *((unsigned __int8 *)this + 29);
    uint64_t v15 = *((unsigned int *)this + 27);
    std::error_code v16 = (const AudioStreamPacketDescription *)*((void *)this + 16);
    if (v10) {
      unsigned int v17 = AudioFileWritePacketsWithDependencyInfo((uint64_t)v13, v14, v15, (uint64_t)v16, *((void *)this + 18), *((void *)this + 6), (uint64_t)&ioOutputDataPacketSize, (uint64_t)v11);
    }
    else {
      unsigned int v17 = AudioFileWritePackets(v13, v14, v15, v16, *((void *)this + 6), &ioOutputDataPacketSize, v11);
    }
    if (v17)
    {
      uint64_t v24 = *((void *)this + 19);
      *(void *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
      *(void *)&buf[8] = v29;
      unsigned int v25 = v17;
      with_resolved(v24, (uint64_t (**)(uint64_t, uint64_t))buf);
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v29, v25);
        *(_DWORD *)buf = 136315906;
        *(void *)&buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1725;
        __int16 v31 = 2080;
        unint64_t v32 = v29;
        __int16 v33 = 2080;
        uint64_t v34 = "write audio file";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      unint64_t v26 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v26, "write audio file", v25);
    }
    if (*((unsigned char *)this + 408)) {
      *((void *)this + 52) += mach_absolute_time() - v12;
    }
    uint64_t v18 = ioOutputDataPacketSize;
    *((void *)this + 6) += ioOutputDataPacketSize;
    int v19 = *((_DWORD *)this + 47);
    if (v19)
    {
      uint64_t v20 = *((void *)this + 7) + (v19 * v18);
    }
    else
    {
      if (!v18) {
        continue;
      }
      uint64_t v20 = *((void *)this + 7);
      uint64_t v21 = (unsigned int *)(*((void *)this + 16) + 8);
      do
      {
        unsigned int v22 = *v21;
        v21 += 4;
        v20 += v22;
        --v18;
      }
      while (v18);
    }
    *((void *)this + 7) = v20;
  }
  while (!v9);
  if (v9 == 1852139886) {
    return 0;
  }
  if (v9 == 1752656245)
  {
    if (*((unsigned char *)this + 320)) {
      return 4294900737;
    }
    else {
      return 4294900736;
    }
  }
  return v9;
}

void sub_18FFB77B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::GetFilePacketTable(AudioFileID *this, AudioFilePacketTableInfo *outPropertyData)
{
  UInt32 ioDataSize = 16;
  uint64_t result = AudioFileGetProperty(this[2], 0x706E666Fu, &ioDataSize, outPropertyData);
  if (!result)
  {
    if (!*((unsigned char *)this + 384)) {
      return 0;
    }
    SInt64 v5 = outPropertyData->mNumberValidFrames + outPropertyData->mPrimingFrames + outPropertyData->mRemainderFrames;
    SInt32 v6 = *((_DWORD *)this + 100);
    if (v6 == -2 || *((_DWORD *)this + 101) == -2 || this[49] == (AudioFileID)-2)
    {
      uint64_t v12 = 0;
      UInt32 ioDataSize = 8;
      uint64_t result = AudioFileGetProperty(this[2], 0x70636E74u, &ioDataSize, &v12);
      uint64_t v7 = *((unsigned int *)this + 47);
      if (!v7) {
        return 2003334207;
      }
      if (result) {
        return result;
      }
      uint64_t v8 = v12 * v7;
      BOOL v9 = v5 == v8;
      SInt32 v6 = *((_DWORD *)this + 100);
    }
    else
    {
      BOOL v9 = 0;
      uint64_t v8 = 0;
    }
    if (v6 != -1)
    {
      if (v6 == -2)
      {
        if (v9) {
          goto LABEL_16;
        }
        SInt32 v6 = 0;
      }
      outPropertyData->uint64_t mPrimingFrames = v6;
    }
LABEL_16:
    SInt32 v10 = *((_DWORD *)this + 101);
    if (v10 != -1)
    {
      if (v10 != -2)
      {
LABEL_20:
        outPropertyData->uint64_t mRemainderFrames = v10;
        goto LABEL_21;
      }
      if (!v9)
      {
        SInt32 v10 = 0;
        goto LABEL_20;
      }
    }
LABEL_21:
    SInt64 v11 = (SInt64)this[49];
    if (!v11)
    {
      SInt64 v11 = v5 - (outPropertyData->mPrimingFrames + (uint64_t)outPropertyData->mRemainderFrames);
LABEL_27:
      uint64_t result = 0;
      outPropertyData->mNumberValidFrames = v11;
      return result;
    }
    if (v11 != -1)
    {
      if (v11 == -2) {
        SInt64 v11 = v8 - (outPropertyData->mPrimingFrames + (uint64_t)outPropertyData->mRemainderFrames);
      }
      goto LABEL_27;
    }
    return 0;
  }
  return result;
}

uint64_t ExtAudioFile::CopyEncoderCookieToFile(ExtAudioFile *this)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 36);
  if (v2) {
    MEMORY[0x192FC8910](v2, 0x1000C8077774924);
  }
  unsigned int v5 = 0;
  *((void *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  uint64_t v3 = *((void *)this + 19);
  int v8 = 1668114275;
  uint64_t v6 = 0;
  *(void *)isWritable = &v5;
  v11[0] = &v8;
  v11[1] = isWritable;
  v11[2] = &v6;
  *(void *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>;
  SInt32 v10 = v11;
  uint64_t result = with_resolved(v3, (uint64_t (**)(uint64_t, uint64_t))buf);
  if (!result)
  {
    uint64_t result = v5;
    if (v5) {
      operator new[]();
    }
  }
  return result;
}

void sub_18FFB7C9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CAXException::CAXException(CAXException *this, const char *__s, int a3)
{
  *(void *)this = MEMORY[0x1E4FB9490] + 16;
  *((_DWORD *)this + 66) = a3;
  if (__s)
  {
    size_t v5 = strlen(__s);
    uint64_t v6 = (char *)this + 8;
    if (v5 < 0x100)
    {
      strlcpy(v6, __s, 0x100uLL);
    }
    else
    {
      long long v7 = *(_OWORD *)__s;
      long long v8 = *((_OWORD *)__s + 1);
      long long v9 = *((_OWORD *)__s + 3);
      *(_OWORD *)((char *)this + 40) = *((_OWORD *)__s + 2);
      *(_OWORD *)((char *)this + 56) = v9;
      *(_OWORD *)uint64_t v6 = v7;
      *(_OWORD *)((char *)this + 24) = v8;
      long long v10 = *((_OWORD *)__s + 4);
      long long v11 = *((_OWORD *)__s + 5);
      long long v12 = *((_OWORD *)__s + 7);
      *(_OWORD *)((char *)this + 104) = *((_OWORD *)__s + 6);
      *(_OWORD *)((char *)this + 120) = v12;
      *(_OWORD *)((char *)this + 72) = v10;
      *(_OWORD *)((char *)this + 88) = v11;
      long long v13 = *((_OWORD *)__s + 8);
      long long v14 = *((_OWORD *)__s + 9);
      long long v15 = *((_OWORD *)__s + 11);
      *(_OWORD *)((char *)this + 168) = *((_OWORD *)__s + 10);
      *(_OWORD *)((char *)this + 184) = v15;
      *(_OWORD *)((char *)this + 136) = v13;
      *(_OWORD *)((char *)this + 152) = v14;
      long long v16 = *((_OWORD *)__s + 12);
      long long v17 = *((_OWORD *)__s + 13);
      long long v18 = *((_OWORD *)__s + 14);
      *(_OWORD *)((char *)this + 247) = *(_OWORD *)(__s + 239);
      *(_OWORD *)((char *)this + 216) = v17;
      *(_OWORD *)((char *)this + 232) = v18;
      *(_OWORD *)((char *)this + 200) = v16;
      *((unsigned char *)this + 263) = 0;
    }
  }
  else
  {
    *((unsigned char *)this + 8) = 0;
  }
}

void sub_18FFB7D84(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::WriteInputProc(ExtAudioFile *this, OpaqueAudioConverter *a2, unsigned int *__dst, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a5 + 30))
  {
    *(_DWORD *)a2 = 0;
    uint64_t v8 = *__dst;
    if (v8)
    {
      long long v9 = __dst + 3;
      do
      {
        *long long v9 = 0;
        v9 += 4;
        --v8;
      }
      while (v8);
    }
    *((void *)__dst + 2) = 0;
    uint64_t result = 0;
    if (a4) {
      *(void *)&a4->mNumberBuffers = 0;
    }
  }
  else
  {
    int v12 = *((_DWORD *)a5 + 76);
    if (v12)
    {
      memcpy(__dst, &a5[39][1].mVariableFramesInPacket, (16 * a5[39][1].mVariableFramesInPacket) | 8);
      long long v13 = a5[39];
      int v14 = *((_DWORD *)a5 + 62);
      CADeprecated::CABufferList::VerifyNotTrashingOwnedBuffer(*(void *)&v13->mVariableFramesInPacket);
      UInt32 mVariableFramesInPacket = v13[1].mVariableFramesInPacket;
      if (mVariableFramesInPacket)
      {
        uint64_t v16 = (v14 * v12);
        p_UInt32 mVariableFramesInPacket = &v13[2].mVariableFramesInPacket;
        do
        {
          unsigned int v18 = *(p_mVariableFramesInPacket - 1);
          BOOL v19 = v18 >= v16;
          UInt32 v20 = v18 - v16;
          if (!v19)
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              int v22 = 136315394;
              uint64_t v23 = "CABufferList.h";
              __int16 v24 = 1024;
              int v25 = 184;
              _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(nBytes <= buf->mDataByteSize) != 0 is false]: ", (uint8_t *)&v22, 0x12u);
            }
            __break(1u);
          }
          *(void *)p_mVariableFramesInPacket += v16;
          *(p_mVariableFramesInPacket - 1) = v20;
          p_mVariableFramesInPacket += 4;
          --mVariableFramesInPacket;
        }
        while (mVariableFramesInPacket);
      }
      *(_DWORD *)a2 = v12;
      if (a4) {
        *(void *)&a4->mNumberBuffers = 0;
      }
      uint64_t result = 0;
      *((_DWORD *)a5 + 76) -= v12;
      *((unsigned char *)a5 + 320) = 1;
    }
    else
    {
      return 1852139886;
    }
  }
  return result;
}

uint64_t CADeprecated::CABufferList::VerifyNotTrashingOwnedBuffer(uint64_t this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      int v1 = 136315394;
      uint64_t v2 = "CABufferList.h";
      __int16 v3 = 1024;
      int v4 = 276;
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(mBufferMemory == __null) != 0 is false]: ", (uint8_t *)&v1, 0x12u);
    }
    __break(1u);
  }
  return this;
}

uint64_t AT::RingBuffer::GetTimeBounds(AT::RingBuffer *this, uint64_t *a2, uint64_t *a3)
{
  AT::RingBuffer::Impl::GetTimeBounds(v6, (uint64_t)this);
  uint64_t result = v6[0];
  if (v7)
  {
    *a2 = v6[0];
    *a3 = v6[1];
    std::system_category();
    return 0;
  }
  return result;
}

uint64_t CheckRingBufferResult(std::error_code a1, int a2, const char *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  std::error_code v9 = a1;
  if (a1.__val_)
  {
    std::error_code::message(&v8, &v9);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v8;
    }
    else {
      uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x80uLL, "%s ring buffer error: %s", a3, (const char *)v5);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
  return *(void *)&a1.__val_;
}

void sub_18FFB8134(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::AlignIO(ExtAudioFile *this, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned int *)this + 46);
  if (v3 && (int)v3 * (int)a2 >= (3 * *((_DWORD *)this + 22)) >> 2)
  {
    uint64_t v4 = *((void *)this + 5);
    uint64_t v6 = *((void *)this + 6);
    uint64_t v5 = (uint64_t *)((char *)this + 40);
    if (v4 < 0)
    {
      UInt32 ioDataSize = 8;
      OSStatus Property = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x646F6666u, &ioDataSize, v5);
      if (Property)
      {
        unsigned int v15 = Property;
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v18, v15);
          *(_DWORD *)buf = 136315906;
          UInt32 v20 = "ExtAudioFile.cpp";
          __int16 v21 = 1024;
          int v22 = 476;
          __int16 v23 = 2080;
          __int16 v24 = v18;
          __int16 v25 = 2080;
          uint64_t v26 = "couldn't get file's data offset";
          _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "couldn't get file's data offset", v15);
      }
      uint64_t v4 = *v5;
    }
    uint64_t v8 = v4 + (v6 + v2) * v3;
    if ((v8 & 0xFFF) != 0)
    {
      LODWORD(v9) = (7 * v2) >> 3;
      uint64_t v9 = v9 <= 1 ? 1 : v9;
      int64_t v10 = v4 + (v6 + v9) * v3;
      int64_t v11 = v8 & 0xFFFFFFFFFFFFF000;
      if (v11 > v10)
      {
        uint64_t v12 = -v4;
        while (1)
        {
          uint64_t v13 = (v12 + v11) / v3;
          if (v12 + v11 == v13 * v3) {
            break;
          }
          v11 -= 4096;
          if (v11 <= v10) {
            return v2;
          }
        }
        return (v13 - v6);
      }
    }
  }
  return v2;
}

void sub_18FFB8330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::Write(ExtAudioFile *this, UInt32 a2, const AudioBufferList *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  UInt32 ioNumPackets = a2;
  if (*((void *)this + 19) && (*((unsigned char *)this + 236) & 0x20) != 0) {
    int v6 = *((_DWORD *)this + 63);
  }
  else {
    int v6 = 1;
  }
  if (a3->mNumberBuffers != v6) {
    return 4294967246;
  }
  if (!*((void *)this + 14)) {
    ExtAudioFile::AllocateBuffers((uint64_t)this, 0);
  }
  int v7 = *((_DWORD *)this + 8);
  if (v7 != 4)
  {
    if (v7 != 3)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v18, 0xFFFEFBFB);
        *(_DWORD *)buf = 136315906;
        UInt32 v20 = "ExtAudioFile.cpp";
        __int16 v21 = 1024;
        int v22 = 1421;
        __int16 v23 = 2080;
        __int16 v24 = v18;
        __int16 v25 = 2080;
        uint64_t v26 = "can't write to this file";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "can't write to this file", -66565);
    }
    *((_DWORD *)this + 8) = 4;
  }
  *((unsigned char *)this + 320) = 0;
  if (*((void *)this + 19))
  {
    *((_DWORD *)this + 76) = a2;
    uint64_t v8 = *((void *)this + 39);
    CADeprecated::CABufferList::VerifyNotTrashingOwnedBuffer(*(void *)(v8 + 8));
    memcpy((void *)(v8 + 24), a3, (16 * a3->mNumberBuffers) | 8);
    return ExtAudioFile::WritePacketsFromCallback(this, (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))this, v9);
  }
  else
  {
    if (*((unsigned char *)this + 408)) {
      uint64_t v11 = mach_absolute_time();
    }
    else {
      uint64_t v11 = 0;
    }
    OSStatus v12 = AudioFileWritePackets(*((AudioFileID *)this + 2), *((unsigned char *)this + 29), a3->mBuffers[0].mDataByteSize, 0, *((void *)this + 6), &ioNumPackets, a3->mBuffers[0].mData);
    if (v12)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v18, v12);
        *(_DWORD *)buf = 136315906;
        UInt32 v20 = "ExtAudioFile.cpp";
        __int16 v21 = 1024;
        int v22 = 1431;
        __int16 v23 = 2080;
        __int16 v24 = v18;
        __int16 v25 = 2080;
        uint64_t v26 = "write audio file";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      uint64_t v16 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v16, "write audio file", v12);
    }
    if (*((unsigned char *)this + 408)) {
      *((void *)this + 52) += mach_absolute_time() - v11;
    }
    UInt32 v13 = ioNumPackets;
    *((void *)this + 6) += ioNumPackets;
    int v14 = *((_DWORD *)this + 47);
    uint64_t result = 0;
    if (v14) {
      *((void *)this + 7) += v14 * v13;
    }
  }
  return result;
}

void sub_18FFB86B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::AllocateBuffers(uint64_t this, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(this + 280);
  if (v2)
  {
    uint64_t v3 = this;
    if (*(_DWORD *)(this + 88) <= v2) {
      unsigned int v4 = *(_DWORD *)(this + 280);
    }
    else {
      unsigned int v4 = *(_DWORD *)(this + 88);
    }
    *(_DWORD *)(this + 88) = v4;
    *(_DWORD *)(this + 92) = v4 / v2;
    if (*(_DWORD *)(this + 108) != v4)
    {
      *(_DWORD *)(this + 96) = 1;
      *(_DWORD *)(this + 104) = *(_DWORD *)(this + 196);
      if (!*(unsigned char *)(this + 120))
      {
        uint64_t v5 = *(void *)(this + 112);
        if (v5) {
          MEMORY[0x192FC8910](v5, 0x1000C8077774924);
        }
        operator new[]();
      }
      *(_DWORD *)(this + 108) = v4;
    }
    if (*(_DWORD *)(this + 184))
    {
      int v6 = *(_DWORD *)(this + 136);
      if (*(_DWORD *)(this + 188))
      {
        int v7 = 0;
        int v8 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(this + 136);
    }
    int v8 = *(_DWORD *)(this + 92);
    int v7 = 1;
LABEL_20:
    if (v6 != v8)
    {
      uint64_t v10 = *(void *)(this + 128);
      if (v10) {
        MEMORY[0x192FC8910](v10, 0x1000C80451B5BE8);
      }
      *(void *)(v3 + 128) = 0;
      *(_DWORD *)(v3 + 136) = 0;
      this = *(void *)(v3 + 144);
      if (this) {
        this = MEMORY[0x192FC8910](this, 0x1000C80451B5BE8);
      }
      *(void *)(v3 + 144) = 0;
      if (v7) {
        operator new[]();
      }
    }
    return this;
  }
  if ((a2 & 1) == 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v11, 0xFFFEFBF9);
      *(_DWORD *)buf = 136315906;
      UInt32 v13 = "ExtAudioFile.cpp";
      __int16 v14 = 1024;
      int v15 = 956;
      __int16 v16 = 2080;
      long long v17 = v11;
      __int16 v18 = 2080;
      BOOL v19 = "file's maximum packet size is 0";
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "file's maximum packet size is 0", -66567);
  }
  return this;
}

void sub_18FFB8974(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ___ZN25ExtAudioFileAsyncWriteMgr12RemoveClientEP12ExtAudioFile_block_invoke(uint64_t a1)
{
  m = *(std::unique_lock<std::mutex>::mutex_type **)(a1 + 32);
  v2.__m_ = m;
  v2.__owns_ = 1;
  std::mutex::lock(m);
  if (*(void *)&m[1].__m_.__opaque[40] == *(void *)&m[1].__m_.__opaque[48])
  {
    std::unique_lock<std::mutex>::unlock(&v2);
    std::condition_variable::notify_one((std::condition_variable *)&m[1]);
    if (!v2.__owns_) {
      return;
    }
    m = v2.__m_;
  }
  std::mutex::unlock(m);
}

void sub_18FFB8A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (!this->__owns_)
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance(void)::{lambda(void)#1} &&>>();
  }
  std::mutex::unlock(this->__m_);
  this->__owns_ = 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance(void)::{lambda(void)#1} &&>>()
{
}

void ExtAudioFile::ExtAudioFile(ExtAudioFile *this)
{
  BaseOpaqueObject::BaseOpaqueObject(this);
  *(void *)uint64_t v2 = &unk_1EDF8D700;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 29) = 1;
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = -1;
  *(void *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 84) = 0;
  *(unsigned char *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 160) = 0;
  *(_OWORD *)(v2 + 164) = 0u;
  *(_OWORD *)(v2 + 180) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)(v2 + 264));
  CAAudioChannelLayout::CAAudioChannelLayout((ExtAudioFile *)((char *)this + 272));
  *((void *)this + 36) = 0;
  *((void *)this + 39) = 0;
  *((unsigned char *)this + 320) = 0;
  *((void *)this + 41) = 0;
  *((_DWORD *)this + 90) = 0;
  *((unsigned char *)this + 408) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 71) = 0;
  *((_DWORD *)this + 22) = 0x10000;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 384) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = -1;
}

double ExtAudioFile::GetExistingFileInfo(ExtAudioFile *this, int a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *(void *)outDataSize = 0;
  unsigned int v34 = -1;
  OSStatus PropertyInfo = AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x666C7374u, outDataSize, 0);
  UInt32 v5 = outDataSize[0];
  if (PropertyInfo) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = outDataSize[0] == 0;
  }
  if (v6)
  {
    UInt32 v8 = 0;
    char v7 = 0;
    goto LABEL_29;
  }
  UInt32 v8 = outDataSize[0] / 0x30;
  CADeprecated::CAAutoFree<AudioFormatListItem>::CAAutoFree(outPropertyData, outDataSize[0] / 0x30uLL, 0);
  if (AudioFileGetProperty(*((AudioFileID *)this + 2), 0x666C7374u, outDataSize, outPropertyData[0]))
  {
    char v7 = 0;
    goto LABEL_27;
  }
  if (a2)
  {
    if (v5 < 0x30)
    {
LABEL_17:
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v37, 0xFFFFFFCE);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 530;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v37;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = "couldn't get preferred format ID";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "couldn't get preferred format ID", -50);
    }
    uint64_t v9 = 0;
    if (v8 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v8;
    }
    uint64_t v11 = (int *)((char *)outPropertyData[0] + 8);
    while (1)
    {
      int v12 = *v11;
      v11 += 12;
      if (v12 == a2) {
        break;
      }
      if (v10 == ++v9) {
        goto LABEL_17;
      }
    }
    __int16 v14 = (char *)outPropertyData[0] + 48 * v9;
    long long v15 = *(_OWORD *)v14;
    long long v16 = *((_OWORD *)v14 + 1);
    *((void *)this + 25) = *((void *)v14 + 4);
    *(_OWORD *)((char *)this + 184) = v16;
    *(_OWORD *)((char *)this + 168) = v15;
    if (*((_DWORD *)v14 + 10) <= 0xFFFEFFFF) {
      CAAudioChannelLayout::SetWithTag((ExtAudioFile *)((char *)this + 264));
    }
    goto LABEL_26;
  }
  outDataSize[1] = 4;
  char v7 = 0;
  if (!AudioFormatGetProperty(0x6670666Cu, outDataSize[0], outPropertyData[0], &outDataSize[1], &v34)
    && (v34 & 0x80000000) == 0)
  {
    long long v17 = (char *)outPropertyData[0] + 48 * v34;
    uint64_t v18 = *((void *)v17 + 4);
    long long v19 = *((_OWORD *)v17 + 1);
    *(_OWORD *)((char *)this + 168) = *(_OWORD *)v17;
    *(_OWORD *)((char *)this + 184) = v19;
    *((void *)this + 25) = v18;
    if (*((_DWORD *)v17 + 10) <= 0xFFFEFFFF) {
      CAAudioChannelLayout::SetWithTag((ExtAudioFile *)((char *)this + 264));
    }
LABEL_26:
    char v7 = 1;
  }
LABEL_27:
  if (outPropertyData[0]) {
    free(outPropertyData[0]);
  }
LABEL_29:
  memset(buf, 0, sizeof(buf));
  outDataSize[1] = 40;
  OSStatus Property = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x64666D74u, &outDataSize[1], buf);
  if (Property)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, Property);
      *(_DWORD *)v37 = 136315906;
      v38 = "ExtAudioFile.cpp";
      __int16 v39 = 1024;
      int v40 = 548;
      __int16 v41 = 2080;
      v42 = outPropertyData;
      __int16 v43 = 2080;
      v44 = "get audio file's data format";
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v37, 0x26u);
    }
    OSStatus v28 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v28, "get audio file's data format", Property);
  }
  if (v7)
  {
    if (v34 != v8 - 1) {
      goto LABEL_41;
    }
  }
  else
  {
    long long v21 = *(_OWORD *)&buf[16];
    *(_OWORD *)((char *)this + 168) = *(_OWORD *)buf;
    *(_OWORD *)((char *)this + 184) = v21;
    *((void *)this + 25) = *(void *)&buf[32];
  }
  if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x636D6170u, &outDataSize[1], 0) && outDataSize[1])
  {
    int v22 = (unsigned int *)malloc_type_malloc(outDataSize[1], 0x7C51E058uLL);
    if (!v22)
    {
      unsigned int v29 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v30 = std::bad_alloc::bad_alloc(v29);
    }
    OSStatus v23 = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x636D6170u, &outDataSize[1], v22);
    if (v23)
    {
      free(v22);
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, v23);
        *(_DWORD *)v37 = 136315906;
        v38 = "ExtAudioFile.cpp";
        __int16 v39 = 1024;
        int v40 = 577;
        __int16 v41 = 2080;
        v42 = outPropertyData;
        __int16 v43 = 2080;
        v44 = "get audio file's channel layout";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v37, 0x26u);
      }
      __int16 v31 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v31, "get audio file's channel layout", v23);
    }
    if (outDataSize[1] <= 0xB)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, 0x2173697Au);
        *(_DWORD *)v37 = 136315906;
        v38 = "ExtAudioFile.cpp";
        __int16 v39 = 1024;
        int v40 = 568;
        __int16 v41 = 2080;
        v42 = outPropertyData;
        __int16 v43 = 2080;
        v44 = "channel layout's reported size is too small";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v37, 0x26u);
      }
      unint64_t v32 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v32, "channel layout's reported size is too small", 561211770);
    }
    int v24 = caulk::numeric::exceptional_mul<unsigned int>(v22[2], 0x14u);
    if (caulk::numeric::exceptional_add<unsigned int>(12, v24) > outDataSize[1])
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, 0x2173697Au);
        *(_DWORD *)v37 = 136315906;
        v38 = "ExtAudioFile.cpp";
        __int16 v39 = 1024;
        int v40 = 570;
        __int16 v41 = 2080;
        v42 = outPropertyData;
        __int16 v43 = 2080;
        v44 = "channel layout's reported size is larger than file chunk size";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v37, 0x26u);
      }
      __int16 v33 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v33, "channel layout's reported size is larger than file chunk size", 561211770);
    }
    CAAudioChannelLayout::operator=();
    free(v22);
  }
LABEL_41:
  double v25 = *((double *)this + 21);
  double result = 1.0;
  if (v25 != *(double *)buf && v25 != 0.0 && *(double *)buf != 0.0) {
    double result = v25 / *(double *)buf;
  }
  *((double *)this + 26) = result;
  if (*((_DWORD *)this + 8) == 1)
  {
    if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x6D676963u, &outDataSize[1], 0))
    {
      if (outDataSize[1]) {
        operator new[]();
      }
    }
    ExtAudioFile::InitFileMaxPacketSize((AudioFileID *)this);
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    return ExtAudioFile::UpdateInternals(this, v27);
  }
  return result;
}

void sub_18FFB9478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ExtAudioFile::InitFileMaxPacketSize(AudioFileID *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  UInt32 ioDataSize = 4;
  OSStatus Property = AudioFileGetProperty(this[2], 0x706B7562u, &ioDataSize, this + 35);
  if (Property)
  {
    if (*((_DWORD *)this + 44) != 1819304813)
    {
      int v5 = Property;
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v7, v5);
        *(_DWORD *)buf = 136315906;
        uint64_t v9 = "ExtAudioFile.cpp";
        __int16 v10 = 1024;
        int v11 = 463;
        __int16 v12 = 2080;
        UInt32 v13 = v7;
        __int16 v14 = 2080;
        long long v15 = "get audio file's maximum packet size";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "get audio file's maximum packet size", v5);
    }
    *((_DWORD *)this + 70) = *((_DWORD *)this + 48);
  }
  return ExtAudioFile::AllocateBuffers((uint64_t)this, 1);
}

void sub_18FFB9644(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ExtAudioFile::UpdateInternals(ExtAudioFile *this, double result)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 20) = 0;
  uint64_t v3 = *((void *)this + 19);
  if (v3)
  {
    int v4 = *((_DWORD *)this + 8);
    int v14 = 4;
    if (v4 == 1) {
      int v5 = 2020569203;
    }
    else {
      int v5 = 2020175987;
    }
    int v17 = v5;
    long long v15 = (char *)this + 284;
    uint64_t v16 = &v14;
    OSStatus v23 = &v17;
    int v24 = (int *)&v16;
    double v25 = (int **)&v15;
    *(void *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    *(void *)&uint8_t buf[8] = &v23;
    unsigned int v6 = with_resolved(v3, (uint64_t (**)(uint64_t, uint64_t))buf);
    if (v6)
    {
      unsigned int v12 = v6;
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v23, v12);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 912;
        __int16 v19 = 2080;
        uint64_t v20 = &v23;
        __int16 v21 = 2080;
        int v22 = "get audio converter's maximum packet size";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "get audio converter's maximum packet size", v12);
    }
    double v7 = *((double *)this + 28);
    double result = 1.0;
    if (v7 != 0.0)
    {
      double v8 = *((double *)this + 21);
      if (v8 != 0.0) {
        double result = v7 / v8;
      }
    }
    *((double *)this + 27) = result;
    if (!*((_DWORD *)this + 50)
      && !ExtAudioFile::GetFilePacketTable((AudioFileID *)this, (AudioFilePacketTableInfo *)buf))
    {
      double v9 = *((double *)this + 26);
      double v10 = *((double *)this + 27);
      *((_DWORD *)this + 20) = (int)((double)*(int *)&buf[8] * v9 + 0.5);
      double result = v9 * v10 * (double)*(uint64_t *)buf + 0.5;
      *((void *)this + 9) = (uint64_t)result;
    }
    uint64_t v11 = *((void *)this + 19);
    if (v11)
    {
      int v14 = *((unsigned __int8 *)this + 408);
      LODWORD(v15) = 610889331;
      int v17 = 4;
      uint64_t v16 = &v14;
      OSStatus v23 = (int *)&v15;
      int v24 = &v17;
      double v25 = &v16;
      *(void *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
      *(void *)&uint8_t buf[8] = &v23;
      with_resolved(v11, (uint64_t (**)(uint64_t, uint64_t))buf);
    }
  }
  else
  {
    *((_DWORD *)this + 71) = *((_DWORD *)this + 70);
    *((void *)this + 27) = 0x3FF0000000000000;
  }
  if (*((_DWORD *)this + 8) == 1 && *((_DWORD *)this + 58) == 1819304813)
  {
    *((void *)this + 7) = -1;
    *((void *)this + 8) = -1;
    return ExtAudioFile::Seek(this, 0);
  }
  return result;
}

void sub_18FFB9900(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ExtAudioFile::Seek(ExtAudioFile *this, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 7) != a2)
  {
    if (a2 < 0 || *((_DWORD *)this + 8) != 1 || *((_DWORD *)this + 58) != 1819304813)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, 0xFFFEFBF8);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1126;
        __int16 v24 = 2080;
        p_uint64_t outPropertyData = (uint8_t *)&outPropertyData;
        __int16 v26 = 2080;
        double v27 = "seek to frame in audio file";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "seek to frame in audio file", -66568);
    }
    unint64_t v4 = *((unsigned int *)this + 47);
    unint64_t v5 = a2;
    if (v4 != 1)
    {
      if (v4)
      {
        unint64_t v5 = a2 / v4;
      }
      else
      {
        uint64_t outPropertyData = a2;
        UInt32 ioDataSize = 24;
        OSStatus Property = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x6672706Bu, &ioDataSize, &outPropertyData);
        if (Property)
        {
          unsigned int v17 = Property;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v22, v17);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1083;
            __int16 v24 = 2080;
            p_uint64_t outPropertyData = v22;
            __int16 v26 = 2080;
            double v27 = "packet <-> frame translation failed for format with variable frames/packet";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          uint64_t v18 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v18, "packet <-> frame translation failed for format with variable frames/packet", v17);
        }
        unint64_t v5 = v29;
      }
    }
    *(void *)buf = v5;
    LODWORD(outPropertyData) = 16;
    OSStatus v7 = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x706B726Cu, (UInt32 *)&outPropertyData, buf);
    uint64_t v8 = *(void *)&buf[8];
    if (v7) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = (v5 - v8) & ~((uint64_t)(v5 - v8) >> 63);
    *((void *)this + 6) = v9;
    uint64_t v10 = *((unsigned int *)this + 47);
    if (v10 != 1)
    {
      if (v10)
      {
        v9 *= v10;
      }
      else
      {
        uint64_t v29 = v9;
        UInt32 ioDataSize = 24;
        OSStatus v11 = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x706B6672u, &ioDataSize, &outPropertyData);
        if (v11)
        {
          unsigned int v19 = v11;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v22, v19);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1051;
            __int16 v24 = 2080;
            p_uint64_t outPropertyData = v22;
            __int16 v26 = 2080;
            double v27 = "packet <-> frame translation unimplemented for format with variable frames/packet";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          uint64_t v20 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v20, "packet <-> frame translation unimplemented for format with variable frames/packet", v19);
        }
        uint64_t v9 = outPropertyData;
      }
    }
    uint64_t v12 = v9 - *((int *)this + 20);
    *((void *)this + 7) = v12;
    uint64_t v13 = *((void *)this + 19);
    if (v13)
    {
      *(void *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
      *(void *)&uint8_t buf[8] = &outPropertyData;
      with_resolved(v13, (uint64_t (**)(uint64_t, uint64_t))buf);
      uint64_t v12 = *((void *)this + 7);
    }
    double v14 = *((double *)this + 27);
    *((_DWORD *)this + 21) = ((double)(int)((a2 - v12) & ~(((int)a2 - (int)v12) >> 31)) * v14 + 0.5);
    double result = v14 * (double)a2 + 0.5;
    *((void *)this + 7) = a2;
    *((void *)this + 8) = (uint64_t)result;
  }
  return result;
}

void sub_18FFB9D44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ExtAudioFile::FileFormatChanged(ExtAudioFile *this, CFURLRef inFileRef, const AudioStreamBasicDescription *inFileType, AudioFileFlags inFlags)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)this + 8) & 0xFFFFFFFE) != 2)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&inFormat, 0xFFFEFBFB);
      LODWORD(buf.mSampleRate) = 136315906;
      *(void *)((char *)&buf.mSampleRate + 4) = "ExtAudioFile.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 304;
      HIWORD(buf.mBytesPerPacket) = 2080;
      *(void *)&buf.mFramesPerPacket = &inFormat;
      LOWORD(buf.mChannelsPerFrame) = 2080;
      *(void *)((char *)&buf.mChannelsPerFrame + 2) = "new file not prepared";
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "new file not prepared", -66565);
  }
  AudioFileTypeID v5 = inFileType;
  unsigned int size = 0;
  uint64_t v8 = (char *)this + 168;
  long long v9 = *(_OWORD *)((char *)this + 184);
  *(_OWORD *)&buf.mSampleRate = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)&buf.mBytesPerPacket = v9;
  *(void *)&buf.mBitsPerChannel = *((void *)this + 25);
  uint64_t v10 = *((void *)this + 19);
  if (v10)
  {
    unsigned int size = 40;
    double v11 = *(double *)v8;
    int v46 = 1633906532;
    v47[0] = &size;
    size_4 = v8;
    *(void *)uint64_t v48 = &v46;
    *(void *)&v48[8] = v47;
    *(void *)&v48[16] = &size_4;
    *(void *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    *(void *)&inFormat.mFormatID = v48;
    unsigned int v12 = with_resolved(v10, (uint64_t (**)(uint64_t, uint64_t))&inFormat);
    if (v12)
    {
      unsigned int v31 = v12;
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v48, v31);
        LODWORD(inFormat.mSampleRate) = 136315906;
        *(void *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
        LOWORD(inFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 320;
        HIWORD(inFormat.mBytesPerPacket) = 2080;
        *(void *)&inFormat.mFramesPerPacket = v48;
        LOWORD(inFormat.mChannelsPerFrame) = 2080;
        *(void *)((char *)&inFormat.mChannelsPerFrame + 2) = "get audio converter's output stream description";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
      }
      unint64_t v32 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v32, "get audio converter's output stream description", v31);
    }
    if (*(double *)v8 == 0.0) {
      *(double *)uint64_t v8 = v11;
    }
    uint64_t v13 = *((void *)this + 19);
    int v46 = 1868786720;
    v47[0] = &size;
    size_4 = 0;
    *(void *)uint64_t v48 = &v46;
    *(void *)&v48[8] = v47;
    *(void *)&v48[16] = &size_4;
    *(void *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>;
    *(void *)&inFormat.mFormatID = v48;
    if (!with_resolved(v13, (uint64_t (**)(uint64_t, uint64_t))&inFormat) && size)
    {
      double v14 = (char *)malloc_type_malloc(size, 0x7C51E058uLL);
      if (!v14)
      {
        uint64_t v35 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        int v36 = std::bad_alloc::bad_alloc(v35);
      }
      uint64_t v15 = *((void *)this + 19);
      int v46 = 1868786720;
      v47[0] = &size;
      size_4 = v14;
      *(void *)uint64_t v48 = &v46;
      *(void *)&v48[8] = v47;
      *(void *)&v48[16] = &size_4;
      *(void *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
      *(void *)&inFormat.mFormatID = v48;
      unsigned int v16 = with_resolved(v15, (uint64_t (**)(uint64_t, uint64_t))&inFormat);
      if (v16)
      {
        unsigned int v37 = v16;
        free(v14);
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v48, v37);
          LODWORD(inFormat.mSampleRate) = 136315906;
          *(void *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
          LOWORD(inFormat.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 333;
          HIWORD(inFormat.mBytesPerPacket) = 2080;
          *(void *)&inFormat.mFramesPerPacket = v48;
          LOWORD(inFormat.mChannelsPerFrame) = 2080;
          *(void *)((char *)&inFormat.mChannelsPerFrame + 2) = "couldn't get audio converter's output channel layout";
          _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
        }
        v38 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v38, "couldn't get audio converter's output channel layout", v37);
      }
      CAAudioChannelLayout::operator=();
      free(v14);
    }
  }
  if (*((_DWORD *)this + 8) == 2)
  {
    long long v17 = *((_OWORD *)v8 + 1);
    *(_OWORD *)&inFormat.mSampleRate = *(_OWORD *)v8;
    *(_OWORD *)&inFormat.mBytesPerPacket = v17;
    *(void *)&inFormat.mBitsPerChannel = *((void *)v8 + 4);
    if (inFormat.mSampleRate == 0.0) {
      inFormat.mSampleRate = 44100.0;
    }
    OSStatus v18 = AudioFileCreateWithURL(inFileRef, v5, &inFormat, inFlags, (AudioFileID *)this + 2);
    if (v18)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v47, v18);
        *(_DWORD *)uint64_t v48 = 136315906;
        *(void *)&v48[4] = "ExtAudioFile.cpp";
        *(_WORD *)&v48[12] = 1024;
        *(_DWORD *)&v48[14] = 351;
        *(_WORD *)&v48[18] = 2080;
        *(void *)&v48[20] = v47;
        __int16 v49 = 2080;
        v50 = "create audio file";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v48, 0x26u);
      }
      unsigned int v34 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v34, "create audio file", v18);
    }
    *((_DWORD *)this + 8) = 3;
    *((unsigned char *)this + 28) = 1;
  }
  else if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v8, &buf, inFileType))
  {
    double v19 = *(double *)v8;
    if (*(double *)v8 == 0.0)
    {
      double v19 = *((double *)this + 28);
      *((double *)this + 21) = v19;
    }
    if (v19 == 0.0)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v48, 0xFFFEFBFA);
        LODWORD(inFormat.mSampleRate) = 136315906;
        *(void *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
        LOWORD(inFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 361;
        HIWORD(inFormat.mBytesPerPacket) = 2080;
        *(void *)&inFormat.mFramesPerPacket = v48;
        LOWORD(inFormat.mChannelsPerFrame) = 2080;
        *(void *)((char *)&inFormat.mChannelsPerFrame + 2) = "file's sample rate is 0";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
      }
      int v40 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v40, "file's sample rate is 0", -66566);
    }
    OSStatus v20 = AudioFileSetProperty(*((AudioFileID *)this + 2), 0x64666D74u, 0x28u, v8);
    if (v20)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v48, v20);
        LODWORD(inFormat.mSampleRate) = 136315906;
        *(void *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
        LOWORD(inFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 362;
        HIWORD(inFormat.mBytesPerPacket) = 2080;
        *(void *)&inFormat.mFramesPerPacket = v48;
        LOWORD(inFormat.mChannelsPerFrame) = 2080;
        *(void *)((char *)&inFormat.mChannelsPerFrame + 2) = "couldn't update file's data format";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
      }
      __int16 v41 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v41, "couldn't update file's data format", v20);
    }
  }
  int inPropertyData = 1;
  AudioFileSetProperty(*((AudioFileID *)this + 2), 0x64737A75u, 4u, &inPropertyData);
  if (*((void *)this + 19))
  {
    ExtAudioFile::CopyEncoderCookieToFile(this);
    unsigned int size = 4;
    uint64_t v21 = *((void *)this + 19);
    int v46 = 2020569203;
    v47[0] = &size;
    size_4 = (char *)this + 280;
    *(void *)uint64_t v48 = &v46;
    *(void *)&v48[8] = v47;
    *(void *)&v48[16] = &size_4;
    *(void *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    *(void *)&inFormat.mFormatID = v48;
    unsigned int v22 = with_resolved(v21, (uint64_t (**)(uint64_t, uint64_t))&inFormat);
    if (v22)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v48, v22);
        LODWORD(inFormat.mSampleRate) = 136315906;
        *(void *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
        LOWORD(inFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 374;
        HIWORD(inFormat.mBytesPerPacket) = 2080;
        *(void *)&inFormat.mFramesPerPacket = v48;
        LOWORD(inFormat.mChannelsPerFrame) = 2080;
        *(void *)((char *)&inFormat.mChannelsPerFrame + 2) = "get audio converter's maximum output packet size";
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
      }
      __int16 v33 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v33, "get audio converter's maximum output packet size", v22);
    }
    if (*((_DWORD *)this + 44) == 1634754915)
    {
      int v42 = 75;
      uint64_t v23 = *((void *)this + 19);
      LODWORD(size_4) = 1634955366;
      int v46 = 4;
      v47[0] = &v42;
      *(void *)uint64_t v48 = &size_4;
      *(void *)&v48[8] = &v46;
      *(void *)&v48[16] = v47;
      *(void *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
      *(void *)&inFormat.mFormatID = v48;
      unsigned int v24 = with_resolved(v23, (uint64_t (**)(uint64_t, uint64_t))&inFormat);
      if (v24)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v48, v24);
          LODWORD(inFormat.mSampleRate) = 136315906;
          *(void *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
          LOWORD(inFormat.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 379;
          HIWORD(inFormat.mBytesPerPacket) = 2080;
          *(void *)&inFormat.mFramesPerPacket = v48;
          LOWORD(inFormat.mChannelsPerFrame) = 2080;
          *(void *)((char *)&inFormat.mChannelsPerFrame + 2) = "set default encoder ASP frequency";
          _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
        }
        __int16 v39 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v39, "set default encoder ASP frequency", v24);
      }
    }
    ExtAudioFile::AllocateBuffers((uint64_t)this, 1);
  }
  else
  {
    ExtAudioFile::InitFileMaxPacketSize((AudioFileID *)this);
  }
  uint64_t v27 = *((void *)this + 33);
  if (v27)
  {
    if (CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v27 + 16), v25))
    {
      LODWORD(inFormat.mSampleRate) = 0;
      if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x636D6170u, 0, (UInt32 *)&inFormat))
      {
        if (LODWORD(inFormat.mSampleRate))
        {
          uint64_t v28 = *((void *)this + 33);
          if (v28) {
            UInt32 v29 = *(_DWORD *)(v28 + 12);
          }
          else {
            UInt32 v29 = 0;
          }
          if (AudioFileSetProperty(*((AudioFileID *)this + 2), 0x636D6170u, v29, (const void *)(v28 + 16))
            && *MEMORY[0x1E4FB9448])
          {
            double v26 = ((double (*)(const char *))*MEMORY[0x1E4FB9448])("could not set the file's channel layout");
          }
        }
      }
    }
  }
  ExtAudioFile::UpdateInternals(this, v26);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
}

void sub_18FFBA84C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL CAStreamBasicDescription::IsEquivalent(CAStreamBasicDescription *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  return *(double *)this == a2->mSampleRate
      && *((_DWORD *)this + 2) == a2->mFormatID
      && *((_DWORD *)this + 4) == a2->mBytesPerPacket
      && *((_DWORD *)this + 5) == a2->mFramesPerPacket
      && *((_DWORD *)this + 7) == a2->mChannelsPerFrame
      && *((_DWORD *)this + 8) == a2->mBitsPerChannel
      && CA::Implementation::EquivalentFormatFlags(this, a2, 0, 0);
}

uint64_t ExtAudioFile::GetNumberFrames(ExtAudioFile *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  UInt32 ioDataSize = 16;
  if (!AudioFileGetProperty(*((AudioFileID *)this + 2), 0x706E666Fu, &ioDataSize, &outPropertyData)) {
    return (uint64_t)((double)outPropertyData * *((double *)this + 26) + 0.5);
  }
  uint64_t v2 = *((unsigned int *)this + 47);
  uint64_t v10 = 0;
  UInt32 v9 = 8;
  OSStatus Property = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x70636E74u, &v9, &v10);
  if (Property)
  {
    int v6 = Property;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v11, v6);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      uint64_t v13 = "ExtAudioFile.h";
      __int16 v14 = 1024;
      int v15 = 121;
      __int16 v16 = 2080;
      long long v17 = v11;
      __int16 v18 = 2080;
      double v19 = "get audio file's packet count";
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "get audio file's packet count", v6);
  }
  return v10 * v2 - *((int *)this + 20);
}

void sub_18FFBAA9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ExtAudioFile::SetClientFormat(ExtAudioFile *this, AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (a2->mFormatID != 1819304813)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, 0xFFFEFBFD);
      *(_DWORD *)inSpecifier = 136315906;
      *(void *)&inSpecifier[4] = "ExtAudioFile.cpp";
      *(_WORD *)&inSpecifier[12] = 1024;
      *(_DWORD *)&inSpecifier[14] = 635;
      __int16 v59 = 2080;
      p_uint64_t outPropertyData = &outPropertyData;
      __int16 v61 = 2080;
      uint64_t v62 = "non-PCM client format on audio file";
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "non-PCM client format on audio file", -66563);
  }
  int v6 = (char *)this + 224;
  if (*((_DWORD *)this + 58) && CAStreamBasicDescription::IsEquivalent((ExtAudioFile *)((char *)this + 224), a2, a3))
  {
    char v10 = 0;
  }
  else
  {
    double v11 = (OpaqueAudioConverter *)*((void *)this + 19);
    if (v11)
    {
      AudioConverterDispose(v11);
      *((void *)this + 19) = 0;
    }
    CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 39, 0);
    long long v9 = *(_OWORD *)&a2->mSampleRate;
    long long v12 = *(_OWORD *)&a2->mBytesPerPacket;
    *((void *)v6 + 4) = *(void *)&a2->mBitsPerChannel;
    *(_OWORD *)int v6 = v9;
    *((_OWORD *)v6 + 1) = v12;
    char v10 = 1;
  }
  uint64_t v13 = (char *)this + 272;
  if (a3)
  {
    int v15 = CAAudioChannelLayout::operator==() ^ 1;
    if (*(void *)&a3->mSampleRate
      && CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(void *)&a3->mSampleRate + 16), v14))
    {
      if (*(void *)&a3->mSampleRate) {
        int v16 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(void *)&a3->mSampleRate + 16), v14);
      }
      else {
        int v16 = 0;
      }
      if (v16 != *((_DWORD *)this + 63))
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, 0xFFFEFBFC);
          *(_DWORD *)inSpecifier = 136315906;
          *(void *)&inSpecifier[4] = "ExtAudioFile.cpp";
          *(_WORD *)&inSpecifier[12] = 1024;
          *(_DWORD *)&inSpecifier[14] = 650;
          __int16 v59 = 2080;
          p_uint64_t outPropertyData = &outPropertyData;
          __int16 v61 = 2080;
          uint64_t v62 = "inappropriate channel map";
          _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
        }
        int v46 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v46, "inappropriate channel map", -66564);
      }
      CAAudioChannelLayout::operator=();
    }
  }
  else
  {
    if (!*(void *)v13)
    {
      int v15 = 0;
LABEL_30:
      int v23 = 0;
      goto LABEL_31;
    }
    int v15 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(void *)v13 + 16), v7) != 0;
  }
  if (!*(void *)v13) {
    goto LABEL_30;
  }
  if (!CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(void *)v13 + 16), v14)) {
    goto LABEL_30;
  }
  uint64_t v18 = *((void *)this + 33);
  if (!v18 || !CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v18 + 16), v17)) {
    goto LABEL_30;
  }
  uint64_t v20 = *((void *)this + 33);
  uint64_t v19 = *((void *)this + 34);
  if (v19 == v20)
  {
    int v22 = 1;
  }
  else
  {
    LODWORD(outPropertyData) = 0;
    ioPropertyDataSize.mType = 4;
    *(void *)inSpecifier = v19 + 16;
    *(void *)&inSpecifier[8] = v20 + 16;
    if (AudioFormatGetProperty(0x63686571u, 0x10u, inSpecifier, &ioPropertyDataSize.mType, &outPropertyData)) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = outPropertyData == 0;
    }
    int v22 = !v21;
  }
  int v23 = v22 ^ 1;
LABEL_31:
  unsigned int v24 = (uint64_t *)((char *)this + 152);
  uint64_t v25 = *((void *)this + 19);
  if (v25) {
    char v26 = v10;
  }
  else {
    char v26 = 1;
  }
  if ((v26 & 1) != 0 || v15)
  {
    if (((!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)((char *)this + 168), v8) | v23) & 1) != 0|| *((unsigned char *)this + 161))
    {
      int v28 = *((_DWORD *)this + 8);
      if ((v28 - 2) >= 2)
      {
        if (v28 != 1)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, 0xFFFEFBFB);
            *(_DWORD *)inSpecifier = 136315906;
            *(void *)&inSpecifier[4] = "ExtAudioFile.cpp";
            *(_WORD *)&inSpecifier[12] = 1024;
            *(_DWORD *)&inSpecifier[14] = 743;
            __int16 v59 = 2080;
            p_uint64_t outPropertyData = &outPropertyData;
            __int16 v61 = 2080;
            uint64_t v62 = "audio file format not yet known";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
          }
          v47 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v47, "audio file format not yet known", -66565);
        }
        if (!v25)
        {
          OSType v33 = *((_DWORD *)this + 41);
          if (v33)
          {
            OSType v34 = *((_DWORD *)this + 44);
            ioPropertyDataSize.mType = 1633969507;
            ioPropertyDataSize.mSubType = v34;
            ioPropertyDataSize.mManufacturer = v33;
            OSStatus v35 = AudioConverterNewSpecific((const AudioStreamBasicDescription *)((char *)this + 168), (const AudioStreamBasicDescription *)v6, 1u, &ioPropertyDataSize, (AudioConverterRef *)this + 19);
            if (v35)
            {
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, v35);
                *(_DWORD *)inSpecifier = 136315906;
                *(void *)&inSpecifier[4] = "ExtAudioFile.cpp";
                *(_WORD *)&inSpecifier[12] = 1024;
                *(_DWORD *)&inSpecifier[14] = 691;
                __int16 v59 = 2080;
                p_uint64_t outPropertyData = &outPropertyData;
                __int16 v61 = 2080;
                uint64_t v62 = "create audio converter";
                _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
              }
              int v36 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v36, "create audio converter", v35);
            }
          }
          else
          {
            unsigned int v39 = AudioConverterNewWithOptions((char *)this + 168, v6, 0, (char *)this + 152);
            if (v39)
            {
              unsigned int v50 = v39;
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, v50);
                *(_DWORD *)inSpecifier = 136315906;
                *(void *)&inSpecifier[4] = "ExtAudioFile.cpp";
                *(_WORD *)&inSpecifier[12] = 1024;
                *(_DWORD *)&inSpecifier[14] = 693;
                __int16 v59 = 2080;
                p_uint64_t outPropertyData = &outPropertyData;
                __int16 v61 = 2080;
                uint64_t v62 = "create audio converter";
                _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
              }
              v51 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v51, "create audio converter", v50);
            }
          }
        }
        int v40 = (void *)*((void *)this + 36);
        if (v40) {
          ExtAudioFile::SetConverterProperty(this, 1684891491, *((_DWORD *)this + 74), v40, *((_DWORD *)this + 44) == 1819304813, v27);
        }
        ExtAudioFile::SetConverterChannelLayout(this, 0, (ExtAudioFile *)((char *)this + 264));
        ExtAudioFile::SetConverterChannelLayout(this, (const AudioChannelLayout *)1, (ExtAudioFile *)((char *)this + 272));
        v56 = 0;
        uint64_t v41 = *((void *)this + 19);
        int v57 = 1886546285;
        int v55 = 8;
        *(void *)&ioPropertyDataSize.mType = &v56;
        uint64_t outPropertyData = &v57;
        v64 = (AudioClassDescription *)&v55;
        p_AudioClassDescription ioPropertyDataSize = &ioPropertyDataSize;
        *(void *)inSpecifier = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        *(void *)&inSpecifier[8] = &outPropertyData;
        with_resolved(v41, (uint64_t (**)(uint64_t, uint64_t))inSpecifier);
      }
      else
      {
        if (!v25)
        {
          OSType v29 = *((_DWORD *)this + 41);
          if (v29)
          {
            OSType v30 = *((_DWORD *)this + 44);
            ioPropertyDataSize.mType = 1634037347;
            ioPropertyDataSize.mSubType = v30;
            ioPropertyDataSize.mManufacturer = v29;
            OSStatus v31 = AudioConverterNewSpecific((const AudioStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)((char *)this + 168), 1u, &ioPropertyDataSize, (AudioConverterRef *)this + 19);
            if (v31)
            {
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, v31);
                *(_DWORD *)inSpecifier = 136315906;
                *(void *)&inSpecifier[4] = "ExtAudioFile.cpp";
                *(_WORD *)&inSpecifier[12] = 1024;
                *(_DWORD *)&inSpecifier[14] = 726;
                __int16 v59 = 2080;
                p_uint64_t outPropertyData = &outPropertyData;
                __int16 v61 = 2080;
                uint64_t v62 = "create audio converter";
                _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
              }
              unint64_t v32 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v32, "create audio converter", v31);
            }
          }
          else
          {
            unsigned int v37 = AudioConverterNewWithOptions(v6, (char *)this + 168, 0, (char *)this + 152);
            if (v37)
            {
              unsigned int v48 = v37;
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, v48);
                *(_DWORD *)inSpecifier = 136315906;
                *(void *)&inSpecifier[4] = "ExtAudioFile.cpp";
                *(_WORD *)&inSpecifier[12] = 1024;
                *(_DWORD *)&inSpecifier[14] = 728;
                __int16 v59 = 2080;
                p_uint64_t outPropertyData = &outPropertyData;
                __int16 v61 = 2080;
                uint64_t v62 = "create audio converter";
                _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
              }
              __int16 v49 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v49, "create audio converter", v48);
            }
          }
        }
        v38 = CADeprecated::CABufferList::New((uint64_t)"", *((_DWORD *)this + 59), *((_DWORD *)this + 63));
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 39, v38);
        ExtAudioFile::SetConverterChannelLayout(this, 0, (ExtAudioFile *)((char *)this + 272));
        ExtAudioFile::SetConverterChannelLayout(this, (const AudioChannelLayout *)1, (ExtAudioFile *)((char *)this + 264));
        if (*((_DWORD *)this + 8) == 3) {
          ExtAudioFile::FileFormatChanged(this, 0, 0, 0);
        }
      }
      uint64_t v42 = *v24;
      if (*v24)
      {
        int v55 = 4;
        int v53 = 0;
        int v57 = 1885627760;
        *(void *)&ioPropertyDataSize.mType = &v55;
        v56 = &v53;
        uint64_t outPropertyData = &v57;
        v64 = &ioPropertyDataSize;
        p_AudioClassDescription ioPropertyDataSize = (AudioClassDescription *)&v56;
        *(void *)inSpecifier = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
        *(void *)&inSpecifier[8] = &outPropertyData;
        if (with_resolved(v42, (uint64_t (**)(uint64_t, uint64_t))inSpecifier)) {
          BOOL v43 = 1;
        }
        else {
          BOOL v43 = v53 == 0;
        }
        char v44 = !v43;
        *((unsigned char *)this + 160) = v44;
      }
    }
    *(double *)&long long v9 = ExtAudioFile::UpdateInternals(this, v27);
  }
  return *(double *)&v9;
}

void sub_18FFBB4C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ExtAudioFile::SetConverterProperty(ExtAudioFile *this, int a2, int a3, void *a4, char a5, double a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2 == 1633906803)
  {
    if (!*a4) {
      goto LABEL_7;
    }
    uint64_t v8 = *((void *)this + 19);
    int v14 = a3;
    int v15 = 1633906803;
    uint64_t v13 = a4;
    BOOL v21 = &v15;
    int v22 = &v14;
    int v23 = &v13;
    *(void *)AudioStreamBasicDescription buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    *(void *)&uint8_t buf[8] = &v21;
    unsigned int v9 = with_resolved(v8, (uint64_t (**)(uint64_t, uint64_t))buf);
  }
  else
  {
    uint64_t v10 = *((void *)this + 19);
    int v14 = a3;
    int v15 = a2;
    uint64_t v13 = a4;
    BOOL v21 = &v15;
    int v22 = &v14;
    int v23 = &v13;
    *(void *)AudioStreamBasicDescription buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    *(void *)&uint8_t buf[8] = &v21;
    unsigned int v9 = with_resolved(v10, (uint64_t (**)(uint64_t, uint64_t))buf);
  }
  if ((a5 & 1) == 0 && v9)
  {
    unsigned int v11 = v9;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v21, v11);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 769;
      __int16 v17 = 2080;
      uint64_t v18 = &v21;
      __int16 v19 = 2080;
      uint64_t v20 = "set audio converter property";
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "set audio converter property", v11);
  }
LABEL_7:
  ExtAudioFile::UpdateInternals(this, a6);
  if (*((_DWORD *)this + 8) == 3)
  {
    ExtAudioFile::FileFormatChanged(this, 0, 0, 0);
  }
}

void sub_18FFBB718(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ExtAudioFile::SetConverterChannelLayout(ExtAudioFile *this, const AudioChannelLayout *a2, const CAAudioChannelLayout *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(void *)a3)
  {
    int v4 = (int)a2;
    if (CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(void *)a3 + 16), a2))
    {
      uint64_t v7 = *(void *)a3;
      if (*(void *)a3)
      {
        BOOL v8 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v7 + 16), v6) < 3;
        uint64_t v7 = *(void *)a3;
      }
      else
      {
        BOOL v8 = 1;
      }
      uint64_t v9 = *((void *)this + 19);
      if (v4)
      {
        if (v7) {
          int v10 = *(_DWORD *)(v7 + 12);
        }
        else {
          int v10 = 0;
        }
        int v19 = v10;
        int v20 = 1868786720;
        uint64_t v18 = v7 + 16;
        char v26 = &v20;
        double v27 = &v19;
        int v28 = &v18;
        *(void *)AudioStreamBasicDescription buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        *(void *)&uint8_t buf[8] = &v26;
        unsigned int v12 = with_resolved(v9, (uint64_t (**)(uint64_t, uint64_t))buf);
        if (!v8 && v12 && v12 != 1869627199)
        {
          unsigned int v13 = v12;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&v26, v13);
            *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 795;
            __int16 v22 = 2080;
            int v23 = &v26;
            __int16 v24 = 2080;
            uint64_t v25 = "couldn't set converter's output channel layout";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "couldn't set converter's output channel layout", v13);
        }
      }
      else
      {
        if (v7) {
          int v11 = *(_DWORD *)(v7 + 12);
        }
        else {
          int v11 = 0;
        }
        int v19 = v11;
        int v20 = 1768123424;
        uint64_t v18 = v7 + 16;
        char v26 = &v20;
        double v27 = &v19;
        int v28 = &v18;
        *(void *)AudioStreamBasicDescription buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        *(void *)&uint8_t buf[8] = &v26;
        unsigned int v15 = with_resolved(v9, (uint64_t (**)(uint64_t, uint64_t))buf);
        if (!v8 && v15 && v15 != 1869627199)
        {
          unsigned int v16 = v15;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&v26, v16);
            *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 799;
            __int16 v22 = 2080;
            int v23 = &v26;
            __int16 v24 = 2080;
            uint64_t v25 = "couldn't set converter's input channel layout";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          __int16 v17 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v17, "couldn't set converter's input channel layout", v16);
        }
      }
      if (*((_DWORD *)this + 8) == 3)
      {
        ExtAudioFile::FileFormatChanged(this, 0, 0, 0);
      }
    }
  }
}

void sub_18FFBBAA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::GetConverterConfig(ExtAudioFile *this)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  int v5 = 8;
  int v9 = 1633906803;
  BOOL v8 = &v5;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  v15[0] = &v9;
  v15[1] = &v8;
  v15[2] = &v7;
  *(void *)AudioStreamBasicDescription buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
  *(void *)&uint8_t buf[8] = v15;
  int v1 = with_resolved((int)this, (uint64_t (**)(uint64_t, uint64_t))buf);
  if (v1)
  {
    int v4 = v1;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, v4);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      *(void *)&uint8_t buf[4] = "ExtAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 812;
      __int16 v11 = 2080;
      unsigned int v12 = v15;
      __int16 v13 = 2080;
      int v14 = "get converter property settings";
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "get converter property settings", v4);
  }
  return v6;
}

void sub_18FFBBC38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::ReadInputProc(ExtAudioFile *this, OpaqueAudioConverter *a2, AudioStreamPacketDescription **a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    int v10 = a5 + 12;
    unsigned int v11 = *((_DWORD *)a5 + 23);
  }
  else
  {
    unsigned int v12 = *((_DWORD *)a5 + 70);
    if (!v12) {
      return 4294900729;
    }
    unsigned int v11 = *((_DWORD *)a3 + 3) / v12;
    if (v11 >= *(_DWORD *)a2) {
      unsigned int v11 = *(_DWORD *)a2;
    }
    int v10 = a3;
  }
  if (a5[16] && v11 >= *((_DWORD *)a5 + 34)) {
    unsigned int v11 = *((_DWORD *)a5 + 34);
  }
  unsigned int v13 = *((_DWORD *)a5 + 75);
  if (v11 >= v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v11;
  }
  UInt32 ioNumPackets = ExtAudioFile::AlignIO((ExtAudioFile *)a5, v14);
  if (!ioNumPackets) {
    goto LABEL_28;
  }
  UInt32 ioNumBytes = *((_DWORD *)v10 + 3);
  if (*((unsigned char *)a5 + 408)) {
    uint64_t v15 = mach_absolute_time();
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = AudioFileReadPacketData((AudioFileID)a5[2], *((unsigned char *)a5 + 29), &ioNumBytes, a5[16], (SInt64)a5[6], &ioNumPackets, v10[2]);
  if (*((unsigned char *)a5 + 408)) {
    a5[52] = (AudioStreamPacketDescription *)((char *)a5[52] + mach_absolute_time() - v15);
  }
  if (v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      double v27 = "ExtAudioFile.cpp";
      __int16 v28 = 1024;
      int v29 = 1361;
      __int16 v30 = 1024;
      int v31 = v16;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Error %d from AudioFileReadPackets!!!\n", buf, 0x18u);
    }
    return v16;
  }
  uint64_t v17 = ioNumPackets;
  if (!ioNumPackets)
  {
LABEL_28:
    uint64_t v16 = 0;
    *(_DWORD *)a2 = 0;
    *((_DWORD *)a3 + 3) = 0;
    return v16;
  }
  if (a4) {
    *(void *)&a4->mNumberBuffers = a5[16];
  }
  *((_DWORD *)a3 + 3) = ioNumBytes;
  a3[2] = v10[2];
  a5[6] = (AudioStreamPacketDescription *)((char *)a5[6] + v17);
  if (*((_DWORD *)a5 + 61) != 1)
  {
    int v18 = *((_DWORD *)a5 + 47);
    if (v18)
    {
      int v19 = (AudioStreamPacketDescription *)((char *)a5[7] + (v18 * v17));
    }
    else
    {
      int v19 = a5[7];
      p_UInt32 mVariableFramesInPacket = &a5[16]->mVariableFramesInPacket;
      uint64_t v21 = v17;
      do
      {
        UInt32 v22 = *p_mVariableFramesInPacket;
        p_mVariableFramesInPacket += 4;
        int v19 = (AudioStreamPacketDescription *)((char *)v19 + v22);
        --v21;
      }
      while (v21);
    }
    a5[7] = v19;
  }
  uint64_t v16 = 0;
  *(_DWORD *)a2 = v17;
  return v16;
}

caulk::thread *std::unique_ptr<caulk::thread>::reset[abi:ne180100](caulk::thread **a1, caulk::thread *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    caulk::thread::~thread(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_18FFBBF58(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 24) && *(char *)(result + 23) < 0) {
      operator delete(*(void **)result);
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t caulk::thread_proxy<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>(caulk::thread::attributes *a1)
{
  caulk::thread::attributes::apply_to_this_thread(a1);
  uint64_t v2 = *((void *)a1 + 8);
  do
  {
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v2;
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)v2);
    std::condition_variable::wait((std::condition_variable *)(v2 + 64), &v8);
    long long v3 = *(ExtAudioFile ***)(v2 + 112);
    int v4 = *(ExtAudioFile ***)(v2 + 120);
    int v5 = v4;
    if (v3 == v4)
    {
      std::unique_ptr<caulk::thread>::reset[abi:ne180100]((caulk::thread **)(v2 + 136), 0);
    }
    else
    {
      do
      {
        if (*(ExtAudioFile ***)(v2 + 112) == v5) {
          break;
        }
        int v6 = 0;
        int v5 = *(ExtAudioFile ***)(v2 + 112);
        do
          v6 |= ExtAudioFile::PerformAsyncWrites(*v5++, 0);
        while (v5 != *(ExtAudioFile ***)(v2 + 120));
      }
      while ((v6 & 1) != 0);
    }
    if (v8.__owns_) {
      std::mutex::unlock(v8.__m_);
    }
  }
  while (v3 != v4);
  if (a1) {
    std::default_delete<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100]((uint64_t)a1);
  }
  return 0;
}

void sub_18FFBC0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (v10) {
    std::default_delete<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

CFMutableDictionaryRef ExtAudioFile::GetInstrumentation(ExtAudioFile *this)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v8 = 256;
  CACFDictionary::AddUInt32((CACFDictionary *)&Mutable, @"ms in I/O");
  uint64_t v2 = *((void *)this + 19);
  if (v2)
  {
    CFTypeRef cf = 0;
    int v5 = 8;
    int v13 = 610889316;
    unsigned int v12 = &v5;
    p_CFTypeRef cf = &cf;
    v9[0] = &v13;
    v9[1] = &v12;
    v9[2] = &p_cf;
    v10[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    v10[1] = (uint64_t (*)(uint64_t, uint64_t))v9;
    with_resolved(v2, v10);
    if (cf)
    {
      CACFDictionary::AddCFType((CACFDictionary *)&Mutable, @"converter", cf);
      CFRelease(cf);
    }
  }
  CFMutableDictionaryRef v3 = Mutable;
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v3;
}

void sub_18FFBC224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

CFStringRef copyDescriptionC(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<%p>", a1);
}

const void *retainC(const __CFAllocator *a1, const void *a2)
{
  return a2;
}

uint64_t AudioFileStreamObject::HandleDiscontinuity(AudioFileStreamObject *this)
{
  return 1;
}

uint64_t AudioFileStreamObject::RestrictsRandomAccess(AudioFileStreamObject *this)
{
  return 0;
}

uint64_t WAVEAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 236);
  if (v4 > 110)
  {
    switch(v4)
    {
      case 111:
        unsigned int v18 = *(_DWORD *)(a1 + 256);
        int v19 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_24;
      case 153:
        unsigned int v20 = *(_DWORD *)(a1 + 256);
        uint64_t v21 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_52;
      case 276:
        unsigned int v8 = *(_DWORD *)(a1 + 256);
        int v9 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_60;
    }
    goto LABEL_21;
  }
  if (v4 == -1) {
    return 0;
  }
  if (!v4)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v79 = 1;
    if (!*(unsigned char *)(v6 + 104))
    {
      *(unsigned char *)(v6 + 104) = 1;
      unsigned int v11 = *(void (**)(void, void, uint64_t, unsigned int *))(v6 + 24);
      if (v11)
      {
        v11(*(void *)(v6 + 40), *(unsigned int *)(v6 + 8), 1717988724, &v79);
        uint64_t v6 = *(void *)(a1 + 8);
      }
    }
    *(void *)(a1 + 296) = *(void *)(v6 + 96);
    unsigned int v5 = 12;
    *(_DWORD *)(a1 + 256) = 12;
    uint64_t v7 = (unsigned __int8 *)(a1 + 332);
    *(void *)(a1 + 264) = a1 + 332;
    goto LABEL_15;
  }
  if (v4 != 92)
  {
LABEL_21:
    uint64_t result = 0;
    goto LABEL_72;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 256);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 **)(a1 + 264);
LABEL_15:
  unsigned int v79 = v5;
  StreamBuffer::Copy((void *)(v6 + 72), &v79, v7);
  unsigned int v12 = v79;
  int v13 = *(_DWORD *)(a1 + 256);
  *(void *)(a1 + 264) += v79;
  int v14 = v13 - v12;
  *(_DWORD *)(a1 + 256) = v14;
  if (v14)
  {
    uint64_t result = 0;
    int v22 = 92;
    goto LABEL_76;
  }
  unsigned int v15 = *(_DWORD *)(a1 + 332);
  *(_DWORD *)(a1 + 332) = bswap32(v15);
  unsigned int v16 = *(_DWORD *)(a1 + 340);
  *(_DWORD *)(a1 + 340) = bswap32(v16);
  if (v15 != 1179011410 || v16 != 1163280727)
  {
LABEL_71:
    uint64_t result = 1685348671;
    *(unsigned char *)(a1 + 177) = 1;
    goto LABEL_72;
  }
  uint64_t v17 = *(void *)(a1 + 296);
  *(void *)(a1 + 344) = v17 + *(unsigned int *)(a1 + 336) + 8;
  *(_DWORD *)(a1 + 16) = 1463899717;
  *(void *)(a1 + 296) = v17 + 12;
  while (1)
  {
    unsigned int v18 = 8;
    *(_DWORD *)(a1 + 256) = 8;
    int v19 = (unsigned __int8 *)(a1 + 352);
    *(void *)(a1 + 264) = a1 + 352;
LABEL_24:
    unsigned int v79 = v18;
    StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v79, v19);
    unsigned int v23 = v79;
    int v24 = *(_DWORD *)(a1 + 256);
    *(void *)(a1 + 264) += v79;
    int v25 = v24 - v23;
    *(_DWORD *)(a1 + 256) = v25;
    if (v25)
    {
      uint64_t result = 0;
      int v22 = 111;
      goto LABEL_76;
    }
    unsigned int v26 = bswap32(*(_DWORD *)(a1 + 352));
    *(_DWORD *)(a1 + 352) = v26;
    uint64_t v27 = *(unsigned int *)(a1 + 356);
    unsigned int v28 = *(_DWORD *)(a1 + 356);
    uint64_t v29 = *(void *)(a1 + 296);
    *(void *)(a1 + 296) = v29 + 8;
    if (v26 != 1718449184) {
      break;
    }
    if (v28 > 0xFFFFFFF7 || (unint64_t)(v29 + v27 + 16) > *(void *)(a1 + 344) || v27 <= 0xF) {
      goto LABEL_71;
    }
    unint64_t v43 = (int)v27 + 8;
    if (v43 <= 0x30) {
      LODWORD(v43) = 48;
    }
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 360), v43, 1);
    char v44 = *(void **)(a1 + 360);
    if (!v44)
    {
      uint64_t result = 1685348671;
      *(unsigned char *)(a1 + 177) = 1;
      goto LABEL_72;
    }
    *(void *)(a1 + 368) = v44;
    void *v44 = *(void *)(a1 + 352);
    unsigned int v20 = *(_DWORD *)(a1 + 356);
    *(_DWORD *)(a1 + 256) = v20;
    uint64_t v21 = (unsigned __int8 *)(*(void *)(a1 + 360) + 8);
    *(void *)(a1 + 264) = v21;
LABEL_52:
    unsigned int v79 = v20;
    unint64_t v45 = (uint64_t *)(a1 + 8);
    StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v79, v21);
    unsigned int v46 = v79;
    int v47 = *(_DWORD *)(a1 + 256);
    *(void *)(a1 + 264) += v79;
    int v48 = v47 - v46;
    *(_DWORD *)(a1 + 256) = v48;
    if (v48)
    {
      uint64_t result = 0;
      int v22 = 153;
      goto LABEL_76;
    }
    uint64_t v49 = *(void *)(a1 + 368);
    int v50 = *(unsigned __int16 *)(v49 + 8);
    if (v50 == 2) {
      goto LABEL_63;
    }
    if (v50 == 17)
    {
      if (*(int *)(v49 + 4) < 15) {
        goto LABEL_64;
      }
LABEL_63:
      *(unsigned char *)(a1 + 380) = 1;
      goto LABEL_64;
    }
    if (v50 == 65534 && *(_DWORD *)(v49 + 4) >= 0x18u && *(unsigned __int16 *)(v49 + 24) >= 6u) {
      *(_DWORD *)(a1 + 376) = *(_DWORD *)(v49 + 28);
    }
LABEL_64:
    if (*(_DWORD *)(v49 + 12) >= 0xFFFF0000) {
      *(_DWORD *)(v49 + 12) = (unsigned __int16)*(_DWORD *)(v49 + 12);
    }
    if (*(unsigned char *)(a1 + 380))
    {
      size_t v54 = *(unsigned int *)(a1 + 356);
      size_t v55 = (v54 + 28);
      *(_DWORD *)(a1 + 128) = v55;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v55, 0);
      uint64_t v56 = *(void *)(a1 + 120);
      *(void *)uint64_t v56 = 0x616D72660C000000;
      unsigned int v57 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 368) + 8) | 0x6D730000);
      *(_DWORD *)(v56 + 8) = v57;
      *(_DWORD *)(v56 + 12) = bswap32(v54 + 8);
      *(_DWORD *)(v56 + 16) = v57;
      memcpy((void *)(v56 + 20), (const void *)(*(void *)(a1 + 360) + 8), v54);
      *(void *)(v56 + (*(_DWORD *)(a1 + 128) - 8)) = 0x8000000;
LABEL_68:
      uint64_t v58 = *v45;
      unsigned int v79 = 1;
      *(unsigned char *)(v58 + 108) = 1;
      __int16 v59 = *(void (**)(void, void, uint64_t, unsigned int *))(v58 + 24);
      if (v59) {
        v59(*(void *)(v58 + 40), *(unsigned int *)(v58 + 8), 1835493731, &v79);
      }
    }
LABEL_70:
    uint64_t v60 = *(void *)(a1 + 296) + *(unsigned int *)(a1 + 356);
    *(void *)(a1 + 296) = v60;
    *(void *)(*(void *)(a1 + 8) + 96) = v60;
  }
  if (v26 == 2002876005)
  {
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), (int)v27, 0);
    unsigned int v8 = *(_DWORD *)(a1 + 356);
    *(_DWORD *)(a1 + 256) = v8;
    int v9 = *(unsigned __int8 **)(a1 + 120);
    *(void *)(a1 + 264) = v9;
LABEL_60:
    unsigned int v79 = v8;
    unint64_t v45 = (uint64_t *)(a1 + 8);
    StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v79, v9);
    unsigned int v51 = v79;
    int v52 = *(_DWORD *)(a1 + 256);
    *(void *)(a1 + 264) += v79;
    int v53 = v52 - v51;
    *(_DWORD *)(a1 + 256) = v53;
    if (v53)
    {
      uint64_t result = 0;
      int v22 = 276;
      goto LABEL_76;
    }
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a1 + 356);
    goto LABEL_68;
  }
  if (v26 != 1684108385) {
    goto LABEL_70;
  }
  if (!*(void *)(a1 + 368)) {
    goto LABEL_71;
  }
  *(void *)(a1 + 104) = v29 + 8;
  (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
  FillDescriptionFromWAVEFormat(a1 + 24, *(_DWORD *)(a1 + 128), *(void **)(a1 + 120), *(void *)(a1 + 368), 0);
  if (*(_DWORD *)(a1 + 32) == 778924083)
  {
    AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
    uint64_t v31 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, 0x4D504733u);
    if (v31)
    {
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 120))(v31);
      if (v32)
      {
        uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 144))(v32);
        if (v33)
        {
          uint64_t v34 = 0;
          *(void *)a2 = v33;
          *(void *)(a2 + 8) = AudioFileStreamObject::ParseHeader;
          *(void *)(a2 + 16) = 0;
          uint64_t v35 = *(void *)(a1 + 8);
          uint64_t v36 = *(void *)(v35 + 88);
          uint64_t v37 = *(void *)(v35 + 96);
          uint64_t v38 = v36 + *(unsigned int *)(v35 + 80);
          BOOL v39 = v37 < v36 || v38 <= v37;
          int v40 = v39;
          int v41 = v38 - v37;
          if (!v39 && v41) {
            uint64_t v34 = *(void *)(v35 + 72) + (v37 - v36);
          }
          uint64_t result = 0;
          *(void *)(a2 + 32) = v34;
          if (v40) {
            int v42 = 0;
          }
          else {
            int v42 = v41;
          }
          goto LABEL_105;
        }
      }
    }
    uint64_t result = 1954115647;
LABEL_72:
    int v22 = -1;
LABEL_76:
    *(_DWORD *)(a1 + 236) = v22;
  }
  else
  {
    uint64_t v61 = *(void *)(a1 + 8);
    unsigned int v79 = 1;
    if (!*(unsigned char *)(v61 + 105))
    {
      *(unsigned char *)(v61 + 105) = 1;
      uint64_t v62 = *(void (**)(void, void, uint64_t, unsigned int *))(v61 + 24);
      if (v62)
      {
        v62(*(void *)(v61 + 40), *(unsigned int *)(v61 + 8), 1684434292, &v79);
        uint64_t v61 = *(void *)(a1 + 8);
      }
    }
    unsigned int v79 = 1;
    v63 = *(void (**)(void, void, uint64_t, unsigned int *))(v61 + 24);
    if (v63)
    {
      v63(*(void *)(v61 + 40), *(unsigned int *)(v61 + 8), 1650683508, &v79);
      uint64_t v64 = *(void *)(a1 + 8);
      v65 = *(void (**)(void, void, uint64_t, unsigned int *))(v64 + 24);
      unsigned int v79 = 1;
      if (v65) {
        v65(*(void *)(v64 + 40), *(unsigned int *)(v64 + 8), 1685022310, &v79);
      }
    }
    else
    {
      unsigned int v79 = 1;
    }
    int v66 = *(_DWORD *)(a1 + 40);
    if (v66)
    {
      *(_DWORD *)(a1 + 112) = v66;
      uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v67 / *(unsigned int *)(a1 + 40));
      uint64_t v68 = *(void *)(a1 + 8);
      unsigned int v79 = 1;
      v69 = *(void (**)(void, void, uint64_t, unsigned int *))(v68 + 24);
      if (v69) {
        v69(*(void *)(v68 + 40), *(unsigned int *)(v68 + 8), 1885564532, &v79);
      }
    }
    uint64_t v70 = *(void *)(a1 + 8);
    unsigned int v79 = 1;
    if (!*(_DWORD *)(v70 + 112))
    {
      *(_DWORD *)(v70 + 112) = 1;
      v71 = *(void (**)(void, void, uint64_t, unsigned int *))(v70 + 24);
      if (v71)
      {
        v71(*(void *)(v70 + 40), *(unsigned int *)(v70 + 8), 1919247481, &v79);
        uint64_t v70 = *(void *)(a1 + 8);
      }
    }
    uint64_t v72 = 0;
    *(void *)a2 = a1;
    *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
    *(void *)(a2 + 16) = 0;
    uint64_t v73 = *(void *)(v70 + 88);
    uint64_t v74 = *(void *)(v70 + 96);
    uint64_t v75 = v73 + *(unsigned int *)(v70 + 80);
    BOOL v76 = v74 < v73 || v75 <= v74;
    int v77 = v76;
    int v78 = v75 - v74;
    if (!v76 && v78) {
      uint64_t v72 = *(void *)(v70 + 72) + (v74 - v73);
    }
    uint64_t result = 0;
    *(void *)(a2 + 32) = v72;
    if (v77) {
      int v42 = 0;
    }
    else {
      int v42 = v78;
    }
LABEL_105:
    *(_DWORD *)(a2 + 24) = v42;
  }
  return result;
}

void *StreamBuffer::Copy(void *this, unsigned int *a2, unsigned __int8 *__dst)
{
  uint64_t v4 = this[2];
  uint64_t v5 = this[3];
  uint64_t v6 = v4 + *((unsigned int *)this + 2);
  unsigned int v7 = v6 - v5;
  uint64_t v8 = v5 - v4;
  if (v5 < v4 || v6 <= v5 || v6 == v5)
  {
    *a2 = 0;
  }
  else
  {
    unsigned int v11 = this;
    unsigned int v12 = *a2;
    if (*a2 > v7)
    {
      *a2 = v7;
      unsigned int v12 = v6 - v5;
    }
    this = memcpy(__dst, (const void *)(*this + v8), v12);
    v11[3] += *a2;
  }
  return this;
}

uint64_t AudioFileStreamObject::GeneratePackets(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  AudioStreamPacketDescription *v44;
  unsigned int v45;
  int v46;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50[2];
  UInt32 v51;
  UInt32 v52;
  AudioStreamPacketDescription v53;

  uint64_t v2 = 2003334207;
  CFMutableDictionaryRef v3 = *(_DWORD *)(a1 + 236);
  if (v3 > 148)
  {
    if (v3 == 152)
    {
      LODWORD(v7) = *(_DWORD *)(a1 + 256);
      uint64_t v8 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_23;
    }
    if (v3 == 149)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      uint64_t v6 = *(void *)(v5 + 96);
      goto LABEL_14;
    }
  }
  else
  {
    if (v3 == -1) {
      return 0;
    }
    if (!v3)
    {
      for (uint64_t i = *(void *)(a1 + 184); ; *(void *)(a1 + 184) = i)
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, i, a1 + 312, a1 + 304))
        {
          goto LABEL_51;
        }
        *(void *)(a1 + 312) += *(void *)(a1 + 104);
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) & 0x8000000000000000) == 0)
        {
          int v9 = *(void *)(a1 + 312) + *(unsigned int *)(a1 + 304);
          uint64_t v10 = *(void *)(a1 + 104);
          if (v9 > (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) + v10) {
            goto LABEL_51;
          }
        }
        uint64_t v5 = *(void *)(a1 + 8);
        uint64_t v6 = *(void *)(a1 + 312);
        *(void *)(v5 + 96) = v6;
LABEL_14:
        unsigned int v11 = *(void *)(v5 + 88);
        unsigned int v12 = v11 + *(unsigned int *)(v5 + 80);
        int v13 = v6 < v11 || v12 <= v6;
        if (v13 || (int v14 = v12 - v6) == 0)
        {
          uint64_t v2 = 0;
          unsigned int v46 = 149;
          goto LABEL_53;
        }
        unsigned int v7 = *(unsigned int *)(a1 + 304);
        if (v7 <= v14) {
          break;
        }
        if (*(_DWORD *)(a1 + 284) < v7)
        {
          *(_DWORD *)(a1 + 284) = v7;
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v7, 0);
          LODWORD(v7) = *(_DWORD *)(a1 + 304);
        }
        *(_DWORD *)(a1 + 256) = v7;
        uint64_t v8 = *(unsigned __int8 **)(a1 + 288);
        *(void *)(a1 + 264) = v8;
LABEL_23:
        v50[0] = v7;
        StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), v50, v8);
        unsigned int v15 = v50[0];
        unsigned int v16 = *(_DWORD *)(a1 + 256);
        *(void *)(a1 + 264) += v50[0];
        uint64_t v17 = v16 - v15;
        *(_DWORD *)(a1 + 256) = v17;
        if (v17)
        {
          uint64_t v2 = 0;
          unsigned int v46 = 152;
          goto LABEL_53;
        }
        if (*(_DWORD *)(a1 + 40))
        {
          unsigned int v18 = *(unsigned int *)(a1 + 304);
          int v19 = *(void *)(a1 + 8);
          unsigned int v20 = *(void *)(v19 + 16);
          *(void *)(v20 + 224) += *(unsigned int *)(v20 + 44);
          uint64_t v21 = *(void *)(v20 + 216) + v18;
          ++*(void *)(v20 + 208);
          *(void *)(v20 + 216) = v21;
          (*(void (**)(void))(v19 + 32))(*(void *)(v19 + 40));
        }
        else
        {
          uint64_t v37 = *(uint64_t **)(a1 + 152);
          v53.mStartOffset = 0;
          CompressedPacketTable::operator[]((uint64_t)v50, v37, *(void *)(a1 + 184));
          v53.mDataByteSize = v52;
          CompressedPacketTable::operator[]((uint64_t)v50, v37, *(void *)(a1 + 184));
          v53.UInt32 mVariableFramesInPacket = v51;
          AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), *(_DWORD *)(a1 + 304), 1u, *(const void **)(a1 + 288), &v53, 1);
        }
        uint64_t i = *(void *)(a1 + 184) + 1;
LABEL_59:
        ;
      }
      v53.mStartOffset = *(void *)(a1 + 184);
      int v48 = v14;
      uint64_t v49 = 0;
      if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) & 0x8000000000000000) == 0)
      {
        int v22 = v6 + v48;
        unsigned int v23 = *(void *)(a1 + 104);
        if (v22 > (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) + v23)
        {
          int v24 = *(_DWORD *)(a1 + 104);
          int v48 = v24 - v6 + (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
        }
      }
      int v25 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, AudioStreamPacketDescription *, unsigned int *))(*(void *)a1 + 208))(a1, v6, &v48, &v53, &v49);
      if (v25)
      {
        uint64_t v2 = v25;
        if (v25 == 1685348671)
        {
          *(unsigned char *)(a1 + 177) = 1;
          uint64_t v2 = 1685348671;
        }
        goto LABEL_52;
      }
      unsigned int v26 = v49;
      if (!v49) {
        goto LABEL_52;
      }
      uint64_t v27 = 0;
      unsigned int v28 = *(void *)(a1 + 8);
      uint64_t v29 = *(void *)(v28 + 88);
      __int16 v30 = *(void *)(v28 + 96);
      uint64_t v31 = v29 + *(unsigned int *)(v28 + 80);
      if (v30 >= v29 && v31 > v30 && v31 - v30 != 0) {
        uint64_t v27 = (const void *)(*(void *)(v28 + 72) + (v30 - v29));
      }
      if (!*(_DWORD *)(a1 + 40))
      {
        if (*(_DWORD *)(a1 + 200) < v49)
        {
          uint64_t v38 = (1 << -__clz(v49 - 1));
          *(_DWORD *)(a1 + 200) = v38;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v38);
        }
        BOOL v39 = *(uint64_t **)(a1 + 152);
        if (v39)
        {
          int v40 = *(void *)(a1 + 184);
          if (v40 > v39[3]) {
            goto LABEL_52;
          }
          CompressedPacketTable::operator[]((uint64_t)v50, *(uint64_t **)(a1 + 152), v40);
          if (v49)
          {
            int v41 = 0;
            int v42 = 0;
            unint64_t v43 = *(void *)v50;
            do
            {
              CompressedPacketTable::operator[]((uint64_t)v50, v39, v42 + *(void *)(a1 + 184));
              *(void *)(*(void *)(a1 + 192) + v41 * 16) = *(void *)v50 - v43;
              CompressedPacketTable::operator[]((uint64_t)v50, v39, v42 + *(void *)(a1 + 184));
              *(_DWORD *)(*(void *)(a1 + 192) + v41 * 16 + 12) = v52;
              CompressedPacketTable::operator[]((uint64_t)v50, v39, v42 + *(void *)(a1 + 184));
              char v44 = *(AudioStreamPacketDescription **)(a1 + 192);
              v44[v41].UInt32 mVariableFramesInPacket = v51;
              ++v42;
              unint64_t v45 = v49;
              ++v41;
            }
            while (v42 < v49);
          }
          else
          {
            unint64_t v45 = 0;
            char v44 = *(AudioStreamPacketDescription **)(a1 + 192);
          }
          AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v48, v45, v27, v44, 1);
          goto LABEL_58;
        }
        unsigned int v26 = v49;
        unsigned int v28 = *(void *)(a1 + 8);
      }
      uint64_t v34 = v48;
      uint64_t v35 = *(void *)(v28 + 16);
      *(void *)(v35 + 224) += *(_DWORD *)(v35 + 44) * v26;
      uint64_t v36 = *(void *)(v35 + 216) + v34;
      *(void *)(v35 + 208) += v26;
      *(void *)(v35 + 216) = v36;
      (*(void (**)(void))(v28 + 32))(*(void *)(v28 + 40));
LABEL_58:
      *(void *)(*(void *)(a1 + 8) + 96) += v48;
      uint64_t i = *(void *)(a1 + 184) + v49;
      goto LABEL_59;
    }
  }
LABEL_51:
  uint64_t v2 = 0;
LABEL_52:
  unsigned int v46 = -1;
LABEL_53:
  *(_DWORD *)(a1 + 236) = v46;
  return v2;
}

uint64_t AudioFileStreamObject::ParseHeader(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t AudioFileStreamObject::SetNumBytes(uint64_t this, uint64_t a2)
{
  *(void *)(this + 88) = a2;
  return this;
}

uint64_t AudioFileStreamObject::GetNumBytes(AudioFileStreamObject *this)
{
  return *((void *)this + 11);
}

uint64_t AudioFileStreamObject::SetNumPackets(uint64_t this, uint64_t a2)
{
  *(void *)(this + 96) = a2;
  return this;
}

uint64_t AudioFileStreamObject::GetNumPackets(AudioFileStreamObject *this)
{
  return *((void *)this + 12);
}

uint64_t AudioFileStreamObject::SetFormatList(char **this, unsigned int a2, const AudioFormatListItem *a3)
{
  unsigned int v5 = a2 / 0x30;
  uint64_t v6 = this + 8;
  if (0xAAAAAAAAAAAAAAABLL * ((this[9] - this[8]) >> 4) != a2 / 0x30uLL) {
    std::vector<AudioFormatListItem>::resize(this + 8, a2 / 0x30uLL);
  }
  if (a2 >= 0x30)
  {
    unint64_t v7 = 0;
    if (v5 <= 1) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = v5;
    }
    uint64_t v9 = 48 * v8;
    do
    {
      uint64_t v10 = (_OWORD *)(*v6 + v7);
      long long v11 = *(_OWORD *)&a3[v7 / 0x30].mASBD.mSampleRate;
      long long v12 = *(_OWORD *)&a3[v7 / 0x30].mASBD.mBitsPerChannel;
      v10[1] = *(_OWORD *)&a3[v7 / 0x30].mASBD.mBytesPerPacket;
      v10[2] = v12;
      *uint64_t v10 = v11;
      v7 += 48;
    }
    while (v9 != v7);
  }
  return 0;
}

void std::vector<AudioFormatListItem>::resize(char **a1, unint64_t a2)
{
  CFMutableDictionaryRef v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v21 = &v3[48 * a2];
    goto LABEL_19;
  }
  unint64_t v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4) >= v6)
  {
    size_t v22 = 48 * ((48 * v6 - 48) / 0x30) + 48;
    bzero(a1[1], v22);
    uint64_t v21 = &v4[v22];
LABEL_19:
    a1[1] = v21;
    return;
  }
  if (a2 > 0x555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v9;
  }
  long long v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v10);
  long long v12 = &v11[48 * v5];
  int v14 = &v11[48 * v13];
  size_t v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
  bzero(v12, v15);
  unsigned int v16 = &v12[v15];
  unsigned int v18 = *a1;
  uint64_t v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      long long v19 = *((_OWORD *)v17 - 3);
      long long v20 = *((_OWORD *)v17 - 1);
      *((_OWORD *)v12 - 2) = *((_OWORD *)v17 - 2);
      *((_OWORD *)v12 - 1) = v20;
      *((_OWORD *)v12 - 3) = v19;
      v12 -= 48;
      v17 -= 48;
    }
    while (v17 != v18);
    uint64_t v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
  {
    operator delete(v17);
  }
}

uint64_t AudioFileStreamObject::SetDataFormat(AudioFileStreamObject *this, const AudioStreamBasicDescription *a2)
{
  long long v2 = *(_OWORD *)&a2->mSampleRate;
  long long v3 = *(_OWORD *)&a2->mBytesPerPacket;
  *((void *)this + 7) = *(void *)&a2->mBitsPerChannel;
  *(_OWORD *)((char *)this + 40) = v3;
  *(_OWORD *)((char *)this + 24) = v2;
  return 0;
}

uint64_t AudioFileStreamObject::Flush(AudioFileStreamObject *this)
{
  return 0;
}

void WAVEAudioStream::~WAVEAudioStream(WAVEAudioStream *this)
{
  WAVEAudioStream::~WAVEAudioStream(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF91480;
  long long v2 = (void *)*((void *)this + 45);
  if (v2)
  {
    free(v2);
    *((void *)this + 45) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t AudioFormatProperty_FormatName(AudioStreamBasicDescription *a1, const __CFString **a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFStringRef Copy = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  BOOL v39 = &Copy;
  CFMutableStringRef theString = Mutable;
  p_CFMutableStringRef theString = &theString;
  unint64_t v7 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    CFMutableDictionaryRef Mutable = (__CFString *)pthread_once(&sOnce, InitGetAudioToolboxBundle);
    unint64_t v7 = (__CFBundle *)sAudioToolboxBundle;
  }
  signed int mFormatID = a1->mFormatID;
  BOOL v9 = (mFormatID & 0xFFFF0000) == 0x6D730000 || (mFormatID & 0xFFFF0000) == 1297285120;
  unsigned int v10 = (unsigned __int16)a1->mFormatID;
  if (v9 && mFormatID != 1836253269 && v10 <= 0x1400)
  {
    uint64_t v14 = 1718449215;
    if ((unsigned __int16)a1->mFormatID > 0xFFu)
    {
      if ((unsigned __int16)a1->mFormatID > 0xFFFu)
      {
        switch((unsigned __int16)a1->mFormatID)
        {
          case 0x1000u:
            CFStringRef v15 = @"OLIGSM";
            break;
          case 0x1001u:
            CFStringRef v15 = @"OLIADPCM";
            break;
          case 0x1002u:
            CFStringRef v15 = @"OLICELP";
            break;
          case 0x1003u:
            CFStringRef v15 = @"OLISBC";
            break;
          case 0x1004u:
            CFStringRef v15 = @"OLIOPR";
            break;
          default:
            if (v10 == 4352)
            {
              CFStringRef v15 = @"Lernout & Hauspie";
            }
            else
            {
              if (v10 != 5120) {
                goto LABEL_253;
              }
              CFStringRef v15 = @"NORRIS";
            }
            break;
        }
      }
      else if ((unsigned __int16)a1->mFormatID <= 0x202u)
      {
        switch(v10)
        {
          case 0x100u:
            CFStringRef v15 = @"RHETOREX ADPCM";
            break;
          case 0x200u:
            CFStringRef v15 = @"CREATIVE ADPCM";
            break;
          case 0x202u:
            CFStringRef v15 = @"CREATIVE FASTSPEECH8";
            break;
          default:
            goto LABEL_253;
        }
      }
      else if ((unsigned __int16)a1->mFormatID > 0x2FFu)
      {
        if (v10 == 768)
        {
          CFStringRef v15 = @"FM TOWNS SND";
        }
        else
        {
          if (v10 != 1024) {
            goto LABEL_253;
          }
          CFStringRef v15 = @"BTV DIGITAL";
        }
      }
      else if (v10 == 515)
      {
        CFStringRef v15 = @"CREATIVE FASTSPEECH10";
      }
      else
      {
        if (v10 != 544) {
          goto LABEL_253;
        }
        CFStringRef v15 = @"QUARTERDECK";
      }
    }
    else
    {
      CFStringRef v15 = @"Microsoft ADPCM";
      switch((unsigned __int16)a1->mFormatID)
      {
        case 2u:
          break;
        case 3u:
        case 4u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x27u:
        case 0x28u:
        case 0x29u:
        case 0x2Au:
        case 0x2Bu:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x3Eu:
        case 0x3Fu:
        case 0x42u:
        case 0x43u:
        case 0x44u:
        case 0x45u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x4Bu:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x51u:
        case 0x52u:
        case 0x53u:
        case 0x54u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Au:
        case 0x5Bu:
        case 0x5Cu:
        case 0x5Du:
        case 0x5Eu:
        case 0x5Fu:
          goto LABEL_253;
        case 5u:
          CFStringRef v15 = @"IBM CVSD";
          break;
        case 0x10u:
          CFStringRef v15 = @"OKI ADPCM";
          break;
        case 0x11u:
          CFStringRef v15 = @"DVI ADPCM";
          break;
        case 0x12u:
          CFStringRef v15 = @"MEDIASPACE ADPCM";
          break;
        case 0x13u:
          CFStringRef v15 = @"SIERRA ADPCM";
          break;
        case 0x14u:
          CFStringRef v15 = @"G723 ADPCM";
          break;
        case 0x15u:
        case 0x34u:
          CFStringRef v15 = @"DIGISTD";
          break;
        case 0x16u:
          CFStringRef v15 = @"DIGIFIX";
          break;
        case 0x17u:
          CFStringRef v15 = @"DIALOGIC OKI ADPCM";
          break;
        case 0x18u:
          CFStringRef v15 = @"MEDIAVISION ADPCM";
          break;
        case 0x20u:
          CFStringRef v15 = @"YAMAHA ADPCM";
          break;
        case 0x21u:
          CFStringRef v15 = @"SONARC";
          break;
        case 0x22u:
          CFStringRef v15 = @"DSPGROUP TRUESPEECH";
          break;
        case 0x23u:
          CFStringRef v15 = @"ECHOSC1";
          break;
        case 0x24u:
          CFStringRef v15 = @"AUDIOFILE AF36";
          break;
        case 0x25u:
          CFStringRef v15 = @"APTX";
          break;
        case 0x26u:
          CFStringRef v15 = @"AUDIOFILE AF10";
          break;
        case 0x30u:
          CFStringRef v15 = @"DOLBY AC2";
          break;
        case 0x31u:
          CFStringRef v15 = @"GSM610";
          break;
        case 0x32u:
          CFStringRef v15 = @"MSNAUDIO";
          break;
        case 0x33u:
          CFStringRef v15 = @"ANTEX ADPCME";
          break;
        case 0x35u:
          CFStringRef v15 = @"DIGIREAL";
          break;
        case 0x36u:
          CFStringRef v15 = @"DIGIADPCM";
          break;
        case 0x37u:
          CFStringRef v15 = @"CONTROL RES CR10";
          break;
        case 0x38u:
          CFStringRef v15 = @"NMS VBXADPCM";
          break;
        case 0x39u:
          CFStringRef v15 = @"CS IMAADPCM";
          break;
        case 0x3Au:
          CFStringRef v15 = @"ECHOSC3";
          break;
        case 0x3Bu:
          CFStringRef v15 = @"ROCKWELL ADPCM";
          break;
        case 0x3Cu:
          CFStringRef v15 = @"ROCKWELL DIGITALK";
          break;
        case 0x3Du:
          CFStringRef v15 = @"XEBEC";
          break;
        case 0x40u:
          CFStringRef v15 = @"G721 ADPCM";
          break;
        case 0x41u:
          CFStringRef v15 = @"G728 CELP";
          break;
        case 0x50u:
          CFStringRef v15 = @"MPEG";
          break;
        case 0x55u:
          CFStringRef v15 = @"MPEGLAYER3";
          break;
        case 0x60u:
          CFStringRef v15 = @"CIRRUS";
          break;
        case 0x61u:
          CFStringRef v15 = @"ESPCM";
          break;
        case 0x62u:
          CFStringRef v15 = @"VOXWARE";
          break;
        case 0x63u:
          CFStringRef v15 = @"CANOPUS ATRAC";
          break;
        case 0x64u:
          CFStringRef v15 = @"G726 ADPCM";
          break;
        case 0x65u:
          CFStringRef v15 = @"G722 ADPCM";
          break;
        case 0x66u:
          CFStringRef v15 = @"DSAT";
          break;
        case 0x67u:
          CFStringRef v15 = @"DSAT DISPLAY";
          break;
        default:
          if (v10 != 128) {
            goto LABEL_253;
          }
          CFStringRef v15 = @"SOFTSOUND";
          break;
      }
    }
    CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v15, @"FormatNames", v7, v6);
    goto LABEL_247;
  }
  if (mFormatID > 1836069683)
  {
    if (mFormatID > 1903522656)
    {
      if (mFormatID <= 1970037110)
      {
        if (mFormatID > 1936487266)
        {
          if (mFormatID <= 1936745847)
          {
            if (mFormatID == 1936487267)
            {
              CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 SLS (HD-AAC)", @"FormatNames", v7, v6);
              goto LABEL_247;
            }
            if (mFormatID == 1936487278)
            {
              CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 SLS Non-Core", @"FormatNames", v7, v6);
              goto LABEL_247;
            }
          }
          else
          {
            switch(mFormatID)
            {
              case 1936745848:
                CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Speex", @"FormatNames", v7, v6);
                goto LABEL_247;
              case 1953790320:
                CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"TTY", @"FormatNames", v7, v6);
                goto LABEL_247;
              case 1953986161:
                CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"TwinVQ", @"FormatNames", v7, v6);
                goto LABEL_247;
            }
          }
LABEL_167:
          RegistryAccess::instance((RegistryAccess *)Mutable);
          uint64_t v25 = qword_1EB3D4FB0;
          os_unfair_recursive_lock_lock_with_options();
          uint64_t v26 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(*(void *)v25 + 16))(v25, a1->mFormatID, 1819304813, 0, 0);
          if (!v26
            && (v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)v25 + 16))(v25, 1819304813, a1->mFormatID, 0, 0)) == 0|| (CFStringRef v27 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26)) == 0)
          {
            uint64_t v14 = 1718449215;
            os_unfair_recursive_lock_unlock();
            goto LABEL_253;
          }
          CFStringRef Copy = CFStringCreateCopy(v4, v27);
          os_unfair_recursive_lock_unlock();
          goto LABEL_248;
        }
        if (mFormatID > 1935767393)
        {
          if (mFormatID == 1935767394)
          {
            CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"AMR Wideband", @"FormatNames", v7, v6);
            goto LABEL_247;
          }
          if (mFormatID == 1936029299)
          {
            CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"EVS", @"FormatNames", v7, v6);
            goto LABEL_247;
          }
          goto LABEL_167;
        }
        if (mFormatID != 1903522657)
        {
          if (mFormatID == 1935764850)
          {
            CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"AMR Narrowband", @"FormatNames", v7, v6);
            goto LABEL_247;
          }
          goto LABEL_167;
        }
LABEL_116:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"xHE-AAC", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
      if (mFormatID <= 2053202791)
      {
        if (mFormatID > 1987015265)
        {
          if (mFormatID == 1987015266)
          {
            CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Vorbis", @"FormatNames", v7, v6);
            goto LABEL_247;
          }
          if (mFormatID != 2053202275)
          {
            int v16 = 2053202739;
            goto LABEL_136;
          }
LABEL_155:
          CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 AAC", @"FormatNames", v7, v6);
          goto LABEL_247;
        }
        if (mFormatID == 1970037111)
        {
          CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"\\U03BC-Law 2:1", @"FormatNames", v7, v6);
          goto LABEL_247;
        }
        int v17 = 1970495843;
        goto LABEL_115;
      }
      if (mFormatID > 2053319474)
      {
        if (mFormatID == 2053319475) {
          goto LABEL_128;
        }
        if (mFormatID == 2053464883) {
          goto LABEL_141;
        }
        int v22 = 2053923171;
        goto LABEL_77;
      }
      if (mFormatID != 2053202792)
      {
        int v24 = 2053202800;
        goto LABEL_147;
      }
      goto LABEL_149;
    }
    if (mFormatID > 1902207330)
    {
      if (mFormatID > 1902211170)
      {
        if (mFormatID > 1902469938)
        {
          if (mFormatID == 1902469939) {
            goto LABEL_141;
          }
          if (mFormatID == 1902537827) {
            goto LABEL_140;
          }
          int v22 = 1902928227;
          goto LABEL_77;
        }
        if (mFormatID != 1902211171)
        {
          int v23 = 1902324531;
          goto LABEL_127;
        }
        goto LABEL_178;
      }
      if (mFormatID > 1902207847)
      {
        if (mFormatID != 1902207848)
        {
          int v24 = 1902207856;
LABEL_147:
          if (mFormatID == v24)
          {
LABEL_148:
            CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 HE AAC V2", @"FormatNames", v7, v6);
            goto LABEL_247;
          }
          goto LABEL_167;
        }
LABEL_149:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 HE AAC", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
      if (mFormatID == 1902207331) {
        goto LABEL_155;
      }
      int v16 = 1902207795;
    }
    else
    {
      if (mFormatID > 1885430631)
      {
        if (mFormatID > 1885547314)
        {
          if (mFormatID == 1885547315) {
            goto LABEL_128;
          }
          if (mFormatID == 1885692723) {
            goto LABEL_141;
          }
          int v17 = 1886745441;
LABEL_115:
          if (mFormatID != v17) {
            goto LABEL_167;
          }
          goto LABEL_116;
        }
        if (mFormatID != 1885430632)
        {
          int v24 = 1885430640;
          goto LABEL_147;
        }
        goto LABEL_149;
      }
      if (mFormatID <= 1885430114)
      {
        if (mFormatID == 1836069684)
        {
          CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MP3onMP4", @"FormatNames", v7, v6);
          goto LABEL_247;
        }
        if (mFormatID == 1869641075)
        {
          CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Opus", @"FormatNames", v7, v6);
          goto LABEL_247;
        }
        goto LABEL_167;
      }
      if (mFormatID == 1885430115) {
        goto LABEL_155;
      }
      int v16 = 1885430579;
    }
LABEL_136:
    if (mFormatID != v16) {
      goto LABEL_167;
    }
    goto LABEL_137;
  }
  if (mFormatID > 1633889586)
  {
    if (mFormatID > 1685481783)
    {
      if (mFormatID > 1752594530)
      {
        if (mFormatID <= 1768775987)
        {
          if (mFormatID == 1752594531)
          {
            CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"HVXC", @"FormatNames", v7, v6);
            goto LABEL_247;
          }
          if (mFormatID == 1768710755)
          {
            CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"iLBC", @"FormatNames", v7, v6);
            goto LABEL_247;
          }
        }
        else
        {
          switch(mFormatID)
          {
            case 1768775988:
              CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"IMA 4:1", @"FormatNames", v7, v6);
              goto LABEL_247;
            case 1818440480:
              CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"LC3", @"FormatNames", v7, v6);
              goto LABEL_247;
            case 1819304813:
              CFStringRef Copy = (CFStringRef)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Linear PCM", @"FormatNames", v7, v6);
              if (a1->mBitsPerChannel)
              {
                snprintf(__str, 0x80uLL, ", %u ", a1->mBitsPerChannel);
                CFStringAppendCString(theString, __str, 0x8000100u);
                CFStringRef v19 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"bit", @"FormatNames", v7, v18);
                CFStringAppend(theString, v19);
                CFRelease(v19);
                if (a1->mBitsPerChannel >= 9)
                {
                  CFStringAppendCString(theString, " ", 0x8000100u);
                  if ((a1->mFormatFlags & 2) != 0) {
                    CFStringRef v21 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"big-endian", @"FormatNames", v7, v20);
                  }
                  else {
                    CFStringRef v21 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"little-endian", @"FormatNames", v7, v20);
                  }
                  CFStringAppend(theString, v21);
                  CFRelease(v21);
                }
                CFStringAppendCString(theString, " ", 0x8000100u);
                AudioFormatFlags mFormatFlags = a1->mFormatFlags;
                if (mFormatFlags)
                {
                  CFStringRef v37 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"floating point", @"FormatNames", v7, v33);
                  CFStringAppend(theString, v37);
                  CFRelease(v37);
                }
                else
                {
                  if ((mFormatFlags & 4) != 0) {
                    CFStringRef v35 = @"signed integer";
                  }
                  else {
                    CFStringRef v35 = @"unsigned integer";
                  }
                  CFStringRef v36 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v35, @"FormatNames", v7, v33);
                  CFStringAppend(theString, v36);
                  CFRelease(v36);
                }
              }
              goto LABEL_248;
          }
        }
        goto LABEL_167;
      }
      if (mFormatID <= 1700998450)
      {
        if (mFormatID == 1685481784)
        {
          CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"DVI8", @"FormatNames", v7, v6);
          goto LABEL_247;
        }
        int v23 = 1700997939;
LABEL_127:
        if (mFormatID != v23) {
          goto LABEL_167;
        }
LABEL_128:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Dolby Atmos", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
      if (mFormatID != 1700998451)
      {
        if (mFormatID != 1718378851) {
          goto LABEL_167;
        }
LABEL_140:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"FLAC", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
LABEL_141:
      CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Dolby Digital Plus", @"FormatNames", v7, v6);
      goto LABEL_247;
    }
    if (mFormatID <= 1634754914)
    {
      if (mFormatID > 1634492790)
      {
        if (mFormatID == 1634492791)
        {
          CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"A-Law 2:1", @"FormatNames", v7, v6);
          goto LABEL_247;
        }
        if (mFormatID == 1634497332)
        {
          CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 ALS", @"FormatNames", v7, v6);
          goto LABEL_247;
        }
        goto LABEL_167;
      }
      if (mFormatID != 1633889587)
      {
        int v22 = 1634492771;
LABEL_77:
        if (mFormatID == v22)
        {
          CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Apple Lossless", @"FormatNames", v7, v6);
          goto LABEL_247;
        }
        goto LABEL_167;
      }
LABEL_137:
      CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Dolby Digital", @"FormatNames", v7, v6);
      goto LABEL_247;
    }
    if (mFormatID > 1667591279)
    {
      if (mFormatID == 1667591280)
      {
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 CELP", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
      if (mFormatID == 1685354616)
      {
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"DTX", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
      goto LABEL_167;
    }
    if (mFormatID != 1634754915)
    {
      if (mFormatID == 1667326771)
      {
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"IMA4", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
      goto LABEL_167;
    }
LABEL_178:
    CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"APAC", @"FormatNames", v7, v6);
    goto LABEL_247;
  }
  if (mFormatID > 1633771874)
  {
    switch(mFormatID)
    {
      case 1633772389:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 AAC Enhanced Low Delay", @"FormatNames", v7, v6);
        goto LABEL_247;
      case 1633772390:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 AAC Enhanced Low Delay with SBR", @"FormatNames", v7, v6);
        goto LABEL_247;
      case 1633772391:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 AAC Enhanced Low Delay V2", @"FormatNames", v7, v6);
        goto LABEL_247;
      case 1633772392:
        goto LABEL_149;
      case 1633772393:
      case 1633772394:
      case 1633772395:
      case 1633772398:
      case 1633772399:
      case 1633772401:
        goto LABEL_167;
      case 1633772396:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG-4 AAC Low Delay", @"FormatNames", v7, v6);
        goto LABEL_247;
      case 1633772397:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"AAC Main", @"FormatNames", v7, v6);
        goto LABEL_247;
      case 1633772400:
        goto LABEL_148;
      case 1633772402:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"AAC Scalable Sampling Rate", @"FormatNames", v7, v6);
        goto LABEL_247;
      case 1633772403:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG Surround", @"FormatNames", v7, v6);
        goto LABEL_247;
      case 1633772404:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"AAC Long Term Predictor", @"FormatNames", v7, v6);
        goto LABEL_247;
      default:
        if (mFormatID == 1633771875) {
          goto LABEL_108;
        }
        if (mFormatID == 1633772320) {
          goto LABEL_155;
        }
        goto LABEL_167;
    }
  }
  if (mFormatID <= 1296122674)
  {
    if (mFormatID > 778924082)
    {
      if (mFormatID == 778924083)
      {
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG Layer 3", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
      if (mFormatID == 1096107074)
      {
LABEL_108:
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Audible", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
    }
    else
    {
      if (mFormatID == 778924081)
      {
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG Layer 1", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
      if (mFormatID == 778924082)
      {
        CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MPEG Layer 2", @"FormatNames", v7, v6);
        goto LABEL_247;
      }
    }
    goto LABEL_167;
  }
  if (mFormatID <= 1363430705)
  {
    if (mFormatID == 1296122675)
    {
      CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MACE 3:1", @"FormatNames", v7, v6);
      goto LABEL_247;
    }
    if (mFormatID == 1296122678)
    {
      CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"MACE 6:1", @"FormatNames", v7, v6);
      goto LABEL_247;
    }
    goto LABEL_167;
  }
  if (mFormatID == 1363430706)
  {
    CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"QDesign Music 2", @"FormatNames", v7, v6);
    goto LABEL_247;
  }
  if (mFormatID == 1363430723)
  {
    CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"QDesign", @"FormatNames", v7, v6);
    goto LABEL_247;
  }
  if (mFormatID != 1365470320) {
    goto LABEL_167;
  }
  CFStringRef v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Qualcomm PureVoice\\U2122", @"FormatNames", v7, v6);
LABEL_247:
  CFStringRef Copy = v13;
LABEL_248:
  if (a1->mChannelsPerFrame)
  {
    snprintf(__str, 0x80uLL, ", %u ", a1->mChannelsPerFrame);
    CFStringAppendCString(theString, __str, 0x8000100u);
    CFStringRef v29 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"channels", @"FormatNames", v7, v28);
    CFStringAppend(theString, v29);
    CFRelease(v29);
  }
  if (a1->mSampleRate != 0.0)
  {
    snprintf(__str, 0x80uLL, ", %g ", a1->mSampleRate);
    CFStringAppendCString(theString, __str, 0x8000100u);
    CFStringRef v31 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Hz", @"FormatNames", v7, v30);
    CFStringAppend(theString, v31);
    CFRelease(v31);
  }
  CFStringInsert(theString, 0, Copy);
  uint64_t v14 = 0;
  *a2 = CFStringCreateCopy(v4, theString);
LABEL_253:
  CACFReleaser<__CFString *>::~CACFReleaser((const void ***)&p_theString);
  CACFReleaser<__CFString const*>::~CACFReleaser((const void ***)&v39);
  return v14;
}

void sub_18FFBE200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v3 = va_arg(va1, const void **);
  CACFReleaser<__CFString *>::~CACFReleaser((const void ***)va);
  CACFReleaser<__CFString const*>::~CACFReleaser((const void ***)va1);
  _Unwind_Resume(a1);
}

const void ***CACFReleaser<__CFString *>::~CACFReleaser(const void ***a1)
{
  long long v2 = **a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void ***CACFReleaser<__CFString const*>::~CACFReleaser(const void ***a1)
{
  long long v2 = **a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t AudioFormatProperty_ChannelName(AudioChannelDescription *a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  signed int mChannelLabel = a1->mChannelLabel;
  unint64_t v7 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    unint64_t v7 = (__CFBundle *)sAudioToolboxBundle;
  }
  if ((mChannelLabel & 0xFFFF0000) == 0x10000)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFStringRef v11 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Discrete", @"AudioChannelLabels", v7, v10);
    snprintf(__str, 0x10uLL, "-%u", (unsigned __int16)mChannelLabel);
    CFStringAppendCString(Mutable, __str, 0x8000100u);
    CFStringInsert(Mutable, 0, v11);
    *a2 = CFStringCreateCopy(v8, Mutable);
    CFRelease(Mutable);
    CFRelease(v11);
    return 0;
  }
  else
  {
    uint64_t result = 560360820;
    if (mChannelLabel > 199)
    {
      switch(mChannelLabel)
      {
        case 200:
          CFStringRef v17 = @"Ambisonic W";
          break;
        case 201:
          CFStringRef v17 = @"Ambisonic X";
          break;
        case 202:
          CFStringRef v17 = @"Ambisonic Y";
          break;
        case 203:
          CFStringRef v17 = @"Ambisonic Z";
          break;
        case 204:
          CFStringRef v17 = @"Mid";
          break;
        case 205:
          CFStringRef v17 = @"Side";
          break;
        case 206:
          CFStringRef v17 = @"X";
          break;
        case 207:
          CFStringRef v17 = @"Y";
          break;
        default:
          switch(mChannelLabel)
          {
            case 301:
              CFStringRef v17 = @"Headphones Left";
              goto LABEL_65;
            case 302:
              CFStringRef v17 = @"Headphones Right";
              goto LABEL_65;
            case 303:
              return result;
            case 304:
              CFStringRef v17 = @"Click Track";
              goto LABEL_65;
            case 305:
              CFStringRef v17 = @"Foreign Language";
              goto LABEL_65;
            default:
              if (mChannelLabel != 400) {
                return result;
              }
              CFStringRef v17 = @"Discrete";
              break;
          }
          break;
      }
LABEL_65:
      CFStringRef v14 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v17, @"AudioChannelLabels", v7, a4);
    }
    else
    {
      switch(mChannelLabel)
      {
        case -1:
          CFStringRef v14 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Unknown", @"AudioChannelLabels", v7, a4);
          AudioChannelFlags mChannelFlags = a1->mChannelFlags;
          if (!mChannelFlags) {
            break;
          }
          if ((mChannelFlags & 2) != 0)
          {
            if ((mChannelFlags & 4) != 0) {
              CFStringRef v16 = @"%@ (%g\\U00B0, %g\\U00B0, %gm)";
            }
            else {
              CFStringRef v16 = @"%@ (%g\\U00B0, %g\\U00B0, %g)";
            }
          }
          else
          {
            if ((mChannelFlags & 1) == 0) {
              break;
            }
            if ((mChannelFlags & 4) != 0) {
              CFStringRef v16 = @"%@ (%gm, %gm, %gm)";
            }
            else {
              CFStringRef v16 = @"%@ (%g, %g, %g)";
            }
          }
          CFStringRef v18 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v16, @"AudioChannelLabels", v7, v13);
          CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v18, v14, a1->mCoordinates[0], a1->mCoordinates[1], a1->mCoordinates[2]);
          CFRelease(v18);
          CFRelease(v14);
          CFStringRef v14 = v19;
          break;
        case 0:
          CFStringRef v17 = @"Unused";
          goto LABEL_65;
        case 1:
          CFStringRef v17 = @"Left";
          goto LABEL_65;
        case 2:
          CFStringRef v17 = @"Right";
          goto LABEL_65;
        case 3:
          CFStringRef v17 = @"Center";
          goto LABEL_65;
        case 4:
          CFStringRef v17 = @"LFE Screen";
          goto LABEL_65;
        case 5:
          CFStringRef v17 = @"Left Surround";
          goto LABEL_65;
        case 6:
          CFStringRef v17 = @"Right Surround";
          goto LABEL_65;
        case 7:
          CFStringRef v17 = @"Left Center";
          goto LABEL_65;
        case 8:
          CFStringRef v17 = @"Right Center";
          goto LABEL_65;
        case 9:
          CFStringRef v17 = @"Center Surround";
          goto LABEL_65;
        case 10:
          CFStringRef v17 = @"Left Surround Direct";
          goto LABEL_65;
        case 11:
          CFStringRef v17 = @"Right Surround Direct";
          goto LABEL_65;
        case 12:
          CFStringRef v17 = @"Top Center Surround";
          goto LABEL_65;
        case 13:
          CFStringRef v17 = @"Vertical Height Left";
          goto LABEL_65;
        case 14:
          CFStringRef v17 = @"Vertical Height Center";
          goto LABEL_65;
        case 15:
          CFStringRef v17 = @"Vertical Height Right";
          goto LABEL_65;
        case 16:
          CFStringRef v17 = @"Top Back Left";
          goto LABEL_65;
        case 17:
          CFStringRef v17 = @"Top Back Center";
          goto LABEL_65;
        case 18:
          CFStringRef v17 = @"Top Back Right";
          goto LABEL_65;
        case 33:
          CFStringRef v17 = @"Rear Surround Left";
          goto LABEL_65;
        case 34:
          CFStringRef v17 = @"Rear Surround Right";
          goto LABEL_65;
        case 35:
          CFStringRef v17 = @"Left Wide";
          goto LABEL_65;
        case 36:
          CFStringRef v17 = @"Right Wide";
          goto LABEL_65;
        case 37:
          CFStringRef v17 = @"LFE2";
          goto LABEL_65;
        case 38:
          CFStringRef v17 = @"Left Total";
          goto LABEL_65;
        case 39:
          CFStringRef v17 = @"Right Total";
          goto LABEL_65;
        case 40:
          CFStringRef v17 = @"Hearing Impaired";
          goto LABEL_65;
        case 41:
          CFStringRef v17 = @"Narration";
          goto LABEL_65;
        case 42:
          CFStringRef v17 = @"Mono";
          goto LABEL_65;
        case 43:
          CFStringRef v17 = @"Dialog Centric Mix";
          goto LABEL_65;
        case 44:
          CFStringRef v17 = @"Center Surround Direct";
          goto LABEL_65;
        case 45:
          CFStringRef v17 = @"Haptic";
          goto LABEL_65;
        case 49:
          CFStringRef v17 = @"Left Top Middle";
          goto LABEL_65;
        case 51:
          CFStringRef v17 = @"Right Top Middle";
          goto LABEL_65;
        case 52:
          CFStringRef v17 = @"Left Top Rear";
          goto LABEL_65;
        case 53:
          CFStringRef v17 = @"Center Top Rear";
          goto LABEL_65;
        case 54:
          CFStringRef v17 = @"Right Top Rear";
          goto LABEL_65;
        default:
          return result;
      }
    }
    uint64_t result = 0;
    *a2 = v14;
  }
  return result;
}

uint64_t AudioFormatProperty_ChannelLayoutNameFromDescriptions(const AudioChannelLayout *a1, const __CFString **a2, int a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  UInt32 mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions)
  {
    mChannelDescriptions = a1->mChannelDescriptions;
    uint64_t v7 = a1->mNumberChannelDescriptions;
    CFAllocatorRef v8 = a1->mChannelDescriptions;
    while (1)
    {
      AudioChannelLabel mChannelLabel = v8->mChannelLabel;
      ++v8;
      if (mChannelLabel != 400) {
        break;
      }
      if (!--v7) {
        goto LABEL_5;
      }
    }
    if ((mChannelDescriptions->mChannelLabel & 0xFFFF0000) == 0x10000)
    {
      uint64_t v21 = a1->mNumberChannelDescriptions;
      int v22 = a1->mChannelDescriptions;
      int v23 = (unsigned __int16)mChannelDescriptions->mChannelLabel;
      while (1)
      {
        AudioChannelLabel v25 = v22->mChannelLabel;
        ++v22;
        unsigned __int16 v24 = v25;
        if ((v25 & 0xFFFF0000) != 0x10000 || v23 != v24) {
          break;
        }
        ++v23;
        if (!--v21)
        {
          uint64_t v26 = (__CFBundle *)sAudioToolboxBundle;
          if (sAudioToolboxBundle == -1)
          {
            pthread_once(&sOnce, InitGetAudioToolboxBundle);
            uint64_t v26 = (__CFBundle *)sAudioToolboxBundle;
          }
          CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
          snprintf(__str, 0x10uLL, "%u ", a1->mNumberChannelDescriptions);
          CFStringAppendCString(Mutable, __str, 0x8000100u);
          if (a1->mNumberChannelDescriptions == 1) {
            CFStringRef v28 = @"Channel";
          }
          else {
            CFStringRef v28 = @"Channels";
          }
          CFStringRef v29 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v28, @"AudioChannelLabels", v26, v27);
          CFStringAppend(Mutable, v29);
          CFRelease(v29);
          CFStringAppendCString(Mutable, " (", 0x8000100u);
          CFStringRef v31 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Discrete", @"AudioChannelLabels", v26, v30);
          CFStringAppend(Mutable, v31);
          CFRelease(v31);
          if (a1->mNumberChannelDescriptions == 1) {
            snprintf(__str, 0x10uLL, " %u)");
          }
          else {
            snprintf(__str, 0x10uLL, " %u-%u)");
          }
          CFStringRef v18 = __str;
          goto LABEL_11;
        }
      }
    }
    if (a3)
    {
      int v32 = 0;
      uint64_t v33 = a1->mNumberChannelDescriptions;
      do
      {
        AudioChannelLabel v35 = mChannelDescriptions->mChannelLabel;
        ++mChannelDescriptions;
        AudioChannelLabel v34 = v35;
        if (v35 == 37 || v34 == 4) {
          ++v32;
        }
        --v33;
      }
      while (v33);
      snprintf(__str, 0x10uLL, "%u.%u", mNumberChannelDescriptions - v32, v32);
      uint64_t v19 = 0;
      *a2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], __str, 0x8000100u);
    }
    else
    {
      CFAllocatorRef v37 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableStringRef v38 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      CFMutableStringRef v41 = CFStringCreateMutable(v37, 0);
      if (a1->mNumberChannelDescriptions)
      {
        unint64_t v42 = 0;
        int v43 = 0;
        while (1)
        {
          if (v42) {
            CFStringAppendCString(v38, " ", 0x8000100u);
          }
          *(void *)__str = 0;
          uint64_t v44 = AudioFormatProperty_ChannelShortName(mChannelDescriptions->mChannelLabel, (const __CFString **)__str, v39, v40);
          if (v44) {
            break;
          }
          CFStringRef v45 = *(CFStringRef *)__str;
          CFStringAppend(v38, *(CFStringRef *)__str);
          CFRelease(v45);
          if (mChannelDescriptions->mChannelLabel == 37 || mChannelDescriptions->mChannelLabel == 4) {
            ++v43;
          }
          ++v42;
          ++mChannelDescriptions;
          if (v42 >= a1->mNumberChannelDescriptions) {
            goto LABEL_45;
          }
        }
        uint64_t v19 = v44;
      }
      else
      {
        int v43 = 0;
LABEL_45:
        CFStringAppendCString(v38, ")", 0x8000100u);
        snprintf(__str, 0x10uLL, "%u.%u (", a1->mNumberChannelDescriptions - v43, v43);
        CFStringAppendCString(v41, __str, 0x8000100u);
        CFStringAppend(v41, v38);
        uint64_t v19 = 0;
        *a2 = CFStringCreateCopy(v37, v41);
      }
      CFRelease(v38);
      CFRelease(v41);
    }
  }
  else
  {
LABEL_5:
    CFStringRef v10 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle == -1)
    {
      pthread_once(&sOnce, InitGetAudioToolboxBundle);
      CFStringRef v10 = (__CFBundle *)sAudioToolboxBundle;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    snprintf(__str, 0x10uLL, "%u ", a1->mNumberChannelDescriptions);
    CFStringAppendCString(Mutable, __str, 0x8000100u);
    if (a1->mNumberChannelDescriptions == 1) {
      CFStringRef v14 = @"Channel";
    }
    else {
      CFStringRef v14 = @"Channels";
    }
    CFStringRef v15 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v14, @"AudioChannelLabels", v10, v13);
    CFStringAppend(Mutable, v15);
    CFRelease(v15);
    CFStringAppendCString(Mutable, " (", 0x8000100u);
    CFStringRef v17 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(@"Discrete", @"AudioChannelLabels", v10, v16);
    CFStringAppend(Mutable, v17);
    CFRelease(v17);
    CFStringRef v18 = ")";
LABEL_11:
    CFStringAppendCString(Mutable, v18, 0x8000100u);
    *a2 = CFStringCreateCopy(v11, Mutable);
    CFRelease(Mutable);
    return 0;
  }
  return v19;
}

uint64_t AudioFormatProperty_ChannelLayoutSimpleName(const AudioChannelLayout *a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  int mChannelLayoutTag = a1->mChannelLayoutTag;
  unsigned int v36 = a1->mChannelLayoutTag;
  uint64_t v7 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    uint64_t v7 = (__CFBundle *)sAudioToolboxBundle;
    if (mChannelLayoutTag)
    {
LABEL_3:
      if (mChannelLayoutTag == 0x10000)
      {
        int8x8_t mChannelBitmap = (int8x8_t)a1->mChannelBitmap;
        int8x8_t v9 = vcnt_s8(mChannelBitmap);
        v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
        __int32 v10 = v9.i32[0];
        if (v9.i32[0] == 1)
        {
          AudioFormatProperty_ChannelLayoutForBitmap(mChannelBitmap.i32[0], &v35, v9);
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          AudioChannelLabel mChannelLabel = v35.mChannelDescriptions[0].mChannelLabel;
          p_AudioChannelLabel mChannelLabel = (AudioChannelLayout *)&mChannelLabel;
          return AudioFormatProperty_ChannelName((AudioChannelDescription *)p_mChannelLabel, a2, a3, a4);
        }
        int mChannelLayoutTag = AudioFormatProperty_LayoutTagForBitmap(mChannelBitmap.i32[0]);
        if (mChannelLayoutTag == 0x10000)
        {
          *(void *)&v35.int mChannelLayoutTag = 0;
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v35, (20 * v10 + 12), 0);
          CFStringRef v14 = *(AudioChannelLayout **)&v35.mChannelLayoutTag;
          AudioFormatProperty_ChannelLayoutForBitmap(mChannelBitmap.i32[0], *(AudioChannelLayout **)&v35.mChannelLayoutTag, v15);
          uint64_t v13 = AudioFormatProperty_ChannelLayoutNameFromDescriptions(v14, a2, 1);
          if (v14) {
            free(v14);
          }
          return v13;
        }
      }
LABEL_18:
      unsigned int v17 = mChannelLayoutTag & 0xFFFF0000;
      if ((mChannelLayoutTag & 0xFFFF0000) == 0xBF0000)
      {
        CFStringRef v20 = @"HOA_ACN_N3D";
        goto LABEL_27;
      }
      if (v17 == 12451840)
      {
        CFStringRef v20 = @"HOA_ACN_SN3D";
        goto LABEL_27;
      }
      if (v17 == 9633792)
      {
        if ((unsigned __int16)mChannelLayoutTag == 1) {
          CFStringRef v18 = @"Discrete Channel";
        }
        else {
          CFStringRef v18 = @"Discrete Channels";
        }
        uint64_t v19 = ThreadSafeCFCopyLocalizedStringFromTableInBundle(v18, @"AudioChannelLayouts", v7, a4);
        *a2 = CFStringCreateWithFormat(0, 0, @"%d %@", (unsigned __int16)mChannelLayoutTag, v19);
        CFRelease(v19);
        return 0;
      }
      uint64_t v13 = 560360820;
      if (mChannelLayoutTag > 10420230)
      {
        if (mChannelLayoutTag > 12320774)
        {
          if (mChannelLayoutTag <= 13434887)
          {
            if (mChannelLayoutTag <= 12910595)
            {
              if (mChannelLayoutTag > 12648463)
              {
                if (mChannelLayoutTag > 12779529)
                {
                  if (mChannelLayoutTag == 12779530)
                  {
                    CFStringRef v24 = @"5.1.4";
                  }
                  else
                  {
                    if (mChannelLayoutTag != 12845066) {
                      return v13;
                    }
                    CFStringRef v24 = @"7.1.2";
                  }
                }
                else if (mChannelLayoutTag == 12648464)
                {
                  CFStringRef v24 = @"9.1.6";
                }
                else
                {
                  if (mChannelLayoutTag != 12713992) {
                    return v13;
                  }
                  CFStringRef v24 = @"5.1.2";
                }
                goto LABEL_238;
              }
              if (mChannelLayoutTag == 12320775) {
                goto LABEL_233;
              }
              if (mChannelLayoutTag != 12386312)
              {
                int v30 = 12582924;
                goto LABEL_142;
              }
            }
            else
            {
              if (mChannelLayoutTag <= 13172743)
              {
                if (mChannelLayoutTag <= 13041670)
                {
                  if (mChannelLayoutTag != 12910596)
                  {
                    int v22 = 12976134;
                    goto LABEL_215;
                  }
                  goto LABEL_148;
                }
                if (mChannelLayoutTag != 13041671)
                {
                  int v33 = 13107207;
                  goto LABEL_232;
                }
LABEL_233:
                CFStringRef v24 = @"6.1";
                goto LABEL_238;
              }
              if (mChannelLayoutTag > 13303821)
              {
                if (mChannelLayoutTag == 13303822)
                {
                  CFStringRef v24 = @"7.1.6";
                }
                else
                {
                  if (mChannelLayoutTag != 13369368) {
                    return v13;
                  }
                  CFStringRef v24 = @"22.2";
                }
                goto LABEL_238;
              }
              if (mChannelLayoutTag != 13172744)
              {
                int v30 = 13238284;
LABEL_142:
                if (mChannelLayoutTag != v30) {
                  return v13;
                }
                CFStringRef v24 = @"7.1.4";
                goto LABEL_238;
              }
            }
LABEL_237:
            CFStringRef v24 = @"7.1";
            goto LABEL_238;
          }
          if (mChannelLayoutTag > 13893636)
          {
            if (mChannelLayoutTag <= 14155780)
            {
              if (mChannelLayoutTag <= 14024710)
              {
                if (mChannelLayoutTag != 13893637)
                {
                  int v23 = 13959174;
                  goto LABEL_227;
                }
LABEL_229:
                CFStringRef v24 = @"5.0";
                goto LABEL_238;
              }
              if (mChannelLayoutTag == 14024711) {
                goto LABEL_233;
              }
              int v26 = 14090248;
LABEL_236:
              if (mChannelLayoutTag != v26) {
                return v13;
              }
              goto LABEL_237;
            }
            if (mChannelLayoutTag > 14286854)
            {
              if (mChannelLayoutTag == 14286855) {
                goto LABEL_233;
              }
              int v26 = 14352392;
              goto LABEL_236;
            }
            if (mChannelLayoutTag == 14155781) {
              goto LABEL_229;
            }
            int v23 = 14221318;
LABEL_227:
            if (mChannelLayoutTag != v23) {
              return v13;
            }
            goto LABEL_228;
          }
          if (mChannelLayoutTag <= 13631499)
          {
            if (mChannelLayoutTag != 13434888)
            {
              if (mChannelLayoutTag == 13500428)
              {
                CFStringRef v24 = @"10.2";
              }
              else
              {
                if (mChannelLayoutTag != 13565962) {
                  return v13;
                }
                CFStringRef v24 = @"9.1";
              }
              goto LABEL_238;
            }
            goto LABEL_237;
          }
          if (mChannelLayoutTag > 13762571)
          {
            if (mChannelLayoutTag != 13762572)
            {
              int v29 = 13828110;
              goto LABEL_207;
            }
          }
          else if (mChannelLayoutTag != 13631500)
          {
            int v29 = 13697038;
LABEL_207:
            if (mChannelLayoutTag != v29) {
              return v13;
            }
            CFStringRef v24 = @"13.1";
            goto LABEL_238;
          }
          CFStringRef v24 = @"11.1";
          goto LABEL_238;
        }
        if (mChannelLayoutTag > 11337734)
        {
          if (mChannelLayoutTag > 11796488)
          {
            if (mChannelLayoutTag <= 12058631)
            {
              if (mChannelLayoutTag <= 11927558)
              {
                if (mChannelLayoutTag != 11796489 && mChannelLayoutTag != 11862025) {
                  return v13;
                }
                CFStringRef v24 = @"8.1";
                goto LABEL_238;
              }
              if (mChannelLayoutTag == 11927559) {
                goto LABEL_233;
              }
              int v26 = 11993096;
              goto LABEL_236;
            }
            if (mChannelLayoutTag > 12189700)
            {
              if (mChannelLayoutTag == 12189701) {
                goto LABEL_229;
              }
              int v23 = 12255238;
              goto LABEL_227;
            }
            if (mChannelLayoutTag == 12058632) {
              goto LABEL_237;
            }
            int v31 = 12124164;
            goto LABEL_147;
          }
          if (mChannelLayoutTag <= 11534342)
          {
            if (mChannelLayoutTag != 11337735 && mChannelLayoutTag != 11403271)
            {
              int v33 = 11468807;
              goto LABEL_232;
            }
            goto LABEL_233;
          }
          if (mChannelLayoutTag <= 11665415)
          {
            if (mChannelLayoutTag != 11534343)
            {
              int v26 = 11599880;
              goto LABEL_236;
            }
LABEL_156:
            CFStringRef v24 = @"7.0";
            goto LABEL_238;
          }
          if (mChannelLayoutTag != 11665416 && mChannelLayoutTag != 11730952) {
            return v13;
          }
LABEL_202:
          CFStringRef v24 = @"8.0";
          goto LABEL_238;
        }
        if (mChannelLayoutTag <= 10878983)
        {
          if (mChannelLayoutTag <= 10616839)
          {
            if (mChannelLayoutTag == 10420231) {
              goto LABEL_233;
            }
            if (mChannelLayoutTag == 10485768) {
              goto LABEL_237;
            }
            int v26 = 10551304;
          }
          else if (mChannelLayoutTag > 10747911)
          {
            if (mChannelLayoutTag == 10747912) {
              goto LABEL_237;
            }
            int v26 = 10813448;
          }
          else
          {
            if (mChannelLayoutTag == 10616840) {
              goto LABEL_237;
            }
            int v26 = 10682376;
          }
          goto LABEL_236;
        }
        if (mChannelLayoutTag > 11075588)
        {
          if (mChannelLayoutTag <= 11206661)
          {
            if (mChannelLayoutTag != 11075589)
            {
              int v22 = 11141126;
              goto LABEL_215;
            }
LABEL_191:
            CFStringRef v24 = @"4.1";
            goto LABEL_238;
          }
          if (mChannelLayoutTag != 11206662)
          {
            int v22 = 11272198;
LABEL_215:
            if (mChannelLayoutTag != v22) {
              return v13;
            }
          }
LABEL_219:
          CFStringRef v24 = @"6.0";
          goto LABEL_238;
        }
        if (mChannelLayoutTag == 10878984 || mChannelLayoutTag == 10944520) {
          goto LABEL_237;
        }
        int v25 = 11010052;
        goto LABEL_168;
      }
      if (mChannelLayoutTag <= 8454151)
      {
        if (mChannelLayoutTag > 7471106)
        {
          if (mChannelLayoutTag > 7929861)
          {
            if (mChannelLayoutTag > 8192006)
            {
              if (mChannelLayoutTag > 8323079)
              {
                if (mChannelLayoutTag == 8323080) {
                  goto LABEL_237;
                }
                int v26 = 8388616;
              }
              else
              {
                if (mChannelLayoutTag == 8192007) {
                  goto LABEL_233;
                }
                int v26 = 8257544;
              }
              goto LABEL_236;
            }
            if (mChannelLayoutTag > 8060933)
            {
              if (mChannelLayoutTag != 8060934)
              {
                int v23 = 8126470;
                goto LABEL_227;
              }
            }
            else if (mChannelLayoutTag != 7929862)
            {
              int v23 = 7995398;
              goto LABEL_227;
            }
LABEL_228:
            CFStringRef v24 = @"5.1";
            goto LABEL_238;
          }
          if (mChannelLayoutTag > 7667716)
          {
            if (mChannelLayoutTag > 7798788)
            {
              if (mChannelLayoutTag == 7798789) {
                goto LABEL_229;
              }
              int v27 = 7864325;
            }
            else
            {
              if (mChannelLayoutTag == 7667717) {
                goto LABEL_229;
              }
              int v27 = 7733253;
            }
            if (mChannelLayoutTag != v27) {
              return v13;
            }
            goto LABEL_229;
          }
          if (mChannelLayoutTag != 7471107)
          {
            if (mChannelLayoutTag != 7536644)
            {
              int v31 = 7602180;
LABEL_147:
              if (mChannelLayoutTag != v31) {
                return v13;
              }
              goto LABEL_148;
            }
            goto LABEL_148;
          }
LABEL_212:
          CFStringRef v24 = @"3.0";
          goto LABEL_238;
        }
        if (mChannelLayoutTag <= 7012355)
        {
          if (mChannelLayoutTag <= 6750209)
          {
            if (mChannelLayoutTag == 6553601)
            {
              CFStringRef v20 = @"Mono";
            }
            else
            {
              if (mChannelLayoutTag != 6619138 && mChannelLayoutTag != 6684674) {
                return v13;
              }
              CFStringRef v20 = @"Stereo";
            }
          }
          else if (mChannelLayoutTag > 6881281)
          {
            if (mChannelLayoutTag == 6881282)
            {
              CFStringRef v20 = @"X-Y";
            }
            else
            {
              if (mChannelLayoutTag != 6946818) {
                return v13;
              }
              CFStringRef v20 = @"Binaural";
            }
          }
          else if (mChannelLayoutTag == 6750210)
          {
            CFStringRef v20 = @"Matrix Stereo";
          }
          else
          {
            if (mChannelLayoutTag != 6815746) {
              return v13;
            }
            CFStringRef v20 = @"Mid-Side";
          }
          goto LABEL_27;
        }
        if (mChannelLayoutTag <= 7208965)
        {
          switch(mChannelLayoutTag)
          {
            case 7012356:
              CFStringRef v20 = @"Ambisonic B Format";
              break;
            case 7077892:
              CFStringRef v20 = @"Quadraphonic";
              break;
            case 7143429:
              CFStringRef v20 = @"Pentagonal";
              break;
            default:
              return v13;
          }
        }
        else
        {
          if (mChannelLayoutTag <= 7340039)
          {
            if (mChannelLayoutTag == 7208966)
            {
              CFStringRef v20 = @"Hexagonal";
            }
            else
            {
              if (mChannelLayoutTag != 7274504) {
                return v13;
              }
              CFStringRef v20 = @"Octagonal";
            }
            goto LABEL_27;
          }
          if (mChannelLayoutTag != 7340040)
          {
            int v32 = 7405571;
LABEL_211:
            if (mChannelLayoutTag != v32) {
              return v13;
            }
            goto LABEL_212;
          }
          CFStringRef v20 = @"Cube";
        }
        goto LABEL_27;
      }
      if (mChannelLayoutTag > 9371654)
      {
        if (mChannelLayoutTag > 9895939)
        {
          if (mChannelLayoutTag <= 10158085)
          {
            if (mChannelLayoutTag <= 10027011)
            {
              if (mChannelLayoutTag != 9895940)
              {
                int v25 = 9961476;
LABEL_168:
                if (mChannelLayoutTag != v25) {
                  return v13;
                }
                goto LABEL_192;
              }
LABEL_148:
              CFStringRef v24 = @"4.0";
LABEL_238:
              CFStringRef Copy = CFStringCreateCopy(0, v24);
              goto LABEL_239;
            }
            if (mChannelLayoutTag != 10027012)
            {
              int v34 = 10092549;
              goto LABEL_190;
            }
LABEL_192:
            CFStringRef v24 = @"3.1";
            goto LABEL_238;
          }
          if (mChannelLayoutTag <= 10289158)
          {
            if (mChannelLayoutTag == 10158086) {
              goto LABEL_219;
            }
            int v28 = 10223623;
            goto LABEL_124;
          }
          if (mChannelLayoutTag == 10289159) {
            goto LABEL_233;
          }
          int v33 = 10354695;
LABEL_232:
          if (mChannelLayoutTag != v33) {
            return v13;
          }
          goto LABEL_233;
        }
        if (mChannelLayoutTag <= 9568276)
        {
          if (mChannelLayoutTag == 9371655) {
            goto LABEL_156;
          }
          if (mChannelLayoutTag == 9437192) {
            goto LABEL_202;
          }
          if (mChannelLayoutTag != 9502736) {
            return v13;
          }
          CFStringRef v20 = @"TMH 10.2 (16 channel)";
          goto LABEL_27;
        }
        if (mChannelLayoutTag > 9764865)
        {
          if (mChannelLayoutTag == 9764866)
          {
            CFStringRef v24 = @"1.1";
            goto LABEL_238;
          }
          int v32 = 9830403;
          goto LABEL_211;
        }
        if (mChannelLayoutTag == 9568277)
        {
          CFStringRef v20 = @"TMH 10.2 (21 channel)";
          goto LABEL_27;
        }
        int v28 = 9699335;
        goto LABEL_124;
      }
      if (mChannelLayoutTag > 8912899)
      {
        if (mChannelLayoutTag > 9109509)
        {
          if (mChannelLayoutTag > 9240581)
          {
            if (mChannelLayoutTag == 9240582) {
              goto LABEL_219;
            }
            int v33 = 9306119;
            goto LABEL_232;
          }
          if (mChannelLayoutTag == 9109510) {
            goto LABEL_219;
          }
          int v28 = 9175047;
LABEL_124:
          if (mChannelLayoutTag != v28) {
            return v13;
          }
          goto LABEL_156;
        }
        if (mChannelLayoutTag == 8912900) {
          goto LABEL_192;
        }
        if (mChannelLayoutTag == 8978437) {
          goto LABEL_191;
        }
        int v34 = 9043973;
      }
      else
      {
        if (mChannelLayoutTag <= 8650755)
        {
          if (mChannelLayoutTag == 8454152) {
            goto LABEL_237;
          }
          if (mChannelLayoutTag != 8519688)
          {
            int v32 = 8585219;
            goto LABEL_211;
          }
          CFStringRef v20 = @"SMPTE DTV";
LABEL_27:
          CFStringRef Copy = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v20, @"AudioChannelLayouts", v7, a4);
LABEL_239:
          uint64_t v13 = 0;
          *a2 = Copy;
          return v13;
        }
        if (mChannelLayoutTag <= 8781827)
        {
          if (mChannelLayoutTag != 8650756)
          {
            if (mChannelLayoutTag != 8716291) {
              return v13;
            }
            CFStringRef v24 = @"2.1";
            goto LABEL_238;
          }
          goto LABEL_148;
        }
        if (mChannelLayoutTag == 8781828) {
          goto LABEL_192;
        }
        int v34 = 8847365;
      }
LABEL_190:
      if (mChannelLayoutTag != v34) {
        return v13;
      }
      goto LABEL_191;
    }
  }
  else if (mChannelLayoutTag)
  {
    goto LABEL_3;
  }
  if (a1->mNumberChannelDescriptions == 1)
  {
    AudioChannelLabel v12 = a1->mChannelDescriptions[0].mChannelLabel;
    *(void *)&v35.mChannelDescriptions[0].AudioChannelLabel mChannelLabel = 0;
    *(void *)&v35.int8x8_t mChannelBitmap = 0;
    v35.int mChannelLayoutTag = v12;
    p_AudioChannelLabel mChannelLabel = &v35;
    return AudioFormatProperty_ChannelName((AudioChannelDescription *)p_mChannelLabel, a2, a3, a4);
  }
  if (!AudioFormatProperty_TagForChannelLayout(a1, &v36))
  {
    int mChannelLayoutTag = v36;
    goto LABEL_18;
  }
  return AudioFormatProperty_ChannelLayoutNameFromDescriptions(a1, a2, 1);
}

void sub_18FFBFFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_AudibleProtectedContentCanBeAuthorized(uint64_t a1, _DWORD *a2)
{
  OSType v4 = *(_DWORD *)(a1 + 8);
  unsigned int v17 = 0;
  uint64_t PropertyInfo = OpenCodecComponent(v4, &v17, 0x61646563u);
  if (!PropertyInfo)
  {
    CFStringRef v16 = v17;
    UInt32 outSize = 0;
    Boolean outWritable = 0;
    uint64_t PropertyInfo = AudioCodecGetPropertyInfo(v17, 0x61617468u, &outSize, &outWritable);
    if (!PropertyInfo && outSize == 64)
    {
      long long v6 = *(_OWORD *)(a1 + 16);
      v9[0] = *(_OWORD *)a1;
      v9[1] = v6;
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = v7;
      uint64_t v12 = *(void *)(a1 + 48);
      int v13 = 0;
      UInt32 outSize = 64;
      uint64_t PropertyInfo = AudioCodecGetProperty(v16, 0x61617468u, &outSize, v9);
      if (!PropertyInfo) {
        *a2 = v13;
      }
    }
    AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&v16);
  }
  return PropertyInfo;
}

void sub_18FFC00A4(_Unwind_Exception *a1)
{
  AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)(v1 - 48));
  _Unwind_Resume(a1);
}

void AudioCodecAutoDisposer::~AudioCodecAutoDisposer(OpaqueAudioComponentInstance **this)
{
  uint64_t v1 = *this;
  if (v1) {
    AudioComponentInstanceDispose(v1);
  }
}

uint64_t AMRAudioStream::HandleDiscontinuity(AMRAudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  return 0;
}

uint64_t AMRAudioStream::GeneratePackets(uint64_t a1)
{
  uint64_t result = 0;
  int v3 = *(_DWORD *)(a1 + 236);
  int v4 = -1;
  if (v3 > 155)
  {
    if (v3 == 252)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 256);
      long long v6 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_70;
    }
    if (v3 == 247)
    {
      unsigned int v7 = *(_DWORD *)(a1 + 256);
      CFAllocatorRef v8 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_64;
    }
    if (v3 != 156) {
      goto LABEL_73;
    }
LABEL_11:
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(v9 + 96);
    while (1)
    {
      uint64_t v11 = *(void *)(v9 + 88);
      uint64_t v12 = v11 + *(unsigned int *)(v9 + 80);
      unsigned int v13 = v12 - v10;
      if (v10 < v11 || v12 <= v10 || v12 == v10)
      {
        uint64_t result = 0;
        int v4 = 156;
        goto LABEL_73;
      }
      *(_DWORD *)(a1 + 344) = 0;
      CFStringRef v16 = v13 ? (unsigned __int8 *)(*(void *)(v9 + 72) + (v10 - v11)) : 0;
      int v17 = 0;
      unsigned int v18 = 0;
      unsigned int v19 = 0;
      *(unsigned char *)(a1 + 340) = 0;
      CFStringRef v20 = (__int16 *)(*(unsigned char *)(a1 + 404) ? &_AMR_WB_FRAMESIZE : &_AMR_NB_FRAMESIZE);
      do
      {
        unsigned int v21 = v20[((unint64_t)v16[v19] >> 3) & 0xF];
        if (!v20[((unint64_t)v16[v19] >> 3) & 0xF]) {
          goto LABEL_72;
        }
        if (v13 - v19 >= v21)
        {
          *(_DWORD *)(a1 + 344) = ++v18;
        }
        else
        {
          int v17 = 1;
          *(unsigned char *)(a1 + 340) = 1;
          *(_DWORD *)(a1 + 332) = v19;
          *(_DWORD *)(a1 + 336) = v21;
        }
        v19 += v21;
      }
      while (v19 < v13);
      unsigned int v22 = *(_DWORD *)(a1 + 408);
      if (!v22) {
        __assert_rtn("GeneratePackets", "AMRAudioStream.cpp", 197, "mSmallPacketsPerLargePacket > 0");
      }
      unsigned int v23 = v18 / v22;
      *(_DWORD *)(a1 + 412) = v18 / v22;
      *(_DWORD *)(a1 + 416) = v18 % v22;
      *(_DWORD *)(a1 + 432) = 0;
      if (v22 <= v18)
      {
        if (*(_DWORD *)(a1 + 200) < v23)
        {
          uint64_t v25 = (1 << -__clz(v23 - 1));
          *(_DWORD *)(a1 + 200) = v25;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v25);
          unsigned int v23 = *(_DWORD *)(a1 + 412);
        }
        *(_DWORD *)(a1 + 420) = 0;
        int v26 = *(AudioStreamPacketDescription **)(a1 + 192);
        if (v23)
        {
          unint64_t v27 = 0;
          unsigned int v28 = 0;
          unsigned int v29 = *(_DWORD *)(a1 + 408);
          while (1)
          {
            int v30 = &v26[v27];
            v30->mStartOffset = v28;
            v30->UInt32 mVariableFramesInPacket = 0;
            *(void *)(a1 + 424) = 0;
            UInt32 v31 = 0;
            if (v29) {
              break;
            }
LABEL_45:
            v30->mDataByteSize = v31;
            *(_DWORD *)(a1 + 420) = ++v27;
            if (v27 >= v23 || v28 >= v13) {
              goto LABEL_47;
            }
          }
          if (*(unsigned char *)(a1 + 404)) {
            int v32 = (__int16 *)&_AMR_WB_FRAMESIZE;
          }
          else {
            int v32 = (__int16 *)&_AMR_NB_FRAMESIZE;
          }
          unsigned int v33 = 1;
          while (1)
          {
            int v34 = v32[((unint64_t)v16[v28] >> 3) & 0xF];
            if (!v32[((unint64_t)v16[v28] >> 3) & 0xF]) {
              break;
            }
            v31 += v34;
            *(_DWORD *)(a1 + 428) = v31;
            v28 += v34;
            *(_DWORD *)(a1 + 432) += v34;
            *(_DWORD *)(a1 + 424) = v33;
            if (v33 < v29)
            {
              ++v33;
              if (v28 < v13) {
                continue;
              }
            }
            goto LABEL_45;
          }
LABEL_72:
          *(unsigned char *)(a1 + 177) = 1;
          uint64_t result = 1685348671;
          int v4 = -1;
          goto LABEL_73;
        }
LABEL_47:
        AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), *(_DWORD *)(a1 + 432), v23, v16, v26, 1);
        *(void *)(a1 + 184) += *(unsigned int *)(a1 + 412);
        uint64_t v9 = *(void *)(a1 + 8);
        uint64_t v24 = *(unsigned int *)(a1 + 432);
        int v17 = *(unsigned __int8 *)(a1 + 340);
        uint64_t v10 = *(void *)(v9 + 96);
      }
      else
      {
        uint64_t v24 = 0;
      }
      v10 += v24;
      *(void *)(v9 + 96) = v10;
      if (v17 || *(_DWORD *)(a1 + 416)) {
        break;
      }
      if (!*(_DWORD *)(a1 + 344))
      {
        uint64_t v10 = *(void *)(v9 + 88) + *(unsigned int *)(v9 + 80);
        *(void *)(v9 + 96) = v10;
      }
    }
    if (*(unsigned char *)(a1 + 404)) {
      int v35 = 61;
    }
    else {
      int v35 = 32;
    }
    size_t v36 = (v35 * *(_DWORD *)(a1 + 408));
    if (*(_DWORD *)(a1 + 284) < v36)
    {
      *(_DWORD *)(a1 + 284) = v36;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v36, 0);
    }
    *(void *)(a1 + 440) = *(void *)(a1 + 288);
    *(_DWORD *)(a1 + 448) = 0;
    if (!*(_DWORD *)(a1 + 200))
    {
      *(_DWORD *)(a1 + 200) = 1;
      CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
    }
    UInt32 v37 = 0;
    unsigned int v38 = 0;
    uint64_t v39 = *(void *)(a1 + 192);
    *(void *)uint64_t v39 = 0;
    *(_DWORD *)(v39 + 8) = 0;
    *(void *)(a1 + 424) = 0;
    while (1)
    {
      if (v38 >= *(_DWORD *)(a1 + 408))
      {
        int v50 = *(AudioStreamPacketDescription **)(a1 + 192);
        v50->mDataByteSize = v37;
        AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v37, 1u, *(const void **)(a1 + 288), v50, 1);
        ++*(void *)(a1 + 184);
        goto LABEL_11;
      }
      unsigned int v7 = 1;
      *(_DWORD *)(a1 + 256) = 1;
      CFAllocatorRef v8 = (unsigned __int8 *)(*(void *)(a1 + 440) + *(unsigned int *)(a1 + 448));
      *(void *)(a1 + 264) = v8;
LABEL_64:
      unsigned int v52 = v7;
      StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v52, v8);
      unsigned int v40 = v52;
      int v41 = *(_DWORD *)(a1 + 256);
      *(void *)(a1 + 264) += v52;
      int v42 = v41 - v40;
      *(_DWORD *)(a1 + 256) = v42;
      if (v42)
      {
        uint64_t result = 0;
        int v4 = 247;
        goto LABEL_73;
      }
      int v43 = (unsigned __int8 *)(*(void *)(a1 + 440) + *(unsigned int *)(a1 + 448));
      if (*(unsigned char *)(a1 + 404)) {
        uint64_t v44 = (__int16 *)&_AMR_WB_FRAMESIZE;
      }
      else {
        uint64_t v44 = (__int16 *)&_AMR_NB_FRAMESIZE;
      }
      int v45 = v44[((unint64_t)*v43 >> 3) & 0xF];
      *(_DWORD *)(a1 + 452) = v45;
      if (!v45) {
        goto LABEL_72;
      }
      unsigned int v5 = v45 - 1;
      *(_DWORD *)(a1 + 256) = v5;
      long long v6 = v43 + 1;
      *(void *)(a1 + 264) = v43 + 1;
LABEL_70:
      unsigned int v51 = v5;
      StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v51, v6);
      unsigned int v46 = v51;
      int v47 = *(_DWORD *)(a1 + 256);
      *(void *)(a1 + 264) += v51;
      int v48 = v47 - v46;
      *(_DWORD *)(a1 + 256) = v48;
      if (v48) {
        break;
      }
      int v49 = *(_DWORD *)(a1 + 452);
      UInt32 v37 = *(_DWORD *)(a1 + 428) + v49;
      *(_DWORD *)(a1 + 428) = v37;
      *(_DWORD *)(a1 + 448) += v49;
      unsigned int v38 = *(_DWORD *)(a1 + 424) + 1;
      *(_DWORD *)(a1 + 424) = v38;
    }
    uint64_t result = 0;
    int v4 = 252;
    goto LABEL_73;
  }
  if (v3 == -1) {
    return result;
  }
  if (!v3) {
    goto LABEL_11;
  }
LABEL_73:
  *(_DWORD *)(a1 + 236) = v4;
  return result;
}

uint64_t AMRAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 348;
  int v5 = *(_DWORD *)(a1 + 236);
  if (v5 <= 57)
  {
    if (v5 == -1) {
      return 0;
    }
    if (v5) {
      goto LABEL_22;
    }
    uint64_t v8 = *(void *)(a1 + 8);
    unsigned int v51 = 1;
    if (!*(unsigned char *)(v8 + 104))
    {
      *(unsigned char *)(v8 + 104) = 1;
      uint64_t v9 = *(void (**)(void, void, uint64_t, unsigned int *))(v8 + 24);
      if (v9) {
        v9(*(void *)(v8 + 40), *(unsigned int *)(v8 + 8), 1717988724, &v51);
      }
    }
    goto LABEL_11;
  }
  if (v5 == 58)
  {
LABEL_11:
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *(void *)(v10 + 88);
    uint64_t v12 = *(void *)(v10 + 96);
    uint64_t v13 = v11 + *(unsigned int *)(v10 + 80);
    BOOL v15 = v12 < v11 || v13 <= v12 || v13 - v12 == 0;
    if (v15)
    {
      uint64_t result = 0;
      int v17 = 58;
      goto LABEL_37;
    }
    unsigned int v18 = 6;
    *(_DWORD *)(a1 + 256) = 6;
    unsigned int v19 = (unsigned __int8 *)(a1 + 348);
    *(void *)(a1 + 264) = a1 + 348;
    goto LABEL_23;
  }
  if (v5 != 60)
  {
    if (v5 == 64)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 256);
      unsigned int v7 = *(unsigned __int8 **)(a1 + 264);
LABEL_29:
      unsigned int v51 = v6;
      StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v51, v7);
      unsigned int v24 = v51;
      int v25 = *(_DWORD *)(a1 + 256);
      *(void *)(a1 + 264) += v51;
      int v26 = v25 - v24;
      *(_DWORD *)(a1 + 256) = v26;
      if (!v26)
      {
        if (*(void *)v4 != *(void *)AMR_WBMagicNumber
          || *(unsigned __int8 *)(v4 + 8) != (unint64_t)AMR_WBMagicNumber[8])
        {
          *(unsigned char *)(a1 + 177) = 1;
          *(_DWORD *)(a1 + 236) = -1;
          return 1685348671;
        }
        *(unsigned char *)(a1 + 404) = 1;
        *(void *)(a1 + 104) = 9;
        goto LABEL_44;
      }
      uint64_t result = 0;
      int v17 = 64;
LABEL_37:
      *(_DWORD *)(a1 + 236) = v17;
      return result;
    }
LABEL_22:
    uint64_t result = 0;
    int v17 = -1;
    goto LABEL_37;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 256);
  uint64_t v10 = *(void *)(a1 + 8);
  unsigned int v19 = *(unsigned __int8 **)(a1 + 264);
LABEL_23:
  unsigned int v51 = v18;
  StreamBuffer::Copy((void *)(v10 + 72), &v51, v19);
  unsigned int v20 = v51;
  int v21 = *(_DWORD *)(a1 + 256);
  *(void *)(a1 + 264) += v51;
  int v22 = v21 - v20;
  *(_DWORD *)(a1 + 256) = v22;
  if (v22)
  {
    uint64_t result = 0;
    int v17 = 60;
    goto LABEL_37;
  }
  if (*(_DWORD *)(a1 + 348) != AMRMagicNumber || *(unsigned __int16 *)(a1 + 352) != (unsigned __int16)word_1E9273694)
  {
    unsigned int v6 = 3;
    *(_DWORD *)(a1 + 256) = 3;
    unsigned int v7 = (unsigned __int8 *)(a1 + 354);
    *(void *)(a1 + 264) = a1 + 354;
    goto LABEL_29;
  }
  int v28 = *(unsigned __int8 *)(a1 + 404);
  uint64_t v29 = 9;
  if (!*(unsigned char *)(a1 + 404)) {
    uint64_t v29 = 6;
  }
  *(void *)(a1 + 104) = v29;
  if (!v28)
  {
    __int16 v30 = -127;
    int v31 = 1919770995;
    goto LABEL_45;
  }
LABEL_44:
  __int16 v30 = -125;
  int v31 = 1651990899;
LABEL_45:
  *(void *)(v4 + 9) = 0x616D72660C000000;
  uint64_t v32 = v4 + 9;
  *(_DWORD *)(v32 + 8) = v31;
  *(void *)(v32 + 12) = 0x61646E650A000000;
  *(_WORD *)(v32 + 20) = 0;
  *(void *)(v32 + 22) = 0x726D616411000000;
  *(_DWORD *)(v32 + 30) = 1819308129;
  int v33 = 1;
  *(unsigned char *)(a1 + 391) = 1;
  *(_WORD *)(a1 + 392) = v30;
  *(_WORD *)(a1 + 394) = 256;
  *(void *)(v32 + 39) = 0x8000000;
  *(_DWORD *)(a1 + 128) = 47;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), 0x2FuLL, 0);
  memcpy(*(void **)(a1 + 120), (const void *)v32, *(unsigned int *)(a1 + 128));
  BOOL v15 = *(unsigned char *)(a1 + 404) == 0;
  *(void *)(a1 + 24) = qword_1901C6090[*(unsigned char *)(a1 + 404) == 0];
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (v15) {
    int v34 = 1935764850;
  }
  else {
    int v34 = 1935767394;
  }
  *(_DWORD *)(a1 + 32) = v34;
  *(_DWORD *)(a1 + 52) = 1;
  UInt32 ioPropertyDataSize = 40;
  AudioFormatGetProperty(0x666D7469u, 0x2Fu, *(const void **)(a1 + 120), &ioPropertyDataSize, (void *)(a1 + 24));
  unsigned int v35 = *(_DWORD *)(a1 + 44);
  if (*(unsigned char *)(a1 + 404)) {
    unsigned int v36 = 320;
  }
  else {
    unsigned int v36 = 160;
  }
  *(_DWORD *)(a1 + 408) = v35 / v36;
  if (v36 <= v35)
  {
    if (v35 / v36 < 0x10) {
      goto LABEL_55;
    }
    int v33 = 15;
  }
  *(_DWORD *)(a1 + 408) = v33;
LABEL_55:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a1 + 24);
  uint64_t v37 = *(void *)(a1 + 8);
  unsigned int v51 = 1;
  if (!*(unsigned char *)(v37 + 105))
  {
    *(unsigned char *)(v37 + 105) = 1;
    unsigned int v38 = *(void (**)(void, void, uint64_t, unsigned int *))(v37 + 24);
    if (v38)
    {
      v38(*(void *)(v37 + 40), *(unsigned int *)(v37 + 8), 1684434292, &v51);
      uint64_t v37 = *(void *)(a1 + 8);
    }
  }
  unsigned int v51 = 1;
  uint64_t v39 = *(void (**)(void, void, uint64_t, unsigned int *))(v37 + 24);
  if (v39)
  {
    v39(*(void *)(v37 + 40), *(unsigned int *)(v37 + 8), 1685022310, &v51);
    uint64_t v37 = *(void *)(a1 + 8);
    unsigned int v40 = *(void (**)(void, void, uint64_t, unsigned int *))(v37 + 24);
    unsigned int v51 = 1;
    *(unsigned char *)(v37 + 108) = 1;
    if (v40)
    {
      v40(*(void *)(v37 + 40), *(unsigned int *)(v37 + 8), 1835493731, &v51);
      uint64_t v37 = *(void *)(a1 + 8);
    }
  }
  else
  {
    unsigned int v51 = 1;
    *(unsigned char *)(v37 + 108) = 1;
  }
  unsigned int v51 = 1;
  if (!*(_DWORD *)(v37 + 112))
  {
    *(_DWORD *)(v37 + 112) = 1;
    int v41 = *(void (**)(void, void, uint64_t, unsigned int *))(v37 + 24);
    if (v41)
    {
      v41(*(void *)(v37 + 40), *(unsigned int *)(v37 + 8), 1919247481, &v51);
      uint64_t v37 = *(void *)(a1 + 8);
    }
  }
  uint64_t v42 = 0;
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
  *(void *)(a2 + 16) = 0;
  uint64_t v43 = *(void *)(v37 + 88);
  uint64_t v44 = *(void *)(v37 + 96);
  uint64_t v45 = v43 + *(unsigned int *)(v37 + 80);
  BOOL v46 = v44 < v43 || v45 <= v44;
  int v47 = v46;
  int v48 = v45 - v44;
  if (!v46 && v48) {
    uint64_t v42 = *(void *)(v37 + 72) + (v44 - v43);
  }
  uint64_t result = 0;
  *(void *)(a2 + 32) = v42;
  if (v47) {
    int v49 = 0;
  }
  else {
    int v49 = v48;
  }
  *(_DWORD *)(a2 + 24) = v49;
  return result;
}

uint64_t AMRAudioStream::Flush(AMRAudioStream *this)
{
  if (*((_DWORD *)this + 104))
  {
    long long v2 = (AudioStreamPacketDescription *)*((void *)this + 24);
    v2->mStartOffset = 0;
    UInt32 v3 = *((_DWORD *)this + 107);
    v2->UInt32 mVariableFramesInPacket = 0;
    v2->mDataByteSize = v3;
    AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v3, 1u, *((const void **)this + 36), v2, 0);
    *((unsigned char *)this + 340) = 0;
  }
  return 0;
}

void AMRAudioStream::~AMRAudioStream(AMRAudioStream *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x192FC8940);
}

uint64_t AUOOPRenderingClient::NeverTimesOut(AUOOPRenderingClient *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_1E9299000;
  {
    uint64_t v1 = (unsigned char *)&unk_1E9299000;
    if (v3)
    {
      AUOOPRenderingClient::NeverTimesOut(void)::kNeverTimeout = AUOOPRenderingClient::NeverTimesOut(void)::$_0::operator()();
      uint64_t v1 = (unsigned char *)&unk_1E9299000;
    }
  }
  return v1[616];
}

BOOL AUOOPRenderingClient::NeverTimesOut(void)::$_0::operator()()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v0 = getenv("IPCAU_NeverTimeout");
  if (v0)
  {
    if (kInterAppAudioScope)
    {
      uint64_t v1 = *(id *)kInterAppAudioScope;
      if (!v1) {
        return v0 != 0;
      }
    }
    else
    {
      uint64_t v1 = MEMORY[0x1E4F14500];
      id v2 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315394;
      int v5 = "AUOOPRenderingClient.mm";
      __int16 v6 = 1024;
      int v7 = 44;
      _os_log_impl(&dword_18FEC0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Timeouts disabled!", (uint8_t *)&v4, 0x12u);
    }
  }
  return v0 != 0;
}

unint64_t AUOOPSharedMemory::InitializationParams::requiredByteSize(AUOOPSharedMemory::InitializationParams *this)
{
  uint64_t v2 = caulk::numeric::exceptional_add<unsigned long>(4 * *((void *)this + 1) + 4316, 15);
  int v3 = *((_DWORD *)this + 5);
  unsigned int v4 = v3 - 128;
  unsigned int v5 = (16 * v3) | 8;
  if (v4 >= 0x1309) {
    uint64_t v6 = 2056;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = caulk::numeric::exceptional_add<unsigned long>(v6, 15);
  uint64_t v8 = *((unsigned int *)this + 4);
  audioipc::SharedAudioBuffers::extendASBDs(&v27, *(long long **)this, *((void *)this + 1));
  if (!v8) {
    std::terminate();
  }
  uint64_t v26 = v2;
  uint64_t v9 = v27;
  if (v28 == v27)
  {
    uint64_t v11 = 0;
    if (v27) {
LABEL_22:
    }
      operator delete(v9);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 48 * ((v28 - v27) / 48);
    do
    {
      if (*(_DWORD *)&v9[v10 + 16] <= *(_DWORD *)&v9[v10 + 40]) {
        unsigned int v13 = *(_DWORD *)&v9[v10 + 40];
      }
      else {
        unsigned int v13 = *(_DWORD *)&v9[v10 + 16];
      }
      unsigned int v14 = caulk::numeric::exceptional_mul<unsigned int>(v8, v13);
      unint64_t v15 = caulk::numeric::exceptional_add<unsigned long>(v14, 15);
      if (HIDWORD(v15))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &unk_1EDF950F8;
      }
      if ((v9[v10 + 12] & 0x20) != 0) {
        unsigned int v16 = *(_DWORD *)&v9[v10 + 28];
      }
      else {
        unsigned int v16 = 1;
      }
      unsigned int v17 = caulk::numeric::exceptional_mul<unsigned int>(v15 & 0xFFFFFFF0, v16);
      uint64_t v11 = caulk::numeric::exceptional_add<unsigned long>(v11, v17);
      if (!*(_DWORD *)&v9[v10 + 24] || !*(_DWORD *)&v9[v10 + 20])
      {
        uint64_t v18 = caulk::numeric::exceptional_add<unsigned long>(16 * v8, 15);
        uint64_t v11 = caulk::numeric::exceptional_add<unsigned long>(v11, v18 & 0xFFFFFFFFFFFFFFF0);
      }
      UInt32 ioPropertyDataSize = 4;
      int outPropertyData = 0;
      if (!AudioFormatGetProperty(0x66646570u, 0x28u, &v9[v10], &ioPropertyDataSize, &outPropertyData)
        && outPropertyData)
      {
        uint64_t v19 = caulk::numeric::exceptional_add<unsigned long>(16 * v8, 15);
        uint64_t v11 = caulk::numeric::exceptional_add<unsigned long>(v11, v19 & 0xFFFFFFFFFFFFFFF0);
      }
      v10 += 48;
    }
    while (v12 != v10);
    if (v9) {
      goto LABEL_22;
    }
  }
  int v20 = *((_DWORD *)this + 5);
  unsigned int v21 = v20 - 128;
  unsigned int v22 = (32 * v20) | 8;
  if (v21 >= 0x1309) {
    uint64_t v23 = 4104;
  }
  else {
    uint64_t v23 = v22;
  }
  return (v7 & 0xFFFFFFFFFFFFFFF0)
       + (v26 & 0xFFFFFFFFFFFFFFF0)
       + v11
       + (caulk::numeric::exceptional_add<unsigned long>(v23, 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_18FFC0ED0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

const char *audioipc::eventlink_primitive::activate()
{
  id v0 = (const char *)os_eventlink_activate();
  if (v0) {
    audioipc::log_and_throw((audioipc *)"os_eventlink_activate failed", v0);
  }
  uint64_t result = (const char *)os_eventlink_associate();
  if (result) {
    audioipc::log_and_throw((audioipc *)"os_eventlink_associate failed", result);
  }
  return result;
}

void std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unsigned int v4 = v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<audioipc::SharedAudioBuffers::Element,0>(v4);
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::~rt_sender(uint64_t a1)
{
  return a1;
}

uint64_t audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::stop(uint64_t result)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(result + 49));
  if ((v1 & 1) == 0)
  {
    unsigned int v2 = atomic_load(*(unsigned int **)(result + 24));
    if (v2 != 2)
    {
      atomic_store(1u, (unsigned __int8 *)(result + 49));
      atomic_store(2u, *(unsigned int **)(result + 24));
      audioipc::eventlink_primitive::timed_wait_signal_or_error(*(audioipc::eventlink_primitive **)(result + 56), 0.02);
      return os_eventlink_cancel();
    }
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<audioipc::SharedAudioBuffers::Element,0>(void *a1)
{
  unsigned int v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
}

void audioipc::log_and_throw(audioipc *this, const char *a2)
{
  int v2 = (int)a2;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = CADefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = this;
    __int16 v8 = 1024;
    int v9 = v2;
    _os_log_fault_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_FAULT, "EXCEPTION: %s (%d)", (uint8_t *)&v6, 0x12u);
  }

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, (const char *)this);
}

void sub_18FFC11B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AUOOPSharedMemory::init2(uint64_t a1, AUOOPSharedMemory::InitializationParams *this, _DWORD *a3, unint64_t a4)
{
  if (a4 < AUOOPSharedMemory::InitializationParams::requiredByteSize(this)) {
    goto LABEL_51;
  }
  __int16 v8 = (char *)a3 + a4;
  *(void *)a1 = a3;
  *a3 = 4096;
  int v9 = (_DWORD *)((char *)a3
                + (caulk::numeric::exceptional_add<unsigned long>(4 * *((void *)this + 1) + 4316, 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)(a1 + 8) = v9;
  int v10 = *((_DWORD *)this + 5);
  unsigned int v11 = v10 - 128;
  int v12 = 16 * v10;
  if (v11 >= 0x1309) {
    int v12 = 2048;
  }
  *int v9 = v12;
  unsigned int v13 = (int *)((char *)v9 + (caulk::numeric::exceptional_add<unsigned long>(v12 | 8u, 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)(a1 + 16) = v13;
  int v14 = *((_DWORD *)this + 5);
  unsigned int v15 = v14 - 128;
  int v16 = 32 * v14;
  if (v15 >= 0x1309) {
    int v16 = 4096;
  }
  *unsigned int v13 = v16;
  unsigned int v17 = (char *)v13 + (caulk::numeric::exceptional_add<unsigned long>(v16 | 8u, 15) & 0xFFFFFFFFFFFFFFF0);
  if (v17 > v8) {
    goto LABEL_51;
  }
  uint64_t v18 = (void *)(a1 + 24);
  if (*(unsigned char *)(a1 + 56))
  {
    int outPropertyData = (void **)(a1 + 24);
    std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100](&outPropertyData);
    *(unsigned char *)(a1 + 56) = 0;
  }
  uint64_t v19 = *((unsigned int *)this + 4);
  audioipc::SharedAudioBuffers::extendASBDs((char **)__p, *(long long **)this, *((void *)this + 1));
  unsigned int v21 = (char *)__p[0];
  int v20 = __p[1];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  void *v18 = 0;
  *(_DWORD *)(a1 + 48) = v19;
  if (!v19 || (v17 & 0xF) != 0) {
    goto LABEL_51;
  }
  if (v20 == v21)
  {
    uint64_t v44 = v17;
  }
  else
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 4);
    if (v22 >> 57) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int v47 = v8;
    uint64_t v54 = a1 + 40;
    int outPropertyData = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<audioipc::SharedAudioBuffers::Element>>(v22);
    unsigned int v51 = outPropertyData;
    unsigned int v52 = outPropertyData;
    int v53 = &outPropertyData[16 * v23];
    std::vector<audioipc::SharedAudioBuffers::Element>::__swap_out_circular_buffer((uint64_t *)(a1 + 24), &outPropertyData);
    std::__split_buffer<audioipc::SharedAudioBuffers::Element>::~__split_buffer((uint64_t)&outPropertyData);
    unsigned int v24 = &v21[48 * v22];
    BOOL v46 = v17;
    do
    {
      unint64_t v26 = *(void *)(a1 + 32);
      unint64_t v25 = *(void *)(a1 + 40);
      if (v26 >= v25)
      {
        uint64_t v28 = (uint64_t)(v26 - *v18) >> 7;
        if ((unint64_t)(v28 + 1) >> 57) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v25 - *v18;
        uint64_t v30 = v29 >> 6;
        if (v29 >> 6 <= (unint64_t)(v28 + 1)) {
          uint64_t v30 = v28 + 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        uint64_t v54 = a1 + 40;
        if (v31) {
          unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<audioipc::SharedAudioBuffers::Element>>(v31);
        }
        else {
          uint64_t v32 = 0;
        }
        int outPropertyData = (void **)v31;
        unsigned int v51 = (void **)(v31 + (v28 << 7));
        unsigned int v52 = v51;
        int v53 = (void **)(v31 + (v32 << 7));
        audioipc::SharedAudioBuffers::Element::Element((uint64_t)v51, (long long *)v21);
        v52 += 16;
        std::vector<audioipc::SharedAudioBuffers::Element>::__swap_out_circular_buffer((uint64_t *)(a1 + 24), &outPropertyData);
        unint64_t v27 = *(void *)(a1 + 32);
        std::__split_buffer<audioipc::SharedAudioBuffers::Element>::~__split_buffer((uint64_t)&outPropertyData);
      }
      else
      {
        audioipc::SharedAudioBuffers::Element::Element(*(void *)(a1 + 32), (long long *)v21);
        unint64_t v27 = v26 + 128;
        *(void *)(a1 + 32) = v27;
      }
      *(void *)(a1 + 32) = v27;
      if (*((_DWORD *)v21 + 4) <= *((_DWORD *)v21 + 10)) {
        unsigned int v33 = *((_DWORD *)v21 + 10);
      }
      else {
        unsigned int v33 = *((_DWORD *)v21 + 4);
      }
      unsigned int v34 = caulk::numeric::exceptional_mul<unsigned int>(v19, v33);
      unint64_t v35 = caulk::numeric::exceptional_add<unsigned long>(v34, 15);
      if (HIDWORD(v35))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &unk_1EDF950F8;
      }
      uint64_t v37 = *(void *)(v27 - 80);
      uint64_t v36 = *(void *)(v27 - 72);
      if (v36 - v37 != 8)
      {
        uint64_t v38 = v37 + 8;
        int v39 = *((_DWORD *)v21 + 3);
        do
        {
          int v40 = *((_DWORD *)v21 + 7);
          if ((v39 & 0x20) != 0) {
            int v40 = 1;
          }
          *(void *)(v38 + 8) = v17;
          *(_DWORD *)uint64_t v38 = v40;
          *(_DWORD *)(v38 + 4) = v35 & 0xFFFFFFF0;
          v38 += 16;
          v17 += v35 & 0xFFFFFFF0;
        }
        while (v38 != v36);
      }
      if (*((_DWORD *)v21 + 6)) {
        BOOL v41 = *((_DWORD *)v21 + 5) == 0;
      }
      else {
        BOOL v41 = 1;
      }
      if (v41)
      {
        uint64_t v42 = caulk::numeric::exceptional_add<unsigned long>(16 * v19, 15);
        *(void *)(v27 - 32) = v17;
        *(void *)(v27 - 24) = v19;
        v17 += v42 & 0xFFFFFFFFFFFFFFF0;
      }
      LODWORD(outPropertyData) = 0;
      ioPropertyDataSize[0] = 4;
      if (!AudioFormatGetProperty(0x66646570u, 0x28u, v21, ioPropertyDataSize, &outPropertyData)
        && outPropertyData)
      {
        uint64_t v43 = caulk::numeric::exceptional_add<unsigned long>(16 * v19, 15);
        *(void *)(v27 - 16) = v17;
        *(void *)(v27 - 8) = v19;
        v17 += v43 & 0xFFFFFFFFFFFFFFF0;
      }
      v21 += 48;
    }
    while (v21 != v24);
    uint64_t v44 = v46;
    __int16 v8 = v47;
  }
  if (v17 - v44 > (unint64_t)(v8 - v44)) {
LABEL_51:
  }
    std::terminate();
  if (__p[0]) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 56) = 1;
}

void sub_18FFC15A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::numeric::exceptional_add<unsigned long>(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __CFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic addition overflow");
  }
  return result;
}

void sub_18FFC1658(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void audioipc::SharedAudioBuffers::extendASBDs(char **a1, long long *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    int v3 = a2;
    unsigned int v5 = 0;
    int v6 = (long long *)((char *)a2 + 40 * a3);
    do
    {
      long long v22 = *v3;
      int v7 = *((_DWORD *)v3 + 4);
      long long v20 = *(long long *)((char *)v3 + 20);
      unsigned int v21 = *((_DWORD *)v3 + 9);
      if (!v7) {
        std::terminate();
      }
      unint64_t v8 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v8)
      {
        int v10 = *a1;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - *a1) >> 4);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0x555555555555555) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v10) >> 4);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v14 = 0x555555555555555;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 > 0x555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v15 = (char *)operator new(48 * v14);
        }
        else
        {
          unsigned int v15 = 0;
        }
        int v16 = &v15[48 * v11];
        *(_OWORD *)int v16 = v22;
        *((_DWORD *)v16 + 4) = v7;
        *(_OWORD *)(v16 + 20) = v20;
        *((_DWORD *)v16 + 9) = v21;
        *((_DWORD *)v16 + 10) = 0;
        unsigned int v17 = v16;
        if (v5 != (_OWORD *)v10)
        {
          do
          {
            long long v18 = *(v5 - 3);
            long long v19 = *(v5 - 1);
            *((_OWORD *)v17 - 2) = *(v5 - 2);
            *((_OWORD *)v17 - 1) = v19;
            *((_OWORD *)v17 - 3) = v18;
            v17 -= 48;
            v5 -= 3;
          }
          while (v5 != (_OWORD *)v10);
          unsigned int v5 = *a1;
        }
        int v9 = v16 + 48;
        *a1 = v17;
        a1[1] = v16 + 48;
        a1[2] = &v15[48 * v14];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *unsigned int v5 = *v3;
        *((_DWORD *)v5 + 4) = v7;
        *(_OWORD *)((char *)v5 + 20) = v20;
        *(void *)((char *)v5 + 36) = v21;
        int v9 = (char *)(v5 + 3);
      }
      a1[1] = v9;
      int v3 = (long long *)((char *)v3 + 40);
      unsigned int v5 = v9;
    }
    while (v3 != v6);
  }
}

void sub_18FFC1838(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::ipc::mapped_memory::get_raw_ptr(caulk::ipc::mapped_memory *this, unint64_t a2)
{
  if (*((void *)this + 1) > a2) {
    return *(void *)this + a2;
  }
  _os_assert_log();
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

char *audioipc::SharedAudioBuffers::immutableBufferList(audioipc::SharedAudioBuffers *this, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 7)) {
    std::vector<std::unique_ptr<ACOutputBuffer>>::__throw_out_of_range[abi:ne180100]();
  }
  if (*((_DWORD *)this + 6) < a3) {
    std::terminate();
  }
  int v3 = (audioipc::SharedAudioBuffers::Element *)(*(void *)this + ((unint64_t)a2 << 7));
  return audioipc::SharedAudioBuffers::Element::immutableBufferList(v3, a3);
}

char *audioipc::SharedAudioBuffers::Element::immutableBufferList(audioipc::SharedAudioBuffers::Element *this, unsigned int a2)
{
  if (*((_DWORD *)this + 4) <= *((_DWORD *)this + 10)) {
    unsigned int v4 = *((_DWORD *)this + 10);
  }
  else {
    unsigned int v4 = *((_DWORD *)this + 4);
  }
  int v5 = caulk::numeric::exceptional_mul<unsigned int>(a2, v4);
  uint64_t v7 = *((void *)this + 6);
  uint64_t v6 = *((void *)this + 7);
  unint64_t v8 = (char *)this + 48;
  uint64_t v9 = v6 - v7 - 8;
  if (v9)
  {
    int v10 = (_DWORD *)(v7 + 12);
    do
    {
      *int v10 = v5;
      v10 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  return v8;
}

double AUOOPRenderingClient::computeTimeoutSeconds(AUOOPRenderingClient *this, const AUOOPRenderClientUser *a2, const AudioTimeStamp *a3, unsigned int a4)
{
  double v4 = 0.0;
  if (!*((unsigned char *)this + 1))
  {
    if ((_BYTE)a2)
    {
      return 300.0;
    }
    else
    {
      double v5 = (double)a4 / *((double *)this + 19);
      double v6 = v5 * 0.02;
      double v4 = v5 - fmax(v5 * 0.02, 0.0002);
      if ((a3->mFlags & 2) != 0)
      {
        double v7 = (double)(uint64_t)(a3->mHostTime - mach_absolute_time()) * 0.0000000416666667;
        if (v7 >= v4) {
          double v7 = v4;
        }
        if (v7 >= v6) {
          return v7;
        }
        else {
          return v6;
        }
      }
    }
  }
  return v4;
}

uint64_t AUOOPRenderingClient::copyEventsToSharedMemory(uint64_t this, AURenderEventAllocator *a2, double a3, int a4)
{
  uint64_t v5 = this;
  double v6 = *(unsigned int **)(this + 80);
  uint64_t v7 = v6[1];
  int v8 = v6 + 8;
  uint64_t v9 = (char *)v6 + v7 + 8;
  if (a2)
  {
    int v10 = a2;
    unsigned int v11 = *v6 - v7;
    do
    {
      unsigned int v12 = AURenderEventAllocator::eventSize(v10, (const AURenderEvent *)a2);
      if (v11 >= v12) {
        goto LABEL_10;
      }
      v6[1] = v9 - v8;
      uint64_t v14 = *(void *)(v5 + 80);
      this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::can_send(v5 + 8, v13);
      if (!this) {
        break;
      }
      *(unsigned char *)(v14 + 4104) = 4;
      uint64_t v15 = v5 + 8;
      if (a3 <= 0.0)
      {
        this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait(v15);
        if (!this) {
          break;
        }
      }
      else
      {
        this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait_with_timeout(v15, a3);
        if ((this & 1) == 0) {
          break;
        }
      }
      v6[1] = 0;
      unsigned int v11 = *v6;
      uint64_t v9 = (char *)(v6 + 2);
      if (*v6 >= v12)
      {
LABEL_10:
        this = (uint64_t)memcpy(v9, v10, v12);
        v9 += v12;
        v11 -= v12;
      }
      int v10 = *(AURenderEventAllocator **)v10;
    }
    while (v10);
  }
  v6[1] = v9 - v8;
  if (a4 && v9 != v8)
  {
    uint64_t v16 = *(void *)(v5 + 80);
    uint64_t v17 = v5 + 8;
    this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::can_send(v17, a3);
    if (this)
    {
      *(unsigned char *)(v16 + 4104) = 5;
      if (a3 <= 0.0) {
        this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait(v17);
      }
      else {
        this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait_with_timeout(v17, a3);
      }
    }
    v6[1] = 0;
  }
  return this;
}

uint64_t AUOOPRenderingClient::pullOneInput(AUOOPRenderingClient *this, unsigned int a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = *((void *)this + 10);
  uint64_t v9 = (AUOOPRenderingClient *)((char *)this + 104);
  int v10 = *(unsigned int **)audioipc::SharedAudioBuffers::mutableBufferList((AUOOPRenderingClient *)((char *)this + 104), a2, a4);
  uint64_t v11 = v8 + 4 * a2;
  *(_DWORD *)(v11 + 4316) = 0;
  uint64_t result = *((void *)this + 26);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const AudioTimeStamp *, uint64_t, void, unsigned int *))(result + 16))(result, v11 + 4316, a3, a4, a2, v10);
    if (!result)
    {
      double v13 = audioipc::SharedAudioBuffers::immutableBufferList(v9, a2, a4);
      unsigned int v14 = **(_DWORD **)v13;
      if (v14 >= *v10) {
        uint64_t v15 = *v10;
      }
      else {
        uint64_t v15 = v14;
      }
      if (v15)
      {
        uint64_t v16 = (const void **)(v10 + 4);
        uint64_t v17 = (void **)(*(void *)v13 + 16);
        do
        {
          if (*v17 != *v16) {
            memcpy(*v17, *v16, *((unsigned int *)v16 - 1));
          }
          v16 += 2;
          v17 += 2;
          --v15;
        }
        while (v15);
      }
      return 0;
    }
  }
  return result;
}

BOOL audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::can_send(uint64_t a1, double a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 49));
  int v3 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    BOOL result = 0;
    atomic_store(2u, v3);
    return result;
  }
  unsigned int v4 = atomic_load(v3);
  if (v4 == 2) {
    return 0;
  }
  unsigned int v5 = atomic_load(*(unsigned int **)(a1 + 32));
  if (v5 == 2) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    if (!atomic_load(*(unsigned int **)(a1 + 32)))
    {
      unint64_t v8 = audioipc::eventlink_primitive::timed_wait_or_error(*(audioipc::eventlink_primitive **)(a1 + 56), a2);
      if ((v8 & 0xFF00000000) != 0) {
        return v8 != 0;
      }
      audioipc::log_error((audioipc *)"can_send draining", (const char *)v8);
    }
    return 0;
  }
  return 1;
}

BOOL audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait_with_timeout(uint64_t a1, double a2)
{
  atomic_store(0, *(unsigned int **)(a1 + 24));
  unint64_t v3 = audioipc::eventlink_primitive::timed_wait_signal_or_error(*(audioipc::eventlink_primitive **)(a1 + 56), a2);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 49));
  if (v4)
  {
    BOOL result = 0;
    atomic_store(2u, *(unsigned int **)(a1 + 24));
  }
  else
  {
    char v5 = v3;
    double v6 = *(unsigned int **)(a1 + 24);
    if (HIDWORD(v3))
    {
      atomic_store(1u, v6);
      BOOL result = v3 != 0;
      *(unsigned char *)(a1 + 48) = v5;
    }
    else
    {
      atomic_store(2u, v6);
      audioipc::log_error((audioipc *)"rt_sender::signal_wait_with_timeout", (const char *)v3);
      return 0;
    }
  }
  return result;
}

uint64_t audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait(uint64_t a1)
{
  atomic_store(0, *(unsigned int **)(a1 + 24));
  unint64_t v2 = audioipc::eventlink_primitive::wait_signal_or_error(*(audioipc::eventlink_primitive **)(a1 + 56));
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 49));
  if (v3)
  {
    uint64_t result = 0;
    atomic_store(2u, *(unsigned int **)(a1 + 24));
  }
  else
  {
    unsigned __int8 v4 = *(unsigned int **)(a1 + 24);
    if (HIDWORD(v2))
    {
      uint64_t result = 1;
      atomic_store(1u, v4);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      atomic_store(2u, v4);
      audioipc::log_error((audioipc *)"rt_sender::signal_wait", (const char *)v2);
      return 0;
    }
  }
  return result;
}

void audioipc::log_error(audioipc *this, const char *a2)
{
  int v2 = (int)a2;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v4 = CADefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    double v6 = this;
    __int16 v7 = 1024;
    int v8 = v2;
    _os_log_error_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_ERROR, "%s failed: %d", (uint8_t *)&v5, 0x12u);
  }
}

char *audioipc::SharedAudioBuffers::mutableBufferList(audioipc::SharedAudioBuffers *this, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 7)) {
    std::vector<std::unique_ptr<ACOutputBuffer>>::__throw_out_of_range[abi:ne180100]();
  }
  if (*((_DWORD *)this + 6) < a3) {
    std::terminate();
  }
  unsigned __int8 v3 = (audioipc::SharedAudioBuffers::Element *)(*(void *)this + ((unint64_t)a2 << 7));
  unsigned __int8 v4 = audioipc::SharedAudioBuffers::Element::immutableBufferList(v3, a3);
  uint64_t v5 = *((void *)v4 + 1) - *(void *)v4;
  double v6 = (char *)v3 + 72;
  if (v5 != 8) {
    memmove((void *)(*(void *)v6 + 8), (const void *)(*(void *)v4 + 8), v5 - 8);
  }
  return v6;
}

uint64_t AURenderEventAllocator::eventSize(AURenderEventAllocator *this, const AURenderEvent *a2)
{
  int v2 = *((unsigned __int8 *)this + 16) - 1;
  uint64_t result = 48;
  switch(v2)
  {
    case 0:
    case 1:
      return result;
    case 7:
      uint64_t result = 24;
      break;
    case 8:
      uint64_t result = *((unsigned __int16 *)this + 9) + 21;
      break;
    case 9:
      uint64_t result = MIDI::EventList::size((MIDI::EventList *)((char *)this + 20)) + 20;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t EC3PacketParser::IsValid(EC3PacketParser *this)
{
  if (!*((unsigned char *)this + 4)) {
    return 0;
  }
  if (*((unsigned char *)this + 5)) {
    return 1;
  }
  unsigned __int8 v3 = (unsigned __int8 *)*((void *)this + 1);
  unsigned int v4 = *(_DWORD *)this == 1633889587 ? 10 : 12;
  if (ParseAC3Header(v3, v4, (AudioStreamBasicDescription *)((char *)this + 24), (unsigned int *)this + 16, (unsigned int *)this + 17, 0, (unsigned int *)this + 18, 0))return 0; {
  uint64_t result = 1;
  }
  *((unsigned char *)this + 5) = 1;
  return result;
}

uint64_t EC3StreamParser::AssessPacket(char **this, unsigned __int8 *a2, unsigned int a3, int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)this)
  {
    uint64_t result = 0;
    char v8 = 1;
LABEL_3:
    *a6 = v8;
    return result;
  }
  *(void *)uint64_t v32 = 0;
  unsigned int v31 = 0;
  memset(&v30, 0, sizeof(v30));
  unsigned int v29 = 0;
  uint64_t result = ParseAC3Header(a2, a3, &v30, 0, &v31, 0, &v29, 0);
  if (!result)
  {
    uint64_t result = GetAC3PacketIndex(a2, (int *)v32, &v32[1], v14);
    if (!result)
    {
      if (a3 <= 0xB)
      {
        int v34 = 0;
        uint64_t __dst = 0;
      }
      if (a3 >= 0xC) {
        size_t v15 = 12;
      }
      else {
        size_t v15 = a3;
      }
      memcpy(&__dst, a2, v15);
      if (a4)
      {
        if (v32[1] - 1 > 1)
        {
          if (!v32[1])
          {
            std::vector<EC3Header>::push_back[abi:ne180100](this + 21, &__dst);
            unsigned int v25 = v31;
            unsigned int v26 = *((_DWORD *)this + 9) + v31;
            ++*((_DWORD *)this + 8);
            *((_DWORD *)this + 9) = v26;
            unint64_t v27 = &this[2 * (*((_DWORD *)this + 1) - 1)];
            ++*((_DWORD *)v27 + 10);
            *((_DWORD *)v27 + 12) += v25;
          }
          goto LABEL_26;
        }
        if (!v32[0])
        {
          unsigned int v28 = *((_DWORD *)this + 49) + 1;
          if (v28 >= *((_DWORD *)this + 48)) {
            *(unsigned char *)this = 1;
          }
          else {
            *((_DWORD *)this + 49) = v28;
          }
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 1) != 8)
        {
          std::vector<EC3Header>::push_back[abi:ne180100](this + 21, &__dst);
          int v16 = *((_DWORD *)this + 9);
          int v17 = *((_DWORD *)this + 8) + 1;
          uint64_t v18 = *((unsigned int *)this + 1);
          *((_DWORD *)this + 1) = v18 + 1;
          unsigned int v19 = v31;
          int v20 = v16 + v31;
          *((_DWORD *)this + 8) = v17;
          *((_DWORD *)this + 9) = v20;
          unsigned int v21 = &this[2 * v18];
          *((_DWORD *)v21 + 10) = 1;
          *(char **)((char *)v21 + 44) = (char *)vdup_n_s32(v19);
          UInt32 v22 = 0x600 / v30.mFramesPerPacket;
          *((_DWORD *)v21 + 13) = 0x600 / v30.mFramesPerPacket;
          if (v22 > *((_DWORD *)this + 48)) {
            *((_DWORD *)this + 48) = v22;
          }
          goto LABEL_26;
        }
      }
      else if (v32[1])
      {
        std::vector<EC3Header>::push_back[abi:ne180100](this + 21, &__dst);
        *((_DWORD *)this + 1) = 1;
        unsigned int v23 = v31;
        unsigned int v24 = *((_DWORD *)this + 9) + v31;
        *((_DWORD *)this + 8) = 1;
        *((_DWORD *)this + 9) = v24;
        *((_DWORD *)this + 10) = 1;
        *((_DWORD *)this + 11) = v23;
        *((_DWORD *)this + 12) = v23;
LABEL_26:
        uint64_t result = 0;
        *a5 = v31;
        char v8 = *(unsigned char *)this;
        goto LABEL_3;
      }
      return 560226676;
    }
  }
  return result;
}

void std::vector<EC3Header>::push_back[abi:ne180100](char **a1, uint64_t *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    char v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      double v13 = (char *)operator new(12 * v12);
    }
    else
    {
      double v13 = 0;
    }
    unsigned int v14 = &v13[12 * v9];
    *(void *)unsigned int v14 = *a2;
    *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
    __int16 v7 = v14 + 12;
    if (v5 != v8)
    {
      do
      {
        uint64_t v15 = *(void *)(v5 - 12);
        v5 -= 12;
        int v16 = *((_DWORD *)v5 + 2);
        *(void *)(v14 - 12) = v15;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v16;
      }
      while (v5 != v8);
      uint64_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[12 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v5 = v6;
    __int16 v7 = v5 + 12;
  }
  a1[1] = v7;
}

Float64 EC3StreamParser::AssessPacketHeader(EC3StreamParser *this, const void *a2, unsigned int *a3, unsigned int *a4, BOOL *a5, AudioStreamBasicDescription *a6, unsigned int *a7, int *a8)
{
  int v19 = 0;
  unsigned int v18 = 0;
  memset(&v17, 0, sizeof(v17));
  if (!ParseAC3Header((unsigned __int8 *)this, a2, &v17, 0, a3, 0, &v18, (int *)a7)
    && !GetAC3PacketIndex((unsigned __int8 *)this, &v19, (unsigned int *)a6, v12))
  {
    if (LODWORD(a6->mSampleRate)) {
      BOOL v14 = v19 == 0;
    }
    else {
      BOOL v14 = 0;
    }
    char v15 = v14;
    *(unsigned char *)a4 = v15;
    if (a5)
    {
      Float64 result = v17.mSampleRate;
      long long v16 = *(_OWORD *)&v17.mBytesPerPacket;
      *(_OWORD *)a5 = *(_OWORD *)&v17.mSampleRate;
      *((_OWORD *)a5 + 1) = v16;
      *((void *)a5 + 4) = *(void *)&v17.mBitsPerChannel;
    }
  }
  return result;
}

void std::vector<AudioFormatListItem>::resize(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (char *)*a1;
  uint64_t v5 = (char *)a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
  unint64_t v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[48 * a2];
    }
  }
  else
  {
    unint64_t v10 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - v5) >> 4) >= v8)
    {
      unint64_t v27 = &v5[48 * v8];
      uint64_t v28 = 48 * a2 - 16 * ((v5 - (unsigned char *)*a1) >> 4);
      do
      {
        long long v29 = *a3;
        long long v30 = a3[2];
        *((_OWORD *)v5 + 1) = a3[1];
        *((_OWORD *)v5 + 2) = v30;
        *(_OWORD *)uint64_t v5 = v29;
        v5 += 48;
        v28 -= 48;
      }
      while (v28);
      a1[1] = v27;
    }
    else
    {
      if (a2 > 0x555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 4);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= a2) {
        uint64_t v12 = a2;
      }
      if (v11 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x555555555555555;
      }
      else {
        unint64_t v13 = v12;
      }
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v13);
      long long v16 = &v14[48 * v7];
      AudioStreamBasicDescription v17 = &v14[48 * a2];
      unsigned int v18 = v16;
      uint64_t v19 = 48 * a2 - 48 * v7;
      do
      {
        long long v20 = *a3;
        long long v21 = a3[2];
        *((_OWORD *)v18 + 1) = a3[1];
        *((_OWORD *)v18 + 2) = v21;
        *(_OWORD *)unsigned int v18 = v20;
        v18 += 48;
        v19 -= 48;
      }
      while (v19);
      UInt32 v22 = &v14[48 * v15];
      unsigned int v24 = (char *)*a1;
      unsigned int v23 = (char *)a1[1];
      if (v23 != *a1)
      {
        do
        {
          long long v25 = *((_OWORD *)v23 - 3);
          long long v26 = *((_OWORD *)v23 - 1);
          *((_OWORD *)v16 - 2) = *((_OWORD *)v23 - 2);
          *((_OWORD *)v16 - 1) = v26;
          *((_OWORD *)v16 - 3) = v25;
          v16 -= 48;
          v23 -= 48;
        }
        while (v23 != v24);
        unsigned int v23 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v22;
      if (v23)
      {
        operator delete(v23);
      }
    }
  }
}

char *std::vector<AudioFormatListItem>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  Float64 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void auoop::WorkgroupPropagator::~WorkgroupPropagator(os_unfair_lock_s **this)
{
  int v2 = *this;
  unsigned __int8 v3 = *this + 8;
  os_unfair_lock_lock(v3);
  uint64_t v5 = *(auoop::WorkgroupPropagator ***)&v2[10]._os_unfair_lock_opaque;
  uint64_t v4 = *(auoop::WorkgroupPropagator ***)&v2[12]._os_unfair_lock_opaque;
  if (v5 != v4)
  {
    while (*v5 != (auoop::WorkgroupPropagator *)this)
    {
      if (++v5 == v4)
      {
        uint64_t v5 = *(auoop::WorkgroupPropagator ***)&v2[12]._os_unfair_lock_opaque;
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = (char *)v4 - (char *)(v5 + 1);
    if (v4 != v5 + 1) {
      memmove(v5, v5 + 1, (char *)v4 - (char *)(v5 + 1));
    }
    *(void *)&v2[12]._os_unfair_lock_opaque = (char *)v5 + v6;
  }
  os_unfair_lock_unlock(v3);
  unint64_t v7 = this[6];
  if (v7)
  {
    this[7] = v7;
    operator delete(v7);
  }
  std::__function::__value_func<void ()(applesauce::xpc::dict const&)>::~__value_func[abi:ne180100](this + 1);
}

void std::vector<std::unique_ptr<auoop::PipeSubPool>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          std::default_delete<auoop::PipeSubPool>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<auoop::PipeSubPool>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 120);
  std::vector<auoop::PipeSubPool::PipeSlot>::__destroy_vector::operator()[abi:ne180100](&v4);
  MEMORY[0x192FC8070](a1 + 100);

  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  unsigned __int8 v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x192FC8940);
}

void std::vector<auoop::PipeSubPool::PipeSlot>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v4 - 3);
        *((void *)v4 - 3) = 0;
        if (v6) {
          std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100](v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    int v2 = (void **)(a1 + 104);
    std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::~rt_sender(a1 + 8);
  JUMPOUT(0x192FC8940);
}

void *std::__function::__value_func<void ()(applesauce::xpc::dict const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<caulk::synchronized<auoop::RenderPipePool,std::recursive_mutex,caulk::empty_atomic_interface<auoop::RenderPipePool>>>::__on_zero_shared(uint64_t a1)
{
  int v2 = (os_unfair_lock_s **)(a1 + 128);
  if (*(unsigned char *)(a1 + 200))
  {
    auoop::WorkgroupPropagator::~WorkgroupPropagator((os_unfair_lock_s **)(a1 + 128));
    *(unsigned char *)(a1 + 200) = 0;
  }

  if (*(unsigned char *)(a1 + 200)) {
    auoop::WorkgroupPropagator::~WorkgroupPropagator(v2);
  }
  unsigned __int8 v3 = (void **)(a1 + 104);
  std::vector<std::unique_ptr<auoop::PipeSubPool>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

void std::__shared_ptr_emplace<caulk::synchronized<auoop::RenderPipePool,std::recursive_mutex,caulk::empty_atomic_interface<auoop::RenderPipePool>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<caulk::synchronized<auoop::RenderPipePool,std::recursive_mutex,caulk::empty_atomic_interface<auoop::RenderPipePool>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t auoop::WorkgroupPropagator::WorkgroupPropagator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  *(void *)a1 = a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (void *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7)
  {
    uint64_t v6 = (void *)(a1 + 32);
    goto LABEL_5;
  }
  if (v7 != a3)
  {
    *(void *)(a1 + 32) = v7;
LABEL_5:
    *uint64_t v6 = 0;
    goto LABEL_7;
  }
  *(void *)(a1 + 32) = v5;
  (*(void (**)(void, uint64_t))(*(void *)*v6 + 24))(*v6, v5);
  uint64_t v3 = *(void *)a1;
LABEL_7:
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  unint64_t v9 = *(uint64_t **)(v3 + 48);
  unint64_t v8 = *(void *)(v3 + 56);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = *(uint64_t **)(v3 + 40);
    uint64_t v12 = v9 - v11;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v16 = (char *)operator new(8 * v15);
      unint64_t v11 = *(uint64_t **)(v3 + 40);
      unint64_t v9 = *(uint64_t **)(v3 + 48);
    }
    else
    {
      long long v16 = 0;
    }
    AudioStreamBasicDescription v17 = (uint64_t *)&v16[8 * v12];
    unsigned int v18 = &v16[8 * v15];
    *AudioStreamBasicDescription v17 = a1;
    unint64_t v10 = v17 + 1;
    if (v9 != v11)
    {
      do
      {
        uint64_t v19 = *--v9;
        *--AudioStreamBasicDescription v17 = v19;
      }
      while (v9 != v11);
      unint64_t v11 = *(uint64_t **)(v3 + 40);
    }
    *(void *)(v3 + 40) = v17;
    *(void *)(v3 + 48) = v10;
    *(void *)(v3 + 56) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *unint64_t v9 = a1;
    unint64_t v10 = v9 + 1;
  }
  *(void *)(v3 + 48) = v10;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  os_unfair_lock_lock((os_unfair_lock_t)v3);
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  std::vector<auoop::TrackedWorkgroup>::__init_with_size[abi:ne180100]<auoop::TrackedWorkgroup*,auoop::TrackedWorkgroup*>(&v21, *(void *)(v3 + 8), *(void *)(v3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 3));
  os_unfair_lock_unlock((os_unfair_lock_t)v3);
  long long v23 = v21;
  uint64_t v24 = v22;
  long long v25 = (void **)&v21;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](&v25);
  auoop::WorkgroupPropagator::propagate(a1, (uint64_t *)&v23);
  *(void *)&long long v21 = &v23;
  std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  return a1;
}

void sub_18FFC2CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](&a9);
  unint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v9 + 56) = v13;
    operator delete(v13);
  }
  std::__function::__value_func<void ()(applesauce::xpc::dict const&)>::~__value_func[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void auoop::RenderPipeUser::~RenderPipeUser(auoop::RenderPipeUser *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v2 = *(std::recursive_mutex ***)this;
  if (!*(void *)this) {
    return;
  }
  uint64_t v3 = *v2;
  std::recursive_mutex::lock(*v2);
  [*(id *)&v3[2].__m_.__opaque[48] removeObject:*((void *)this + 2)];
  uint64_t v4 = *(std::recursive_mutex ***)this;
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 64);
  if (v5) {
    id v6 = 0;
  }
  else {
    id v6 = *((id *)this + 2);
  }
  long long v30 = v6;
  id v7 = v6;
  int v8 = *((_DWORD *)v4 + 23);
  int v9 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v9;
  int v10 = *((_DWORD *)v4 + 24);
  if (v10 >= v9) {
    int v10 = v9;
  }
  if (v8 > v10)
  {
    uint64_t v11 = auoop::PipeSubPool::acquirePipeSlot((auoop::PipeSubPool *)v4, 0, 0);
    id v12 = v7;
    audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::stop(*(void *)(v11 + 8) + 8);
    if (!v12)
    {
LABEL_21:
      uint64_t v22 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = 0;
      if (v22) {
        std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100](v22);
      }

      __dmb(0xBu);
      atomic_store(0, (unsigned __int8 *)v11);
      int v9 = *((_DWORD *)v4 + 22);
      --*((_DWORD *)v4 + 23);
      goto LABEL_24;
    }
    if (kAUExtensionScope)
    {
      unint64_t v13 = *(id *)kAUExtensionScope;
      if (!v13)
      {
LABEL_16:
        caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_message(buf, v12);
        long long v16 = caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_proxy((void **)buf);
        uint64_t v17 = *(unsigned int *)(*(void *)(v11 + 8) + 144);
        unsigned int v18 = caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::reply((uint64_t)buf);
        [v16 destroyRenderPipe:v17 reply:v18];

        id v19 = v38;
        if (v19)
        {
          long long v20 = *(NSObject **)kAUExtensionScope;
          long long v21 = applesauce::dispatch::v1::source::operator*(*(id *)kAUExtensionScope);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            long long v29 = [v19 description];
            *(_DWORD *)unsigned int v31 = 138412290;
            uint64_t v32 = v29;
            _os_log_error_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, "Error in destroying pipe %@", v31, 0xCu);
          }
        }

        _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(&buf[8]);
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(_DWORD *)(*(void *)(v11 + 8) + 144);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUOOPRenderPipePool.mm";
      __int16 v34 = 1024;
      int v35 = 184;
      __int16 v36 = 1024;
      int v37 = v15;
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Host destroying render pipe %d", buf, 0x18u);
    }

    goto LABEL_16;
  }
LABEL_24:
  if (!v9)
  {
    long long v23 = *(void **)&v3[1].__m_.__opaque[8];
    uint64_t v24 = *(void **)&v3[1].__m_.__opaque[16];
    if (v23 != v24)
    {
      while ((std::recursive_mutex **)*v23 != v4)
      {
        if (++v23 == v24) {
          goto LABEL_39;
        }
      }
    }
    if (v23 != v24)
    {
      long long v25 = v23 + 1;
      if (v23 + 1 != v24)
      {
        do
        {
          long long v23 = v25;
          uint64_t v26 = *(v25 - 1);
          *(v25 - 1) = *v25;
          void *v25 = 0;
          if (v26) {
            std::default_delete<auoop::PipeSubPool>::operator()[abi:ne180100](v26);
          }
          long long v25 = v23 + 1;
        }
        while (v23 + 1 != v24);
        uint64_t v24 = *(void **)&v3[1].__m_.__opaque[16];
      }
      while (v24 != v23)
      {
        uint64_t v28 = *--v24;
        uint64_t v27 = v28;
        *uint64_t v24 = 0;
        if (v28) {
          std::default_delete<auoop::PipeSubPool>::operator()[abi:ne180100](v27);
        }
      }
      *(void *)&v3[1].__m_.__opaque[16] = v23;
    }
  }
LABEL_39:

  if ((v5 & 1) == 0) {
  if (v3)
  }
    std::recursive_mutex::unlock(v3);
}

void sub_18FFC3080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
  {

    caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)&a13);
    if ((v13 & 1) == 0) {

    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t auoop::PipeSubPool::acquirePipeSlot(auoop::PipeSubPool *this, unint64_t *a2, int a3)
{
  id v6 = (auoop::PipeSubPool *)((char *)this + 100);
  while (!caulk::semaphore::timed_wait(v6, 1.0))
  {
    if (a3)
    {
      int v7 = *((_DWORD *)this + 24);
      int v8 = v7 >= 0 ? *((_DWORD *)this + 24) : v7 + 3;
      pthread_t v9 = pthread_self();
      uint64_t v10 = *((void *)this + 15);
      uint64_t v11 = *((void *)this + 16);
      if (v10 != v11)
      {
        int v12 = 0;
        do
        {
          unsigned __int8 v13 = atomic_load((unsigned __int8 *)v10);
          if (v13)
          {
            unint64_t v14 = atomic_load((unint64_t *)(v10 + 24));
            if (v9 == (pthread_t)v14 && ++v12 == v8 >> 2)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "acquirePipeSlot failed");
            }
          }
          v10 += 32;
        }
        while (v10 != v11);
      }
    }
  }
  char v15 = 0;
  do
  {
LABEL_15:
    char v16 = v15;
    uint64_t v17 = *((void *)this + 15);
    uint64_t v18 = *((void *)this + 16);
    char v15 = 1;
  }
  while (v17 == v18);
  while (1)
  {
    if (!*(void *)(v17 + 8)
      || !((a2 == 0) | v16 & 1) && *(void *)(v17 + 16) != *a2
      || (atomic_exchange((atomic_uchar *volatile)v17, 1u) & 1) != 0)
    {
      goto LABEL_25;
    }
    *(void *)(v17 + 24) = pthread_self();
    __dmb(9u);
    if (*(void *)(v17 + 8)) {
      break;
    }
LABEL_24:
    atomic_store(0, (unsigned __int8 *)v17);
LABEL_25:
    v17 += 32;
    if (v17 == v18)
    {
      char v15 = 1;
      goto LABEL_15;
    }
  }
  if ((v16 & 1) == 0)
  {
    if (!a2) {
      return v17;
    }
    uint64_t v19 = *(void *)(v17 + 16);
    if (v19 == *a2) {
      goto LABEL_29;
    }
    goto LABEL_24;
  }
  if (!a2) {
    return v17;
  }
  uint64_t v19 = *a2;
LABEL_29:
  *(void *)(v17 + 16) = v19;
  return v17;
}

void sub_18FFC32A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_message(void *a1, void *a2)
{
  void v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EDFA0F00;
  v4[1] = a1;
  v4[3] = v4;
  caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::message(a1, a2, (uint64_t)v4);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v4);
  a1[5] = 0;
  return a1;
}

void sub_18FFC334C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v7, (uint64_t)(a1 + 1));
  int v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE10sync_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v6, (uint64_t)v7);
  uint64_t v3 = [v2 synchronousRemoteObjectProxyWithErrorHandler:v5];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v6);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v7);
  return v3;
}

void sub_18FFC3450(_Unwind_Exception *a1)
{
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v1);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::reply(uint64_t a1)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v5, a1 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v4, (uint64_t)v5);
  uint64_t v1 = _Block_copy(aBlock);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v4);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v5);
  return v1;
}

void sub_18FFC355C(_Unwind_Exception *a1)
{
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message(uint64_t a1)
{
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((void *)(a1 + 8));
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE5replyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2 = 0;
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void *caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::message(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *a1 = v5;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)(a1 + 1), a3);

  return a1;
}

void sub_18FFC3658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EEclEOU8__strongSC_SF_(uint64_t a1, id *a2)
{
}

uint64_t _ZNKSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0F00;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EE7__cloneEv(uint64_t a1)
{
  Float64 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *Float64 result = &unk_1EDFA0F00;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EED0Ev()
{
}

void std::__function::__func<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1,std::allocator<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1>,void ()(applesauce::xpc::dict const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = **(void **)(a1 + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  uint64_t v4 = [*(id *)(v3 + 184) anyObject];
  if (!v4)
  {
    *(unsigned char *)(v3 + 76) = 1;
    goto LABEL_12;
  }
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_message(&v19, v4);
  id v5 = caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_proxy(&v19);
  id v6 = *a2;
  applesauce::dispatch::v1::source::operator*(*a2);
  objc_claimAutoreleasedReturnValue();
  int v7 = caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::reply((uint64_t)&v19);
  [v5 updateWorkgroupMirror:v6 reply:v7];

  id v8 = v21;
  if (v8)
  {
    if (kAUExtensionScope)
    {
      id v9 = *(id *)kAUExtensionScope;
      if (!v9) {
        goto LABEL_11;
      }
    }
    else
    {
      id v9 = (id)MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    uint64_t v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = [v8 description];
      int v13 = 136315650;
      unint64_t v14 = "AUOOPRenderPipePool.mm";
      __int16 v15 = 1024;
      int v16 = 147;
      __int16 v17 = 2112;
      uint64_t v18 = v12;
      _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d error from workgroupsChanged: %@", (uint8_t *)&v13, 0x1Cu);
    }
  }
LABEL_11:

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v20);
LABEL_12:

  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
}

void sub_18FFC38F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)va);
  std::recursive_mutex::unlock(v5);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1,std::allocator<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1>,void ()(applesauce::xpc::dict const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0DE0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1,std::allocator<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1>,void ()(applesauce::xpc::dict const&)>::__clone(uint64_t a1)
{
  Float64 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *Float64 result = &unk_1EDFA0DE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1,std::allocator<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1>,void ()(applesauce::xpc::dict const&)>::~__func()
{
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t caulk::__expected_detail::base<std::unique_ptr<AUOOPRenderingClient>,NSError * {__strong}>::~base(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    *(void *)a1 = 0;
    if (v3) {
      std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100]((uint64_t)v3);
    }
  }
  else
  {
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJjEE5replyEv_block_invoke(uint64_t a1, void *a2, int a3)
{
  int v3 = a3;
  std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v3);
}

void *__destroy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_18FFC3C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void audioipc::eventlink_primitive::ipc_resources(audioipc::eventlink_primitive *this, uint64_t a2)
{
  applesauce::xpc::dict::create(this);
  if (!*(_DWORD *)(a2 + 8))
  {
    remote_port = (const char *)os_eventlink_extract_remote_port();
    if (remote_port) {
      audioipc::log_and_throw((audioipc *)"os_eventlink_extract_remote_port failed", remote_port);
    }
  }
  id v7 = (id)xpc_mach_send_create();
  id v5 = v7;
  if (!v7) {
    id v7 = xpc_null_create();
  }

  v6[0] = this;
  v6[1] = "eventlink";
  applesauce::xpc::dict::object_proxy::operator=(&v8, (uint64_t)v6, &v7);
}

void sub_18FFC3D48(_Unwind_Exception *a1)
{
  applesauce::xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::xpc::dict::object_proxy::operator=(void *a1, uint64_t a2, id *a3)
{
  id v6 = **(void ***)a2;
  applesauce::dispatch::v1::source::operator*(v6);
  objc_claimAutoreleasedReturnValue();
  id v7 = *(const char **)(a2 + 8);
  id v8 = *a3;
  xpc_dictionary_set_value(v6, v7, v8);

  *a1 = *a3;
  *a3 = xpc_null_create();
  return MEMORY[0x1F41817F8]();
}

{
  void *v6;
  const char *v7;
  id v8;
  uint64_t vars8;

  id v6 = **(void ***)a2;
  applesauce::dispatch::v1::source::operator*(v6);
  objc_claimAutoreleasedReturnValue();
  id v7 = *(const char **)(a2 + 8);
  id v8 = *a3;
  applesauce::dispatch::v1::source::operator*(*a3);
  objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_value(v6, v7, v8);

  *a1 = *a3;
  *a3 = xpc_null_create();
  return MEMORY[0x1F41817F8]();
}

void applesauce::xpc::dict::create(applesauce::xpc::dict *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  id v5 = v2;
  if (!v2) {
    xpc_object_t v2 = xpc_null_create();
  }

  id v3 = v2;
  uint64_t v4 = v3;
  *(void *)this = v3;
  if (!v3 || object_getClass(v3) != (Class)MEMORY[0x1E4F14590])
  {
    *(void *)this = xpc_null_create();
  }
}

void applesauce::xpc::dict::~dict(id *this)
{
  id v2 = *this;
  *this = 0;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJjEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  int v2 = 0;
  std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::operator()(uint64_t a1, id *a2, _DWORD *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  *(_DWORD *)(v6 + 48) = *a3;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA12F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::__clone(uint64_t a1)
{
  Float64 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *Float64 result = &unk_1EDFA12F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::~__func()
{
}

void *std::vector<auoop::RenderPipeConfig::CompactFormat>::__init_with_size[abi:ne180100]<auoop::RenderPipeConfig::CompactFormat*,auoop::RenderPipeConfig::CompactFormat*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x1555555555555556) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    Float64 result = std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(a4);
    id v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      Float64 result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_18FFC40CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void auoop::RenderPipeConfig::~RenderPipeConfig(id *this)
{
  id v2 = this[4];
  if (v2)
  {
    this[5] = v2;
    operator delete(v2);
  }
  id v3 = this[1];
  if (v3)
  {
    this[2] = v3;
    operator delete(v3);
  }
}

uint64_t *std::vector<auoop::PipeSubPool::PipeSlot>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(unsigned char *)(v6 - 32) = 0;
      uint64_t v7 = *(void *)(v2 + v5 - 24);
      uint64_t v8 = *(void *)(v2 + v5 - 16);
      *(void *)(v2 + v5 - 24) = 0;
      *(void *)(v6 - 24) = v7;
      *(void *)(v6 - 16) = v8;
      *(void *)(v6 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *Float64 result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<auoop::PipeSubPool::PipeSlot>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v4 = *(void *)(i - 24);
    *(void *)(i - 24) = 0;
    if (v4) {
      std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a1);
}

void auoop::RenderPipeUser::setV3HostCallbacks(uint64_t a1, void *a2, void *a3)
{
  v10[6] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_message(&v9, *(void **)(a1 + 16));
  uint64_t v7 = caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_proxy(&v9);
  uint64_t v8 = caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::reply((uint64_t)&v9);
  [v7 updateHostCallbacks:(v5 != 0) | (2 * (v6 != 0)) reply:v8];

  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v10);
}

void sub_18FFC4354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t initRng(unsigned int a1, _OWORD *a2)
{
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = a1;
  *(__n64 *)&long long v3 = MakeVectorSeed(&v9, &v8, &v7, &v6);
  *a2 = v3;
  *(__n64 *)&long long v4 = MakeVectorSeed(&v9, &v8, &v7, &v6);
  a2[1] = v4;
  return v9;
}

__n64 MakeVectorSeed(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4 = *a1 + ~(*a1 << 15);
  unsigned int v5 = (9 * (v4 ^ (v4 >> 10))) ^ ((9 * (v4 ^ (v4 >> 10))) >> 6);
  unsigned int v6 = (v5 + ~(v5 << 11)) ^ ((v5 + ~(v5 << 11)) >> 16);
  *a1 = v6;
  unsigned int v7 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
  unsigned int v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  int v9 = v8 ^ HIWORD(v8);
  *a2 = v9;
  unsigned int v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  unsigned int v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  int v12 = v11 ^ HIWORD(v11);
  *a3 = v12;
  unsigned int v13 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
  *a4 = ((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) ^ (((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) >> 16);
  result.n64_u32[0] = *a1;
  result.n64_u32[1] = *a2;
  return result;
}

float32x4_t *generateVector(float32x4_t *result, unsigned int a2, uint64_t a3, float a4)
{
  float v4 = a4 * 2.3283e-10;
  int32x4_t v5 = *(int32x4_t *)a3;
  unsigned int v6 = (int8x16_t *)(a3 + 16);
  int32x4_t v7 = *(int32x4_t *)(a3 + 16);
  if (a2 < 4)
  {
    int32x4_t v11 = *(int32x4_t *)a3;
    int32x4_t v10 = *(int32x4_t *)(a3 + 16);
  }
  else
  {
    uint16x4_t v8 = (uint16x4_t)vdup_n_s16(0x9069u);
    uint16x4_t v9 = (uint16x4_t)vdup_n_s16(0x4650u);
    do
    {
      int32x4_t v10 = (int32x4_t)vsraq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(v7), v8), (uint32x4_t)v7, 0x10uLL);
      int32x4_t v11 = (int32x4_t)vsraq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(v5), v9), (uint32x4_t)v5, 0x10uLL);
      *result++ = vmulq_n_f32(vcvtq_f32_s32(vaddq_s32(vshlq_n_s32(v10, 0x10uLL), v11)), v4);
      a2 -= 4;
      int32x4_t v7 = v10;
      int32x4_t v5 = v11;
    }
    while (a2 > 3);
  }
  *(int32x4_t *)a3 = v11;
  *(int32x4_t *)(a3 + 16) = v10;
  if (a2)
  {
    unsigned int v12 = 0;
    do
    {
      int v13 = 36969 * (unsigned __int16)v6->i32[v12] + HIWORD(v6->i32[v12]);
      int v14 = 18000 * (unsigned __int16)*(_DWORD *)(a3 + 4 * v12) + HIWORD(*(_DWORD *)(a3 + 4 * v12));
      v6->i32[v12] = v13;
      *(_DWORD *)(a3 + 4 * v12) = v14;
      result->f32[0] = v4 * (float)(v14 + (v13 << 16));
      __n64 result = (float32x4_t *)((char *)result + 4);
      if (v12 == 3) {
        unsigned int v12 = 0;
      }
      else {
        ++v12;
      }
      --a2;
    }
    while (a2);
    switch(v12)
    {
      case 3u:
        int8x16_t v17 = *(int8x16_t *)(a3 + 16);
        *(int8x16_t *)a3 = vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xCuLL);
        int8x16_t v16 = vextq_s8(v17, v17, 0xCuLL);
        break;
      case 2u:
        int8x16_t v18 = *(int8x16_t *)(a3 + 16);
        *(int8x16_t *)a3 = vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 8uLL);
        int8x16_t v16 = vextq_s8(v18, v18, 8uLL);
        break;
      case 1u:
        int8x16_t v15 = *(int8x16_t *)(a3 + 16);
        *(int8x16_t *)a3 = vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 4uLL);
        int8x16_t v16 = vextq_s8(v15, v15, 4uLL);
        break;
      default:
        return result;
    }
    *unsigned int v6 = v16;
  }
  return result;
}

uint64_t NotifyDStateDumpManager::unregisterSubsystem(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 32));
  float v4 = *(NSObject **)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = ___ZN23NotifyDStateDumpManager19unregisterSubsystemE27CACentralStateDumpSubsystem_block_invoke;
  v6[3] = &__block_descriptor_tmp_9;
  void v6[4] = a1;
  int v7 = a2;
  dispatch_sync(v4, v6);
  return 0;
}

uint64_t ___ZN23NotifyDStateDumpManager19unregisterSubsystemE27CACentralStateDumpSubsystem_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(_DWORD **)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  if (v2 != (_DWORD *)v3)
  {
    while (*v2 != *(_DWORD *)(result + 40))
    {
      v2 += 8;
      if (v2 == (_DWORD *)v3) {
        return result;
      }
    }
  }
  if (v2 != (_DWORD *)v3)
  {
    if (v2 + 8 != (_DWORD *)v3)
    {
      do
      {
        uint64_t v4 = (uint64_t)v2;
        v2 += 8;
        __n64 result = ListenerInfo<OS::CF::String>::operator=(v4, (uint64_t)v2);
      }
      while (result + 64 != v3);
      uint64_t v3 = *(void *)(v1 + 48);
    }
    while ((_DWORD *)v3 != v2)
    {
      v3 -= 32;
      __n64 result = ListenerInfo<OS::CF::String>::~ListenerInfo(v3);
    }
    *(void *)(v1 + 48) = v2;
  }
  return result;
}

uint64_t ListenerInfo<OS::CF::String>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    OS::CF::UntypedObject::operator=(a1 + 16, *(CFTypeRef *)(a2 + 24));
    uint64_t v4 = *(const void **)(a1 + 8);
    if (v4)
    {
      _Block_release(v4);
      *(void *)(a1 + 8) = 0;
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5)
    {
      *(void *)(a1 + 8) = v5;
      *(void *)(a2 + 8) = 0;
    }
  }
  return a1;
}

uint64_t ListenerInfo<OS::CF::String>::~ListenerInfo(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 8) = 0;
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 16));
  return a1;
}

void OS::CF::UntypedObject::~UntypedObject(OS::CF::UntypedObject *this)
{
  *(void *)this = &unk_1EDF94F50;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x192FC8940);
}

uint64_t OS::CF::UntypedObject::operator=(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t NotifyDStateDumpManager::registerSubsystem(uint64_t a1, int a2, CFTypeRef cf, const void *a4)
{
  uint64_t result = 4294967246;
  if (cf)
  {
    if (a4)
    {
      CFRetain(cf);
      v12[0] = &unk_1EDF94F70;
      v12[1] = cf;
      int v13 = a2;
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v15, cf);
      int8x16_t v15 = &unk_1EDF94F70;
      int v14 = _Block_copy(a4);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v12);
      uint16x4_t v9 = *(NSObject **)(a1 + 32);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      v10[2] = ___ZN23NotifyDStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke;
      v10[3] = &__block_descriptor_tmp_8;
      v10[4] = a1;
      v11[8] = a2;
      ListenerInfo<OS::CF::String>::ListenerInfo((uint64_t)v11, (uint64_t)&v13);
      dispatch_async(v9, v10);
      ListenerInfo<OS::CF::String>::~ListenerInfo((uint64_t)v11);
      ListenerInfo<OS::CF::String>::~ListenerInfo((uint64_t)&v13);
      return 0;
    }
  }
  return result;
}

void sub_18FFC49D0(_Unwind_Exception *a1)
{
  ListenerInfo<OS::CF::String>::~ListenerInfo(v1 - 80);
  _Unwind_Resume(a1);
}

void ___ZN23NotifyDStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke(uint64_t a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (_DWORD *)v2[5];
  uint64_t v4 = (_DWORD *)v2[6];
  int v69 = *(_DWORD *)(a1 + 72);
  unint64_t v5 = a1 + 40;
  uint64_t v6 = ListenerInfo<OS::CF::String>::ListenerInfo((uint64_t)&v70, a1 + 40);
  if (v3 == v4)
  {
LABEL_4:
    ListenerInfo<OS::CF::String>::~ListenerInfo(v6);
    uint16x4_t v8 = (char *)v2[5];
    unint64_t v7 = v2[6];
    uint64_t v9 = v7 - (void)v8;
    if ((char *)v7 == v8)
    {
      int32x4_t v11 = (char *)v2[6];
    }
    else
    {
      unint64_t v10 = v9 >> 5;
      int32x4_t v11 = (char *)v2[5];
      do
      {
        unint64_t v12 = v10 >> 1;
        int v13 = (unsigned int *)&v11[32 * (v10 >> 1)];
        unsigned int v15 = *v13;
        int v14 = (char *)(v13 + 8);
        v10 += ~(v10 >> 1);
        if (v15 < *(_DWORD *)v5) {
          int32x4_t v11 = v14;
        }
        else {
          unint64_t v10 = v12;
        }
      }
      while (v10);
    }
    uint64_t v19 = v11 - v8;
    uint64_t v20 = (v11 - v8) >> 5;
    id v21 = &v8[(v11 - v8) & 0xFFFFFFFFFFFFFFE0];
    unint64_t v22 = v2[7];
    if (v7 >= v22)
    {
      unint64_t v28 = (v9 >> 5) + 1;
      if (v28 >> 59) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v22 - (void)v8;
      if (v29 >> 4 > v28) {
        unint64_t v28 = v29 >> 4;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      uint64_t v75 = v2 + 7;
      if (v30)
      {
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v30);
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v31 = 0;
      }
      uint64_t v33 = (uint64_t)&v32[32 * v20];
      v71 = v32;
      uint64_t v72 = v33;
      uint64_t v73 = (_DWORD *)v33;
      uint64_t v74 = &v32[32 * v31];
      if (v20 == v31)
      {
        if (v19 < 1)
        {
          if (v11 == v8) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = v19 >> 4;
          }
          int v78 = v2 + 7;
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v41);
          uint64_t v44 = v42;
          uint64_t v45 = &v42[32 * (v41 >> 2)];
          BOOL v46 = &v42[32 * v43];
          uint64_t v47 = v72;
          int v48 = v73;
          uint64_t v49 = v72;
          int v50 = v45;
          uint64_t v51 = (uint64_t)v73 - v72;
          if (v73 != (_DWORD *)v72)
          {
            uint64_t v68 = &v42[32 * v43];
            int v50 = &v45[v51 & 0xFFFFFFFFFFFFFFE0];
            uint64_t v52 = 32 * (v51 >> 5);
            uint64_t v53 = (uint64_t)&v42[32 * (v41 >> 2)];
            uint64_t v54 = v72;
            do
            {
              uint64_t v53 = ListenerInfo<OS::CF::String>::ListenerInfo(v53, v54) + 32;
              v54 += 32;
              v52 -= 32;
            }
            while (v52);
            uint64_t v49 = (uint64_t)v48;
            BOOL v46 = v68;
          }
          size_t v55 = v71;
          uint64_t v56 = v74;
          v71 = v44;
          uint64_t v72 = (uint64_t)v45;
          *(void *)AudioStreamBasicDescription buf = v55;
          *(void *)&uint8_t buf[8] = v47;
          uint64_t v73 = v50;
          uint64_t v74 = v46;
          *(void *)&buf[16] = v49;
          int v77 = v56;
          std::__split_buffer<ListenerInfo<OS::CF::String>>::~__split_buffer((uint64_t)buf);
          uint64_t v33 = (uint64_t)v73;
        }
        else
        {
          unint64_t v34 = v20 + 2;
          if (v20 >= -1) {
            unint64_t v34 = v20 + 1;
          }
          v33 -= 32 * (v34 >> 1);
          uint64_t v72 = v33;
          uint64_t v73 = (_DWORD *)v33;
        }
      }
      ListenerInfo<OS::CF::String>::ListenerInfo(v33, v5);
      uint64_t v57 = v72;
      v73 += 8;
      uint64_t v58 = (char *)v2[5];
      for (uint64_t i = 32; ; i -= 32)
      {
        uint64_t v60 = v57 + i;
        if (&v21[i - 32] == v58) {
          break;
        }
        uint64_t v61 = (uint64_t)&v21[i - 64];
        ListenerInfo<OS::CF::String>::ListenerInfo(v60 - 64, v61);
      }
      uint64_t v62 = v60 - 32;
      uint64_t v72 = v62;
      v63 = (char *)v2[6];
      uint64_t v64 = v73;
      if (v21 != v63)
      {
        unint64_t v65 = 0;
        do
        {
          ListenerInfo<OS::CF::String>::ListenerInfo((uint64_t)&v64[v65 / 4], (uint64_t)&v21[v65]);
          v65 += 32;
        }
        while (&v21[v65] != v63);
        uint64_t v64 = (_DWORD *)((char *)v64 + v65);
        uint64_t v62 = v72;
        id v21 = (char *)v2[6];
      }
      int v66 = (char *)v2[5];
      v2[5] = v62;
      v2[6] = v64;
      uint64_t v67 = (char *)v2[7];
      v2[7] = v74;
      uint64_t v73 = v21;
      uint64_t v74 = v67;
      v71 = v66;
      uint64_t v72 = (uint64_t)v66;
      std::__split_buffer<ListenerInfo<OS::CF::String>>::~__split_buffer((uint64_t)&v71);
    }
    else if (v21 == (char *)v7)
    {
      ListenerInfo<OS::CF::String>::ListenerInfo(v2[6], v5);
      v2[6] = v7 + 32;
    }
    else
    {
      long long v23 = v21 + 32;
      uint64_t v24 = v7 - 32;
      if (v7 < 0x20)
      {
        uint64_t v26 = v2[6];
      }
      else
      {
        unint64_t v25 = v7 - 32;
        uint64_t v26 = v2[6];
        do
        {
          uint64_t v27 = ListenerInfo<OS::CF::String>::ListenerInfo(v26, v25);
          v25 += 32;
          uint64_t v26 = v27 + 32;
        }
        while (v25 < v7);
      }
      v2[6] = v26;
      if ((_DWORD *)v7 != v23)
      {
        uint64_t v35 = 32 * ((uint64_t)(v7 - (void)v23) >> 5);
        do
        {
          ListenerInfo<OS::CF::String>::operator=(v24, (uint64_t)&v8[32 * v20 - 32 + v35]);
          v24 -= 32;
          v35 -= 32;
        }
        while (v35);
      }
      if ((unint64_t)v21 <= v5) {
        v5 += 32 * (v2[6] > v5);
      }
      if (v21 != (char *)v5)
      {
        *(_DWORD *)id v21 = *(_DWORD *)v5;
        __int16 v36 = &v8[32 * v20];
        OS::CF::UntypedObject::operator=((uint64_t)(v36 + 16), *(CFTypeRef *)(v5 + 24));
        uint64_t v39 = (const void *)*((void *)v36 + 1);
        id v38 = (void **)(v36 + 8);
        int v37 = v39;
        if (v39)
        {
          _Block_release(v37);
          void *v38 = 0;
        }
        int v40 = *(const void **)(v5 + 8);
        if (v40) {
          void *v38 = _Block_copy(v40);
        }
      }
    }
  }
  else
  {
    while (*v3 != v69)
    {
      v3 += 8;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    ListenerInfo<OS::CF::String>::~ListenerInfo(v6);
    int8x16_t v16 = CADefaultLog();
    if (v16)
    {
      int8x16_t v17 = v16;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&uint8_t buf[4] = "CACentralStateDump.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 147;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v18;
        _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Subsystem %d is attempting to register more than once", buf, 0x18u);
      }
    }
  }
}

void sub_18FFC4E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  *(void *)(v17 + 48) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t ListenerInfo<OS::CF::String>::ListenerInfo(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EDF94F70;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  OS::CF::UntypedObject::operator=(a1 + 16, *(CFTypeRef *)(a2 + 24));
  uint64_t v4 = *(const void **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 8) = _Block_copy(v4);
  }
  return a1;
}

{
  uint64_t v4;

  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EDF94F70;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  OS::CF::UntypedObject::operator=(a1 + 16, *(CFTypeRef *)(a2 + 24));
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    *(void *)(a2 + 8) = 0;
  }
  return a1;
}

void sub_18FFC4F50(_Unwind_Exception *a1)
{
  OS::CF::UntypedObject::~UntypedObject(v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_40c36_ZTSK12ListenerInfoIN2OS2CF6StringEE(uint64_t a1)
{
  return ListenerInfo<OS::CF::String>::~ListenerInfo(a1 + 40);
}

uint64_t __copy_helper_block_e8_40c36_ZTSK12ListenerInfoIN2OS2CF6StringEE(uint64_t a1, uint64_t a2)
{
  return ListenerInfo<OS::CF::String>::ListenerInfo(a1 + 40, a2 + 40);
}

uint64_t std::__split_buffer<ListenerInfo<OS::CF::String>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    ListenerInfo<OS::CF::String>::~ListenerInfo(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

OS::CF::UntypedObject *OS::CF::UntypedObject::UntypedObject(OS::CF::UntypedObject *this, CFTypeRef cf)
{
  *(void *)this = &unk_1EDF94F50;
  if (cf) {
    CFRetain(cf);
  }
  *((void *)this + 1) = cf;
  return this;
}

void OS::CF::String::~String(OS::CF::String *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x192FC8940);
}

void NotifyDStateDumpManager::~NotifyDStateDumpManager(NotifyDStateDumpManager *this)
{
  NotifyDStateDumpManager::~NotifyDStateDumpManager(this);
  JUMPOUT(0x192FC8940);
}

{
  void **v2;

  *(void *)this = &unk_1EDF93A30;
  notify_cancel(*((_DWORD *)this + 6));
  dispatch_release(*((dispatch_object_t *)this + 4));
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<ListenerInfo<OS::CF::String>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<ListenerInfo<OS::CF::String>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = ListenerInfo<OS::CF::String>::~ListenerInfo(v4 - 32);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t OSStateDumpManager::unregisterSubsystem(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  uint64_t v4 = *(NSObject **)(a1 + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = ___ZN18OSStateDumpManager19unregisterSubsystemE27CACentralStateDumpSubsystem_block_invoke;
  v6[3] = &__block_descriptor_tmp_19;
  void v6[4] = a1;
  int v7 = a2;
  dispatch_sync(v4, v6);
  return 0;
}

uint64_t ___ZN18OSStateDumpManager19unregisterSubsystemE27CACentralStateDumpSubsystem_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v3 = *(_DWORD **)(v1 + 16);
  uint64_t v2 = *(_DWORD **)(v1 + 24);
  if (v3 != v2)
  {
    while (*v3 != *(_DWORD *)(result + 40))
    {
      v3 += 6;
      if (v3 == v2) {
        return result;
      }
    }
  }
  if (v3 != v2)
  {
    os_state_remove_handler();
    uint64_t result = (uint64_t)(v3 + 6);
    uint64_t v4 = *(_DWORD **)(v1 + 24);
    if (v3 + 6 != v4)
    {
      do
      {
        uint64_t v5 = (uint64_t)v3;
        v3 += 6;
      }
      while ((_DWORD *)(ListenerInfo<unsigned long long>::operator=(v5, (uint64_t)v3) + 48) != v4);
      uint64_t result = *(void *)(v1 + 24);
    }
    while ((_DWORD *)result != v3)
      uint64_t result = ListenerInfo<unsigned long long>::~ListenerInfo(result - 24);
    *(void *)(v1 + 24) = v3;
  }
  return result;
}

uint64_t ListenerInfo<unsigned long long>::~ListenerInfo(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t ListenerInfo<unsigned long long>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v4 = *(const void **)(a1 + 8);
    if (v4)
    {
      _Block_release(v4);
      *(void *)(a1 + 8) = 0;
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5)
    {
      *(void *)(a1 + 8) = v5;
      *(void *)(a2 + 8) = 0;
    }
  }
  return a1;
}

uint64_t OSStateDumpManager::registerSubsystem(uint64_t a1, int a2, const void *a3, void *aBlock)
{
  uint64_t result = 4294967246;
  if (a3)
  {
    if (aBlock)
    {
      v13[0] = 0;
      v13[1] = v13;
      v13[2] = 0x4002000000;
      v13[3] = __Block_byref_object_copy__2103;
      v13[4] = __Block_byref_object_dispose__2104;
      int v14 = a2;
      unsigned int v15 = 0;
      uint64_t v16 = 0;
      unsigned int v15 = _Block_copy(aBlock);
      CFRetain(a3);
      v12[0] = &unk_1EDF94F70;
      v12[1] = a3;
      uint16x4_t v8 = *(NSObject **)(a1 + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18OSStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke;
      block[3] = &unk_1EDFA3C40;
      void block[5] = a1;
      int v11 = a2;
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v10, a3);
      v10[0] = &unk_1EDF94F70;
      block[4] = v13;
      dispatch_async(v8, block);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v10);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v12);
      _Block_object_dispose(v13, 8);
      ListenerInfo<unsigned long long>::~ListenerInfo((uint64_t)&v14);
      return 0;
    }
  }
  return result;
}

uint64_t __Block_byref_object_copy__2103(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  if (v2)
  {
    *(void *)(result + 48) = v2;
    *(void *)(a2 + 48) = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__2104(uint64_t a1)
{
  return ListenerInfo<unsigned long long>::~ListenerInfo(a1 + 40);
}

void ___ZN18OSStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = (_DWORD *)v2[2];
  uint64_t v4 = (_DWORD *)v2[3];
  if (v3 == v4)
  {
LABEL_4:
    dispatch_get_global_queue(0, 0);
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v69, *(CFTypeRef *)(a1 + 56));
    v69[0] = &unk_1EDF94F70;
    uint64_t v5 = os_state_add_handler();
    if (v5)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56) = v5;
      uint64_t v6 = (char *)v2[2];
      unint64_t v7 = v2[3];
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v9 = v7 - (void)v6;
      if ((char *)v7 == v6)
      {
        int v11 = (char *)v2[3];
      }
      else
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
        int v11 = (char *)v2[2];
        do
        {
          unint64_t v12 = v10 >> 1;
          int v13 = (unsigned int *)&v11[24 * (v10 >> 1)];
          unsigned int v15 = *v13;
          int v14 = (char *)(v13 + 6);
          v10 += ~(v10 >> 1);
          if (v15 < *(_DWORD *)(v8 + 40)) {
            int v11 = v14;
          }
          else {
            unint64_t v10 = v12;
          }
        }
        while (v10);
      }
      uint64_t v19 = (v11 - v6) / 24;
      uint64_t v20 = &v6[24 * v19];
      unint64_t v21 = v2[4];
      if (v7 >= v21)
      {
        unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3) + 1;
        if (v35 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (void)v6) >> 3);
        if (2 * v36 > v35) {
          unint64_t v35 = 2 * v36;
        }
        if (v36 >= 0x555555555555555) {
          unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v37 = v35;
        }
        uint64_t v74 = v2 + 4;
        if (v37) {
          unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v37);
        }
        else {
          uint64_t v38 = 0;
        }
        unint64_t v40 = v37 + 24 * v19;
        uint64_t v70 = (char *)v37;
        v71 = (char *)v40;
        uint64_t v72 = (char *)v40;
        uint64_t v73 = (char *)(v37 + 24 * v38);
        if (v19 == v38)
        {
          if (v11 - v6 < 1)
          {
            if (v11 == v6) {
              unint64_t v42 = 1;
            }
            else {
              unint64_t v42 = 2 * v19;
            }
            int v77 = v74;
            uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v42);
            uint64_t v45 = &v43[24 * (v42 >> 2)];
            BOOL v46 = v71;
            uint64_t v47 = v72;
            int v48 = v45;
            if (v72 != v71)
            {
              uint64_t v49 = 0;
              uint64_t v50 = (v72 - v71) / 24;
              int v48 = &v45[24 * v50];
              do
              {
                uint64_t v51 = &v45[v49];
                *((void *)v51 + 1) = 0;
                *(_DWORD *)uint64_t v51 = *(_DWORD *)&v46[v49];
                *((void *)v51 + 2) = *(void *)&v46[v49 + 16];
                uint64_t v52 = *(void *)&v46[v49 + 8];
                if (v52)
                {
                  *((void *)v51 + 1) = v52;
                  *(void *)&v46[v49 + 8] = 0;
                }
                v49 += 24;
              }
              while (24 * v50 != v49);
            }
            uint64_t v53 = v70;
            uint64_t v54 = v73;
            uint64_t v70 = v43;
            v71 = &v43[24 * (v42 >> 2)];
            *(void *)AudioStreamBasicDescription buf = v53;
            *(void *)&uint8_t buf[8] = v46;
            uint64_t v72 = v48;
            uint64_t v73 = &v43[24 * v44];
            *(void *)&buf[16] = v47;
            BOOL v76 = v54;
            std::__split_buffer<ListenerInfo<unsigned long long>>::~__split_buffer((uint64_t)buf);
            unint64_t v40 = (unint64_t)v72;
          }
          else
          {
            uint64_t v41 = v19 + 2;
            if (v19 >= -1) {
              uint64_t v41 = v19 + 1;
            }
            v40 -= 24 * (v41 >> 1);
            v71 = (char *)v40;
            uint64_t v72 = (char *)v40;
          }
        }
        *(void *)(v40 + 8) = 0;
        *(_DWORD *)unint64_t v40 = *(_DWORD *)(v8 + 40);
        *(void *)(v40 + 16) = *(void *)(v8 + 56);
        size_t v55 = *(const void **)(v8 + 48);
        if (v55)
        {
          *(void *)(v40 + 8) = _Block_copy(v55);
          unint64_t v40 = (unint64_t)v72;
        }
        uint64_t v56 = (char *)(v40 + 24);
        uint64_t v72 = (char *)(v40 + 24);
        uint64_t v57 = v71;
        uint64_t v58 = (char *)v2[2];
        if (v20 != v58)
        {
          uint64_t v59 = 0;
          do
          {
            uint64_t v60 = &v57[v59];
            *((void *)v60 - 2) = 0;
            *((_DWORD *)v60 - 6) = *(_DWORD *)&v20[v59 - 24];
            *((void *)v60 - 1) = *(void *)&v20[v59 - 8];
            uint64_t v61 = *(const void **)&v20[v59 - 16];
            if (v61) {
              *((void *)v60 - 2) = _Block_copy(v61);
            }
            v59 -= 24;
          }
          while (&v20[v59] != v58);
          v57 += v59;
          uint64_t v56 = v72;
        }
        v71 = v57;
        uint64_t v62 = (char *)v2[3];
        if (v20 != v62)
        {
          uint64_t v63 = 0;
          do
          {
            uint64_t v64 = &v20[v63];
            unint64_t v65 = &v56[v63];
            *((void *)v65 + 1) = 0;
            *(_DWORD *)unint64_t v65 = *(_DWORD *)&v20[v63];
            *((void *)v65 + 2) = *(void *)&v20[v63 + 16];
            int v66 = *(const void **)&v20[v63 + 8];
            if (v66) {
              *((void *)v65 + 1) = _Block_copy(v66);
            }
            v63 += 24;
          }
          while (v64 + 24 != v62);
          v56 += v63;
          uint64_t v57 = v71;
          uint64_t v20 = (char *)v2[3];
        }
        uint64_t v67 = (char *)v2[2];
        v2[2] = v57;
        v2[3] = v56;
        uint64_t v68 = (char *)v2[4];
        v2[4] = v73;
        uint64_t v72 = v20;
        uint64_t v73 = v68;
        uint64_t v70 = v67;
        v71 = v67;
        std::__split_buffer<ListenerInfo<unsigned long long>>::~__split_buffer((uint64_t)&v70);
      }
      else if (v20 == (char *)v7)
      {
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)unint64_t v7 = *(_DWORD *)(v8 + 40);
        *(void *)(v7 + 16) = *(void *)(v8 + 56);
        uint64_t v39 = *(const void **)(v8 + 48);
        if (v39) {
          *(void *)(v7 + 8) = _Block_copy(v39);
        }
        v2[3] = v7 + 24;
      }
      else
      {
        uint64_t v22 = v7 - 24;
        unint64_t v23 = v2[3];
        if (v7 >= 0x18)
        {
          uint64_t v24 = 0;
          unint64_t v25 = &v6[24 * v19 + 8 * ((uint64_t)(v7 - (void)(v20 + 24)) >> 3)];
          do
          {
            unint64_t v26 = v7 + v24;
            *(void *)(v26 + 8) = 0;
            *(_DWORD *)unint64_t v26 = *(_DWORD *)&v25[v24];
            *(void *)(v26 + 16) = *(void *)&v25[v24 + 16];
            uint64_t v27 = *(void *)&v25[v24 + 8];
            if (v27)
            {
              *(void *)(v26 + 8) = v27;
              *(void *)&v25[v24 + 8] = 0;
            }
            v24 += 24;
          }
          while ((unint64_t)&v25[v24] < v7);
          unint64_t v23 = v7 + v24;
        }
        v2[3] = v23;
        if ((char *)v7 != v20 + 24)
        {
          uint64_t v28 = 8 * ((uint64_t)(v7 - (void)(v20 + 24)) >> 3);
          do
          {
            uint64_t v22 = ListenerInfo<unsigned long long>::operator=(v22, (uint64_t)&v6[24 * v19 - 24 + v28]) - 24;
            v28 -= 24;
          }
          while (v28);
        }
        unint64_t v29 = v8 + 40;
        if ((unint64_t)v20 <= v29) {
          v29 += 24 * (v2[3] > v29);
        }
        if (v20 != (char *)v29)
        {
          *(_DWORD *)uint64_t v20 = *(_DWORD *)v29;
          unint64_t v30 = &v6[24 * v19];
          uint64_t v33 = (const void *)*((void *)v30 + 1);
          uint64_t v32 = (void **)(v30 + 8);
          uint64_t v31 = v33;
          v32[1] = *(void **)(v29 + 16);
          if (v33)
          {
            _Block_release(v31);
            *uint64_t v32 = 0;
          }
          unint64_t v34 = *(const void **)(v29 + 8);
          if (v34) {
            *uint64_t v32 = _Block_copy(v34);
          }
        }
      }
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v69);
  }
  else
  {
    while (*v3 != *(_DWORD *)(a1 + 64))
    {
      v3 += 6;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v16 = CADefaultLog();
    if (v16)
    {
      uint64_t v17 = v16;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&uint8_t buf[4] = "CACentralStateDump.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 258;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v18;
        _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Subsystem %d is attempting to register more than once", buf, 0x18u);
      }
    }
  }
}

void sub_18FFC5B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  *(void *)(v17 + 24) = v18;
  OS::CF::UntypedObject::~UntypedObject(v16);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_48c20_ZTSKN2OS2CF6StringE(uint64_t a1)
{
}

OS::CF::UntypedObject *__copy_helper_block_e8_48c20_ZTSKN2OS2CF6StringE(uint64_t a1, uint64_t a2)
{
  uint64_t result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 48), *(CFTypeRef *)(a2 + 56));
  *(void *)(a1 + 48) = &unk_1EDF94F70;
  return result;
}

void *___ZN18OSStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 16) != 3) {
    return 0;
  }
  uint64_t v19 = 0;
  CFIndex numBytes = 0;
  uint64_t v21 = 0;
  uint64_t v3 = funopen(&v18, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  uint64_t v18 = (FILE *)v3;
  if (v3)
  {
    gettimeofday(&v17, 0);
    time_t tv_sec = v17.tv_sec;
    localtime_r(&tv_sec, &v23);
    snprintf(__str, 0x14uLL, "%02d:%02d:%02d.%03d", v23.tm_hour, v23.tm_min, v23.tm_sec, v17.tv_usec);
    fwrite("\n------------------------------------------------------------\n", 0x3EuLL, 1uLL, (FILE *)v3);
    OS::CF::String::AsStdString((std::string *)&v23, a1 + 40);
    if (v23.tm_year >= 0) {
      uint64_t v4 = &v23;
    }
    else {
      uint64_t v4 = *(tm **)&v23.tm_sec;
    }
    fprintf((FILE *)v3, "%s %s\n", __str, (const char *)v4);
    if (SHIBYTE(v23.tm_year) < 0) {
      operator delete(*(void **)&v23.tm_sec);
    }
    fwrite("------------------------------------------------------------\n", 0x3DuLL, 1uLL, (FILE *)v3);
    (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) + 16))();
    uint64_t v5 = CAMemoryStream::cstr(&v18);
    CFIndex v6 = numBytes;
    uint64_t v19 = 0;
    CFIndex numBytes = 0;
    uint64_t v21 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v8 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v5, v6, 0x600u, 0, 0);
    v17.time_t tv_sec = (__darwin_time_t)&unk_1EDF94F70;
    *(void *)&v17.tv_usec = v8;
    if (v8)
    {
      CFDataRef Data = CFPropertyListCreateData(v7, v8, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      time_t tv_sec = (time_t)Data;
      char v16 = 1;
      if (Data)
      {
        unsigned int Length = CFDataGetLength(Data);
        uint64_t v3 = malloc_type_calloc(1uLL, Length + 200, 0x52A8AD7DuLL);
        if (v3)
        {
          int v11 = (PlatformUtilities *)getpid();
          PlatformUtilities::processName(v11);
          if (v23.tm_year >= 0) {
            unint64_t v12 = &v23;
          }
          else {
            unint64_t v12 = *(tm **)&v23.tm_sec;
          }
          snprintf((char *)v3 + 136, 0x40uLL, "CACentralStateDump (process: %s)", (const char *)v12);
          if (SHIBYTE(v23.tm_year) < 0) {
            operator delete(*(void **)&v23.tm_sec);
          }
          *(_DWORD *)uint64_t v3 = 1;
          v25.length = CFDataGetLength((CFDataRef)tv_sec);
          v25.location = 0;
          CFDataGetBytes((CFDataRef)tv_sec, v25, (UInt8 *)v3 + 200);
          *((_DWORD *)v3 + 1) = CFDataGetLength((CFDataRef)tv_sec);
        }
      }
      else
      {
        uint64_t v3 = 0;
      }
      CACFData::~CACFData((CACFData *)&tv_sec);
    }
    else
    {
      uint64_t v3 = 0;
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
    int v13 = v18;
  }
  else
  {
    int v13 = 0;
  }
  fclose(v13);
  free(v19);
  return v3;
}

void sub_18FFC5F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,FILE *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,int a29,__int16 a30,int a31,__int16 a32,__int16 a33,char a34,char a35)
{
}

uint64_t std::__split_buffer<ListenerInfo<unsigned long long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    ListenerInfo<unsigned long long>::~ListenerInfo(i - 24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void __destroy_helper_block_e8_40c20_ZTSKN2OS2CF6StringE(uint64_t a1)
{
}

OS::CF::UntypedObject *__copy_helper_block_e8_40c20_ZTSKN2OS2CF6StringE(uint64_t a1, uint64_t a2)
{
  uint64_t result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 40), *(CFTypeRef *)(a2 + 48));
  *(void *)(a1 + 40) = &unk_1EDF94F70;
  return result;
}

void OS::CF::String::AsStdString(std::string *this, uint64_t a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  CFStringRef v3 = *(const __CFString **)(a2 + 8);
  if (v3)
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    if (CStringPtr)
    {
      std::string::__assign_external(this, CStringPtr);
    }
    else
    {
      CFIndex maxBufLen = 0;
      CFStringRef v6 = *(const __CFString **)(a2 + 8);
      v10.length = CFStringGetLength(v6);
      v10.location = 0;
      CFStringGetBytes(v6, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
      std::vector<char>::vector(&v8, maxBufLen + 1);
      CFStringRef v7 = *(const __CFString **)(a2 + 8);
      v11.length = CFStringGetLength(v7);
      v11.location = 0;
      CFStringGetBytes(v7, v11, 0x8000100u, 0, 0, (UInt8 *)v8.__begin_, maxBufLen, &maxBufLen);
      v8.__begin_[maxBufLen] = 0;
      std::string::__assign_external(this, v8.__begin_);
      if (v8.__begin_)
      {
        v8.__end_ = v8.__begin_;
        operator delete(v8.__begin_);
      }
    }
  }
}

void OSStateDumpManager::~OSStateDumpManager(OSStateDumpManager *this)
{
  OSStateDumpManager::~OSStateDumpManager(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(void *)this = &unk_1EDF92780;
  uint64_t v2 = *((void *)this + 2);
  CFStringRef v3 = *((void *)this + 3);
  while (v2 != v3)
  {
    os_state_remove_handler();
    v2 += 24;
  }
  dispatch_release(*((dispatch_object_t *)this + 1));
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 3);
    CFStringRef v6 = (void *)*((void *)this + 2);
    if (v5 != v4)
    {
      do
        uint64_t v5 = ListenerInfo<unsigned long long>::~ListenerInfo(v5 - 24);
      while (v5 != v4);
      CFStringRef v6 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v4;
    operator delete(v6);
  }
}

void ___ZN23NotifyDStateDumpManagerC2Ev_block_invoke(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 24) == a2)
  {
    gettimeofday((timeval *)&v25, 0);
    v18.time_t tv_sec = *(void *)&v25.tm_sec;
    localtime_r(&v18.tv_sec, &v23);
    snprintf(__str, 0x14uLL, "%02d:%02d:%02d.%03d", v23.tm_hour, v23.tm_min, v23.tm_sec, v25.tm_hour);
    gettimeofday(&v18, 0);
    v21[0] = v18.tv_sec;
    localtime_r(v21, &v25);
    int tm_mon = v25.tm_mon;
    int tm_year = v25.tm_year;
    int tm_mday = v25.tm_mday;
    std::string::basic_string[abi:ne180100]<0>(&v18, *(char **)(v2 + 16));
    CFStringRef v6 = &v25;
    CAFileSystemUtilities::GetTemporarySubDirectory();
    if (v25.tm_year < 0) {
      CFStringRef v6 = *(tm **)&v25.tm_sec;
    }
    CFStringRef v7 = (PlatformUtilities *)getpid();
    PlatformUtilities::processName(v7);
    if (v22 >= 0) {
      std::vector<char> v8 = v21;
    }
    else {
      std::vector<char> v8 = (time_t *)v21[0];
    }
    snprintf((char *)&v23, 0x80uLL, "%s/coreaudiostatedump_%s_%d_%d_%d_%s.txt", (const char *)v6, (const char *)v8, tm_year + 1900, tm_mon + 1, tm_mday, __str);
    if (v22 < 0) {
      operator delete((void *)v21[0]);
    }
    if (SHIBYTE(v25.tm_year) < 0) {
      operator delete(*(void **)&v25.tm_sec);
    }
    if (v19 < 0) {
      operator delete((void *)v18.tv_sec);
    }
    uint64_t v9 = fopen((const char *)&v23, "w");
    CFRange v10 = v9;
    if (v9)
    {
      fprintf(v9, "State dump triggered at %s\n", __str);
      uint64_t v11 = *(void *)(v2 + 40);
      uint64_t v12 = *(void *)(v2 + 48);
      if (v11 != v12)
      {
        uint64_t v13 = v11 + 16;
        do
        {
          if (*(void *)(v13 - 8))
          {
            gettimeofday(&v18, 0);
            time_t tv_sec = v18.tv_sec;
            localtime_r(&tv_sec, &v25);
            snprintf((char *)v21, 0x14uLL, "%02d:%02d:%02d.%03d", v25.tm_hour, v25.tm_min, v25.tm_sec, v18.tv_usec);
            fwrite("\n------------------------------------------------------------\n", 0x3EuLL, 1uLL, v10);
            OS::CF::String::AsStdString((std::string *)&v25, v13);
            if (v25.tm_year >= 0) {
              int v14 = &v25;
            }
            else {
              int v14 = *(tm **)&v25.tm_sec;
            }
            fprintf(v10, "%s %s\n", (const char *)v21, (const char *)v14);
            if (SHIBYTE(v25.tm_year) < 0) {
              operator delete(*(void **)&v25.tm_sec);
            }
            fwrite("------------------------------------------------------------\n", 0x3DuLL, 1uLL, v10);
            (*(void (**)(void))(*(void *)(v13 - 8) + 16))();
          }
          uint64_t v15 = v13 + 16;
          v13 += 32;
        }
        while (v15 != v12);
      }
      fclose(v10);
    }
    else
    {
      char v16 = CADefaultLog();
      if (v16)
      {
        timeval v17 = v16;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v25.tm_sec = 136315650;
          *(void *)&v25.tm_min = "CACentralStateDump.cpp";
          LOWORD(v25.tm_mday) = 1024;
          *(int *)((char *)&v25.tm_mday + 2) = 114;
          HIWORD(v25.tm_mon) = 2080;
          *(void *)&v25.int tm_year = &v23;
          _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't successfully create state dump file (attempted location: %s)", (uint8_t *)&v25, 0x1Cu);
        }
      }
    }
  }
}

void sub_18FFC6794(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(v24);
}

void sub_18FFC67C4()
{
  _Unwind_Resume(v0);
}

void sub_18FFC67CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  fclose(v16);
  JUMPOUT(0x18FFC67D8);
}

uint64_t CACentralStateDumpRegisterSubsystem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  GetStateDumpManagers(&v11);
  CFStringRef v6 = v11;
  CFStringRef v7 = v12;
  if (v11 == v12)
  {
LABEL_5:
    uint64_t v9 = 0;
  }
  else
  {
    std::vector<char> v8 = v11;
    while (1)
    {
      uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v8 + 16))(*v8, a1, a2, a3);
      if (v9) {
        break;
      }
      if (++v8 == v7) {
        goto LABEL_5;
      }
    }
  }
  if (v6) {
    operator delete(v6);
  }
  return v9;
}

void sub_18FFC689C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *GetStateDumpManagers(void *a1)
{
  if (GetStateDumpManagers(void)::onceToken != -1) {
    dispatch_once(&GetStateDumpManagers(void)::onceToken, &__block_literal_global_2127);
  }
  uint64_t v2 = GetStateDumpManagers(void)::sNotifyDStateDumpManager;
  uint64_t v3 = GetStateDumpManagers(void)::sOSStateDumpManager;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t result = operator new(0x10uLL);
  a1[1] = result + 2;
  a1[2] = result + 2;
  *uint64_t result = v2;
  result[1] = v3;
  *a1 = result;
  return result;
}

void ___ZL20GetStateDumpManagersv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18FFC6B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)(v15 + 40);
  std::vector<ListenerInfo<OS::CF::String>>::__destroy_vector::operator()[abi:ne180100](&a15);
  MEMORY[0x192FC8940](v15, 0x10F1C402725CAECLL);
  _Unwind_Resume(a1);
}

uint64_t CACentralStateDumpUnregisterSubsystem(uint64_t a1)
{
  GetStateDumpManagers(&v6);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  if (v6 != v7)
  {
    uint64_t v4 = v6;
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v4 + 24))(*v4, a1);
      ++v4;
    }
    while (v4 != v3);
  }
  if (v2) {
    operator delete(v2);
  }
  return 0;
}

void sub_18FFC6BE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::Reinterleaver::Zero(uint64_t this, uint64_t a2, unsigned __int8 *a3, int a4)
{
  LODWORD(v4) = a3;
  if ((int)a3 >= 32)
  {
    uint64_t v5 = a3;
    do
    {
      if (this)
      {
        CFStringRef v6 = (_OWORD *)(a2 + a3 - v5);
        int v7 = this;
        do
        {
          *CFStringRef v6 = 0uLL;
          v6[1] = 0uLL;
          CFStringRef v6 = (_OWORD *)((char *)v6 + a4);
          --v7;
        }
        while (v7);
      }
      LODWORD(v4) = v5 - 32;
      BOOL v8 = v5 <= 63;
      v5 -= 32;
    }
    while (!v8);
  }
  if ((int)v4 >= 24)
  {
    uint64_t v4 = v4;
    do
    {
      if (this)
      {
        uint64_t v9 = (void *)(a2 + (int)a3 - v4);
        int v10 = this;
        do
        {
          *uint64_t v9 = 0;
          v9[1] = 0;
          _OWORD v9[2] = 0;
          uint64_t v9 = (void *)((char *)v9 + a4);
          --v10;
        }
        while (v10);
      }
      int v11 = v4 - 24;
      BOOL v8 = v4 <= 47;
      v4 -= 24;
    }
    while (!v8);
    LODWORD(v4) = v11;
  }
  if ((int)v4 >= 16)
  {
    uint64_t v4 = v4;
    do
    {
      if (this)
      {
        uint64_t v12 = (void *)(a2 + (int)a3 - v4);
        int v13 = this;
        do
        {
          *uint64_t v12 = 0;
          v12[1] = 0;
          uint64_t v12 = (void *)((char *)v12 + a4);
          --v13;
        }
        while (v13);
      }
      int v14 = v4 - 16;
      BOOL v8 = v4 <= 31;
      v4 -= 16;
    }
    while (!v8);
    LODWORD(v4) = v14;
  }
  if ((int)v4 >= 12)
  {
    uint64_t v15 = v4;
    uint64_t v16 = a2 - v4 + (int)a3 + 8;
    do
    {
      if (this)
      {
        timeval v17 = (_DWORD *)v16;
        int v18 = this;
        do
        {
          *((void *)v17 - 1) = 0;
          *timeval v17 = 0;
          timeval v17 = (_DWORD *)((char *)v17 + a4);
          --v18;
        }
        while (v18);
      }
      int v19 = v15 - 12;
      v16 += 12;
      BOOL v8 = v15 <= 23;
      v15 -= 12;
    }
    while (!v8);
    LODWORD(v4) = v19;
  }
  if ((int)v4 >= 8)
  {
    uint64_t v4 = v4;
    do
    {
      if (this)
      {
        uint64_t v20 = (void *)(a2 + (int)a3 - v4);
        int v21 = this;
        do
        {
          *uint64_t v20 = 0;
          uint64_t v20 = (void *)((char *)v20 + a4);
          --v21;
        }
        while (v21);
      }
      int v22 = v4 - 8;
      BOOL v8 = v4 <= 15;
      v4 -= 8;
    }
    while (!v8);
    LODWORD(v4) = v22;
  }
  if ((int)v4 > 3)
  {
    uint64_t v4 = v4;
    do
    {
      if (this)
      {
        tm v23 = (_DWORD *)(a2 + (int)a3 - v4);
        int v24 = this;
        do
        {
          _DWORD *v23 = 0;
          tm v23 = (_DWORD *)((char *)v23 + a4);
          --v24;
        }
        while (v24);
      }
      int v25 = v4 - 4;
      BOOL v8 = v4 <= 7;
      v4 -= 4;
    }
    while (!v8);
    LODWORD(v4) = v25;
  }
  if ((int)v4 < 3)
  {
    if (v4 == 2)
    {
      if (this)
      {
        uint64_t v27 = (_WORD *)(a2 + (int)a3 - 2);
        do
        {
          _WORD *v27 = 0;
          uint64_t v27 = (_WORD *)((char *)v27 + a4);
          this = (this - 1);
        }
        while (this);
      }
    }
    else if ((int)v4 >= 1 && this)
    {
      uint64_t v28 = (unsigned char *)(a2 + (int)a3 - 1);
      do
      {
        unsigned char *v28 = 0;
        v28 += a4;
        this = (this - 1);
      }
      while (this);
    }
  }
  else if (this)
  {
    uint64_t v26 = (unsigned char *)(a2 + (int)a3 - 3 + 2);
    do
    {
      *((_WORD *)v26 - 1) = 0;
      unsigned char *v26 = 0;
      v26 += a4;
      this = (this - 1);
    }
    while (this);
  }
  return this;
}

uint64_t acv2::Reinterleaver::Blit(uint64_t this, uint64_t a2, const unsigned __int8 *a3, unsigned __int8 *a4, int a5, int a6)
{
  LODWORD(v6) = a4;
  if ((int)a4 >= 32)
  {
    int v7 = (long long *)(a2 + 16);
    BOOL v8 = a3 + 16;
    uint64_t v9 = a4;
    do
    {
      if (this)
      {
        int v10 = (unsigned __int8 *)v8;
        int v11 = v7;
        int v12 = this;
        do
        {
          long long v13 = *v11;
          *((_OWORD *)v10 - 1) = *(v11 - 1);
          *(_OWORD *)int v10 = v13;
          int v11 = (long long *)((char *)v11 + a5);
          v10 += a6;
          --v12;
        }
        while (v12);
      }
      LODWORD(v6) = v9 - 32;
      v7 += 2;
      v8 += 32;
      BOOL v14 = v9 <= 63;
      v9 -= 32;
    }
    while (!v14);
  }
  if ((int)v6 >= 24)
  {
    uint64_t v15 = v6;
    uint64_t v16 = a2 - v6;
    timeval v17 = &a3[-v6];
    do
    {
      if (this)
      {
        int v18 = v17;
        uint64_t v19 = v16;
        int v20 = this;
        do
        {
          int v21 = (unsigned __int8 *)&v18[(int)a4];
          uint64_t v22 = *(void *)(v19 + (int)a4 + 16);
          *(_OWORD *)int v21 = *(_OWORD *)(v19 + (int)a4);
          *((void *)v21 + 2) = v22;
          v19 += a5;
          v18 += a6;
          --v20;
        }
        while (v20);
      }
      int v23 = v15 - 24;
      v16 += 24;
      v17 += 24;
      BOOL v14 = v15 <= 47;
      v15 -= 24;
    }
    while (!v14);
    LODWORD(v6) = v23;
  }
  if ((int)v6 >= 16)
  {
    uint64_t v6 = v6;
    do
    {
      if (this)
      {
        int v24 = (unsigned __int8 *)&a3[(int)a4 - v6];
        int v25 = (_OWORD *)(a2 + (int)a4 - v6);
        int v26 = this;
        do
        {
          *(_OWORD *)int v24 = *v25;
          int v25 = (_OWORD *)((char *)v25 + a5);
          v24 += a6;
          --v26;
        }
        while (v26);
      }
      int v27 = v6 - 16;
      BOOL v14 = v6 <= 31;
      v6 -= 16;
    }
    while (!v14);
    LODWORD(v6) = v27;
  }
  if ((int)v6 >= 12)
  {
    uint64_t v28 = v6;
    uint64_t v29 = a2 - v6;
    unint64_t v30 = &a3[-v6];
    do
    {
      if (this)
      {
        uint64_t v31 = v30;
        uint64_t v32 = v29;
        int v33 = this;
        do
        {
          unint64_t v34 = (unsigned __int8 *)&v31[(int)a4];
          int v35 = *(_DWORD *)(v32 + (int)a4 + 8);
          *(void *)unint64_t v34 = *(void *)(v32 + (int)a4);
          *((_DWORD *)v34 + 2) = v35;
          v32 += a5;
          v31 += a6;
          --v33;
        }
        while (v33);
      }
      int v36 = v28 - 12;
      v29 += 12;
      v30 += 12;
      BOOL v14 = v28 <= 23;
      v28 -= 12;
    }
    while (!v14);
    LODWORD(v6) = v36;
  }
  if ((int)v6 >= 8)
  {
    uint64_t v6 = v6;
    do
    {
      if (this)
      {
        unint64_t v37 = (unsigned __int8 *)&a3[(int)a4 - v6];
        uint64_t v38 = (void *)(a2 + (int)a4 - v6);
        int v39 = this;
        do
        {
          *(void *)unint64_t v37 = *v38;
          uint64_t v38 = (void *)((char *)v38 + a5);
          v37 += a6;
          --v39;
        }
        while (v39);
      }
      int v40 = v6 - 8;
      BOOL v14 = v6 <= 15;
      v6 -= 8;
    }
    while (!v14);
    LODWORD(v6) = v40;
  }
  if ((int)v6 > 3)
  {
    uint64_t v6 = v6;
    do
    {
      if (this)
      {
        uint64_t v41 = (unsigned __int8 *)&a3[(int)a4 - v6];
        unint64_t v42 = (_DWORD *)(a2 + (int)a4 - v6);
        int v43 = this;
        do
        {
          *(_DWORD *)uint64_t v41 = *v42;
          unint64_t v42 = (_DWORD *)((char *)v42 + a5);
          v41 += a6;
          --v43;
        }
        while (v43);
      }
      int v44 = v6 - 4;
      BOOL v14 = v6 <= 7;
      v6 -= 4;
    }
    while (!v14);
    LODWORD(v6) = v44;
  }
  if ((int)v6 < 3)
  {
    if (v6 == 2)
    {
      if (this)
      {
        uint64_t v49 = (int)a4 - 2;
        uint64_t v50 = (unsigned __int8 *)&a3[v49];
        uint64_t v51 = (_WORD *)(a2 + v49);
        do
        {
          *(_WORD *)uint64_t v50 = *v51;
          uint64_t v51 = (_WORD *)((char *)v51 + a5);
          v50 += a6;
          this = (this - 1);
        }
        while (this);
      }
    }
    else if ((int)v6 >= 1 && this)
    {
      uint64_t v52 = (int)a4 - 1;
      uint64_t v53 = (unsigned __int8 *)&a3[v52];
      uint64_t v54 = (unsigned __int8 *)(a2 + v52);
      do
      {
        *uint64_t v53 = *v54;
        v54 += a5;
        v53 += a6;
        this = (this - 1);
      }
      while (this);
    }
  }
  else if (this)
  {
    uint64_t v45 = (int)a4 - 3 + 2;
    BOOL v46 = (unsigned __int8 *)(a2 + v45);
    uint64_t v47 = (unsigned __int8 *)&a3[v45];
    do
    {
      unsigned __int8 v48 = *v46;
      *((_WORD *)v47 - 1) = *((_WORD *)v46 - 1);
      unsigned __int8 *v47 = v48;
      v46 += a5;
      v47 += a6;
      this = (this - 1);
    }
    while (this);
  }
  return this;
}

uint64_t TInterleaver_SIMD<PCMSInt16_SIMD>::Interleave(uint64_t result, const void **a2, char *__dst, int a4)
{
  if (!result) {
    return result;
  }
  if (result == 1)
  {
    uint64_t v5 = *a2;
    return (uint64_t)memcpy(__dst, v5, 2 * a4);
  }
  uint64_t v6 = 0;
  unsigned int v7 = a4 + 3;
  if (a4 >= 0) {
    int v8 = a4;
  }
  else {
    int v8 = a4 + 3;
  }
  int v9 = v8 >> 2;
  uint64_t v10 = (int)result;
  uint64_t v11 = 8 * (int)result;
  uint64_t v12 = 2 * (int)result;
  uint64_t v13 = 6 * (int)result;
  uint64_t v14 = 4 * (int)result;
  while ((int)result >= 8)
  {
    uint64_t v15 = &a2[v6];
    uint64_t v16 = (__int16 *)*v15;
    timeval v17 = *(const void **)((char *)a2 + ((8 * v6) | 8));
    int v18 = v15[2];
    uint64_t v19 = v15[3];
    int v20 = (__int16 *)v15[4];
    int v21 = v15[5];
    uint64_t v22 = &__dst[2 * v6];
    int v23 = v15[6];
    int v24 = v15[7];
    if (v7 >= 7)
    {
      uint64_t v25 = 0;
      int v26 = v9;
      do
      {
        int16x4_t v27 = *(int16x4_t *)&v16[v25];
        int16x4_t v28 = *(int16x4_t *)&v17[v25];
        int16x4_t v29 = *(int16x4_t *)&v20[v25];
        int16x4_t v30 = *(int16x4_t *)&v21[v25];
        LODWORD(v31) = vzip1_s16(v27, v28).u32[0];
        WORD2(v31) = *(void *)&v18[v25];
        HIWORD(v31) = *(void *)&v19[v25];
        LODWORD(v32) = vzip1_s16(v29, v30).u32[0];
        WORD2(v32) = *(void *)&v23[v25];
        HIWORD(v32) = *(void *)&v24[v25];
        LODWORD(v33) = vtrn2_s16(v27, v28).u32[0];
        WORD2(v33) = WORD1(*(void *)&v18[v25]);
        HIWORD(v33) = WORD1(*(void *)&v19[v25]);
        LODWORD(v34) = vtrn2_s16(v29, v30).u32[0];
        WORD2(v34) = WORD1(*(void *)&v23[v25]);
        HIWORD(v34) = WORD1(*(void *)&v24[v25]);
        LODWORD(v35) = vzip2_s16(v27, v28).u32[0];
        WORD2(v35) = WORD2(*(void *)&v18[v25]);
        HIWORD(v35) = WORD2(*(void *)&v19[v25]);
        LODWORD(v36) = vzip2_s16(v29, v30).u32[0];
        WORD2(v36) = WORD2(*(void *)&v23[v25]);
        HIWORD(v36) = WORD2(*(void *)&v24[v25]);
        v27.i32[0] = vuzp2_s16(vuzp2_s16(v27, v28), v27).u32[0];
        v27.i16[2] = HIWORD(*(void *)&v18[v25]);
        v27.i16[3] = HIWORD(*(void *)&v19[v25]);
        v29.i32[0] = vuzp2_s16(vuzp2_s16(v29, v30), v29).u32[0];
        v29.i16[2] = HIWORD(*(void *)&v23[v25]);
        v29.i16[3] = HIWORD(*(void *)&v24[v25]);
        *(void *)uint64_t v22 = v31;
        *((void *)v22 + 1) = v32;
        unint64_t v37 = &v22[v12 + 8];
        *((void *)v37 - 1) = v33;
        *(void *)unint64_t v37 = v34;
        uint64_t v38 = &v22[v14];
        *(void *)uint64_t v38 = v35;
        *((void *)v38 + 1) = v36;
        int v39 = (int16x4_t *)&v22[v13];
        *int v39 = v27;
        v39[1] = v29;
        v25 += 4;
        v22 += v11;
        --v26;
      }
      while (v26);
      uint64_t v16 = (__int16 *)((char *)v16 + v25 * 2);
      timeval v17 = (_WORD *)((char *)v17 + v25 * 2);
      int v18 = (_WORD *)((char *)v18 + v25 * 2);
      uint64_t v19 = (_WORD *)((char *)v19 + v25 * 2);
      int v20 = (__int16 *)((char *)v20 + v25 * 2);
      int v21 = (_WORD *)((char *)v21 + v25 * 2);
      int v23 = (_WORD *)((char *)v23 + v25 * 2);
      int v24 = (_WORD *)((char *)v24 + v25 * 2);
    }
    if ((a4 & 3) != 0)
    {
      int v40 = v22 + 8;
      int v41 = a4 & 3;
      do
      {
        __int16 v42 = *v16++;
        LOWORD(v43) = v42;
        WORD1(v43) = *v17++;
        WORD2(v43) = *v18++;
        HIWORD(v43) = *v19++;
        __int16 v44 = *v20++;
        LOWORD(v45) = v44;
        WORD1(v45) = *v21++;
        WORD2(v45) = *v23++;
        HIWORD(v45) = *v24++;
        *(v40 - 1) = v43;
        *int v40 = v45;
        int v40 = (void *)((char *)v40 + v12);
        --v41;
      }
      while (v41);
    }
    int v46 = -8;
    uint64_t v47 = 8;
LABEL_34:
    v6 += v47;
    uint64_t result = (result + v46);
    if (!result) {
      return result;
    }
  }
  if ((int)result >= 4)
  {
    unsigned __int8 v48 = &a2[v6];
    uint64_t v49 = (__int16 *)*v48;
    uint64_t v50 = *(const void **)((char *)a2 + ((8 * v6) | 8));
    uint64_t v51 = v48[2];
    uint64_t v52 = v48[3];
    uint64_t v53 = &__dst[2 * v6];
    if (v7 >= 7)
    {
      uint64_t v54 = 0;
      int v55 = v9;
      do
      {
        int16x4_t v56 = *(int16x4_t *)&v49[v54];
        int16x4_t v57 = *(int16x4_t *)&v50[v54];
        LODWORD(v58) = vzip1_s16(v56, v57).u32[0];
        WORD2(v58) = *(void *)&v51[v54];
        HIWORD(v58) = *(void *)&v52[v54];
        LODWORD(v59) = vtrn2_s16(v56, v57).u32[0];
        WORD2(v59) = WORD1(*(void *)&v51[v54]);
        uint64_t v60 = v53;
        HIWORD(v59) = WORD1(*(void *)&v52[v54]);
        LODWORD(v61) = vzip2_s16(v56, v57).u32[0];
        WORD2(v61) = WORD2(*(void *)&v51[v54]);
        HIWORD(v61) = WORD2(*(void *)&v52[v54]);
        v56.i32[0] = vuzp2_s16(vuzp2_s16(v56, v57), v56).u32[0];
        v56.i16[2] = HIWORD(*(void *)&v51[v54]);
        v56.i16[3] = HIWORD(*(void *)&v52[v54]);
        *(void *)uint64_t v53 = v58;
        uint64_t v62 = &v53[v12];
        *(void *)uint64_t v62 = v59;
        uint64_t v63 = &v62[v12];
        *(void *)uint64_t v63 = v61;
        uint64_t v64 = (int16x4_t *)&v63[v12];
        int16x4_t *v64 = v56;
        v54 += 4;
        uint64_t v53 = (char *)v64 + v12;
        --v55;
      }
      while (v55);
      uint64_t v53 = &v60[v11];
      uint64_t v52 = (_WORD *)((char *)v52 + v54 * 2);
      uint64_t v51 = (_WORD *)((char *)v51 + v54 * 2);
      uint64_t v50 = (_WORD *)((char *)v50 + v54 * 2);
      uint64_t v49 = (__int16 *)((char *)v49 + v54 * 2);
    }
    int v65 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        __int16 v66 = *v49++;
        LOWORD(v67) = v66;
        WORD1(v67) = *v50++;
        WORD2(v67) = *v51++;
        HIWORD(v67) = *v52++;
        *(void *)uint64_t v53 = v67;
        v53 += v12;
        --v65;
      }
      while (v65);
    }
    int v46 = -4;
    uint64_t v47 = 4;
    goto LABEL_34;
  }
  if ((int)result >= 2)
  {
    uint64_t v68 = (uint16x4_t *)a2[v6];
    int v69 = *(uint16x4_t **)((char *)a2 + ((8 * v6) | 8));
    uint64_t v70 = &__dst[2 * v6];
    int v71 = v9;
    if (v7 >= 7)
    {
      do
      {
        uint16x4_t v72 = *v68++;
        uint16x4_t v73 = v72;
        uint16x4_t v74 = *v69++;
        uint64_t v75 = v70;
        int8x16_t v76 = (int8x16_t)vmovl_u16(v74);
        int32x4_t v77 = (int32x4_t)vmovl_u16(v73);
        int32x2_t v78 = (int32x2_t)vextq_s8(v76, v76, 8uLL).u64[0];
        int32x2_t v79 = (int32x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u64[0];
        *(_WORD *)uint64_t v70 = v77.i16[0];
        *((_WORD *)v70 + 1) = vzip1_s32(*(int32x2_t *)&v77, *(int32x2_t *)&v76).i16[2];
        v80 = &v70[v12];
        *((_WORD *)v80 + 1) = v76.i16[2];
        *(_WORD *)v80 = vdup_lane_s32(*(int32x2_t *)v77.i8, 1).u16[0];
        v81 = &v70[v12 + v12];
        *((_WORD *)v81 + 1) = vzip1_s32(v79, v78).i16[2];
        *(_WORD *)v81 = v79.i16[0];
        v82 = &v81[v12];
        *((_WORD *)v82 + 1) = v78.i16[2];
        *(_WORD *)v82 = vdup_laneq_s32(v77, 3).u16[0];
        uint64_t v70 = &v82[v12];
        --v71;
      }
      while (v71);
      uint64_t v70 = &v75[v11];
    }
    int v83 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        __int16 v85 = v68->i16[0];
        uint64_t v68 = (uint16x4_t *)((char *)v68 + 2);
        __int16 v84 = v85;
        __int16 v86 = v69->i16[0];
        int v69 = (uint16x4_t *)((char *)v69 + 2);
        *((_WORD *)v70 + 1) = v86;
        *(_WORD *)uint64_t v70 = v84;
        v70 += v12;
        --v83;
      }
      while (v83);
    }
    int v46 = -2;
    uint64_t v47 = 2;
    goto LABEL_34;
  }
  if (a4)
  {
    v87 = (__int16 *)a2[v6];
    uint64_t v88 = 2 * v10;
    v89 = &__dst[2 * v6];
    do
    {
      __int16 v90 = *v87++;
      *(_WORD *)v89 = v90;
      v89 += v88;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t TInterleaver_SIMD<PCMSInt32_SIMD>::Interleave(uint64_t result, const void **a2, char *__dst, int a4)
{
  if (!result) {
    return result;
  }
  if (result == 1)
  {
    uint64_t v5 = *a2;
    return (uint64_t)memcpy(__dst, v5, 4 * a4);
  }
  uint64_t v6 = 0;
  unsigned int v7 = a4 + 3;
  if (a4 >= 0) {
    int v8 = a4;
  }
  else {
    int v8 = a4 + 3;
  }
  int v9 = v8 >> 2;
  uint64_t v10 = (int)result;
  uint64_t v11 = 16 * (int)result;
  uint64_t v12 = 4 * (int)result;
  uint64_t v13 = 12 * (int)result;
  uint64_t v14 = 8 * (int)result;
  while ((int)result >= 8)
  {
    uint64_t v15 = &a2[v6];
    uint64_t v16 = (int *)*v15;
    timeval v17 = *(const void **)((char *)a2 + ((8 * v6) | 8));
    int v18 = v15[2];
    uint64_t v19 = v15[3];
    int v20 = (int *)v15[4];
    int v21 = v15[5];
    uint64_t v22 = &__dst[4 * v6];
    int v23 = v15[6];
    int v24 = v15[7];
    if (v7 >= 7)
    {
      uint64_t v25 = 0;
      int v26 = v9;
      do
      {
        int32x4_t v27 = *(int32x4_t *)&v16[v25];
        int32x4_t v28 = *(int32x4_t *)&v17[v25];
        int32x4_t v29 = *(int32x4_t *)&v20[v25];
        int32x4_t v30 = *(int32x4_t *)&v21[v25];
        *(void *)&long long v31 = vzip1q_s32(v27, v28).u64[0];
        DWORD2(v31) = *(_OWORD *)&v18[v25];
        HIDWORD(v31) = *(_OWORD *)&v19[v25];
        *(void *)&long long v32 = vzip1q_s32(v29, v30).u64[0];
        DWORD2(v32) = *(_OWORD *)&v23[v25];
        HIDWORD(v32) = *(_OWORD *)&v24[v25];
        *(void *)&long long v33 = vtrn2q_s32(v27, v28).u64[0];
        DWORD2(v33) = HIDWORD(*(void *)&v18[v25]);
        HIDWORD(v33) = HIDWORD(*(void *)&v19[v25]);
        *(void *)&long long v34 = vtrn2q_s32(v29, v30).u64[0];
        DWORD2(v34) = HIDWORD(*(void *)&v23[v25]);
        HIDWORD(v34) = HIDWORD(*(void *)&v24[v25]);
        *(void *)&long long v35 = vzip2q_s32(v27, v28).u64[0];
        DWORD2(v35) = *(void *)&v18[v25 + 2];
        HIDWORD(v35) = *(void *)&v19[v25 + 2];
        *(void *)&long long v36 = vzip2q_s32(v29, v30).u64[0];
        DWORD2(v36) = *(void *)&v23[v25 + 2];
        HIDWORD(v36) = *(void *)&v24[v25 + 2];
        v27.i64[0] = vuzp2q_s32(vuzp2q_s32(v27, v28), v27).u64[0];
        v27.i32[2] = HIDWORD(*(_OWORD *)&v18[v25]);
        v27.i32[3] = HIDWORD(*(_OWORD *)&v19[v25]);
        v28.i64[0] = vuzp2q_s32(vuzp2q_s32(v29, v30), v29).u64[0];
        v28.i32[2] = HIDWORD(*(_OWORD *)&v23[v25]);
        v28.i32[3] = HIDWORD(*(_OWORD *)&v24[v25]);
        *(_OWORD *)uint64_t v22 = v31;
        *((_OWORD *)v22 + 1) = v32;
        unint64_t v37 = &v22[v12 + 16];
        *((_OWORD *)v37 - 1) = v33;
        *(_OWORD *)unint64_t v37 = v34;
        uint64_t v38 = &v22[v14];
        *(_OWORD *)uint64_t v38 = v35;
        *((_OWORD *)v38 + 1) = v36;
        int v39 = (int32x4_t *)&v22[v13];
        *int v39 = v27;
        v39[1] = v28;
        v25 += 4;
        v22 += v11;
        --v26;
      }
      while (v26);
      uint64_t v16 = (int *)((char *)v16 + v25 * 4);
      timeval v17 = (_DWORD *)((char *)v17 + v25 * 4);
      int v18 = (_DWORD *)((char *)v18 + v25 * 4);
      uint64_t v19 = (_DWORD *)((char *)v19 + v25 * 4);
      int v20 = (int *)((char *)v20 + v25 * 4);
      int v21 = (_DWORD *)((char *)v21 + v25 * 4);
      int v23 = (_DWORD *)((char *)v23 + v25 * 4);
      int v24 = (_DWORD *)((char *)v24 + v25 * 4);
    }
    if ((a4 & 3) != 0)
    {
      int v40 = v22 + 16;
      int v41 = a4 & 3;
      do
      {
        int v42 = *v16++;
        LODWORD(v43) = v42;
        DWORD1(v43) = *v17++;
        DWORD2(v43) = *v18++;
        HIDWORD(v43) = *v19++;
        int v44 = *v20++;
        LODWORD(v45) = v44;
        DWORD1(v45) = *v21++;
        DWORD2(v45) = *v23++;
        HIDWORD(v45) = *v24++;
        *(v40 - 1) = v43;
        *int v40 = v45;
        int v40 = (_OWORD *)((char *)v40 + v12);
        --v41;
      }
      while (v41);
    }
    int v46 = -8;
    uint64_t v47 = 8;
LABEL_34:
    v6 += v47;
    uint64_t result = (result + v46);
    if (!result) {
      return result;
    }
  }
  if ((int)result >= 4)
  {
    unsigned __int8 v48 = &a2[v6];
    uint64_t v49 = (int *)*v48;
    uint64_t v50 = *(const void **)((char *)a2 + ((8 * v6) | 8));
    uint64_t v51 = v48[2];
    uint64_t v52 = v48[3];
    uint64_t v53 = &__dst[4 * v6];
    if (v7 >= 7)
    {
      uint64_t v54 = 0;
      int v55 = v9;
      do
      {
        int32x4_t v56 = *(int32x4_t *)&v49[v54];
        int32x4_t v57 = *(int32x4_t *)&v50[v54];
        *(void *)&long long v58 = vzip1q_s32(v56, v57).u64[0];
        DWORD2(v58) = *(_OWORD *)&v51[v54];
        HIDWORD(v58) = *(_OWORD *)&v52[v54];
        *(void *)&long long v59 = vtrn2q_s32(v56, v57).u64[0];
        DWORD2(v59) = HIDWORD(*(void *)&v51[v54]);
        uint64_t v60 = v53;
        HIDWORD(v59) = HIDWORD(*(void *)&v52[v54]);
        *(void *)&long long v61 = vzip2q_s32(v56, v57).u64[0];
        DWORD2(v61) = *(void *)&v51[v54 + 2];
        HIDWORD(v61) = *(void *)&v52[v54 + 2];
        v56.i64[0] = vuzp2q_s32(vuzp2q_s32(v56, v57), v56).u64[0];
        v56.i32[2] = HIDWORD(*(_OWORD *)&v51[v54]);
        v56.i32[3] = HIDWORD(*(_OWORD *)&v52[v54]);
        *(_OWORD *)uint64_t v53 = v58;
        uint64_t v62 = &v53[v12];
        *(_OWORD *)uint64_t v62 = v59;
        uint64_t v63 = &v62[v12];
        *(_OWORD *)uint64_t v63 = v61;
        uint64_t v64 = (int32x4_t *)&v63[v12];
        int32x4_t *v64 = v56;
        v54 += 4;
        uint64_t v53 = &v64->i8[v12];
        --v55;
      }
      while (v55);
      uint64_t v53 = &v60[v11];
      uint64_t v52 = (_DWORD *)((char *)v52 + v54 * 4);
      uint64_t v51 = (_DWORD *)((char *)v51 + v54 * 4);
      uint64_t v50 = (_DWORD *)((char *)v50 + v54 * 4);
      uint64_t v49 = (int *)((char *)v49 + v54 * 4);
    }
    int v65 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        int v66 = *v49++;
        LODWORD(v67) = v66;
        DWORD1(v67) = *v50++;
        DWORD2(v67) = *v51++;
        HIDWORD(v67) = *v52++;
        *(_OWORD *)uint64_t v53 = v67;
        v53 += v12;
        --v65;
      }
      while (v65);
    }
    int v46 = -4;
    uint64_t v47 = 4;
    goto LABEL_34;
  }
  if ((int)result >= 2)
  {
    uint64_t v68 = (int8x16_t *)a2[v6];
    int v69 = *(int8x16_t **)((char *)a2 + ((8 * v6) | 8));
    uint64_t v70 = (int32x2_t *)&__dst[4 * v6];
    int v71 = v9;
    if (v7 >= 7)
    {
      do
      {
        int8x16_t v72 = *v68++;
        int8x16_t v73 = v72;
        uint16x4_t v74 = v70;
        int8x16_t v75 = *v69++;
        int32x2_t v76 = vzip1_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v75.i8);
        int32x2_t v77 = vzip2_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v75.i8);
        int32x2_t v78 = (int32x2_t)vextq_s8(v75, v75, 8uLL).u64[0];
        v73.i64[0] = vextq_s8(v73, v73, 8uLL).u64[0];
        *uint64_t v70 = v76;
        int32x2_t v79 = (int32x2_t *)((char *)v70 + v12);
        *int32x2_t v79 = v77;
        v80 = (int32x2_t *)((char *)v79 + v12);
        int32x2_t *v80 = vzip1_s32(*(int32x2_t *)v73.i8, v78);
        v81 = (int32x2_t *)((char *)v80 + v12);
        int32x2_t *v81 = vzip2_s32(*(int32x2_t *)v73.i8, v78);
        uint64_t v70 = (int32x2_t *)((char *)v81 + v12);
        --v71;
      }
      while (v71);
      uint64_t v70 = &v74[(unint64_t)v11 / 8];
    }
    int v82 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        __int32 v83 = v68->i32[0];
        uint64_t v68 = (int8x16_t *)((char *)v68 + 4);
        v84.i32[0] = v83;
        v84.i32[1] = v69->i32[0];
        int v69 = (int8x16_t *)((char *)v69 + 4);
        *uint64_t v70 = v84;
        uint64_t v70 = (int32x2_t *)((char *)v70 + v12);
        --v82;
      }
      while (v82);
    }
    int v46 = -2;
    uint64_t v47 = 2;
    goto LABEL_34;
  }
  if (a4)
  {
    __int16 v85 = (int *)a2[v6];
    uint64_t v86 = 4 * v10;
    v87 = &__dst[4 * v6];
    do
    {
      int v88 = *v85++;
      *(_DWORD *)v87 = v88;
      v87 += v86;
      --a4;
    }
    while (a4);
  }
  return result;
}

double TInterleaver_SIMD<PCMFloat64_SIMD>::Interleave(int a1, const void **a2, char *__dst, int a4)
{
  if (!a1) {
    return *(double *)v5.i64;
  }
  if (a1 == 1)
  {
    uint64_t v4 = *a2;
    memcpy(__dst, v4, 8 * a4);
    return *(double *)v5.i64;
  }
  uint64_t v6 = 0;
  uint64_t v7 = (a4 + 3);
  if (a4 >= 0) {
    int v8 = a4;
  }
  else {
    int v8 = a4 + 3;
  }
  int v9 = v8 >> 2;
  int v10 = a4 & 3;
  uint64_t v112 = a1;
  uint64_t v11 = 2 * a1;
  uint64_t v12 = 8 * a1;
  uint64_t v13 = 24 * a1;
  uint64_t v14 = a1;
  v113 = a2;
  while (a1 >= 8)
  {
    uint64_t v15 = &a2[v6];
    uint64_t v16 = (uint64_t *)*v15;
    timeval v17 = *(uint64_t **)((char *)a2 + ((8 * v6) | 8));
    int v18 = (uint64_t *)v15[2];
    uint64_t v19 = (uint64_t *)v15[3];
    int v20 = (uint64_t *)v15[4];
    int v21 = (uint64_t *)v15[5];
    uint64_t v22 = (int64x2_t *)&__dst[8 * v6];
    int v23 = (uint64_t *)v15[6];
    int v24 = (uint64_t *)v15[7];
    if (v7 >= 7)
    {
      uint64_t v25 = v7;
      uint64_t v26 = 0;
      int v27 = v9;
      do
      {
        int64x2_t v29 = *(int64x2_t *)&v16[v26];
        int64x2_t v28 = *(int64x2_t *)&v16[v26 + 2];
        int64x2_t v31 = *(int64x2_t *)&v17[v26];
        int64x2_t v30 = *(int64x2_t *)&v17[v26 + 2];
        int64x2_t v33 = *(int64x2_t *)&v18[v26];
        int64x2_t v32 = *(int64x2_t *)&v18[v26 + 2];
        int64x2_t v35 = *(int64x2_t *)&v20[v26];
        int64x2_t v34 = *(int64x2_t *)&v20[v26 + 2];
        int64x2_t v37 = *(int64x2_t *)&v21[v26];
        int64x2_t v36 = *(int64x2_t *)&v21[v26 + 2];
        int64x2_t v39 = *(int64x2_t *)&v23[v26];
        int64x2_t v38 = *(int64x2_t *)&v23[v26 + 2];
        int64x2_t v40 = vzip1q_s64(v29, v31);
        int64x2_t v41 = vzip1q_s64(v33, *(int64x2_t *)&v19[v26]);
        int64x2_t v42 = vzip1q_s64(v35, v37);
        int64x2_t v43 = vzip1q_s64(v39, *(int64x2_t *)&v24[v26]);
        v33.i64[0] = vdupq_laneq_s64(v33, 1).u64[0];
        v33.i64[1] = v19[v26 + 1];
        int64x2_t v44 = vzip2q_s64(v29, v31);
        int64x2_t v45 = vzip2q_s64(v35, v37);
        v46.i64[0] = vdupq_laneq_s64(v39, 1).u64[0];
        v46.i64[1] = v24[v26 + 1];
        int64x2_t v47 = vzip1q_s64(v28, v30);
        int64x2_t v48 = vzip1q_s64(v32, *(int64x2_t *)&v19[v26 + 2]);
        int64x2_t v49 = vzip1q_s64(v38, *(int64x2_t *)&v24[v26 + 2]);
        v32.i64[0] = vdupq_laneq_s64(v32, 1).u64[0];
        int64x2_t v5 = vzip2q_s64(v28, v30);
        v32.i64[1] = v19[v26 + 3];
        v50.i64[0] = vdupq_laneq_s64(v38, 1).u64[0];
        v50.i64[1] = v24[v26 + 3];
        int64x2_t *v22 = v40;
        v22[1] = v41;
        v22[2] = v42;
        v22[3] = v43;
        uint64_t v51 = (int64x2_t *)((char *)v22 + v12 + 32);
        v51[-2] = v44;
        v51[-1] = v33;
        int64x2_t *v51 = v45;
        v51[1] = v46;
        uint64_t v52 = &v22[v14];
        *uint64_t v52 = v47;
        v52[1] = v48;
        v52[2] = vzip1q_s64(v34, v36);
        v52[3] = v49;
        uint64_t v53 = (int64x2_t *)((char *)v22 + v13);
        *uint64_t v53 = v5;
        v53[1] = v32;
        v53[2] = vzip2q_s64(v34, v36);
        v53[3] = v50;
        v26 += 4;
        uint64_t v22 = (int64x2_t *)((char *)v22 + v11 * 16);
        --v27;
      }
      while (v27);
      uint64_t v16 = (uint64_t *)((char *)v16 + v26 * 8);
      timeval v17 = (uint64_t *)((char *)v17 + v26 * 8);
      int v18 = (uint64_t *)((char *)v18 + v26 * 8);
      uint64_t v19 = (uint64_t *)((char *)v19 + v26 * 8);
      int v20 = (uint64_t *)((char *)v20 + v26 * 8);
      int v21 = (uint64_t *)((char *)v21 + v26 * 8);
      int v23 = (uint64_t *)((char *)v23 + v26 * 8);
      int v24 = (uint64_t *)((char *)v24 + v26 * 8);
      uint64_t v7 = v25;
      a2 = v113;
      int v10 = a4 & 3;
    }
    if (v10)
    {
      uint64_t v54 = v22 + 2;
      int v55 = v10;
      do
      {
        uint64_t v56 = *v16++;
        v5.i64[0] = v56;
        v5.i64[1] = *v17++;
        uint64_t v57 = *v18++;
        v58.i64[0] = v57;
        v58.i64[1] = *v19++;
        uint64_t v59 = *v20++;
        v60.i64[0] = v59;
        v60.i64[1] = *v21++;
        uint64_t v61 = *v23++;
        v62.i64[0] = v61;
        v62.i64[1] = *v24++;
        v54[-2] = v5;
        v54[-1] = v58;
        int64x2_t *v54 = v60;
        v54[1] = v62;
        uint64_t v54 = (int64x2_t *)((char *)v54 + v12);
        --v55;
      }
      while (v55);
    }
    int v63 = -8;
    uint64_t v64 = 8;
LABEL_34:
    v6 += v64;
    a1 += v63;
    if (!a1) {
      return *(double *)v5.i64;
    }
  }
  if (a1 >= 4)
  {
    int v65 = &a2[v6];
    int v66 = (uint64_t *)*v65;
    long long v67 = *(uint64_t **)((char *)a2 + ((8 * v6) | 8));
    uint64_t v68 = (uint64_t *)v65[2];
    int v69 = (uint64_t *)v65[3];
    uint64_t v70 = (int64x2_t *)&__dst[8 * v6];
    if (v7 >= 7)
    {
      uint64_t v71 = 0;
      int v72 = v9;
      do
      {
        int8x16_t v73 = v70;
        int64x2_t v75 = *(int64x2_t *)&v66[v71];
        int64x2_t v74 = *(int64x2_t *)&v66[v71 + 2];
        int64x2_t v77 = *(int64x2_t *)&v67[v71];
        int64x2_t v76 = *(int64x2_t *)&v67[v71 + 2];
        int64x2_t v79 = *(int64x2_t *)&v68[v71];
        int64x2_t v78 = *(int64x2_t *)&v68[v71 + 2];
        int64x2_t v80 = vzip1q_s64(v75, v77);
        int64x2_t v81 = vzip1q_s64(v79, *(int64x2_t *)&v69[v71]);
        v79.i64[0] = vdupq_laneq_s64(v79, 1).u64[0];
        int64x2_t v82 = vzip2q_s64(v75, v77);
        v79.i64[1] = v69[v71 + 1];
        int64x2_t v83 = vzip1q_s64(v74, v76);
        int64x2_t v84 = vzip1q_s64(v78, *(int64x2_t *)&v69[v71 + 2]);
        int64x2_t v5 = vzip2q_s64(v74, v76);
        v76.i64[0] = vdupq_laneq_s64(v78, 1).u64[0];
        v76.i64[1] = v69[v71 + 3];
        *uint64_t v70 = v80;
        v70[1] = v81;
        __int16 v85 = (int64x2_t *)((char *)v70 + v12);
        *__int16 v85 = v82;
        v85[1] = v79;
        uint64_t v86 = (int64x2_t *)((char *)v70 + v12 + v12);
        *uint64_t v86 = v83;
        v86[1] = v84;
        v87 = (int64x2_t *)((char *)v86 + v12);
        int64x2_t *v87 = v5;
        v87[1] = v76;
        v71 += 4;
        uint64_t v70 = (int64x2_t *)((char *)v87 + v12);
        --v72;
      }
      while (v72);
      uint64_t v70 = &v73[v11];
      int v69 = (uint64_t *)((char *)v69 + v71 * 8);
      uint64_t v68 = (uint64_t *)((char *)v68 + v71 * 8);
      long long v67 = (uint64_t *)((char *)v67 + v71 * 8);
      int v66 = (uint64_t *)((char *)v66 + v71 * 8);
    }
    for (int i = v10; i; --i)
    {
      uint64_t v89 = *v66++;
      v5.i64[0] = v89;
      v5.i64[1] = *v67++;
      uint64_t v90 = *v68++;
      v91.i64[0] = v90;
      v91.i64[1] = *v69++;
      *uint64_t v70 = v5;
      v70[1] = v91;
      uint64_t v70 = (int64x2_t *)((char *)v70 + v12);
    }
    int v63 = -4;
    uint64_t v64 = 4;
    goto LABEL_34;
  }
  if (a1 >= 2)
  {
    v92 = a2[v6];
    v93 = *(const void **)((char *)a2 + ((8 * v6) | 8));
    v94 = (int64x2_t *)&__dst[8 * v6];
    int v95 = v9;
    if (v7 >= 7)
    {
      do
      {
        v96 = v94;
        int64x2_t v98 = *(int64x2_t *)v92;
        int64x2_t v97 = *((int64x2_t *)v92 + 1);
        v92 += 2;
        int64x2_t v100 = *(int64x2_t *)v93;
        int64x2_t v99 = *((int64x2_t *)v93 + 1);
        v93 += 2;
        int64x2_t v101 = vzip1q_s64(v98, v100);
        int64x2_t v102 = vzip2q_s64(v98, v100);
        int64x2_t v103 = vzip1q_s64(v97, v99);
        int64x2_t v5 = vzip2q_s64(v97, v99);
        int64x2_t *v94 = v101;
        *(int64x2_t *)((char *)v94 + v12) = v102;
        v104 = (int64x2_t *)((char *)v94 + v12 + v12);
        int64x2_t *v104 = v103;
        v105 = (int64x2_t *)((char *)v104 + v12);
        int64x2_t *v105 = v5;
        v94 = (int64x2_t *)((char *)v105 + v12);
        --v95;
      }
      while (v95);
      v94 = &v96[v11];
    }
    for (int j = v10; j; --j)
    {
      uint64_t v107 = *(void *)v92;
      v92 = (_OWORD *)((char *)v92 + 8);
      v5.i64[0] = v107;
      v5.i64[1] = *(void *)v93;
      v93 = (_OWORD *)((char *)v93 + 8);
      int64x2_t *v94 = v5;
      v94 = (int64x2_t *)((char *)v94 + v12);
    }
    int v63 = -2;
    uint64_t v64 = 2;
    goto LABEL_34;
  }
  if (a4)
  {
    v108 = (uint64_t *)a2[v6];
    v109 = &__dst[8 * v6];
    do
    {
      uint64_t v110 = *v108++;
      v5.i64[0] = v110;
      *(void *)v109 = v110;
      v109 += 8 * v112;
      --a4;
    }
    while (a4);
  }
  return *(double *)v5.i64;
}

unint64_t TDeinterleaver_SIMD<PCMSInt16_SIMD>::Deinterleave(unint64_t result, char *a2, void **a3, int a4)
{
  if (!result) {
    return result;
  }
  if (result == 1)
  {
    int64x2_t v5 = *a3;
    return (unint64_t)memcpy(v5, a2, 2 * a4);
  }
  uint64_t v6 = 0;
  unsigned int v7 = a4 + 3;
  if (a4 >= 0) {
    int v8 = a4;
  }
  else {
    int v8 = a4 + 3;
  }
  int v9 = v8 >> 2;
  uint64_t v10 = (int)result;
  uint64_t v11 = (int)result;
  uint64_t v12 = 2 * (int)result;
  while ((int)result >= 8)
  {
    uint64_t v13 = (int16x4_t *)&a2[2 * v6];
    uint64_t v14 = &a3[v6];
    uint64_t v15 = *v14;
    uint64_t v16 = *(void **)((char *)a3 + ((8 * v6) | 8));
    int v18 = v14[2];
    timeval v17 = v14[3];
    uint64_t v19 = v14[4];
    int v20 = v14[5];
    int v21 = v14[6];
    uint64_t v22 = v14[7];
    if (v7 >= 7)
    {
      uint64_t v23 = 0;
      int v24 = v9;
      do
      {
        uint64_t v25 = v13;
        int16x4_t v27 = *v13;
        int16x4_t v26 = v13[1];
        int64x2_t v28 = (int16x4_t *)((char *)v13 + v12);
        int16x4_t v30 = *v28;
        int16x4_t v29 = v28[1];
        int64x2_t v31 = (int16x4_t *)((char *)v28 + v12);
        uint64_t v33 = (uint64_t)*v31;
        int16x4_t v32 = v31[1];
        int64x2_t v34 = (unint64_t *)((char *)v31 + v12);
        int16x4_t v35 = (int16x4_t)v34[1];
        LODWORD(v36) = vzip1_s16(v27, v30).u32[0];
        WORD2(v36) = v33;
        HIWORD(v36) = *v34;
        LODWORD(v37) = vtrn2_s16(v27, v30).u32[0];
        WORD2(v37) = WORD1(v33);
        HIWORD(v37) = WORD1(*v34);
        LODWORD(v38) = vzip2_s16(v27, v30).u32[0];
        WORD2(v38) = WORD2(v33);
        HIWORD(v38) = WORD2(*v34);
        v27.i32[0] = vuzp2_s16(vuzp2_s16(v27, v30), v27).u32[0];
        v27.i16[2] = HIWORD(v33);
        v27.i16[3] = HIWORD(*v34);
        v30.i32[0] = vzip1_s16(v26, v29).u32[0];
        v30.i16[2] = v32.i16[0];
        v30.i16[3] = v35.i16[0];
        LODWORD(v33) = vtrn2_s16(v26, v29).u32[0];
        WORD2(v33) = v32.i16[1];
        HIWORD(v33) = v35.i16[1];
        LODWORD(v39) = vzip2_s16(v26, v29).u32[0];
        WORD2(v39) = v32.i16[2];
        HIWORD(v39) = v35.i16[2];
        v26.i32[0] = vuzp2_s16(vuzp2_s16(v26, v29), v26).u32[0];
        v26.i16[2] = v32.i16[3];
        *(void *)&v15[v23] = v36;
        *(void *)&v16[v23] = v37;
        v26.i16[3] = v35.i16[3];
        *(void *)&v18[v23] = v38;
        *(int16x4_t *)&v17[v23] = v27;
        *(int16x4_t *)&v19[v23] = v30;
        *(void *)&v20[v23] = v33;
        *(void *)&v21[v23] = v39;
        *(int16x4_t *)&v22[v23] = v26;
        v23 += 4;
        uint64_t v13 = (int16x4_t *)((char *)v34 + v12);
        --v24;
      }
      while (v24);
      uint64_t v13 = &v25[v11];
      uint64_t v15 = (_WORD *)((char *)v15 + v23 * 2);
      uint64_t v16 = (_WORD *)((char *)v16 + v23 * 2);
      int v18 = (_WORD *)((char *)v18 + v23 * 2);
      timeval v17 = (_WORD *)((char *)v17 + v23 * 2);
      uint64_t v19 = (_WORD *)((char *)v19 + v23 * 2);
      int v20 = (_WORD *)((char *)v20 + v23 * 2);
      int v21 = (_WORD *)((char *)v21 + v23 * 2);
      uint64_t v22 = (_WORD *)((char *)v22 + v23 * 2);
    }
    if ((a4 & 3) != 0)
    {
      int64x2_t v40 = v13 + 1;
      int v41 = a4 & 3;
      do
      {
        int16x4_t v42 = v40[-1];
        int16x4_t v43 = *v40;
        *v15++ = v42.i16[0];
        *v16++ = v42.i16[1];
        *v18++ = v42.i16[2];
        *v17++ = v42.i16[3];
        *v19++ = v43.i16[0];
        *v20++ = v43.i16[1];
        *v21++ = v43.i16[2];
        *v22++ = v43.i16[3];
        int64x2_t v40 = (int16x4_t *)((char *)v40 + v12);
        --v41;
      }
      while (v41);
    }
    int v44 = -8;
    uint64_t v45 = 8;
LABEL_34:
    v6 += v45;
    uint64_t result = (result + v44);
    if (!result) {
      return result;
    }
  }
  if ((int)result >= 4)
  {
    int64x2_t v46 = (int16x4_t *)&a2[2 * v6];
    int64x2_t v47 = &a3[v6];
    int64x2_t v48 = *v47;
    int64x2_t v49 = *(void **)((char *)a3 + ((8 * v6) | 8));
    uint64_t v51 = v47[2];
    int64x2_t v50 = v47[3];
    if (v7 >= 7)
    {
      uint64_t v52 = 0;
      int v53 = v9;
      do
      {
        uint64_t v54 = v46;
        int16x4_t v55 = *v46;
        uint64_t v56 = (int16x4_t *)((char *)v46 + v12);
        int16x4_t v57 = *v56;
        int64x2_t v58 = (int16x4_t *)((char *)v56 + v12);
        uint64_t v59 = (uint64_t)*v58;
        int64x2_t v60 = (unint64_t *)((char *)v58 + v12);
        LODWORD(v61) = vzip1_s16(v55, v57).u32[0];
        WORD2(v61) = v59;
        HIWORD(v61) = *v60;
        LODWORD(v62) = vtrn2_s16(v55, v57).u32[0];
        WORD2(v62) = WORD1(v59);
        HIWORD(v62) = WORD1(*v60);
        LODWORD(v63) = vzip2_s16(v55, v57).u32[0];
        WORD2(v63) = WORD2(v59);
        HIWORD(v63) = WORD2(*v60);
        v55.i32[0] = vuzp2_s16(vuzp2_s16(v55, v57), v55).u32[0];
        v55.i16[2] = HIWORD(v59);
        v55.i16[3] = HIWORD(*v60);
        *(void *)&v48[v52] = v61;
        *(void *)&v49[v52] = v62;
        *(void *)&v51[v52] = v63;
        *(int16x4_t *)&v50[v52] = v55;
        v52 += 4;
        int64x2_t v46 = (int16x4_t *)((char *)v60 + v12);
        --v53;
      }
      while (v53);
      int64x2_t v46 = &v54[v11];
      int64x2_t v50 = (_WORD *)((char *)v50 + v52 * 2);
      uint64_t v51 = (_WORD *)((char *)v51 + v52 * 2);
      int64x2_t v49 = (_WORD *)((char *)v49 + v52 * 2);
      int64x2_t v48 = (_WORD *)((char *)v48 + v52 * 2);
    }
    int v64 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        int16x4_t v65 = *v46;
        *v48++ = *v46;
        *v49++ = v65.i16[1];
        *v51++ = v65.i16[2];
        *v50++ = v65.i16[3];
        int64x2_t v46 = (int16x4_t *)((char *)v46 + v12);
        --v64;
      }
      while (v64);
    }
    int v44 = -4;
    uint64_t v45 = 4;
    goto LABEL_34;
  }
  if ((int)result >= 2)
  {
    int v66 = &a2[2 * v6];
    long long v67 = a3[v6];
    uint64_t v68 = *(void **)((char *)a3 + ((8 * v6) | 8));
    int v69 = v9;
    if (v7 >= 7)
    {
      do
      {
        uint64_t v70 = v66;
        LOWORD(v71) = *(_WORD *)v66;
        __int16 v72 = *((_WORD *)v66 + 1);
        int8x16_t v73 = &v66[v12];
        __int16 v74 = *(_WORD *)v73;
        __int16 v75 = *((_WORD *)v73 + 1);
        int64x2_t v76 = (__int16 *)&v73[v12];
        __int16 v77 = *v76;
        __int16 v78 = v76[1];
        int64x2_t v79 = &v76[(unint64_t)v12 / 2];
        __int16 v80 = v72;
        WORD1(v71) = v74;
        WORD2(v71) = v77;
        LOWORD(v81) = v80;
        WORD1(v81) = v75;
        HIWORD(v71) = *v79;
        WORD2(v81) = v78;
        HIWORD(v81) = v79[1];
        *v67++ = v71;
        *v68++ = v81;
        int v66 = (char *)&v79[(unint64_t)v12 / 2];
        --v69;
      }
      while (v69);
      int v66 = &v70[v11 * 8];
    }
    int v82 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        __int16 v83 = *((_WORD *)v66 + 1);
        *(_WORD *)long long v67 = *(_WORD *)v66;
        long long v67 = (void *)((char *)v67 + 2);
        *(_WORD *)uint64_t v68 = v83;
        uint64_t v68 = (void *)((char *)v68 + 2);
        v66 += v12;
        --v82;
      }
      while (v82);
    }
    int v44 = -2;
    uint64_t v45 = 2;
    goto LABEL_34;
  }
  if (a4)
  {
    int64x2_t v84 = a3[v6];
    uint64_t v85 = 2 * v10;
    uint64_t v86 = &a2[2 * v6];
    do
    {
      *v84++ = *(_WORD *)v86;
      v86 += v85;
      --a4;
    }
    while (a4);
  }
  return result;
}

double TDeinterleaver_SIMD<PCMFloat64_SIMD>::Deinterleave(int a1, char *a2, void **a3, int a4)
{
  if (!a1) {
    return *(double *)v5.i64;
  }
  if (a1 == 1)
  {
    uint64_t v4 = *a3;
    memcpy(v4, a2, 8 * a4);
    return *(double *)v5.i64;
  }
  uint64_t v6 = 0;
  unsigned int v7 = a4 + 3;
  if (a4 >= 0) {
    int v8 = a4;
  }
  else {
    int v8 = a4 + 3;
  }
  uint64_t v9 = (v8 >> 2);
  uint64_t v108 = a1;
  int v10 = a4 & 3;
  uint64_t v11 = 32 * a1;
  uint64_t v12 = 8 * a1;
  while (a1 >= 8)
  {
    uint64_t v13 = (int64x2_t *)&a2[8 * v6];
    uint64_t v14 = &a3[v6];
    uint64_t v15 = *v14;
    uint64_t v16 = *(uint64_t *)((char *)a3 + ((8 * v6) | 8));
    int v18 = v14[2];
    timeval v17 = v14[3];
    uint64_t v19 = (int64x2_t *)v14[4];
    int v20 = (char *)v14[5];
    int v21 = v14[6];
    uint64_t v22 = v14[7];
    if (v7 >= 7)
    {
      uint64_t v23 = v11;
      unint64_t v24 = 0;
      uint64_t v25 = v9;
      int v26 = v9;
      do
      {
        int16x4_t v27 = v13;
        int64x2_t v28 = (int64x2_t *)&v15[v24 / 0x10];
        int16x4_t v29 = (int64x2_t *)(v16 + v24);
        int16x4_t v30 = (int64x2_t *)&v18[v24 / 8];
        int64x2_t v31 = (int64x2_t *)&v17[v24 / 8];
        int16x4_t v32 = &v19[v24 / 0x10];
        uint64_t v33 = (int64x2_t *)&v20[v24];
        int64x2_t v34 = (int64x2_t *)&v21[v24 / 8];
        int16x4_t v35 = (int64x2_t *)&v22[v24 / 8];
        int64x2_t v36 = v27[1];
        int64x2_t v38 = v27[2];
        int64x2_t v37 = v27[3];
        int64x2_t v40 = *(int64x2_t *)((char *)v27 + v12);
        int64x2_t v39 = *(int64x2_t *)((char *)&v27[1] + v12);
        int64x2_t v42 = *(int64x2_t *)((char *)&v27[2] + v12);
        int64x2_t v41 = *(int64x2_t *)((char *)&v27[3] + v12);
        int16x4_t v43 = (int64x2_t *)((char *)v27 + v12 + v12);
        int64x2_t v45 = *v43;
        int64x2_t v44 = v43[1];
        int64x2_t v47 = v43[2];
        int64x2_t v46 = v43[3];
        int64x2_t v48 = (int64x2_t *)((char *)v43 + v12);
        int64x2_t v49 = vzip1q_s64(*v27, v40);
        int64x2_t v50 = vzip1q_s64(v45, *v48);
        int64x2_t v51 = vzip2q_s64(*v27, v40);
        v40.i64[0] = vdupq_laneq_s64(v45, 1).u64[0];
        v40.i64[1] = v48->i64[1];
        int64x2_t v52 = vzip1q_s64(v36, v39);
        int64x2_t v53 = vzip1q_s64(v44, v48[1]);
        v44.i64[0] = vdupq_laneq_s64(v44, 1).u64[0];
        int64x2_t v5 = vzip2q_s64(v36, v39);
        v44.i64[1] = v48[1].i64[1];
        int64x2_t v54 = vzip1q_s64(v38, v42);
        int64x2_t v55 = vzip1q_s64(v47, v48[2]);
        int64x2_t v56 = vzip2q_s64(v38, v42);
        v42.i64[0] = vdupq_laneq_s64(v47, 1).u64[0];
        v42.i64[1] = v48[2].i64[1];
        int64x2_t v57 = vzip1q_s64(v37, v41);
        int64x2_t v58 = vzip1q_s64(v46, v48[3]);
        int64x2_t v59 = vzip2q_s64(v37, v41);
        v41.i64[0] = vdupq_laneq_s64(v46, 1).u64[0];
        v41.i64[1] = v48[3].i64[1];
        int64x2_t *v28 = v49;
        v28[1] = v50;
        *int16x4_t v29 = v51;
        v29[1] = v40;
        int64x2_t *v30 = v52;
        v30[1] = v53;
        *int64x2_t v31 = v5;
        v31[1] = v44;
        *int16x4_t v32 = v54;
        v32[1] = v55;
        int64x2_t *v33 = v56;
        v33[1] = v42;
        *int64x2_t v34 = v57;
        v34[1] = v58;
        int64x2_t *v35 = v59;
        v35[1] = v41;
        v24 += 32;
        uint64_t v13 = (int64x2_t *)((char *)v48 + v12);
        --v26;
      }
      while (v26);
      uint64_t v11 = v23;
      uint64_t v13 = (int64x2_t *)((char *)v27 + v23);
      uint64_t v15 = (_OWORD *)((char *)v15 + v24);
      v16 += v24;
      int v18 = (void *)((char *)v18 + v24);
      timeval v17 = (void *)((char *)v17 + v24);
      uint64_t v19 = (int64x2_t *)((char *)v19 + v24);
      v20 += v24;
      int v21 = (void *)((char *)v21 + v24);
      uint64_t v22 = (void *)((char *)v22 + v24);
      uint64_t v9 = v25;
      int v10 = a4 & 3;
    }
    if (v10)
    {
      int64x2_t v60 = v13 + 2;
      int v61 = v10;
      do
      {
        int64x2_t v5 = v60[-1];
        int64x2_t v63 = *v60;
        int64x2_t v62 = v60[1];
        _OWORD *v15 = v60[-2];
        uint64_t v15 = (_OWORD *)((char *)v15 + 8);
        v16 += 8;
        *v18++ = v5.i64[0];
        *v17++ = v5.i64[1];
        *uint64_t v19 = v63;
        uint64_t v19 = (int64x2_t *)((char *)v19 + 8);
        v20 += 8;
        *v21++ = v62.i64[0];
        int64x2_t v60 = (int64x2_t *)((char *)v60 + v12);
        *v22++ = v62.i64[1];
        --v61;
      }
      while (v61);
    }
    int v64 = -8;
    uint64_t v65 = 8;
LABEL_34:
    v6 += v65;
    a1 += v64;
    if (!a1) {
      return *(double *)v5.i64;
    }
  }
  if (a1 >= 4)
  {
    int v66 = (int64x2_t *)&a2[8 * v6];
    long long v67 = &a3[v6];
    uint64_t v68 = *v67;
    int v69 = *(void **)((char *)a3 + ((8 * v6) | 8));
    uint64_t v71 = v67[2];
    uint64_t v70 = v67[3];
    if (v7 >= 7)
    {
      uint64_t v72 = 0;
      int v73 = v9;
      do
      {
        __int16 v74 = v66;
        __int16 v75 = (int64x2_t *)&v70[v72];
        int64x2_t v76 = (int64x2_t *)&v71[v72];
        __int16 v77 = (int64x2_t *)&v69[v72];
        __int16 v78 = (int64x2_t *)&v68[v72];
        int64x2_t v79 = v74[1];
        int64x2_t v81 = *(int64x2_t *)((char *)v74 + v12);
        int64x2_t v80 = *(int64x2_t *)((char *)&v74[1] + v12);
        int v82 = (int64x2_t *)((char *)v74 + v12 + v12);
        int64x2_t v84 = *v82;
        int64x2_t v83 = v82[1];
        uint64_t v85 = (int64x2_t *)((char *)v82 + v12);
        int64x2_t v86 = vzip1q_s64(*v74, v81);
        int64x2_t v87 = vzip1q_s64(v84, *v85);
        int64x2_t v88 = vzip2q_s64(*v74, v81);
        v81.i64[0] = vdupq_laneq_s64(v84, 1).u64[0];
        v81.i64[1] = v85->i64[1];
        int64x2_t v89 = vzip1q_s64(v79, v80);
        int64x2_t v90 = vzip1q_s64(v83, v85[1]);
        v83.i64[0] = vdupq_laneq_s64(v83, 1).u64[0];
        v83.i64[1] = v85[1].i64[1];
        int64x2_t v5 = vzip2q_s64(v79, v80);
        int64x2_t *v78 = v86;
        v78[1] = v87;
        *__int16 v77 = v88;
        v77[1] = v81;
        *int64x2_t v76 = v89;
        v76[1] = v90;
        *__int16 v75 = v5;
        v75[1] = v83;
        v72 += 4;
        int v66 = (int64x2_t *)((char *)v85 + v12);
        --v73;
      }
      while (v73);
      int v66 = (int64x2_t *)((char *)v74 + v11);
      uint64_t v70 = (void *)((char *)v70 + v72 * 8);
      uint64_t v71 = (void *)((char *)v71 + v72 * 8);
      int v69 = (void *)((char *)v69 + v72 * 8);
      uint64_t v68 = (void *)((char *)v68 + v72 * 8);
    }
    for (int i = v10; i; --i)
    {
      int64x2_t v92 = *v66;
      int64x2_t v5 = v66[1];
      *v68++ = v66->i64[0];
      *v69++ = v92.i64[1];
      *v71++ = v5.i64[0];
      *v70++ = v5.i64[1];
      int v66 = (int64x2_t *)((char *)v66 + v12);
    }
    int v64 = -4;
    uint64_t v65 = 4;
    goto LABEL_34;
  }
  if (a1 >= 2)
  {
    v93 = (int64x2_t *)&a2[8 * v6];
    v94 = (int64x2_t *)a3[v6];
    int v95 = *(int64x2_t **)((char *)a3 + ((8 * v6) | 8));
    int v96 = v9;
    if (v7 >= 7)
    {
      do
      {
        int64x2_t v97 = v93;
        int64x2_t v98 = *(int64x2_t *)((char *)v93 + v12);
        int64x2_t v99 = (int64x2_t *)((char *)v93 + v12 + v12);
        int64x2_t v100 = *v99;
        int64x2_t v101 = (int64x2_t *)((char *)v99 + v12);
        int64x2_t v102 = vzip1q_s64(*v93, v98);
        int64x2_t v103 = vzip1q_s64(v100, *v101);
        int64x2_t v5 = vzip2q_s64(*v93, v98);
        v98.i64[0] = vdupq_laneq_s64(v100, 1).u64[0];
        v98.i64[1] = v101->i64[1];
        int64x2_t *v94 = v102;
        v94[1] = v103;
        v94 += 2;
        *int v95 = v5;
        v95[1] = v98;
        v95 += 2;
        v93 = (int64x2_t *)((char *)v101 + v12);
        --v96;
      }
      while (v96);
      v93 = (int64x2_t *)((char *)v97 + v11);
    }
    for (int j = v10; j; --j)
    {
      int64x2_t v5 = *v93;
      v94->i64[0] = v93->i64[0];
      v94 = (int64x2_t *)((char *)v94 + 8);
      v95->i64[0] = v5.i64[1];
      int v95 = (int64x2_t *)((char *)v95 + 8);
      v93 = (int64x2_t *)((char *)v93 + v12);
    }
    int v64 = -2;
    uint64_t v65 = 2;
    goto LABEL_34;
  }
  if (a4)
  {
    v105 = (uint64_t *)a3[v6];
    v106 = (uint64_t *)&a2[8 * v6];
    do
    {
      v5.i64[0] = *v106;
      *v105++ = *v106;
      v106 += v108;
      --a4;
    }
    while (a4);
  }
  return *(double *)v5.i64;
}

void ___ZN4acv213Reinterleaver22BuildInverseChannelMapEv_block_invoke_2()
{
}

void ___ZN4acv213Reinterleaver22BuildInverseChannelMapEv_block_invoke()
{
}

uint64_t acv2::Reinterleaver::GetPropertyInfo(acv2::Reinterleaver *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 != 1667788144) {
    return acv2::CBRConverter::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a3) {
    *a3 = 4 * *((_DWORD *)this + 21);
  }
  if (a4) {
    *a4 = 1;
  }
  return 0;
}

uint64_t acv2::Reinterleaver::description@<X0>(int16x8_t *this@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
  acv2::AudioConverterBase::description(this, __p);
  if ((v9 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v4, v5);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  if (this[17].i8[0])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"    Downmixing\n", 15);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"    Channel map:", 16);
    if (this[5].i32[1])
    {
      unint64_t v6 = 0;
      do
      {
        LOBYTE(__p[0]) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)__p, 1);
        std::ostream::operator<<();
        ++v6;
      }
      while (v6 < this[5].u32[1]);
    }
    LOBYTE(__p[0]) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)__p, 1);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v11);
  uint64_t v10 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v11[-1] + *(void *)(v10 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v11[0] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v13);
}

void sub_18FFC883C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

__CFString *acv2::Reinterleaver::ConverterName(acv2::Reinterleaver *this)
{
  return @"Reinterleaver";
}

void acv2::Reinterleaver::SetChannelMap(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 84);
  uint64_t v4 = (char *)(a1 + 192);
  if (v4 != (char *)a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  *(unsigned char *)(a1 + 264) = memcmp(*(const void **)(a1 + 192), *(const void **)(a1 + 216), (4 * v3)) == 0;
  acv2::Reinterleaver::BuildInverseChannelMap((acv2::Reinterleaver *)a1);
}

uint64_t AUListener::AsEventListener(AUListener *this)
{
  return 0;
}

uint64_t AUParameterListener::NotifyParameterValueChange(AUParameterListener *this, ParameterListenerBinding *a2)
{
  if (*((unsigned char *)this + 64))
  {
    uint64_t v3 = *((void *)a2 + 2);
    uint64_t v4 = (char *)a2 + 32;
    LastCFNumberRef Value = ParameterListenerBinding::GetLastValue(a2);
    uint64_t v6 = *((void *)this + 12);
    return std::function<void ()(void *,AudioUnitParameter const*,float)>::operator()(v6, v3, (uint64_t)v4, LastValue);
  }
  else
  {
    double v8 = *((double *)this + 4);
    unsigned __int8 v9 = (CAEventReceiver::Impl *)*((void *)this + 2);
    return CAEventReceiver::Impl::timerShouldFireWithin(v9, v8);
  }
}

AudioUnitParameterValue ParameterListenerBinding::GetLastValue(ParameterListenerBinding *this)
{
  if (*((unsigned char *)this + 56)) {
    return *((float *)this + 15);
  }
  outCFNumberRef Value = 0.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 4), *((_DWORD *)this + 10), *((_DWORD *)this + 11), *((_DWORD *)this + 12), &outValue);
  return outValue;
}

uint64_t std::function<void ()(void *,AudioUnitParameter const*,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7 = a2;
  uint64_t v6 = a3;
  float v5 = a4;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, float *))(*(void *)a1 + 48))(a1, &v7, &v6, &v5);
}

uint64_t CAEventReceiver::Impl::timerShouldFireWithin(CAEventReceiver::Impl *this, double a2)
{
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    if (dispatch_source_testcancel((dispatch_source_t)result))
    {
      return 0;
    }
    else
    {
      dispatch_time_t v5 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
      dispatch_time_t v6 = *((void *)this + 10);
      if (v5 < v6)
      {
        dispatch_time_t v7 = *((void *)this + 10);
        while (1)
        {
          atomic_compare_exchange_strong((atomic_ullong *volatile)this + 10, &v7, v5);
          if (v7 == v6) {
            break;
          }
          dispatch_time_t v6 = v7;
          if (v5 >= v7) {
            return 1;
          }
        }
        dispatch_source_set_timer(*((dispatch_source_t *)this + 5), v5, 0xFFFFFFFFFFFFFFFFLL, 0);
      }
      return 1;
    }
  }
  return result;
}

uint64_t AUParameterListener::RemoveBinding(AUParameterListener *this, ListenerBinding *a2)
{
  os_unfair_recursive_lock_lock_with_options();
  dispatch_time_t v5 = (ListenerBinding **)*((void *)this + 14);
  uint64_t v4 = (ListenerBinding **)*((void *)this + 15);
  if (v5 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        dispatch_time_t v5 = (ListenerBinding **)*((void *)this + 15);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = (char *)v4 - (char *)(v5 + 1);
    if (v4 != v5 + 1) {
      memmove(v5, v5 + 1, (char *)v4 - (char *)(v5 + 1));
    }
    *((void *)this + 15) = (char *)v5 + v6;
  }
  if (a2) {
    (*(void (**)(ListenerBinding *))(*(void *)a2 + 8))(a2);
  }
  return os_unfair_recursive_lock_unlock();
}

uint64_t AUListener::AddProperty()
{
  return 0;
}

uint64_t AUListener::AddEvent()
{
  return 0;
}

void AUParameterListener::AddParameter()
{
}

void sub_18FFC8DF0(_Unwind_Exception *a1)
{
}

uint64_t SimpleParameterListenerBinding::NotifyBinding(uint64_t this)
{
  return this;
}

uint64_t ParameterListenerBinding::ParameterValueChange(ParameterListenerBinding *this, AUListener *a2, void *a3, float *a4)
{
  if (!a4)
  {
    char v6 = 0;
    goto LABEL_6;
  }
  float v5 = *a4;
  if (!*((unsigned char *)this + 56) || *((float *)this + 15) != v5)
  {
    *((float *)this + 15) = v5;
    char v6 = 1;
LABEL_6:
    uint64_t v7 = 1;
    goto LABEL_8;
  }
  uint64_t v7 = 0;
  char v6 = 1;
LABEL_8:
  *((unsigned char *)this + 56) = v6;
  if (*((AUListener **)this + 1) == a2)
  {
    if (!a3) {
      return v7;
    }
    BOOL v8 = *((void *)this + 2) == (void)a3;
    if (!v7) {
      return v7;
    }
  }
  else
  {
    BOOL v8 = 0;
    if (!v7) {
      return v7;
    }
  }
  if (!v8)
  {
    (*(void (**)(ParameterListenerBinding *))(*(void *)this + 24))(this);
    (*(void (**)(void, ParameterListenerBinding *))(**((void **)this + 1) + 64))(*((void *)this + 1), this);
  }
  return v7;
}

void SimpleParameterListenerBinding::~SimpleParameterListenerBinding(SimpleParameterListenerBinding *this)
{
}

uint64_t ListenerBinding::ParameterValueChange(ListenerBinding *this, AUListener *a2, void *a3, float *a4)
{
  return 0;
}

void ListenerBinding::~ListenerBinding(ListenerBinding *this)
{
}

BOOL TOpaqueObject<AUListener,AUListenerBase *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AUListener>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

void AUParameterListener::~AUParameterListener(AUParameterListener *this)
{
  AUParameterListener::~AUParameterListener(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF928B0;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(void *,AudioUnitParameter const*,float)>::~__value_func[abi:ne180100]((void *)this + 9);
  AUListener::~AUListener(this);
}

void *std::__function::__value_func<void ()(void *,AudioUnitParameter const*,float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AUListener::~AUListener(AUListener *this)
{
  *(void *)this = &unk_1EDF8C178;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  CAEventReceiver::~CAEventReceiver((std::__shared_weak_count **)this + 2);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void CAEventReceiver::~CAEventReceiver(std::__shared_weak_count **this)
{
  if ((CAEventReceiver::invalidate((CAEventReceiver *)this) & 1) == 0) {
    std::terminate();
  }
  uint64_t v2 = this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t CAEventReceiver::invalidate(CAEventReceiver *this)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (!v3)
  {
    if (!v2) {
      return (v3 == 0) | v1 & 1u;
    }
    goto LABEL_22;
  }
  if (!*(void *)(v3 + 40)) {
    goto LABEL_21;
  }
  std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(&v19, *(void *)v3, *(std::__shared_weak_count **)(v3 + 8));
  uint64_t v4 = *(NSObject **)(v3 + 40);
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 1174405120;
  uint64_t v15 = ___ZN15CAEventReceiver4Impl10invalidateEv_block_invoke;
  uint64_t v16 = &__block_descriptor_tmp_30;
  uint64_t v17 = v19;
  int v18 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_source_set_cancel_handler(v4, &v13);
  dispatch_source_cancel(*(dispatch_source_t *)(v3 + 40));
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  char v6 = *(NSObject **)(v3 + 96);
  *(void *)(v3 + 96) = v5;
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (_opaque_pthread_t *)atomic_exchange((atomic_ullong *volatile)(v3 + 88), 0xFFFFFFFFFFFFFFFFLL);
  if (v7)
  {
    if (v7 == pthread_self()
      || v7 == (_opaque_pthread_t *)1 && (unsigned __int8 v9 = *(__CFRunLoop **)(v3 + 16), v9 == CFRunLoopGetCurrent()))
    {
      int v8 = 0;
      goto LABEL_16;
    }
    uint64_t v10 = *(NSObject **)(v3 + 96);
    dispatch_time_t v11 = dispatch_time(0, 250000000);
    dispatch_semaphore_wait(v10, v11);
  }
  int v8 = 1;
LABEL_16:
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (!v8)
  {
    if (*(void *)(v3 + 32))
    {
      std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(&v13, *(void *)v3, *(std::__shared_weak_count **)(v3 + 8));
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    char v1 = 0;
    if (v2) {
      goto LABEL_22;
    }
    return (v3 == 0) | v1 & 1u;
  }
LABEL_21:
  char v1 = 1;
  if (v2) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return (v3 == 0) | v1 & 1u;
}

void sub_18FFC9354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::dispatch::v1::async<CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1}>(dispatch_queue_s *,CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(__CFRunLoop **)(*a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(const void **)(v2 + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 1174405120;
    void v6[2] = ___ZZN15CAEventReceiver4Impl20deferredSelfDestructEvENKUlvE_clEv_block_invoke;
    v6[3] = &__block_descriptor_tmp_34;
    dispatch_semaphore_t v5 = (std::__shared_weak_count *)a1[1];
    void v6[4] = v2;
    uint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CFRunLoopPerformBlock(v3, v4, v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  std::default_delete<CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1}>::operator()[abi:ne180100]((uint64_t)a1);
}

void sub_18FFC943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::default_delete<CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1}>::operator()[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void std::default_delete<CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1}>::operator()[abi:ne180100](uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x192FC8940);
}

void __destroy_helper_block_e8_32c50_ZTSNSt3__110shared_ptrIN15CAEventReceiver4ImplEEE(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_e8_32c50_ZTSNSt3__110shared_ptrIN15CAEventReceiver4ImplEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t AUEventListenerBase::NotifyEvent(AUEventListenerBase *this, ListenerBinding *a2)
{
  return AUEventListenerBase::SendMessage(this, *((void **)a2 + 2), (const AudioUnitEvent *)((char *)a2 + 24), 0.0);
}

uint64_t AUEventListenerBase::SendMessage(AUEventListenerBase *this, void *a2, const AudioUnitEvent *a3, float a4)
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v8 = mach_absolute_time();
  uint64_t v9 = *(void *)(*((void *)this + 10) + 64);
  if (a3->mEventType) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (v10)
  {
    unint64_t v11 = *((void *)this + 15);
    goto LABEL_61;
  }
  unint64_t v11 = *((void *)this + 15);
  uint64_t v12 = *((void *)this + 12);
  if (*((void *)this + 13) == v12) {
    goto LABEL_61;
  }
  uint64_t v13 = *(void *)(v12 + 8 * (v11 / 0x49));
  uint64_t v14 = v13 + 56 * (v11 % 0x49);
  unint64_t v15 = *(void *)(v12 + 8 * ((*((void *)this + 16) + v11) / 0x49)) + 56 * ((*((void *)this + 16) + v11) % 0x49);
  if (v14 == v15) {
    goto LABEL_61;
  }
  uint64_t v16 = 0;
  uint64_t v17 = v12 + 8 * (v11 / 0x49);
  AudioUnit mAudioUnit = a3->mArgument.mParameter.mAudioUnit;
  AudioUnitParameterID mParameterID = a3->mArgument.mParameter.mParameterID;
  AudioUnitScope mScope = a3->mArgument.mParameter.mScope;
  AudioUnitElement mElement = a3->mArgument.mParameter.mElement;
  do
  {
    if (*(void **)(v14 + 8) != a2)
    {
LABEL_11:
      uint64_t v22 = v16;
      goto LABEL_12;
    }
    int v24 = *(_DWORD *)(v14 + 24);
    if ((v24 - 1) < 2)
    {
      unint64_t v25 = *(void *)(v14 + 32);
      BOOL v33 = v25 >= (unint64_t)mAudioUnit;
      BOOL v26 = v25 > (unint64_t)mAudioUnit;
      if (v33) {
        int v27 = v26;
      }
      else {
        int v27 = -1;
      }
      if (!v27)
      {
        AudioUnitParameterID v31 = *(_DWORD *)(v14 + 40);
        if (v31 == -1 || mParameterID == -1)
        {
LABEL_36:
          uint64_t v22 = 0;
          goto LABEL_12;
        }
        BOOL v33 = v31 >= mParameterID;
        BOOL v34 = v31 > mParameterID;
        if (v33) {
          int v27 = v34;
        }
        else {
          int v27 = -1;
        }
        if (!v27)
        {
          AudioUnitScope v35 = *(_DWORD *)(v14 + 44);
          BOOL v33 = v35 >= mScope;
          BOOL v36 = v35 > mScope;
          int v27 = v33 ? v36 : -1;
          if (!v27)
          {
            AudioUnitElement v37 = *(_DWORD *)(v14 + 48);
            int v27 = v37 > mElement;
            if (v37 < mElement) {
              goto LABEL_11;
            }
          }
        }
      }
      uint64_t v22 = v16;
      if (v27) {
        goto LABEL_12;
      }
      goto LABEL_36;
    }
    if (v24 || v8 - *(void *)v14 >= v9) {
      goto LABEL_11;
    }
    unint64_t v28 = *(void *)(v14 + 32);
    BOOL v33 = v28 >= (unint64_t)mAudioUnit;
    BOOL v29 = v28 > (unint64_t)mAudioUnit;
    if (v33) {
      int v30 = v29;
    }
    else {
      int v30 = -1;
    }
    if (!v30)
    {
      AudioUnitParameterID v38 = *(_DWORD *)(v14 + 40);
      uint64_t v22 = v14;
      if (v38 == -1) {
        goto LABEL_12;
      }
      uint64_t v22 = v14;
      if (mParameterID == -1) {
        goto LABEL_12;
      }
      if (v38 < mParameterID) {
        int v30 = -1;
      }
      else {
        int v30 = v38 > mParameterID;
      }
      if (!v30)
      {
        AudioUnitScope v39 = *(_DWORD *)(v14 + 44);
        BOOL v33 = v39 >= mScope;
        BOOL v40 = v39 > mScope;
        int v30 = v33 ? v40 : -1;
        if (!v30)
        {
          AudioUnitElement v41 = *(_DWORD *)(v14 + 48);
          int v30 = v41 > mElement;
          if (v41 < mElement) {
            goto LABEL_11;
          }
        }
      }
    }
    uint64_t v22 = v16;
    if (!v30) {
      uint64_t v22 = v14;
    }
LABEL_12:
    v14 += 56;
    if (v14 - v13 == 4088)
    {
      uint64_t v23 = *(void *)(v17 + 8);
      v17 += 8;
      uint64_t v13 = v23;
      uint64_t v14 = v23;
    }
    uint64_t v16 = v22;
  }
  while (v14 != v15);
  if (v22)
  {
    *(void *)uint64_t v22 = v8;
    *(float *)(v22 + 16) = a4;
    goto LABEL_147;
  }
LABEL_61:
  int64x2_t v42 = (char *)*((void *)this + 13);
  int16x4_t v43 = (char *)*((void *)this + 12);
  uint64_t v44 = v42 - v43;
  long long v159 = *(_OWORD *)&a3->mEventType;
  long long v160 = *(_OWORD *)&a3->mArgument.mProperty.mPropertyID;
  if (v42 == v43) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = 73 * ((v42 - v43) >> 3) - 1;
  }
  unint64_t v46 = *((void *)this + 16) + v11;
  if (v45 == v46)
  {
    BOOL v33 = v11 >= 0x49;
    unint64_t v47 = v11 - 73;
    if (v33)
    {
      *((void *)this + 15) = v47;
      uint64_t v50 = *(void *)v43;
      int64x2_t v48 = v43 + 8;
      uint64_t v49 = v50;
      *((void *)this + 12) = v48;
      if (*((char **)this + 14) == v42)
      {
        unint64_t v51 = *((void *)this + 11);
        uint64_t v52 = (uint64_t)&v48[-v51];
        if ((unint64_t)v48 <= v51)
        {
          uint64_t v78 = (uint64_t)&v42[-v51];
          BOOL v10 = v78 == 0;
          uint64_t v79 = v78 >> 2;
          if (v10) {
            unint64_t v80 = 1;
          }
          else {
            unint64_t v80 = v79;
          }
          int64x2_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v80);
          int64x2_t v83 = &v81[8 * (v80 >> 2)];
          int64x2_t v84 = (uint64_t *)*((void *)this + 12);
          int64x2_t v42 = v83;
          uint64_t v85 = *((void *)this + 13) - (void)v84;
          if (v85)
          {
            int64x2_t v42 = &v83[v85 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v86 = 8 * (v85 >> 3);
            int64x2_t v87 = &v81[8 * (v80 >> 2)];
            do
            {
              uint64_t v88 = *v84++;
              *(void *)int64x2_t v87 = v88;
              v87 += 8;
              v86 -= 8;
            }
            while (v86);
          }
          int64x2_t v89 = (void *)*((void *)this + 11);
          *((void *)this + 11) = v81;
          *((void *)this + 12) = v83;
          *((void *)this + 13) = v42;
          *((void *)this + 14) = &v81[8 * v82];
          if (v89)
          {
            operator delete(v89);
            int64x2_t v42 = (char *)*((void *)this + 13);
          }
        }
        else
        {
          uint64_t v53 = v52 >> 3;
          BOOL v54 = v52 >> 3 < -1;
          uint64_t v55 = (v52 >> 3) + 2;
          if (v54) {
            uint64_t v56 = v55;
          }
          else {
            uint64_t v56 = v53 + 1;
          }
          uint64_t v57 = -(v56 >> 1);
          uint64_t v58 = v56 >> 1;
          int64x2_t v59 = &v48[-8 * v58];
          int64_t v60 = v42 - v48;
          if (v42 == v48)
          {
            int v61 = v42;
          }
          else
          {
            memmove(&v48[-8 * v58], v48, v42 - v48);
            int v61 = (char *)*((void *)this + 12);
          }
          int64x2_t v42 = &v59[v60];
          *((void *)this + 12) = &v61[8 * v57];
          *((void *)this + 13) = &v59[v60];
        }
      }
      *(void *)int64x2_t v42 = v49;
LABEL_144:
      *((void *)this + 13) += 8;
    }
    else
    {
      uint64_t v62 = v44 >> 3;
      int64x2_t v63 = (char *)*((void *)this + 14);
      int v64 = (char *)*((void *)this + 11);
      uint64_t v65 = v63 - v64;
      if (v44 >> 3 < (unint64_t)((v63 - v64) >> 3))
      {
        if (v63 == v42)
        {
          int64x2_t v90 = operator new(0xFF8uLL);
          if (v64 == v43)
          {
            if (v42 == v43) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = v65 >> 2;
            }
            int64x2_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v91);
            int16x4_t v43 = &v92[(2 * v91 + 6) & 0xFFFFFFFFFFFFFFF8];
            v94 = (uint64_t *)*((void *)this + 12);
            int v95 = v43;
            uint64_t v96 = *((void *)this + 13) - (void)v94;
            if (v96)
            {
              int v95 = &v43[v96 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v97 = 8 * (v96 >> 3);
              int64x2_t v98 = v43;
              do
              {
                uint64_t v99 = *v94++;
                *(void *)int64x2_t v98 = v99;
                v98 += 8;
                v97 -= 8;
              }
              while (v97);
            }
            int64x2_t v100 = (void *)*((void *)this + 11);
            *((void *)this + 11) = v92;
            *((void *)this + 12) = v43;
            *((void *)this + 13) = v95;
            *((void *)this + 14) = &v92[8 * v93];
            if (v100)
            {
              operator delete(v100);
              int16x4_t v43 = (char *)*((void *)this + 12);
            }
          }
          *((void *)v43 - 1) = v90;
          int64x2_t v101 = (char *)*((void *)this + 12);
          int64x2_t v102 = (char *)*((void *)this + 13);
          *((void *)this + 12) = v101 - 8;
          uint64_t v103 = *((void *)v101 - 1);
          *((void *)this + 12) = v101;
          if (v102 == *((char **)this + 14))
          {
            unint64_t v104 = *((void *)this + 11);
            uint64_t v105 = (uint64_t)&v101[-v104];
            if ((unint64_t)v101 <= v104)
            {
              uint64_t v139 = (uint64_t)&v102[-v104];
              BOOL v10 = v139 == 0;
              uint64_t v140 = v139 >> 2;
              if (v10) {
                unint64_t v141 = 1;
              }
              else {
                unint64_t v141 = v140;
              }
              v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v141);
              v144 = &v142[8 * (v141 >> 2)];
              v145 = (uint64_t *)*((void *)this + 12);
              int64x2_t v102 = v144;
              uint64_t v146 = *((void *)this + 13) - (void)v145;
              if (v146)
              {
                int64x2_t v102 = &v144[v146 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v147 = 8 * (v146 >> 3);
                v148 = &v142[8 * (v141 >> 2)];
                do
                {
                  uint64_t v149 = *v145++;
                  *(void *)v148 = v149;
                  v148 += 8;
                  v147 -= 8;
                }
                while (v147);
              }
              v150 = (void *)*((void *)this + 11);
              *((void *)this + 11) = v142;
              *((void *)this + 12) = v144;
              *((void *)this + 13) = v102;
              *((void *)this + 14) = &v142[8 * v143];
              if (v150)
              {
                operator delete(v150);
                int64x2_t v102 = (char *)*((void *)this + 13);
              }
            }
            else
            {
              uint64_t v106 = v105 >> 3;
              BOOL v54 = v105 >> 3 < -1;
              uint64_t v107 = (v105 >> 3) + 2;
              if (v54) {
                uint64_t v108 = v107;
              }
              else {
                uint64_t v108 = v106 + 1;
              }
              uint64_t v109 = -(v108 >> 1);
              uint64_t v110 = v108 >> 1;
              v111 = &v101[-8 * v110];
              int64_t v112 = v102 - v101;
              if (v102 != v101)
              {
                memmove(&v101[-8 * v110], v101, v102 - v101);
                int64x2_t v101 = (char *)*((void *)this + 12);
              }
              int64x2_t v102 = &v111[v112];
              *((void *)this + 12) = &v101[8 * v109];
              *((void *)this + 13) = &v111[v112];
            }
          }
          *(void *)int64x2_t v102 = v103;
        }
        else
        {
          *(void *)int64x2_t v42 = operator new(0xFF8uLL);
        }
        goto LABEL_144;
      }
      if (v63 == v64) {
        unint64_t v66 = 1;
      }
      else {
        unint64_t v66 = v65 >> 2;
      }
      long long v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v66);
      uint64_t v69 = v68;
      uint64_t v151 = v8;
      uint64_t v70 = &v67[8 * v62];
      *(void *)&long long v71 = v67;
      *((void *)&v71 + 1) = v70;
      long long v155 = v71;
      uint64_t v72 = operator new(0xFF8uLL);
      *(void *)&long long v73 = v70;
      *((void *)&v73 + 1) = &v67[8 * v69];
      if (v62 == v69)
      {
        uint64_t v74 = 8 * v62;
        *(void *)&long long v75 = v155;
        if (v44 < 1)
        {
          v113 = v72;
          uint64_t v114 = v74 >> 2;
          if (v42 == v43) {
            unint64_t v115 = 1;
          }
          else {
            unint64_t v115 = v114;
          }
          v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v115);
          uint64_t v70 = &v116[8 * (v115 >> 2)];
          *(void *)&long long v75 = v116;
          *((void *)&v75 + 1) = v70;
          *(void *)&long long v73 = v70;
          *((void *)&v73 + 1) = &v116[8 * v117];
          if (v67)
          {
            long long v152 = v73;
            long long v156 = v75;
            operator delete(v67);
            long long v73 = v152;
            long long v75 = v156;
          }
          uint64_t v72 = v113;
        }
        else
        {
          uint64_t v76 = v74 >> 3;
          if (v76 >= -1) {
            unint64_t v77 = v76 + 1;
          }
          else {
            unint64_t v77 = v76 + 2;
          }
          v70 -= 8 * (v77 >> 1);
          *(void *)&long long v73 = v70;
          *((void *)&v75 + 1) = v70;
        }
      }
      else
      {
        long long v75 = v155;
      }
      *(void *)uint64_t v70 = v72;
      *(void *)&long long v73 = v73 + 8;
      uint64_t v118 = *((void *)this + 13);
      uint64_t v8 = v151;
      while (v118 != *((void *)this + 12))
      {
        v119 = (void *)*((void *)&v75 + 1);
        if (*((void *)&v75 + 1) == (void)v75)
        {
          v121 = (unsigned char *)v73;
          if ((unint64_t)v73 >= *((void *)&v73 + 1))
          {
            if (*((void *)&v73 + 1) == *((void *)&v75 + 1)) {
              unint64_t v126 = 1;
            }
            else {
              unint64_t v126 = (uint64_t)(*((void *)&v73 + 1) - *((void *)&v75 + 1)) >> 2;
            }
            v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v126);
            v120 = &v127[(2 * v126 + 6) & 0xFFFFFFFFFFFFFFF8];
            v129 = v120;
            uint64_t v130 = v121 - (unsigned char *)v119;
            if (v121 != (unsigned char *)v119)
            {
              v129 = &v120[v130 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v131 = 8 * (v130 >> 3);
              v132 = v120;
              v133 = v119;
              do
              {
                uint64_t v134 = *v133++;
                *(void *)v132 = v134;
                v132 += 8;
                v131 -= 8;
              }
              while (v131);
            }
            *(void *)&long long v75 = v127;
            *((void *)&v75 + 1) = v120;
            *(void *)&long long v73 = v129;
            *((void *)&v73 + 1) = &v127[8 * v128];
            if (v119)
            {
              long long v153 = v73;
              long long v158 = v75;
              operator delete(v119);
              long long v73 = v153;
              long long v75 = v158;
            }
          }
          else
          {
            uint64_t v122 = (uint64_t)(*((void *)&v73 + 1) - v73) >> 3;
            if (v122 >= -1) {
              uint64_t v123 = v122 + 1;
            }
            else {
              uint64_t v123 = v122 + 2;
            }
            uint64_t v124 = v123 >> 1;
            uint64_t v125 = v73 + 8 * (v123 >> 1);
            v120 = (char *)(v125 - (v73 - *((void *)&v75 + 1)));
            if ((void)v73 == *((void *)&v75 + 1))
            {
              v121 = (unsigned char *)*((void *)&v75 + 1);
            }
            else
            {
              uint64_t v154 = *((void *)&v73 + 1);
              uint64_t v157 = v75;
              memmove((void *)(v125 - (v73 - *((void *)&v75 + 1))), *((const void **)&v75 + 1), v73 - *((void *)&v75 + 1));
              *((void *)&v73 + 1) = v154;
              *(void *)&long long v75 = v157;
            }
            *((void *)&v75 + 1) = v120;
            *(void *)&long long v73 = &v121[8 * v124];
          }
        }
        else
        {
          v120 = (char *)*((void *)&v75 + 1);
        }
        uint64_t v135 = *(void *)(v118 - 8);
        v118 -= 8;
        *((void *)v120 - 1) = v135;
        *((void *)&v75 + 1) -= 8;
      }
      v136 = (void *)*((void *)this + 11);
      *(_OWORD *)((char *)this + 88) = v75;
      *(_OWORD *)((char *)this + 104) = v73;
      if (v136) {
        operator delete(v136);
      }
    }
    int16x4_t v43 = (char *)*((void *)this + 12);
    unint64_t v46 = *((void *)this + 16) + *((void *)this + 15);
  }
  unint64_t v137 = *(void *)&v43[8 * (v46 / 0x49)] + 56 * (v46 % 0x49);
  *(float *)(v137 + 16) = a4;
  *(_OWORD *)(v137 + 24) = v159;
  *(void *)unint64_t v137 = v8;
  *(void *)(v137 + 8) = a2;
  *(_DWORD *)(v137 + 20) = 0;
  *(_OWORD *)(v137 + 40) = v160;
  ++*((void *)this + 16);
  CAEventReceiver::Impl::timerShouldFireWithin(*(CAEventReceiver::Impl **)(*((void *)this + 10) + 16), *(double *)(*((void *)this + 10) + 32));
LABEL_147:
  return os_unfair_recursive_lock_unlock();
}

void sub_18FFC9CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13)
{
  operator delete(v13);
  if ((void)a13) {
    operator delete((void *)a13);
  }
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t AUEventListenerBase::NotifyParameterValueChange(AUEventListenerBase *this, ParameterListenerBinding *a2)
{
  uint64_t v3 = (void *)*((void *)a2 + 2);
  uint64_t v4 = (const AudioUnitEvent *)((char *)a2 + 24);
  LastCFNumberRef Value = ParameterListenerBinding::GetLastValue(a2);
  return AUEventListenerBase::SendMessage(this, v3, v4, LastValue);
}

uint64_t AUEventListenerBase::RemoveBinding(AUEventListenerBase *this, ListenerBinding *a2)
{
  os_unfair_recursive_lock_lock_with_options();
  unint64_t v4 = *((void *)this + 15);
  uint64_t v5 = *((void *)this + 12);
  uint64_t v6 = *((void *)this + 13);
  uint64_t v7 = (unint64_t *)(v5 + 8 * (v4 / 0x49));
  int64x2_t v63 = a2;
  uint64_t v62 = this;
  if (v6 == v5)
  {
    unint64_t v12 = 0;
    unint64_t v9 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = *((void *)this + 16);
    uint64_t v15 = v4 + v14;
    unint64_t v16 = (v4 + v14) / 0x49;
    uint64_t v17 = (uint64_t *)(v5 + 8 * v16);
    BOOL v18 = 1;
    uint64_t v6 = v5;
  }
  else
  {
    unint64_t v8 = *(void *)(v5 + 8 * (v4 / 0x49));
    unint64_t v9 = v8 + 56 * (v4 % 0x49);
    unint64_t v10 = *(void *)(v5 + 8 * ((*((void *)this + 16) + v4) / 0x49)) + 56 * ((*((void *)this + 16) + v4) % 0x49);
    if (v9 != v10)
    {
      while (*((void *)a2 + 2) != *(void *)(v9 + 8) || *(_DWORD *)(v9 + 24) != *((_DWORD *)a2 + 6))
      {
        v9 += 56;
        if (v9 - v8 == 4088)
        {
          unint64_t v11 = v7[1];
          ++v7;
          unint64_t v8 = v11;
          unint64_t v9 = v11;
        }
        if (v9 == v10) {
          goto LABEL_20;
        }
      }
    }
    if (v9 == v10)
    {
LABEL_20:
      unint64_t v9 = *(void *)(v5 + 8 * ((*((void *)this + 16) + v4) / 0x49)) + 56 * ((*((void *)this + 16) + v4) % 0x49);
    }
    else
    {
      unint64_t v19 = v9;
      int v20 = v7;
LABEL_12:
      unint64_t v21 = *v20;
      while (1)
      {
        v19 += 56;
        if (v19 - v21 == 4088)
        {
          unint64_t v22 = v20[1];
          ++v20;
          unint64_t v21 = v22;
          unint64_t v19 = v22;
        }
        if (v19 == v10) {
          break;
        }
        if (*((void *)a2 + 2) != *(void *)(v19 + 8) || *(_DWORD *)(v19 + 24) != *((_DWORD *)a2 + 6))
        {
          long long v23 = *(_OWORD *)v19;
          long long v24 = *(_OWORD *)(v19 + 16);
          long long v25 = *(_OWORD *)(v19 + 32);
          *(void *)(v9 + 48) = *(void *)(v19 + 48);
          *(_OWORD *)(v9 + 16) = v24;
          *(_OWORD *)(v9 + 32) = v25;
          *(_OWORD *)unint64_t v9 = v23;
          v9 += 56;
          if (v9 - *v7 == 4088)
          {
            unint64_t v26 = v7[1];
            ++v7;
            unint64_t v9 = v26;
          }
          goto LABEL_12;
        }
      }
      unint64_t v4 = *((void *)this + 15);
      uint64_t v5 = *((void *)this + 12);
      uint64_t v6 = *((void *)this + 13);
    }
    uint64_t v14 = *((void *)this + 16);
    uint64_t v15 = v4 + v14;
    unint64_t v16 = (v4 + v14) / 0x49;
    uint64_t v17 = (uint64_t *)(v5 + 8 * v16);
    BOOL v18 = v6 == v5;
    if (v6 == v5) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *v17 + 56 * (v15 - 73 * v16);
    }
    unint64_t v12 = v9;
  }
  if (v9 == v13) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = 73 * (((char *)v17 - (char *)v7) >> 3)
  }
        + 0x6DB6DB6DB6DB6DB7 * ((v13 - *v17) >> 3)
        - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *v7) >> 3);
  unint64_t v28 = (uint64_t *)(v5 + 8 * (v4 / 0x49));
  if (v18) {
    BOOL v29 = 0;
  }
  else {
    BOOL v29 = (char *)(*v28 + 56 * (v4 % 0x49));
  }
  uint64_t v64 = v27;
  if ((char *)v9 == v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = 73 * (((char *)v7 - (char *)v28) >> 3)
  }
        + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *v7) >> 3)
        - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v29[-*v28] >> 3);
  long long v67 = (uint64_t *)(v5 + 8 * (v4 / 0x49));
  uint64_t v68 = v29;
  unint64_t v65 = v30;
  std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](&v67, v30);
  if (v64 >= 1)
  {
    AudioUnitParameterID v31 = v67;
    int16x4_t v32 = v68;
    if (v65 <= (unint64_t)(v14 - v64) >> 1)
    {
      std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](&v67, v64);
      AudioUnitScope v35 = v67;
      BOOL v36 = v68;
      if (v28 == v31)
      {
        int16x4_t v43 = v29;
        int64x2_t v42 = v32;
      }
      else
      {
        AudioUnitScope v39 = (char *)*v31;
        AudioUnitParameterID v38 = v31 - 1;
        AudioUnitElement v37 = v39;
        for (int i = v32; ; int i = v41 + 4088)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(&v67, v37, i, v35, v36);
          AudioUnitScope v35 = (uint64_t *)v68;
          BOOL v36 = v69;
          if (v38 == v28) {
            break;
          }
          AudioUnitElement v41 = (char *)*v38--;
          AudioUnitElement v37 = v41;
        }
        int64x2_t v42 = (char *)(*v28 + 4088);
        int16x4_t v43 = v29;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(&v67, v43, v42, v35, v36);
      uint64_t v57 = *((void *)v62 + 16) - v64;
      *((void *)v62 + 15) += v64;
      *((void *)v62 + 16) = v57;
      while (std::deque<AUEventListenerBase::Message>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v62 + 88))
        ;
      unint64_t v4 = *((void *)v62 + 15);
      uint64_t v5 = *((void *)v62 + 12);
      uint64_t v6 = *((void *)v62 + 13);
    }
    else
    {
      std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](&v67, v64);
      BOOL v33 = v68;
      if (v18) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = *v17 + 56 * (v15 - 73 * v16);
      }
      if (v17 == v67)
      {
        BOOL v54 = (unsigned char *)v34;
        uint64_t v55 = v31;
        uint64_t v56 = v32;
      }
      else
      {
        uint64_t v44 = v67 + 1;
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(&v67, v68, (unsigned char *)(*v67 + 4088), v31, v32);
        uint64_t v45 = (uint64_t *)v68;
        unint64_t v46 = v69;
        if (v44 != v17)
        {
          unint64_t v47 = *(char **)v68;
          unint64_t v66 = v17;
          do
          {
            uint64_t v48 = 0;
            uint64_t v49 = *v44;
            while (1)
            {
              uint64_t v50 = 0x6DB6DB6DB6DB6DB7 * ((v47 - v46 + 4088) >> 3);
              if (0x6DB6DB6DB6DB6DB7 * ((4088 - 56 * v48) >> 3) >= v50) {
                uint64_t v51 = v50;
              }
              else {
                uint64_t v51 = 0x6DB6DB6DB6DB6DB7 * ((4088 - 56 * v48) >> 3);
              }
              if (v51) {
                memmove(v46, (const void *)(v49 + 56 * v48), 56 * v51);
              }
              v48 += v51;
              if (v48 == 73) {
                break;
              }
              uint64_t v52 = (char *)v45[1];
              ++v45;
              unint64_t v47 = v52;
              unint64_t v46 = v52;
            }
            v46 += 56 * v51;
            unint64_t v47 = (char *)*v45;
            if ((char *)(*v45 + 4088) == v46)
            {
              uint64_t v53 = (char *)v45[1];
              ++v45;
              unint64_t v47 = v53;
              unint64_t v46 = v53;
            }
            uint64_t v17 = v66;
            ++v44;
          }
          while (v44 != v66);
        }
        BOOL v33 = (unsigned char *)*v17;
        BOOL v54 = (unsigned char *)v34;
        uint64_t v55 = v45;
        uint64_t v56 = v46;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(&v67, v33, v54, v55, v56);
      uint64_t v60 = *((void *)v62 + 16) - v64;
      *((void *)v62 + 16) = v60;
      uint64_t v6 = *((void *)v62 + 13);
      while (1)
      {
        uint64_t v5 = *((void *)v62 + 12);
        uint64_t v61 = 73 * ((v6 - v5) >> 3) - 1;
        if (v6 == v5) {
          uint64_t v61 = 0;
        }
        unint64_t v4 = *((void *)v62 + 15);
        if (v61 - (v60 + v4) < 0x92) {
          break;
        }
        operator delete(*(void **)(v6 - 8));
        uint64_t v6 = *((void *)v62 + 13) - 8;
        *((void *)v62 + 13) = v6;
        uint64_t v60 = *((void *)v62 + 16);
      }
    }
  }
  if (v6 == v5) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = (char *)(*(void *)(v5 + 8 * (v4 / 0x49)) + 56 * (v4 % 0x49));
  }
  long long v67 = (uint64_t *)(v5 + 8 * (v4 / 0x49));
  uint64_t v68 = v58;
  std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](&v67, v65);
  if (v63) {
    (*(void (**)(ListenerBinding *))(*(void *)v63 + 8))(v63);
  }
  return os_unfair_recursive_lock_unlock();
}

uint64_t **std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](uint64_t **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *result;
    unint64_t v3 = ((uint64_t)result[1] - **result) / 56 + a2;
    if ((uint64_t)v3 < 1)
    {
      unint64_t v6 = 72 - v3;
      uint64_t v7 = &v2[-(v6 / 0x49)];
      *uint64_t result = v7;
      uint64_t v4 = *v7;
      unint64_t v5 = 72 - v6 % 0x49;
    }
    else
    {
      *uint64_t result = &v2[v3 / 0x49];
      uint64_t v4 = v2[v3 / 0x49];
      unint64_t v5 = v3 % 0x49;
    }
    result[1] = (uint64_t *)(v4 + 56 * v5);
  }
  return result;
}

BOOL std::deque<AUEventListenerBase::Message>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0x92)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 73;
  }
  return v1 > 0x91;
}

void *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(void *result, unsigned char *__src, unsigned char *a3, void *a4, char *__dst)
{
  unint64_t v6 = a4;
  uint64_t v7 = __src;
  unint64_t v8 = result;
  if (__src == a3)
  {
    unint64_t v9 = __src;
  }
  else
  {
    unint64_t v9 = a3;
    unint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - __dst + 4088) >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((v9 - v7) >> 3) >= v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v7) >> 3);
      }
      if (v12) {
        uint64_t result = memmove(__dst, v7, 56 * v12);
      }
      v7 += 56 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v13 = (char *)v6[1];
      ++v6;
      unint64_t v10 = v13;
      uint64_t __dst = v13;
    }
    __dst += 56 * v12;
    if ((char *)(*v6 + 4088) == __dst)
    {
      uint64_t v14 = (char *)v6[1];
      ++v6;
      uint64_t __dst = v14;
    }
  }
  *unint64_t v8 = v9;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(void *result, char *a2, char *a3, void *a4, char *a5)
{
  unint64_t v6 = a4;
  unint64_t v8 = result;
  if (a2 == a3)
  {
    unint64_t v9 = a2;
  }
  else
  {
    unint64_t v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a5[-v10] >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((v11 - a2) >> 3) < v12) {
        uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - a2) >> 3);
      }
      v11 -= 56 * v12;
      a5 -= 56 * v12;
      if (v12) {
        uint64_t result = memmove(a5, v11, 56 * v12);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v13 = *--v6;
      uint64_t v10 = v13;
      a5 = (char *)(v13 + 4088);
    }
    if ((char *)(*v6 + 4088) == a5)
    {
      uint64_t v14 = (char *)v6[1];
      ++v6;
      a5 = v14;
    }
  }
  *unint64_t v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void AUEventListenerBase::AddProperty()
{
}

void sub_18FFCA70C(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10E1C40ED15A91ALL);
  _Unwind_Resume(a1);
}

uint64_t PropertyListenerBinding::AUPropertyChanged(PropertyListenerBinding *this, OpaqueAudioComponentInstance *a2, OpaqueAudioComponentInstance *a3, unsigned int a4, AudioUnitElement a5)
{
  v6.mEventType = kAudioUnitEvent_PropertyChange;
  v6.mArgument.mParameter.AudioUnit mAudioUnit = a2;
  v6.mArgument.mParameter.AudioUnitElement mElement = a5;
  *(void *)&v6.mArgument.mProperty.mPropertyID = __PAIR64__(a4, a3);
  return AUEventListenerBase::SendMessage(*((AUEventListenerBase **)this + 1), *((void **)this + 2), &v6, 0.0);
}

void PropertyListenerBinding::~PropertyListenerBinding(PropertyListenerBinding *this)
{
  PropertyListenerBinding::~PropertyListenerBinding(this);
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF93A60;
  AudioUnitRemovePropertyListenerWithUserData(*((AudioUnit *)this + 4), *((_DWORD *)this + 10), (AudioUnitPropertyListenerProc)PropertyListenerBinding::AUPropertyChanged, this);
}

void AUEventListenerBase::AddEvent()
{
}

void AUEventListenerBase::AddParameter()
{
}

void ParameterListenerBinding::~ParameterListenerBinding(ParameterListenerBinding *this)
{
}

uint64_t AUEventListener::MessagesAreAvailable(AUEventListener *this)
{
  uint64_t v2 = (char *)this + 88;
  while (1)
  {
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v3 = *((void *)this + 16);
    if (v3)
    {
      unint64_t v4 = *((void *)this + 15);
      unint64_t v5 = *(void *)(*((void *)this + 12) + 8 * (v4 / 0x49)) + 56 * (v4 % 0x49);
      long long v12 = *(_OWORD *)v5;
      long long v13 = *(_OWORD *)(v5 + 16);
      long long v14 = *(_OWORD *)(v5 + 32);
      uint64_t v15 = *(void *)(v5 + 48);
      *((void *)this + 15) = v4 + 1;
      *((void *)this + 16) = v3 - 1;
      std::deque<AUEventListenerBase::Message>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v2);
      long long v8 = v12;
      v9[0] = v13;
      v9[1] = v14;
      uint64_t v10 = v15;
      LOBYTE(v3) = 1;
    }
    else
    {
      LOBYTE(v8) = 0;
    }
    char v11 = v3;
    uint64_t result = os_unfair_recursive_lock_unlock();
    if (!v11) {
      break;
    }
    *(void *)&long long v12 = *((void *)&v8 + 1);
    uint64_t v17 = v8;
    BOOL v18 = (char *)v9 + 8;
    int v16 = v9[0];
    uint64_t v7 = *((void *)this + 20);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, long long *, char **, uint64_t *, int *))(*(void *)v7 + 48))(v7, &v12, &v18, &v17, &v16);
  }
  return result;
}

void AUEventListener::~AUEventListener(AUEventListener *this)
{
  AUEventListener::~AUEventListener(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDF8FC78;
  std::__function::__value_func<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__value_func[abi:ne180100]((void *)this + 17);
  *(void *)this = &unk_1EDF92840;
  std::deque<AUEventListenerBase::Message>::~deque[abi:ne180100]((uint64_t)this + 88);
  AUListener::~AUListener(this);
}

void *std::__function::__value_func<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::deque<AUEventListenerBase::Message>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 36;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 73;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *CAEventReceiver::createTimer(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, a2);
  if (*(void *)(a1 + 72)) {
    std::terminate();
  }
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((void *)(a1 + 48), (uint64_t)v10);
  if (!*(void *)(a1 + 40))
  {
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (!v3)
    {
      global_queue = dispatch_get_global_queue(25, 0);
      uint64_t v3 = dispatch_queue_create_with_target_V2("", 0, global_queue);
      unint64_t v5 = *(NSObject **)(a1 + 32);
      *(void *)(a1 + 32) = v3;
      if (v5)
      {
        dispatch_release(v5);
        uint64_t v3 = *(NSObject **)(a1 + 32);
      }
    }
    uint64_t v6 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v3);
    uint64_t v7 = *(NSObject **)(a1 + 40);
    *(void *)(a1 + 40) = v6;
    if (v7)
    {
      dispatch_release(v7);
      uint64_t v6 = *(NSObject **)(a1 + 40);
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    _OWORD v9[2] = ___ZN15CAEventReceiver4Impl11createTimerENSt3__18functionIFvvEEE_block_invoke;
    void v9[3] = &__block_descriptor_tmp_2152;
    v9[4] = a1;
    dispatch_source_set_event_handler(v6, v9);
    dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  }
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v10);
}

void sub_18FFCADE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void ___ZN15CAEventReceiver4Impl11createTimerENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(__CFRunLoop **)(v1 + 16);
  if (v2)
  {
    if (atomic_exchange((atomic_ullong *volatile)(v1 + 88), 1uLL) != -1)
    {
      uint64_t v3 = *(const void **)(v1 + 24);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___ZN15CAEventReceiver4Impl10timerFiredEv_block_invoke;
      block[3] = &__block_descriptor_tmp_24;
      block[4] = v1;
      CFRunLoopPerformBlock(v2, v3, block);
    }
  }
  else if (atomic_exchange((atomic_ullong *volatile)(v1 + 88), (unint64_t)pthread_self()) != -1)
  {
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v1 + 80));
    uint64_t v4 = *(void *)(v1 + 72);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    int v5 = atomic_load((unsigned int *)(v1 + 112));
    if (v5 >= 1)
    {
      atomic_fetch_add((atomic_uint *volatile)(v1 + 112), 0xFFFFFFFF);
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 104));
    }
    if (atomic_exchange((atomic_ullong *volatile)(v1 + 88), 0) == -1)
    {
      uint64_t v6 = *(NSObject **)(v1 + 96);
      dispatch_semaphore_signal(v6);
    }
  }
}

unint64_t ___ZN15CAEventReceiver4Impl10timerFiredEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t result = (unint64_t)pthread_self();
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 88), result) != -1)
  {
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v1 + 80));
    uint64_t v3 = *(void *)(v1 + 72);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
    int v4 = atomic_load((unsigned int *)(v1 + 112));
    if (v4 >= 1)
    {
      atomic_fetch_add((atomic_uint *volatile)(v1 + 112), 0xFFFFFFFF);
      unint64_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 104));
    }
    if (atomic_exchange((atomic_ullong *volatile)(v1 + 88), 0) == -1)
    {
      int v5 = *(NSObject **)(v1 + 96);
      return dispatch_semaphore_signal(v5);
    }
  }
  return result;
}

uint64_t std::__function::__func<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0,std::allocator<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v2 = v1[14];
  uint64_t v3 = v1[15];
  while (v2 != v3)
  {
    int v4 = *(ParameterListenerBinding **)v2;
    if (atomic_exchange((atomic_uchar *volatile)(*(void *)v2 + 64), 0))
    {
      uint64_t v5 = *((void *)v4 + 2);
      LastCFNumberRef Value = ParameterListenerBinding::GetLastValue(v4);
      std::function<void ()(void *,AudioUnitParameter const*,float)>::operator()(v1[12], v5, (uint64_t)v4 + 32, LastValue);
    }
    v2 += 8;
  }
  return os_unfair_recursive_lock_unlock();
}

void sub_18FFCB168(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0,std::allocator<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0840;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0,std::allocator<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_1EDFA0840;
  result[1] = v3;
  return result;
}

void std::__function::__func<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0,std::allocator<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0>,void ()(void)>::~__func()
{
}

uint64_t AUParameterListener::AUParameterListener(uint64_t a1, uint64_t a2, long long *a3, double a4)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  long long v11 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(void *)a1 = &unk_1EDF8C178;
  *(_OWORD *)(a1 + 16) = v11;
  long long v11 = 0uLL;
  *(double *)(a1 + 32) = a4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  CAEventReceiver::~CAEventReceiver((std::__shared_weak_count **)&v11);
  *(void *)a1 = &unk_1EDF928B0;
  int v7 = a4 == 0.0;
  *(unsigned char *)(a1 + 64) = v7;
  uint64_t v8 = a2 + 24;
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9)
  {
    uint64_t v8 = a1 + 96;
    goto LABEL_5;
  }
  if (v9 != a2)
  {
    *(void *)(a1 + 96) = v9;
LABEL_5:
    *(void *)uint64_t v8 = 0;
    goto LABEL_7;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)v8 + 24))();
  int v7 = *(unsigned __int8 *)(a1 + 64);
LABEL_7:
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (!v7)
  {
    v12[0] = &unk_1EDFA0840;
    v12[1] = a1;
    v12[3] = v12;
    CAEventReceiver::createTimer(*(void *)(a1 + 16), (uint64_t)v12);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v12);
  }
  return a1;
}

void sub_18FFCB388(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0,std::allocator<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

uint64_t std::__function::__func<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0,std::allocator<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA07F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0,std::allocator<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_1EDFA07F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0,std::allocator<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0>,void ()(void)>::~__func()
{
}

uint64_t ListenerMap::forEachBinding(uint64_t result, unint64_t a2, uint64_t (**a3)(void, unint64_t, void))
{
  if (*(void *)result + 224 != a2)
  {
    int v4 = (void *)result;
    uint64_t v5 = a3 + 1;
    do
    {
      unint64_t v6 = atomic_load((unint64_t *)(a2 + 64));
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(unsigned char *)(a2 + 50) != 2)
      {
        char v8 = atomic_load((unint64_t *)(a2 + 64));
        if ((v8 & 1) == 0)
        {
          unint64_t result = (*a3)(v5, a2, *(void *)(a2 + 40));
          if (result) {
            break;
          }
        }
      }
      a2 = v7;
    }
    while (*v4 + 224 != v7);
  }
  return result;
}

BOOL ListenerMap::forEachBindingForEvent(_OWORD *a1, uint64_t a2)
{
  unsigned __int8 v15 = 0;
  long long v13 = &ListenerMap::instance(void)::global;
  long long v14 = (caulk::alloc::base_allocator *)&xmmword_1E9296820;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
  {
    XAudioUnitEvent::sentinel(void)::value = 0u;
    *(_OWORD *)algn_1E92992A8 = 0u;
  }
  if (XAudioUnitEvent::cmp((uint64_t)a1, (uint64_t)&XAudioUnitEvent::sentinel(void)::value))
  {
    long long v4 = a1[1];
    v11[0] = *a1;
    v11[1] = v4;
    int v12 = 0;
    ge = (long long *)caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::iteration::find_ge((unint64_t *)&v13, (uint64_t)v11);
  }
  else
  {
    ge = &xmmword_1E92967D0;
  }
  v9[0] = a1;
  v9[1] = a2;
  _OWORD v9[2] = &v15;
  v10[0] = (uint64_t (*)(void, unint64_t, void))caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::forEachBindingForEvent(XAudioUnitEvent const&,caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>)::$_0>;
  v10[1] = (uint64_t (*)(void, unint64_t, void))v9;
  ListenerMap::forEachBinding((uint64_t)&v13, (unint64_t)ge, v10);
  int v6 = v15;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v14, v7);
  return v6 != 0;
}

void sub_18FFCB5EC(_Unwind_Exception *a1@<X0>, unint64_t a2@<X8>)
{
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(*(caulk::alloc::base_allocator **)(v2 - 32), a2);
  _Unwind_Resume(a1);
}

uint64_t XAudioUnitEvent::cmp(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    unint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v2 = *(_DWORD *)a1 > *(_DWORD *)a2;
  }
  if (!v2)
  {
    unint64_t v2 = *(void *)(a1 + 8);
    unint64_t v4 = *(void *)(a2 + 8);
    BOOL v5 = v2 >= v4;
    LODWORD(v2) = v2 > v4;
    if (v5) {
      unint64_t v2 = v2;
    }
    else {
      unint64_t v2 = 0xFFFFFFFFLL;
    }
    if (*(_DWORD *)a1 > 2u)
    {
      if (v2) {
        return v2;
      }
      unsigned int v6 = *(_DWORD *)(a1 + 16);
      unsigned int v7 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      if (v2) {
        return v2;
      }
      unsigned int v6 = *(_DWORD *)(a1 + 16);
      if (v6 == -1) {
        return 0;
      }
      unsigned int v7 = *(_DWORD *)(a2 + 16);
      if (v7 == -1) {
        return 0;
      }
    }
    BOOL v5 = v6 >= v7;
    LODWORD(v2) = v6 > v7;
    if (v5) {
      unint64_t v2 = v2;
    }
    else {
      unint64_t v2 = 0xFFFFFFFFLL;
    }
    if (!v2)
    {
      unsigned int v8 = *(_DWORD *)(a1 + 20);
      unsigned int v9 = *(_DWORD *)(a2 + 20);
      BOOL v5 = v8 >= v9;
      LODWORD(v2) = v8 > v9;
      if (v5) {
        unint64_t v2 = v2;
      }
      else {
        unint64_t v2 = 0xFFFFFFFFLL;
      }
      if (!v2)
      {
        unsigned int v10 = *(_DWORD *)(a1 + 24);
        unsigned int v11 = *(_DWORD *)(a2 + 24);
        BOOL v5 = v10 >= v11;
        LODWORD(v2) = v10 > v11;
        if (v5) {
          return v2;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v2;
}

uint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::iteration::find_ge(unint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  uint64_t v11 = *(void *)(a2 + 32);
  unint64_t v6 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le>(v4, (uint64_t)v10, 0);
  unint64_t v8 = v7;
  if (XAudioUnitEvent::cmp(v6, a2) || *(_DWORD *)(v6 + 32) != *(_DWORD *)(a2 + 32))
  {
    unint64_t v6 = v8;
    if (*(unsigned char *)(v8 + 50) == 2) {
      return *a1 + 224;
    }
  }
  return v6;
}

unint64_t caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal@<X0>(caulk::alloc::base_allocator *a1@<X0>, unint64_t a2@<X8>)
{
  _X0 = 0;
  _X1 = 0;
  __asm { CASPAL          X0, X1, X0, X1, [X19] }
  unint64_t v10 = 0;
  for (unint64_t i = _X0; ; unint64_t i = result)
  {
    uint64_t v12 = (_X1 - 1);
    a2 = a2 & 0xFFFFFFFF00000000 | v12;
    _X2 = (int)_X1 <= 1 ? 0 : i;
    _X1 = _X1 | (v10 << 32);
    __asm { CASPAL          X0, X1, X2, X3, [X19] }
    if (result == i) {
      break;
    }
    unint64_t v10 = HIDWORD(_X1);
  }
  if (!v12 && i)
  {
    do
    {
      uint64_t v15 = i;
      unint64_t i = atomic_load((unint64_t *)(i + 56));
      uint64_t v16 = *((void *)a1 + 4);
      if (*(unsigned char *)(v16 + 32))
      {
        if (!*(unsigned char *)(v15 + 50)) {
          (*(void (**)(void *, uint64_t))v16)((void *)a1 + 5, v15);
        }
      }
      unint64_t result = caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::free_node(a1, v15);
    }
    while (i);
  }
  return result;
}

unint64_t caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::free_node(caulk::alloc::base_allocator *a1, uint64_t a2)
{
  _X20 = (unint64_t *)a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned char *)(a2 + 49))
  {
    a1 = *(caulk::alloc::base_allocator **)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    if (a1) {
      a1 = (caulk::alloc::base_allocator *)MEMORY[0x192FC8940](a1, 0x1020C40D5A9D86FLL);
    }
  }
  uint64_t v5 = 0;
  while (*(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v5] < *(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v4 - 8])
  {
    if (++v5 == 10) {
      caulk::alloc::base_allocator::bad_dealloc(a1);
    }
  }
  _X2 = 0;
  _X3 = 0;
  uint64_t v8 = *((void *)v3 + 2) + 64 + 32 * v5;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  atomic_store(_X2, _X20);
  _X1 = 0;
  __asm { CASPAL          X0, X1, X20, X21, [X8] }
  if (result != _X2)
  {
    do
    {
      atomic_store(result, _X20);
      _X3 = 0;
      __asm { CASPAL          X2, X3, X20, X21, [X8] }
      unint64_t v18 = _X2 ^ result;
      unint64_t result = _X2;
    }
    while (v18);
  }
  atomic_fetch_add((atomic_ullong *volatile)(v8 + 16), 1uLL);
  return result;
}

void caulk::alloc::base_allocator::bad_dealloc(caulk::alloc::base_allocator *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  caulk::alloc::alloc_error::alloc_error(exception, v2);
}

void sub_18FFCB95C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *caulk::alloc::alloc_error::alloc_error(std::runtime_error *this, const char *a2)
{
  unint64_t result = std::runtime_error::runtime_error(this, "deallocate() called for unowned block");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EDF96388;
  return result;
}

void caulk::alloc::alloc_error::~alloc_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x192FC8940);
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::forEachBindingForEvent(XAudioUnitEvent const&,caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>)::$_0>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (XAudioUnitEvent::cmp(a2, **a1)) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v5[1])(v5[1] + 8, a2, a3);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)v5[2] = 1;
  }
  return result;
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le>(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = -1;
  uint64_t v7 = 80;
  do
  {
    do
    {
      ++v6;
      unint64_t v8 = atomic_load((unint64_t *)(a1 + v7));
      v7 += 16;
    }
    while (v6 < a3);
  }
  while (*(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 50) != 2);
  unint64_t v9 = a1;
  if (v6 > a3)
  {
    unint64_t v9 = a1;
    do
      unint64_t v9 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, v6--, v9, a2);
    while (v6 > a3);
  }
  return caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, a3, v9, a2);
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a3;
  unint64_t v8 = atomic_load((unint64_t *)(a3 + 16 * a2 + 64));
  while (1)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    long long v10 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v17[0] = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    v17[1] = v10;
    uint64_t v18 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 32);
    int v11 = XAudioUnitEvent::cmp((uint64_t)v17, a4);
    if (v11 || (v12 = *(_DWORD *)(a4 + 32), int v11 = v18 > v12, v18 >= v12))
    {
      if (v11 > 0) {
        break;
      }
    }
    char v13 = atomic_load((unint64_t *)(v9 + 64));
    unint64_t v14 = v9;
    if (v13)
    {
      unint64_t v14 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v5, v9);
      if (!v15) {
        caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v14, v9);
      }
    }
    unint64_t v8 = atomic_load((unint64_t *)(v14 + 16 * a2 + 64));
    unint64_t v5 = v14;
  }
  return v5;
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a4 | 2;
  do
  {
    unint64_t v9 = (unint64_t *)(a3 + 16 * a2 + 64);
    unint64_t v10 = atomic_load(v9);
    if (v10 == v8) {
      break;
    }
    uint64_t v11 = a4;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v9, (unint64_t *)&v11, v8);
    if (v11 == a4 || v11 == v8) {
      break;
    }
    char v12 = atomic_load(v9);
    if (v12)
    {
      do
      {
        a3 = atomic_load((unint64_t *)(a3 + 16 * a2 + 72));
        char v13 = atomic_load((unint64_t *)(a3 + 16 * a2 + 64));
      }
      while ((v13 & 1) != 0);
    }
    long long v14 = *(_OWORD *)(a4 + 16);
    v23[0] = *(_OWORD *)a4;
    v23[1] = v14;
    uint64_t v24 = *(void *)(a4 + 32);
    unint64_t v15 = a3;
    while (1)
    {
      a3 = v15;
      unint64_t v16 = atomic_load((unint64_t *)(v15 + 16 * a2 + 64));
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      long long v18 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v25[0] = *(_OWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v25[1] = v18;
      uint64_t v26 = *(void *)((v16 & 0xFFFFFFFFFFFFFFFCLL) + 32);
      int v19 = XAudioUnitEvent::cmp((uint64_t)v25, (uint64_t)v23);
      if (!v19) {
        break;
      }
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_15;
      }
LABEL_12:
      char v20 = atomic_load((unint64_t *)(v17 + 64));
      unint64_t v15 = v17;
      if (v20)
      {
        unint64_t v15 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, a3, v17);
        if (!v21) {
          caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v15, v17);
        }
      }
    }
    if (v26 < v24) {
      goto LABEL_12;
    }
LABEL_15:
    ;
  }
  while (v17 == a4);
  return a3;
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _X20 = a4;
  unint64_t v7 = result;
  uint64_t v8 = a4 + 16 * a2;
  unint64_t v9 = (unint64_t *)(v8 + 64);
  atomic_store(a3, (unint64_t *)(v8 + 72));
  while (1)
  {
    char v10 = atomic_load(v9);
    if (v10) {
      break;
    }
    unint64_t v11 = atomic_load(v9);
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v9, &v12, v12 | 1);
    if ((v12 & 2) != 0) {
      uint64_t result = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(v7, a2, _X20, v12 & 0xFFFFFFFFFFFFFFFCLL);
    }
  }
  unint64_t v13 = atomic_load(v9);
  uint64_t v14 = _X20 | 2;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a3 + 16 * a2 + 64), (unint64_t *)&v14, v13 & 0xFFFFFFFFFFFFFFFCLL);
  if (v14 == (_X20 | 2) && atomic_fetch_add((atomic_uchar *volatile)(_X20 + 51), 0xFFu) == 1)
  {
    _X2 = 0;
    _X3 = 0;
    __asm { CASPAL          X2, X3, X2, X3, [X8] }
    atomic_store(_X2, (unint64_t *)(_X20 + 56));
    _X1 = 0;
    __asm { CASPAL          X0, X1, X20, X21, [X8] }
    if (result != _X2)
    {
      do
      {
        atomic_store(result, (unint64_t *)(_X20 + 56));
        _X3 = 0;
        __asm { CASPAL          X2, X3, X20, X21, [X8] }
        unint64_t v25 = _X2 ^ result;
        uint64_t result = _X2;
      }
      while (v25);
    }
  }
  return result;
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::remove(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = (caulk::alloc::base_allocator *)(a1 + 304);
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  long long v20 = v5;
  uint64_t v21 = *(void *)(a2 + 32);
  uint64_t v6 = -1;
  uint64_t v7 = 80;
  do
  {
    unint64_t v8 = atomic_load((unint64_t *)(a1 + v7));
    ++v6;
    v7 += 16;
  }
  while (*(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 50) != 2);
  unint64_t v9 = a1;
  if (v6)
  {
    unint64_t v9 = a1;
    do
      unint64_t v9 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, v6--, v9, (uint64_t)&v19);
    while (v6);
  }
  unint64_t v10 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, 0, v9, (uint64_t)&v19);
  uint64_t v12 = v11;
  if (!XAudioUnitEvent::cmp(v11, a2))
  {
    unint64_t v13 = *(unsigned int *)(v12 + 32);
    if (v13 == *(_DWORD *)(a2 + 32))
    {
      unint64_t v14 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, 0, v10, v12);
      uint64_t v16 = v15;
      if (!v15) {
        caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, 0, v14, v12);
      }
      if ((v16 & 0xFF00000000) != 0 && v12)
      {
        long long v17 = *(_OWORD *)(a2 + 16);
        long long v19 = *(_OWORD *)a2;
        long long v20 = v17;
        uint64_t v21 = *(void *)(a2 + 32);
        caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le>(a1, (uint64_t)&v19, 0);
      }
    }
  }
  return caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v4, v13);
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a3;
  unint64_t v8 = atomic_load((unint64_t *)(a3 + 16 * a2 + 64));
  while (1)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    long long v10 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v16[0] = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    v16[1] = v10;
    uint64_t v17 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 32);
    int v11 = XAudioUnitEvent::cmp((uint64_t)v16, a4);
    if (!v11) {
      break;
    }
    if ((v11 & 0x80000000) == 0) {
      return v5;
    }
LABEL_6:
    char v12 = atomic_load((unint64_t *)(v9 + 64));
    unint64_t v13 = v9;
    if (v12)
    {
      unint64_t v13 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v5, v9);
      if (!v14) {
        caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v13, v9);
      }
    }
    unint64_t v8 = atomic_load((unint64_t *)(v13 + 16 * a2 + 64));
    unint64_t v5 = v13;
  }
  if (v17 < *(_DWORD *)(a4 + 32)) {
    goto LABEL_6;
  }
  return v5;
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveListener(AUListener *)::$_0>(uint64_t a1, uint64_t a2, caulk::pooled_semaphore_mutex *this)
{
  unint64_t v5 = *(void ***)a1;
  unint64_t v6 = *(void *)(*(void *)a1 + 8);
  caulk::pooled_semaphore_mutex::_lock(this);
  uint64_t v7 = (void *)*((void *)this + 1);
  v10[0] = this;
  v10[1] = (caulk::pooled_semaphore_mutex *)((char *)this + 8);
  if (v7 && **v5 == v7[1])
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v8;
    uint64_t v12 = *(void *)(a2 + 32);
    caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::remove(v6, (uint64_t)v11);
    *((void *)this + 1) = 0;
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(v10);
  return 0;
}

caulk::pooled_semaphore_mutex **caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(caulk::pooled_semaphore_mutex **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    caulk::pooled_semaphore_mutex::_unlock(v2);
  }
  return a1;
}

BOOL caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::CanInsertEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>(void ***a1, int a2, caulk::pooled_semaphore_mutex *this)
{
  uint64_t v4 = *a1;
  caulk::pooled_semaphore_mutex::_lock(this);
  v9[0] = this;
  uint64_t v5 = *((void *)this + 1);
  v9[1] = (caulk::pooled_semaphore_mutex *)((char *)this + 8);
  if (v5 && *(void *)(v5 + 8) == **v4)
  {
    uint64_t v8 = *v4[1];
    if (v8) {
      BOOL v6 = *(void *)(v5 + 16) == v8;
    }
    else {
      BOOL v6 = 1;
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(v9);
  return v6;
}

void ListenerMap::InsertEvent()
{
}

void sub_18FFCC698(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

unint64_t *caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop()
{
  _X0 = 0;
  _X1 = 0;
  __asm { CASPAL          X0, X1, X0, X1, [X8] }
  if (result)
  {
    uint64_t v7 = result;
    do
    {
      _X6 = atomic_load(result);
      _X5 = 0;
      __asm { CASPAL          X4, X5, X6, X7, [X8] }
      if (_X4 == v7) {
        break;
      }
      uint64_t result = _X4;
      uint64_t v7 = _X4;
    }
    while (_X4);
  }
  return result;
}

uint64_t caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::allocate(uint64_t a1, unint64_t a2)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 40), 0x801u);
  uint64_t v3 = *(unint64_t **)(a1 + 24);
  if (!v3) {
    uint64_t v3 = *(unint64_t **)(a1 + 16);
  }
  int v20 = 0;
  unint64_t v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v4) {
    BOOL v5 = a2 > 0x3FF0;
  }
  else {
    BOOL v5 = 1;
  }
  while (!v3)
  {
LABEL_19:
    if (os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 32)))
    {
      int v14 = (unint64_t *)caulk::alloc::details::caching_page_allocator_base::allocate(*(caulk::alloc::details::caching_page_allocator_base **)(a1 + 8));
      uint64_t v3 = v14;
      *int v14 = 0;
      v14[1] = v15;
      v14[2] = 0;
      __dmb(0xBu);
      unint64_t v16 = *(void *)(a1 + 16);
      atomic_store(v16, v14);
      unint64_t v17 = v16;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), &v17, (unint64_t)v14);
      if (v17 != v16)
      {
        unint64_t v18 = v17;
        do
        {
          atomic_store(v17, v14);
          atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), &v18, (unint64_t)v14);
          BOOL v13 = v18 == v17;
          unint64_t v17 = v18;
        }
        while (!v13);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
    }
    else
    {
      caulk::concurrent::details::spinloop::spin((uint64_t)&v20);
    }
  }
  unint64_t v6 = (unint64_t)v3;
  while (1)
  {
    if (!v5)
    {
      uint64_t v7 = *(void *)(v6 + 16);
      uint64_t v8 = ~((_BYTE)v6 + 39 + (_BYTE)v7) & 7;
      unint64_t v9 = v7 + v4 + v8;
      if (v9 <= 0x3FE0) {
        break;
      }
    }
LABEL_10:
    unint64_t v6 = atomic_load((unint64_t *)v6);
    if (!v6) {
      unint64_t v6 = *(void *)(a1 + 16);
    }
    if (v3 == (unint64_t *)v6) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = *(void *)(v6 + 16);
  atomic_compare_exchange_strong((atomic_ullong *volatile)(v6 + 16), (unint64_t *)&v10, v9);
  if (v10 != v7)
  {
    do
    {
      uint64_t v8 = ~((_BYTE)v6 + 39 + (_BYTE)v10) & 7;
      unint64_t v11 = v10 + v4 + v8;
      if (v11 > 0x3FE0) {
        goto LABEL_10;
      }
      uint64_t v7 = v10;
      uint64_t v12 = v10;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v6 + 16), (unint64_t *)&v12, v11);
      BOOL v13 = v12 == v10;
      uint64_t v10 = v12;
    }
    while (!v13);
  }
  uint64_t result = v6 + 32 + v7 + v8;
  if ((result & 7) != 0)
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 24) = v6;
    atomic_fetch_add((atomic_uint *volatile)(a1 + 40), 0xFFFFFFFF);
  }
  return result;
}

void sub_18FFCC8CC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 40), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::spinloop::spin(uint64_t this)
{
  int v1 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v1;
  if (v1 == 100)
  {
    unint64_t v2 = (_DWORD *)this;
    this = sched_yield();
    *unint64_t v2 = 0;
  }
  return this;
}

void caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::random_engine()
{
  {
    caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::multi_simple_random((uint64_t)&caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine);
  }
}

void sub_18FFCC9A0(_Unwind_Exception *a1)
{
}

uint64_t caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::next_value(uint64_t a1)
{
  uint64_t v1 = 0;
  while (1)
  {
    unint64_t v2 = (atomic_uchar *)(a1 + 2512 * v1 + 2504);
    if ((atomic_exchange(v2, 1u) & 1) == 0) {
      break;
    }
    if (v1 == 3) {
      uint64_t v1 = 0;
    }
    else {
      ++v1;
    }
  }
  uint64_t result = std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 2512 * v1), (_DWORD *)(a1 + 10048));
  atomic_store(0, (unsigned __int8 *)v2);
  return result;
}

uint64_t std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, _DWORD *a2)
{
  uint64_t result = a2[1];
  int v4 = result - *a2;
  if (result != *a2)
  {
    unsigned int v5 = v4 + 1;
    if (v4 == -1)
    {
      return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
    }
    else
    {
      uint64_t v7 = __clz(v5);
      uint64_t v8 = 31;
      if (((v5 << v7) & 0x7FFFFFFF) != 0) {
        uint64_t v8 = 32;
      }
      unint64_t v9 = v8 - v7;
      unint64_t v10 = v9 >> 5;
      if ((v9 & 0x1F) != 0) {
        ++v10;
      }
      if (v10 <= v9) {
        unsigned int v11 = 0xFFFFFFFF >> -(v9 / v10);
      }
      else {
        unsigned int v11 = 0;
      }
      do
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v12 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & v11;
      while (v12 >= v5);
      return *a2 + v12;
    }
  }
  return result;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::multi_simple_random(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1;
  do
  {
    uint64_t v4 = a1 + 2512 * v2;
    unsigned int v5 = 5489;
    *(_DWORD *)uint64_t v4 = 5489;
    for (uint64_t i = 1; i != 624; ++i)
    {
      unsigned int v5 = i + 1812433253 * (v5 ^ (v5 >> 30));
      *(_DWORD *)(v3 + 4 * i) = v5;
    }
    *(void *)(v4 + 2496) = 0;
    *(unsigned char *)(a1 + 2512 * v2++ + 2504) = 0;
    v3 += 2512;
  }
  while (v2 != 4);
  uint64_t v7 = 0;
  *(void *)(a1 + 10048) = 0xFFFFFFFF00000000;
  uint64_t v8 = a1;
  do
  {
    unsigned int v9 = mach_absolute_time();
    *(_DWORD *)uint64_t v8 = v9;
    for (uint64_t j = 1; j != 624; ++j)
    {
      unsigned int v9 = j + 1812433253 * (v9 ^ (v9 >> 30));
      *(_DWORD *)(v8 + 4 * j) = v9;
    }
    *(void *)(v8 + 2496) = 0;
    ++v7;
    v8 += 2512;
  }
  while (v7 != 4);
  return a1;
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>(uint64_t a1, uint64_t a2, caulk::pooled_semaphore_mutex *this)
{
  unsigned int v5 = *(void ***)a1;
  unint64_t v6 = *(void *)(*(void *)a1 + 16);
  caulk::pooled_semaphore_mutex::_lock(this);
  unsigned int v11 = this;
  uint64_t v7 = *((void *)this + 1);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v12 = (void *)((char *)this + 8);
  if (v7)
  {
    if (*(void *)(v7 + 8) == **v5 && ((uint64_t v8 = *v5[1]) == 0 || *(void *)(v7 + 16) == v8))
    {
      long long v9 = *(_OWORD *)(a2 + 16);
      v13[0] = *(_OWORD *)a2;
      v13[1] = v9;
      uint64_t v14 = *(void *)(a2 + 32);
      caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::remove(v6, (uint64_t)v13);
      *std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v12 = 0;
      (*(void (**)(void, uint64_t))(*(void *)**v5 + 56))(**v5, v7);
      LOBYTE(v6) = 1;
    }
    else
    {
      LOBYTE(v6) = 0;
    }
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(&v11);
  return (v7 != 0) & v6;
}

void sub_18FFCCD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
}

uint64_t ListenerMap::AddParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 20) == -1 || *(_DWORD *)(a3 + 24) == -1 || *(_DWORD *)(a3 + 16) == -1) {
    return 4294967246;
  }
  uint64_t v17 = a1;
  *(void *)outCFNumberRef Value = &v17;
  unint64_t v15 = &v16;
  uint64_t v16 = a2;
  v12[0] = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::CanInsertEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
  v12[1] = outValue;
  if (ListenerMap::forEachBindingForEvent((_OWORD *)a3, (uint64_t)v12)) {
    return 4294967246;
  }
  outValue[0] = 0.0;
  uint64_t Parameter = AudioUnitGetParameter(*(AudioUnit *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), *(_DWORD *)(a3 + 24), outValue);
  uint64_t v8 = Parameter;
  if (!Parameter || Parameter == -10867)
  {
    XAUParameter::GetParamProxy((XAUParameter *)v12, (OpaqueAudioComponentInstance **)(a3 + 8));
    if (v13)
    {
      if (v8) {
        unsigned int v11 = 0;
      }
      else {
        unsigned int v11 = outValue;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioUnitParameterValue *))(*(void *)a1 + 32))(a1, a2, a3, v11);
      ListenerMap::InsertEvent();
    }
    return 4294900547;
  }
  return v8;
}

void sub_18FFCCED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ListenerMap::NotifyParameterChange(ListenerMap *this, AUListener *a2, unsigned int *a3, const XAUParameter *a4, float *a5)
{
  uint64_t v45 = a2;
  unint64_t v46 = this;
  uint64_t v41 = 0;
  long long v42 = *(_OWORD *)a3;
  uint64_t v43 = *((void *)a3 + 2);
  uint64_t v44 = a4;
  __int16 v40 = 0;
  if (!*(void *)a3) {
    return 0;
  }
  AudioUnitParameterID v38 = &ListenerMap::instance(void)::global;
  AudioUnitScope v39 = (caulk::alloc::base_allocator *)&xmmword_1E9296820;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
  uint64_t v6 = *(void *)a3;
  v35[0] = 0;
  long long v36 = 0u;
  v35[1] = v6;
  int v37 = 0;
  ge = (unint64_t *)caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::iteration::find_ge((unint64_t *)&v38, (uint64_t)v35);
  unint64_t v8 = (unint64_t)&xmmword_1E92967D0;
  if (ge != (unint64_t *)&xmmword_1E92967D0)
  {
    atomic_load(ge + 8);
    unint64_t v8 = *(unsigned int *)ge;
    if (!v8)
    {
      uint64_t v16 = &v40;
      uint64_t v17 = (char *)&v40 + 1;
      unint64_t v18 = &v46;
      long long v19 = &v45;
      int v20 = &v44;
      v34[0] = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyParameterChange(AUListener *,void *,XAUParameter const&,float *)::$_0>;
      v34[1] = &v16;
      ListenerMap::forEachBindingForEvent(&v41, (uint64_t)v34);
      unint64_t v8 = a3[2];
      if (v8 != -1)
      {
        if (!(_BYTE)v40 || (unint64_t v8 = HIBYTE(v40), HIBYTE(v40)))
        {
          XAUParameter::GetParamProxy((XAUParameter *)&v30, (OpaqueAudioComponentInstance **)a3);
          unint64_t v8 = v33;
          if (!v33)
          {
            uint64_t v9 = v30;
            goto LABEL_5;
          }
          int v11 = *(_DWORD *)(v31 + 40);
          int v29 = v11;
          if ((v11 & 0x30000000) != 0)
          {
            v28[0] = AUFlatParameterInfoBlob::ParameterProxy::dependentParameters(v30, v31);
            v28[1] = v12;
            v26[0] = (unint64_t)&ListenerMap::instance(void)::global;
            v26[1] = (unint64_t)&xmmword_1E9296820;
            uint64_t v27 = v28;
            caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
            uint64_t v13 = *(void *)a3;
            v23[0] = 0;
            v23[1] = v13;
            _OWORD v23[2] = vand_s8(*(int8x8_t *)(a3 + 3), (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((v11 & 0x10000000) == 0), 0x1FuLL)));
            int v24 = 0;
            int v25 = 0;
            unint64_t v14 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::iteration::find_ge(v26, (uint64_t)v23);
            uint64_t v16 = (__int16 *)a3;
            uint64_t v17 = (char *)&v29;
            unint64_t v18 = (ListenerMap **)&v27;
            long long v19 = (AUListener **)&v40;
            int v20 = &v46;
            uint64_t v21 = &v45;
            v22[0] = (uint64_t (*)(void, unint64_t, void))caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyParameterChange(AUListener *,void *,XAUParameter const&,float *)::$_1>;
            v22[1] = (uint64_t (*)(void, unint64_t, void))&v16;
            ListenerMap::forEachBinding((uint64_t)v26, v14, v22);
            caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((caulk::alloc::base_allocator *)&xmmword_1E9296820, v15);
          }
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
LABEL_5:
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v39, v8);
  return v9;
}

void sub_18FFCD0F8(_Unwind_Exception *a1@<X0>, unint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((caulk::alloc::base_allocator *)&xmmword_1E9296820, a2);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(*(caulk::alloc::base_allocator **)(v26 - 104), v28);
  _Unwind_Resume(a1);
}

uint64_t AUFlatParameterInfoBlob::ParameterProxy::dependentParameters(AUFlatParameterInfoBlob::ParameterProxy *this, uint64_t a2)
{
  unint64_t v2 = *(int *)(a2 + 48);
  if (v2 == -1) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 6);
  if (v2 >= v3) {
    std::terminate();
  }
  return (uint64_t)this + 8 * v2 + (v3 >> 32);
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyParameterChange(AUListener *,void *,XAUParameter const&,float *)::$_1>(AudioUnit ***a1, uint64_t a2, caulk::pooled_semaphore_mutex *this)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  if (*(AudioUnit *)(a2 + 8) != *v4
    || (*((unsigned char *)v3[1] + 3) & 0x20) != 0
    && (*(_DWORD *)(a2 + 20) != *((_DWORD *)v4 + 3) || *(_DWORD *)(a2 + 24) != *((_DWORD *)v4 + 4)))
  {
    return 1;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 16);
  if (v7 != -1)
  {
    unsigned int v8 = *((_DWORD *)v4 + 2);
    if (v8 != -1)
    {
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 > v8;
      if (v9) {
        int v11 = v10;
      }
      else {
        int v11 = -1;
      }
      if (!v11)
      {
        uint64_t v12 = *(unsigned int *)(a2 + 20);
        unsigned int v13 = *((_DWORD *)v4 + 3);
        BOOL v9 = v12 >= v13;
        int v11 = v12 > v13;
        if (!v9) {
          int v11 = -1;
        }
        if (!v11)
        {
          unsigned int v14 = *(_DWORD *)(a2 + 24);
          unsigned int v15 = *((_DWORD *)v4 + 4);
          int v11 = v14 > v15;
          if (v14 < v15) {
            goto LABEL_16;
          }
        }
      }
      if (v11)
      {
        uint64_t v12 = *(unsigned int *)(a2 + 20);
        unsigned int v14 = *(_DWORD *)(a2 + 24);
LABEL_16:
        uint64_t v16 = *v3[2];
        uint64_t v17 = (void *)*v16;
        uint64_t v18 = v16[1];
        if (v18)
        {
          unint64_t v19 = ((unint64_t)(v14 & 0x1FFFFFFF) << 32) | (v12 << 61) | v7;
          uint64_t v20 = 8 * v18;
          uint64_t v21 = v17;
          while (*v21 != v19)
          {
            ++v21;
            v20 -= 8;
            if (!v20)
            {
              uint64_t v21 = &v17[v18];
              break;
            }
          }
        }
        else
        {
          uint64_t v21 = v17;
        }
        if (v18 != v21 - v17)
        {
          caulk::pooled_semaphore_mutex::_lock(this);
          int v25 = this;
          uint64_t v22 = *((void *)this + 1);
          uint64_t v26 = (uint64_t *)((char *)this + 8);
          if (v22)
          {
            outCFNumberRef Value = 0.0;
            if (*(unsigned char *)v3[3])
            {
              p_outCFNumberRef Value = 0;
            }
            else
            {
              if (AudioUnitGetParameter(**v3, *((_DWORD *)*v3 + 2), *((_DWORD *)*v3 + 3), *((_DWORD *)*v3 + 4), &outValue))
              {
                p_outCFNumberRef Value = 0;
              }
              else
              {
                p_outCFNumberRef Value = &outValue;
              }
              uint64_t v22 = *v26;
            }
            (*(void (**)(uint64_t, void, void, AudioUnitParameterValue *))(*(void *)v22 + 16))(v22, *v3[4], *v3[5], p_outValue);
          }
          caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(&v25);
        }
      }
    }
  }
  return 0;
}

void sub_18FFCD348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard((caulk::pooled_semaphore_mutex **)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyParameterChange(AUListener *,void *,XAUParameter const&,float *)::$_0>(uint64_t *a1, int a2, caulk::pooled_semaphore_mutex *this)
{
  uint64_t v4 = *a1;
  caulk::pooled_semaphore_mutex::_lock(this);
  v7[0] = this;
  uint64_t v5 = *((void *)this + 1);
  v7[1] = (caulk::pooled_semaphore_mutex *)((char *)this + 8);
  if (v5)
  {
    **(unsigned char **)uint64_t v4 = 1;
    **(unsigned char **)(v4 + 8) |= (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v5 + 16))(v5, **(void **)(v4 + 16), **(void **)(v4 + 24), **(void **)(v4 + 32));
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(v7);
  return 0;
}

void sub_18FFCD404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>(void ***a1, int a2, caulk::pooled_semaphore_mutex *this)
{
  uint64_t v4 = *a1;
  caulk::pooled_semaphore_mutex::_lock(this);
  v9[0] = this;
  uint64_t v5 = *((void *)this + 1);
  v9[1] = (caulk::pooled_semaphore_mutex *)((char *)this + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6 != **v4 || (uint64_t v8 = *v4[1]) != 0 && *(void *)(v5 + 16) != v8) {
      (*(void (**)(uint64_t))(*(void *)v6 + 72))(v6);
    }
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(v9);
  return 0;
}

void sub_18FFCD4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
}

uint64_t EC3AudioFile::ParseAudioFile(EC3AudioFile *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 21) == 1633889587) {
    uint64_t v2 = 10;
  }
  else {
    uint64_t v2 = 12;
  }
  int v10 = 0;
  uint64_t v9 = 0;
  uint64_t v3 = (DataSource **)MEMORY[0x1F4188790](this);
  memset(&v7[128], 0, 24);
  uint64_t FPosForNextSyncWord = EC3AudioFile::GetFPosForNextSyncWord((EC3AudioFile *)v3, &v9, &v8, v3[13]);
  if (!FPosForNextSyncWord)
  {
    uint64_t v5 = v9;
    (*(void (**)(void, void, uint64_t, uint64_t, unsigned char *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v9, v2, v7, &v10);
    *((void *)this + 9) = v5;
    operator new();
  }
  return FPosForNextSyncWord;
}

void sub_18FFCE188(_Unwind_Exception *a1)
{
  operator delete(v1);
  uint64_t v4 = *(void **)(v2 - 336);
  if (v4) {
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t EC3AudioFile::GetFPosForNextSyncWord(EC3AudioFile *this, uint64_t *a2, unsigned int *a3, DataSource *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 21) == 1633889587) {
    unsigned int v8 = 10;
  }
  else {
    unsigned int v8 = 12;
  }
  uint64_t v21 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v21, 0x28uLL, 1);
  uint64_t v9 = v21;
  if (!v21)
  {
    uint64_t v13 = 1685348671;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&long long v24 = "EC3AudioFile.cpp";
      WORD4(v24) = 1024;
      *(_DWORD *)((char *)&v24 + 10) = 891;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  couldn't make space", buf, 0x12u);
    }
    return v13;
  }
  unint64_t v19 = a2;
  uint64_t v10 = *a2;
LABEL_6:
  unsigned int v22 = 0;
  uint64_t v11 = (*(uint64_t (**)(DataSource *, void, uint64_t, uint64_t, char *, unsigned int *))(*(void *)a4 + 48))(a4, 0, v10, 40, v9, &v22);
  unsigned int v12 = v22;
  if (v22 >= v8)
  {
    uint64_t v13 = v11;
    uint64_t v20 = v10;
    unsigned int v14 = 0;
    while (1)
    {
      int v15 = *((_DWORD *)this + 21);
      *(_DWORD *)AudioStreamBasicDescription buf = v15;
      LOWORD(v24) = 0;
      *(void *)((char *)&v24 + 4) = &v9[v14];
      HIDWORD(v24) = v12;
      char v25 = 0;
      uint64_t v26 = 0;
      int v27 = 0;
      if ((v15 | 0x4000000) == 0x65632D33)
      {
        unsigned int v16 = v15 == 1633889587 ? 10 : 12;
        if (v16 <= v12)
        {
          if (v15 == 1633889587) {
            size_t v17 = 10;
          }
          else {
            size_t v17 = 12;
          }
          memcpy(__dst, &v9[v14], v17);
          if (__dst[0] != 2935)
          {
            if (__dst[0] != 30475) {
              goto LABEL_20;
            }
            char v25 = 1;
          }
          LOBYTE(v24) = 1;
        }
      }
LABEL_20:
      if (EC3PacketParser::IsValid((EC3PacketParser *)buf))
      {
        *a3 = HIDWORD(v26);
        *unint64_t v19 = v20 + v14;
        if (v9) {
          goto LABEL_24;
        }
        return v13;
      }
      ++v14;
      unsigned int v12 = v22 - 1;
      unsigned int v22 = v12;
      if (v8 + v14 > v12)
      {
        uint64_t v10 = v20 + v14;
        goto LABEL_6;
      }
    }
  }
  uint64_t v13 = 4294967257;
  if (v9) {
LABEL_24:
  }
    free(v9);
  return v13;
}

void sub_18FFCE47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a13) {
    free(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EC3AudioFile::ParseOneCycle(EC3AudioFile *this, uint64_t a2, int a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 161)) {
    return 0;
  }
  BOOL v10 = *((_DWORD *)this + 21) == 1633889587;
  *(void *)&v34[1] = 0;
  *(void *)AudioUnitScope v35 = 0;
  if (v10) {
    uint64_t v7 = 10;
  }
  else {
    uint64_t v7 = 12;
  }
  if (a3) {
    bzero((char *)this + 200, 0x40uLL);
  }
  uint64_t v3 = (*(uint64_t (**)(void, unsigned char *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v34[1]);
  if (!v3)
  {
    bzero(*((void **)this + 22), *((unsigned int *)this + 46));
    uint64_t v8 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, unsigned int *))(**((void **)this + 13)
                                                                                             + 48))(*((void *)this + 13), 0, a2, v7, *((void *)this + 22), &v35[1]);
    if (v8) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v35[1] == 0;
    }
    if (v10)
    {
      uint64_t v3 = v8;
      *((unsigned char *)this + 161) = 1;
    }
    else
    {
      unsigned int v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      unsigned int v30 = 0;
      uint64_t v15 = 0;
      uint64_t v33 = 0;
      memset(&v32.mFormatID, 0, 32);
      while (1)
      {
        v32.mSampleRate = 0.0;
        v34[0] = 0;
        v17.n128_f64[0] = EC3StreamParser::AssessPacketHeader((EC3StreamParser *)(*((void *)this + 22) + 12 * v13), (const void *)v7, v35, (unsigned int *)v34, (BOOL *)&v32.mFormatID, (AudioStreamBasicDescription *)((char *)&v32.mSampleRate + 4), (unsigned int *)&v32, v9);
        uint64_t v3 = v16;
        if (a3 && !v16)
        {
          if (v12 == *((_DWORD *)this + 47)) {
            *((_DWORD *)this + 48) = LODWORD(v32.mSampleRate);
          }
          uint64_t v3 = EC3StreamParser::AssessPacket(*((char ***)this + 21), (unsigned __int8 *)(*((void *)this + 22) + 12 * v13), v7, v13, (unsigned int *)buf, &v31);
        }
        uint64_t v18 = v35[0];
        BOOL v20 = v3 == -2 && v35[0] != 0;
        if (v3 && !v20)
        {
          if (kAFSubSytemEC3)
          {
            uint64_t v26 = *(NSObject **)kAFSubSytemEC3;
            if (!*(void *)kAFSubSytemEC3) {
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t v26 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
            *(_WORD *)int v37 = 1024;
            *(_DWORD *)&v37[2] = 470;
            __int16 v38 = 2048;
            AudioUnitScope v39 = this;
            __int16 v40 = 1024;
            int v41 = v3;
            _os_log_impl(&dword_18FEC0000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EC3AudioFile(%p): AssessPacketHeader failed, err = %d", buf, 0x22u);
          }
          goto LABEL_16;
        }
        if (!(v13 | v34[0])) {
          goto LABEL_57;
        }
        if (v34[0] && v13)
        {
          uint64_t v3 = 0;
          goto LABEL_65;
        }
        int v21 = *((_DWORD *)this + 21);
        if (v21 == 1633889587)
        {
          *((void *)this + v12 + 25) += v35[0];
          uint64_t v14 = (v18 + v14);
        }
        else
        {
          if (!v34[0] && HIDWORD(v32.mSampleRate) == 1 && ++v12 >= 8)
          {
LABEL_57:
            uint64_t v3 = 0xFFFFFFFFLL;
            goto LABEL_16;
          }
          *((void *)this + v12 + 25) += v35[0];
          unsigned int v22 = *((_DWORD *)this + 47);
          if (v12 >= v22)
          {
            if (v12 == v22) {
              int v23 = v18;
            }
            else {
              int v23 = 0;
            }
            uint64_t v14 = (v23 + v14);
          }
          else
          {
            v30 += v18;
          }
        }
        v15 += v18;
        if (*((unsigned char *)this + 161) || v15 + a2 >= *(uint64_t *)&v34[1])
        {
          uint64_t v3 = 0;
          ++v13;
          goto LABEL_64;
        }
        if (v13)
        {
          if (v13 - 71 < 0xFFFFFFB8) {
            goto LABEL_62;
          }
        }
        else if (v21 == 1633889587)
        {
LABEL_62:
          uint64_t v3 = 0;
          ++v13;
          goto LABEL_65;
        }
        uint64_t v24 = (*(uint64_t (**)(void, void, __n128))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v17);
        if (v24 || v35[1] == 0) {
          break;
        }
        ++v13;
      }
      uint64_t v3 = v24;
      ++v13;
LABEL_64:
      *((unsigned char *)this + 161) = 1;
LABEL_65:
      if (!v3 && v14)
      {
        uint64_t v27 = a2 + v30;
        if (v27 + v14 > *(uint64_t *)&v34[1]) {
          return 0;
        }
        *(void *)AudioStreamBasicDescription buf = v27 - *((void *)this + 9);
        *(_DWORD *)&uint8_t buf[8] = 0;
        *(_DWORD *)int v37 = v14;
        AudioFileObject::AppendPacket(this, (const AudioStreamPacketDescription *)buf);
        if (v14 > (*(unsigned int (**)(EC3AudioFile *))(*(void *)this + 632))(this)) {
          (*(void (**)(EC3AudioFile *, uint64_t))(*(void *)this + 648))(this, v14);
        }
        if (a3)
        {
          (*(void (**)(EC3AudioFile *, AudioFormatID *))(*(void *)this + 176))(this, &v32.mFormatID);
          BOOL v29 = v32.mBytesPerPacket == 1633889587 && v13 > 1;
          *((unsigned char *)this + 160) = v29;
          uint64_t v3 = EC3AudioFile::ConstructMagicCookie(this);
        }
        else
        {
          uint64_t v3 = 0;
        }
        *((void *)this + 33) = v15 + a2;
      }
    }
    if (v3) {
LABEL_16:
    }
      *((unsigned char *)this + 161) = 1;
  }
  return v3;
}

void EC3StreamParser::~EC3StreamParser(EC3StreamParser *this)
{
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>>>::destroy(*((void **)this + 2));
}

void std::__tree<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t EC3AudioFile::ConstructMagicCookie(EC3AudioFile *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*((void *)this + 15);
  if (v2 && v2[3] > 0)
  {
    unsigned int v30 = 0;
    CompressedPacketTable::operator[]((uint64_t)buf, v2, 0);
    size_t v3 = *(unsigned int *)size;
    uint64_t v4 = (unsigned __int8 *)malloc_type_malloc(*(unsigned int *)size, 0x2C8E6D5CuLL);
    uint64_t v5 = v4;
    if (v3 && !v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      char v25 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v4, v3);
    uint64_t v6 = *((void *)this + 13);
    uint64_t v7 = *((void *)this + 9);
    CompressedPacketTable::operator[]((uint64_t)buf, v2, 0);
    uint64_t v8 = *(void *)buf;
    CompressedPacketTable::operator[]((uint64_t)v29, v2, 0);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, unsigned __int8 *, unsigned int *))(*(void *)v6 + 48))(v6, 0, v8 + v7, v29[3], v5, &v30);
    if (v9) {
      goto LABEL_46;
    }
    free(*((void **)this + 18));
    *((void *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    int v10 = *((_DWORD *)this + 8);
    unsigned int v28 = 45;
    v29[0] = 11;
    if (v10 == 1633889587) {
      unsigned int v11 = 11;
    }
    else {
      unsigned int v11 = 0;
    }
    BOOL v12 = v10 != 1700998451 && *((unsigned char *)this + 160) == 0;
    int v13 = !v12;
    if (v12) {
      size_t v14 = v11;
    }
    else {
      size_t v14 = v11 + 45;
    }
    uint64_t v15 = (unsigned __int8 *)malloc_type_malloc(v14, 0x2C8E6D5CuLL);
    uint64_t v16 = v15;
    if (!v15 && (v10 == 1633889587) | v13)
    {
      uint64_t v26 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v27 = std::bad_alloc::bad_alloc(v26);
    }
    bzero(v15, v14);
    *((void *)this + 18) = v16;
    if (v10 == 1633889587)
    {
      uint64_t v17 = ConvertAC3HeaderToAC3MP4Cookie(v5, v30, v16, v29);
      unsigned int v18 = v29[0];
      if (v17)
      {
        uint64_t v9 = v17;
        goto LABEL_35;
      }
      uint64_t v20 = v29[0];
    }
    else
    {
      unsigned int v18 = 0;
      uint64_t v20 = 0;
    }
    if (v10 == 1700998451 || *((unsigned char *)this + 160))
    {
      uint64_t v9 = ConvertEAC3HeaderToEAC3MP4Cookie(v5, v30, (unsigned __int8 *)(*((void *)this + 18) + v20), &v28);
      if (v9)
      {
LABEL_36:
        if (kAFSubSytemEC3)
        {
          int v21 = *(NSObject **)kAFSubSytemEC3;
          if (!*(void *)kAFSubSytemEC3)
          {
LABEL_44:
            free(*((void **)this + 18));
            unsigned int v22 = 0;
            *((void *)this + 18) = 0;
            goto LABEL_45;
          }
        }
        else
        {
          int v21 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
          *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
          *(_WORD *)unsigned int size = 1024;
          *(_DWORD *)&size[2] = 636;
          __int16 size_6 = 2048;
          uint64_t v34 = this;
          __int16 v35 = 1024;
          int v36 = v9;
          _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EC3AudioFile(%p): got a bad magic cookie, err = %d!", buf, 0x22u);
        }
        goto LABEL_44;
      }
LABEL_40:
      unsigned int v22 = v28 + v18;
LABEL_45:
      *((_DWORD *)this + 38) = v22;
LABEL_46:
      free(v5);
      return v9;
    }
    uint64_t v9 = 0;
LABEL_35:
    unsigned int v28 = 0;
    if (v9) {
      goto LABEL_36;
    }
    goto LABEL_40;
  }
  if (!kAFSubSytemEC3)
  {
    unint64_t v19 = MEMORY[0x1E4F14500];
LABEL_27:
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
      *(_WORD *)unsigned int size = 1024;
      *(_DWORD *)&size[2] = 588;
      __int16 size_6 = 2048;
      uint64_t v34 = this;
      _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EC3AudioFile(%p): cannot find magic cookie, packet data not available!", buf, 0x1Cu);
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v19 = *(NSObject **)kAFSubSytemEC3;
  if (*(void *)kAFSubSytemEC3) {
    goto LABEL_27;
  }
  return 0xFFFFFFFFLL;
}

uint64_t AudioFileObject::SetAlbumArtwork(AudioFileObject *this, const __CFData *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetAlbumArtwork(AudioFileObject *this, const __CFData **a2)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::SetSourceBitDepth(AudioFileObject *this)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetSourceBitDepth(AudioFileObject *this, int *a2)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t EC3AudioFile::ScanForPackets(EC3AudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  if (!*((unsigned char *)this + 161))
  {
    uint64_t v5 = a3;
    uint64_t v6 = a2;
    if (!a3) {
      uint64_t v5 = (DataSource *)*((void *)this + 13);
    }
    uint64_t v8 = *((void *)this + 15);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = *(void *)(v8 + 24);
    if (a2 == -1 || v9 < a2)
    {
      uint64_t FPosForNextSyncWord = (*(uint64_t (**)(DataSource *, uint64_t *))(*(void *)v5 + 24))(v5, &v17);
      if (FPosForNextSyncWord)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          uint64_t v20 = "EC3AudioFile.cpp";
          __int16 v21 = 1024;
          int v22 = 1220;
          unsigned int v11 = MEMORY[0x1E4F14500];
          BOOL v12 = "%25s:%-5d  GetSize failed";
LABEL_11:
          _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
        }
      }
      else
      {
        uint64_t v13 = 264;
        if (!v9) {
          uint64_t v13 = 72;
        }
        uint64_t v18 = *(void *)((char *)this + v13);
        if (v18 >= v17)
        {
LABEL_30:
          uint64_t FPosForNextSyncWord = 0;
          *((unsigned char *)this + 161) = a4;
          return FPosForNextSyncWord;
        }
        if (v6 != -1)
        {
          uint64_t v14 = *((void *)this + 15);
          if (v14) {
            uint64_t v14 = *(void *)(v14 + 24);
          }
          uint64_t v6 = v6 - v14 + 1;
        }
        while (1)
        {
          uint64_t FPosForNextSyncWord = EC3AudioFile::GetFPosForNextSyncWord(this, &v18, &v16, v5);
          if (FPosForNextSyncWord) {
            break;
          }
          uint64_t FPosForNextSyncWord = EC3AudioFile::ParseOneCycle(this, v18, 0);
          if (FPosForNextSyncWord)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              break;
            }
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            uint64_t v20 = "EC3AudioFile.cpp";
            __int16 v21 = 1024;
            int v22 = 1247;
            unsigned int v11 = MEMORY[0x1E4F14500];
            BOOL v12 = "%25s:%-5d  EC3AudioFile::ScanForPackets : ParseOneCycle failed";
            goto LABEL_11;
          }
          uint64_t v18 = *((void *)this + 33);
          if (v6 == -1)
          {
            if (*((unsigned char *)this + 161)) {
              return 0;
            }
          }
          else if (!--v6)
          {
            return 0;
          }
        }
      }
      if (FPosForNextSyncWord != -40)
      {
        if (FPosForNextSyncWord != -39) {
          return FPosForNextSyncWord;
        }
        goto LABEL_30;
      }
    }
  }
  return 0;
}

uint64_t AudioFileObject::SetMaxNumDependentPackets(uint64_t this, int a2)
{
  *(_DWORD *)(this + 128) = a2;
  return this;
}

uint64_t AudioFileObject::GetMaxNumDependentPackets(AudioFileObject *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t AudioFileObject::GetPacketSizeUpperBound(AudioFileObject *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 632))();
}

uint64_t AudioFileObject::FindMaximumPacketSize(AudioFileObject *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t AudioFileObject::GetMaximumPacketSize(AudioFileObject *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t AudioFileObject::IsValidFilePosition(AudioFileObject *this)
{
  return 0;
}

BOOL EC3AudioFile::IsDataFormatSupported(EC3AudioFile *this, const AudioStreamBasicDescription *a2)
{
  return (a2->mFormatID & 0xFBFFFFFF) == 1633889587;
}

uint64_t AudioFileObject::GetLyrics(AudioFileObject *this, const __CFString **a2)
{
  return 1886681407;
}

uint64_t EC3AudioFile::GetEstimatedDuration(EC3AudioFile *this, double *a2)
{
  double v4 = *((double *)this + 3);
  uint64_t v5 = *((unsigned int *)this + 11);
  if (*((unsigned char *)this + 161))
  {
    if (v5) {
      double v6 = (double)((*(uint64_t (**)(EC3AudioFile *))(*(void *)this + 240))(this) * v5) / v4;
    }
    else {
      double v6 = 0.0;
    }
    uint64_t result = 0;
  }
  else
  {
    *a2 = 0.0;
    uint64_t v7 = *((void *)this + 13);
    uint64_t v9 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 24))(v7, &v9);
    if (result) {
      return result;
    }
    double v6 = (double)(unint64_t)(v9 / *(unsigned int *)(*((void *)this + 21) + 36) * v5) / v4;
  }
  *a2 = v6;
  return result;
}

uint64_t AudioFileObject::GenerateLoudnessInfo(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetAseSize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetLoudnessInfoSize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  return 1886681407;
}

uint64_t AudioFileObject::SetLoudnessInfo(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetLoudnessInfoFromSoundCheckDictionary(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetSoundCheckDictionaryFromLoudnessInfo(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::SetAseBoxes(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetAseBoxes(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t EC3AudioFile::GetLoudnessInfo(EC3AudioFile *this, CACFDictionary *a2)
{
  if (*((_DWORD *)this + 48) < 0xFFFFFFE1) {
    return 0xFFFFFFFFLL;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v6 = 257;
  CACFDictionary::AddFloat32(a2, @"dialnorm", (float)*((int *)this + 48));
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return 0;
}

void sub_18FFCF34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AudioFileObject::SetSoundCheckDictionary(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetSoundCheckDictionarySize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  return 1886681407;
}

uint64_t EC3AudioFile::GetInfoDictionary(EC3AudioFile *this, CACFDictionary *a2)
{
  double v5 = 0.0;
  size_t v3 = (AudioFileObject *)(*(uint64_t (**)(EC3AudioFile *, double *))(*(void *)this + 544))(this, &v5);
  if (v3) {
    return 1886681407;
  }
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

double EC3AudioFile::GetChannelLayout(EC3AudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  if (a2)
  {
    if (*a2 >= 0x20)
    {
      double result = 0.0;
      *(_OWORD *)&a3->int mChannelLayoutTag = 0u;
      *(_OWORD *)&a3->mChannelDescriptions[0].AudioChannelFlags mChannelFlags = 0u;
      a3->int mChannelLayoutTag = *((_DWORD *)this + 39);
    }
  }
  return result;
}

uint64_t EC3AudioFile::GetChannelLayoutSize(EC3AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2) {
    *a2 = 32;
  }
  if (a3) {
    *a3 = 0;
  }
  return 0;
}

uint64_t EC3AudioFile::GetMagicCookieData(EC3AudioFile *this, unsigned int *a2, void *__dst)
{
  size_t v3 = *((unsigned int *)this + 38);
  if (*a2 < v3) {
    return 561211770;
  }
  uint64_t result = 2003334207;
  if (__dst)
  {
    uint64_t v7 = (const void *)*((void *)this + 18);
    if (v7)
    {
      memcpy(__dst, v7, v3);
      uint64_t result = 0;
      *a2 = *((_DWORD *)this + 38);
    }
  }
  return result;
}

uint64_t EC3AudioFile::GetMagicCookieDataSize(EC3AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (a2) {
    *a2 = *((_DWORD *)this + 38);
  }
  return 0;
}

uint64_t EC3AudioFile::GetBitRate(EC3AudioFile *this, unsigned int *a2)
{
  if (*((_DWORD *)this + 21) != 1633889587)
  {
    if (!a2) {
      return 2003334207;
    }
    unsigned int v5 = *((_DWORD *)this + 10);
    uint64_t v6 = *((unsigned int *)this + 11);
    double v7 = *((double *)this + 3);
    if (v5) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t result = 0;
      double v10 = (double)v5 * 8.0 * v7 / (double)v6;
LABEL_20:
      *a2 = v10;
      return result;
    }
    uint64_t v9 = (*(uint64_t (**)(EC3AudioFile *))(*(void *)this + 240))(this);
    while (!*((unsigned char *)this + 161))
      EC3AudioFile::ParseOneCycle(this, *((void *)this + 33), 0);
    uint64_t v11 = *((void *)this + *((unsigned int *)this + 47) + 25);
    if (v6)
    {
      uint64_t v12 = v9 * v6;
    }
    else
    {
      uint64_t v13 = (uint64_t *)*((void *)this + 15);
      if (!v13) {
        return 1886681407;
      }
      if (v13[3] != v9) {
        return 1685348671;
      }
      if (v9 < 1) {
        goto LABEL_27;
      }
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      do
      {
        CompressedPacketTable::operator[]((uint64_t)v15, v13, v14);
        v12 += v16;
        ++v14;
      }
      while (v9 != v14);
    }
    if (v12 && v7 != 0.0)
    {
      uint64_t result = 0;
      double v10 = (double)v11 * 8.0 / ((double)v12 / v7);
      goto LABEL_20;
    }
LABEL_27:
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  return AudioFileObject::GetBitRate(this, a2);
}

uint64_t AudioFileObject::RestrictsRandomAccess(AudioFileObject *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t EC3AudioFile::GetNumPackets(EC3AudioFile *this)
{
  while (!*((unsigned char *)this + 161))
    EC3AudioFile::ParseOneCycle(this, *((void *)this + 33), 0);
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    return *(void *)(v2 + 24);
  }
  else {
    return 0;
  }
}

uint64_t EC3AudioFile::GetNumBytes(EC3AudioFile *this)
{
  uint64_t v4 = 0;
  int v2 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v4);
  uint64_t result = v4;
  if (!v2) {
    return v4 - *((void *)this + 9);
  }
  return result;
}

uint64_t EC3AudioFile::UpdateSize(EC3AudioFile *this)
{
  return 0;
}

uint64_t EC3AudioFile::GetFormatList(EC3AudioFile *this, UInt32 *ioPropertyDataSize, AudioFormatListItem *outPropertyData)
{
  long long v8 = *(_OWORD *)((char *)this + 24);
  long long v9 = *(_OWORD *)((char *)this + 40);
  uint64_t v10 = *((void *)this + 7);
  inSpecifier[0] = v8;
  inSpecifier[1] = v9;
  uint64_t v6 = *((void *)this + 18);
  uint64_t v12 = v10;
  uint64_t v13 = v6;
  int v14 = *((_DWORD *)this + 38);
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, ioPropertyDataSize, outPropertyData))
  {
    *(_OWORD *)&outPropertyData->mASBD.mSampleRate = v8;
    *(_OWORD *)&outPropertyData->mASBD.mBytesPerPacket = v9;
    *(void *)&outPropertyData->mASBD.mBitsPerChannel = v10;
    outPropertyData->mASBD.mFramesPerPacket = *((_DWORD *)this + 11);
    outPropertyData->int mChannelLayoutTag = *((_DWORD *)this + 39);
    *UInt32 ioPropertyDataSize = 48;
  }
  return 0;
}

uint64_t EC3AudioFile::GetFormatListInfo(EC3AudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  long long v5 = *(_OWORD *)((char *)this + 40);
  v8[0] = *(_OWORD *)((char *)this + 24);
  v8[1] = v5;
  uint64_t v6 = *((void *)this + 18);
  uint64_t v9 = *((void *)this + 7);
  uint64_t v10 = v6;
  int v11 = *((_DWORD *)this + 38);
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t EC3AudioFile::SetProperty(EC3AudioFile *this, int a2, unsigned int a3, uint64_t *a4)
{
  if (a2 == 1969321067)
  {
    uint64_t result = 1886681407;
    if ((*((unsigned char *)this + 100) & 2) == 0 && *((_DWORD *)this + 21) != 1633889587)
    {
      if (a3 >= 4)
      {
        int v6 = *(_DWORD *)a4;
        if (*(_DWORD *)a4 >= *(_DWORD *)(*((void *)this + 21) + 4))
        {
          return 2003334207;
        }
        else if (v6 == *((_DWORD *)this + 47))
        {
          return 0;
        }
        else
        {
          *((unsigned char *)this + 161) = 0;
          AudioFileObject::DeletePacketTable(this);
          *((_DWORD *)this + 47) = v6;
          uint64_t v7 = *((void *)this + 9);
          return EC3AudioFile::ParseOneCycle(this, v7, 1);
        }
      }
      else
      {
        return 561211770;
      }
    }
  }
  else
  {
    return AudioFileObject::SetProperty(this, a2, a3, a4);
  }
  return result;
}

uint64_t EC3AudioFile::GetProperty(EC3AudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  if (a2 > 1886090593)
  {
    if (a2 == 1886090594) {
      goto LABEL_5;
    }
    if (a2 != 1969321067)
    {
      if (a2 == 1886616165)
      {
LABEL_5:
        if (*a3 == 4)
        {
          if (!*((_DWORD *)this + 10) && !*((unsigned char *)this + 161))
          {
            uint64_t result = (*(uint64_t (**)(EC3AudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
            if (result) {
              return result;
            }
          }
          goto LABEL_17;
        }
        return 561211770;
      }
LABEL_17:
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    }
    if (*((_DWORD *)this + 21) == 1633889587) {
      return 1886681407;
    }
    if (*a3 < 4) {
      return 561211770;
    }
    uint64_t result = 0;
    int v11 = *((_DWORD *)this + 47);
LABEL_28:
    *(_DWORD *)a4 = v11;
    return result;
  }
  if (a2 == 1635017588)
  {
    if (*a3 < 4) {
      return 561211770;
    }
    int v11 = *(_DWORD *)(*((void *)this + 21) + 4);
    if (!v11) {
      return 2003334207;
    }
    uint64_t result = 0;
    goto LABEL_28;
  }
  if (a2 != 1718383476) {
    goto LABEL_17;
  }
  uint64_t result = AudioFileObject::GetProperty(this, 1718383476, a3, a4);
  if (!result)
  {
    if (*a3 >= 0x30)
    {
      unint64_t v9 = *a3 / 0x30uLL;
      uint64_t v10 = (_DWORD *)a4 + 5;
      do
      {
        *uint64_t v10 = *((_DWORD *)this + 11);
        v10 += 12;
        --v9;
      }
      while (v9);
    }
    return 0;
  }
  return result;
}

uint64_t EC3AudioFile::GetPropertyInfo(EC3AudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 1969321067)
  {
    if (*((_DWORD *)this + 21) == 1633889587) {
      return 1886681407;
    }
    if (a3) {
      *a3 = 4;
    }
    if (a4)
    {
      uint64_t result = 0;
      *a4 = 1;
      return result;
    }
  }
  else
  {
    if (a2 != 1635017588) {
      return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
    }
    if (a3) {
      *a3 = 4;
    }
    if (a4)
    {
      uint64_t result = 0;
      *a4 = 0;
      return result;
    }
  }
  return 0;
}

uint64_t EC3AudioFile::WritePackets(uint64_t **this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = ((uint64_t (*)(uint64_t **))(*this)[30])(this);
  int v24 = 0;
  if ((a5 & 0x8000000000000000) == 0 && v12 != a5)
  {
    uint64_t v13 = 1885563711;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 826;
      int v14 = MEMORY[0x1E4F14500];
      uint64_t v15 = "%25s:%-5d  Invalid starting packet";
LABEL_13:
      _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
      return v13;
    }
    return v13;
  }
  if (!a4)
  {
    uint64_t v13 = 1885563711;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 827;
      int v14 = MEMORY[0x1E4F14500];
      uint64_t v15 = "%25s:%-5d  Packet Descriptions were not provided";
      goto LABEL_13;
    }
    return v13;
  }
  unsigned int v16 = this[15];
  if (!v16) {
    operator new();
  }
  if (!v16[3])
  {
    SInt64 v17 = 0;
LABEL_17:
    v25.mStartOffset = v17;
    if (*a6)
    {
      unint64_t v18 = 0;
      unint64_t v19 = this[9];
      p_UInt32 mVariableFramesInPacket = &a4->mVariableFramesInPacket;
      do
      {
        __int16 v21 = &a7[*((void *)p_mVariableFramesInPacket - 1)];
        uint64_t v22 = p_mVariableFramesInPacket[1];
        v25.UInt32 mVariableFramesInPacket = *p_mVariableFramesInPacket;
        v25.mDataByteSize = v22;
        uint64_t v13 = (*(uint64_t (**)(uint64_t *, void, SInt64, uint64_t, char *, int *))(*this[13] + 56))(this[13], 0, (SInt64)v19 + v17, v22, v21, &v24);
        AudioFileObject::AppendPacket((AudioFileObject *)this, &v25);
        v17 += v22;
        v25.mStartOffset = v17;
        unint64_t v19 = this[9];
        this[33] = (uint64_t *)((char *)v19 + v17);
        ++v18;
        p_mVariableFramesInPacket += 4;
      }
      while (v18 < *a6);
    }
    else
    {
      LODWORD(v18) = 0;
      uint64_t v13 = 0;
    }
    *a6 = v18;
    return v13;
  }
  if (v12 <= a5)
  {
    CompressedPacketTable::operator[]((uint64_t)buf, v16, v12 - 1);
    AudioStreamPacketDescription v25 = *(AudioStreamPacketDescription *)buf;
    SInt64 v17 = *(void *)buf + *(unsigned int *)&buf[12];
    goto LABEL_17;
  }
  uint64_t v13 = 1885563711;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 840;
    int v14 = MEMORY[0x1E4F14500];
    uint64_t v15 = "%25s:%-5d  Invalid starting packet";
    goto LABEL_13;
  }
  return v13;
}

uint64_t EC3AudioFile::ReadPackets(EC3AudioFile *this, unsigned int a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a4) {
    BOOL v7 = a7 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = v7;
  unint64_t v9 = *a6;
  if (v9)
  {
    if (a3) {
      *a3 = 0;
    }
    *a6 = 0;
    uint64_t v15 = (uint64_t *)*((void *)this + 15);
    if (v15)
    {
      unint64_t v16 = v15[3];
      if ((uint64_t)v16 >= a5)
      {
        unint64_t v21 = v9 + a5;
        do
        {
          if (v16 >= v21) {
            break;
          }
          uint64_t v22 = EC3AudioFile::ParseOneCycle(this, *((void *)this + 33), 0);
          uint64_t v23 = v22;
          unint64_t v16 = *((void *)this + 15);
          if (v16) {
            unint64_t v16 = *(void *)(v16 + 24);
          }
          if (v22) {
            goto LABEL_27;
          }
        }
        while (!*((unsigned char *)this + 161));
        uint64_t v23 = 0;
LABEL_27:
        if (v21 <= v16) {
          unint64_t v24 = v9;
        }
        else {
          unint64_t v24 = v16 - a5;
        }
        unint64_t v41 = v24;
        if (v24)
        {
          if (v8)
          {
            *(_DWORD *)AudioStreamBasicDescription buf = v24;
            AudioFileObject::GetPacketDescriptions(this, a5, (unsigned int *)buf, a4);
            LODWORD(v25) = 0;
            LODWORD(v41) = *(_DWORD *)buf;
          }
          else
          {
            unsigned int v26 = v24 + a5;
            if (a5 >= (int)v41 + (int)a5)
            {
              unsigned int v27 = 0;
            }
            else
            {
              unsigned int v27 = 0;
              uint64_t v28 = a5;
              uint64_t v29 = v26;
              do
              {
                CompressedPacketTable::operator[]((uint64_t)buf, v15, v28);
                v27 += v44[0];
                ++v28;
              }
              while (v29 != v28);
            }
            unsigned int v42 = v27;
            CompressedPacketTable::operator[]((uint64_t)buf, v15, a5);
            uint64_t v30 = (*(uint64_t (**)(EC3AudioFile *, void, void, unsigned int *, void *))(*(void *)this + 72))(this, a2, *(void *)buf, &v42, a7);
            uint64_t v17 = v30;
            if (v30 != -39 && v30 != 0) {
              return v17;
            }
            uint64_t v25 = v42;
            if (a4)
            {
              uint64_t v32 = 0;
              SInt64 v33 = 0;
              unsigned int v34 = 1;
              unsigned int v39 = v42;
              do
              {
                CompressedPacketTable::operator[]((uint64_t)buf, v15, v32 + a5);
                if (v25 >= v44[0])
                {
                  CompressedPacketTable::operator[]((uint64_t)buf, v15, v32 + a5);
                  uint64_t v35 = v44[0];
                }
                else
                {
                  uint64_t v35 = v25 & ~(v25 >> 63);
                }
                int v36 = &a4[v32];
                v36->mStartOffset = v33;
                v36->UInt32 mVariableFramesInPacket = 0;
                v36->mDataByteSize = v35;
                v33 += v35;
                v25 -= v35;
                uint64_t v32 = v34;
              }
              while (v41 > v34++);
              uint64_t v23 = 0;
              if (v17)
              {
                LODWORD(v25) = v39;
                if (v17 != -39) {
                  return v17;
                }
              }
              else
              {
                LODWORD(v25) = v39;
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
          }
          if (a3) {
            *a3 = v25;
          }
          *a6 = v41;
          return v23;
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
            LOWORD(v44[0]) = 1024;
            *(_DWORD *)((char *)v44 + 2) = 709;
            _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  EOF", buf, 0x12u);
          }
          return 4294967257;
        }
      }
      else
      {
        uint64_t v17 = 1885563711;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
          LOWORD(v44[0]) = 1024;
          *(_DWORD *)((char *)v44 + 2) = 696;
          unint64_t v18 = MEMORY[0x1E4F14500];
          unint64_t v19 = "%25s:%-5d  Invalid starting packet index";
LABEL_18:
          _os_log_impl(&dword_18FEC0000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x12u);
        }
      }
    }
    else
    {
      uint64_t v17 = 1685348671;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
        LOWORD(v44[0]) = 1024;
        *(_DWORD *)((char *)v44 + 2) = 692;
        unint64_t v18 = MEMORY[0x1E4F14500];
        unint64_t v19 = "%25s:%-5d  Could not get PacketTable";
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v17 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "EC3AudioFile.cpp";
      LOWORD(v44[0]) = 1024;
      *(_DWORD *)((char *)v44 + 2) = 683;
      unint64_t v18 = MEMORY[0x1E4F14500];
      unint64_t v19 = "%25s:%-5d  invalid num packets parameter";
      goto LABEL_18;
    }
  }
  return v17;
}

uint64_t EC3AudioFile::InitializeDataSource(EC3AudioFile *this, const AudioStreamBasicDescription *a2)
{
  if (a2->mFormatID == *((_DWORD *)this + 21)) {
    return 0;
  }
  else {
    return 1718449215;
  }
}

uint64_t EC3AudioFile::OpenFromDataSource(EC3AudioFile *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*(uint64_t (**)(EC3AudioFile *))(*(void *)this + 728))(this);
  if (v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    uint64_t v4 = "EC3AudioFile.cpp";
    __int16 v5 = 1024;
    int v6 = 319;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  EC3AudioFile::ParseAudioFile failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

uint64_t EC3AudioFile::Create(EC3AudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((_DWORD *)this + 21);
  if (a3->mFormatID != v4)
  {
    if (kAFSubSytemEC3)
    {
      int v6 = *(NSObject **)kAFSubSytemEC3;
      if (!*(void *)kAFSubSytemEC3) {
        return 1718449215;
      }
    }
    else
    {
      int v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v8, v4);
      CAX4CCString::CAX4CCString((CAX4CCString *)v7, a3->mFormatID);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      uint64_t v10 = "EC3AudioFile.cpp";
      __int16 v11 = 1024;
      int v12 = 346;
      __int16 v13 = 2080;
      int v14 = v8;
      __int16 v15 = 2080;
      unint64_t v16 = v7;
      _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: cannot create file, mismatch in formatID (expected = %s, specified = %s)", buf, 0x26u);
    }
    return 1718449215;
  }
  return AudioFileObject::Create(this, a2, a3);
}

void EC3AudioFile::~EC3AudioFile(EC3AudioFile *this)
{
  EC3AudioFile::~EC3AudioFile(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  EC3StreamParser *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8D410;
  int v2 = (void *)*((void *)this + 22);
  if (v2) {
    free(v2);
  }
  int v3 = (EC3StreamParser *)*((void *)this + 21);
  if (v3)
  {
    EC3StreamParser::~EC3StreamParser(v3);
    MEMORY[0x192FC8940]();
    *((void *)this + 21) = 0;
  }
  unsigned int v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    free(v4);
    *((void *)this + 18) = 0;
  }
  AudioFileObject::~AudioFileObject(this);
}

void EC3AudioFormat::NewStream(EC3AudioFormat *this)
{
}

void sub_18FFD06B0(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10B1C404537FDE6);
  _Unwind_Resume(a1);
}

void EC3AudioFormat::New(EC3AudioFormat *this)
{
}

void sub_18FFD0824(_Unwind_Exception *a1)
{
  AudioFileObject::~AudioFileObject(v1);
  MEMORY[0x192FC8940]();
  _Unwind_Resume(a1);
}

uint64_t AudioFileFormatBase::AsAudioFileFormatComponent(AudioFileFormatBase *this)
{
  return 0;
}

uint64_t EC3AudioFormat::GetHFSCodes(EC3AudioFormat *this, unsigned int *a2, void *__dst)
{
  if (*((_DWORD *)this + 2) == 1633889587) {
    int v3 = 1633889587;
  }
  else {
    int v3 = 1700998451;
  }
  int __src = v3;
  if (*a2 >= 4) {
    size_t v4 = 4;
  }
  else {
    size_t v4 = *a2 & 0xFFFFFFFC;
  }
  *a2 = v4;
  if (__dst) {
    memcpy(__dst, &__src, v4);
  }
  return 0;
}

uint64_t EC3AudioFormat::GetAvailableStreamDescriptions(EC3AudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  if ((a2 | 0x4000000) == 0x65632D33)
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    DWORD2(v6[0]) = a2;
    if (*a3 >= 0x28) {
      size_t v4 = 40;
    }
    else {
      size_t v4 = 0;
    }
    *a3 = v4;
    if (__dst) {
      memcpy(__dst, v6, v4);
    }
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t EC3AudioFormat::GetAvailableFormatIDs(EC3AudioFormat *this, unsigned int *a2, void *__dst)
{
  if (*((_DWORD *)this + 2) == 1633889587) {
    int v3 = 1633889587;
  }
  else {
    int v3 = 1700998451;
  }
  int __src = v3;
  if (*a2 >= 4) {
    size_t v4 = 4;
  }
  else {
    size_t v4 = *a2 & 0xFFFFFFFC;
  }
  *a2 = v4;
  if (__dst) {
    memcpy(__dst, &__src, v4);
  }
  return 0;
}

void EC3AudioFormat::GetFileTypeName(EC3AudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  if (*((_DWORD *)this + 2) == 1633889587) {
    CFStringRef v4 = @"AC3";
  }
  else {
    CFStringRef v4 = @"EC3";
  }
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

const __CFArray *EC3AudioFormat::GetMIMETypes(EC3AudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 2);
  BOOL v4 = v3 == 1633889587;
  if (v3 == 1633889587) {
    char v5 = @"audio/ac3";
  }
  else {
    char v5 = @"audio/eac3";
  }
  int v6 = @"audio/x-eac3";
  if (v4) {
    int v6 = @"audio/x-ac3";
  }
  values[0] = v5;
  values[1] = v6;
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *EC3AudioFormat::GetUTIs(EC3AudioFormat *this, const __CFArray **a2)
{
  v5[1] = *(const void **)MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) == 1633889587) {
    int v3 = @"public.ac3-audio";
  }
  else {
    int v3 = @"public.enhanced-ac3-audio";
  }
  v5[0] = v3;
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *EC3AudioFormat::GetExtensions(EC3AudioFormat *this, const __CFArray **a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 2);
  if (v3 == 1633889587) {
    CFIndex v4 = 1;
  }
  else {
    CFIndex v4 = 2;
  }
  MEMORY[0x1F4188790](this);
  int v6 = (char *)v10 - v5;
  bzero((char *)v10 - v5, v7);
  if (v3 == 1633889587)
  {
    int v8 = @"ac3";
  }
  else
  {
    *((void *)v6 + 1) = @"eac3";
    int v8 = @"ec3";
  }
  *(void *)int v6 = v8;
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v6, v4, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

uint64_t AudioFileFormatBase::HasResourceFork(AudioFileFormatBase *this)
{
  return 0;
}

uint64_t AudioFileFormatBase::CanWrite(AudioFileFormatBase *this)
{
  return 1;
}

uint64_t AudioFileFormatBase::CanRead(AudioFileFormatBase *this)
{
  return 1;
}

uint64_t AudioFileFormatBase::ResourceIsThisFormat(AudioFileFormatBase *this, const FSRef *a2)
{
  return 0;
}

uint64_t EC3AudioFormat::FileDataIsThisFormat(EC3AudioFormat *this, unsigned int a2, const void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 2);
  if (v3 == 1633889587) {
    uint64_t v4 = 10;
  }
  else {
    uint64_t v4 = 12;
  }
  if (v4 > a2) {
    return 0xFFFFFFFFLL;
  }
  char v14 = 0;
  uint64_t v5 = a2;
  __int16 v13 = &unk_1EDF91E60;
  uint64_t v15 = a2;
  unint64_t v16 = a3;
  uint64_t v17 = 0;
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (a2 >= (uint64_t)v4) {
    uint64_t v5 = v4;
  }
  uint64_t v18 = v5;
  unint64_t v19 = 0;
  int v20 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v19, 0x28uLL, 1);
  int v6 = v19;
  if (!v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&long long v22 = "EC3AudioFile.cpp";
      WORD4(v22) = 1024;
      *(_DWORD *)((char *)&v22 + 10) = 56;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  couldn't make space", buf, 0x12u);
    }
    return 0;
  }
  int v20 = 0;
  (*((void (**)(void **, void, void, uint64_t, char *, int *))v13 + 6))(&v13, 0, 0, 40, v19, &v20);
  if (v20 != 40)
  {
    uint64_t v11 = 0;
    goto LABEL_34;
  }
  if (v3 == 1633889587) {
    uint64_t v7 = 31;
  }
  else {
    uint64_t v7 = 29;
  }
  if (v3 == 1633889587) {
    size_t v8 = 10;
  }
  else {
    size_t v8 = 12;
  }
  unsigned int v9 = 40;
  uint64_t v10 = v6;
  while (1)
  {
    *(_DWORD *)AudioStreamBasicDescription buf = v3;
    LOWORD(v22) = 0;
    *(void *)((char *)&v22 + 4) = v10;
    HIDWORD(v22) = v9;
    char v23 = 0;
    uint64_t v24 = 0;
    int v25 = 0;
    if ((v3 | 0x4000000) == 0x65632D33 && v4 <= v9)
    {
      memcpy(__dst, v10, v8);
      if (__dst[0] != 2935)
      {
        if (__dst[0] != 30475) {
          goto LABEL_23;
        }
        char v23 = 1;
      }
      LOBYTE(v22) = 1;
    }
LABEL_23:
    if (EC3PacketParser::IsValid((EC3PacketParser *)buf)) {
      break;
    }
    unsigned int v9 = --v20;
    ++v10;
    if (!--v7)
    {
      uint64_t v11 = 0;
      goto LABEL_33;
    }
  }
  uint64_t v11 = 1;
LABEL_33:
  if (v6) {
LABEL_34:
  }
    free(v6);
  return v11;
}

void sub_18FFD0F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15) {
    free(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL EC3AudioFormat::ExtensionIsThisFormat(EC3AudioFormat *this, CFStringRef theString1)
{
  if (*((_DWORD *)this + 2) == 1633889587)
  {
    CFStringRef v3 = @"ac3";
    return CFStringCompare(theString1, v3, 1uLL) == kCFCompareEqualTo;
  }
  uint64_t v4 = 1;
  if (CFStringCompare(theString1, @"ec3", 1uLL))
  {
    CFStringRef v3 = @"eac3";
    return CFStringCompare(theString1, v3, 1uLL) == kCFCompareEqualTo;
  }
  return v4;
}

void EC3AudioFormat::~EC3AudioFormat(EC3AudioFormat *this)
{
}

uint64_t DSPGraph::MantissaRandomizerBox::initialize(DSPGraph::MantissaRandomizerBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v30, "in");
    uint64_t v10 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v9, v10, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v4 = *((void *)this + 11);
  if (*((void *)this + 12) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v30, "out");
    int v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v12 = (void *)*v12;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  int v5 = *(_DWORD *)(*(void *)(v3 + 120) + 28);
  if (v5 != *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(v27, "initialize");
    uint64_t v13 = *((void *)this + 8);
    if (*((void *)this + 9) == v13)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v30, "in");
      uint64_t v15 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v15 = (void *)*v15;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v14, v15, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
    uint64_t v21 = *((void *)this + 11);
    if (*((void *)this + 12) == v21)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v30, "out");
      char v23 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        char v23 = (void *)*v23;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v22, v23, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v24 = *(unsigned int *)(*(void *)(v20 + 120) + 28);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 40))(v21);
    DSPGraph::strprintf((DSPGraph *)"input and output must have the same channel count, but have %u and %u", v26, v24, *(unsigned int *)(*(void *)(v25 + 120) + 28));
  }
  uint64_t v6 = *((void *)this + 8);
  if (*((void *)this + 9) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v30, "in");
    uint64_t v17 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v17 = (void *)*v17;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v16, v17, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6) + 120) + 8) != 1819304813) {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v30, "out");
    unint64_t v19 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v19 = (void *)*v19;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v18, v19, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (*(_DWORD *)(*(void *)(result + 120) + 8) != 1819304813)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v30, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v29, "input and output must both be time-domain");
    DSPGraph::ThrowException(1718449215, &v31, 115, &v30, &v29);
  }
  return result;
}

void sub_18FFD14C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 41) < 0) {
    operator delete(*(void **)(v29 - 64));
  }
  if (*(char *)(v29 - 17) < 0) {
    operator delete(*(void **)(v29 - 40));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::MantissaRandomizerBox::process(DSPGraph::MantissaRandomizerBox *this, unsigned int a2, int32x2_t a3)
{
  unsigned int v4 = atomic_load((unsigned int *)this + 194);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 772);
  if ((v5 & 1) != 0 || !v4)
  {
    uint64_t v27 = *((void *)this + 8);
    if (*((void *)this + 9) == v27)
    {
      std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v60, "in");
      uint64_t v50 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v50 = (void *)*v50;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27);
    uint64_t v29 = *((void *)this + 11);
    if (*((void *)this + 12) == v29)
    {
      std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v60, "out");
      BOOL v54 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        BOOL v54 = (void *)*v54;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v53, v54, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    long long v30 = (void *)(*(void *)(v28 + 56) + 80);
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 40))(v29);
    DSPGraph::SimpleABL::copy(v30, (DSPGraph::SimpleABL *)(*(void *)(v31 + 56) + 80), 1);
  }
  else
  {
    unsigned int v6 = (v4 + 3) & 0xFFFFFFFC;
    a3.i32[0] = v4 - 1;
    int32x2_t v58 = a3;
    int32x4_t v7 = (int32x4_t)xmmword_1901C5FC0;
    int8x16_t v8 = 0uLL;
    v9.i64[0] = 0x100000001;
    v9.i64[1] = 0x100000001;
    v10.i64[0] = 0x400000004;
    v10.i64[1] = 0x400000004;
    do
    {
      int32x4_t v11 = v7;
      int8x16_t v12 = v8;
      int8x16_t v8 = vorrq_s8(v8, (int8x16_t)vshlq_u32(v9, (uint32x4_t)v7));
      int32x4_t v7 = vaddq_s32(v7, v10);
      v6 -= 4;
    }
    while (v6);
    uint32x4_t v55 = (uint32x4_t)v11;
    int8x16_t v56 = v12;
    int8x16_t v57 = v8;
    uint64_t v13 = *((void *)this + 11);
    if (*((void *)this + 12) == v13)
    {
      std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v60, "out");
      uint64_t v52 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v52 = (void *)*v52;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v51, v52, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v14 = **(unsigned int **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13) + 56) + 80);
    if (v14)
    {
      uint64_t v15 = 0;
      int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_u32(v55, (uint32x4_t)vdupq_lane_s32(v58, 0)), v56, v57);
      *(int8x8_t *)v16.i8 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      __int32 v17 = v16.i32[0] | v16.i32[1];
      __int32 v18 = ~(v16.i32[0] | v16.i32[1]);
      do
      {
        uint64_t v19 = *((void *)this + 8);
        if (*((void *)this + 9) == v19)
        {
          std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v60, "in");
          uint64_t v44 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            uint64_t v44 = (void *)*v44;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v43, v44, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
        }
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 40))(v19);
        uint64_t v21 = *((void *)this + 11);
        if (*((void *)this + 12) == v21)
        {
          std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v60, "out");
          unint64_t v46 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            unint64_t v46 = (void *)*v46;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v45, v46, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
        }
        long long v22 = *(int **)(*(void *)(*(void *)(v20 + 56) + 80) + 16 * v15 + 16);
        uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 40))(v21);
        if (a2)
        {
          uint64_t v24 = *(_DWORD **)(*(void *)(*(void *)(v23 + 56) + 80) + 16 * v15 + 16);
          uint64_t v25 = 4 * a2;
          do
          {
            int v26 = *v22++;
            LODWORD(v61[0]) = 0;
            HIDWORD(v61[0]) = v17;
            *v24++ = std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)((char *)this + 784), v61) | v26 & v18;
            v25 -= 4;
          }
          while (v25);
        }
        ++v15;
      }
      while (v15 != v14);
    }
  }
  uint64_t v32 = *((void *)this + 8);
  if (*((void *)this + 9) == v32)
  {
    std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v60, "in");
    uint64_t v48 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v48 = (void *)*v48;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v47, v48, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 40))(v32);
  uint64_t v35 = *((void *)this + 11);
  unsigned int v34 = (void *)*((void *)this + 12);
  if ((void *)v35 != v34)
  {
    int v36 = (_OWORD *)(result[7] + 8);
    uint64_t result = (void *)v35;
    uint64_t v37 = (void *)v35;
    do
    {
      uint64_t v38 = *v37;
      v37 += 4;
      uint64_t v39 = *(void *)((*(uint64_t (**)(void *))(v38 + 40))(result) + 56);
      long long v41 = v36[2];
      long long v40 = v36[3];
      long long v42 = v36[1];
      *(_OWORD *)(v39 + 8) = *v36;
      *(_OWORD *)(v39 + 24) = v42;
      *(_OWORD *)(v39 + 40) = v41;
      *(_OWORD *)(v39 + 56) = v40;
      *(_DWORD *)(v39 + 72) = 0;
      v35 += 32;
      uint64_t result = v37;
    }
    while (v37 != v34);
  }
  return result;
}

void sub_18FFD1B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 89) < 0) {
    operator delete(*(void **)(v34 - 112));
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::MantissaRandomizerBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.62656313e219;
  *(_OWORD *)a1 = xmmword_1901C60A0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

__n128 DSPGraph::MantissaRandomizerBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v5 = -10866;
  }
  else
  {
    if (!a2)
    {
      long long v13 = 0u;
      __n128 v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      v14.n128_u32[2] = 1102577664;
      v14.n128_u32[0] = 1;
      uint64_t v15 = 3221225472;
      strlcpy((char *)&v9, "bits to randomize", 0x34uLL);
      *((void *)&v13 + 1) = @"bits to randomize";
      LODWORD(v15) = v15 | 0x8000000;
      long long v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 16) = v6;
      long long v7 = v12;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v7;
      __n128 result = v14;
      *(_OWORD *)(a3 + 64) = v13;
      *(__n128 *)(a3 + 80) = result;
      *(void *)(a3 + 96) = v15;
      *(unsigned char *)(a3 + 104) = 1;
      return result;
    }
    int v5 = -10878;
  }
  *(_DWORD *)a3 = v5;
  *(unsigned char *)(a3 + 104) = 0;
  return result;
}

void sub_18FFD1D24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSPGraph::MantissaRandomizerBox::getParameterList(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    unsigned int v4 = operator new(4uLL);
    *a2 = v4;
    *v4++ = 0;
    a2[1] = v4;
    a2[2] = v4;
  }
}

float DSPGraph::MantissaRandomizerBox::getParameter(DSPGraph::MantissaRandomizerBox *this, int a2, int a3, int a4)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10866, &v8, 71, &v7, &v6);
  }
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10877, &v8, 74, &v7, &v6);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10878, &v8, 79, &v7, &v6);
  }
  return (float)atomic_load((unsigned int *)this + 194);
}

void sub_18FFD1E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::MantissaRandomizerBox::setParameter(uint64_t this, int a2, int a3, int a4, float a5)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10866, &v8, 90, &v7, &v6);
  }
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10877, &v8, 93, &v7, &v6);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10878, &v8, 100, &v7, &v6);
  }
  uint64_t v5 = llroundf(a5);
  if (v5 >= 23) {
    uint64_t v5 = 23;
  }
  atomic_store(v5 & ~(v5 >> 63), (unsigned int *)(this + 776));
  return this;
}

void sub_18FFD2028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::MantissaRandomizerBox::canProcessInPlace(DSPGraph::MantissaRandomizerBox *this)
{
  return 1;
}

uint64_t DSPGraph::MantissaRandomizerBox::bypass(uint64_t this, unsigned __int8 a2)
{
  return this;
}

uint64_t DSPGraph::MantissaRandomizerBox::isBypassed(DSPGraph::MantissaRandomizerBox *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 772);
  return v1 & 1;
}

uint64_t DSPGraph::MantissaRandomizerBox::canBypass(DSPGraph::MantissaRandomizerBox *this)
{
  return 1;
}

const char *DSPGraph::MantissaRandomizerBox::ClassName(DSPGraph::MantissaRandomizerBox *this)
{
  return "MantissaRandomizerBox";
}

void DSPGraph::MantissaRandomizerBox::~MantissaRandomizerBox(DSPGraph::MantissaRandomizerBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<MixerDistanceParams>::DeserializeT(int a1, CADeserializer *this, char *a3)
{
  CADeserializer::Read(this, a3);
  CADeserializer::Read(this, a3 + 4);
  return CADeserializer::Read(this, a3 + 8);
}

uint64_t TSimpleMarshaller<MixerDistanceParams>::SerializeT(int a1, CASerializer *this, char *a3)
{
  CASerializer::Write(this, a3);
  CASerializer::Write(this, a3 + 4);
  return CASerializer::Write(this, a3 + 8);
}

BOOL TMarshaller<MixerDistanceParams>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 12 && *a4 != 0) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0xCuLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

void Marshaller::CheckDest(Marshaller *this, void **a2, unsigned int *a3, unint64_t a4)
{
  unsigned int v4 = a4;
  if (!*a2)
  {
    long long v7 = (char *)*((void *)this + 5);
    long long v8 = (void **)((char *)this + 40);
    unint64_t v9 = *((void *)this + 6) - (void)v7;
    if (a4 <= v9)
    {
      if (a4 < v9) {
        *((void *)this + 6) = &v7[a4];
      }
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 40), a4 - v9);
      long long v7 = (char *)*v8;
    }
    *a2 = v7;
    goto LABEL_9;
  }
  if (*a3 > a4) {
LABEL_9:
  }
    *a3 = v4;
}

BOOL TMarshaller<MixerDistanceParams>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 12) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 12;
}

void TSimpleMarshaller<MixerDistanceParams>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

void Marshaller::~Marshaller(Marshaller *this)
{
  *(void *)this = &unk_1EDF8C270;
  uint64_t v3 = (CFTypeRef *)*((void *)this + 1);
  for (uint64_t i = (CFTypeRef *)*((void *)this + 2); v3 != i; uint64_t i = (CFTypeRef *)*((void *)this + 2))
    CFRelease(*v3++);
  unsigned int v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

uint64_t MarshalSpatialMixerImpulseResponses::Deserialize(MarshalSpatialMixerImpulseResponses *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  uint64_t v24 = 0;
  CADeserializer::Read(a2, (char *)&v24 + 4);
  CADeserializer::Read(a2, &v24);
  uint64_t result = 0;
  if (!a2->var4)
  {
    Marshaller::CheckDest(this, a3, a4, 8 * ((unsigned __int16)v24 * WORD2(v24) + (unint64_t)(WORD2(v24) - 1)) + 40);
    int v9 = v24;
    unsigned __int16 v10 = WORD2(v24);
    long long v11 = *a3;
    _OWORD v11[2] = HIDWORD(v24);
    v11[3] = v9;
    CADeserializer::Read(a2, v11 + 4);
    CADeserializer::Read(a2, v11 + 8);
    if (a2->var4) {
      return 0;
    }
    if (*((void *)v11 + 4))
    {
      uint64_t Ptr = CADeserializer::GetAndAdvanceReadPtr(a2);
      uint64_t result = 0;
      BOOL var4 = a2->var4;
      *((void *)v11 + 3) = Ptr;
      if (var4) {
        return result;
      }
    }
    else
    {
      *((void *)v11 + 3) = 0;
    }
    unsigned int v14 = v10;
    if (v10) {
      uint64_t v15 = (char *)*a3 + 40;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v10)
    {
      uint64_t v16 = 0;
      uint64_t v17 = (unsigned __int16)v9;
      __int32 v18 = &v15[8 * v10];
      uint64_t v23 = v14;
      uint64_t v19 = (uint64_t *)v18;
      do
      {
        if (v17)
        {
          uint64_t v20 = v19;
          uint64_t v21 = v17;
          do
          {
            if (*((void *)v11 + 2))
            {
              uint64_t v22 = CADeserializer::GetAndAdvanceReadPtr(a2);
              if (a2->var4) {
                return 0;
              }
            }
            else
            {
              uint64_t v22 = 0;
            }
            *v20++ = v22;
            --v21;
          }
          while (v21);
        }
        *(void *)&v15[8 * v16] = &v18[8 * v16];
        ++v16;
        ++v19;
      }
      while (v16 != v23);
    }
    *(void *)long long v11 = v15;
    return 1;
  }
  return result;
}

BOOL MarshalSpatialMixerImpulseResponses::Serialize(MarshalSpatialMixerImpulseResponses *this, CASerializer *a2, char *a3, unsigned int a4)
{
  if (a4 >= 0x28)
  {
    CASerializer::Write(a2, a3 + 8);
    CASerializer::Write(a2, a3 + 12);
    uint64_t v15 = *((void *)a3 + 2);
    CASerializer::Write(a2, &v15);
    uint64_t v15 = *((void *)a3 + 4);
    CASerializer::Write(a2, &v15);
    CASerializer::Write(a2, *((const void **)a3 + 3));
    uint64_t v7 = *((unsigned __int16 *)a3 + 4);
    if (*((_WORD *)a3 + 4))
    {
      uint64_t v8 = 0;
      uint64_t v9 = *((unsigned __int16 *)a3 + 6);
      do
      {
        if (v9)
        {
          uint64_t v10 = 0;
          unint64_t v11 = *((void *)a3 + 2);
          do
          {
            if (v11)
            {
              uint64_t v12 = 0;
              for (unint64_t i = 0; i < v11; ++i)
              {
                CASerializer::Write(a2, (const void *)(*(void *)(*(void *)(*(void *)a3 + 8 * v8) + 8 * v10) + v12));
                unint64_t v11 = *((void *)a3 + 2);
                v12 += 4;
              }
            }
            ++v10;
          }
          while (v10 != v9);
        }
        ++v8;
      }
      while (v8 != v7);
    }
  }
  return a4 > 0x27;
}

void MarshalSpatialMixerImpulseResponses::~MarshalSpatialMixerImpulseResponses(MarshalSpatialMixerImpulseResponses *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<unsigned int>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  uint64_t Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFFC);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

uint64_t RawDataMarshaller::Serialize(RawDataMarshaller *this, CASerializer *a2, const void *a3)
{
  return 1;
}

void TArrayMarshaller<unsigned int>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t RawDataMarshaller::Deserialize(RawDataMarshaller *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  Marshaller::CheckDest(this, a3, a4, a2->var3 - a2->var2);
  int64_t v7 = *a3;
  uint64_t Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(a2);
  memcpy(v7, Ptr, *a4);
  return 1;
}

void RawDataMarshaller::~RawDataMarshaller(RawDataMarshaller *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<__CFURL const*>::DeserializeT()
{
  return operator>>();
}

uint64_t TSimpleMarshaller<__CFURL const*>::SerializeT()
{
  return operator<<();
}

BOOL TMarshaller<__CFURL const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<__CFURL const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TSimpleMarshaller<__CFURL const*>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<unsigned int>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

uint64_t TSimpleMarshaller<unsigned int>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

BOOL TMarshaller<unsigned int>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 4) != 4) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 4uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<unsigned int>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 4) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 4;
}

void TSimpleMarshaller<unsigned int>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<char>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  uint64_t Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<char>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<float>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  uint64_t Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFFC);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<float>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<float>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

uint64_t TSimpleMarshaller<float>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

BOOL TMarshaller<float>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 4) != 4) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 4uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<float>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 4) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 4;
}

void TSimpleMarshaller<float>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

void MarshalCFPropertyList::DeserializeT(MarshalCFPropertyList *this, CADeserializer *a2, const void **a3)
{
  Plist = (const void *)CADeserializer::ReadPlist(a2);
  *a3 = Plist;
  Marshaller::AddCreatedCFObject(this, Plist);
}

void Marshaller::AddCreatedCFObject(Marshaller *this, const void *a2)
{
  if (a2)
  {
    uint64_t v5 = (void *)*((void *)this + 2);
    unint64_t v4 = *((void *)this + 3);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = *((void *)this + 1);
      uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v4 - v7;
      uint64_t v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
        uint64_t v10 = v8 + 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      long long v13 = (void *)(v11 + 8 * v8);
      unint64_t v14 = v11 + 8 * v12;
      *long long v13 = a2;
      long long v6 = v13 + 1;
      uint64_t v16 = (char *)*((void *)this + 1);
      uint64_t v15 = (char *)*((void *)this + 2);
      if (v15 != v16)
      {
        do
        {
          uint64_t v17 = *((void *)v15 - 1);
          v15 -= 8;
          *--long long v13 = v17;
        }
        while (v15 != v16);
        uint64_t v15 = (char *)*((void *)this + 1);
      }
      *((void *)this + 1) = v13;
      *((void *)this + 2) = v6;
      *((void *)this + 3) = v14;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *uint64_t v5 = a2;
      long long v6 = v5 + 1;
    }
    *((void *)this + 2) = v6;
  }
}

void MarshalCFPropertyList::SerializeT(MarshalCFPropertyList *this, CASerializer *a2, const void **a3)
{
  CASerializer::WritePlist(a2, *a3);
  uint64_t v5 = *a3;
  if (*a3 && *((unsigned char *)this + 32))
  {
    CFRelease(v5);
  }
}

BOOL TMarshaller<void const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<void const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void MarshalCFPropertyList::~MarshalCFPropertyList(MarshalCFPropertyList *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

FILE *CACopyObjectDescription(uint64_t a1, void *a2)
{
  uint64_t v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v4) {
    a1 = v4;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v7 = funopen(&v7, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  (*(void (**)(uint64_t, FILE *))(*(void *)a1 + 16))(a1, v7);
  uint64_t v5 = CAMemoryStream::cstr(&v7);
  if (a2) {
    *a2 = v9;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  fclose(v7);
  free(v8);
  return v5;
}

void sub_18FFD31B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, void *a10)
{
}

void CAShowFile(void *inObject, FILE *inFile)
{
  uint64_t v3 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v3) {
    uint64_t v3 = (uint64_t)inObject;
  }
  uint64_t v4 = *(void (**)(void))(*(void *)v3 + 16);
  v4();
}

void CAShow(void *inObject)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v2 = funopen(&v6, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  long long v6 = v2;
  uint64_t v3 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v3) {
    uint64_t v3 = (uint64_t)inObject;
  }
  (*(void (**)(uint64_t, FILE *))(*(void *)v3 + 16))(v3, v2);
  uint64_t v4 = CADefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = CAMemoryStream::cstr(&v6);
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unint64_t v11 = v5;
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  fclose(v6);
  free(v7);
}

void sub_18FFD3368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, void *a10)
{
}

uint64_t _ReportRPCTimeout(const char *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (iEjr08d2 >= 1) {
    goto LABEL_12;
  }
  special_port[0] = 0;
  mach_port_t sp = 0;
  task_get_special_port(*MEMORY[0x1E4F14960], 4, special_port);
  uint64_t result = bootstrap_look_up(special_port[0], "com.apple.coremedia.admin", &sp);
  if (!result)
  {
    uint64_t v5 = CADefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_error_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, "%s posting message to kill mediaserverd (%d)", buf, 0x12u);
    }

    uint64_t v6 = sp;
    *(void *)&long long v20 = 0;
    *((void *)&v20 + 1) = &v20;
    uint64_t v21 = 0x2020000000;
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, const char *))getFigRPCTimeout_KillAndForceCrashReportSymbolLoc(void)::ptr;
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))getFigRPCTimeout_KillAndForceCrashReportSymbolLoc(void)::ptr;
    if (!getFigRPCTimeout_KillAndForceCrashReportSymbolLoc(void)::ptr)
    {
      *(void *)AudioStreamBasicDescription buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL49getFigRPCTimeout_KillAndForceCrashReportSymbolLocv_block_invoke;
      int v26 = &unk_1E5688B80;
      uint64_t v27 = &v20;
      ___ZL49getFigRPCTimeout_KillAndForceCrashReportSymbolLocv_block_invoke(buf);
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)&v20 + 1) + 24);
    }
    _Block_object_dispose(&v20, 8);
    if (!v7)
    {
      uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "kern_return_t local_FigRPCTimeout_KillAndForceCrashReport(mach_port_t, natural_t, rpc_cstring_t)");
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, @"RPCTimeout.mm", 32, @"%s", dlerror());

      while (1)
      {
        __break(1u);
LABEL_12:
        if (audiomxd_enabled()) {
          snprintf(buf, 0x100uLL, "%s: RPC timeout within audiomxd. Apparently deadlocked. Writing a stackshot and exiting.");
        }
        else {
          snprintf(buf, 0x100uLL, "%s: RPC timeout within mediaserverd. Apparently deadlocked. Writing a stackshot and exiting.");
        }
        uint64_t v10 = CADefaultLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          LODWORD(v20) = 136315138;
          *(void *)((char *)&v20 + 4) = buf;
          _os_log_fault_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v20, 0xCu);
        }

        *(void *)special_port = 0;
        uint64_t v17 = special_port;
        uint64_t v18 = 0x2020000000;
        char v19 = 0;
        *(void *)&long long v20 = 0;
        *((void *)&v20 + 1) = &v20;
        uint64_t v21 = 0x3032000000;
        uint64_t v22 = __Block_byref_object_copy__2497;
        uint64_t v23 = __Block_byref_object_dispose__2498;
        dispatch_semaphore_t v24 = dispatch_semaphore_create(0);
        unint64_t v11 = (void *)[[NSString alloc] initWithCString:buf encoding:134217984];
        uint64_t v12 = dispatch_get_global_queue(33, 0);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___Z17_ReportRPCTimeoutPKci_block_invoke;
        block[3] = &unk_1E5680F70;
        void block[5] = special_port;
        block[4] = v11;
        void block[6] = &v20;
        dispatch_async(v12, block);

        dispatch_time_t v13 = dispatch_time(0, 5000000000);
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*((void *)&v20 + 1) + 40), v13);
        if (*((unsigned char *)v17 + 24)) {
          exit(1);
        }
        abort_with_reason();
      }
    }
    return v7(v6, a2, a1);
  }
  return result;
}

void sub_18FFD3798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);

  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2497(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2498(uint64_t a1)
{
}

intptr_t ___Z17_ReportRPCTimeoutPKci_block_invoke(uint64_t a1)
{
  getpid();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = WriteStackshotReportWithPID();
  uint64_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  return dispatch_semaphore_signal(v2);
}

void *___ZL49getFigRPCTimeout_KillAndForceCrashReportSymbolLocv_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!CoreMediaLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = ___ZL20CoreMediaLibraryCorePPc_block_invoke;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E5680F90;
    uint64_t v7 = 0;
    CoreMediaLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  uint64_t v2 = (void *)CoreMediaLibraryCore(char **)::frameworkLibrary;
  if (!CoreMediaLibraryCore(char **)::frameworkLibrary)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *CoreMediaLibrary()"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"RPCTimeout.mm", 29, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "FigRPCTimeout_KillAndForceCrashReport");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getFigRPCTimeout_KillAndForceCrashReportSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void sub_18FFD3A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL20CoreMediaLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreMediaLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t ReportXPCTimeout(const char *a1)
{
  return _ReportRPCTimeout(a1, 0xFFFFFFFFLL);
}

uint64_t MP4BoxParser_HandlerReference::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1751411826)
    {
      unsigned int v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v3 + 4, 4uLL, (char *)this + 60);
      if (!result) {
        *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void MP4BoxParser_HandlerReference::~MP4BoxParser_HandlerReference(MP4BoxParser_HandlerReference *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void HapticSharedMemoryWriter::~HapticSharedMemoryWriter(xpc_object_t *this)
{
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x192FC8940);
}

uint64_t destroyHapticCommandWriter(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    (*(void (**)(uint64_t))(*(void *)result + 16))(result);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  return result;
}

void sub_18FFD3DA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18FFD4048(_Unwind_Exception *a1)
{
}

void sub_18FFD4230(_Unwind_Exception *a1)
{
}

void sub_18FFD44AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)va);
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t InternalAudioUnitPropertyMarshaller::GetMarshaller(InternalAudioUnitPropertyMarshaller *this, AudioUnitPropertyMarshaller *a2)
{
  uint64_t result = AudioUnitPropertyMarshaller::CreateMarshaller(a2);
  if (!result) {
    operator new();
  }
  return result;
}

void InternalAudioUnitPropertyMarshaller::~InternalAudioUnitPropertyMarshaller(InternalAudioUnitPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);
  JUMPOUT(0x192FC8940);
}

void sub_18FFD48D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18FFD4B30(_Unwind_Exception *a1)
{
}

void sub_18FFD4E04(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0xE1C40AACF12E9);
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t AUProcessingBlock_AU::AUSetParameter(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue a6)
{
  return AudioUnitSetParameter(inUnit, inID, inScope, inElement, a6, 0);
}

uint64_t AUProcessingBlock_AU::AUGetParameter(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue *outValue)
{
  return AudioUnitGetParameter(inUnit, inID, inScope, inElement, outValue);
}

uint64_t AUProcessingBlock_AU::AUSetProperty(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return AudioUnitSetProperty(inUnit, inID, inScope, inElement, inData, inDataSize);
}

uint64_t AUProcessingBlock_AU::AUGetProperty(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return AudioUnitGetProperty(inUnit, inID, inScope, inElement, outData, ioDataSize);
}

uint64_t AUProcessingBlock_AU::AUGetPropertyInfo(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, UInt32 *outDataSize, Boolean *outWritable)
{
  return AudioUnitGetPropertyInfo(inUnit, inID, inScope, inElement, outDataSize, outWritable);
}

void TestAUProcessingBlock::~TestAUProcessingBlock(TestAUProcessingBlock *this)
{
  AUProcessingBlock_AU_Instantiating::~AUProcessingBlock_AU_Instantiating((AUProcessingBlock_AU_Instantiating *)this);
  JUMPOUT(0x192FC8940);
}

void sub_18FFD57B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::TypeRef::~TypeRef(&a19);
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,RemoteAUHandleInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,RemoteAUHandleInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,RemoteAUHandleInfo>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unsigned int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unsigned int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  long long v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

void sub_18FFD61E8(_Unwind_Exception *a1)
{
}

void sub_18FFD640C(_Unwind_Exception *a1)
{
}

void sub_18FFD6600(_Unwind_Exception *a1)
{
}

void sub_18FFD68F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__2666(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__2667(uint64_t a1)
{
}

void sub_18FFD6EE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18FFD7480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFD7534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FFD75D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFD7678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFD7708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFD7794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFD7810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FFD7874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL AUProperty::Swizzler::addGetter(SEL name, objc_class *types, Class cls, void (*a4)(void))
{
  BOOL result = class_addMethod(cls, name, a4, (const char *)types);
  if (!result) {
    __assert_rtn("addGetter", "AUAudioUnitProperties.mm", 448, "class_addMethod(cls, mGetSelector, imp, mGetterTypes)");
  }
  return result;
}

BOOL AUProperty::Swizzler::addSetter(SEL name, objc_class *types, Class cls, void (*a4)(void))
{
  BOOL result = class_addMethod(cls, name, a4, (const char *)types);
  if (!result) {
    __assert_rtn("addSetter", "AUAudioUnitProperties.mm", 453, "class_addMethod(cls, mSetSelector, imp, mSetterTypes)");
  }
  return result;
}

IMP AUProperty::Swizzler::replaceGetter(SEL name, objc_class *types, Class cls, void (*a4)(void))
{
  IMP result = class_replaceMethod(cls, name, a4, (const char *)types);
  if (!result) {
    __assert_rtn("replaceGetter", "AUAudioUnitProperties.mm", 458, "class_replaceMethod(cls, mGetSelector, imp, mGetterTypes)");
  }
  return result;
}

IMP AUProperty::Swizzler::replaceSetter(SEL name, objc_class *types, Class cls, void (*a4)(void))
{
  IMP result = class_replaceMethod(cls, name, a4, (const char *)types);
  if (!result) {
    __assert_rtn("replaceSetter", "AUAudioUnitProperties.mm", 463, "class_replaceMethod(cls, mSetSelector, imp, mSetterTypes)");
  }
  return result;
}

uint64_t getPropertySizeXPC(AUAudioUnit *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:@"_v2fwd_PropertySize" v2propID:a2 scope:a3 element:a4];
  id v14 = 0;
  uint64_t v9 = [(AUAudioUnit *)v7 _valueForProperty:v8 error:&v14];
  id v10 = v14;

  if (v10)
  {
    unsigned int v11 = [v10 code];
    uint64_t v12 = 0;
  }
  else
  {
    unsigned int v11 = [v9 unsignedIntValue];
    uint64_t v12 = 0x100000000;
  }

  return v12 | v11;
}

void sub_18FFD7A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AUAudioUnitProperties::AUAudioUnitProperties(AUAudioUnitProperties *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)this = CFDictionaryCreateMutable(0, 0, &kCPtrKeyCallbacks, &kCPtrValueCallbacks);
  *((void *)this + 1) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], &kCPtrValueCallbacks);
  operator new();
}

void sub_18FFDABA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  operator delete(v11);
  TCFDictionaryBase::~TCFDictionaryBase(v12);
  TCFDictionaryBase::~TCFDictionaryBase(v13);
  _Unwind_Resume(a1);
}

void TCFDictionaryBase::~TCFDictionaryBase(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

BOOL TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeGetter_Bus);
  BOOL v5 = *(const char **)(a2 + 8);
  long long v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeSetter_Bus);
}

void TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  inCFDataRef Data = a3;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x33u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);
}

void sub_18FFDAE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x33u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = outData == 0;
  }
  uint64_t v5 = !v4;

  return v5;
}

void sub_18FFDAF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeGetter_Global);
  uint64_t v5 = *(const char **)(a2 + 8);
  long long v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeSetter_Global);
}

void TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x33u, 0, 0, &inData, 4u))
  {
    long long v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFDB034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x33u, 0, 0, &outData, &ioDataSize))
  {
    BOOL v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData != 0;
  }

  return v6;
}

void sub_18FFDB0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,51u,3u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  uint64_t v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,51u,3u>::marshalSetter_Bus);
}

void TV3Property<BOOL,51u,3u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  BOOL v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x33);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithBool:a3];
    id WeakRetained = objc_loadWeakRetained(v9 + 14);
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v9 + 32) element:*((unsigned int *)v9 + 33)];
    [WeakRetained _setValue:v6 forProperty:v8 error:0];
  }
}

void sub_18FFDB258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  dispatch_time_t v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t CADeprecated::TSingleton<AUAudioUnitProperties>::instance()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&CADeprecated::TSingleton<AUAudioUnitProperties>::sOnce, memory_order_acquire) != -1)
  {
    id v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&CADeprecated::TSingleton<AUAudioUnitProperties>::sOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AUAudioUnitProperties>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<AUAudioUnitProperties>::sInstance;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AUAudioUnitProperties>::instance(void)::{lambda(void)#1} &&>>()
{
}

void sub_18FFDB340(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void *TV3Property<BOOL,51u,3u>::marshalGetter_Bus(void *a1)
{
  uint64_t v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x33);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 BOOLValue];
  }
  return Value;
}

void sub_18FFDB430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,51u,3u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,51u,3u>::marshalSetter_Global);
}

void TV3Property<BOOL,51u,3u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  id v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  BOOL v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x33);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithBool:a3];
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v8 _setValue:v6 forProperty:v7 error:0];
  }
}

void sub_18FFDB584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,51u,3u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x33);
  if (Value)
  {
    BOOL v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 BOOLValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFDB65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<BOOL,51u,3u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,51u,3u>::stubSetter);
}

uint64_t TV3Property<BOOL,51u,3u>::stubGetter()
{
  return 0;
}

char *TV3Property<BOOL,51u,3u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "B");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

objc_selector *AUAudioUnitProperties::accessorsForProperty(Class cls, objc_class *name, objc_selector **a3, objc_selector **a4, objc_selector **a5)
{
  id v8 = cls;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  OSStatus Property = class_getProperty(cls, (const char *)name);
  if (Property)
  {
    IMP result = (objc_selector *)property_getAttributes(Property);
    unsigned int v11 = (char *)result;
    do
    {
      int v12 = *v11;
      if (!*v11) {
        break;
      }
      IMP result = (objc_selector *)strchr(v11, 44);
      dispatch_time_t v13 = result;
      if (!result)
      {
        IMP result = (objc_selector *)strlen(v11);
        dispatch_time_t v13 = (objc_selector *)((char *)result + (void)v11);
      }
      if ((unint64_t)v13 + ~(unint64_t)v11 >= 0x7F) {
        size_t v14 = 127;
      }
      else {
        size_t v14 = (size_t)v13 + ~(unint64_t)v11;
      }
      if (!a3 || (uint64_t v15 = a3, v12 != 71))
      {
        if (!a4) {
          continue;
        }
        uint64_t v15 = a4;
        if (v12 != 83) {
          continue;
        }
      }
      memcpy(__dst, v11 + 1, v14);
      __dst[v14] = 0;
      IMP result = (objc_selector *)sel_registerName(__dst);
      char *v15 = result;
      unsigned int v11 = (char *)v13 + 1;
    }
    while (*(unsigned char *)v13);
    if (a3 && !*a3)
    {
      IMP result = (objc_selector *)sel_registerName((const char *)name);
      *a3 = result;
    }
    if (a4)
    {
      if (!*a4)
      {
        snprintf(__dst, 0x80uLL, "set%s:", (const char *)name);
        LOBYTE(v17) = __toupper((char)v17);
        IMP result = (objc_selector *)sel_registerName(__dst);
        *a4 = result;
      }
    }
  }
  else
  {
    do
    {
      IMP result = class_getSuperclass(v8);
      id v8 = result;
    }
    while (result);
  }
  return result;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::v2PropertySize()
{
  return 0x100000004;
}

void *std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    id v3 = result;
    BOOL v4 = (void *)result[3];
    id v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        IMP result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        IMP result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      IMP result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18FFDBBD4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    id v3 = result;
    BOOL v4 = (void *)result[3];
    id v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        IMP result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        IMP result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      IMP result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18FFDBEC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    id v3 = result;
    BOOL v4 = (void *)result[3];
    id v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        IMP result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        IMP result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      IMP result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18FFDC1B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    id v3 = result;
    BOOL v4 = (void *)result[3];
    id v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        IMP result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        IMP result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      IMP result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18FFDC4A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 BOOLValue];
  return AudioUnitSetProperty(v3, 0x33u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F9A0;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F9A0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  BOOL v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x33u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    [MEMORY[0x1E4F28ED0] numberWithBool:outData != 0];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F9E8;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F9E8;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 4u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FA30;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FA30;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *id v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFDC888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F958;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F958;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<double,double,40u,ScalarConverter,3u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeSetter_Bus);
}

void TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeSetter_Bus(void *a1, double a2)
{
  id v3 = a1;
  inCFDataRef Data = a2;
  id WeakRetained = objc_loadWeakRetained((id *)v3 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x28u, *((_DWORD *)v3 + 32), *((_DWORD *)v3 + 33), &inData, 8u);
}

void sub_18FFDCA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x28u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    double v4 = 0.0;
  }
  else {
    double v4 = outData;
  }

  return v4;
}

void sub_18FFDCACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<double,double,40u,ScalarConverter,3u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeSetter_Global);
}

void TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeSetter_Global(void *a1, const char *a2, double a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x28u, 0, 0, &inData, 8u))
  {
    id v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, double))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFDCBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x28u, 0, 0, &outData, &ioDataSize))
  {
    double v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    double v6 = ((double (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    double v6 = outData;
  }

  return v6;
}

void sub_18FFDCC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<double,40u,3u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,40u,3u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  double v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<double,40u,3u>::marshalSetter_Bus);
}

void TV3Property<double,40u,3u>::marshalSetter_Bus(void *a1, double a2)
{
  uint64_t v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v3 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v3, (const void *)0x28);
  if (Value)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithDouble:a2];
    id WeakRetained = objc_loadWeakRetained(v8 + 14);
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v8 + 32) element:*((unsigned int *)v8 + 33)];
    [WeakRetained _setValue:v5 forProperty:v7 error:0];
  }
}

void sub_18FFDCE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  dispatch_time_t v13 = v12;

  _Unwind_Resume(a1);
}

double TV3Property<double,40u,3u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x28);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    double v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    [v7 doubleValue];
    double v9 = v8;
  }
  else
  {
    double v9 = 0.0;
  }

  return v9;
}

void sub_18FFDCF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<double,40u,3u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,40u,3u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  double v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<double,40u,3u>::marshalSetter_Global);
}

void TV3Property<double,40u,3u>::marshalSetter_Global(void *a1, double a2)
{
  id v7 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v3 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v3, (const void *)0x28);
  if (Value)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithDouble:a2];
    double v6 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v7 _setValue:v5 forProperty:v6 error:0];
  }
}

void sub_18FFDD078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v12 = v11;

  _Unwind_Resume(a1);
}

double TV3Property<double,40u,3u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x28);
  if (Value)
  {
    double v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    [v6 doubleValue];
    double v8 = v7;
  }
  else
  {
    double v8 = 0.0;
  }

  return v8;
}

void sub_18FFDD158(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

IMP TV3Property<double,40u,3u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,40u,3u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<double,40u,3u>::stubSetter);
}

double TV3Property<double,40u,3u>::stubGetter()
{
  return 0.0;
}

char *TV3Property<double,40u,3u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "d");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "d");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<double,double,40u,ScalarConverter,3u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  [*a3 doubleValue];
  inCFDataRef Data = v4;
  return AudioUnitSetProperty(v3, 0x28u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FD48;
}

void *std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FD48;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  uint64_t v4 = *a3;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x28u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithDouble:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FD90;
}

void *std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FD90;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, double **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithDouble:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FDD8;
}

void *std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FDD8;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
    {
      [v6 doubleValue];
      *id v5 = v9;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFDD628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FD00;
}

void *std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FD00;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

id std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2)
{
  return TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Common(*a2, 0, 0);
}

id TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Common(OpaqueAudioComponentInstance *a1, AudioUnitScope inScope, AudioUnitElement inElement)
{
  memset(&v15, 0, sizeof(v15));
  UInt32 outDataSize = 0;
  Boolean outWritable = 0;
  if (AudioUnitGetPropertyInfo(a1, 0x20u, inScope, inElement, &outDataSize, &outWritable))
  {
    id v6 = 0;
    goto LABEL_6;
  }
  std::vector<unsigned int>::resize(&v15, (unint64_t)outDataSize >> 2);
  std::vector<char>::pointer begin = v15.__begin_;
  if (AudioUnitGetProperty(a1, 0x20u, inScope, inElement, v15.__begin_, &outDataSize))
  {
    id v6 = 0;
    if (!begin) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  id v9 = (id)objc_opt_new();

  std::vector<int>::pointer end = v15.__end_;
  if (begin != v15.__end_)
  {
    unsigned int v11 = (unsigned int *)begin;
    do
    {
      id v12 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:*v11];
      [v9 addObject:v12];

      ++v11;
    }
    while (v11 != (unsigned int *)end);
  }
  id v6 = v9;

  if (begin)
  {
LABEL_5:
    v15.__end_ = begin;
    operator delete(begin);
  }
LABEL_6:
  return v6;
}

void sub_18FFDD810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::pointer begin = this->__begin_;
  std::vector<int>::pointer end = this->__end_;
  std::vector<int>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    char v19 = &begin[__sz];
    goto LABEL_15;
  }
  std::vector<int>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 4 * v6);
    char v19 = &end[v6];
LABEL_15:
    this->__end_ = v19;
    return;
  }
  if (__sz >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<int>::size_type v9 = v8 >> 1;
  if (v8 >> 1 <= __sz) {
    std::vector<int>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unsigned int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  std::vector<int>::pointer v12 = this->__begin_;
  std::vector<int>::pointer v13 = this->__end_;
  size_t v14 = &v11[4 * v5];
  uint64_t v16 = (int *)&v11[4 * v15];
  bzero(v14, 4 * v6);
  __darwin_ct_rune_t v17 = (int *)&v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *--v13;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  this->__begin_ = (std::vector<int>::pointer)v14;
  this->__end_ = v17;
  this->__end_cap_.__value_ = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA06D8;
}

void *std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA06D8;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t __dst = *a3;
  id v5 = *a2;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  obuint64_t j = v5;
  uint64_t v6 = [obj countByEnumeratingWithState:&v28 objects:&__src count:16];
  uint64_t v25 = a4;
  id v7 = 0;
  size_t v8 = 0;
  if (v6)
  {
    size_t v9 = 0;
    uint64_t v10 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v29 != v10) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(id *)(*((void *)&v28 + 1) + 8 * i);
        int v13 = [v12 unsignedIntValue];
        int v14 = v13;
        if (v8 >= v9)
        {
          uint64_t v15 = (uint64_t)(v8 - (void)v7) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v9 - (void)v7) >> 1 > v16) {
            unint64_t v16 = (uint64_t)(v9 - (void)v7) >> 1;
          }
          if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          char v19 = (_DWORD *)(v17 + 4 * v15);
          *char v19 = v14;
          long long v20 = v19 + 1;
          while ((void *)v8 != v7)
          {
            int v21 = *(_DWORD *)(v8 - 4);
            v8 -= 4;
            *--char v19 = v21;
          }
          size_t v9 = v17 + 4 * v18;
          if (v7) {
            operator delete(v7);
          }
          id v7 = v19;
          size_t v8 = (size_t)v20;
        }
        else
        {
          *(_DWORD *)size_t v8 = v13;
          v8 += 4;
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v28 objects:&__src count:16];
    }
    while (v6);
  }

  int __src = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__src, v7, v8, (uint64_t)(v8 - (void)v7) >> 2);
  uint64_t v22 = __src;
  LODWORD(v8) = (v33 - __src) & 0xFFFFFFFC;
  if (__dst)
  {
    uint64_t v23 = v25;
    if (v8 >= *v25) {
      size_t v8 = *v25;
    }
    else {
      size_t v8 = v8;
    }
    memcpy(__dst, __src, v8);
  }
  else
  {
    uint64_t v23 = v25;
  }
  _DWORD *v23 = v8;
  if (v22) {
    operator delete(v22);
  }
  if (v7) {
    operator delete(v7);
  }
  return 0;
}

void sub_18FFDDC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    IMP result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      IMP result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18FFDDCFC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0690;
}

void *std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0690;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Bus);
}

id TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Bus(uint64_t a1)
{
  uint64_t v1 = TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Common(*(OpaqueAudioComponentInstance **)(a1 + 120), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132));
  return v1;
}

BOOL TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Global);
}

id TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Global(void *a1)
{
  id v1 = a1;
  uint64_t v2 = TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Common((OpaqueAudioComponentInstance *)[v1 audioUnit], 0, 0);

  return v2;
}

void sub_18FFDDE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},32u,2u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},32u,2u>::marshalGetter_Bus);
}

id TV3Property<NSArray * {__strong},32u,2u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x20);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    uint64_t v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFDDF74(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},32u,2u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},32u,2u>::marshalGetter_Global);
}

id TV3Property<NSArray * {__strong},32u,2u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x20);
  if (Value)
  {
    uint64_t v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFDE064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSArray * {__strong},32u,2u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},32u,2u>::stubGetter);
}

uint64_t TV3Property<NSArray * {__strong},32u,2u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSArray * {__strong},32u,2u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TV3Property<NSArray * {__strong},32u,2u>::v2PropertySize()
{
  return 0x100000000;
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeSetter_Bus);
}

void TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  inCFDataRef Data = v5;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x1Eu, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 8u);
}

void sub_18FFDE254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x1Eu, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = outData;
  }
  return v4;
}

void sub_18FFDE32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeSetter_Global);
}

void TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeSetter_Global(void *a1, const char *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  inCFDataRef Data = v6;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x1Eu, 0, 0, &inData, 8u))
  {
    id v7 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v7, a2);
    ((void (*)(id, const char *, id))MethodImplementation)(v5, a2, v6);
  }
}

void sub_18FFDE450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x1Eu, 0, 0, &outData, &ioDataSize))
  {
    id v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v6 = outData;
  }
  return v6;
}

void sub_18FFDE524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},30u,3u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::marshalSetter_Bus);
}

void TV3Property<NSString * {__strong},30u,3u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x1E);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFDE694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},30u,3u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x1E);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFDE7A4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},30u,3u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::marshalSetter_Global);
}

void TV3Property<NSString * {__strong},30u,3u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x1E);
  if (Value)
  {
    id v7 = v4;
    size_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFDE8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},30u,3u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x1E);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFDE9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSString * {__strong},30u,3u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::stubSetter);
}

uint64_t TV3Property<NSString * {__strong},30u,3u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSString * {__strong},30u,3u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x1Eu, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F490;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F490;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x1Eu, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F4D8;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F4D8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F520;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F520;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F448;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F448;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x62787073u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B270;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B270;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x62787073u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B2B8;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B2B8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B300;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B300;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B228;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B228;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSDictionary * {__strong},1652060275u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalSetter_Bus);
}

void TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x62787073);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFDF3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x62787073);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFDF50C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSDictionary * {__strong},1652060275u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalSetter_Global);
}

void TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x62787073);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFDF65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x62787073);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFDF73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSDictionary * {__strong},1652060275u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::stubSetter);
}

uint64_t TV3Property<NSDictionary * {__strong},1652060275u,17u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSDictionary * {__strong},1652060275u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x62787072u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B150;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B150;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x62787072u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B198;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B198;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B1E0;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B1E0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B108;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B108;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSDictionary * {__strong},1652060274u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalSetter_Bus);
}

void TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x62787072);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFDFDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x62787072);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFDFECC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSDictionary * {__strong},1652060274u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalSetter_Global);
}

void TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x62787072);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE001C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x62787072);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE00FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSDictionary * {__strong},1652060274u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::stubSetter);
}

uint64_t TV3Property<NSDictionary * {__strong},1652060274u,17u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSDictionary * {__strong},1652060274u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x67727072u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B390;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B390;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x67727072u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B3D8;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B3D8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B420;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B420;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B348;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF8B348;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSDictionary * {__strong},1735553138u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalSetter_Bus);
}

void TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x67727072);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFE0778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x67727072);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE088C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSDictionary * {__strong},1735553138u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalSetter_Global);
}

void TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x67727072);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE09DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x67727072);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE0ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSDictionary * {__strong},1735553138u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::stubSetter);
}

uint64_t TV3Property<NSDictionary * {__strong},1735553138u,17u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSDictionary * {__strong},1735553138u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x61757370u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9ECB0;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9ECB0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x61757370u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9ECF8;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9ECF8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9ED40;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9ED40;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EC68;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EC68;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSString * {__strong},1635087216u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::marshalSetter_Bus);
}

void TV3Property<NSString * {__strong},1635087216u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x61757370);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFE1138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1635087216u,17u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x61757370);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE124C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},1635087216u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::marshalSetter_Global);
}

void TV3Property<NSString * {__strong},1635087216u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x61757370);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE139C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1635087216u,17u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x61757370);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE147C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSString * {__strong},1635087216u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::stubSetter);
}

uint64_t TV3Property<NSString * {__strong},1635087216u,17u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSString * {__strong},1635087216u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x70727370u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F250;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F250;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x70727370u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F298;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F298;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F2E0;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F2E0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F208;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F208;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSString * {__strong},1886548848u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::marshalSetter_Bus);
}

void TV3Property<NSString * {__strong},1886548848u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x70727370);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFE1AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1886548848u,17u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x70727370);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE1C0C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},1886548848u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::marshalSetter_Global);
}

void TV3Property<NSString * {__strong},1886548848u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x70727370);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE1D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1886548848u,17u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x70727370);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE1E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSString * {__strong},1886548848u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::stubSetter);
}

uint64_t TV3Property<NSString * {__strong},1886548848u,17u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSString * {__strong},1886548848u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x67727478u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EEF0;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EEF0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x67727478u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EF38;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EF38;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EF80;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EF80;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EEA8;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EEA8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSString * {__strong},1735554168u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::marshalSetter_Bus);
}

void TV3Property<NSString * {__strong},1735554168u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x67727478);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFE24B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1735554168u,17u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x67727478);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE25CC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},1735554168u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::marshalSetter_Global);
}

void TV3Property<NSString * {__strong},1735554168u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x67727478);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE271C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1735554168u,17u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x67727478);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE27FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSString * {__strong},1735554168u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::stubSetter);
}

uint64_t TV3Property<NSString * {__strong},1735554168u,17u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSString * {__strong},1735554168u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x64737067u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EDD0;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EDD0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x64737067u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EE18;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EE18;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EE60;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EE60;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9ED88;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9ED88;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSString * {__strong},1685287015u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::marshalSetter_Bus);
}

void TV3Property<NSString * {__strong},1685287015u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x64737067);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFE2E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1685287015u,17u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x64737067);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE2F8C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},1685287015u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::marshalSetter_Global);
}

void TV3Property<NSString * {__strong},1685287015u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x64737067);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE30DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1685287015u,17u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x64737067);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE31BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSString * {__strong},1685287015u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::stubSetter);
}

uint64_t TV3Property<NSString * {__strong},1685287015u,17u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSString * {__strong},1685287015u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x70727270u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F130;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F130;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x70727270u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F178;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F178;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F1C0;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F1C0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F0E8;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F0E8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSString * {__strong},1886548592u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::marshalSetter_Bus);
}

void TV3Property<NSString * {__strong},1886548592u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x70727270);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFE3838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1886548592u,17u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x70727270);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE394C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},1886548592u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::marshalSetter_Global);
}

void TV3Property<NSString * {__strong},1886548592u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x70727270);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE3A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1886548592u,17u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x70727270);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE3B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSString * {__strong},1886548592u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::stubSetter);
}

uint64_t TV3Property<NSString * {__strong},1886548592u,17u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSString * {__strong},1886548592u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

BOOL TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x734u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = outData == 0;
  }
  uint64_t v5 = !v4;

  return v5;
}

void sub_18FFE3D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

uint64_t TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x734u, 0, 0, &outData, &ioDataSize))
  {
    BOOL v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData != 0;
  }

  return v6;
}

void sub_18FFE3E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,1844u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,1844u,0u>::marshalGetter_Bus);
}

void *TV3Property<BOOL,1844u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x734);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    uint64_t v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    uint64_t v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 BOOLValue];
  }
  return Value;
}

void sub_18FFE3F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,1844u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,1844u,0u>::marshalGetter_Global);
}

uint64_t TV3Property<BOOL,1844u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x734);
  if (Value)
  {
    BOOL v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    uint64_t v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 BOOLValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFE405C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<BOOL,1844u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,1844u,0u>::stubGetter);
}

uint64_t TV3Property<BOOL,1844u,0u>::stubGetter()
{
  return 0;
}

char *TV3Property<BOOL,1844u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 BOOLValue];
  return AudioUnitSetProperty(v3, 0x734u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F5B0;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F5B0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  BOOL v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x734u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    [MEMORY[0x1E4F28ED0] numberWithBool:outData != 0];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F5F8;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F5F8;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  uint64_t v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *uint64_t v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFE43D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F568;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F568;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<long,int,1845u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  inCFDataRef Data = a3;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x735u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);
}

void sub_18FFE4550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x735u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  int v4 = outData;
  if (Property) {
    int v4 = 0;
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_18FFE4600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<long,int,1845u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeGetter_Global);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x735u, 0, 0, &inData, 4u))
  {
    id v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFE470C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x735u, 0, 0, &outData, &ioDataSize))
  {
    int v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData;
  }

  return v6;
}

void sub_18FFE47B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<long,1845u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,1845u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  uint64_t v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<long,1845u,1u>::marshalSetter_Bus);
}

void TV3Property<long,1845u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  int v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x735);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithInteger:a3];
    id WeakRetained = objc_loadWeakRetained(v9 + 14);
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v9 + 32) element:*((unsigned int *)v9 + 33)];
    [WeakRetained _setValue:v6 forProperty:v8 error:0];
  }
}

void sub_18FFE4928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *TV3Property<long,1845u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x735);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 integerValue];
  }
  return Value;
}

void sub_18FFE4A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<long,1845u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,1845u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<long,1845u,1u>::marshalSetter_Global);
}

void TV3Property<long,1845u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  id v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  int v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x735);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithInteger:a3];
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v8 _setValue:v6 forProperty:v7 error:0];
  }
}

void sub_18FFE4B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<long,1845u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x735);
  if (Value)
  {
    int v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 integerValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFE4C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<long,1845u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,1845u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<long,1845u,1u>::stubSetter);
}

uint64_t TV3Property<long,1845u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<long,1845u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "q");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "q");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 integerValue];
  return AudioUnitSetProperty(v3, 0x735u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FE68;
}

void *std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FE68;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  int v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x735u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithInteger:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FEB0;
}

void *std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FEB0;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 4u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithInt:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FEF8;
}

void *std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FEF8;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *id v5 = [v6 intValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFE5120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FE20;
}

void *std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FE20;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  inCFDataRef Data = v5;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x736u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 8u);
}

void sub_18FFE52B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x736u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = outData;
  }
  return v4;
}

void sub_18FFE538C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  inCFDataRef Data = v6;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x736u, 0, 0, &inData, 8u))
  {
    id v7 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v7, a2);
    ((void (*)(id, const char *, id))MethodImplementation)(v5, a2, v6);
  }
}

void sub_18FFE54B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x736u, 0, 0, &outData, &ioDataSize))
  {
    id v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v6 = outData;
  }
  return v6;
}

void sub_18FFE5584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},1846u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::marshalSetter_Bus);
}

void TV3Property<NSString * {__strong},1846u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x736);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFE56F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1846u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x736);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE5804(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},1846u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::marshalSetter_Global);
}

void TV3Property<NSString * {__strong},1846u,1u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x736);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE5950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1846u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x736);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE5A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSString * {__strong},1846u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::stubSetter);
}

uint64_t TV3Property<NSString * {__strong},1846u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSString * {__strong},1846u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x736u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F010;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F010;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x736u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F058;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F058;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F0A0;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F0A0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EFC8;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EFC8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<long,int,65u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  inCFDataRef Data = a3;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x41u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);
}

void sub_18FFE6034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x41u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  int v4 = outData;
  if (Property) {
    int v4 = 0;
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_18FFE60E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<long,int,65u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeGetter_Global);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x41u, 0, 0, &inData, 4u))
  {
    id v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFE61F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x41u, 0, 0, &outData, &ioDataSize))
  {
    int v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData;
  }

  return v6;
}

void sub_18FFE6298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<long,65u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,65u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  uint64_t v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<long,65u,1u>::marshalSetter_Bus);
}

void TV3Property<long,65u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  int v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x41);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithInteger:a3];
    id WeakRetained = objc_loadWeakRetained(v9 + 14);
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v9 + 32) element:*((unsigned int *)v9 + 33)];
    [WeakRetained _setValue:v6 forProperty:v8 error:0];
  }
}

void sub_18FFE640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *TV3Property<long,65u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x41);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 integerValue];
  }
  return Value;
}

void sub_18FFE6510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<long,65u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,65u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<long,65u,1u>::marshalSetter_Global);
}

void TV3Property<long,65u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  id v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  int v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x41);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithInteger:a3];
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v8 _setValue:v6 forProperty:v7 error:0];
  }
}

void sub_18FFE6664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<long,65u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x41);
  if (Value)
  {
    int v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 integerValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFE673C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<long,65u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,65u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<long,65u,1u>::stubSetter);
}

uint64_t TV3Property<long,65u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<long,65u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "q");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "q");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<long,int,65u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 integerValue];
  return AudioUnitSetProperty(v3, 0x41u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0060;
}

void *std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0060;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  int v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x41u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithInteger:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA00A8;
}

void *std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA00A8;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 4u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithInt:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA00F0;
}

void *std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA00F0;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *id v5 = [v6 intValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFE6C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0018;
}

void *std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0018;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<long,int,64u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,64u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

uint64_t TAUProperty<long,int,64u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x40u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  int v4 = outData;
  if (Property) {
    int v4 = 0;
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_18FFE6D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<long,int,64u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,64u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

uint64_t TAUProperty<long,int,64u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x40u, 0, 0, &outData, &ioDataSize))
  {
    int v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData;
  }

  return v6;
}

void sub_18FFE6E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<long,64u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,64u,0u>::marshalGetter_Bus);
}

void *TV3Property<long,64u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x40);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    uint64_t v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    uint64_t v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 integerValue];
  }
  return Value;
}

void sub_18FFE6F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<long,64u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,64u,0u>::marshalGetter_Global);
}

uint64_t TV3Property<long,64u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x40);
  if (Value)
  {
    int v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    uint64_t v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 integerValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFE7004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<long,64u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,64u,0u>::stubGetter);
}

uint64_t TV3Property<long,64u,0u>::stubGetter()
{
  return 0;
}

char *TV3Property<long,64u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "q");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<long,int,64u,ScalarConverter,0u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 integerValue];
  return AudioUnitSetProperty(v3, 0x40u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FF88;
}

void *std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FF88;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  int v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x40u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithInteger:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FFD0;
}

void *std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FFD0;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  uint64_t v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *uint64_t v5 = [v6 intValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFE7370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FF40;
}

void *std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FF40;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  inCFDataRef Data = a3;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x42u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);
}

void sub_18FFE74F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x42u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = outData;
  }

  return v4;
}

void sub_18FFE759C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeGetter_Global);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x42u, 0, 0, &inData, 4u))
  {
    id v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFE76A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x42u, 0, 0, &outData, &ioDataSize))
  {
    uint64_t v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData;
  }

  return v6;
}

void sub_18FFE7750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<unsigned long,66u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  uint64_t v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::marshalSetter_Bus);
}

void TV3Property<unsigned long,66u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x42);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:a3];
    id WeakRetained = objc_loadWeakRetained(v9 + 14);
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v9 + 32) element:*((unsigned int *)v9 + 33)];
    [WeakRetained _setValue:v6 forProperty:v8 error:0];
  }
}

void sub_18FFE78C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *TV3Property<unsigned long,66u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x42);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 unsignedIntegerValue];
  }
  return Value;
}

void sub_18FFE79C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<unsigned long,66u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::marshalSetter_Global);
}

void TV3Property<unsigned long,66u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  id v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x42);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:a3];
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v8 _setValue:v6 forProperty:v7 error:0];
  }
}

void sub_18FFE7B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,66u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x42);
  if (Value)
  {
    uint64_t v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 unsignedIntegerValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFE7BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<unsigned long,66u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::stubSetter);
}

uint64_t TV3Property<unsigned long,66u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<unsigned long,66u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "Q");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "Q");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 unsignedIntegerValue];
  return AudioUnitSetProperty(v3, 0x42u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA03C0;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA03C0;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  uint64_t v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x42u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0408;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0408;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 4u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0450;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0450;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *id v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFE80BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0378;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0378;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2BridgeGetter_Bus);
}

id TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x2Fu, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = outData;
  }
  return v4;
}

void sub_18FFE8224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2BridgeGetter_Global);
}

id TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x2Fu, 0, 0, &outData, &ioDataSize))
  {
    id v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v6 = outData;
  }
  return v6;
}

void sub_18FFE8308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},47u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},47u,0u>::marshalGetter_Bus);
}

id TV3Property<NSArray * {__strong},47u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x2F);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE8414(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},47u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},47u,0u>::marshalGetter_Global);
}

id TV3Property<NSArray * {__strong},47u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x2F);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE8504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSArray * {__strong},47u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},47u,0u>::stubGetter);
}

uint64_t TV3Property<NSArray * {__strong},47u,0u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSArray * {__strong},47u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x2Fu, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EB00;
}

void *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EB00;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x2Fu, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EB48;
}

void *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EB48;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EAB8;
}

void *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EAB8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  ArrayVectorConverter<int>::ObjToC::ObjToC(&inData, *a3);
  uint64_t v4 = AudioUnitSetProperty(v3, 0x7D2u, 0, 0, inData, (v7 - inData) & 0xFFFFFFFC);
  if (inData)
  {
    id v7 = inData;
    operator delete(inData);
  }
  return v4;
}

void sub_18FFE893C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ArrayVectorConverter<int>::ObjToC::ObjToC(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v23 + 1) + 8 * i);
        int v9 = objc_msgSend(v8, "intValue", (void)v23);
        int v10 = v9;
        id v12 = (_DWORD *)a1[1];
        unint64_t v11 = a1[2];
        if ((unint64_t)v12 >= v11)
        {
          int v14 = (_DWORD *)*a1;
          uint64_t v15 = ((uint64_t)v12 - *a1) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v18);
            int v14 = (_DWORD *)*a1;
            id v12 = (_DWORD *)a1[1];
          }
          else
          {
            uint64_t v19 = 0;
          }
          long long v20 = (_DWORD *)(v18 + 4 * v15);
          *long long v20 = v10;
          int v13 = v20 + 1;
          while (v12 != v14)
          {
            int v21 = *--v12;
            *--long long v20 = v21;
          }
          *a1 = v20;
          a1[1] = v13;
          a1[2] = v18 + 4 * v19;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *id v12 = v9;
          int v13 = v12 + 1;
        }
        a1[1] = v13;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v5);
  }

  return a1;
}

void sub_18FFE8B2C(_Unwind_Exception *a1)
{
  id v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA05B8;
}

void *std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA05B8;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v5 = *a2;
  unint64_t v6 = *a3;
  id v7 = (id)objc_opt_new();

  if (v6 >= 4)
  {
    unint64_t v8 = v6 >> 2;
    do
    {
      unsigned int v9 = *v5++;
      id v10 = [MEMORY[0x1E4F28ED0] numberWithInt:v9];
      [v7 addObject:v10];

      --v8;
    }
    while (v8);
  }
  id v11 = v7;
  *a4 = 0;
  return v11;
}

void sub_18FFE8C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0648;
}

void *std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0648;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

id std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2)
{
  return TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Common(*a2, 0, 0);
}

id TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Common(OpaqueAudioComponentInstance *a1, AudioUnitScope inScope, AudioUnitElement inElement)
{
  memset(&v15, 0, sizeof(v15));
  UInt32 outDataSize = 0;
  Boolean outWritable = 0;
  if (AudioUnitGetPropertyInfo(a1, 0x7D2u, inScope, inElement, &outDataSize, &outWritable))
  {
    id v6 = 0;
    goto LABEL_6;
  }
  std::vector<unsigned int>::resize(&v15, (unint64_t)outDataSize >> 2);
  std::vector<int>::pointer begin = v15.__begin_;
  if (AudioUnitGetProperty(a1, 0x7D2u, inScope, inElement, v15.__begin_, &outDataSize))
  {
    id v6 = 0;
    if (!begin) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  id v9 = (id)objc_opt_new();

  std::vector<int>::pointer end = v15.__end_;
  if (begin != v15.__end_)
  {
    id v11 = (unsigned int *)begin;
    do
    {
      id v12 = [MEMORY[0x1E4F28ED0] numberWithInt:*v11];
      [v9 addObject:v12];

      ++v11;
    }
    while (v11 != (unsigned int *)end);
  }
  id v6 = v9;

  if (begin)
  {
LABEL_5:
    v15.__end_ = begin;
    operator delete(begin);
  }
LABEL_6:
  return v6;
}

void sub_18FFE8E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0600;
}

void *std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0600;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, void **a2, void **a3, _DWORD *a4)
{
  uint64_t v5 = *a3;
  ArrayVectorConverter<int>::ObjToC::ObjToC(&__p, *a2);
  id v6 = __p;
  int64_t v7 = v13 - (unsigned char *)__p;
  if (v13 == __p)
  {
    unint64_t v8 = 0;
    LODWORD(v9) = 0;
  }
  else
  {
    if (v7 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v7 >> 2);
    memmove(v8, v6, v7);
    id v9 = &v8[4 * (v7 >> 2)];
  }
  LODWORD(v10) = (v9 - v8) & 0xFFFFFFFC;
  if (v5)
  {
    if (v10 >= *a4) {
      size_t v10 = *a4;
    }
    else {
      size_t v10 = v10;
    }
    memcpy(v5, v8, v10);
  }
  *a4 = v10;
  if (v8) {
    operator delete(v8);
  }
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_18FFE902C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0570;
}

void *std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0570;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Bus);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Bus);
}

void TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Bus(uint64_t a1, uint64_t a2, void *a3)
{
}

void TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Common(OpaqueAudioComponentInstance *a1, void *a2)
{
  ArrayVectorConverter<int>::ObjToC::ObjToC(&inData, a2);
  AudioUnitSetProperty(a1, 0x7D2u, 0, 0, inData, (v4 - inData) & 0xFFFFFFFC);
  if (inData)
  {
    id v4 = inData;
    operator delete(inData);
  }
}

void sub_18FFE91A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Bus(uint64_t a1)
{
  uint64_t v1 = TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Common(*(OpaqueAudioComponentInstance **)(a1 + 120), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132));
  return v1;
}

BOOL TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Global);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Global);
}

void TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v4 = a3;
  TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Common((OpaqueAudioComponentInstance *)[v5 audioUnit], v4);
}

void sub_18FFE92E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Global(void *a1)
{
  id v1 = a1;
  uint64_t v2 = TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Common((OpaqueAudioComponentInstance *)[v1 audioUnit], 0, 0);

  return v2;
}

void sub_18FFE934C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},2002u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::marshalSetter_Bus);
}

void TV3Property<NSArray * {__strong},2002u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  size_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x7D2);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    id v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFE94B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},2002u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x7D2);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFE95C4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},2002u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::marshalSetter_Global);
}

void TV3Property<NSArray * {__strong},2002u,1u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x7D2);
  if (Value)
  {
    id v7 = v4;
    unint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFE9710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},2002u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x7D2);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFE97EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSArray * {__strong},2002u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::stubSetter);
}

uint64_t TV3Property<NSArray * {__strong},2002u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSArray * {__strong},2002u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TV3Property<NSArray * {__strong},2002u,1u>::v2PropertySize()
{
  return 0x100000000;
}

BOOL TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x3Au, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = outData == 0;
  }
  uint64_t v5 = !v4;

  return v5;
}

void sub_18FFE9A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

uint64_t TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x3Au, 0, 0, &outData, &ioDataSize))
  {
    BOOL v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData != 0;
  }

  return v6;
}

void sub_18FFE9AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,58u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,58u,0u>::marshalGetter_Bus);
}

void *TV3Property<BOOL,58u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x3A);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    uint64_t v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    uint64_t v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 BOOLValue];
  }
  return Value;
}

void sub_18FFE9BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,58u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,58u,0u>::marshalGetter_Global);
}

uint64_t TV3Property<BOOL,58u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x3A);
  if (Value)
  {
    BOOL v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    uint64_t v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 BOOLValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFE9CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<BOOL,58u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,58u,0u>::stubGetter);
}

uint64_t TV3Property<BOOL,58u,0u>::stubGetter()
{
  return 0;
}

char *TV3Property<BOOL,58u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 BOOLValue];
  return AudioUnitSetProperty(v3, 0x3Au, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FAC0;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FAC0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  BOOL v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x3Au, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    [MEMORY[0x1E4F28ED0] numberWithBool:outData != 0];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FB08;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FB08;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  uint64_t v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *uint64_t v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFEA03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FA78;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FA78;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeGetter_Bus);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  inCFDataRef Data = v5;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x19u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 8u);
}

void sub_18FFEA1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x19u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = outData;
  }
  return v4;
}

void sub_18FFEA2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  inCFDataRef Data = v6;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x19u, 0, 0, &inData, 8u))
  {
    id v7 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v7, a2);
    ((void (*)(id, const char *, id))MethodImplementation)(v5, a2, v6);
  }
}

void sub_18FFEA3CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x19u, 0, 0, &outData, &ioDataSize))
  {
    id v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v6 = outData;
  }
  return v6;
}

void sub_18FFEA4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},25u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::marshalSetter_Bus);
}

void TV3Property<NSString * {__strong},25u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  size_t v10 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x19);
  if (Value)
  {
    id v7 = v4;
    id WeakRetained = objc_loadWeakRetained(v10 + 14);
    uint64_t v9 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v10 + 32) element:*((unsigned int *)v10 + 33)];
    [WeakRetained _setValue:v7 forProperty:v9 error:0];
  }
}

void sub_18FFEA610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},25u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x19);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFEA720(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSString * {__strong},25u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::marshalSetter_Global);
}

void TV3Property<NSString * {__strong},25u,1u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  id v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v5, (const void *)0x19);
  if (Value)
  {
    id v7 = v4;
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v9 _setValue:v7 forProperty:v8 error:0];
  }
}

void sub_18FFEA86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},25u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x19);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFEA948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSString * {__strong},25u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::stubSetter);
}

uint64_t TV3Property<NSString * {__strong},25u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSString * {__strong},25u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  id v4 = *a3;
  if (v3
    && (uint64_t v5 = (*(uint64_t (**)(OpaqueAudioComponentInstance *))(*(void *)v3 + 8))(v3)) != 0
    && ((v6 = *(_DWORD **)(v5 + 8), int v7 = v6[9], v8 = v6[10], v9 = v6[11], v8 == 1297108039)
      ? (BOOL v10 = v7 == 1635085670)
      : (BOOL v10 = 0),
        v10 ? (BOOL v11 = v9 == 1129074009) : (BOOL v11 = 0),
        v11))
  {
    uint64_t v12 = 4294967292;
  }
  else
  {
    inCFDataRef Data = v4;
    uint64_t v12 = AudioUnitSetProperty(v3, 0x19u, 0, 0, &inData, 8u);
  }

  return v12;
}

void sub_18FFEAB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F370;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F370;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x19u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F3B8;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F3B8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 8u)
  {
    id v5 = **a2;
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F400;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F400;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *id v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F328;
}

void *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F328;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TV3Property<NSArray * {__strong},13u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},13u,0u>::marshalGetter_Bus);
}

id TV3Property<NSArray * {__strong},13u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0xD);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFEAFF4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},13u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},13u,0u>::marshalGetter_Global);
}

id TV3Property<NSArray * {__strong},13u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0xD);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFEB0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSArray * {__strong},13u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},13u,0u>::stubGetter);
}

uint64_t TV3Property<NSArray * {__strong},13u,0u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSArray * {__strong},13u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TV3Property<NSArray * {__strong},13u,0u>::v2PropertySize()
{
  return 0x100000000;
}

BOOL TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  inCFDataRef Data = a3;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x25u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);
}

void sub_18FFEB2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x25u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = outData == 0;
  }
  uint64_t v5 = !v4;

  return v5;
}

void sub_18FFEB370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeGetter_Global);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x25u, 0, 0, &inData, 4u))
  {
    id v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFEB47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x25u, 0, 0, &outData, &ioDataSize))
  {
    BOOL v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData != 0;
  }

  return v6;
}

void sub_18FFEB52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,37u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  uint64_t v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,37u,1u>::marshalSetter_Bus);
}

void TV3Property<BOOL,37u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  BOOL v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x25);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithBool:a3];
    id WeakRetained = objc_loadWeakRetained(v9 + 14);
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v9 + 32) element:*((unsigned int *)v9 + 33)];
    [WeakRetained _setValue:v6 forProperty:v8 error:0];
  }
}

void sub_18FFEB6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *TV3Property<BOOL,37u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x25);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 BOOLValue];
  }
  return Value;
}

void sub_18FFEB7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,37u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,37u,1u>::marshalSetter_Global);
}

void TV3Property<BOOL,37u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  id v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  BOOL v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x25);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithBool:a3];
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v8 _setValue:v6 forProperty:v7 error:0];
  }
}

void sub_18FFEB8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,37u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x25);
  if (Value)
  {
    BOOL v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 BOOLValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFEB9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<BOOL,37u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,37u,1u>::stubSetter);
}

uint64_t TV3Property<BOOL,37u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<BOOL,37u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "B");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 BOOLValue];
  return AudioUnitSetProperty(v3, 0x25u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F880;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F880;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  BOOL v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x25u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    [MEMORY[0x1E4F28ED0] numberWithBool:outData != 0];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F8C8;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F8C8;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 4u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F910;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F910;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *id v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFEBEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F838;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F838;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x1Du, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = outData == 0;
  }
  uint64_t v5 = !v4;

  return v5;
}

void sub_18FFEBFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

uint64_t TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x1Du, 0, 0, &outData, &ioDataSize))
  {
    BOOL v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData != 0;
  }

  return v6;
}

void sub_18FFEC0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,29u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,29u,0u>::marshalGetter_Bus);
}

void *TV3Property<BOOL,29u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x1D);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    uint64_t v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    uint64_t v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 BOOLValue];
  }
  return Value;
}

void sub_18FFEC1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,29u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,29u,0u>::marshalGetter_Global);
}

uint64_t TV3Property<BOOL,29u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x1D);
  if (Value)
  {
    BOOL v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    uint64_t v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 BOOLValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFEC2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<BOOL,29u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,29u,0u>::stubGetter);
}

uint64_t TV3Property<BOOL,29u,0u>::stubGetter()
{
  return 0;
}

char *TV3Property<BOOL,29u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 BOOLValue];
  return AudioUnitSetProperty(v3, 0x1Du, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F7A8;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F7A8;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  BOOL v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x1Du, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    [MEMORY[0x1E4F28ED0] numberWithBool:outData != 0];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F7F0;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F7F0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  uint64_t v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *uint64_t v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFEC61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F760;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F760;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  inCFDataRef Data = a3;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x15u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);
}

void sub_18FFEC79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x15u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = outData == 0;
  }
  uint64_t v5 = !v4;

  return v5;
}

void sub_18FFEC84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeGetter_Global);
  uint64_t v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x15u, 0, 0, &inData, 4u))
  {
    id v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFEC958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x15u, 0, 0, &outData, &ioDataSize))
  {
    BOOL v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData != 0;
  }

  return v6;
}

void sub_18FFECA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,21u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  uint64_t v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,21u,1u>::marshalSetter_Bus);
}

void TV3Property<BOOL,21u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  BOOL v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x15);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithBool:a3];
    id WeakRetained = objc_loadWeakRetained(v9 + 14);
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v9 + 32) element:*((unsigned int *)v9 + 33)];
    [WeakRetained _setValue:v6 forProperty:v8 error:0];
  }
}

void sub_18FFECB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *TV3Property<BOOL,21u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x15);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 BOOLValue];
  }
  return Value;
}

void sub_18FFECC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<BOOL,21u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,21u,1u>::marshalSetter_Global);
}

void TV3Property<BOOL,21u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  id v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  BOOL v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x15);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithBool:a3];
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v8 _setValue:v6 forProperty:v7 error:0];
  }
}

void sub_18FFECDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,21u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x15);
  if (Value)
  {
    BOOL v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 BOOLValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFECEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<BOOL,21u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<BOOL,21u,1u>::stubSetter);
}

uint64_t TV3Property<BOOL,21u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<BOOL,21u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "B");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::v2PropertySize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t PropertySizeXPC = getPropertySizeXPC(v6, 21, a3, a4);
    uint64_t v8 = PropertySizeXPC & 0x100000000;
    uint64_t v9 = PropertySizeXPC;
  }
  else
  {
    uint64_t v8 = 0x100000000;
    uint64_t v9 = 4;
  }

  return v9 | v8;
}

void sub_18FFED09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 BOOLValue];
  return AudioUnitSetProperty(v3, 0x15u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F688;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F688;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  BOOL v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x15u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    [MEMORY[0x1E4F28ED0] numberWithBool:outData != 0];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F6D0;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F6D0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 4u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F718;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F718;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *id v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFED400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9F640;
}

void *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9F640;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  inCFDataRef Data = a3;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0x1Au, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);
}

void sub_18FFED580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x1Au, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = outData;
  }

  return v4;
}

void sub_18FFED62C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0x1Au, 0, 0, &inData, 4u))
  {
    id v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFED738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x1Au, 0, 0, &outData, &ioDataSize))
  {
    uint64_t v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData;
  }

  return v6;
}

void sub_18FFED7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<unsigned long,26u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  uint64_t v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::marshalSetter_Bus);
}

void TV3Property<unsigned long,26u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x1A);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:a3];
    id WeakRetained = objc_loadWeakRetained(v9 + 14);
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v9 + 32) element:*((unsigned int *)v9 + 33)];
    [WeakRetained _setValue:v6 forProperty:v8 error:0];
  }
}

void sub_18FFED954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *TV3Property<unsigned long,26u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x1A);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 unsignedIntegerValue];
  }
  return Value;
}

void sub_18FFEDA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<unsigned long,26u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::marshalSetter_Global);
}

void TV3Property<unsigned long,26u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  id v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0x1A);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:a3];
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v8 _setValue:v6 forProperty:v7 error:0];
  }
}

void sub_18FFEDBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,26u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x1A);
  if (Value)
  {
    uint64_t v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 unsignedIntegerValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFEDC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<unsigned long,26u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::stubSetter);
}

uint64_t TV3Property<unsigned long,26u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<unsigned long,26u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "Q");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "Q");
  IMP result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 unsignedIntegerValue];
  return AudioUnitSetProperty(v3, 0x1Au, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA02A0;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA02A0;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  uint64_t v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0x1Au, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA02E8;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA02E8;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 4u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0330;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0330;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *id v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFEE14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0258;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDFA0258;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<double,double,20u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,20u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

double TAUProperty<double,double,20u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x14u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    double v4 = 0.0;
  }
  else {
    double v4 = outData;
  }

  return v4;
}

void sub_18FFEE2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<double,double,20u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,20u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

double TAUProperty<double,double,20u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x14u, 0, 0, &outData, &ioDataSize))
  {
    double v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    double v6 = ((double (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    double v6 = outData;
  }

  return v6;
}

void sub_18FFEE36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<double,20u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,20u,0u>::marshalGetter_Bus);
}

double TV3Property<double,20u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x14);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    double v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    [v7 doubleValue];
    double v9 = v8;
  }
  else
  {
    double v9 = 0.0;
  }

  return v9;
}

void sub_18FFEE47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<double,20u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,20u,0u>::marshalGetter_Global);
}

double TV3Property<double,20u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x14);
  if (Value)
  {
    double v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    [v6 doubleValue];
    double v8 = v7;
  }
  else
  {
    double v8 = 0.0;
  }

  return v8;
}

void sub_18FFEE57C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

IMP TV3Property<double,20u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,20u,0u>::stubGetter);
}

double TV3Property<double,20u,0u>::stubGetter()
{
  return 0.0;
}

char *TV3Property<double,20u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "d");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<double,double,20u,ScalarConverter,0u>::v2PropertySize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t PropertySizeXPC = getPropertySizeXPC(v6, 20, a3, a4);
    uint64_t v8 = PropertySizeXPC & 0x100000000;
    uint64_t v9 = PropertySizeXPC;
  }
  else
  {
    uint64_t v8 = 0x100000000;
    uint64_t v9 = 8;
  }

  return v9 | v8;
}

void sub_18FFEE6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  [*a3 doubleValue];
  inCFDataRef Data = v4;
  return AudioUnitSetProperty(v3, 0x14u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FC70;
}

void *std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FC70;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  uint64_t v4 = *a3;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x14u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithDouble:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FCB8;
}

void *std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FCB8;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
    {
      [v6 doubleValue];
      *id v5 = v9;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFEE974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FC28;
}

void *std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FC28;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<double,double,12u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,12u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

double TAUProperty<double,double,12u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0xCu, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    double v4 = 0.0;
  }
  else {
    double v4 = outData;
  }

  return v4;
}

void sub_18FFEEAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<double,double,12u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,12u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

double TAUProperty<double,double,12u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0xCu, 0, 0, &outData, &ioDataSize))
  {
    double v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    double v6 = ((double (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    double v6 = outData;
  }

  return v6;
}

void sub_18FFEEB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<double,12u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,12u,0u>::marshalGetter_Bus);
}

double TV3Property<double,12u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0xC);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    double v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    [v7 doubleValue];
    double v9 = v8;
  }
  else
  {
    double v9 = 0.0;
  }

  return v9;
}

void sub_18FFEECA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<double,12u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,12u,0u>::marshalGetter_Global);
}

double TV3Property<double,12u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0xC);
  if (Value)
  {
    double v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    [v6 doubleValue];
    double v8 = v7;
  }
  else
  {
    double v8 = 0.0;
  }

  return v8;
}

void sub_18FFEEDA4(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

IMP TV3Property<double,12u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,12u,0u>::stubGetter);
}

double TV3Property<double,12u,0u>::stubGetter()
{
  return 0.0;
}

char *TV3Property<double,12u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "d");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<double,double,12u,ScalarConverter,0u>::v2PropertySize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t PropertySizeXPC = getPropertySizeXPC(v6, 12, a3, a4);
    uint64_t v8 = PropertySizeXPC & 0x100000000;
    uint64_t v9 = PropertySizeXPC;
  }
  else
  {
    uint64_t v8 = 0x100000000;
    uint64_t v9 = 8;
  }

  return v9 | v8;
}

void sub_18FFEEF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  [*a3 doubleValue];
  inCFDataRef Data = v4;
  return AudioUnitSetProperty(v3, 0xCu, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FB98;
}

void *std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FB98;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  uint64_t v4 = *a3;
  outCFDataRef Data = 0.0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0xCu, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithDouble:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FBE0;
}

void *std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FBE0;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
    {
      [v6 doubleValue];
      *id v5 = v9;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFEF19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9FB50;
}

void *std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9FB50;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2BridgeGetter_Bus);
}

id TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 16;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x24u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), outData, &ioDataSize);

  if (Property)
  {
    id v4 = 0;
  }
  else
  {
    PresetConverter::CToObj<true,false>::CToObj(&v6, outData);
    id v4 = v6;
  }
  return v4;
}

void sub_18FFEF30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *PresetConverter::CToObj<true,false>::CToObj(id *a1, int *a2)
{
  *a1 = 0;
  uint64_t v4 = objc_opt_new();
  id v5 = *a1;
  *a1 = (id)v4;

  [*a1 setNumber:*a2];
  id v6 = (void *)*((void *)a2 + 1);
  [*a1 setName:v6];

  return a1;
}

void sub_18FFEF394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2BridgeGetter_Global);
}

id TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 16;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x24u, 0, 0, outData, &ioDataSize))
  {
    uint64_t v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    PresetConverter::CToObj<true,false>::CToObj(&v8, outData);
    id v6 = v8;
  }
  return v6;
}

void sub_18FFEF48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::marshalGetter_Bus);
}

id TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x24);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFEF59C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::marshalGetter_Global);
}

id TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x24);
  if (Value)
  {
    uint64_t v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFEF68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::stubGetter);
}

uint64_t TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::stubGetter()
{
  return 0;
}

char *TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2PropertySize()
{
  return 0x100000010;
}

uint64_t std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  id v4 = *a3;
  id v8 = v4;
  inData[0] = PresetConverter::ObjToC<true>::operator AUPreset(&v8);
  inData[1] = v5;

  uint64_t v6 = AudioUnitSetProperty(v3, 0x24u, 0, 0, inData, 0x10u);
  return v6;
}

void sub_18FFEF7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PresetConverter::ObjToC<true>::operator AUPreset(id *a1)
{
  unsigned int v2 = [*a1 number];
  [*a1 name];

  return v2;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EA28;
}

void *std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EA28;
  return result;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  UInt32 ioDataSize = 16;
  OSStatus Property = AudioUnitGetProperty(v3, 0x24u, 0, 0, outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    PresetConverter::CToObj<true,false>::CToObj(&v10, outData);
    id v8 = v10;

    id v7 = v8;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EA70;
}

void *std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9EA70;
  return result;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  uint64_t v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 0x10u)
  {
    if (v5)
    {
      id v9 = v6;
      unsigned int v10 = [v9 number];
      uint64_t v11 = [v9 name];
      *uint64_t v5 = v10;
      v5[1] = v11;
    }
    uint64_t v8 = 0;
    *a4 = 16;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFEFAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E9E0;
}

void *std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  IMP result = operator new(0x10uLL);
  *IMP result = &unk_1EDF9E9E0;
  return result;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2BridgeGetter_Bus);
}

id TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x18u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    id v4 = 0;
  }
  else
  {
    FactoryPresetsConverter::CToObj<true>::CToObj(&v6, outData);
    id v4 = v6;
  }
  return v4;
}

void sub_18FFEFC18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *FactoryPresetsConverter::CToObj<true>::CToObj(id *a1, CFArrayRef theArray)
{
  *a1 = 0;
  int Count = CFArrayGetCount(theArray);
  uint64_t v5 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:Count];
  id v6 = *a1;
  *a1 = (id)v5;

  if (Count >= 1)
  {
    CFIndex v7 = 0;
    uint64_t v8 = Count;
    do
    {
      ValueAtIndex = (int *)CFArrayGetValueAtIndex(theArray, v7);
      unsigned int v10 = objc_opt_new();
      [v10 setNumber:*ValueAtIndex];
      [v10 setName:*((void *)ValueAtIndex + 1)];
      id v11 = v10;
      [*a1 addObject:v11];

      ++v7;
    }
    while (v8 != v7);
  }
  CFRelease(theArray);
  return a1;
}

void sub_18FFEFD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2BridgeGetter_Global);
}

id TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x18u, 0, 0, &outData, &ioDataSize))
  {
    id v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    FactoryPresetsConverter::CToObj<true>::CToObj(&v8, outData);
    id v6 = v8;
  }
  return v6;
}

void sub_18FFEFE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},24u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},24u,0u>::marshalGetter_Bus);
}

id TV3Property<NSArray * {__strong},24u,0u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  unsigned int v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x18);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    uint64_t v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFEFF50(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSArray * {__strong},24u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},24u,0u>::marshalGetter_Global);
}

id TV3Property<NSArray * {__strong},24u,0u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  unsigned int v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x18);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    uint64_t v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFF0040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSArray * {__strong},24u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},24u,0u>::stubGetter);
}

uint64_t TV3Property<NSArray * {__strong},24u,0u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSArray * {__strong},24u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  IMP result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  id v4 = *a3;
  CFArrayCallBacks callBacks = *(CFArrayCallBacks *)byte_1EDFA4270;
  int v5 = [v4 count];
  CFMutableArrayRef v6 = CFArrayCreateMutable(0, v5, &callBacks);
  if (v5 >= 1)
  {
    v9[1] = [v4 objectAtIndexedSubscript:0];
    operator new();
  }

  v9[0] = v6;
  uint64_t v7 = AudioUnitSetProperty(v3, 0x18u, 0, 0, v9, 8u);

  return v7;
}

void sub_18FFF0264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RefCountedAUPreset::cfRelease(RefCountedAUPreset *this, const __CFAllocator *a2, const void *a3)
{
  int v3 = *((_DWORD *)a2 + 4) - 1;
  *((_DWORD *)a2 + 4) = v3;
  if (a2)
  {
    if (!v3) {
      JUMPOUT(0x192FC8940);
    }
  }
}

const __CFAllocator *RefCountedAUPreset::cfRetain(RefCountedAUPreset *this, const __CFAllocator *a2, const void *a3)
{
  CFAllocatorRef result = a2;
  ++*((_DWORD *)a2 + 4);
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EBD8;
}

void *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9EBD8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  int v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x18u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    FactoryPresetsConverter::CToObj<true>::CToObj(&v10, outData);
    id v8 = v10;

    id v7 = v8;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EC20;
}

void *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9EC20;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, CFMutableArrayRef **a3, _DWORD *a4)
{
  int v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
    {
      id v9 = v6;
      int v10 = objc_msgSend(v9, "count", *(void *)byte_1EDFA4270, *(void *)&byte_1EDFA4270[8], *(void *)&byte_1EDFA4270[16], *(void *)&byte_1EDFA4270[24], *(void *)&byte_1EDFA4270[32]);
      CFMutableArrayRef v11 = CFArrayCreateMutable(0, v10, &v14);
      if (v10 >= 1)
      {
        id v12 = [v9 objectAtIndexedSubscript:0];
        operator new();
      }
      *int v5 = v11;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFF0600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9EB90;
}

void *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9EB90;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2BridgeGetter_Bus);
}

id TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0x32u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = outData;
  }
  return v4;
}

void sub_18FFF07A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2BridgeGetter_Global);
}

id TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0x32u, 0, 0, &outData, &ioDataSize))
  {
    id v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v6 = outData;
  }
  return v6;
}

void sub_18FFF0884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSDictionary * {__strong},50u,4u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},50u,4u>::marshalGetter_Bus);
}

id TV3Property<NSDictionary * {__strong},50u,4u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  unsigned int v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x32);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    int v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFF0990(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSDictionary * {__strong},50u,4u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},50u,4u>::marshalGetter_Global);
}

id TV3Property<NSDictionary * {__strong},50u,4u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  unsigned int v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0x32);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    int v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFF0A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSDictionary * {__strong},50u,4u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},50u,4u>::stubGetter);
}

uint64_t TV3Property<NSDictionary * {__strong},50u,4u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSDictionary * {__strong},50u,4u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  CFAllocatorRef result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0x32u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E950;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9E950;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0x32u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E998;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9E998;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  int v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *int v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E908;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9E908;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2BridgeGetter_Bus);
}

id TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = outData;
  }
  return v4;
}

void sub_18FFF0F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2BridgeGetter_Global);
}

id TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0, 0, 0, &outData, &ioDataSize))
  {
    id v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v6 = outData;
  }
  return v6;
}

void sub_18FFF1004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<NSDictionary * {__strong},0u,4u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},0u,4u>::marshalGetter_Bus);
}

id TV3Property<NSDictionary * {__strong},0u,4u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  unsigned int v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, 0);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    int v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_18FFF1110(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL TV3Property<NSDictionary * {__strong},0u,4u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},0u,4u>::marshalGetter_Global);
}

id TV3Property<NSDictionary * {__strong},0u,4u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  unsigned int v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, 0);
  if (Value)
  {
    id v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    int v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_18FFF1200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<NSDictionary * {__strong},0u,4u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},0u,4u>::stubGetter);
}

uint64_t TV3Property<NSDictionary * {__strong},0u,4u>::stubGetter()
{
  return 0;
}

char *TV3Property<NSDictionary * {__strong},0u,4u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  CFAllocatorRef result = strdup(__str);
  *(void *)(a3 + 16) = result;
  return result;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2PropertySize()
{
  return 0x100000008;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = *a3;
  return AudioUnitSetProperty(v3, 0, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E878;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9E878;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  id v4 = *a3;
  outCFDataRef Data = 0;
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioUnitGetProperty(v3, 0, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = outData;
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E8C0;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9E8C0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  int v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5) {
      *int v5 = v6;
    }
    uint64_t v8 = 0;
    *a4 = 8;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E830;
}

void *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDF9E830;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

BOOL TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  int v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

void TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4 = a1;
  inCFDataRef Data = a3;
  id WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)[WeakRetained audioUnit], 0xEu, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);
}

void sub_18FFF16B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  id WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  OSStatus Property = AudioUnitGetProperty((AudioUnit)[WeakRetained audioUnit], 0xEu, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = outData;
  }

  return v4;
}

void sub_18FFF1764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeGetter_Global);
  int v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

void TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5 = a1;
  inCFDataRef Data = a3;
  if (AudioUnitSetProperty((AudioUnit)[v5 audioUnit], 0xEu, 0, 0, &inData, 4u))
  {
    id v6 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }
}

void sub_18FFF1870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3 = a1;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  if (AudioUnitGetProperty((AudioUnit)[v3 audioUnit], 0xEu, 0, 0, &outData, &ioDataSize))
  {
    uint64_t v4 = (objc_class *)objc_opt_class();
    IMP MethodImplementation = class_getMethodImplementation(v4, a2);
    uint64_t v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    uint64_t v6 = outData;
  }

  return v6;
}

void sub_18FFF1918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<unsigned long,14u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::marshalGetter_Bus);
  id v5 = *(const char **)(a2 + 8);
  uint64_t v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::marshalSetter_Bus);
}

void TV3Property<unsigned long,14u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0xE);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:a3];
    id WeakRetained = objc_loadWeakRetained(v9 + 14);
    uint64_t v8 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v9 + 32) element:*((unsigned int *)v9 + 33)];
    [WeakRetained _setValue:v6 forProperty:v8 error:0];
  }
}

void sub_18FFF1A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *TV3Property<unsigned long,14u,1u>::marshalGetter_Bus(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  unsigned int v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0xE);
  if (Value)
  {
    id WeakRetained = objc_loadWeakRetained(v1 + 14);
    id v5 = +[AUAudioUnitProperty propertyWithKey:Value[1] scope:*((unsigned int *)v1 + 32) element:*((unsigned int *)v1 + 33)];
    id v6 = [WeakRetained _getValueForProperty:v5 error:0];

    id v7 = v6;
    CFNumberRef Value = (void *)[v7 unsignedIntegerValue];
  }
  return Value;
}

void sub_18FFF1B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TV3Property<unsigned long,14u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::marshalGetter_Global);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::addSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::marshalSetter_Global);
}

void TV3Property<unsigned long,14u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  id v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  uint64_t v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v4, (const void *)0xE);
  if (Value)
  {
    id v6 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:a3];
    id v7 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    [v8 _setValue:v6 forProperty:v7 error:0];
  }
}

void sub_18FFF1CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,14u,1u>::marshalGetter_Global(void *a1)
{
  id v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  unsigned int v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v2, (const void *)0xE);
  if (Value)
  {
    uint64_t v4 = +[AUAudioUnitProperty propertyWithKey:Value[1]];
    id v5 = [v1 _getValueForProperty:v4 error:0];

    id v6 = v5;
    uint64_t v7 = [v6 unsignedIntegerValue];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18FFF1DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP TV3Property<unsigned long,14u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::stubGetter);
  id v5 = *(const char **)(a2 + 8);
  id v6 = *(objc_class **)(a2 + 24);
  return AUProperty::Swizzler::replaceSetter(v5, v6, a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::stubSetter);
}

uint64_t TV3Property<unsigned long,14u,1u>::stubGetter()
{
  return 0;
}

char *TV3Property<unsigned long,14u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = (objc_class *)[*(id *)(a1 + 8) UTF8String];
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "Q");
  *(void *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "Q");
  CFAllocatorRef result = strdup(__str);
  *(void *)(a3 + 24) = result;
  return result;
}

uint64_t TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  id v3 = *a2;
  inCFDataRef Data = [*a3 unsignedIntegerValue];
  return AudioUnitSetProperty(v3, 0xEu, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0180;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDFA0180;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  id v3 = *a2;
  uint64_t v4 = *a3;
  UInt32 ioDataSize = 4;
  outCFDataRef Data = 0;
  OSStatus Property = AudioUnitGetProperty(v3, 0xEu, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      id v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:Property userInfo:0];
      void *v4 = v6;
    }
    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:outData];
  }
  return v7;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA01C8;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDFA01C8;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  if (*a3 >= 4u)
  {
    id v5 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:**a2];
    int v6 = 0;
  }
  else
  {
    id v5 = 0;
    int v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0210;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDFA0210;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  id v5 = *a3;
  id v6 = *a2;
  id v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5) {
      *id v5 = [v6 unsignedIntValue];
    }
    uint64_t v8 = 0;
    *a4 = 4;
  }
  else
  {
    uint64_t v8 = 4294956445;
  }

  return v8;
}

void sub_18FFF2284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0138;
}

void *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  CFAllocatorRef result = operator new(0x10uLL);
  *CFAllocatorRef result = &unk_1EDFA0138;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
}

uint64_t MP413KVoiceSpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 20);
    int v5 = v7 + 32;
    BOOL v9 = v7 == -32;
    *(void *)a2 += 4;
    int v6 = (v8 >> v7) | v4;
    unsigned int v10 = v8 << -(char)v7;
    if (v9) {
      unsigned int v4 = 0;
    }
    else {
      unsigned int v4 = v10;
    }
    *(_DWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 20) = v5;
  }
  else
  {
    int v6 = v4;
  }
  if (v6 != 1363952461)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v175 = 136315394;
      v176 = "ACMP4BitStreams.cpp";
      __int16 v177 = 1024;
      int v178 = 1349;
      int v13 = MEMORY[0x1E4F14500];
      CFArrayCallBacks v14 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: unsupported voice format";
LABEL_54:
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v175, 0x12u);
    }
    return 4294967090;
  }
  *(_DWORD *)(a1 + 8) = 1363952461;
  int v11 = v5 - 32;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    std::vector<int> v15 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v15;
    unsigned int v16 = *(_DWORD *)(a2 + 16);
    int v17 = *(_DWORD *)(a2 + 20);
    int v12 = (v16 >> v17) | v4;
    int v11 = v17 + 32;
    if (v17 == -32)
    {
      unsigned int v18 = 0;
      *(_DWORD *)(a1 + 12) = v12;
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_18;
    }
    unsigned int v4 = v16 << -(char)v17;
    *(_DWORD *)(a2 + 16) = v4;
  }
  else
  {
    int v12 = v4;
  }
  *(_DWORD *)(a1 + 12) = v12;
  unsigned int v18 = HIBYTE(v4);
  int v19 = v11 - 8;
  *(_DWORD *)(a2 + 20) = v19;
  if (v19 >= 0)
  {
    unsigned int v20 = v4 << 8;
    goto LABEL_20;
  }
  std::vector<int> v15 = *(unsigned int **)a2;
LABEL_18:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
  int v21 = (unsigned int *)(*(void *)a2 + 4);
  *(void *)a2 = v21;
  unsigned int v22 = *(_DWORD *)(a2 + 16);
  int v23 = *(_DWORD *)(a2 + 20);
  v18 |= v22 >> v23;
  int v19 = v23 + 32;
  if (v23 == -32)
  {
    unsigned int v25 = 0;
    *(_DWORD *)(a1 + 16) = v18;
    long long v24 = (_DWORD *)(a1 + 16);
    *(void *)(a2 + 16) = 0xFFFFFFF800000000;
LABEL_24:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v21);
    *(void *)a2 += 4;
    unsigned int v28 = *(_DWORD *)(a2 + 16);
    int v29 = *(_DWORD *)(a2 + 20);
    v25 |= v28 >> v29;
    int v26 = v29 + 32;
    if (v29 == -32) {
      unsigned int v27 = 0;
    }
    else {
      unsigned int v27 = v28 << -(char)v29;
    }
    goto LABEL_27;
  }
  unsigned int v20 = v22 << -(char)v23;
LABEL_20:
  *(_DWORD *)(a2 + 16) = v20;
  *(_DWORD *)(a1 + 16) = v18;
  long long v24 = (_DWORD *)(a1 + 16);
  unsigned int v25 = HIBYTE(v20);
  int v26 = v19 - 8;
  *(_DWORD *)(a2 + 20) = v26;
  if (v26 < 0)
  {
    int v21 = *(unsigned int **)a2;
    goto LABEL_24;
  }
  unsigned int v27 = v20 << 8;
LABEL_27:
  *(_DWORD *)(a2 + 16) = v27;
  *v24 += v25 << 8;
  unsigned int v30 = HIBYTE(v27);
  int v31 = v26 - 8;
  *(_DWORD *)(a2 + 20) = v31;
  if (v31 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v33 = *(_DWORD *)(a2 + 16);
    int v34 = *(_DWORD *)(a2 + 20);
    v30 |= v33 >> v34;
    int v31 = v34 + 32;
    if (v34 == -32) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = v33 << -(char)v34;
    }
  }
  else
  {
    unsigned int v32 = v27 << 8;
  }
  *(_DWORD *)(a2 + 16) = v32;
  *v24 += v30 << 16;
  unsigned int v35 = HIBYTE(v32);
  int v36 = v31 - 8;
  *(_DWORD *)(a2 + 20) = v36;
  if (v36 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v38 = *(_DWORD *)(a2 + 16);
    int v39 = *(_DWORD *)(a2 + 20);
    v35 |= v38 >> v39;
    int v36 = v39 + 32;
    if (v39 == -32) {
      unsigned int v37 = 0;
    }
    else {
      unsigned int v37 = v38 << -(char)v39;
    }
  }
  else
  {
    unsigned int v37 = v32 << 8;
  }
  *(_DWORD *)(a2 + 16) = v37;
  *v24 += v35 << 24;
  unsigned int v40 = HIBYTE(v37);
  int v41 = v36 - 8;
  *(_DWORD *)(a2 + 20) = v41;
  if (v41 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    uint64_t v43 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v43;
    unsigned int v44 = *(_DWORD *)(a2 + 16);
    int v45 = *(_DWORD *)(a2 + 20);
    v40 |= v44 >> v45;
    int v41 = v45 + 32;
    if (v45 == -32)
    {
      unsigned int v46 = 0;
      *(unsigned char *)(a1 + 20) = v40;
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_45;
    }
    unsigned int v42 = v44 << -(char)v45;
  }
  else
  {
    unsigned int v42 = v37 << 8;
  }
  *(_DWORD *)(a2 + 16) = v42;
  *(unsigned char *)(a1 + 20) = v40;
  unsigned int v46 = HIBYTE(v42);
  int v47 = v41 - 8;
  *(_DWORD *)(a2 + 20) = v47;
  if (v47 >= 0)
  {
    int v48 = v42 << 8;
    goto LABEL_48;
  }
  uint64_t v43 = *(unsigned int **)a2;
LABEL_45:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v43);
  *(void *)a2 += 4;
  unsigned int v49 = *(_DWORD *)(a2 + 16);
  int v50 = *(_DWORD *)(a2 + 20);
  v46 |= v49 >> v50;
  *(_DWORD *)(a2 + 20) = v50 + 32;
  if (v50 == -32) {
    int v48 = 0;
  }
  else {
    int v48 = v49 << -(char)v50;
  }
LABEL_48:
  *(_DWORD *)(a2 + 16) = v48;
  *(unsigned char *)(a1 + 21) = v46;
  if (*(unsigned char *)(a1 + 20) != 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v175 = 136315394;
      v176 = "ACMP4BitStreams.cpp";
      __int16 v177 = 1024;
      int v178 = 1370;
      int v13 = MEMORY[0x1E4F14500];
      CFArrayCallBacks v14 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: unsupported voice format major version";
      goto LABEL_54;
    }
    return 4294967090;
  }
  if ((_BYTE)v46)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v175 = 136315394;
      v176 = "ACMP4BitStreams.cpp";
      __int16 v177 = 1024;
      int v178 = 1371;
      int v13 = MEMORY[0x1E4F14500];
      CFArrayCallBacks v14 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: unsupported voice format minor version";
      goto LABEL_54;
    }
    return 4294967090;
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    unsigned int v53 = *(_DWORD *)(a2 + 16);
    unsigned int v54 = HIBYTE(v53);
    int v55 = *(_DWORD *)(a2 + 20) - 8;
    *(_DWORD *)(a2 + 20) = v55;
    if (v55 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v57 = *(_DWORD *)(a2 + 16);
      int v58 = *(_DWORD *)(a2 + 20);
      v54 |= v57 >> v58;
      *(_DWORD *)(a2 + 20) = v58 + 32;
      if (v58 == -32) {
        int v56 = 0;
      }
      else {
        int v56 = v57 << -(char)v58;
      }
    }
    else
    {
      int v56 = v53 << 8;
    }
    *(_DWORD *)(a2 + 16) = v56;
    *(unsigned char *)(a1 + 22 + i) = v54;
  }
  unsigned int v59 = *(_DWORD *)(a2 + 16);
  unsigned int v60 = HIBYTE(v59);
  int v61 = *(_DWORD *)(a2 + 20) - 8;
  *(_DWORD *)(a2 + 20) = v61;
  if (v61 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    int64x2_t v63 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v63;
    unsigned int v64 = *(_DWORD *)(a2 + 16);
    int v65 = *(_DWORD *)(a2 + 20);
    v60 |= v64 >> v65;
    int v61 = v65 + 32;
    if (v65 == -32)
    {
      unsigned int v67 = 0;
      *(_WORD *)(a1 + 38) = v60;
      unint64_t v66 = (_WORD *)(a1 + 38);
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
LABEL_71:
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v63);
      *(void *)a2 += 4;
      unsigned int v70 = *(_DWORD *)(a2 + 16);
      int v71 = *(_DWORD *)(a2 + 20);
      v67 |= v70 >> v71;
      *(_DWORD *)(a2 + 20) = v71 + 32;
      if (v71 == -32) {
        int v69 = 0;
      }
      else {
        int v69 = v70 << -(char)v71;
      }
      goto LABEL_74;
    }
    unsigned int v62 = v64 << -(char)v65;
  }
  else
  {
    unsigned int v62 = v59 << 8;
  }
  *(_DWORD *)(a2 + 16) = v62;
  *(_WORD *)(a1 + 38) = v60;
  unint64_t v66 = (_WORD *)(a1 + 38);
  unsigned int v67 = HIBYTE(v62);
  int v68 = v61 - 8;
  *(_DWORD *)(a2 + 20) = v68;
  if (v68 < 0)
  {
    int64x2_t v63 = *(unsigned int **)a2;
    goto LABEL_71;
  }
  int v69 = v62 << 8;
LABEL_74:
  *(_DWORD *)(a2 + 16) = v69;
  *v66 += (_WORD)v67 << 8;
  for (uint64_t j = 40; j != 120; ++j)
  {
    unsigned int v73 = *(_DWORD *)(a2 + 16);
    unsigned int v74 = HIBYTE(v73);
    int v75 = *(_DWORD *)(a2 + 20) - 8;
    *(_DWORD *)(a2 + 20) = v75;
    if (v75 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v77 = *(_DWORD *)(a2 + 16);
      int v78 = *(_DWORD *)(a2 + 20);
      v74 |= v77 >> v78;
      *(_DWORD *)(a2 + 20) = v78 + 32;
      if (v78 == -32) {
        int v76 = 0;
      }
      else {
        int v76 = v77 << -(char)v78;
      }
    }
    else
    {
      int v76 = v73 << 8;
    }
    *(_DWORD *)(a2 + 16) = v76;
    *(unsigned char *)(a1 + j) = v74;
  }
  unsigned int v79 = *(_DWORD *)(a2 + 16);
  unsigned int v80 = HIBYTE(v79);
  int v81 = *(_DWORD *)(a2 + 20) - 8;
  *(_DWORD *)(a2 + 20) = v81;
  if (v81 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    int64x2_t v83 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v83;
    unsigned int v84 = *(_DWORD *)(a2 + 16);
    int v85 = *(_DWORD *)(a2 + 20);
    v80 |= v84 >> v85;
    int v81 = v85 + 32;
    if (v85 == -32)
    {
      unsigned int v87 = 0;
      *(_WORD *)(a1 + 120) = v80;
      uint64_t v86 = (_WORD *)(a1 + 120);
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_89;
    }
    unsigned int v82 = v84 << -(char)v85;
  }
  else
  {
    unsigned int v82 = v79 << 8;
  }
  *(_DWORD *)(a2 + 16) = v82;
  *(_WORD *)(a1 + 120) = v80;
  uint64_t v86 = (_WORD *)(a1 + 120);
  unsigned int v87 = HIBYTE(v82);
  int v88 = v81 - 8;
  *(_DWORD *)(a2 + 20) = v88;
  if (v88 >= 0)
  {
    unsigned int v89 = v82 << 8;
    goto LABEL_92;
  }
  int64x2_t v83 = *(unsigned int **)a2;
LABEL_89:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v83);
  *(void *)a2 += 4;
  unsigned int v90 = *(_DWORD *)(a2 + 16);
  int v91 = *(_DWORD *)(a2 + 20);
  v87 |= v90 >> v91;
  int v88 = v91 + 32;
  if (v91 == -32) {
    unsigned int v89 = 0;
  }
  else {
    unsigned int v89 = v90 << -(char)v91;
  }
LABEL_92:
  *(_DWORD *)(a2 + 16) = v89;
  *v86 += (_WORD)v87 << 8;
  unsigned int v92 = HIBYTE(v89);
  int v93 = v88 - 8;
  *(_DWORD *)(a2 + 20) = v93;
  if (v93 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    int v95 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v95;
    unsigned int v96 = *(_DWORD *)(a2 + 16);
    int v97 = *(_DWORD *)(a2 + 20);
    v92 |= v96 >> v97;
    int v93 = v97 + 32;
    if (v97 == -32)
    {
      unsigned int v99 = 0;
      *(_WORD *)(a1 + 122) = v92;
      int64x2_t v98 = (_WORD *)(a1 + 122);
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_100;
    }
    unsigned int v94 = v96 << -(char)v97;
  }
  else
  {
    unsigned int v94 = v89 << 8;
  }
  *(_DWORD *)(a2 + 16) = v94;
  *(_WORD *)(a1 + 122) = v92;
  int64x2_t v98 = (_WORD *)(a1 + 122);
  unsigned int v99 = HIBYTE(v94);
  int v100 = v93 - 8;
  *(_DWORD *)(a2 + 20) = v100;
  if (v100 >= 0)
  {
    unsigned int v101 = v94 << 8;
    goto LABEL_103;
  }
  int v95 = *(unsigned int **)a2;
LABEL_100:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v95);
  *(void *)a2 += 4;
  unsigned int v102 = *(_DWORD *)(a2 + 16);
  int v103 = *(_DWORD *)(a2 + 20);
  v99 |= v102 >> v103;
  int v100 = v103 + 32;
  if (v103 == -32) {
    unsigned int v101 = 0;
  }
  else {
    unsigned int v101 = v102 << -(char)v103;
  }
LABEL_103:
  *(_DWORD *)(a2 + 16) = v101;
  *v98 += (_WORD)v99 << 8;
  unsigned int v104 = HIBYTE(v101);
  int v105 = v100 - 8;
  *(_DWORD *)(a2 + 20) = v105;
  if (v105 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    uint64_t v107 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v107;
    unsigned int v108 = *(_DWORD *)(a2 + 16);
    int v109 = *(_DWORD *)(a2 + 20);
    v104 |= v108 >> v109;
    int v105 = v109 + 32;
    if (v109 == -32)
    {
      unsigned int v111 = 0;
      *(_WORD *)(a1 + 124) = v104;
      uint64_t v110 = (_WORD *)(a1 + 124);
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_111;
    }
    unsigned int v106 = v108 << -(char)v109;
  }
  else
  {
    unsigned int v106 = v101 << 8;
  }
  *(_DWORD *)(a2 + 16) = v106;
  *(_WORD *)(a1 + 124) = v104;
  uint64_t v110 = (_WORD *)(a1 + 124);
  unsigned int v111 = HIBYTE(v106);
  int v112 = v105 - 8;
  *(_DWORD *)(a2 + 20) = v112;
  if (v112 >= 0)
  {
    unsigned int v113 = v106 << 8;
    goto LABEL_114;
  }
  uint64_t v107 = *(unsigned int **)a2;
LABEL_111:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v107);
  *(void *)a2 += 4;
  unsigned int v114 = *(_DWORD *)(a2 + 16);
  int v115 = *(_DWORD *)(a2 + 20);
  v111 |= v114 >> v115;
  int v112 = v115 + 32;
  if (v115 == -32) {
    unsigned int v113 = 0;
  }
  else {
    unsigned int v113 = v114 << -(char)v115;
  }
LABEL_114:
  *(_DWORD *)(a2 + 16) = v113;
  *v110 += (_WORD)v111 << 8;
  unsigned int v116 = HIBYTE(v113);
  int v117 = v112 - 8;
  *(_DWORD *)(a2 + 20) = v117;
  if (v117 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v119 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v119;
    unsigned int v120 = *(_DWORD *)(a2 + 16);
    int v121 = *(_DWORD *)(a2 + 20);
    v116 |= v120 >> v121;
    int v117 = v121 + 32;
    if (v121 == -32)
    {
      unsigned int v123 = 0;
      *(_WORD *)(a1 + 126) = v116;
      uint64_t v122 = (_WORD *)(a1 + 126);
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_122;
    }
    unsigned int v118 = v120 << -(char)v121;
  }
  else
  {
    unsigned int v118 = v113 << 8;
  }
  *(_DWORD *)(a2 + 16) = v118;
  *(_WORD *)(a1 + 126) = v116;
  uint64_t v122 = (_WORD *)(a1 + 126);
  unsigned int v123 = HIBYTE(v118);
  int v124 = v117 - 8;
  *(_DWORD *)(a2 + 20) = v124;
  if (v124 >= 0)
  {
    unsigned int v125 = v118 << 8;
    goto LABEL_125;
  }
  v119 = *(unsigned int **)a2;
LABEL_122:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v119);
  *(void *)a2 += 4;
  unsigned int v126 = *(_DWORD *)(a2 + 16);
  int v127 = *(_DWORD *)(a2 + 20);
  v123 |= v126 >> v127;
  int v124 = v127 + 32;
  if (v127 == -32) {
    unsigned int v125 = 0;
  }
  else {
    unsigned int v125 = v126 << -(char)v127;
  }
LABEL_125:
  *(_DWORD *)(a2 + 16) = v125;
  *v122 += (_WORD)v123 << 8;
  unsigned int v128 = HIBYTE(v125);
  int v129 = v124 - 8;
  *(_DWORD *)(a2 + 20) = v129;
  if (v129 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    uint64_t v131 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v131;
    unsigned int v132 = *(_DWORD *)(a2 + 16);
    int v133 = *(_DWORD *)(a2 + 20);
    v128 |= v132 >> v133;
    int v129 = v133 + 32;
    if (v133 == -32)
    {
      unsigned int v135 = 0;
      *(_WORD *)(a1 + 128) = v128;
      uint64_t v134 = (_WORD *)(a1 + 128);
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_133;
    }
    unsigned int v130 = v132 << -(char)v133;
  }
  else
  {
    unsigned int v130 = v125 << 8;
  }
  *(_DWORD *)(a2 + 16) = v130;
  *(_WORD *)(a1 + 128) = v128;
  uint64_t v134 = (_WORD *)(a1 + 128);
  unsigned int v135 = HIBYTE(v130);
  int v136 = v129 - 8;
  *(_DWORD *)(a2 + 20) = v136;
  if (v136 >= 0)
  {
    unsigned int v137 = v130 << 8;
    goto LABEL_136;
  }
  uint64_t v131 = *(unsigned int **)a2;
LABEL_133:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v131);
  *(void *)a2 += 4;
  unsigned int v138 = *(_DWORD *)(a2 + 16);
  int v139 = *(_DWORD *)(a2 + 20);
  v135 |= v138 >> v139;
  int v136 = v139 + 32;
  if (v139 == -32) {
    unsigned int v137 = 0;
  }
  else {
    unsigned int v137 = v138 << -(char)v139;
  }
LABEL_136:
  *(_DWORD *)(a2 + 16) = v137;
  *v134 += (_WORD)v135 << 8;
  unsigned int v140 = HIBYTE(v137);
  int v141 = v136 - 8;
  *(_DWORD *)(a2 + 20) = v141;
  if (v141 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    uint64_t v143 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v143;
    unsigned int v144 = *(_DWORD *)(a2 + 16);
    int v145 = *(_DWORD *)(a2 + 20);
    v140 |= v144 >> v145;
    int v141 = v145 + 32;
    if (v145 == -32)
    {
      unsigned int v147 = 0;
      *(_DWORD *)(a1 + 130) = v140;
      uint64_t v146 = (_DWORD *)(a1 + 130);
      *(void *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_144;
    }
    unsigned int v142 = v144 << -(char)v145;
  }
  else
  {
    unsigned int v142 = v137 << 8;
  }
  *(_DWORD *)(a2 + 16) = v142;
  *(_DWORD *)(a1 + 130) = v140;
  uint64_t v146 = (_DWORD *)(a1 + 130);
  unsigned int v147 = HIBYTE(v142);
  int v148 = v141 - 8;
  *(_DWORD *)(a2 + 20) = v148;
  if (v148 >= 0)
  {
    unsigned int v149 = v142 << 8;
    goto LABEL_147;
  }
  uint64_t v143 = *(unsigned int **)a2;
LABEL_144:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v143);
  *(void *)a2 += 4;
  unsigned int v150 = *(_DWORD *)(a2 + 16);
  int v151 = *(_DWORD *)(a2 + 20);
  v147 |= v150 >> v151;
  int v148 = v151 + 32;
  if (v151 == -32) {
    unsigned int v149 = 0;
  }
  else {
    unsigned int v149 = v150 << -(char)v151;
  }
LABEL_147:
  *(_DWORD *)(a2 + 16) = v149;
  *v146 += v147 << 8;
  unsigned int v152 = HIBYTE(v149);
  int v153 = v148 - 8;
  *(_DWORD *)(a2 + 20) = v153;
  if (v153 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v155 = *(_DWORD *)(a2 + 16);
    int v156 = *(_DWORD *)(a2 + 20);
    v152 |= v155 >> v156;
    int v153 = v156 + 32;
    if (v156 == -32) {
      unsigned int v154 = 0;
    }
    else {
      unsigned int v154 = v155 << -(char)v156;
    }
  }
  else
  {
    unsigned int v154 = v149 << 8;
  }
  *(_DWORD *)(a2 + 16) = v154;
  *v146 += v152 << 16;
  unsigned int v157 = HIBYTE(v154);
  int v158 = v153 - 8;
  *(_DWORD *)(a2 + 20) = v158;
  if (v158 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v160 = *(_DWORD *)(a2 + 16);
    int v161 = *(_DWORD *)(a2 + 20);
    v157 |= v160 >> v161;
    int v158 = v161 + 32;
    if (v161 == -32) {
      unsigned int v159 = 0;
    }
    else {
      unsigned int v159 = v160 << -(char)v161;
    }
  }
  else
  {
    unsigned int v159 = v154 << 8;
  }
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  *(_DWORD *)(a2 + 16) = v159;
  *(_DWORD *)(a1 + 130) += v157 << 24;
  uint64_t v164 = a1 + 134;
  do
  {
    unsigned int v165 = HIBYTE(v159);
    int v166 = v158 - 8;
    *(_DWORD *)(a2 + 20) = v166;
    if (v166 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v168 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v168;
      unsigned int v169 = *(_DWORD *)(a2 + 16);
      int v170 = *(_DWORD *)(a2 + 20);
      v165 |= v169 >> v170;
      int v166 = v170 + 32;
      if (v170 == -32)
      {
        unsigned int v172 = 0;
        v171 = (_WORD *)(a1 + 2 * v163 + 134);
        *(_WORD *)(v164 + v162) = v165;
        *(void *)(a2 + 16) = 0xFFFFFFF800000000;
        goto LABEL_166;
      }
      unsigned int v167 = v169 << -(char)v170;
    }
    else
    {
      unsigned int v167 = v159 << 8;
    }
    *(_DWORD *)(a2 + 16) = v167;
    v171 = (_WORD *)(v164 + v162);
    *(_WORD *)(v164 + v162) = v165;
    unsigned int v172 = HIBYTE(v167);
    int v158 = v166 - 8;
    *(_DWORD *)(a2 + 20) = v158;
    if (v158 >= 0)
    {
      unsigned int v159 = v167 << 8;
      goto LABEL_169;
    }
    v168 = *(unsigned int **)a2;
LABEL_166:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v168);
    *(void *)a2 += 4;
    unsigned int v173 = *(_DWORD *)(a2 + 16);
    int v174 = *(_DWORD *)(a2 + 20);
    v172 |= v173 >> v174;
    int v158 = v174 + 32;
    *(_DWORD *)(a2 + 20) = v174 + 32;
    if (v174 == -32) {
      unsigned int v159 = 0;
    }
    else {
      unsigned int v159 = v173 << -(char)v174;
    }
LABEL_169:
    *(_DWORD *)(a2 + 16) = v159;
    *v171 += (_WORD)v172 << 8;
    ++v163;
    v162 += 2;
  }
  while (v162 != 16);
  return 0;
}

void MP413KVoiceSpecificConfig::~MP413KVoiceSpecificConfig(MP413KVoiceSpecificConfig *this)
{
}

uint64_t MPEG2AACSpecificConfig::Deserialize(_DWORD *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    unsigned int v7 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a2 + 20);
    int v9 = v6 + 32;
    BOOL v8 = v6 == -32;
    *(void *)a2 += 4;
    v4 |= v7 >> v6;
    int v10 = v7 << -(char)v6;
    if (v8) {
      int v10 = 0;
    }
    *(_DWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 20) = v9;
  }
  if (v4 != 1094994246)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v39 = 136315394;
      unsigned int v40 = "ACMP4BitStreams.cpp";
      __int16 v41 = 1024;
      int v42 = 3360;
      int v23 = MEMORY[0x1E4F14500];
      long long v24 = "%25s:%-5d  ADIFHeader::Deserialize: adif_id() is incorrect";
LABEL_30:
      _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&v39, 0x12u);
    }
    return 4294967090;
  }
  int Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[2] = Bit;
  if (Bit)
  {
    for (uint64_t i = 0; i != 9; ++i)
    {
      unsigned int v13 = *(_DWORD *)(a2 + 16);
      unsigned int v14 = HIBYTE(v13);
      int v15 = *(_DWORD *)(a2 + 20) - 8;
      *(_DWORD *)(a2 + 20) = v15;
      if (v15 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v17 = *(_DWORD *)(a2 + 16);
        int v18 = *(_DWORD *)(a2 + 20);
        v14 |= v17 >> v18;
        *(_DWORD *)(a2 + 20) = v18 + 32;
        if (v18 == -32) {
          int v16 = 0;
        }
        else {
          int v16 = v17 << -(char)v18;
        }
      }
      else
      {
        int v16 = v13 << 8;
      }
      *(_DWORD *)(a2 + 16) = v16;
      *((unsigned char *)a1 + i + 12) = v14;
    }
  }
  a1[6] = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[7] = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[8] = TBitstreamReader<unsigned int>::GetBit(a2);
  unsigned int v19 = *(_DWORD *)(a2 + 16);
  unsigned int v20 = v19 >> 9;
  int v21 = *(_DWORD *)(a2 + 20) - 23;
  *(_DWORD *)(a2 + 20) = v21;
  if (v21 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    unsigned int v25 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v25;
    unsigned int v26 = *(_DWORD *)(a2 + 16);
    int v27 = *(_DWORD *)(a2 + 20);
    v20 |= v26 >> v27;
    int v21 = v27 + 32;
    if (v27 == -32)
    {
      unsigned int v28 = 0;
      a1[9] = v20;
      *(void *)(a2 + 16) = 0xFFFFFFFC00000000;
      goto LABEL_24;
    }
    unsigned int v22 = v26 << -(char)v27;
  }
  else
  {
    unsigned int v22 = v19 << 23;
  }
  *(_DWORD *)(a2 + 16) = v22;
  a1[9] = v20;
  unsigned int v28 = v22 >> 28;
  int v29 = v21 - 4;
  *(_DWORD *)(a2 + 20) = v29;
  if (v29 >= 0)
  {
    unsigned int v30 = 16 * v22;
    goto LABEL_27;
  }
  unsigned int v25 = *(unsigned int **)a2;
LABEL_24:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v25);
  *(void *)a2 += 4;
  unsigned int v31 = *(_DWORD *)(a2 + 16);
  int v32 = *(_DWORD *)(a2 + 20);
  v28 |= v31 >> v32;
  int v29 = v32 + 32;
  *(_DWORD *)(a2 + 20) = v32 + 32;
  if (v32 == -32) {
    unsigned int v30 = 0;
  }
  else {
    unsigned int v30 = v31 << -(char)v32;
  }
LABEL_27:
  *(_DWORD *)(a2 + 16) = v30;
  if (v28)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v39 = 136315394;
      unsigned int v40 = "ACMP4BitStreams.cpp";
      __int16 v41 = 1024;
      int v42 = 3374;
      int v23 = MEMORY[0x1E4F14500];
      long long v24 = "%25s:%-5d  ADIFHeader::Deserialize: count of PCEs exceeds our capacity";
      goto LABEL_30;
    }
    return 4294967090;
  }
  if (!a1[8])
  {
    unsigned int v34 = v30 >> 12;
    int v35 = v29 - 20;
    *(_DWORD *)(a2 + 20) = v35;
    if (v35 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v37 = *(_DWORD *)(a2 + 16);
      int v38 = *(_DWORD *)(a2 + 20);
      v34 |= v37 >> v38;
      *(_DWORD *)(a2 + 20) = v38 + 32;
      if (v38 == -32) {
        unsigned int v36 = 0;
      }
      else {
        unsigned int v36 = v37 << -(char)v38;
      }
    }
    else
    {
      unsigned int v36 = v30 << 20;
    }
    *(_DWORD *)(a2 + 16) = v36;
    a1[10] = v34;
  }
  MP4AudioProgramConfig::Deserialize(a1 + 11, a2);
  return 0;
}

uint64_t MP4AudioProgramConfig::Deserialize(unsigned int *a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  unsigned int v5 = v4 >> 28;
  int v6 = *(_DWORD *)(a2 + 20) - 4;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    BOOL v8 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v8;
    unsigned int v9 = *(_DWORD *)(a2 + 16);
    int v10 = *(_DWORD *)(a2 + 20);
    v5 |= v9 >> v10;
    int v6 = v10 + 32;
    if (v10 == -32)
    {
      unsigned int v11 = 0;
      *a1 = v5;
      *(void *)(a2 + 16) = 0xFFFFFFFE00000000;
      goto LABEL_9;
    }
    unsigned int v7 = v9 << -(char)v10;
  }
  else
  {
    unsigned int v7 = 16 * v4;
  }
  *a1 = v5;
  unsigned int v11 = v7 >> 30;
  int v12 = v6 - 2;
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v12;
  if (v12 >= 0)
  {
    int v13 = 4 * v7;
    goto LABEL_12;
  }
  BOOL v8 = *(unsigned int **)a2;
LABEL_9:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v8);
  *(void *)a2 += 4;
  unsigned int v14 = *(_DWORD *)(a2 + 16);
  int v15 = *(_DWORD *)(a2 + 20);
  v11 |= v14 >> v15;
  *(_DWORD *)(a2 + 20) = v15 + 32;
  if (v15 == -32) {
    int v13 = 0;
  }
  else {
    int v13 = v14 << -(char)v15;
  }
LABEL_12:
  *(_DWORD *)(a2 + 16) = v13;
  a1[1] = v11;
  MP4SampleRate::Deserialize((MP4SampleRate *)(a1 + 2), a2, 0);
  unsigned int v16 = *(_DWORD *)(a2 + 16);
  unsigned int v17 = v16 >> 28;
  int v18 = *(_DWORD *)(a2 + 20) - 4;
  *(_DWORD *)(a2 + 20) = v18;
  if (v18 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    unsigned int v20 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v20;
    unsigned int v21 = *(_DWORD *)(a2 + 16);
    int v22 = *(_DWORD *)(a2 + 20);
    v17 |= v21 >> v22;
    int v18 = v22 + 32;
    if (v22 == -32)
    {
      unsigned int v24 = 0;
      a1[3] = v17;
      int v23 = a1 + 3;
      *(void *)(a2 + 16) = 0xFFFFFFFC00000000;
      goto LABEL_20;
    }
    unsigned int v19 = v21 << -(char)v22;
  }
  else
  {
    unsigned int v19 = 16 * v16;
  }
  a1[3] = v17;
  int v23 = a1 + 3;
  unsigned int v24 = v19 >> 28;
  int v25 = v18 - 4;
  *(_DWORD *)(a2 + 16) = v19;
  *(_DWORD *)(a2 + 20) = v25;
  if (v25 >= 0)
  {
    unsigned int v26 = 16 * v19;
    goto LABEL_22;
  }
  unsigned int v20 = *(unsigned int **)a2;
LABEL_20:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v20);
  int v27 = (unsigned int *)(*(void *)a2 + 4);
  *(void *)a2 = v27;
  unsigned int v28 = *(_DWORD *)(a2 + 16);
  int v29 = *(_DWORD *)(a2 + 20);
  v24 |= v28 >> v29;
  int v25 = v29 + 32;
  if (v29 == -32)
  {
    unsigned int v31 = 0;
    a1[36] = v24;
    unsigned int v30 = a1 + 36;
    *(void *)(a2 + 16) = 0xFFFFFFFC00000000;
    goto LABEL_26;
  }
  unsigned int v26 = v28 << -(char)v29;
LABEL_22:
  a1[36] = v24;
  unsigned int v30 = a1 + 36;
  unsigned int v31 = v26 >> 28;
  int v32 = v25 - 4;
  *(_DWORD *)(a2 + 16) = v26;
  *(_DWORD *)(a2 + 20) = v32;
  if (v32 >= 0)
  {
    unsigned int v33 = 16 * v26;
    goto LABEL_28;
  }
  int v27 = *(unsigned int **)a2;
LABEL_26:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v27);
  unsigned int v34 = (unsigned int *)(*(void *)a2 + 4);
  *(void *)a2 = v34;
  unsigned int v35 = *(_DWORD *)(a2 + 16);
  int v36 = *(_DWORD *)(a2 + 20);
  v31 |= v35 >> v36;
  int v32 = v36 + 32;
  if (v36 == -32)
  {
    unsigned int v38 = 0;
    unsigned int v37 = a1 + 69;
    a1[69] = v31;
    *(void *)(a2 + 16) = 0xFFFFFFFE00000000;
    goto LABEL_32;
  }
  unsigned int v33 = v35 << -(char)v36;
LABEL_28:
  unsigned int v37 = a1 + 69;
  a1[69] = v31;
  unsigned int v38 = v33 >> 30;
  int v39 = v32 - 2;
  *(_DWORD *)(a2 + 16) = v33;
  *(_DWORD *)(a2 + 20) = v39;
  if (v39 >= 0)
  {
    unsigned int v40 = 4 * v33;
    goto LABEL_34;
  }
  unsigned int v34 = *(unsigned int **)a2;
LABEL_32:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v34);
  __int16 v41 = (unsigned int *)(*(void *)a2 + 4);
  *(void *)a2 = v41;
  unsigned int v42 = *(_DWORD *)(a2 + 16);
  int v43 = *(_DWORD *)(a2 + 20);
  v38 |= v42 >> v43;
  int v39 = v43 + 32;
  if (v43 == -32)
  {
    unsigned int v45 = 0;
    unsigned int v44 = a1 + 102;
    a1[102] = v38;
    *(void *)(a2 + 16) = 0xFFFFFFFD00000000;
    goto LABEL_38;
  }
  unsigned int v40 = v42 << -(char)v43;
LABEL_34:
  unsigned int v44 = a1 + 102;
  a1[102] = v38;
  unsigned int v45 = v40 >> 29;
  int v46 = v39 - 3;
  *(_DWORD *)(a2 + 16) = v40;
  *(_DWORD *)(a2 + 20) = v46;
  if (v46 >= 0)
  {
    unsigned int v47 = 8 * v40;
    goto LABEL_40;
  }
  __int16 v41 = *(unsigned int **)a2;
LABEL_38:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v41);
  int v48 = (unsigned int *)(*(void *)a2 + 4);
  *(void *)a2 = v48;
  unsigned int v49 = *(_DWORD *)(a2 + 16);
  int v50 = *(_DWORD *)(a2 + 20);
  v45 |= v49 >> v50;
  int v46 = v50 + 32;
  if (v50 == -32)
  {
    unsigned int v52 = 0;
    uint64_t v51 = a1 + 135;
    a1[135] = v45;
    *(void *)(a2 + 16) = 0xFFFFFFFC00000000;
    goto LABEL_44;
  }
  unsigned int v47 = v49 << -(char)v50;
LABEL_40:
  uint64_t v51 = a1 + 135;
  a1[135] = v45;
  unsigned int v52 = v47 >> 28;
  int v53 = v46 - 4;
  *(_DWORD *)(a2 + 16) = v47;
  *(_DWORD *)(a2 + 20) = v53;
  if (v53 >= 0)
  {
    int v54 = 16 * v47;
    goto LABEL_47;
  }
  int v48 = *(unsigned int **)a2;
LABEL_44:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v48);
  *(void *)a2 += 4;
  unsigned int v55 = *(_DWORD *)(a2 + 16);
  int v56 = *(_DWORD *)(a2 + 20);
  v52 |= v55 >> v56;
  *(_DWORD *)(a2 + 20) = v56 + 32;
  if (v56 == -32) {
    int v54 = 0;
  }
  else {
    int v54 = v55 << -(char)v56;
  }
LABEL_47:
  *(_DWORD *)(a2 + 16) = v54;
  a1[168] = v52;
  unsigned int Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[201] = Bit;
  if (Bit)
  {
    unsigned int v58 = *(_DWORD *)(a2 + 16);
    unsigned int v59 = v58 >> 28;
    int v60 = *(_DWORD *)(a2 + 20) - 4;
    *(_DWORD *)(a2 + 20) = v60;
    if (v60 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v62 = *(_DWORD *)(a2 + 16);
      int v63 = *(_DWORD *)(a2 + 20);
      v59 |= v62 >> v63;
      *(_DWORD *)(a2 + 20) = v63 + 32;
      if (v63 == -32) {
        int v61 = 0;
      }
      else {
        int v61 = v62 << -(char)v63;
      }
    }
    else
    {
      int v61 = 16 * v58;
    }
    *(_DWORD *)(a2 + 16) = v61;
    a1[202] = v59;
  }
  unsigned int v64 = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[204] = v64;
  if (v64)
  {
    unsigned int v65 = *(_DWORD *)(a2 + 16);
    unsigned int v66 = v65 >> 28;
    int v67 = *(_DWORD *)(a2 + 20) - 4;
    *(_DWORD *)(a2 + 20) = v67;
    if (v67 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v69 = *(_DWORD *)(a2 + 16);
      int v70 = *(_DWORD *)(a2 + 20);
      v66 |= v69 >> v70;
      *(_DWORD *)(a2 + 20) = v70 + 32;
      if (v70 == -32) {
        int v68 = 0;
      }
      else {
        int v68 = v69 << -(char)v70;
      }
    }
    else
    {
      int v68 = 16 * v65;
    }
    *(_DWORD *)(a2 + 16) = v68;
    a1[205] = v66;
  }
  unsigned int v71 = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[207] = v71;
  if (v71)
  {
    unsigned int v72 = *(_DWORD *)(a2 + 16);
    unsigned int v73 = v72 >> 30;
    int v74 = *(_DWORD *)(a2 + 20) - 2;
    *(_DWORD *)(a2 + 20) = v74;
    if (v74 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v76 = *(_DWORD *)(a2 + 16);
      int v77 = *(_DWORD *)(a2 + 20);
      v73 |= v76 >> v77;
      *(_DWORD *)(a2 + 20) = v77 + 32;
      if (v77 == -32) {
        int v75 = 0;
      }
      else {
        int v75 = v76 << -(char)v77;
      }
    }
    else
    {
      int v75 = 4 * v72;
    }
    *(_DWORD *)(a2 + 16) = v75;
    a1[208] = v73;
    a1[209] = TBitstreamReader<unsigned int>::GetBit(a2);
  }
  MP4AudioElementList::Deserialize(v23, a2, 1);
  MP4AudioElementList::Deserialize(v30, a2, 1);
  MP4AudioElementList::Deserialize(v37, a2, 1);
  MP4AudioElementList::Deserialize(v44, a2, 0);
  MP4AudioElementList::Deserialize(v51, a2, 0);
  uint64_t result = (uint64_t)MP4AudioElementList::Deserialize(a1 + 168, a2, 1);
  unsigned int v81 = *(_DWORD *)(a2 + 16);
  int v80 = *(_DWORD *)(a2 + 20);
  char v82 = v80 & 7;
  if ((v80 & 7) != 0)
  {
    v80 &= 0xFFFFFFF8;
    *(_DWORD *)(a2 + 20) = v80;
    if (v80 < 0 != v78)
    {
      uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      int v83 = *(_DWORD *)(a2 + 20);
      *(void *)a2 += 4;
      int v80 = v83 + 32;
      if (v83 == -32) {
        unsigned int v81 = 0;
      }
      else {
        unsigned int v81 = *(_DWORD *)(a2 + 16) << -(char)v83;
      }
    }
    else
    {
      v81 <<= v82;
    }
    *(_DWORD *)(a2 + 16) = v81;
  }
  unsigned int v84 = HIBYTE(v81);
  int v85 = v80 - 8;
  *(_DWORD *)(a2 + 20) = v85;
  if (v85 < 0)
  {
    uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v87 = *(_DWORD *)(a2 + 16);
    int v88 = *(_DWORD *)(a2 + 20);
    v84 |= v87 >> v88;
    *(_DWORD *)(a2 + 20) = v88 + 32;
    if (v88 == -32) {
      int v86 = 0;
    }
    else {
      int v86 = v87 << -(char)v88;
    }
  }
  else
  {
    int v86 = v81 << 8;
  }
  *(_DWORD *)(a2 + 16) = v86;
  a1[210] = v84;
  if (v84)
  {
    unint64_t v89 = 0;
    do
    {
      unsigned int v90 = *(_DWORD *)(a2 + 16);
      unsigned int v91 = HIBYTE(v90);
      int v92 = *(_DWORD *)(a2 + 20) - 8;
      *(_DWORD *)(a2 + 20) = v92;
      if (v92 < 0)
      {
        uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v94 = *(_DWORD *)(a2 + 16);
        int v95 = *(_DWORD *)(a2 + 20);
        v91 |= v94 >> v95;
        *(_DWORD *)(a2 + 20) = v95 + 32;
        if (v95 == -32) {
          int v93 = 0;
        }
        else {
          int v93 = v94 << -(char)v95;
        }
      }
      else
      {
        int v93 = v90 << 8;
      }
      *(_DWORD *)(a2 + 16) = v93;
      *((unsigned char *)a1 + v89++ + 844) = v91;
    }
    while (v89 < a1[210]);
  }
  return result;
}

uint64_t MP4SampleRate::Deserialize(MP4SampleRate *this, uint64_t a2, int a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  unsigned int v7 = v6 >> 28;
  int v8 = *(_DWORD *)(a2 + 20) - 4;
  *(_DWORD *)(a2 + 20) = v8;
  if (v8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v10 = *(_DWORD *)(a2 + 16);
    int v11 = *(_DWORD *)(a2 + 20);
    v7 |= v10 >> v11;
    *(_DWORD *)(a2 + 20) = v11 + 32;
    if (v11 == -32) {
      int v9 = 0;
    }
    else {
      int v9 = v10 << -(char)v11;
    }
  }
  else
  {
    int v9 = 16 * v6;
  }
  *(_DWORD *)(a2 + 16) = v9;
  uint64_t result = (uint64_t)MP4SampleRate::SetFromIndex(this, v7, a3);
  if (v7 == 15)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    unsigned int v14 = v13 >> 8;
    int v15 = *(_DWORD *)(a2 + 20) - 24;
    *(_DWORD *)(a2 + 20) = v15;
    if (v15 < 0)
    {
      uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v17 = *(_DWORD *)(a2 + 16);
      int v18 = *(_DWORD *)(a2 + 20);
      v14 |= v17 >> v18;
      *(_DWORD *)(a2 + 20) = v18 + 32;
      if (v18 == -32) {
        int v16 = 0;
      }
      else {
        int v16 = v17 << -(char)v18;
      }
    }
    else
    {
      int v16 = v13 << 24;
    }
    *(_DWORD *)(a2 + 16) = v16;
    *(_DWORD *)this = v14;
  }
  return result;
}

unsigned int *MP4AudioElementList::Deserialize(unsigned int *result, uint64_t a2, int a3)
{
  if (*result)
  {
    unsigned int v5 = result;
    unint64_t v6 = 0;
    do
    {
      if (a3)
      {
        uint64_t result = (unsigned int *)TBitstreamReader<unsigned int>::GetBit(a2);
        v5[v6 + 1] = result;
      }
      unsigned int v7 = *(_DWORD *)(a2 + 16);
      unsigned int v8 = v7 >> 28;
      int v9 = *(_DWORD *)(a2 + 20) - 4;
      *(_DWORD *)(a2 + 20) = v9;
      if (v9 < 0)
      {
        uint64_t result = (unsigned int *)TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v11 = *(_DWORD *)(a2 + 16);
        int v12 = *(_DWORD *)(a2 + 20);
        v8 |= v11 >> v12;
        *(_DWORD *)(a2 + 20) = v12 + 32;
        if (v12 == -32) {
          int v10 = 0;
        }
        else {
          int v10 = v11 << -(char)v12;
        }
      }
      else
      {
        int v10 = 16 * v7;
      }
      *(_DWORD *)(a2 + 16) = v10;
      v5[v6++ + 17] = v8;
    }
    while (v6 < *v5);
  }
  return result;
}

_DWORD *MP4SampleRate::SetFromIndex(_DWORD *this, unsigned int a2, int a3)
{
  if (a2 > 0xC)
  {
    if (a2 >= 0x10 && a3 || a2 >= 0xF && !a3)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = "Error in MP4SampleRate::deserialize(): illegal sample rate index";
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
  }
  else
  {
    *this = MP4SampleRate::kMP4SampleRateTable[a2];
  }
  return this;
}

void MPEG2AACSpecificConfig::~MPEG2AACSpecificConfig(MPEG2AACSpecificConfig *this)
{
}

uint64_t MPEG1Or2SpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 20);
    int v5 = v7 + 32;
    BOOL v9 = v7 == -32;
    *(void *)a2 += 4;
    unsigned int v6 = (v8 >> v7) | v4;
    unsigned int v10 = v8 << -(char)v7;
    if (v9) {
      unsigned int v4 = 0;
    }
    else {
      unsigned int v4 = v10;
    }
    *(_DWORD *)(a2 + 16) = v4;
  }
  else
  {
    unsigned int v6 = v4;
  }
  *(_DWORD *)(a1 + 8) = bswap32(v6);
  unsigned int v11 = v4 >> 23;
  int v12 = v5 - 9;
  *(_DWORD *)(a2 + 20) = v12;
  if (v12 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v14 = *(_DWORD *)(a2 + 16);
    int v15 = *(_DWORD *)(a2 + 20);
    v11 |= v14 >> v15;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v14 << -(char)v15;
    }
  }
  else
  {
    unsigned int v13 = v4 << 9;
  }
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a1 + 12) = v11;
  return 0;
}

void MPEG1Or2SpecificConfig::~MPEG1Or2SpecificConfig(MPEG1Or2SpecificConfig *this)
{
}

unint64_t MP4SampleRate::Index(MP4SampleRate *this)
{
  unint64_t v1 = 13;
  unsigned int v2 = (char *)&MP4SampleRate::kMP4SampleRateTable;
  do
  {
    unint64_t v3 = v1 >> 1;
    unsigned int v4 = (unsigned int *)&v2[4 * (v1 >> 1)];
    unsigned int v6 = *v4;
    int v5 = (char *)(v4 + 1);
    v1 += ~(v1 >> 1);
    if (v6 > this) {
      unsigned int v2 = v5;
    }
    else {
      unint64_t v1 = v3;
    }
  }
  while (v1);
  if (v2 == "mcaa caarcaatcaahcaa" || *(_DWORD *)v2 != this) {
    return 15;
  }
  else {
    return (unint64_t)(v2 - (char *)&MP4SampleRate::kMP4SampleRateTable) >> 2;
  }
}

uint64_t MP4SampleRate::Serialize(int *a1, uint64_t a2)
{
  int v4 = MP4SampleRate::Index((MP4SampleRate *)*a1);
  if (v4 == 15)
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 15, 4u);
    int v4 = *a1;
    uint64_t v5 = a2;
    unsigned int v6 = 24;
  }
  else
  {
    uint64_t v5 = a2;
    unsigned int v6 = 4;
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits(v5, v4, v6);
}

uint64_t MP4AudioObjectType::Deserialize(uint64_t result, uint64_t a2)
{
  unint64_t v3 = (_DWORD *)result;
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  int v5 = v4 >> 27;
  int v6 = *(_DWORD *)(a2 + 20) - 5;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    int v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    int v6 = v9 + 32;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = v8 << -(char)v9;
    }
  }
  else
  {
    unsigned int v7 = 32 * v4;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *unint64_t v3 = v5;
  if (v5 == 31)
  {
    unsigned int v10 = v7 >> 26;
    int v11 = v6 - 6;
    *(_DWORD *)(a2 + 20) = v11;
    if (v11 < 0)
    {
      uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v13 = *(_DWORD *)(a2 + 16);
      int v14 = *(_DWORD *)(a2 + 20);
      v10 |= v13 >> v14;
      *(_DWORD *)(a2 + 20) = v14 + 32;
      if (v14 == -32) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = v13 << -(char)v14;
      }
    }
    else
    {
      unsigned int v12 = v7 << 6;
    }
    *(_DWORD *)(a2 + 16) = v12;
    int v5 = v10 + *v3 + 1;
    *unint64_t v3 = v5;
  }
  if ((v5 & 0xFFFFFFFE) == 0xA) {
    *unint64_t v3 = 0;
  }
  return result;
}

uint64_t MP4AudioObjectType::Serialize(unsigned int a1, uint64_t a2)
{
  int v3 = a1;
  if (a1 < 0x1F)
  {
    uint64_t v5 = a2;
    unsigned int v6 = 5;
  }
  else
  {
    int v4 = a1 - 32;
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 31, 5u);
    uint64_t v5 = a2;
    int v3 = v4;
    unsigned int v6 = 6;
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits(v5, v3, v6);
}

uint64_t ADTSHeader::Deserialize(ADTSHeader *this, const unsigned __int8 *a2, unsigned int a3)
{
  if (a3 > 6)
  {
    int v4 = a2[1];
    unsigned int v5 = (*a2 << 24) | (v4 << 16);
    int v6 = a2[2];
    *(_DWORD *)this = (a2[3] | (v6 << 8) | v5) >> 4;
    unsigned int v7 = (a2[4] << 16) & 0xF0FFFFFF | ((a2[3] & 0xF) << 24) | (a2[5] << 8);
    *((_DWORD *)this + 1) = v7 | a2[6];
    if (v5 >> 20 != 4095)
    {
      int v3 = 1937337955;
      goto LABEL_7;
    }
    if ((v4 & 6) != 0)
    {
      int v3 = 1818327410;
      goto LABEL_7;
    }
    if ((v4 & 8) != 0 && (v6 & 0xC0) == 0xC0)
    {
      int v3 = 1886547814;
      goto LABEL_7;
    }
    if ((v6 & 0x3Cu) >= 0x31)
    {
      int v3 = 1918989413;
      goto LABEL_7;
    }
    unsigned int v9 = (v7 >> 13) & 0x1FFF;
    if (v4) {
      unsigned int v10 = 7;
    }
    else {
      unsigned int v10 = 9;
    }
    if (v9 > v10)
    {
      if (v4)
      {
        *((_WORD *)this + 4) = 0;
        return *((unsigned int *)this + 3);
      }
      if (a3 > 8)
      {
        *((_WORD *)this + 4) = bswap32(*(unsigned __int16 *)(a2 + 7)) >> 16;
        return *((unsigned int *)this + 3);
      }
    }
  }
  int v3 = 1651861094;
LABEL_7:
  *((_DWORD *)this + 3) = v3;
  return *((unsigned int *)this + 3);
}

unsigned int *MP4AudioElementList::Serialize(unsigned int *result, uint64_t a2)
{
  if (*result)
  {
    int v3 = result;
    unint64_t v4 = 0;
    do
    {
      unsigned int v5 = &v3[v4];
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, v5[1], 1u);
      uint64_t result = (unsigned int *)AT::TBitstreamWriter<unsigned int>::PutBits(a2, v5[17], 4u);
      ++v4;
    }
    while (v4 < *v3);
  }
  return result;
}

uint64_t MP4AudioProgramConfig::SerializeCount(MP4AudioProgramConfig *this, char a2)
{
  if (MP4SampleRate::Index((MP4SampleRate *)*((unsigned int *)this + 2)) == 15) {
    int v4 = 28;
  }
  else {
    int v4 = 4;
  }
  int v5 = v4 + 28;
  int v6 = v4 | 0x20;
  if (!*((_DWORD *)this + 201)) {
    int v6 = v5;
  }
  int v7 = v6 | 1;
  int v8 = v6 + 5;
  if (!*((_DWORD *)this + 204)) {
    int v8 = v7;
  }
  if (*((_DWORD *)this + 207)) {
    v8 += 3;
  }
  int v9 = v8
     + 4 * (*((_DWORD *)this + 135) + *((_DWORD *)this + 102))
     + 5 * (*((_DWORD *)this + 36) + *((_DWORD *)this + 3) + *((_DWORD *)this + 69) + *((_DWORD *)this + 168));
  if ((((_BYTE)v9 + 1 + a2) & 7) != 0) {
    int v10 = v9 + 1 - (((_BYTE)v9 + 1 + a2) & 7) + 8;
  }
  else {
    int v10 = v9 + 1;
  }
  return (v10 + 8 * *((_DWORD *)this + 210) + 8);
}

uint64_t MP4AudioProgramConfig::Serialize(uint64_t a1, uint64_t a2)
{
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)a1, 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 4), 2u);
  int v4 = MP4SampleRate::Index((MP4SampleRate *)*(unsigned int *)(a1 + 8));
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v4, 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 12), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 144), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 276), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 408), 2u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 540), 3u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 672), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 804), 1u);
  if (*(_DWORD *)(a1 + 804)) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 808), 4u);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 816), 1u);
  if (*(_DWORD *)(a1 + 816)) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 820), 4u);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 828), 1u);
  if (*(_DWORD *)(a1 + 828))
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 832), 2u);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 836), 1u);
  }
  MP4AudioElementList::Serialize((unsigned int *)(a1 + 12), a2);
  MP4AudioElementList::Serialize((unsigned int *)(a1 + 144), a2);
  MP4AudioElementList::Serialize((unsigned int *)(a1 + 276), a2);
  if (*(_DWORD *)(a1 + 408))
  {
    unint64_t v5 = 0;
    do
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 476 + 4 * v5++), 4u);
    while (v5 < *(unsigned int *)(a1 + 408));
  }
  if (*(_DWORD *)(a1 + 540))
  {
    unint64_t v6 = 0;
    do
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 608 + 4 * v6++), 4u);
    while (v6 < *(unsigned int *)(a1 + 540));
  }
  MP4AudioElementList::Serialize((unsigned int *)(a1 + 672), a2);
  unsigned int v7 = *(_DWORD *)(a2 + 28) & 7;
  if (v7) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, v7);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 840), 8u);
  if (*(_DWORD *)(a1 + 840))
  {
    unint64_t v8 = 0;
    do
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(unsigned __int8 *)(a1 + 844 + v8++), 8u);
    while (v8 < *(unsigned int *)(a1 + 840));
  }
  return AT::TBitstreamWriter<unsigned int>::Flush(a2);
}

uint64_t MP4AudioProgramConfig::TotalNumChannels(MP4AudioProgramConfig *this)
{
  uint64_t v2 = *((unsigned int *)this + 3);
  if (v2)
  {
    LODWORD(result) = 0;
    int v4 = (_DWORD *)((char *)this + 16);
    do
    {
      if (*v4++) {
        int v6 = 2;
      }
      else {
        int v6 = 1;
      }
      uint64_t result = (v6 + result);
      --v2;
    }
    while (v2);
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v7 = *((unsigned int *)this + 36);
  if (v7)
  {
    unint64_t v8 = (_DWORD *)((char *)this + 148);
    do
    {
      if (*v8++) {
        int v10 = 2;
      }
      else {
        int v10 = 1;
      }
      uint64_t result = (v10 + result);
      --v7;
    }
    while (v7);
  }
  uint64_t v11 = *((unsigned int *)this + 69);
  if (v11)
  {
    unsigned int v12 = (_DWORD *)((char *)this + 280);
    do
    {
      if (*v12++) {
        int v14 = 2;
      }
      else {
        int v14 = 1;
      }
      uint64_t result = (v14 + result);
      --v11;
    }
    while (v11);
  }
  uint64_t v15 = *((unsigned int *)this + 102);
  if (v15)
  {
    int v16 = (_DWORD *)((char *)this + 412);
    do
    {
      if (*v16++) {
        int v18 = 2;
      }
      else {
        int v18 = 1;
      }
      uint64_t result = (v18 + result);
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 1208);
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      unsigned int v28 = "ACMP4BitStreams.cpp";
      __int16 v29 = 1024;
      int v30 = 1456;
      uint64_t v15 = MEMORY[0x1E4F14500];
      int v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: NULL MP413KVoiceSpecificConfig";
      goto LABEL_29;
    }
    return 4294967090;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  unint64_t v8 = *(unsigned int **)a2;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 20);
  unsigned int v11 = HIBYTE(v9);
  int v12 = v10 - 8;
  *(_DWORD *)(a2 + 20) = v10 - 8;
  if (v10 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v8);
    int v14 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v14;
    unsigned int v17 = *(_DWORD *)(a2 + 16);
    int v18 = *(_DWORD *)(a2 + 20);
    v11 |= v17 >> v18;
    int v12 = v18 + 32;
    *(_DWORD *)(a2 + 20) = v18 + 32;
    if (v18 == -32) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v17 << -(char)v18;
    }
  }
  else
  {
    unsigned int v13 = v9 << 8;
    int v14 = v8;
  }
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a1 + 32) = v11;
  if (v11 == 5)
  {
    int v19 = 0;
    int v20 = v7 - v8;
    unsigned int v21 = -1;
    while (1)
    {
      unsigned int v22 = HIBYTE(v13);
      v12 -= 8;
      *(_DWORD *)(a2 + 20) = v12;
      if (v12 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v14);
        int v14 = (unsigned int *)(*(void *)a2 + 4);
        *(void *)a2 = v14;
        unsigned int v23 = *(_DWORD *)(a2 + 16);
        int v24 = *(_DWORD *)(a2 + 20);
        v22 |= v23 >> v24;
        int v12 = v24 + 32;
        *(_DWORD *)(a2 + 20) = v24 + 32;
        unsigned int v13 = v24 == -32 ? 0 : v23 << -(char)v24;
      }
      else
      {
        v13 <<= 8;
      }
      *(_DWORD *)(a2 + 16) = v13;
      if (v21 == 4) {
        break;
      }
      int v25 = v22 & 0x7F | (v19 << 7);
      ++v21;
      int v19 = v25;
      if ((v22 & 0x80) == 0)
      {
        *(_DWORD *)(a1 + 36) = v25;
        if (v21 < 4)
        {
          if (a3) {
            *a3 = (v10 - v12 + 8 * ((int)v14 - *(_DWORD *)(a2 + 8) + v20)) / 8;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, a2);
          if (!result)
          {
            *(_DWORD *)(a1 + 48) = 1;
            return result;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return 4294967090;
          }
          int v27 = 136315394;
          unsigned int v28 = "ACMP4BitStreams.cpp";
          __int16 v29 = 1024;
          int v30 = 1472;
          uint64_t v15 = MEMORY[0x1E4F14500];
          int v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: could not parse QCelp header";
LABEL_29:
          _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v27, 0x12u);
          return 4294967090;
        }
LABEL_27:
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return 4294967090;
        }
        int v27 = 136315394;
        unsigned int v28 = "ACMP4BitStreams.cpp";
        __int16 v29 = 1024;
        int v30 = 1464;
        uint64_t v15 = MEMORY[0x1E4F14500];
        int v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: the Decoder specific info tag size is incorrect";
        goto LABEL_29;
      }
    }
    *(_DWORD *)(a1 + 36) = 0;
    goto LABEL_27;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v27 = 136315394;
    unsigned int v28 = "ACMP4BitStreams.cpp";
    __int16 v29 = 1024;
    int v30 = 1460;
    uint64_t v15 = MEMORY[0x1E4F14500];
    int v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: the DecoderSpecificInfo tag is incorrect";
    goto LABEL_29;
  }
  return 4294967090;
}

uint64_t DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a3 && *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) < a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      int v20 = "ACMP4BitStreams.cpp";
      __int16 v21 = 1024;
      int v22 = 1489;
      unint64_t v5 = MEMORY[0x1E4F14500];
      int v6 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig(): BitstreamReader doesn't provide access "
           "to the full specified length of the AudioSpecificConfig";
LABEL_21:
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
      return 4294967090;
    }
    return 4294967090;
  }
  MP4AudioObjectType::Deserialize((uint64_t)(a1 + 10), a2);
  MP4SampleRate::Deserialize((MP4SampleRate *)(a1 + 11), a2, 1);
  if (a1[11])
  {
    int v18 = a1 + 11;
    unsigned int v7 = *(_DWORD *)(a2 + 16);
    unsigned int v8 = v7 >> 28;
    int v9 = *(_DWORD *)(a2 + 20) - 4;
    *(_DWORD *)(a2 + 20) = v9;
    if (v9 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v11 = *(_DWORD *)(a2 + 16);
      int v12 = *(_DWORD *)(a2 + 20);
      v8 |= v11 >> v12;
      *(_DWORD *)(a2 + 20) = v12 + 32;
      if (v12 == -32) {
        int v10 = 0;
      }
      else {
        int v10 = v11 << -(char)v12;
      }
    }
    else
    {
      int v10 = 16 * v7;
    }
    *(_DWORD *)(a2 + 16) = v10;
    a1[14] = 0;
    unsigned int v13 = a1 + 14;
    a1[18] = -1;
    a1[20] = -1;
    int v14 = a1 + 20;
    a1[12] = v8;
    a1[15] = 0;
    uint64_t v15 = a1 + 15;
    int v16 = a1[10];
    if (v16 == 29)
    {
      *unsigned int v13 = 5;
      a1[18] = 1;
    }
    else
    {
      if (v16 != 5) {
        goto LABEL_24;
      }
      *unsigned int v13 = 5;
      int v14 = a1 + 18;
    }
    *int v14 = 1;
    MP4SampleRate::Deserialize((MP4SampleRate *)(a1 + 15), a2, 1);
    if (*v15 != *v18 && *v15 != 2 * *v18)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        int v20 = "ACMP4BitStreams.cpp";
        __int16 v21 = 1024;
        int v22 = 1522;
        unint64_t v5 = MEMORY[0x1E4F14500];
        int v6 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: the sampleRate is incorrect";
        goto LABEL_21;
      }
      return 4294967090;
    }
    MP4AudioObjectType::Deserialize((uint64_t)(a1 + 10), a2);
    int v16 = a1[10];
LABEL_24:
    if (v16 > 20)
    {
      switch(v16)
      {
        case 21:
        case 23:
          goto LABEL_28;
        case 24:
          goto LABEL_32;
        case 30:
          operator new();
        case 36:
          operator new();
        case 37:
        case 38:
          operator new();
        case 39:
          operator new();
        case 42:
          operator new();
        default:
          goto LABEL_29;
      }
    }
    if ((v16 - 1) >= 4 && v16 != 7)
    {
      if (v16 == 8) {
LABEL_32:
      }
        operator new();
LABEL_29:
      operator new();
    }
LABEL_28:
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v20 = "ACMP4BitStreams.cpp";
    __int16 v21 = 1024;
    int v22 = 1500;
    unint64_t v5 = MEMORY[0x1E4F14500];
    int v6 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig: invalid sample rate";
    goto LABEL_21;
  }
  return 4294967090;
}

void sub_18FFF5C04(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A1C40A5657A2CLL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<MP4AOTSpecificBase>::reset[abi:ne180100]<MP4SpatialAudioSpecificConfig,void>()
{
}

void sub_18FFF5DF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<MP4SpatialAudioSpecificConfig *,std::shared_ptr<MP4AOTSpecificBase>::__shared_ptr_default_delete<MP4AOTSpecificBase,MP4SpatialAudioSpecificConfig>,std::allocator<MP4SpatialAudioSpecificConfig>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MP4SpatialAudioSpecificConfig *,std::shared_ptr<MP4AOTSpecificBase>::__shared_ptr_default_delete<MP4AOTSpecificBase,MP4SpatialAudioSpecificConfig>,std::allocator<MP4SpatialAudioSpecificConfig>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t std::__shared_ptr_pointer<MP4AOTSpecificBase *,std::shared_ptr<MP4AOTSpecificBase>::__shared_ptr_default_delete<MP4AOTSpecificBase,MP4AOTSpecificBase>,std::allocator<MP4AOTSpecificBase>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MP4AOTSpecificBase *,std::shared_ptr<MP4AOTSpecificBase>::__shared_ptr_default_delete<MP4AOTSpecificBase,MP4AOTSpecificBase>,std::allocator<MP4AOTSpecificBase>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload(_DWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a2 + 8);
  unsigned int v7 = *(unsigned int **)a2;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  unsigned int v10 = HIBYTE(v8);
  int v11 = v9 - 8;
  *(_DWORD *)(a2 + 20) = v9 - 8;
  if (v9 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v7);
    unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v13;
    unsigned int v14 = *(_DWORD *)(a2 + 16);
    int v15 = *(_DWORD *)(a2 + 20);
    v10 |= v14 >> v15;
    int v11 = v15 + 32;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = v14 << -(char)v15;
    }
  }
  else
  {
    unsigned int v12 = v8 << 8;
    unsigned int v13 = v7;
  }
  *(_DWORD *)(a2 + 16) = v12;
  a1[8] = v10;
  if (v10 == 5)
  {
    int v16 = 0;
    int v17 = v6 - v7;
    unsigned int v18 = -1;
    do
    {
      unsigned int v19 = HIBYTE(v12);
      v11 -= 8;
      *(_DWORD *)(a2 + 20) = v11;
      if (v11 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
        unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
        *(void *)a2 = v13;
        unsigned int v20 = *(_DWORD *)(a2 + 16);
        int v21 = *(_DWORD *)(a2 + 20);
        v19 |= v20 >> v21;
        int v11 = v21 + 32;
        *(_DWORD *)(a2 + 20) = v21 + 32;
        if (v21 == -32) {
          unsigned int v12 = 0;
        }
        else {
          unsigned int v12 = v20 << -(char)v21;
        }
      }
      else
      {
        v12 <<= 8;
      }
      *(_DWORD *)(a2 + 16) = v12;
      if (v18 == 4)
      {
        a1[9] = 0;
        goto LABEL_24;
      }
      int v22 = v19 & 0x7F | (v16 << 7);
      ++v18;
      int v16 = v22;
    }
    while ((v19 & 0x80) != 0);
    a1[9] = v22;
    if (v18 < 4)
    {
      if (a3)
      {
        *a3 = (v9 - v11 + 8 * ((int)v13 - *(_DWORD *)(a2 + 8) + v17)) / 8;
        int v22 = a1[9];
      }
      return DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig(a1, a2, 8 * v22);
    }
LABEL_24:
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    int v26 = 136315394;
    int v27 = "ACMP4BitStreams.cpp";
    __int16 v28 = 1024;
    int v29 = 1750;
    int v24 = MEMORY[0x1E4F14500];
    int v25 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload: the Decoder specific info tag size is incorrect";
    goto LABEL_26;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v26 = 136315394;
    int v27 = "ACMP4BitStreams.cpp";
    __int16 v28 = 1024;
    int v29 = 1746;
    int v24 = MEMORY[0x1E4F14500];
    int v25 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload: the DecoderSpecificInfo tag is incorrect";
LABEL_26:
    _os_log_impl(&dword_18FEC0000, v24, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v26, 0x12u);
  }
  return 4294967090;
}

uint64_t DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 1208);
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      uint64_t v30 = "ACMP4BitStreams.cpp";
      __int16 v31 = 1024;
      int v32 = 1788;
      int v16 = MEMORY[0x1E4F14500];
      int v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: NULL MPEG2AACSpecificConfig";
      goto LABEL_32;
    }
    return 4294967090;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if ((v5 - 102) >= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      uint64_t v30 = "ACMP4BitStreams.cpp";
      __int16 v31 = 1024;
      int v32 = 1807;
      int v16 = MEMORY[0x1E4F14500];
      int v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: unrecognized object type indication";
      goto LABEL_32;
    }
    return 4294967090;
  }
  int v8 = *(_DWORD *)(a2 + 8);
  int v9 = *(unsigned int **)a2;
  int v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 40) = v5 - 101;
  unsigned int v11 = *(_DWORD *)(a2 + 16);
  unsigned int v12 = HIBYTE(v11);
  int v13 = *(_DWORD *)(a2 + 20) - 8;
  *(_DWORD *)(a2 + 20) = v13;
  if (v13 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v9);
    int v15 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v15;
    unsigned int v18 = *(_DWORD *)(a2 + 16);
    int v19 = *(_DWORD *)(a2 + 20);
    v12 |= v18 >> v19;
    int v13 = v19 + 32;
    *(_DWORD *)(a2 + 20) = v19 + 32;
    if (v19 == -32) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = v18 << -(char)v19;
    }
  }
  else
  {
    unsigned int v14 = v11 << 8;
    int v15 = v9;
  }
  *(_DWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a1 + 32) = v12;
  if (v12 == 5)
  {
    int v20 = 0;
    int v21 = v8 - v9;
    unsigned int v22 = -1;
    while (1)
    {
      unsigned int v23 = HIBYTE(v14);
      v13 -= 8;
      *(_DWORD *)(a2 + 20) = v13;
      if (v13 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
        int v15 = (unsigned int *)(*(void *)a2 + 4);
        *(void *)a2 = v15;
        unsigned int v24 = *(_DWORD *)(a2 + 16);
        int v25 = *(_DWORD *)(a2 + 20);
        v23 |= v24 >> v25;
        int v13 = v25 + 32;
        *(_DWORD *)(a2 + 20) = v25 + 32;
        unsigned int v14 = v25 == -32 ? 0 : v24 << -(char)v25;
      }
      else
      {
        v14 <<= 8;
      }
      *(_DWORD *)(a2 + 16) = v14;
      if (v22 == 4) {
        break;
      }
      int v26 = v23 & 0x7F | (v20 << 7);
      ++v22;
      int v20 = v26;
      if ((v23 & 0x80) == 0)
      {
        *(_DWORD *)(a1 + 36) = v26;
        if (v22 < 4)
        {
          if (a3) {
            *a3 = (v10 - v13 + 8 * ((int)v15 - *(_DWORD *)(a2 + 8) + v21)) / 8;
          }
          if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, a2))
          {
            memcpy((void *)(a1 + 88), (const void *)(v3 + 44), 0x44CuLL);
            uint64_t result = 0;
            int v28 = *(_DWORD *)(a1 + 96);
            *(void *)(a1 + 48) = 0;
            *(_DWORD *)(a1 + 44) = v28;
            *(_DWORD *)(a1 + 72) = -1;
            *(_DWORD *)(a1 + 80) = -1;
            return result;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return 4294967090;
          }
          int v29 = 136315394;
          uint64_t v30 = "ACMP4BitStreams.cpp";
          __int16 v31 = 1024;
          int v32 = 1824;
          int v16 = MEMORY[0x1E4F14500];
          int v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: could not parse ADIF header";
LABEL_32:
          _os_log_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v29, 0x12u);
          return 4294967090;
        }
LABEL_30:
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return 4294967090;
        }
        int v29 = 136315394;
        uint64_t v30 = "ACMP4BitStreams.cpp";
        __int16 v31 = 1024;
        int v32 = 1816;
        int v16 = MEMORY[0x1E4F14500];
        int v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: the Decoder specific info t"
              "ag size is incorrect";
        goto LABEL_32;
      }
    }
    *(_DWORD *)(a1 + 36) = 0;
    goto LABEL_30;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v29 = 136315394;
    uint64_t v30 = "ACMP4BitStreams.cpp";
    __int16 v31 = 1024;
    int v32 = 1812;
    int v16 = MEMORY[0x1E4F14500];
    int v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: the DecoderSpecificInfo tag is incorrect";
    goto LABEL_32;
  }
  return 4294967090;
}

uint64_t DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 1208);
  if (!v3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    int v27 = 136315394;
    int v28 = "ACMP4BitStreams.cpp";
    __int16 v29 = 1024;
    int v30 = 1869;
    int v15 = MEMORY[0x1E4F14500];
    int v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload: NULL MPEG1Or2SpecificConfig";
LABEL_27:
    _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v27, 0x12u);
    return 4294967090;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  int v8 = *(unsigned int **)a2;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 20);
  unsigned int v11 = HIBYTE(v9);
  int v12 = v10 - 8;
  *(_DWORD *)(a2 + 20) = v10 - 8;
  if (v10 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v8);
    unsigned int v14 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v14;
    unsigned int v17 = *(_DWORD *)(a2 + 16);
    int v18 = *(_DWORD *)(a2 + 20);
    v11 |= v17 >> v18;
    int v12 = v18 + 32;
    *(_DWORD *)(a2 + 20) = v18 + 32;
    if (v18 == -32) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v17 << -(char)v18;
    }
  }
  else
  {
    unsigned int v13 = v9 << 8;
    unsigned int v14 = v8;
  }
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a1 + 32) = v11;
  if (v11 != 5)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    int v27 = 136315394;
    int v28 = "ACMP4BitStreams.cpp";
    __int16 v29 = 1024;
    int v30 = 1873;
    int v15 = MEMORY[0x1E4F14500];
    int v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload: the DecoderSpecificInfo tag is incorrect";
    goto LABEL_27;
  }
  int v19 = 0;
  int v20 = v7 - v8;
  unsigned int v21 = -1;
  do
  {
    unsigned int v22 = HIBYTE(v13);
    v12 -= 8;
    *(_DWORD *)(a2 + 20) = v12;
    if (v12 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v14);
      unsigned int v14 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v14;
      unsigned int v23 = *(_DWORD *)(a2 + 16);
      int v24 = *(_DWORD *)(a2 + 20);
      v22 |= v23 >> v24;
      int v12 = v24 + 32;
      *(_DWORD *)(a2 + 20) = v24 + 32;
      if (v24 == -32) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = v23 << -(char)v24;
      }
    }
    else
    {
      v13 <<= 8;
    }
    *(_DWORD *)(a2 + 16) = v13;
    if (v21 == 4)
    {
      *(_DWORD *)(a1 + 36) = 0;
      goto LABEL_25;
    }
    int v25 = v22 & 0x7F | (v19 << 7);
    ++v21;
    int v19 = v25;
  }
  while ((v22 & 0x80) != 0);
  *(_DWORD *)(a1 + 36) = v25;
  if (v21 < 4)
  {
    if (a3) {
      *a3 = (v10 - v12 + 8 * ((int)v14 - *(_DWORD *)(a2 + 8) + v20)) / 8;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, a2);
    operator new();
  }
LABEL_25:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v27 = 136315394;
    int v28 = "ACMP4BitStreams.cpp";
    __int16 v29 = 1024;
    int v30 = 1877;
    int v15 = MEMORY[0x1E4F14500];
    int v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload: the Decoder specific info tag s"
          "ize is incorrect";
    goto LABEL_27;
  }
  return 4294967090;
}

uint64_t DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned int **)a2;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  unsigned int v10 = HIBYTE(v8);
  int v11 = v9 - 8;
  *(_DWORD *)(a2 + 20) = v9 - 8;
  if (v9 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v7);
    unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v13;
    unsigned int v14 = *(_DWORD *)(a2 + 16);
    int v15 = *(_DWORD *)(a2 + 20);
    v10 |= v14 >> v15;
    int v11 = v15 + 32;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = v14 << -(char)v15;
    }
  }
  else
  {
    unsigned int v12 = v8 << 8;
    unsigned int v13 = v7;
  }
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a1 + 32) = v10;
  if (v10 != 5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v56 = 136315394;
      unsigned int v57 = "ACMP4BitStreams.cpp";
      __int16 v58 = 1024;
      int v59 = 1906;
      int v26 = MEMORY[0x1E4F14500];
      int v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the DecoderSpecificInfo tag is incorrect";
      goto LABEL_63;
    }
    return 4294967090;
  }
  unsigned int v16 = 0;
  int v17 = v6 - v7;
  int v18 = 6;
  do
  {
    unsigned int v19 = HIBYTE(v12);
    v11 -= 8;
    *(_DWORD *)(a2 + 20) = v11;
    if (v11 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v13;
      unsigned int v20 = *(_DWORD *)(a2 + 16);
      int v21 = *(_DWORD *)(a2 + 20);
      v19 |= v20 >> v21;
      int v11 = v21 + 32;
      *(_DWORD *)(a2 + 20) = v21 + 32;
      if (v21 == -32) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = v20 << -(char)v21;
      }
    }
    else
    {
      v12 <<= 8;
    }
    *(_DWORD *)(a2 + 16) = v12;
    if (!--v18)
    {
      *(_DWORD *)(a1 + 36) = 0;
      goto LABEL_23;
    }
    unsigned int v22 = v19 & 0x7F | (v16 << 7);
    unsigned int v16 = v22;
  }
  while ((v19 & 0x80) != 0);
  *(_DWORD *)(a1 + 36) = v22;
  if (v22 <= 0x1F)
  {
LABEL_23:
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    int v56 = 136315394;
    unsigned int v57 = "ACMP4BitStreams.cpp";
    __int16 v58 = 1024;
    int v59 = 1910;
    int v26 = MEMORY[0x1E4F14500];
    int v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the Decoder specific info tag size is incorrect";
    goto LABEL_63;
  }
  if (a3)
  {
    *a3 = (v9 - v11 + 8 * ((int)v13 - *(_DWORD *)(a2 + 8) + v17)) / 8;
    unsigned int v12 = *(_DWORD *)(a2 + 16);
    int v11 = *(_DWORD *)(a2 + 20);
  }
  unsigned int v23 = HIBYTE(v12);
  int v24 = v11 - 8;
  *(_DWORD *)(a2 + 20) = v24;
  if (v24 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
    unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v13;
    unsigned int v28 = *(_DWORD *)(a2 + 16);
    int v29 = *(_DWORD *)(a2 + 20);
    v23 |= v28 >> v29;
    int v24 = v29 + 32;
    *(_DWORD *)(a2 + 20) = v29 + 32;
    if (v29 == -32) {
      unsigned int v25 = 0;
    }
    else {
      unsigned int v25 = v28 << -(char)v29;
    }
  }
  else
  {
    unsigned int v25 = v12 << 8;
  }
  *(_DWORD *)(a2 + 16) = v25;
  if (!(_BYTE)v23)
  {
    unsigned int v33 = HIBYTE(v25);
    int v31 = v24 - 8;
    *(_DWORD *)(a2 + 20) = v31;
    if (v31 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v13;
      unsigned int v36 = *(_DWORD *)(a2 + 16);
      int v37 = *(_DWORD *)(a2 + 20);
      v33 |= v36 >> v37;
      int v31 = v37 + 32;
      *(_DWORD *)(a2 + 20) = v37 + 32;
      if (v37 == -32) {
        unsigned int v32 = 0;
      }
      else {
        unsigned int v32 = v36 << -(char)v37;
      }
    }
    else
    {
      unsigned int v32 = v25 << 8;
    }
    *(_DWORD *)(a2 + 16) = v32;
    if (v33 != 30) {
      goto LABEL_61;
    }
LABEL_52:
    unsigned int v41 = HIBYTE(v32);
    int v42 = v31 - 8;
    *(_DWORD *)(a2 + 20) = v42;
    if (v42 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v13;
      unsigned int v44 = *(_DWORD *)(a2 + 16);
      int v45 = *(_DWORD *)(a2 + 20);
      v41 |= v44 >> v45;
      int v42 = v45 + 32;
      *(_DWORD *)(a2 + 20) = v45 + 32;
      if (v45 == -32) {
        unsigned int v43 = 0;
      }
      else {
        unsigned int v43 = v44 << -(char)v45;
      }
    }
    else
    {
      unsigned int v43 = v32 << 8;
    }
    *(_DWORD *)(a2 + 16) = v43;
    if (v41 != 1) {
      goto LABEL_61;
    }
    if (v42 + 8 * (*(_DWORD *)(a2 + 8) - (int)v13) <= 231)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294967090;
      }
      int v56 = 136315394;
      unsigned int v57 = "ACMP4BitStreams.cpp";
      __int16 v58 = 1024;
      int v59 = 1942;
      int v26 = MEMORY[0x1E4F14500];
      int v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the Decoder specific info is too sma"
            "ll to contain a full Vorbis identification header";
      goto LABEL_63;
    }
    int v47 = v42 - 32;
    *(_DWORD *)(a2 + 20) = v47;
    if (v47 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v13;
      unsigned int v49 = *(_DWORD *)(a2 + 16);
      int v50 = *(_DWORD *)(a2 + 20);
      int v48 = (v49 >> v50) | v43;
      int v47 = v50 + 32;
      if (v50 == -32)
      {
        unsigned int v51 = 0;
        *(void *)(a2 + 16) = 0xFFFFFFF000000000;
        goto LABEL_72;
      }
      unsigned int v43 = v49 << -(char)v50;
      *(_DWORD *)(a2 + 16) = v43;
    }
    else
    {
      int v48 = v43;
    }
    unsigned int v51 = HIWORD(v43);
    int v52 = v47 - 16;
    *(_DWORD *)(a2 + 20) = v52;
    if (v52 >= 0)
    {
      unsigned int v53 = v43 << 16;
      goto LABEL_75;
    }
LABEL_72:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
    *(void *)a2 += 4;
    unsigned int v54 = *(_DWORD *)(a2 + 16);
    int v55 = *(_DWORD *)(a2 + 20);
    v51 |= v54 >> v55;
    *(_DWORD *)(a2 + 20) = v55 + 32;
    if (v55 == -32) {
      unsigned int v53 = 0;
    }
    else {
      unsigned int v53 = v54 << -(char)v55;
    }
LABEL_75:
    *(_DWORD *)(a2 + 16) = v53;
    if (v48 == 1987015266 && (unsigned __int16)v51 == 26995) {
      return 0;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v56 = 136315394;
      unsigned int v57 = "ACMP4BitStreams.cpp";
      __int16 v58 = 1024;
      int v59 = 1946;
      int v26 = MEMORY[0x1E4F14500];
      int v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the identification header packet typ"
            "e does not indicate Vorbis";
      goto LABEL_63;
    }
    return 4294967090;
  }
  if (v23 == 2)
  {
    unsigned int v30 = HIBYTE(v25);
    int v31 = v24 - 8;
    *(_DWORD *)(a2 + 20) = v31;
    if (v31 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v13;
      unsigned int v34 = *(_DWORD *)(a2 + 16);
      int v35 = *(_DWORD *)(a2 + 20);
      v30 |= v34 >> v35;
      int v31 = v35 + 32;
      *(_DWORD *)(a2 + 20) = v35 + 32;
      unsigned int v32 = v35 == -32 ? 0 : v34 << -(char)v35;
    }
    else
    {
      unsigned int v32 = v25 << 8;
    }
    *(_DWORD *)(a2 + 16) = v32;
    if (v30 == 30)
    {
      while (1)
      {
        unsigned int v38 = HIBYTE(v32);
        v31 -= 8;
        *(_DWORD *)(a2 + 20) = v31;
        if (v31 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
          unsigned int v13 = (unsigned int *)(*(void *)a2 + 4);
          *(void *)a2 = v13;
          unsigned int v39 = *(_DWORD *)(a2 + 16);
          int v40 = *(_DWORD *)(a2 + 20);
          v38 |= v39 >> v40;
          int v31 = v40 + 32;
          *(_DWORD *)(a2 + 20) = v40 + 32;
          unsigned int v32 = v40 == -32 ? 0 : v39 << -(char)v40;
        }
        else
        {
          v32 <<= 8;
        }
        *(_DWORD *)(a2 + 16) = v32;
        if (v31 + 8 * (*(_DWORD *)(a2 + 8) - (int)v13) <= 7) {
          break;
        }
        if ((_BYTE)v38 != 0xFF) {
          goto LABEL_52;
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v56 = 136315394;
        unsigned int v57 = "ACMP4BitStreams.cpp";
        __int16 v58 = 1024;
        int v59 = 1927;
        int v26 = MEMORY[0x1E4F14500];
        int v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the Decoder specific info is too s"
              "mall to contain a Vorbis identification header";
        goto LABEL_63;
      }
      return 4294967090;
    }
  }
LABEL_61:
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    return 4294967090;
  }
  int v56 = 136315394;
  unsigned int v57 = "ACMP4BitStreams.cpp";
  __int16 v58 = 1024;
  int v59 = 1941;
  int v26 = MEMORY[0x1E4F14500];
  int v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the identification header packet type is incorrect";
LABEL_63:
  _os_log_impl(&dword_18FEC0000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&v56, 0x12u);
  return 4294967090;
}

uint64_t MP4OTISpecificBase::MakeObjectTypeSpecific(int a1)
{
  if (a1 > 104)
  {
    if (a1 == 105 || a1 == 107) {
      operator new();
    }
    if (a1 == 225) {
      operator new();
    }
  }
  else if ((a1 - 102) < 3)
  {
    operator new();
  }
  return 0;
}

void ADIFHeader::Clear(ADIFHeader *this)
{
  bzero(this, 4uLL);
  bzero((char *)this + 4, 9uLL);
  bzero((char *)this + 16, 4uLL);
  bzero((char *)this + 20, 4uLL);
  bzero((char *)this + 24, 4uLL);
  bzero((char *)this + 28, 4uLL);
  bzero((char *)this + 32, 4uLL);
}

uint64_t DecoderConfigDescr::Deserialize(unsigned int *a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a2 + 8);
  int v9 = *(unsigned int **)a2;
  int v57 = 0;
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 20);
  unsigned int v12 = HIBYTE(v10);
  int v13 = v11 - 8;
  *(_DWORD *)(a2 + 20) = v11 - 8;
  if (v11 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v9);
    int v15 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v15;
    unsigned int v16 = *(_DWORD *)(a2 + 16);
    int v17 = *(_DWORD *)(a2 + 20);
    v12 |= v16 >> v17;
    int v13 = v17 + 32;
    *(_DWORD *)(a2 + 20) = v17 + 32;
    if (v17 == -32) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = v16 << -(char)v17;
    }
  }
  else
  {
    unsigned int v14 = v10 << 8;
    int v15 = v9;
  }
  *(_DWORD *)(a2 + 16) = v14;
  *a1 = v12;
  if (v12 != 4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v59 = "ACMP4BitStreams.cpp";
    __int16 v60 = 1024;
    int v61 = 1982;
    unsigned int v28 = MEMORY[0x1E4F14500];
    int v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the DecoderConfigDescriptor tag is incorrect";
LABEL_23:
    _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x12u);
    return 4294967090;
  }
  int v18 = 0;
  int v19 = v8 - v9;
  unsigned int v20 = -1;
  do
  {
    unsigned int v21 = HIBYTE(v14);
    v13 -= 8;
    *(_DWORD *)(a2 + 20) = v13;
    if (v13 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
      int v15 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v15;
      unsigned int v22 = *(_DWORD *)(a2 + 16);
      int v23 = *(_DWORD *)(a2 + 20);
      v21 |= v22 >> v23;
      int v13 = v23 + 32;
      *(_DWORD *)(a2 + 20) = v23 + 32;
      if (v23 == -32) {
        unsigned int v14 = 0;
      }
      else {
        unsigned int v14 = v22 << -(char)v23;
      }
    }
    else
    {
      v14 <<= 8;
    }
    *(_DWORD *)(a2 + 16) = v14;
    if (v20 == 4)
    {
      a1[1] = 0;
      goto LABEL_21;
    }
    int v24 = v21 & 0x7F | (v18 << 7);
    ++v20;
    int v18 = v24;
  }
  while ((v21 & 0x80) != 0);
  a1[1] = v24;
  if (v20 >= 4)
  {
LABEL_21:
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v59 = "ACMP4BitStreams.cpp";
    __int16 v60 = 1024;
    int v61 = 1986;
    unsigned int v28 = MEMORY[0x1E4F14500];
    int v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the Decoder config descriptor tag size is incorrect";
    goto LABEL_23;
  }
  unsigned int v25 = HIBYTE(v14);
  int v26 = v13 - 8;
  *(_DWORD *)(a2 + 20) = v26;
  if (v26 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
    int v15 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v15;
    unsigned int v31 = *(_DWORD *)(a2 + 16);
    int v32 = *(_DWORD *)(a2 + 20);
    v25 |= v31 >> v32;
    *(_DWORD *)(a2 + 20) = v32 + 32;
    if (v32 == -32) {
      int v27 = 0;
    }
    else {
      int v27 = v31 << -(char)v32;
    }
  }
  else
  {
    int v27 = v14 << 8;
  }
  *(_DWORD *)(a2 + 16) = v27;
  a1[2] = v25;
  if (v25 != 64
    && ((v25 - 105) & 0xFFFFFFFD) != 0
    && v25 - 102 >= 3
    && (v25 - 221 > 4 || ((1 << (v25 + 35)) & 0x13) == 0))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v59 = "ACMP4BitStreams.cpp";
    __int16 v60 = 1024;
    int v61 = 1995;
    unsigned int v28 = MEMORY[0x1E4F14500];
    int v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the object type ID is incorrect";
    goto LABEL_23;
  }
  unsigned int v33 = *(_DWORD *)(a2 + 16);
  unsigned int v34 = v33 >> 26;
  int v35 = *(_DWORD *)(a2 + 20) - 6;
  *(_DWORD *)(a2 + 20) = v35;
  if (v35 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
    *(void *)a2 += 4;
    unsigned int v37 = *(_DWORD *)(a2 + 16);
    int v38 = *(_DWORD *)(a2 + 20);
    v34 |= v37 >> v38;
    *(_DWORD *)(a2 + 20) = v38 + 32;
    if (v38 == -32) {
      int v36 = 0;
    }
    else {
      int v36 = v37 << -(char)v38;
    }
  }
  else
  {
    int v36 = v33 << 6;
  }
  *(_DWORD *)(a2 + 16) = v36;
  a1[3] = v34;
  if (v34 != 5)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v59 = "ACMP4BitStreams.cpp";
    __int16 v60 = 1024;
    int v61 = 1999;
    unsigned int v28 = MEMORY[0x1E4F14500];
    int v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the stream type is incorrect";
    goto LABEL_23;
  }
  a1[4] = TBitstreamReader<unsigned int>::GetBit(a2);
  TBitstreamReader<unsigned int>::SkipBits(a2, 1);
  unsigned int v40 = *(_DWORD *)(a2 + 16);
  int v39 = *(_DWORD *)(a2 + 20);
  unsigned int v41 = v40 >> 8;
  *(_DWORD *)(a2 + 20) = v39 - 24;
  if (v39 - 24 >= 0)
  {
    int v42 = v40 << 24;
    *(_DWORD *)(a2 + 16) = v40 << 24;
    unsigned int v43 = *(unsigned int **)a2;
    int v44 = v39 - 56;
    goto LABEL_46;
  }
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
  unsigned int v43 = (unsigned int *)(*(void *)a2 + 4);
  *(void *)a2 = v43;
  unsigned int v45 = *(_DWORD *)(a2 + 16);
  int v44 = *(_DWORD *)(a2 + 20);
  v41 |= v45 >> v44;
  if (v44 == -32)
  {
    int v42 = 0;
    a1[5] = v41;
    *(void *)(a2 + 16) = 0xFFFFFFE000000000;
    goto LABEL_49;
  }
  int v42 = v45 << -(char)v44;
  *(_DWORD *)(a2 + 16) = v42;
LABEL_46:
  a1[5] = v41;
  *(_DWORD *)(a2 + 20) = v44;
  int v46 = v42;
  if (v44 < 0)
  {
LABEL_49:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v43);
    unsigned int v43 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v43;
    unsigned int v47 = *(_DWORD *)(a2 + 16);
    int v48 = *(_DWORD *)(a2 + 20);
    int v46 = (v47 >> v48) | v42;
    int v44 = v48 + 32;
    if (v48 != -32)
    {
      int v42 = v47 << -(char)v48;
      *(_DWORD *)(a2 + 16) = v42;
      goto LABEL_51;
    }
    int v42 = 0;
    a1[6] = v46;
    *(void *)(a2 + 16) = 0xFFFFFFE000000000;
LABEL_54:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v43);
    unsigned int v51 = *(_DWORD *)(a2 + 16);
    int v50 = *(_DWORD *)(a2 + 20);
    int v49 = v50 + 32;
    BOOL v52 = v50 == -32;
    unsigned int v43 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v43;
    v42 |= v51 >> v50;
    int v53 = v51 << -(char)v50;
    if (v52) {
      int v53 = 0;
    }
    *(_DWORD *)(a2 + 16) = v53;
    *(_DWORD *)(a2 + 20) = v49;
  }
  else
  {
LABEL_51:
    a1[6] = v46;
    int v49 = v44 - 32;
    *(_DWORD *)(a2 + 20) = v49;
    if (v49 < 0) {
      goto LABEL_54;
    }
  }
  a1[7] = v42;
  int v54 = (v11 - v49 + 8 * ((int)v43 - *(_DWORD *)(a2 + 8) + v19)) / 8;
  if (a4 == 2)
  {
    int v55 = &v57;
    goto LABEL_62;
  }
  if (a4 != 1)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967090;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v59 = "ACMP4BitStreams.cpp";
    __int16 v60 = 1024;
    int v61 = 2029;
    unsigned int v28 = MEMORY[0x1E4F14500];
    int v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: the requested byte offset is not supported";
    goto LABEL_23;
  }
  int v55 = 0;
  if (a3) {
    *a3 = v54;
  }
LABEL_62:
  int v56 = a1[2];
  if (v56 != 64)
  {
    MP4OTISpecificBase::MakeObjectTypeSpecific(v56);
    std::shared_ptr<MP4OTISpecificBase>::reset[abi:ne180100]<MP4OTISpecificBase,void>();
  }
  uint64_t result = DecoderConfigDescr::DeserializeMPEG4AudioSpecificPayload(a1, a2, v55);
  if (!a3 || a4 != 2 || result) {
    return result;
  }
  if (v55)
  {
    uint64_t result = 0;
    *a3 = *v55 + v54;
    return result;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v59 = "ACMP4BitStreams.cpp";
    __int16 v60 = 1024;
    int v61 = 2073;
    unsigned int v28 = MEMORY[0x1E4F14500];
    int v29 = "%25s:%-5d  DecoderConfigDescr::Deserialize: failed to obtain offset to decoder specific config";
    goto LABEL_23;
  }
  return 4294967090;
}

void std::shared_ptr<MP4OTISpecificBase>::reset[abi:ne180100]<MP4OTISpecificBase,void>()
{
}

void sub_18FFF7A48(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<MP4OTISpecificBase *,std::shared_ptr<MP4OTISpecificBase>::__shared_ptr_default_delete<MP4OTISpecificBase,MP4OTISpecificBase>,std::allocator<MP4OTISpecificBase>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MP4OTISpecificBase *,std::shared_ptr<MP4OTISpecificBase>::__shared_ptr_default_delete<MP4OTISpecificBase,MP4OTISpecificBase>,std::allocator<MP4OTISpecificBase>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount(DecoderConfigDescr *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *((_DWORD *)this + 10);
  uint64_t v2 = (MP4SampleRate *)*((unsigned int *)this + 11);
  if (v3 <= 0x1F) {
    int v4 = 5;
  }
  else {
    int v4 = 11;
  }
  if (MP4SampleRate::Index(v2) == 15) {
    int v5 = 28;
  }
  else {
    int v5 = 4;
  }
  unsigned int v6 = v4 + v5 + 4;
  if (v3 == 29 || v3 == 5)
  {
    if (MP4SampleRate::Index((MP4SampleRate *)*((unsigned int *)this + 15)) == 15) {
      int v8 = 28;
    }
    else {
      int v8 = 4;
    }
    v6 += v4 + v8;
  }
  if (v3 - 1 < 4) {
    goto LABEL_17;
  }
  if (v3 == 39)
  {
    uint64_t v9 = *((void *)this + 149);
    goto LABEL_25;
  }
  if (v3 == 23)
  {
LABEL_17:
    uint64_t v9 = *((void *)this + 149);
    if (!v9)
    {
      v6 += 3;
      if (*((_DWORD *)this + 12)) {
        goto LABEL_27;
      }
      int v10 = MP4AudioProgramConfig::SerializeCount((DecoderConfigDescr *)((char *)this + 88), v6);
LABEL_26:
      v6 += v10;
LABEL_27:
      int v11 = *((_DWORD *)this + 10);
      if ((v11 - 19) < 9 || v11 == 39 || v11 == 17) {
        v6 += 2;
      }
      int v12 = *((_DWORD *)this + 18);
      if (v12 != -1 && *((_DWORD *)this + 17) == 695)
      {
        unsigned int v13 = *((_DWORD *)this + 14);
        int v14 = v13 <= 0x1F ? 5 : 11;
        v6 += v14 + 11;
        if (v13 == 5)
        {
          ++v6;
          if (v12 == 1)
          {
            int v15 = MP4SampleRate::Index((MP4SampleRate *)*((unsigned int *)this + 15)) == 15 ? 28 : 4;
            v6 += v15;
            if (*((_DWORD *)this + 20) != -1 && *((_DWORD *)this + 19) == 1352) {
              v6 += 12;
            }
          }
        }
      }
      goto LABEL_42;
    }
LABEL_25:
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    goto LABEL_26;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v18 = 136315394;
    int v19 = "ACMP4BitStreams.cpp";
    __int16 v20 = 1024;
    int v21 = 2137;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount: Unsupported AudioObjectType", (uint8_t *)&v18, 0x12u);
  }
LABEL_42:
  unsigned int v16 = v6 >> 3;
  if ((v6 & 7) != 0) {
    return v16 + 1;
  }
  else {
    return v16;
  }
}

uint64_t DecoderConfigDescr::GetDefaultPriming(DecoderConfigDescr *this, unsigned int *a2)
{
  uint64_t result = 0;
  int v4 = *((_DWORD *)this + 10);
  unsigned int v5 = 2112;
  if (v4 > 22)
  {
    switch(v4)
    {
      case 39:
        unsigned int v5 = 256;
        if (*((void *)this + 149))
        {
          uint64_t result = 0;
          BOOL v6 = *((_DWORD *)this + 13) == 0;
          int v7 = 240;
LABEL_14:
          if (!v6) {
            unsigned int v5 = v7;
          }
          goto LABEL_17;
        }
LABEL_16:
        uint64_t result = 0;
        goto LABEL_17;
      case 29:
        goto LABEL_17;
      case 23:
        unsigned int v5 = 512;
        if (*((void *)this + 149))
        {
          uint64_t result = 0;
          BOOL v6 = *((_DWORD *)this + 13) == 0;
          int v7 = 480;
          goto LABEL_14;
        }
        goto LABEL_16;
    }
LABEL_11:
    unsigned int v5 = 0;
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_17;
  }
  if (v4 != 2 && v4 != 5) {
    goto LABEL_11;
  }
LABEL_17:
  *a2 = v5;
  return result;
}

uint64_t DecoderConfigDescr::GetFramesPerPacket(DecoderConfigDescr *this)
{
  int v1 = *((_DWORD *)this + 10) - 1;
  uint64_t result = 384;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 20:
    case 28:
      uint64_t result = 1024;
      if (*((void *)this + 149))
      {
        if (*((_DWORD *)this + 13)) {
          uint64_t result = 960;
        }
        else {
          uint64_t result = 1024;
        }
      }
      if (*((_DWORD *)this + 18) == 1)
      {
        int v4 = *((_DWORD *)this + 11);
        if (v4)
        {
          BOOL v5 = *((_DWORD *)this + 15) == v4;
          goto LABEL_9;
        }
      }
      break;
    case 7:
    case 23:
      int v7 = (_DWORD *)*((void *)this + 149);
      if (!v7) {
        goto LABEL_40;
      }
      if (v7[4])
      {
        uint64_t v8 = v7[8];
        if (v8 >= 4) {
          goto LABEL_40;
        }
        uint64_t result = dword_1901C6700[v8];
      }
      else
      {
        unsigned int v14 = v7[9];
        if (v7[5])
        {
          if (v14 >= 0x10)
          {
            uint64_t result = 160;
            if (v14 >= 0x17)
            {
              if (v14 >= 0x20) {
                uint64_t result = 0;
              }
              else {
                uint64_t result = 160;
              }
            }
          }
          else
          {
            uint64_t result = 320;
          }
        }
        else
        {
          if (v14 == 27) {
            int v15 = 240;
          }
          else {
            int v15 = 0;
          }
          if (v14 >= 0x1B) {
            int v16 = v15;
          }
          else {
            int v16 = 80;
          }
          if (v14 >= 0x16) {
            int v17 = v16;
          }
          else {
            int v17 = 160;
          }
          if (v14 >= 6) {
            unsigned int v18 = v17;
          }
          else {
            unsigned int v18 = 240;
          }
          if (v14 >= 3) {
            uint64_t result = v18;
          }
          else {
            uint64_t result = 320;
          }
          if (v7[11])
          {
            int v12 = v7[13];
            goto LABEL_61;
          }
        }
      }
      break;
    case 8:
    case 24:
      uint64_t result = 160;
      break;
    case 22:
      uint64_t result = 512;
      if (*((void *)this + 149))
      {
        if (*((_DWORD *)this + 13)) {
          uint64_t result = 480;
        }
        else {
          uint64_t result = 512;
        }
      }
      break;
    case 31:
      return result;
    case 32:
      uint64_t result = 1152;
      break;
    case 33:
      if (*((_DWORD *)this + 11) <= 0x5DC0u) {
        uint64_t result = 576;
      }
      else {
        uint64_t result = 1152;
      }
      break;
    case 35:
      uint64_t v10 = *((void *)this + 149);
      if (!v10) {
        goto LABEL_40;
      }
      uint64_t result = *(unsigned int *)(v10 + 12);
      break;
    case 36:
    case 37:
      uint64_t v9 = *((void *)this + 149);
      if (!v9) {
        goto LABEL_40;
      }
      uint64_t result = (1024 << (*(unsigned char *)(v9 + 1116) & 7));
      break;
    case 38:
      int v11 = (_DWORD *)*((void *)this + 149);
      uint64_t result = 512;
      if (v11)
      {
        uint64_t result = v11[4] ? 480 : 512;
        if (v11[6])
        {
          int v12 = v11[7];
LABEL_61:
          BOOL v5 = v12 == 0;
LABEL_9:
          char v6 = !v5;
          uint64_t result = (result << v6);
        }
      }
      break;
    case 41:
      uint64_t v13 = *((void *)this + 149);
      if (v13 && *(unsigned char *)(v13 + 216)) {
        uint64_t result = kUSACSbrFrameLengthInfoTable[4 * *(unsigned int *)(v13 + 12) + 2];
      }
      else {
LABEL_40:
      }
        uint64_t result = 0;
      break;
    default:
      uint64_t result = 1024;
      break;
  }
  return result;
}

uint64_t DecoderConfigDescr::GetBaseLevelASBD(DecoderConfigDescr *this, AudioStreamBasicDescription *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  bzero(a2, 0x28uLL);
  int v5 = *((_DWORD *)this + 10);
  if (v5 <= 22)
  {
    AudioFormatID v6 = 1633772397;
    switch(v5)
    {
      case 1:
        goto LABEL_12;
      case 2:
        AudioFormatID v6 = 1633772320;
        goto LABEL_12;
      case 3:
        AudioFormatID v6 = 1633772402;
        goto LABEL_12;
      case 4:
        AudioFormatID v6 = 1633772404;
        goto LABEL_12;
      default:
        goto LABEL_32;
    }
  }
  switch(v5)
  {
    case 23:
      AudioFormatID v6 = 1633772396;
      break;
    case 39:
      AudioFormatID v6 = 1633772389;
      break;
    case 42:
      AudioFormatID v6 = 1970495843;
      break;
    default:
LABEL_32:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        int v15 = "ACMP4BitStreams.cpp";
        __int16 v16 = 1024;
        int v17 = 2588;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::BaseLevelASBD: unsupported or unknown MP4 Audio Object Type", buf, 0x12u);
      }
      return 0xFFFFFFFFLL;
  }
LABEL_12:
  a2->signed int mFormatID = v6;
  LODWORD(v4) = *((_DWORD *)this + 11);
  a2->mSampleRate = (double)v4;
  UInt32 FramesPerPacket = DecoderConfigDescr::GetFramesPerPacket(this);
  a2->mUInt32 FramesPerPacket = FramesPerPacket;
  if ((*((_DWORD *)this + 14) == 5 || (v5 - 5) >= 0xFFFFFFFC)
    && *((_DWORD *)this + 18) == 1
    && *((_DWORD *)this + 15) == 2 * *((_DWORD *)this + 11))
  {
    FramesPerPacket >>= 1;
    a2->mUInt32 FramesPerPacket = FramesPerPacket;
  }
  uint64_t v9 = *((void *)this + 149);
  if (v9)
  {
    int v10 = *((_DWORD *)this + 10);
    if (v10 == 42)
    {
      LODWORD(v8) = *(_DWORD *)(v9 + 8);
      a2->mSampleRate = (double)v8;
    }
    else if (v10 == 39 && *(_DWORD *)(v9 + 28) == 1)
    {
      a2->mUInt32 FramesPerPacket = FramesPerPacket >> 1;
    }
  }
  UInt32 v11 = *((_DWORD *)this + 20);
  if (v11 == 1)
  {
    uint64_t result = 0;
LABEL_30:
    a2->mChannelsPerFrame = v11;
    return result;
  }
  unsigned int v13 = 0;
  uint64_t result = DecoderConfigDescr::GetChannelLayoutTag(this, &v13);
  if (!result)
  {
    UInt32 v11 = (unsigned __int16)v13;
    goto LABEL_30;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v15 = "ACMP4BitStreams.cpp";
    __int16 v16 = 1024;
    int v17 = 2626;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::BaseLevelASBD: the DecoderConfigDescriptor channelConfiguration is incorrect", buf, 0x12u);
  }
  return 4294967090;
}

uint64_t DecoderConfigDescr::GetChannelLayoutTag(DecoderConfigDescr *this, unsigned int *a2)
{
  uint64_t result = 560226676;
  unsigned int v4 = 6553601;
  switch(*((_DWORD *)this + 12))
  {
    case 0:
      if (*((_DWORD *)this + 10) != 36)
      {
        int v6 = *((_DWORD *)this + 25);
        int v7 = *((_DWORD *)this + 58);
        int v8 = *((_DWORD *)this + 91);
        int v9 = *((_DWORD *)this + 124);
        switch(v7 + v6 + v8 + v9)
        {
          case 1:
            if (v6 == 1)
            {
              BOOL v10 = *((_DWORD *)this + 26) == 0;
              int v11 = 6619138;
              goto LABEL_13;
            }
            return result;
          case 2:
            if (v6 == 1 && v8 == 1)
            {
              if (*((_DWORD *)this + 26) && *((_DWORD *)this + 92))
              {
                unsigned int v4 = 7077892;
                goto LABEL_89;
              }
            }
            else if (v6 == 2 && !*((_DWORD *)this + 26))
            {
              BOOL v10 = *((_DWORD *)this + 27) == 0;
              int v11 = 7471107;
              unsigned int v4 = 6619138;
              goto LABEL_13;
            }
            return result;
          case 3:
            if (v6 == 2 && v8 == 1 && !*((_DWORD *)this + 26) && *((_DWORD *)this + 27))
            {
              BOOL v10 = *((_DWORD *)this + 92) == 0;
              int v11 = 7864325;
              unsigned int v4 = 7602180;
              goto LABEL_13;
            }
            return result;
          case 4:
            if (v6 == 2 && v8 == 2)
            {
              if (!*((_DWORD *)this + 26)
                && *((_DWORD *)this + 27)
                && *((_DWORD *)this + 92)
                && !*((_DWORD *)this + 93))
              {
                unsigned int v4 = 9240582;
                goto LABEL_89;
              }
              return result;
            }
            if (v6 != 2) {
              return result;
            }
            if (v7 == 1)
            {
              if (v8 != 1) {
                return result;
              }
              int v13 = *((_DWORD *)this + 26);
              if (!v13 && *((_DWORD *)this + 27) && *((_DWORD *)this + 59))
              {
                if (*((_DWORD *)this + 92)) {
                  unsigned int v4 = 9371655;
                }
                else {
                  unsigned int v4 = 9240582;
                }
                goto LABEL_89;
              }
              if (v9 != 1) {
                return result;
              }
            }
            else
            {
              if (v8 != 1 || v9 != 1) {
                return result;
              }
              int v13 = *((_DWORD *)this + 26);
            }
            if (!v13 && *((_DWORD *)this + 27) && *((_DWORD *)this + 92)) {
              goto LABEL_88;
            }
            return result;
          case 5:
            if (v6 == 2 && v8 == 2 && v9 == 1)
            {
              int v12 = *((_DWORD *)this + 26);
              if (!v12 && *((_DWORD *)this + 27) && *((_DWORD *)this + 92) && !*((_DWORD *)this + 93)) {
                goto LABEL_81;
              }
              if (v7)
              {
                if (v7 != 1 || v12) {
                  return result;
                }
                goto LABEL_39;
              }
            }
            else
            {
              if (v6 != 2)
              {
                if (v6 == 3
                  && !v7
                  && v8 == 1
                  && v9 == 1
                  && !*((_DWORD *)this + 26)
                  && *((_DWORD *)this + 27)
                  && *((_DWORD *)this + 92)
                  && *((_DWORD *)this + 28))
                {
                  goto LABEL_70;
                }
                return result;
              }
              if (v7)
              {
                if (v7 != 1) {
                  return result;
                }
                if (v8 == 1)
                {
                  if (v9 == 1 && !*((_DWORD *)this + 26) && *((_DWORD *)this + 27) && *((_DWORD *)this + 59))
                  {
                    BOOL v10 = *((_DWORD *)this + 92) == 0;
                    int v11 = 8323080;
                    unsigned int v4 = 9306119;
LABEL_13:
                    if (!v10) {
                      unsigned int v4 = v11;
                    }
                    goto LABEL_89;
                  }
                  return result;
                }
                if (v8 != 2 || *((_DWORD *)this + 26)) {
                  return result;
                }
LABEL_39:
                if (*((_DWORD *)this + 27)
                  && *((_DWORD *)this + 59)
                  && *((_DWORD *)this + 92)
                  && !*((_DWORD *)this + 93))
                {
                  unsigned int v4 = 9437192;
                  goto LABEL_89;
                }
                return result;
              }
            }
            if (v8 == 2
              && v9 == 1
              && !*((_DWORD *)this + 26)
              && *((_DWORD *)this + 27)
              && *((_DWORD *)this + 92)
              && *((_DWORD *)this + 93))
            {
              goto LABEL_77;
            }
            return result;
          default:
            return result;
        }
      }
      uint64_t v5 = *((void *)this + 149);
      if (v5)
      {
        unsigned int v4 = *(_DWORD *)(v5 + 24);
        goto LABEL_89;
      }
      return result;
    case 1:
      goto LABEL_89;
    case 2:
      unsigned int v4 = 6619138;
      goto LABEL_89;
    case 3:
      unsigned int v4 = 7471107;
      goto LABEL_89;
    case 4:
      unsigned int v4 = 7602180;
      goto LABEL_89;
    case 5:
      unsigned int v4 = 7864325;
      goto LABEL_89;
    case 6:
LABEL_88:
      unsigned int v4 = 8126470;
      goto LABEL_89;
    case 7:
      unsigned int v4 = 8323080;
      goto LABEL_89;
    case 0xB:
LABEL_81:
      unsigned int v4 = 9306119;
      goto LABEL_89;
    case 0xC:
LABEL_77:
      unsigned int v4 = 11993096;
      goto LABEL_89;
    case 0xE:
LABEL_70:
      unsigned int v4 = 12058632;
LABEL_89:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    default:
      return result;
  }
}

uint64_t DecoderConfigDescr::GetASBD(DecoderConfigDescr *this, AudioStreamBasicDescription *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 14))
  {
    if ((*((_DWORD *)this + 10) - 5) < 0xFFFFFFFC)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unsigned int v14 = "ACMP4BitStreams.cpp";
        __int16 v15 = 1024;
        int v16 = 2679;
        unsigned int v4 = MEMORY[0x1E4F14500];
        uint64_t v5 = "%25s:%-5d  DecoderConfigDescr::GetASBD: unsupported or unknown MP4 Audio Object Type / Extended Object Type combination";
LABEL_18:
        _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
        return 0xFFFFFFFFLL;
      }
      return 0xFFFFFFFFLL;
    }
    unsigned int v12 = 0;
    if (DecoderConfigDescr::GetChannelLayoutTag(this, &v12))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unsigned int v14 = "ACMP4BitStreams.cpp";
        __int16 v15 = 1024;
        int v16 = 2644;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::GetASBD: the DecoderConfigDescriptor channelConfiguration is incorrect", buf, 0x12u);
      }
      return 4294967090;
    }
    bzero(a2, 0x28uLL);
    if (*((_DWORD *)this + 14) != 5 || *((_DWORD *)this + 18) != 1)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unsigned int v14 = "ACMP4BitStreams.cpp";
        __int16 v15 = 1024;
        int v16 = 2665;
        unsigned int v4 = MEMORY[0x1E4F14500];
        uint64_t v5 = "%25s:%-5d  DecoderConfigDescr::GetASBD: unsupported or unknown MP4 Extension Audio Object Type";
        goto LABEL_18;
      }
      return 0xFFFFFFFFLL;
    }
    switch(*((_DWORD *)this + 10))
    {
      case 1:
        int v8 = *((_DWORD *)this + 20);
        int v9 = 1633774960;
        AudioFormatID v10 = 1633774963;
        goto LABEL_23;
      case 2:
        int v8 = *((_DWORD *)this + 20);
        AudioFormatID v10 = 1633772392;
        int v9 = 1633772400;
        goto LABEL_23;
      case 3:
        int v8 = *((_DWORD *)this + 20);
        int v9 = 1633776240;
        AudioFormatID v10 = 1633776243;
LABEL_23:
        if (v8) {
          AudioFormatID v10 = v9;
        }
        goto LABEL_28;
      case 4:
        int v8 = *((_DWORD *)this + 20);
        if (v8) {
          AudioFormatID v10 = 1633776752;
        }
        else {
          AudioFormatID v10 = 1633776755;
        }
LABEL_28:
        a2->signed int mFormatID = v10;
        break;
      default:
        int v8 = *((_DWORD *)this + 20);
        break;
    }
    LODWORD(v7) = *((_DWORD *)this + 15);
    a2->mSampleRate = (double)v7;
    a2->mUInt32 FramesPerPacket = DecoderConfigDescr::GetFramesPerPacket(this);
    UInt32 v11 = (unsigned __int16)v12;
    if (v8 != 1)
    {
      uint64_t result = 0;
      goto LABEL_33;
    }
    if ((unsigned __int16)v12 == 1)
    {
      uint64_t result = 0;
      UInt32 v11 = 2;
LABEL_33:
      a2->mChannelsPerFrame = v11;
      return result;
    }
    uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v14 = "ACMP4BitStreams.cpp";
      __int16 v15 = 1024;
      int v16 = 2673;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::GetASBD: unsupported number of channels", buf, 0x12u);
      return 0;
    }
  }
  else
  {
    return DecoderConfigDescr::GetBaseLevelASBD(this, a2);
  }
  return result;
}

uint64_t DecoderConfigDescr::MakeStreamDescription(DecoderConfigDescr *this, AudioStreamBasicDescription *a2, double a3)
{
  int v5 = *((_DWORD *)this + 2);
  if ((v5 - 64) <= 0x28 && ((1 << (v5 - 64)) & 0x1C000000001) != 0)
  {
    unsigned int v7 = *((_DWORD *)this + 10);
    BOOL v8 = v7 > 0x2C;
    uint64_t v9 = (1 << v7) & 0x1480609A007ELL;
    if (!v8 && v9 != 0)
    {
      return DecoderConfigDescr::GetBaseLevelASBD(this, a2);
    }
    LODWORD(a3) = *((_DWORD *)this + 11);
    a2->mSampleRate = (double)*(unint64_t *)&a3;
    a2->mBytesPerPacket = 0;
    UInt32 FramesPerPacket = DecoderConfigDescr::GetFramesPerPacket(this);
    a2->AudioFormatFlags mFormatFlags = 0;
    a2->mUInt32 FramesPerPacket = FramesPerPacket;
    a2->mBytesPerFrame = 0;
    *(void *)&a2->mBitsPerChannel = 0;
    UInt32 v18 = *((_DWORD *)this + 12);
    if (v18 == 7) {
      UInt32 v18 = 8;
    }
    a2->mChannelsPerFrame = v18;
    int v19 = *((_DWORD *)this + 10);
    if ((v19 - 39) >= 0xFFFFFFFE)
    {
      if (v19 == 37) {
        AudioFormatID v21 = 1936487267;
      }
      else {
        AudioFormatID v21 = 1936487278;
      }
      a2->signed int mFormatID = v21;
      uint64_t v22 = *((void *)this + 149);
      if (v22) {
        a2->AudioFormatFlags mFormatFlags = *(unsigned __int8 *)(v22 + 1116) >> 5;
      }
      goto LABEL_37;
    }
    if (((v19 - 8) & 0xFFFFFFEF) != 0)
    {
      if (v19 == 21 || v19 == 7)
      {
        AudioFormatID v20 = 1953986161;
      }
      else
      {
        if (((v19 - 9) & 0xFFFFFFEF) != 0)
        {
          switch(v19)
          {
            case ' ':
              AudioFormatID v20 = 778924081;
              goto LABEL_36;
            case '!':
              AudioFormatID v20 = 778924082;
              goto LABEL_36;
            case '""':
              AudioFormatID v20 = 1836069684;
              goto LABEL_36;
            case '$':
              a2->signed int mFormatID = 1634497332;
              int v23 = (_DWORD *)*((void *)this + 149);
              if (v23)
              {
                LODWORD(v17) = v23[2];
                a2->mSampleRate = (double)v17;
                UInt32 v18 = v23[4];
                a2->AudioFormatFlags mFormatFlags = v23[5];
                a2->mChannelsPerFrame = v18;
              }
              break;
            default:
              a2->signed int mFormatID = 0;
              break;
          }
          goto LABEL_37;
        }
        AudioFormatID v20 = 1752594531;
      }
    }
    else
    {
      AudioFormatID v20 = 1667591280;
    }
LABEL_36:
    a2->signed int mFormatID = v20;
LABEL_37:
    if (!v18) {
      a2->mChannelsPerFrame = MP4AudioProgramConfig::TotalNumChannels((DecoderConfigDescr *)((char *)this + 88));
    }
    return 0;
  }
  if (((v5 - 105) & 0xFFFFFFFD) != 0)
  {
    if (v5 != 225)
    {
      if ((v5 - 223) >= 0xFFFFFFFE)
      {
        bzero(a2, 0x28uLL);
        a2->signed int mFormatID = 1987015266;
      }
      return 0;
    }
    unsigned int v12 = (unsigned __int16 *)*((void *)this + 151);
    if (v12)
    {
      a2->signed int mFormatID = 1365470320;
      LOWORD(a3) = v12[63];
      a2->mSampleRate = (double)*(unint64_t *)&a3;
      a2->mChannelsPerFrame = 1;
      UInt32 v13 = v12[61];
      UInt32 v14 = v12[62];
      a2->mBytesPerPacket = v13;
      a2->mUInt32 FramesPerPacket = v14;
      return 0;
    }
LABEL_22:
    a2->signed int mFormatID = 0;
    return 0;
  }
  uint64_t v15 = *((void *)this + 151);
  if (!v15) {
    goto LABEL_22;
  }
  return MPEGPacketParser_ASBDFromMPEGPacket((unsigned int *)(v15 + 8), 4u, a2);
}

uint64_t MP4AudioESDS::Deserialize(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a2 + 8);
  int v9 = *(_DWORD *)a2;
  int v10 = *(_DWORD *)(a2 + 20);
  int v56 = 0;
  UInt32 v11 = (unsigned int *)(a1 + 296);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 0;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)(a1 + 296));
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  unsigned int v13 = HIBYTE(v12);
  int v14 = *(_DWORD *)(a2 + 20) - 8;
  *(_DWORD *)(a2 + 20) = v14;
  if (v14 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v16 = *(_DWORD *)(a2 + 16);
    int v17 = *(_DWORD *)(a2 + 20);
    v13 |= v16 >> v17;
    int v14 = v17 + 32;
    *(_DWORD *)(a2 + 20) = v17 + 32;
    if (v17 == -32) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = v16 << -(char)v17;
    }
  }
  else
  {
    unsigned int v15 = v12 << 8;
  }
  *(_DWORD *)(a2 + 16) = v15;
  *(_DWORD *)(a1 + 4) = v13;
  if (v13 == 3)
  {
    int v18 = 0;
    int v19 = v8 - v9;
    unsigned int v20 = -1;
    while (1)
    {
      unsigned int v21 = HIBYTE(v15);
      v14 -= 8;
      *(_DWORD *)(a2 + 20) = v14;
      if (v14 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v22 = *(_DWORD *)(a2 + 16);
        int v23 = *(_DWORD *)(a2 + 20);
        v21 |= v22 >> v23;
        int v14 = v23 + 32;
        *(_DWORD *)(a2 + 20) = v23 + 32;
        unsigned int v15 = v23 == -32 ? 0 : v22 << -(char)v23;
      }
      else
      {
        v15 <<= 8;
      }
      *(_DWORD *)(a2 + 16) = v15;
      if (v20 == 4) {
        break;
      }
      int v24 = v21 & 0x7F | (v18 << 7);
      ++v20;
      int v18 = v24;
      if ((v21 & 0x80) == 0)
      {
        *(_DWORD *)(a1 + 8) = v24;
        if (v20 < 4)
        {
          *(_DWORD *)a1 = v20 + v24 + 2;
          unsigned int v25 = HIWORD(v15);
          int v26 = v14 - 16;
          *(_DWORD *)(a2 + 20) = v26;
          if (v26 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(void *)a2 += 4;
            unsigned int v31 = *(_DWORD *)(a2 + 16);
            int v32 = *(_DWORD *)(a2 + 20);
            v25 |= v31 >> v32;
            *(_DWORD *)(a2 + 20) = v32 + 32;
            if (v32 == -32) {
              int v27 = 0;
            }
            else {
              int v27 = v31 << -(char)v32;
            }
          }
          else
          {
            int v27 = v15 << 16;
          }
          *(_DWORD *)(a2 + 16) = v27;
          *(_DWORD *)(a1 + 12) = v25;
          *(_DWORD *)(a1 + 16) = TBitstreamReader<unsigned int>::GetBit(a2);
          *(_DWORD *)(a1 + 20) = TBitstreamReader<unsigned int>::GetBit(a2);
          TBitstreamReader<unsigned int>::SkipBits(a2, 1);
          unsigned int v33 = *(_DWORD *)(a2 + 16);
          unsigned int v34 = v33 >> 27;
          int v35 = *(_DWORD *)(a2 + 20) - 5;
          *(_DWORD *)(a2 + 20) = v35;
          if (v35 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(void *)a2 += 4;
            unsigned int v37 = *(_DWORD *)(a2 + 16);
            int v38 = *(_DWORD *)(a2 + 20);
            v34 |= v37 >> v38;
            int v35 = v38 + 32;
            *(_DWORD *)(a2 + 20) = v38 + 32;
            if (v38 == -32) {
              unsigned int v36 = 0;
            }
            else {
              unsigned int v36 = v37 << -(char)v38;
            }
          }
          else
          {
            unsigned int v36 = 32 * v33;
          }
          *(_DWORD *)(a2 + 16) = v36;
          *(_DWORD *)(a1 + 24) = v34;
          if (*(_DWORD *)(a1 + 16))
          {
            unsigned int v39 = HIWORD(v36);
            v35 -= 16;
            *(_DWORD *)(a2 + 20) = v35;
            if (v35 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(void *)a2 += 4;
              unsigned int v40 = *(_DWORD *)(a2 + 16);
              int v41 = *(_DWORD *)(a2 + 20);
              v39 |= v40 >> v41;
              int v35 = v41 + 32;
              *(_DWORD *)(a2 + 20) = v41 + 32;
              if (v41 == -32) {
                unsigned int v36 = 0;
              }
              else {
                unsigned int v36 = v40 << -(char)v41;
              }
            }
            else
            {
              v36 <<= 16;
            }
            *(_DWORD *)(a2 + 16) = v36;
            *(_DWORD *)(a1 + 28) = v39;
          }
          if (*(_DWORD *)(a1 + 20))
          {
            unsigned int v42 = HIBYTE(v36);
            v35 -= 8;
            *(_DWORD *)(a2 + 20) = v35;
            if (v35 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(void *)a2 += 4;
              unsigned int v44 = *(_DWORD *)(a2 + 16);
              int v45 = *(_DWORD *)(a2 + 20);
              v42 |= v44 >> v45;
              int v35 = v45 + 32;
              *(_DWORD *)(a2 + 20) = v45 + 32;
              unsigned int v43 = v45 == -32 ? 0 : v44 << -(char)v45;
            }
            else
            {
              unsigned int v43 = v36 << 8;
            }
            *(_DWORD *)(a2 + 16) = v43;
            *(_DWORD *)(a1 + 32) = v42;
            if (v42)
            {
              unint64_t v46 = 0;
              do
              {
                unsigned int v47 = *(_DWORD *)(a2 + 16);
                unsigned int v48 = HIBYTE(v47);
                int v49 = *(_DWORD *)(a2 + 20) - 8;
                *(_DWORD *)(a2 + 20) = v49;
                if (v49 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                  *(void *)a2 += 4;
                  unsigned int v51 = *(_DWORD *)(a2 + 16);
                  int v52 = *(_DWORD *)(a2 + 20);
                  v48 |= v51 >> v52;
                  *(_DWORD *)(a2 + 20) = v52 + 32;
                  if (v52 == -32) {
                    int v50 = 0;
                  }
                  else {
                    int v50 = v51 << -(char)v52;
                  }
                }
                else
                {
                  int v50 = v47 << 8;
                }
                *(_DWORD *)(a2 + 16) = v50;
                *(unsigned char *)(a1 + 36 + v46++) = v48;
              }
              while (v46 < *(unsigned int *)(a1 + 32));
              int v35 = *(_DWORD *)(a2 + 20);
            }
          }
          int v53 = (v10 - v35 + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8) + v19)) / 8;
          if ((a4 - 1) < 2)
          {
            int v54 = &v56;
            int v55 = a4;
LABEL_62:
            uint64_t result = DecoderConfigDescr::Deserialize(v11, a2, v54, v55);
            if (a3 && a4)
            {
              if (v54) {
                *a3 = *v54 + v53;
              }
            }
            return result;
          }
          if (!a4)
          {
            int v54 = 0;
            if (a3) {
              *a3 = v53;
            }
            int v55 = 1;
            goto LABEL_62;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return 4294967090;
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          __int16 v58 = "ACMP4BitStreams.cpp";
          __int16 v59 = 1024;
          int v60 = 3193;
          unsigned int v28 = MEMORY[0x1E4F14500];
          int v29 = "%25s:%-5d  MP4AudioESDS::Deserialize: the requested byte offset is not supported";
LABEL_23:
          _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x12u);
          return 4294967090;
        }
LABEL_21:
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return 4294967090;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        __int16 v58 = "ACMP4BitStreams.cpp";
        __int16 v59 = 1024;
        int v60 = 3143;
        unsigned int v28 = MEMORY[0x1E4F14500];
        int v29 = "%25s:%-5d  MP4AudioESDS::Deserialize: the ES_Descriptor tag size is incorrect";
        goto LABEL_23;
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_21;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    __int16 v58 = "ACMP4BitStreams.cpp";
    __int16 v59 = 1024;
    int v60 = 3139;
    unsigned int v28 = MEMORY[0x1E4F14500];
    int v29 = "%25s:%-5d  MP4AudioESDS::Deserialize: the ES_Descriptor tag is incorrect";
    goto LABEL_23;
  }
  return 4294967090;
}

uint64_t MP4AudioESDS::Serialize(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  int v5 = a3;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v8 = (DecoderConfigDescr *)(a1 + 296);
  if (*(_DWORD *)(a1 + 304) == 64)
  {
    int v9 = a3;
    if (!a3) {
      int v9 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount(v8);
    }
    int v10 = v9 + 32;
  }
  else
  {
    int v10 = 14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 3, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v10, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 0x18u);
  if (*(_DWORD *)(a1 + 304) != 64)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      int v24 = "ACMP4BitStreams.cpp";
      __int16 v25 = 1024;
      int v26 = 2353;
      unsigned int v13 = MEMORY[0x1E4F14500];
      int v14 = "%25s:%-5d  DecoderConfigDescr::Serialize: Unsupported ObjectType";
LABEL_13:
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v23, 0x12u);
    }
    return 4294967090;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 4, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  if (*(_DWORD *)(a1 + 304) == 64)
  {
    int v11 = v5;
    if (!v5) {
      int v11 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount(v8);
    }
    int v12 = v11 + 18;
  }
  else
  {
    int v12 = 0;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v12, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 304), 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 308), 6u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 312), 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 316), 0x18u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 320), 0x20u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 324), 0x20u);
  AT::TBitstreamWriter<unsigned int>::Flush(a2);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 5, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  if (!v5)
  {
    int v18 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount(v8);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v18, 8u);
    MP4AudioObjectType::Serialize(*(_DWORD *)(a1 + 336), a2);
    MP4SampleRate::Serialize((int *)(a1 + 340), a2);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 344), 4u);
    int v19 = *(_DWORD *)(a1 + 336);
    if (v19 == 5 || v19 == 29)
    {
      MP4SampleRate::Serialize((int *)(a1 + 356), a2);
      MP4AudioObjectType::Serialize(2u, a2);
      int v19 = *(_DWORD *)(a1 + 336);
    }
    if ((v19 - 1) < 4) {
      goto LABEL_28;
    }
    if (v19 == 39)
    {
      uint64_t v20 = *(void *)(a1 + 1488);
      if (!v20) {
        return 4294967290;
      }
      *(_DWORD *)(v20 + 16) = *(_DWORD *)(a1 + 348);
      goto LABEL_30;
    }
    if (v19 == 23)
    {
LABEL_28:
      uint64_t v20 = *(void *)(a1 + 1488);
      int v21 = *(_DWORD *)(a1 + 348);
      if (!v20)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, v21, 1u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 1u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 1u);
        if (!*(_DWORD *)(a1 + 344)) {
          MP4AudioProgramConfig::Serialize(a1 + 384, a2);
        }
LABEL_36:
        int v22 = *(_DWORD *)(a1 + 336);
        if ((v22 - 19) < 9 || v22 == 39 || v22 == 17) {
          AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 360), 2u);
        }
        if (*(_DWORD *)(a1 + 368) != -1 && *(_DWORD *)(a1 + 364) == 695)
        {
          AT::TBitstreamWriter<unsigned int>::PutBits(a2, 695, 0xBu);
          MP4AudioObjectType::Serialize(*(_DWORD *)(a1 + 352), a2);
          if (*(_DWORD *)(a1 + 352) == 5)
          {
            AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 368), 1u);
            if (*(_DWORD *)(a1 + 368) == 1)
            {
              MP4SampleRate::Serialize((int *)(a1 + 356), a2);
              if (*(_DWORD *)(a1 + 376) != -1 && *(_DWORD *)(a1 + 372) == 1352)
              {
                AT::TBitstreamWriter<unsigned int>::PutBits(a2, 1352, 0xBu);
                AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 376), 1u);
              }
            }
          }
        }
        goto LABEL_19;
      }
      *(unsigned char *)(v20 + 20) = v21 != 0;
LABEL_30:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 32))(v20, a2);
      if (result) {
        return result;
      }
      goto LABEL_36;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      int v24 = "ACMP4BitStreams.cpp";
      __int16 v25 = 1024;
      int v26 = 2286;
      unsigned int v13 = MEMORY[0x1E4F14500];
      int v14 = "%25s:%-5d  DecoderConfigDescr::MPEG4AudioSpecificPayloadSerialize: Unsupported AudioObjectType";
      goto LABEL_13;
    }
    return 4294967090;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v5, 8u);
  if (!a4) {
    return 0xFFFFFFFFLL;
  }
  do
  {
    --v5;
    int v16 = *a4++;
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v16, 8u);
  }
  while (v5);
LABEL_19:
  unsigned int v17 = *(_DWORD *)(a2 + 28) & 7;
  if (v17) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, v17);
  }
  AT::TBitstreamWriter<unsigned int>::Flush(a2);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 6, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 1, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 2, 8u);
  AT::TBitstreamWriter<unsigned int>::Flush(a2);
  return 0;
}

uint64_t ACMP4BitStreams::GetADTSPacketSize(ACMP4BitStreams *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v8 = 0;
  __int16 v9 = 0;
  int v10 = 0;
  int v4 = ADTSHeader::Deserialize((ADTSHeader *)&v8, (const unsigned __int8 *)this, *a2);
  uint64_t result = 0;
  if (!v4)
  {
    unsigned int v6 = HIDWORD(v8);
    if ((v8 & 0x1000) != 0) {
      unsigned int v7 = 7;
    }
    else {
      unsigned int v7 = 9;
    }
    *a2 = v7;
    return (v6 >> 13) & 0x1FFF;
  }
  return result;
}

uint64_t ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS(uint64_t a1, int *a2, int *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *a2;
  v49[2] = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  v52[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v52);
  long long v54 = 0u;
  long long v53 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v49);
  if (!a3)
  {
    uint64_t v10 = 4294967246;
    goto LABEL_28;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)(a1 + 20);
  *a3 = 0;
  uint64_t v10 = MP4AudioESDS::Deserialize((uint64_t)v48, a1, a3, 0);
  if (v10) {
    goto LABEL_28;
  }
  TBitstreamReader<unsigned int>::PutBack(a1, v9 - *(_DWORD *)(a1 + 20) + 8 * (*(_DWORD *)a1 - *(_DWORD *)(a1 + 8) - *a3 + v7 - v8));
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  unsigned int v12 = HIBYTE(v11);
  int v13 = *(_DWORD *)(a1 + 20) - 8;
  *(_DWORD *)(a1 + 20) = v13;
  if (v13 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
    *(void *)a1 += 4;
    unsigned int v15 = *(_DWORD *)(a1 + 16);
    int v16 = *(_DWORD *)(a1 + 20);
    v12 |= v15 >> v16;
    *(_DWORD *)(a1 + 20) = v16 + 32;
    if (v16 == -32) {
      int v14 = 0;
    }
    else {
      int v14 = v15 << -(char)v16;
    }
  }
  else
  {
    int v14 = v11 << 8;
  }
  *(_DWORD *)(a1 + 16) = v14;
  ++*a3;
  if (v12 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v44 = 136315394;
      int v45 = "ACMP4BitStreams.cpp";
      __int16 v46 = 1024;
      int v47 = 3506;
      int v29 = MEMORY[0x1E4F14500];
      unsigned int v30 = "%25s:%-5d  ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS: the DecoderConfigDescriptor tag is incorrect";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 16);
  int v17 = *(_DWORD *)(a1 + 20);
  unsigned int v19 = -1;
  do
  {
    unsigned int v20 = v19;
    unsigned int v21 = HIBYTE(v18);
    v17 -= 8;
    *(_DWORD *)(a1 + 20) = v17;
    if (v17 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
      *(void *)a1 += 4;
      unsigned int v22 = *(_DWORD *)(a1 + 16);
      int v23 = *(_DWORD *)(a1 + 20);
      v21 |= v22 >> v23;
      int v17 = v23 + 32;
      *(_DWORD *)(a1 + 20) = v23 + 32;
      if (v23 == -32) {
        unsigned int v18 = 0;
      }
      else {
        unsigned int v18 = v22 << -(char)v23;
      }
    }
    else
    {
      v18 <<= 8;
    }
    *(_DWORD *)(a1 + 16) = v18;
    if (v20 == 4)
    {
      --*a3;
LABEL_24:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v44 = 136315394;
        int v45 = "ACMP4BitStreams.cpp";
        __int16 v46 = 1024;
        int v47 = 3511;
        int v29 = MEMORY[0x1E4F14500];
        unsigned int v30 = "%25s:%-5d  ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS: the ES_Descriptor tag size is incorrect";
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    unsigned int v19 = v20 + 1;
  }
  while ((v21 & 0x80) != 0);
  int v24 = *a3 + v20 + 2;
  *a3 = v24;
  if (v19 >= 4) {
    goto LABEL_24;
  }
  *a3 = v24 + 13;
  TBitstreamReader<unsigned int>::SkipBits(a1, 104);
  unsigned int v25 = *(_DWORD *)(a1 + 16);
  unsigned int v26 = HIBYTE(v25);
  int v27 = *(_DWORD *)(a1 + 20) - 8;
  *(_DWORD *)(a1 + 20) = v27;
  if (v27 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
    *(void *)a1 += 4;
    unsigned int v32 = *(_DWORD *)(a1 + 16);
    int v33 = *(_DWORD *)(a1 + 20);
    v26 |= v32 >> v33;
    *(_DWORD *)(a1 + 20) = v33 + 32;
    if (v33 == -32) {
      int v28 = 0;
    }
    else {
      int v28 = v32 << -(char)v33;
    }
  }
  else
  {
    int v28 = v25 << 8;
  }
  *(_DWORD *)(a1 + 16) = v28;
  ++*a3;
  if (v26 == 5)
  {
    int v34 = 0;
    unsigned int v36 = *(_DWORD *)(a1 + 16);
    int v35 = *(_DWORD *)(a1 + 20);
    unsigned int v37 = -1;
    while (1)
    {
      unsigned int v38 = v37;
      unsigned int v39 = HIBYTE(v36);
      v35 -= 8;
      *(_DWORD *)(a1 + 20) = v35;
      if (v35 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
        *(void *)a1 += 4;
        unsigned int v40 = *(_DWORD *)(a1 + 16);
        int v41 = *(_DWORD *)(a1 + 20);
        v39 |= v40 >> v41;
        int v35 = v41 + 32;
        *(_DWORD *)(a1 + 20) = v41 + 32;
        unsigned int v36 = v41 == -32 ? 0 : v40 << -(char)v41;
      }
      else
      {
        v36 <<= 8;
      }
      *(_DWORD *)(a1 + 16) = v36;
      if (v38 == 4) {
        break;
      }
      int v42 = v39 & 0x7F | (v34 << 7);
      unsigned int v37 = v38 + 1;
      int v34 = v42;
      if ((v39 & 0x80) == 0)
      {
        int v43 = *a3 + v38 + 2;
        *a3 = v43;
        if (v37 < 4)
        {
          if (v43 + v42 <= v6)
          {
            uint64_t v10 = 0;
            *a2 = v42;
            goto LABEL_28;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_27;
          }
          int v44 = 136315394;
          int v45 = "ACMP4BitStreams.cpp";
          __int16 v46 = 1024;
          int v47 = 3529;
          int v29 = MEMORY[0x1E4F14500];
          unsigned int v30 = "%25s:%-5d  ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS: did not get the whole cookie";
LABEL_26:
          _os_log_impl(&dword_18FEC0000, v29, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&v44, 0x12u);
          goto LABEL_27;
        }
LABEL_52:
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        int v44 = 136315394;
        int v45 = "ACMP4BitStreams.cpp";
        __int16 v46 = 1024;
        int v47 = 3526;
        int v29 = MEMORY[0x1E4F14500];
        unsigned int v30 = "%25s:%-5d  ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS: the ES_Descriptor tag size is incorrect";
        goto LABEL_26;
      }
    }
    --*a3;
    goto LABEL_52;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v44 = 136315394;
    int v45 = "ACMP4BitStreams.cpp";
    __int16 v46 = 1024;
    int v47 = 3522;
    int v29 = MEMORY[0x1E4F14500];
    unsigned int v30 = "%25s:%-5d  ACMP4BitStreams:: GetDecoderSpecificBitStreamFromESDS: the DecoderSpecificInfoTag tag is incorrect";
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v10 = 4294967090;
LABEL_28:
  if (*((void *)&v54 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
  }
  if (*((void *)&v53 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
  }
  return v10;
}

void sub_18FFF9EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

void *AAAudioAnalyzer::Cleanup(AAAudioAnalyzer *this)
{
  uint64_t result = std::vector<std::unique_ptr<AAAnalysisBase>>::__clear[abi:ne180100]((void *)this + 33);
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  return result;
}

void *std::vector<std::unique_ptr<AAAnalysisBase>>::__clear[abi:ne180100](void *result)
{
  int v1 = result;
  uint64_t v2 = (void *)*result;
  unsigned int v3 = (void *)result[1];
  while (v3 != v2)
  {
    int v4 = (void *)*--v3;
    uint64_t result = v4;
    *unsigned int v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t AAAudioAnalyzer::PrepareAnalyzers(AAAudioAnalyzer *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)((char *)this + 264);
  std::vector<std::unique_ptr<AAAnalysisBase>>::__clear[abi:ne180100]((void *)this + 33);
  CFArrayRef v3 = (const __CFArray *)*((void *)this + 31);
  v24.length = CFArrayGetCount(v3);
  v24.location = 0;
  if (CFArrayContainsValue(v3, v24, @"sound check info")
    || (CFArrayRef v4 = (const __CFArray *)*((void *)this + 31),
        v25.length = CFArrayGetCount(v4),
        v25.location = 0,
        CFArrayContainsValue(v4, v25, @"main loudness parameters"))
    || (CFArrayRef v5 = (const __CFArray *)*((void *)this + 31),
        v26.length = CFArrayGetCount(v5),
        v26.location = 0,
        CFArrayContainsValue(v5, v26, @"additional loudness parameters")))
  {
    CFArrayRef v6 = (const __CFArray *)*((void *)this + 31);
    v27.length = CFArrayGetCount(v6);
    v27.location = 0;
    CFArrayContainsValue(v6, v27, @"sound check info");
    CFArrayRef v7 = (const __CFArray *)*((void *)this + 31);
    v28.length = CFArrayGetCount(v7);
    v28.location = 0;
    CFArrayContainsValue(v7, v28, @"main loudness parameters");
    CFArrayRef v8 = (const __CFArray *)*((void *)this + 31);
    v29.length = CFArrayGetCount(v8);
    v29.location = 0;
    CFArrayContainsValue(v8, v29, @"additional loudness parameters");
    operator new();
  }
  CFArrayRef v9 = (const __CFArray *)*((void *)this + 31);
  v30.length = CFArrayGetCount(v9);
  v30.location = 0;
  if (CFArrayContainsValue(v9, v30, @"dialogue anchor parameters")) {
    operator new();
  }
  uint64_t v10 = *((void *)this + 34);
  for (uint64_t i = *v2; ; i += 8)
  {
    if (i == v10) {
      return 0;
    }
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)i + 16))();
    if (v12) {
      break;
    }
  }
  if (kAASubsystem)
  {
    int v14 = *(NSObject **)kAASubsystem;
    if (!*(void *)kAASubsystem) {
      return v12;
    }
  }
  else
  {
    int v14 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    int buf = 136315906;
    buf_4 = "AAAudioAnalyzer.cpp";
    __int16 v17 = 1024;
    int v18 = 77;
    __int16 v19 = 2048;
    unsigned int v20 = this;
    __int16 v21 = 1024;
    int v22 = v12;
    _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAudioAnalyzer::PrepareAnalyzers (%p), Prepare analyzer failed (err = %d)", (uint8_t *)&buf, 0x22u);
  }
  return v12;
}

void sub_18FFFA498(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<AAAnalysisBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t AAAnalyzer::GetCallbackClientData(AAAnalyzer *this)
{
  return *((void *)this + 26);
}

uint64_t AAAudioAnalyzer::CompleteAnalysis(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(v1 + 256)) {
    return 4294963436;
  }
  CFArrayRef v6 = (void *)v1;
  uint64_t v7 = (*(void *)(v1 + 272) - *(void *)(v1 + 264)) >> 3;
  if (!v7) {
    return 0;
  }
  *(void *)(v1 + 224) = v2;
  *(void *)(v1 + 232) = v3;
  *(void *)(v1 + 240) = v4;
  v5.n128_u64[0] = 0;
  uint64_t result = AAAnalyzer::CallProgressCallback((AAAnalyzer *)v1, v5);
  if (result) {
    return result;
  }
  if (v6[11])
  {
    clock_t v10 = clock();
    unsigned int v11 = dispatch_queue_create("Progress", 0);
    for (SInt64 i = 0; ; i += v15)
    {
      UInt32 v13 = *((_DWORD *)v6 + 24);
      UInt32 ioNumBytes = 0x8000;
      UInt32 ioNumPackets = v13;
      OSStatus v14 = AudioFileReadPacketData((AudioFileID)v6[11], 0, &ioNumBytes, (AudioStreamPacketDescription *)v6[13], i, &ioNumPackets, outBuffer);
      if (v14) {
        break;
      }
      uint64_t v15 = ioNumPackets;
      if (!ioNumPackets) {
        goto LABEL_20;
      }
      int v16 = *((_DWORD *)v6 + 11);
      v39[0] = 1;
      v39[2] = v16;
      v39[3] = ioNumBytes;
      unsigned int v40 = outBuffer;
      OSStatus v17 = (*(uint64_t (**)(void *, void, _DWORD *, void))(*v6 + 56))(v6, ioNumPackets, v39, v6[13]);
      if (v17)
      {
        OSStatus v34 = v17;
        if (kAASubsystem)
        {
          int v33 = *(NSObject **)kAASubsystem;
          if (!*(void *)kAASubsystem) {
            goto LABEL_39;
          }
        }
        else
        {
          int v33 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315906;
          int v44 = "AAAudioAnalyzer.cpp";
          __int16 v45 = 1024;
          int v46 = 208;
          __int16 v47 = 2048;
          unsigned int v48 = v6;
          __int16 v49 = 1024;
          OSStatus v50 = v34;
          int v35 = "%25s:%-5d AAAudioAnalyzer::CompleteAnalysis (%p), PushAudio failed (err = %d)";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      clock_t v18 = clock();
      if (v18 - v10 >= 0xF4240)
      {
        clock_t v19 = v18;
        uint64_t v20 = v6[33];
        if (v6[34] == v20)
        {
          float v26 = 100.0;
        }
        else
        {
          uint64_t v21 = 0;
          float v22 = 0.0;
          unsigned int v23 = 1;
          do
          {
            float v22 = v22
                + (*(float (**)(void))(**(void **)(v20 + 8 * v21) + 64))(*(void *)(v20 + 8 * v21));
            uint64_t v21 = v23;
            uint64_t v20 = v6[33];
            unint64_t v24 = (v6[34] - v20) >> 3;
          }
          while (v24 > v23++);
          float v26 = v22 / (float)v24;
        }
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 0x40000000;
        v37[2] = ___ZN15AAAudioAnalyzer16CompleteAnalysisEPFiP19OpaqueAudioAnalyzerfPvES2_U13block_pointerFiS1_fE_block_invoke;
        v37[3] = &__block_descriptor_tmp_2925;
        uint8_t v37[4] = v6;
        float v38 = v26;
        dispatch_async(v11, v37);
        clock_t v10 = v19;
      }
    }
    OSStatus v32 = v14;
    if (kAASubsystem)
    {
      int v33 = *(NSObject **)kAASubsystem;
      if (!*(void *)kAASubsystem) {
        goto LABEL_39;
      }
    }
    else
    {
      int v33 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315906;
      int v44 = "AAAudioAnalyzer.cpp";
      __int16 v45 = 1024;
      int v46 = 192;
      __int16 v47 = 2048;
      unsigned int v48 = v6;
      __int16 v49 = 1024;
      OSStatus v50 = v32;
      int v35 = "%25s:%-5d AAAudioAnalyzer::CompleteAnalysis (%p), AudioFileReadPacketData failed (err = %d)";
LABEL_38:
      _os_log_impl(&dword_18FEC0000, v33, OS_LOG_TYPE_ERROR, v35, buf, 0x22u);
    }
LABEL_39:
    unsigned int v36 = (OpaqueAudioFileID *)v6[11];
    if (v36)
    {
      AudioFileClose(v36);
      v6[11] = 0;
    }
    if (v11) {
      dispatch_release(v11);
    }
    uint64_t result = 0;
    *((unsigned char *)v6 + 256) = 0;
    return result;
  }
  unsigned int v11 = 0;
LABEL_20:
  uint64_t v27 = v6[33];
  if (v6[34] == v27)
  {
LABEL_24:
    v9.n128_u32[0] = 1120403456;
    uint64_t result = AAAnalyzer::CallProgressCallback((AAAnalyzer *)v6, v9);
    if (result) {
      return result;
    }
    goto LABEL_39;
  }
  unint64_t v28 = 0;
  float v29 = 0.0;
  unsigned int v30 = 1;
  float v31 = 100.0 / (float)v7;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void, float, float))(**(void **)(v27 + 8 * v28) + 32))(*(void *)(v27 + 8 * v28), v29, v31);
    if (result) {
      return result;
    }
    float v29 = v29 + v31;
    float v31 = (float)(100.0 / (float)v7) + v31;
    unint64_t v28 = v30;
    uint64_t v27 = v6[33];
    ++v30;
    if (v28 >= (v6[34] - v27) >> 3) {
      goto LABEL_24;
    }
  }
}

uint64_t ___ZN15AAAudioAnalyzer16CompleteAnalysisEPFiP19OpaqueAudioAnalyzerfPvES2_U13block_pointerFiS1_fE_block_invoke(uint64_t a1, __n128 a2)
{
  a2.n128_u32[0] = *(_DWORD *)(a1 + 40);
  return AAAnalyzer::CallProgressCallback(*(AAAnalyzer **)(a1 + 32), a2);
}

uint64_t AAAudioAnalyzer::PushAudio(AAAudioAnalyzer *this, uint64_t a2, const AudioBufferList *a3, const AudioStreamPacketDescription *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 256)) {
    return 4294963436;
  }
  CrashIfClientProvidedBogusAudioBufferList();
  if (*((void *)this + 15))
  {
    *((_DWORD *)this + 41) = a2;
    memcpy(*((void **)this + 21), a3, *((unsigned int *)this + 44));
    *((void *)this + 23) = a4;
    do
    {
      CFArrayRef v8 = (AudioBufferList *)*((void *)this + 19);
      uint64_t mNumberBuffers = v8->mNumberBuffers;
      if (mNumberBuffers)
      {
        clock_t v10 = (void **)*((void *)this + 16);
        p_mCFDataRef Data = &v8->mBuffers[0].mData;
        do
        {
          *(p_mData - 1) = (void *)0x200000000001;
          uint64_t v12 = *v10++;
          *p_mCFDataRef Data = v12;
          p_mData += 2;
          --mNumberBuffers;
        }
        while (mNumberBuffers);
      }
      *((_DWORD *)this + 40) = 2048;
      uint64_t v13 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 15), (AudioConverterComplexInputDataProc)AAAnalyzer::ACInputProc, this, (UInt32 *)this + 40, v8, 0);
      if (*((_DWORD *)this + 40))
      {
        OSStatus v14 = (void *)*((void *)this + 33);
        uint64_t v15 = (void *)*((void *)this + 34);
        while (v14 != v15)
        {
          uint64_t v16 = (*(uint64_t (**)(void, void, void))(*(void *)*v14 + 24))(*v14, *((unsigned int *)this + 40), *((void *)this + 19));
          if (v16)
          {
            uint64_t v18 = v16;
            if (kAASubsystem)
            {
              clock_t v19 = *(NSObject **)kAASubsystem;
              if (!*(void *)kAASubsystem) {
                return v18;
              }
            }
            else
            {
              clock_t v19 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              int v25 = 136315906;
              float v26 = "AAAudioAnalyzer.cpp";
              __int16 v27 = 1024;
              int v28 = 134;
              __int16 v29 = 2048;
              unsigned int v30 = this;
              __int16 v31 = 1024;
              int v32 = v18;
              _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAudioAnalyzer::PushAudio (%p), PushAudio to analyzer failed (err = %d)", (uint8_t *)&v25, 0x22u);
            }
            return v18;
          }
          ++v14;
        }
      }
    }
    while (!v13);
    if (v13 != 5)
    {
      if (kAASubsystem)
      {
        OSStatus v17 = *(NSObject **)kAASubsystem;
        if (!*(void *)kAASubsystem) {
          return v13;
        }
      }
      else
      {
        OSStatus v17 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v25 = 136315906;
        float v26 = "AAAudioAnalyzer.cpp";
        __int16 v27 = 1024;
        int v28 = 142;
        __int16 v29 = 2048;
        unsigned int v30 = this;
        __int16 v31 = 1024;
        int v32 = v13;
        _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAudioAnalyzer::PushAudio (%p), AudioConverterFillComplexBuffer failed (err = %d)", (uint8_t *)&v25, 0x22u);
      }
      return v13;
    }
    return 0;
  }
  uint64_t v21 = (uint64_t *)*((void *)this + 33);
  uint64_t v20 = (uint64_t *)*((void *)this + 34);
  if (v21 == v20) {
    return 0;
  }
  do
  {
    uint64_t v22 = *v21++;
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, const AudioBufferList *))(*(void *)v22 + 24))(v22, a2, a3);
  }
  while (v21 != v20);
  return v23;
}

BOOL TOpaqueObject<AAAnalyzer,OpaqueAudioAnalyzer *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AAAnalyzer>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

void AAAudioAnalyzer::~AAAudioAnalyzer(AAAudioAnalyzer *this)
{
  AAAudioAnalyzer::~AAAudioAnalyzer(this);
  JUMPOUT(0x192FC8940);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8F8D0;
  uint64_t v2 = (void **)((char *)this + 264);
  std::vector<std::unique_ptr<AAAnalysisBase>>::__clear[abi:ne180100]((void *)this + 33);
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  if (*((void *)this + 33))
  {
    std::vector<std::unique_ptr<AAAnalysisBase>>::__clear[abi:ne180100](v2);
    operator delete(*v2);
  }
  AAAnalyzer::~AAAnalyzer(this);
}

uint64_t AAAudioAnalyzer::AAAudioAnalyzer(uint64_t a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(void *)uint64_t v10 = &unk_1EDF8C100;
  *(unsigned char *)(v10 + 12) = 0;
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)(v10 + 56));
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a3;
  *(void *)(a1 + 208) = a4;
  *(void *)(a1 + 216) = a5;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  if (AAAnalyzer::AAAnalyzer(__CFArray const*,void (*)(OpaqueAudioAnalyzer *,__CFString const*,AudioAnalysisFrameList const*,void *,AudioAnalyzerResultsFlags *),void *,void({block_pointer})(OpaqueAudioAnalyzer *,__CFString const*,AudioAnalysisFrameList const*,AudioAnalyzerResultsFlags *))::once != -1) {
    dispatch_once(&AAAnalyzer::AAAnalyzer(__CFArray const*,void (*)(OpaqueAudioAnalyzer *,__CFString const*,AudioAnalysisFrameList const*,void *,AudioAnalyzerResultsFlags *),void *,void({block_pointer})(OpaqueAudioAnalyzer *,__CFString const*,AudioAnalysisFrameList const*,AudioAnalyzerResultsFlags *))::once, &__block_literal_global_10350);
  }
  *(void *)(a1 + 248) = CFArrayCreateMutableCopy(0, 0, a2);
  unsigned int v11 = *(void **)(a1 + 168);
  if (v11)
  {
    free(v11);
    *(void *)(a1 + 168) = 0;
  }
  uint64_t v12 = *(void **)(a1 + 152);
  if (v12)
  {
    free(v12);
    *(void *)(a1 + 152) = 0;
  }
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)a1 = &unk_1EDF8F8D0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  return a1;
}

void sub_18FFFAF1C(_Unwind_Exception *a1)
{
  __n128 v5 = (void *)*((void *)v1 + 21);
  if (v5)
  {
    free(v5);
    *((void *)v1 + 21) = 0;
  }
  CFArrayRef v6 = (void *)*((void *)v1 + 19);
  if (v6)
  {
    free(v6);
    *((void *)v1 + 19) = 0;
  }
  uint64_t v7 = (void *)*((void *)v1 + 16);
  if (v7)
  {
    *((void *)v1 + 17) = v7;
    operator delete(v7);
  }
  CFArrayRef v8 = *v3;
  if (*v3)
  {
    *((void *)v1 + 9) = v8;
    operator delete(v8);
  }
  MEMORY[0x192FC7C80](v2);
  BaseOpaqueObject::~BaseOpaqueObject(v1);
  _Unwind_Resume(a1);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    uint64_t v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      uint64_t v16 = result;
      do
      {
        *(_DWORD *)uint64_t v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      OSStatus v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)uint64_t v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](a1, v9);
    uint64_t v10 = a1[1];
    unsigned int v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)uint64_t v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t HOA::orderFromNumChannels(HOA *this)
{
  unsigned int v1 = 0x40000000;
  do
  {
    unsigned int v2 = v1;
    v1 >>= 2;
  }
  while (v2 > this);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v3 = 0;
  do
  {
    unsigned int v4 = v3 + v2;
    int v5 = 2 * v2;
    if (this < v3 + v2)
    {
      unsigned int v4 = 0;
      int v5 = 0;
    }
    LODWORD(this) = this - v4;
    unsigned int v3 = (v5 + v3) >> 1;
    BOOL v6 = v2 > 3;
    v2 >>= 2;
  }
  while (v6);
  return v3 - 1;
}

uint64_t HOA::normalizationFromTag(HOA *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = this & 0xFFFF0000;
  if ((this & 0xFFFF0000) == 0x6B0000) {
    return 2;
  }
  if (v1 == 12517376) {
    return 0;
  }
  if (v1 == 12451840) {
    return 1;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315906;
    unsigned int v4 = "HOA.cpp";
    __int16 v5 = 1024;
    int v6 = 632;
    __int16 v7 = 2080;
    uint64_t v8 = "normalizationFromTag";
    __int16 v9 = 1024;
    int v10 = 632;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; This is not SN3D/N3D/FuMa: unsupported",
      (uint8_t *)&v3,
      0x22u);
  }
  return 0xFFFFFFFFLL;
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (_DWORD *)a1[1];
    __int16 v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_18FFFB248(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  int v3 = *a1;
  unsigned int v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    clock_t v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  __int16 v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    clock_t v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  unint64_t v14 = &v11[4 * v5];
  uint64_t v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  OSStatus v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

uint64_t HOA::getSphericalGrid(uint64_t result, HOA *this, _DWORD *__dst, float *a4, float *__C)
{
  if (result)
  {
    if (result == 2)
    {
      switch((int)this)
      {
        case 0:
          uint64_t result = 1;
          if (__dst && a4 && __C)
          {
LABEL_15:
            *uint64_t __dst = 0;
            *a4 = 0.0;
            *__C = 1.0;
          }
          break;
        case 1:
          uint64_t result = 4;
          if (__dst && a4 && __C)
          {
            *(_OWORD *)uint64_t __dst = xmmword_1901C6750;
            *(_OWORD *)a4 = xmmword_1901C6760;
            uint64_t v8 = &xmmword_1901C6770;
LABEL_65:
            *(_OWORD *)__C = *v8;
          }
          break;
        case 2:
          uint64_t result = 9;
          if (__dst && a4 && __C)
          {
            __dst[8] = 1116271638;
            *(_OWORD *)uint64_t __dst = xmmword_1901D8F7C;
            *((_OWORD *)__dst + 1) = unk_1901D8F8C;
            a4[8] = -48.587;
            *(_OWORD *)a4 = xmmword_1901D8FA0;
            *((_OWORD *)a4 + 1) = unk_1901D8FB0;
            int v9 = 1068792731;
            unint64_t v10 = &xmmword_1901D8FC4;
LABEL_70:
            *((_DWORD *)__C + 8) = v9;
            long long v16 = *v10;
            long long v17 = v10[1];
            goto LABEL_80;
          }
          break;
        case 3:
          uint64_t result = 16;
          if (__dst && a4 && __C)
          {
            *(_OWORD *)uint64_t __dst = xmmword_1901D8FE8;
            *((_OWORD *)__dst + 1) = unk_1901D8FF8;
            *((_OWORD *)__dst + 2) = xmmword_1901D9008;
            *((_OWORD *)__dst + 3) = unk_1901D9018;
            *(_OWORD *)a4 = xmmword_1901D9028;
            *((_OWORD *)a4 + 1) = unk_1901D9038;
            *((_OWORD *)a4 + 2) = xmmword_1901D9048;
            *((_OWORD *)a4 + 3) = unk_1901D9058;
            uint64_t v11 = &xmmword_1901D9068;
            goto LABEL_96;
          }
          break;
        case 4:
          uint64_t result = 25;
          if (__dst && a4 && __C)
          {
            __dst[24] = 1058111518;
            *(_OWORD *)uint64_t __dst = xmmword_1901D90A8;
            *((_OWORD *)__dst + 1) = unk_1901D90B8;
            *((_OWORD *)__dst + 4) = xmmword_1901D90E8;
            *((_OWORD *)__dst + 5) = unk_1901D90F8;
            *((_OWORD *)__dst + 2) = xmmword_1901D90C8;
            *((_OWORD *)__dst + 3) = unk_1901D90D8;
            *(_OWORD *)a4 = xmmword_1901D910C;
            *((_OWORD *)a4 + 1) = unk_1901D911C;
            *((_OWORD *)a4 + 4) = xmmword_1901D914C;
            *((_OWORD *)a4 + 5) = unk_1901D915C;
            *((_OWORD *)a4 + 2) = xmmword_1901D912C;
            *((_OWORD *)a4 + 3) = unk_1901D913C;
            a4[24] = 43.688;
            __C[24] = 0.50824;
            uint64_t v12 = &xmmword_1901D9170;
LABEL_79:
            long long v18 = v12[5];
            *((_OWORD *)__C + 4) = v12[4];
            *((_OWORD *)__C + 5) = v18;
            long long v19 = v12[3];
            *((_OWORD *)__C + 2) = v12[2];
            *((_OWORD *)__C + 3) = v19;
            long long v16 = *v12;
            long long v17 = v12[1];
LABEL_80:
            *(_OWORD *)__C = v16;
            *((_OWORD *)__C + 1) = v17;
          }
          break;
        case 5:
          uint64_t result = 36;
          if (__dst && a4 && __C)
          {
            *((_OWORD *)__dst + 2) = xmmword_1901D91F4;
            *((_OWORD *)__dst + 3) = unk_1901D9204;
            *((_OWORD *)__dst + 8) = xmmword_1901D9254;
            *((_OWORD *)__dst + 6) = xmmword_1901D9234;
            *((_OWORD *)__dst + 7) = unk_1901D9244;
            *((_OWORD *)__dst + 4) = xmmword_1901D9214;
            *((_OWORD *)__dst + 5) = unk_1901D9224;
            *(_OWORD *)uint64_t __dst = xmmword_1901D91D4;
            *((_OWORD *)__dst + 1) = unk_1901D91E4;
            *((_OWORD *)a4 + 2) = xmmword_1901D9284;
            *((_OWORD *)a4 + 3) = unk_1901D9294;
            *(_OWORD *)a4 = xmmword_1901D9264;
            *((_OWORD *)a4 + 1) = unk_1901D9274;
            *((_OWORD *)a4 + 8) = xmmword_1901D92E4;
            *((_OWORD *)a4 + 6) = xmmword_1901D92C4;
            *((_OWORD *)a4 + 7) = unk_1901D92D4;
            *((_OWORD *)a4 + 4) = xmmword_1901D92A4;
            *((_OWORD *)a4 + 5) = unk_1901D92B4;
            uint64_t v13 = &xmmword_1901D92F4;
LABEL_85:
            long long v20 = v13[7];
            *((_OWORD *)__C + 6) = v13[6];
            *((_OWORD *)__C + 7) = v20;
            *((_OWORD *)__C + 8) = v13[8];
            long long v21 = v13[3];
            *((_OWORD *)__C + 2) = v13[2];
            *((_OWORD *)__C + 3) = v21;
            long long v22 = v13[5];
            *((_OWORD *)__C + 4) = v13[4];
            *((_OWORD *)__C + 5) = v22;
            long long v23 = v13[1];
            *(_OWORD *)__C = *v13;
            *((_OWORD *)__C + 1) = v23;
          }
          break;
        case 6:
          uint64_t result = 49;
          if (__dst && a4 && __C)
          {
            __dst[48] = 1127431944;
            *((_OWORD *)__dst + 8) = xmmword_1901D9404;
            *((_OWORD *)__dst + 9) = unk_1901D9414;
            *((_OWORD *)__dst + 10) = xmmword_1901D9424;
            *((_OWORD *)__dst + 11) = unk_1901D9434;
            *((_OWORD *)__dst + 4) = xmmword_1901D93C4;
            *((_OWORD *)__dst + 5) = unk_1901D93D4;
            *((_OWORD *)__dst + 6) = xmmword_1901D93E4;
            *((_OWORD *)__dst + 7) = unk_1901D93F4;
            *(_OWORD *)uint64_t __dst = xmmword_1901D9384;
            *((_OWORD *)__dst + 1) = unk_1901D9394;
            *((_OWORD *)__dst + 2) = xmmword_1901D93A4;
            *((_OWORD *)__dst + 3) = unk_1901D93B4;
            a4[48] = -71.28;
            *((_OWORD *)a4 + 8) = xmmword_1901D94C8;
            *((_OWORD *)a4 + 9) = unk_1901D94D8;
            *((_OWORD *)a4 + 10) = xmmword_1901D94E8;
            *((_OWORD *)a4 + 11) = unk_1901D94F8;
            *((_OWORD *)a4 + 4) = xmmword_1901D9488;
            *((_OWORD *)a4 + 5) = unk_1901D9498;
            *((_OWORD *)a4 + 6) = xmmword_1901D94A8;
            *((_OWORD *)a4 + 7) = unk_1901D94B8;
            *(_OWORD *)a4 = xmmword_1901D9448;
            *((_OWORD *)a4 + 1) = unk_1901D9458;
            *((_OWORD *)a4 + 2) = xmmword_1901D9468;
            *((_OWORD *)a4 + 3) = unk_1901D9478;
            __C[48] = 0.25534;
            uint64_t v11 = &xmmword_1901D950C;
            goto LABEL_95;
          }
          break;
        case 7:
          uint64_t result = 64;
          if (__dst && a4 && __C)
          {
            *((_OWORD *)__dst + 12) = xmmword_1901D9690;
            *((_OWORD *)__dst + 13) = unk_1901D96A0;
            *((_OWORD *)__dst + 14) = xmmword_1901D96B0;
            *((_OWORD *)__dst + 15) = unk_1901D96C0;
            *((_OWORD *)__dst + 8) = xmmword_1901D9650;
            *((_OWORD *)__dst + 9) = unk_1901D9660;
            *((_OWORD *)__dst + 10) = xmmword_1901D9670;
            *((_OWORD *)__dst + 11) = unk_1901D9680;
            *((_OWORD *)__dst + 4) = xmmword_1901D9610;
            *((_OWORD *)__dst + 5) = unk_1901D9620;
            *((_OWORD *)__dst + 6) = xmmword_1901D9630;
            *((_OWORD *)__dst + 7) = unk_1901D9640;
            *(_OWORD *)uint64_t __dst = xmmword_1901D95D0;
            *((_OWORD *)__dst + 1) = unk_1901D95E0;
            *((_OWORD *)__dst + 2) = xmmword_1901D95F0;
            *((_OWORD *)__dst + 3) = unk_1901D9600;
            *((_OWORD *)a4 + 12) = xmmword_1901D9790;
            *((_OWORD *)a4 + 13) = unk_1901D97A0;
            *((_OWORD *)a4 + 14) = xmmword_1901D97B0;
            *((_OWORD *)a4 + 15) = unk_1901D97C0;
            *((_OWORD *)a4 + 8) = xmmword_1901D9750;
            *((_OWORD *)a4 + 9) = unk_1901D9760;
            *((_OWORD *)a4 + 10) = xmmword_1901D9770;
            *((_OWORD *)a4 + 11) = unk_1901D9780;
            *((_OWORD *)a4 + 4) = xmmword_1901D9710;
            *((_OWORD *)a4 + 5) = unk_1901D9720;
            *((_OWORD *)a4 + 6) = xmmword_1901D9730;
            *((_OWORD *)a4 + 7) = unk_1901D9740;
            *(_OWORD *)a4 = xmmword_1901D96D0;
            *((_OWORD *)a4 + 1) = unk_1901D96E0;
            *((_OWORD *)a4 + 2) = xmmword_1901D96F0;
            *((_OWORD *)a4 + 3) = unk_1901D9700;
            uint64_t v11 = &xmmword_1901D97D0;
LABEL_94:
            long long v24 = v11[13];
            *((_OWORD *)__C + 12) = v11[12];
            *((_OWORD *)__C + 13) = v24;
            long long v25 = v11[15];
            *((_OWORD *)__C + 14) = v11[14];
            *((_OWORD *)__C + 15) = v25;
LABEL_95:
            long long v26 = v11[9];
            *((_OWORD *)__C + 8) = v11[8];
            *((_OWORD *)__C + 9) = v26;
            long long v27 = v11[11];
            *((_OWORD *)__C + 10) = v11[10];
            *((_OWORD *)__C + 11) = v27;
            long long v28 = v11[5];
            *((_OWORD *)__C + 4) = v11[4];
            *((_OWORD *)__C + 5) = v28;
            long long v29 = v11[7];
            *((_OWORD *)__C + 6) = v11[6];
            *((_OWORD *)__C + 7) = v29;
LABEL_96:
            long long v30 = v11[1];
            *(_OWORD *)__C = *v11;
            *((_OWORD *)__C + 1) = v30;
            long long v31 = v11[3];
            *((_OWORD *)__C + 2) = v11[2];
            *((_OWORD *)__C + 3) = v31;
          }
          break;
        case 8:
          uint64_t result = 81;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_1901D98D0, 0x144uLL);
            memcpy(a4, &unk_1901D9A14, 0x144uLL);
            unint64_t v14 = &unk_1901D9B58;
LABEL_101:
            memcpy(__C, v14, 0x144uLL);
            uint64_t result = 81;
          }
          break;
        case 9:
          uint64_t result = 100;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_1901D9C9C, 0x190uLL);
            memcpy(a4, &unk_1901D9E2C, 0x190uLL);
            uint64_t v15 = &unk_1901D9FBC;
LABEL_106:
            memcpy(__C, v15, 0x190uLL);
            uint64_t result = 100;
          }
          break;
        default:
          uint64_t result = 121;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_1901DA14C, 0x1E4uLL);
            memcpy(a4, &unk_1901DA330, 0x1E4uLL);
            __int16 v7 = &unk_1901DA514;
LABEL_60:
            memcpy(__C, v7, 0x1E4uLL);
            uint64_t result = 121;
          }
          break;
      }
    }
    else if (result == 1)
    {
      switch((int)this)
      {
        case 0:
          uint64_t result = 1;
          if (__dst && a4) {
            goto LABEL_15;
          }
          break;
        case 1:
          uint64_t result = 4;
          if (__dst && a4 && __C)
          {
            *(_OWORD *)uint64_t __dst = xmmword_1901C6750;
            *(_OWORD *)a4 = xmmword_1901C6730;
            uint64_t v8 = &xmmword_1901C6740;
            goto LABEL_65;
          }
          break;
        case 2:
          uint64_t result = 9;
          if (__dst && a4 && __C)
          {
            __dst[8] = 1123963561;
            *(_OWORD *)uint64_t __dst = xmmword_1901D7800;
            *((_OWORD *)__dst + 1) = unk_1901D7810;
            a4[8] = -34.134;
            *(_OWORD *)a4 = xmmword_1901D7824;
            *((_OWORD *)a4 + 1) = unk_1901D7834;
            int v9 = 1069089495;
            unint64_t v10 = &xmmword_1901D7848;
            goto LABEL_70;
          }
          break;
        case 3:
          uint64_t result = 16;
          if (__dst && a4 && __C)
          {
            *(_OWORD *)uint64_t __dst = xmmword_1901D786C;
            *((_OWORD *)__dst + 1) = unk_1901D787C;
            *((_OWORD *)__dst + 2) = xmmword_1901D788C;
            *((_OWORD *)__dst + 3) = unk_1901D789C;
            *(_OWORD *)a4 = xmmword_1901D78AC;
            *((_OWORD *)a4 + 1) = unk_1901D78BC;
            *((_OWORD *)a4 + 2) = xmmword_1901D78CC;
            *((_OWORD *)a4 + 3) = unk_1901D78DC;
            uint64_t v11 = &xmmword_1901D78EC;
            goto LABEL_96;
          }
          break;
        case 4:
          uint64_t result = 25;
          if (__dst && a4 && __C)
          {
            __dst[24] = -1038292098;
            *(_OWORD *)uint64_t __dst = xmmword_1901D792C;
            *((_OWORD *)__dst + 1) = unk_1901D793C;
            *((_OWORD *)__dst + 4) = xmmword_1901D796C;
            *((_OWORD *)__dst + 5) = unk_1901D797C;
            *((_OWORD *)__dst + 2) = xmmword_1901D794C;
            *((_OWORD *)__dst + 3) = unk_1901D795C;
            *(_OWORD *)a4 = xmmword_1901D7990;
            *((_OWORD *)a4 + 1) = unk_1901D79A0;
            *((_OWORD *)a4 + 4) = xmmword_1901D79D0;
            *((_OWORD *)a4 + 5) = unk_1901D79E0;
            *((_OWORD *)a4 + 2) = xmmword_1901D79B0;
            *((_OWORD *)a4 + 3) = unk_1901D79C0;
            a4[24] = -31.512;
            __C[24] = 0.52404;
            uint64_t v12 = &xmmword_1901D79F4;
            goto LABEL_79;
          }
          break;
        case 5:
          uint64_t result = 36;
          if (__dst && a4 && __C)
          {
            *((_OWORD *)__dst + 2) = xmmword_1901D7A78;
            *((_OWORD *)__dst + 3) = unk_1901D7A88;
            *((_OWORD *)__dst + 8) = xmmword_1901D7AD8;
            *((_OWORD *)__dst + 6) = xmmword_1901D7AB8;
            *((_OWORD *)__dst + 7) = unk_1901D7AC8;
            *((_OWORD *)__dst + 4) = xmmword_1901D7A98;
            *((_OWORD *)__dst + 5) = unk_1901D7AA8;
            *(_OWORD *)uint64_t __dst = xmmword_1901D7A58;
            *((_OWORD *)__dst + 1) = unk_1901D7A68;
            *((_OWORD *)a4 + 2) = xmmword_1901D7B08;
            *((_OWORD *)a4 + 3) = unk_1901D7B18;
            *(_OWORD *)a4 = xmmword_1901D7AE8;
            *((_OWORD *)a4 + 1) = unk_1901D7AF8;
            *((_OWORD *)a4 + 8) = xmmword_1901D7B68;
            *((_OWORD *)a4 + 6) = xmmword_1901D7B48;
            *((_OWORD *)a4 + 7) = unk_1901D7B58;
            *((_OWORD *)a4 + 4) = xmmword_1901D7B28;
            *((_OWORD *)a4 + 5) = unk_1901D7B38;
            uint64_t v13 = &xmmword_1901D7B78;
            goto LABEL_85;
          }
          break;
        case 6:
          uint64_t result = 49;
          if (__dst && a4 && __C)
          {
            __dst[48] = -1022566698;
            *((_OWORD *)__dst + 8) = xmmword_1901D7C88;
            *((_OWORD *)__dst + 9) = unk_1901D7C98;
            *((_OWORD *)__dst + 10) = xmmword_1901D7CA8;
            *((_OWORD *)__dst + 11) = unk_1901D7CB8;
            *((_OWORD *)__dst + 4) = xmmword_1901D7C48;
            *((_OWORD *)__dst + 5) = unk_1901D7C58;
            *((_OWORD *)__dst + 6) = xmmword_1901D7C68;
            *((_OWORD *)__dst + 7) = unk_1901D7C78;
            *(_OWORD *)uint64_t __dst = xmmword_1901D7C08;
            *((_OWORD *)__dst + 1) = unk_1901D7C18;
            *((_OWORD *)__dst + 2) = xmmword_1901D7C28;
            *((_OWORD *)__dst + 3) = unk_1901D7C38;
            a4[48] = 22.162;
            *((_OWORD *)a4 + 8) = xmmword_1901D7D4C;
            *((_OWORD *)a4 + 9) = unk_1901D7D5C;
            *((_OWORD *)a4 + 10) = xmmword_1901D7D6C;
            *((_OWORD *)a4 + 11) = unk_1901D7D7C;
            *((_OWORD *)a4 + 4) = xmmword_1901D7D0C;
            *((_OWORD *)a4 + 5) = unk_1901D7D1C;
            *((_OWORD *)a4 + 6) = xmmword_1901D7D2C;
            *((_OWORD *)a4 + 7) = unk_1901D7D3C;
            *(_OWORD *)a4 = xmmword_1901D7CCC;
            *((_OWORD *)a4 + 1) = unk_1901D7CDC;
            *((_OWORD *)a4 + 2) = xmmword_1901D7CEC;
            *((_OWORD *)a4 + 3) = unk_1901D7CFC;
            __C[48] = 0.25211;
            uint64_t v11 = &xmmword_1901D7D90;
            goto LABEL_95;
          }
          break;
        case 7:
          uint64_t result = 64;
          if (__dst && a4 && __C)
          {
            *((_OWORD *)__dst + 12) = xmmword_1901D7F14;
            *((_OWORD *)__dst + 13) = unk_1901D7F24;
            *((_OWORD *)__dst + 14) = xmmword_1901D7F34;
            *((_OWORD *)__dst + 15) = unk_1901D7F44;
            *((_OWORD *)__dst + 8) = xmmword_1901D7ED4;
            *((_OWORD *)__dst + 9) = unk_1901D7EE4;
            *((_OWORD *)__dst + 10) = xmmword_1901D7EF4;
            *((_OWORD *)__dst + 11) = unk_1901D7F04;
            *((_OWORD *)__dst + 4) = xmmword_1901D7E94;
            *((_OWORD *)__dst + 5) = unk_1901D7EA4;
            *((_OWORD *)__dst + 6) = xmmword_1901D7EB4;
            *((_OWORD *)__dst + 7) = unk_1901D7EC4;
            *(_OWORD *)uint64_t __dst = xmmword_1901D7E54;
            *((_OWORD *)__dst + 1) = unk_1901D7E64;
            *((_OWORD *)__dst + 2) = xmmword_1901D7E74;
            *((_OWORD *)__dst + 3) = unk_1901D7E84;
            *((_OWORD *)a4 + 12) = xmmword_1901D8014;
            *((_OWORD *)a4 + 13) = unk_1901D8024;
            *((_OWORD *)a4 + 14) = xmmword_1901D8034;
            *((_OWORD *)a4 + 15) = unk_1901D8044;
            *((_OWORD *)a4 + 8) = xmmword_1901D7FD4;
            *((_OWORD *)a4 + 9) = unk_1901D7FE4;
            *((_OWORD *)a4 + 10) = xmmword_1901D7FF4;
            *((_OWORD *)a4 + 11) = unk_1901D8004;
            *((_OWORD *)a4 + 4) = xmmword_1901D7F94;
            *((_OWORD *)a4 + 5) = unk_1901D7FA4;
            *((_OWORD *)a4 + 6) = xmmword_1901D7FB4;
            *((_OWORD *)a4 + 7) = unk_1901D7FC4;
            *(_OWORD *)a4 = xmmword_1901D7F54;
            *((_OWORD *)a4 + 1) = unk_1901D7F64;
            *((_OWORD *)a4 + 2) = xmmword_1901D7F74;
            *((_OWORD *)a4 + 3) = unk_1901D7F84;
            uint64_t v11 = &xmmword_1901D8054;
            goto LABEL_94;
          }
          break;
        case 8:
          uint64_t result = 81;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_1901D8154, 0x144uLL);
            memcpy(a4, &unk_1901D8298, 0x144uLL);
            unint64_t v14 = &unk_1901D83DC;
            goto LABEL_101;
          }
          break;
        case 9:
          uint64_t result = 100;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_1901D8520, 0x190uLL);
            memcpy(a4, &unk_1901D86B0, 0x190uLL);
            uint64_t v15 = &unk_1901D8840;
            goto LABEL_106;
          }
          break;
        default:
          uint64_t result = 121;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_1901D89D0, 0x1E4uLL);
            memcpy(a4, &unk_1901D8BB4, 0x1E4uLL);
            __int16 v7 = &unk_1901D8D98;
            goto LABEL_60;
          }
          break;
      }
    }
  }
  else
  {
    return HOA::getTDesign(this, __dst, a4, __C, __C);
  }
  return result;
}

unsigned int *HOA::HOA(unsigned int *a1, HOA *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)a1 + 28) = 0;
  *(_OWORD *)(a1 + 50) = 0u;
  *(_OWORD *)(a1 + 54) = 0u;
  *(_OWORD *)(a1 + 62) = 0u;
  *((void *)a1 + 37) = 0;
  *(_OWORD *)(a1 + 46) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 70) = 0u;
  *(_OWORD *)(a1 + 58) = 0u;
  unsigned int v71 = (char **)(a1 + 58);
  int v4 = (unsigned __int16)a2;
  unsigned int v5 = HOA::orderFromNumChannels((HOA *)(unsigned __int16)a2);
  unsigned int v6 = v5;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  if (v5 == -1) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = v5;
  }
  *((_OWORD *)a1 + 6) = 0uLL;
  *((_OWORD *)a1 + 7) = 0uLL;
  *((_OWORD *)a1 + 8) = 0uLL;
  *((_OWORD *)a1 + 9) = 0uLL;
  *((_OWORD *)a1 + 10) = 0uLL;
  a1[44] = 0;
  unsigned int v8 = HOA::normalizationFromTag(a2);
  *(_OWORD *)(a1 + 78) = 0u;
  *(_OWORD *)(a1 + 82) = 0u;
  *(_OWORD *)(a1 + 86) = 0u;
  a1[90] = v8;
  *((unsigned char *)a1 + 364) = 1;
  if (v7 >= 4 && v8 == 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316162;
      int v75 = "HOA.cpp";
      __int16 v76 = 1024;
      __int16 v78 = 2080;
      int v77 = 29;
      unsigned int v79 = "RotationMatrix";
      __int16 v80 = 1024;
      int v81 = 29;
      __int16 v82 = 1024;
      unsigned int v83 = v7;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Trying to create a HOA rotation matrix of order = %d > 3 with FuMa norm"
        "alization, capping to order 3",
        buf,
        0x28u);
    }
    unsigned int v7 = 3;
  }
  unsigned int v72 = (char **)(a1 + 70);
  unsigned int v73 = (char **)(a1 + 52);
  unint64_t v9 = v7 + 1;
  *(_DWORD *)int buf = 0;
  std::vector<float>::assign((char **)a1 + 39, (8 * v9 * (unint64_t)v9 - 2) * v9 / 6, buf);
  int v70 = v6;
  uint64_t v10 = *((void *)a1 + 42);
  if (v9 > (*((void *)a1 + 44) - v10) >> 4)
  {
    uint64_t v11 = *((void *)a1 + 43);
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v7 + 1);
    uint64_t v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v15 = &v12[16 * v14];
    long long v17 = (char *)*((void *)a1 + 42);
    long long v16 = (char *)*((void *)a1 + 43);
    long long v18 = v13;
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
        v18 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      long long v16 = (char *)*((void *)a1 + 42);
    }
    *((void *)a1 + 42) = v18;
    *((void *)a1 + 43) = v13;
    *((void *)a1 + 44) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  int v69 = v4;
  unsigned int v19 = 0;
  long long v20 = (unint64_t *)*((void *)a1 + 43);
  do
  {
    unint64_t v21 = ((2 * v19) | 1) * ((2 * v19) | 1);
    unint64_t v22 = *((void *)a1 + 39) + 4 * ((8 * v19 * v19 - 2) * v19 / 6uLL);
    unint64_t v23 = *((void *)a1 + 44);
    if ((unint64_t)v20 >= v23)
    {
      uint64_t v24 = *((void *)a1 + 42);
      uint64_t v25 = ((uint64_t)v20 - v24) >> 4;
      if ((unint64_t)(v25 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v23 - v24;
      uint64_t v27 = v26 >> 3;
      if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
        uint64_t v27 = v25 + 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v28);
      }
      else {
        uint64_t v29 = 0;
      }
      long long v30 = (unint64_t *)(v28 + 16 * v25);
      unint64_t *v30 = v22;
      v30[1] = v21;
      int v32 = (char *)*((void *)a1 + 42);
      long long v31 = (char *)*((void *)a1 + 43);
      uint64_t v33 = v30;
      if (v31 != v32)
      {
        do
        {
          *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
          v33 -= 2;
          v31 -= 16;
        }
        while (v31 != v32);
        long long v31 = (char *)*((void *)a1 + 42);
      }
      long long v20 = v30 + 2;
      *((void *)a1 + 42) = v33;
      *((void *)a1 + 43) = v30 + 2;
      *((void *)a1 + 44) = v28 + 16 * v29;
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *long long v20 = v22;
      v20[1] = v21;
      v20 += 2;
    }
    *((void *)a1 + 43) = v20;
    ++v19;
  }
  while (v19 <= v7);
  *((void *)a1 + 46) = 0;
  *((void *)a1 + 47) = 0;
  *((void *)a1 + 48) = 0;
  int v34 = v70;
  a1[1] = v70;
  if (v70 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315906;
      int v75 = "HOA.cpp";
      __int16 v76 = 1024;
      int v77 = 662;
      __int16 v78 = 2080;
      unsigned int v79 = "HOA";
      __int16 v80 = 1024;
      int v81 = 662;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Incorrect order",
        buf,
        0x22u);
      int v34 = a1[1];
    }
    else
    {
      int v34 = -1;
    }
  }
  if ((v34 + 1) * (v34 + 1) != v69 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315906;
    int v75 = "HOA.cpp";
    __int16 v76 = 1024;
    int v77 = 666;
    __int16 v78 = 2080;
    unsigned int v79 = "HOA";
    __int16 v80 = 1024;
    int v81 = 666;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Incorrect channel count (i.e. not consistent with HOA order definition Ch"
      "annels = (order+1)^2)",
      buf,
      0x22u);
  }
  unsigned int v35 = HOA::normalizationFromTag((HOA *)a2);
  a1[76] = v35;
  unsigned int v36 = a1[1];
  unsigned int v37 = (v36 + 1) * (v36 + 1);
  a1[3] = v37;
  *a1 = v36;
  if (v35 == 2 && v36 >= 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316162;
      int v75 = "HOA.cpp";
      __int16 v76 = 1024;
      __int16 v78 = 2080;
      int v77 = 684;
      unsigned int v79 = "initialize";
      __int16 v80 = 1024;
      int v81 = 684;
      __int16 v82 = 1024;
      unsigned int v83 = v36;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; initializing a HOA instance with order = %d > 3 with FuMa normalization",
        buf,
        0x28u);
    }
    int v38 = 3;
LABEL_49:
    *a1 = v38;
    unsigned int v37 = (v38 + 1) * (v38 + 1);
    goto LABEL_50;
  }
  if (v36 >= 0xB)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316162;
      int v75 = "HOA.cpp";
      __int16 v76 = 1024;
      __int16 v78 = 2080;
      int v77 = 687;
      unsigned int v79 = "initialize";
      __int16 v80 = 1024;
      int v81 = 687;
      __int16 v82 = 1024;
      unsigned int v83 = v36;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Warning; initializing a HOA instance with order = %d > 10",
        buf,
        0x28u);
    }
    int v38 = 10;
    goto LABEL_49;
  }
LABEL_50:
  a1[2] = v37;
  std::vector<float>::resize((char **)a1 + 10, v37);
  int v39 = 0;
  LODWORD(v40) = 0;
  int v41 = *a1;
  unsigned int v42 = a1[76];
  int v43 = 1;
  uint64_t v44 = *((void *)a1 + 10);
  do
  {
    float v45 = sqrtf((float)((float)v39 * 2.0) + 1.0);
    uint64_t v40 = (int)v40;
    int v46 = v43;
    do
    {
      if (v42)
      {
        if (v42 == 2) {
          float v47 = 1.0 / (float)(v45 * flt_1901C7444[v40]);
        }
        else {
          float v47 = 1.0 / v45;
        }
      }
      else
      {
        float v47 = 1.0;
      }
      *(float *)(v44 + 4 * v40++) = v47;
      --v46;
    }
    while (v46);
    v43 += 2;
  }
  while (v39++ != v41);
  if (a1[2] != v40) {
    __assert_rtn("initialize", "HOA.cpp", 711, "k == mNumChannels");
  }
  *(_DWORD *)int buf = 0;
  std::vector<float>::assign((char **)a1 + 13, (v40 * v40), buf);
  unsigned int SphericalGrid = HOA::getSphericalGrid(a1[44], (HOA *)*a1, 0, 0, 0);
  a1[6] = SphericalGrid;
  std::vector<float>::resize(v73, SphericalGrid);
  std::vector<float>::resize(v71, a1[6]);
  std::vector<float>::resize((char **)a1 + 32, a1[6]);
  HOA::getSphericalGrid(a1[44], (HOA *)*a1, *((_DWORD **)a1 + 26), *((float **)a1 + 29), *((float **)a1 + 32));
  vDSP_vsmul(*((const float **)a1 + 26), 1, &kDeg2Radf, *((float **)a1 + 26), 1, a1[6]);
  vDSP_vsmul(*((const float **)a1 + 29), 1, &kDeg2Radf, *((float **)a1 + 29), 1, a1[6]);
  std::vector<float>::resize(v72, 3 * a1[6]);
  uint64_t v50 = a1[6];
  if (v50)
  {
    uint64_t v51 = *v73;
    uint64_t v52 = *v71;
    long long v53 = (float *)(*v72 + 8);
    do
    {
      float v54 = *(float *)v51;
      v51 += 4;
      float v55 = v54;
      float v56 = *(float *)v52;
      v52 += 4;
      __float2 v57 = __sincosf_stret(v56);
      __float2 v58 = __sincosf_stret(v55);
      *(v53 - 2) = v58.__cosval * v57.__cosval;
      *(v53 - 1) = v58.__sinval * v57.__cosval;
      *long long v53 = v57.__sinval;
      v53 += 3;
      --v50;
    }
    while (v50);
  }
  if (a1[76] == 2)
  {
    std::vector<float>::resize((char **)a1 + 46, a1[2] * a1[2]);
    uint64_t v59 = a1[2];
    if (v59)
    {
      unsigned int v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = *((void *)a1 + 46);
      int v63 = &dword_1901C7484;
      do
      {
        unsigned int v64 = v63;
        unsigned int v65 = v60;
        uint64_t v66 = v59;
        do
        {
          int v67 = *v64++;
          *(_DWORD *)(v62 + 4 * v65++) = v67;
          --v66;
        }
        while (v66);
        ++v61;
        v60 += v59;
        v63 += 16;
      }
      while (v61 != v59);
    }
  }
  *((void *)a1 + 2) = 0;
  *((unsigned char *)a1 + 28) = 1;
  return a1;
}

void sub_18FFFC618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20)
{
  unint64_t v22 = (void *)v20[42];
  if (v22)
  {
    v20[43] = v22;
    operator delete(v22);
  }
  unint64_t v23 = *a10;
  if (*a10)
  {
    v20[40] = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a19;
  if (*a19)
  {
    v20[36] = v24;
    operator delete(v24);
  }
  uint64_t v25 = *a18;
  if (*a18)
  {
    v20[33] = v25;
    operator delete(v25);
  }
  uint64_t v26 = *a16;
  if (*a16)
  {
    v20[30] = v26;
    operator delete(v26);
  }
  uint64_t v27 = *a20;
  if (*a20)
  {
    v20[27] = v27;
    operator delete(v27);
  }
  unint64_t v28 = *a11;
  if (*a11)
  {
    v20[24] = v28;
    operator delete(v28);
  }
  uint64_t v29 = (void *)v20[19];
  if (v29)
  {
    v20[20] = v29;
    operator delete(v29);
  }
  long long v30 = (void *)v20[16];
  if (v30)
  {
    v20[17] = v30;
    operator delete(v30);
  }
  long long v31 = *a15;
  if (*a15)
  {
    v20[14] = v31;
    operator delete(v31);
  }
  int v32 = *a17;
  if (*a17)
  {
    v20[11] = v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)v20[7];
  if (v33)
  {
    v20[8] = v33;
    operator delete(v33);
  }
  int v34 = *a12;
  if (*a12)
  {
    v20[5] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

void HOA::~HOA(HOA *this)
{
  unsigned int v2 = (void *)*((void *)this + 46);
  if (v2)
  {
    *((void *)this + 47) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 42);
  if (v3)
  {
    *((void *)this + 43) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 39);
  if (v4)
  {
    *((void *)this + 40) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)*((void *)this + 32);
  if (v6)
  {
    *((void *)this + 33) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 29);
  if (v7)
  {
    *((void *)this + 30) = v7;
    operator delete(v7);
  }
  unsigned int v8 = (void *)*((void *)this + 26);
  if (v8)
  {
    *((void *)this + 27) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 23);
  if (v9)
  {
    *((void *)this + 24) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 19);
  if (v10)
  {
    *((void *)this + 20) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 16);
  if (v11)
  {
    *((void *)this + 17) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 13);
  if (v12)
  {
    *((void *)this + 14) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 10);
  if (v13)
  {
    *((void *)this + 11) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 7);
  if (v14)
  {
    *((void *)this + 8) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 4);
  if (v15)
  {
    *((void *)this + 5) = v15;
    operator delete(v15);
  }
}

void HOA::sphericalHarmonics(HOA *this, float *a2, const float *a3, uint64_t a4, float *a5)
{
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  uint64_t v159 = (a5 + 1);
  uint64_t v8 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v10 = (float *)((char *)&v158 - v9);
  uint64_t v165 = v11;
  MEMORY[0x1F4188790](v8);
  uint64_t v164 = (float *)((char *)&v158 - ((v12 + 15) & 0x7FFFFFFF0));
  uint64_t v170 = v13;
  if ((int)v13 >= 1)
  {
    uint64_t v14 = v164;
    uint64_t v15 = v165;
    do
    {
      float v16 = *a2++;
      *v14++ = sinf(v16);
      --v15;
    }
    while (v15);
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  int v20 = v170;
  uint64_t v21 = 1;
  *(float *)&int v163 = -945.0;
  uint64_t v22 = v165;
  int v161 = v10;
  uint64_t v169 = 4 * (int)v170;
  do
  {
    int v162 = v19;
    unsigned int v167 = v10;
    uint64_t v168 = v18;
    uint64_t v23 = 0;
    uint64_t v166 = v21;
    do
    {
      if (v20 >= 1)
      {
        float v24 = powf(-1.0, (float)(int)v23);
        if ((int)v23 >= (int)v17) {
          int v25 = v17;
        }
        else {
          int v25 = v23;
        }
        uint64_t v26 = v164;
        uint64_t v27 = v167;
        uint64_t v28 = v22;
        while (1)
        {
          float v29 = *v26;
          float v30 = 1.0;
          switch((int)v17)
          {
            case 0:
              goto LABEL_146;
            case 1:
              if (v25)
              {
                float v31 = 1.0 - (float)(v29 * v29);
                float v32 = -fabsf(sqrtf(v31));
                if (v31 == -INFINITY) {
                  float v30 = -INFINITY;
                }
                else {
                  float v30 = v32;
                }
              }
              else
              {
                float v30 = *v26;
              }
              goto LABEL_146;
            case 2:
              if (v25 == 2)
              {
                float v30 = (float)(1.0 - (float)(v29 * v29)) * 3.0;
                goto LABEL_146;
              }
              if (v25 == 1)
              {
                float v33 = v29 * -3.0;
                float v49 = v29 * v29;
LABEL_66:
                float v66 = 1.0 - v49;
                float v67 = fabsf(sqrtf(v66));
                BOOL v53 = v66 == -INFINITY;
                float v34 = INFINITY;
                if (!v53) {
                  float v34 = v67;
                }
                goto LABEL_68;
              }
              float v30 = 0.0;
              if (v25) {
                goto LABEL_146;
              }
              float v33 = (float)((float)(v29 * v29) * 3.0) + -1.0;
              goto LABEL_28;
            case 3:
              if (v25 == 2)
              {
                float v33 = v29 * 15.0;
                float v34 = 1.0 - (float)(v29 * v29);
LABEL_68:
                float v30 = v33 * v34;
                goto LABEL_146;
              }
              if (v25 != 1)
              {
                if (v25)
                {
                  float v33 = powf(1.0 - (float)(v29 * v29), 1.5);
                  float v34 = -15.0;
                }
                else
                {
                  float v33 = (float)(v29 * -3.0) + (float)(powf(*v26, 3.0) * 5.0);
LABEL_28:
                  float v34 = 0.5;
                }
                goto LABEL_68;
              }
              float v50 = (float)((float)((float)(v29 * v29) * -5.0) + 1.0) * 1.5;
              float v51 = 1.0 - (float)(v29 * v29);
              float v52 = fabsf(sqrtf(v51));
              BOOL v53 = v51 == -INFINITY;
              float v54 = INFINITY;
              if (!v53) {
                float v54 = v52;
              }
LABEL_145:
              float v30 = v50 * v54;
LABEL_146:
              *v27++ = v24 * v30;
              ++v26;
              if (!--v28) {
                goto LABEL_147;
              }
              break;
            case 4:
              switch(v25)
              {
                case 0:
                  float v33 = (float)((float)((float)(v29 * v29) * -30.0) + (float)(powf(*v26, 4.0) * 35.0)) + 3.0;
                  float v34 = 0.125;
                  goto LABEL_68;
                case 1:
                  float v49 = v29 * v29;
                  float v33 = (float)(v29 * 2.5) * (float)((float)((float)(v29 * v29) * -7.0) + 3.0);
                  goto LABEL_66;
                case 2:
                  float v34 = (float)((float)((float)(v29 * v29) * 7.0) + -1.0) * 7.5;
                  float v33 = 1.0 - (float)(v29 * v29);
                  goto LABEL_68;
                case 3:
                  float v40 = v29 * -105.0;
                  float v55 = 1.0 - (float)(v29 * v29);
                  float v56 = 1.5;
                  goto LABEL_118;
                default:
                  float v33 = (float)(1.0 - (float)(v29 * v29)) * (float)(1.0 - (float)(v29 * v29));
                  *(float *)&int v43 = 105.0;
                  goto LABEL_53;
              }
            case 5:
              switch(v25)
              {
                case 0:
                  float v40 = v29 * 0.125;
                  float v41 = (float)((float)((float)(v29 * v29) * -70.0) + (float)(powf(*v26, 4.0) * 63.0)) + 15.0;
                  goto LABEL_119;
                case 1:
                  float v57 = 1.0 - (float)(v29 * v29);
                  float v58 = fabsf(sqrtf(v57)) * -1.875;
                  if (v57 == -INFINITY) {
                    float v59 = -INFINITY;
                  }
                  else {
                    float v59 = v58;
                  }
                  float v60 = (float)((float)((float)(v29 * v29) * -14.0) + (float)(powf(*v26, 4.0) * 21.0)) + 1.0;
                  goto LABEL_96;
                case 2:
                  float v54 = (float)(v29 * 52.5) * (float)(1.0 - (float)(v29 * v29));
                  float v50 = (float)((float)(v29 * v29) * 3.0) + -1.0;
                  goto LABEL_145;
                case 3:
                  float v61 = v29 * v29;
                  float v54 = powf(1.0 - v61, 1.5) * -52.5;
                  float v62 = 9.0;
                  goto LABEL_144;
                case 4:
                  float v33 = v29 * 945.0;
                  float v34 = (float)(1.0 - (float)(v29 * v29)) * (float)(1.0 - (float)(v29 * v29));
                  goto LABEL_68;
                default:
                  float v33 = powf(1.0 - (float)(v29 * v29), 2.5);
                  float v34 = *(float *)&v163;
                  goto LABEL_68;
              }
            case 6:
              switch(v25)
              {
                case 0:
                  float v42 = powf(*v26, 6.0);
                  float v33 = (float)((float)((float)(powf(v29, 4.0) * -315.0) + (float)(v42 * 231.0))
                              + (float)((float)(v29 * v29) * 105.0))
                      + -5.0;
                  *(float *)&int v43 = 0.0625;
                  goto LABEL_53;
                case 1:
                  float v65 = powf(*v26, 4.0);
                  float v49 = v29 * v29;
                  float v33 = (float)(v29 * -2.625)
                      * (float)((float)((float)((float)(v29 * v29) * -30.0) + (float)(v65 * 33.0)) + 5.0);
                  goto LABEL_66;
                case 2:
                  float v63 = (float)(1.0 - (float)(v29 * v29)) * 13.125;
                  float v64 = (float)((float)((float)(v29 * v29) * -18.0) + (float)(powf(*v26, 4.0) * 33.0)) + 1.0;
                  goto LABEL_116;
                case 3:
                  float v30 = powf(1.0 - (float)(v29 * v29), 1.5)
                      * (float)((float)((float)((float)((float)(v29 * v29) * 11.0) + -3.0) * -157.5) * v29);
                  break;
                case 4:
                  float v34 = (float)((float)(1.0 - (float)(v29 * v29)) * (float)(1.0 - (float)(v29 * v29))) * 472.5;
                  float v33 = (float)((float)(v29 * v29) * 11.0) + -1.0;
                  goto LABEL_68;
                case 5:
                  float v40 = v29 * -10395.0;
                  float v55 = 1.0 - (float)(v29 * v29);
                  float v56 = 2.5;
                  goto LABEL_118;
                default:
                  float v33 = powf(1.0 - (float)(v29 * v29), 3.0);
                  float v34 = 10395.0;
                  goto LABEL_68;
              }
              goto LABEL_146;
            case 7:
              switch(v25)
              {
                case 0:
                  double v39 = (float)(powf(*v26, 6.0) * 429.0);
                  float v30 = (v39 + powf(v29, 4.0) * -693.0 + (float)((float)(v29 * v29) * 315.0) + -35.0)
                      * (float)(v29 * 0.0625);
                  break;
                case 1:
                  float v73 = 1.0 - (float)(v29 * v29);
                  float v74 = fabsf(sqrtf(v73)) * -0.4375;
                  if (v73 == -INFINITY) {
                    float v75 = -INFINITY;
                  }
                  else {
                    float v75 = v74;
                  }
                  float v76 = powf(*v26, 6.0);
                  float v77 = (float)((float)((float)(powf(v29, 4.0) * -495.0) + (float)(v76 * 429.0))
                              + (float)((float)(v29 * v29) * 135.0))
                      + -5.0;
                  goto LABEL_139;
                case 2:
                  float v68 = (float)(v29 * 7.875) * (float)(1.0 - (float)(v29 * v29));
                  float v69 = (float)((float)((float)(v29 * v29) * -110.0) + (float)(powf(*v26, 4.0) * 143.0)) + 15.0;
                  goto LABEL_142;
                case 3:
                  float v68 = powf(1.0 - (float)(v29 * v29), 1.5) * -39.375;
                  float v70 = powf(v29, 4.0);
                  float v71 = (float)(v29 * v29) * -66.0;
                  float v72 = 143.0;
                  goto LABEL_141;
                case 4:
                  float v54 = (float)(v29 * 1732.5)
                      * (float)((float)(1.0 - (float)(v29 * v29)) * (float)(1.0 - (float)(v29 * v29)));
                  float v50 = (float)((float)(v29 * v29) * 13.0) + -3.0;
                  goto LABEL_145;
                case 5:
                  float v61 = v29 * v29;
                  float v54 = powf(1.0 - v61, 2.5) * -5197.5;
                  float v62 = 13.0;
                  goto LABEL_144;
                case 6:
                  float v40 = v29 * 135140.0;
                  float v55 = 1.0 - (float)(v29 * v29);
                  float v56 = 3.0;
                  goto LABEL_118;
                default:
                  float v33 = powf(1.0 - (float)(v29 * v29), 3.5);
                  float v34 = -135140.0;
                  goto LABEL_68;
              }
              goto LABEL_146;
            case 8:
              switch(v25)
              {
                case 0:
                  float v44 = powf(*v26, 8.0);
                  float v45 = (float)(powf(v29, 6.0) * -12012.0) + (float)(v44 * 6435.0);
                  float v38 = (float)((float)(v45 + (float)(powf(v29, 4.0) * 6930.0)) + (float)((float)(v29 * v29) * -1260.0))
                      + 35.0;
                  goto LABEL_37;
                case 1:
                  float v82 = 1.0 - (float)(v29 * v29);
                  float v83 = fabsf(sqrtf(v82));
                  BOOL v53 = v82 == -INFINITY;
                  float v84 = INFINITY;
                  if (!v53) {
                    float v84 = v83;
                  }
                  float v59 = (float)(v29 * -0.5625) * v84;
                  float v85 = powf(*v26, 6.0);
                  float v60 = (float)((float)((float)(powf(v29, 4.0) * -1001.0) + (float)(v85 * 715.0))
                              + (float)((float)(v29 * v29) * 385.0))
                      + -35.0;
                  goto LABEL_96;
                case 2:
                  float v78 = v29 * v29;
                  float v63 = (float)(1.0 - (float)(v29 * v29)) * 19.688;
                  float v79 = powf(*v26, 6.0);
                  float v80 = (float)(powf(v29, 4.0) * -143.0) + (float)(v79 * 143.0);
                  float v81 = 33.0;
                  goto LABEL_113;
                case 3:
                  float v40 = (float)(v29 * -433.12) * powf(1.0 - (float)(v29 * v29), 1.5);
                  float v41 = (float)((float)((float)(v29 * v29) * -26.0) + (float)(powf(v29, 4.0) * 39.0)) + 3.0;
                  goto LABEL_119;
                case 4:
                  float v68 = (float)((float)(1.0 - (float)(v29 * v29)) * (float)(1.0 - (float)(v29 * v29))) * 1299.4;
                  float v69 = (float)((float)((float)(v29 * v29) * -26.0) + (float)(powf(*v26, 4.0) * 65.0)) + 1.0;
                  goto LABEL_142;
                case 5:
                  float v86 = v29 * -67568.0;
                  float v61 = v29 * v29;
                  float v54 = v86 * powf(1.0 - v61, 2.5);
                  float v62 = 5.0;
                  goto LABEL_144;
                case 6:
                  float v61 = v29 * v29;
                  float v54 = powf(1.0 - v61, 3.0) * 67568.0;
                  float v62 = 15.0;
                  goto LABEL_144;
                case 7:
                  float v40 = v29 * -2027000.0;
                  float v55 = 1.0 - (float)(v29 * v29);
                  float v56 = 3.5;
                  goto LABEL_118;
                default:
                  float v33 = powf(1.0 - (float)(v29 * v29), 4.0);
                  float v34 = 2027000.0;
                  goto LABEL_68;
              }
            case 9:
              switch(v25)
              {
                case 0:
                  float v35 = powf(*v26, 9.0);
                  float v36 = (float)(powf(v29, 7.0) * -25740.0) + (float)(v35 * 12155.0);
                  float v37 = v36 + (float)(powf(v29, 5.0) * 18018.0);
                  float v38 = (float)(v37 + (float)(powf(v29, 3.0) * -4620.0)) + (float)(v29 * 315.0);
LABEL_37:
                  float v30 = v38 * 0.0078125;
                  break;
                case 1:
                  float v97 = v29 * v29;
                  float v98 = 1.0 - (float)(v29 * v29);
                  float v99 = fabsf(sqrtf(v98)) * -0.35156;
                  if (v98 == -INFINITY) {
                    float v63 = -INFINITY;
                  }
                  else {
                    float v63 = v99;
                  }
                  float v100 = powf(*v26, 8.0);
                  float v101 = (float)(powf(v29, 6.0) * -4004.0) + (float)(v100 * 2431.0);
                  float v102 = v101 + (float)(powf(v29, 4.0) * 2002.0);
                  float v103 = -308.0;
                  goto LABEL_115;
                case 2:
                  float v68 = (float)((float)(v29 * v29) + -1.0) * -30.938;
                  float v88 = powf(*v26, 7.0);
                  float v89 = (float)(powf(v29, 5.0) * -273.0) + (float)(v88 * 221.0);
                  float v90 = v89 + (float)(powf(v29, 3.0) * 91.0);
                  float v91 = -7.0;
                  goto LABEL_124;
                case 3:
                  float v92 = v29 * v29;
                  float v93 = 1.0 - (float)(v29 * v29);
                  float v94 = fabsf(sqrtf(v93)) * 216.56;
                  BOOL v53 = v93 == -INFINITY;
                  float v95 = INFINITY;
                  if (!v53) {
                    float v95 = v94;
                  }
                  float v59 = (float)(v92 + -1.0) * v95;
                  float v96 = powf(*v26, 6.0);
                  float v60 = (float)((float)((float)(powf(v29, 4.0) * -195.0) + (float)(v96 * 221.0)) + (float)(v92 * 39.0))
                      + -1.0;
LABEL_96:
                  float v30 = v60 * v59;
                  break;
                case 4:
                  float v68 = (float)((float)((float)(v29 * v29) + -1.0) * (float)((float)(v29 * v29) + -1.0)) * 16892.0;
                  float v87 = powf(*v26, 5.0);
                  float v69 = (float)((float)(powf(v29, 3.0) * -10.0) + (float)(v87 * 17.0)) + v29;
                  goto LABEL_142;
                case 5:
                  float v106 = v29 * v29;
                  float v107 = 1.0 - (float)(v29 * v29);
                  float v108 = fabsf(sqrtf(v107)) * -16892.0;
                  if (v107 == -INFINITY) {
                    float v109 = -INFINITY;
                  }
                  else {
                    float v109 = v108;
                  }
                  float v75 = (float)((float)(v106 + -1.0) * (float)(v106 + -1.0)) * v109;
                  float v77 = (float)((float)(v106 * -30.0) + (float)(powf(*v26, 4.0) * 85.0)) + 1.0;
                  goto LABEL_139;
                case 6:
                  float v110 = powf((float)(v29 * v29) + -1.0, 3.0) * -337840.0;
                  float v111 = powf(v29, 3.0);
                  float v112 = v29 * -3.0;
                  float v113 = 17.0;
                  goto LABEL_132;
                case 7:
                  float v61 = v29 * v29;
                  float v104 = fabsf(sqrtf(1.0 - v61)) * 1013500.0;
                  if ((float)(1.0 - v61) == -INFINITY) {
                    float v105 = INFINITY;
                  }
                  else {
                    float v105 = v104;
                  }
                  float v54 = powf(v61 + -1.0, 3.0) * v105;
                  float v62 = 17.0;
                  goto LABEL_144;
                case 8:
                  float v40 = v29 * 34459000.0;
                  float v55 = (float)(v29 * v29) + -1.0;
                  float v56 = 4.0;
                  goto LABEL_118;
                default:
                  float v33 = powf(1.0 - (float)(v29 * v29), 4.5);
                  float v34 = -34459000.0;
                  goto LABEL_68;
              }
              goto LABEL_146;
            case 10:
              switch(v25)
              {
                case 0:
                  float v46 = powf(*v26, 10.0);
                  float v47 = (float)(powf(v29, 8.0) * -109400.0) + (float)(v46 * 46189.0);
                  float v48 = v47 + (float)(powf(v29, 6.0) * 90090.0);
                  float v33 = (float)((float)(v48 + (float)(powf(v29, 4.0) * -30030.0)) + (float)((float)(v29 * v29) * 3465.0))
                      + -63.0;
                  *(float *)&int v43 = 0.0039062;
LABEL_53:
                  float v34 = *(float *)&v43;
                  goto LABEL_68;
                case 1:
                  float v117 = 1.0 - (float)(v29 * v29);
                  float v118 = fabsf(sqrtf(v117)) * -0.42969;
                  if (v117 == -INFINITY) {
                    float v68 = -INFINITY;
                  }
                  else {
                    float v68 = v118;
                  }
                  float v119 = powf(*v26, 9.0);
                  float v120 = (float)(powf(v29, 7.0) * -7956.0) + (float)(v119 * 4199.0);
                  float v121 = v120 + (float)(powf(v29, 5.0) * 4914.0);
                  float v90 = v121 + (float)(powf(v29, 3.0) * -1092.0);
                  float v91 = 63.0;
LABEL_124:
                  float v69 = v90 + (float)(v29 * v91);
                  goto LABEL_142;
                case 2:
                  float v97 = v29 * v29;
                  float v63 = (float)((float)(v29 * v29) + -1.0) * -3.8672;
                  float v115 = powf(*v26, 8.0);
                  float v116 = (float)(powf(v29, 6.0) * -6188.0) + (float)(v115 * 4199.0);
                  float v102 = v116 + (float)(powf(v29, 4.0) * 2730.0);
                  float v103 = -364.0;
LABEL_115:
                  float v64 = (float)(v102 + (float)(v97 * v103)) + 7.0;
                  goto LABEL_116;
                case 3:
                  float v122 = 1.0 - (float)(v29 * v29);
                  float v123 = fabsf(sqrtf(v122)) * 402.19;
                  BOOL v53 = v122 == -INFINITY;
                  float v124 = INFINITY;
                  if (!v53) {
                    float v124 = v123;
                  }
                  float v75 = (float)((float)(v29 * v29) + -1.0) * v124;
                  float v125 = powf(*v26, 7.0);
                  float v126 = (float)(powf(v29, 5.0) * -357.0) + (float)(v125 * 323.0);
                  float v127 = v126 + (float)(powf(v29, 3.0) * 105.0);
                  float v128 = -7.0;
                  goto LABEL_138;
                case 4:
                  float v78 = v29 * v29;
                  float v63 = (float)((float)((float)(v29 * v29) + -1.0) * (float)((float)(v29 * v29) + -1.0)) * 2815.3;
                  float v114 = powf(*v26, 6.0);
                  float v80 = (float)(powf(v29, 4.0) * -255.0) + (float)(v114 * 323.0);
                  float v81 = 45.0;
LABEL_113:
                  float v64 = (float)(v80 + (float)(v78 * v81)) + -1.0;
LABEL_116:
                  float v30 = v63 * v64;
                  break;
                case 5:
                  float v132 = 1.0 - (float)(v29 * v29);
                  float v133 = fabsf(sqrtf(v132)) * -16892.0;
                  if (v132 == -INFINITY) {
                    float v134 = -INFINITY;
                  }
                  else {
                    float v134 = v133;
                  }
                  float v75 = (float)((float)((float)(v29 * v29) + -1.0) * (float)((float)(v29 * v29) + -1.0)) * v134;
                  float v135 = powf(*v26, 5.0);
                  float v127 = (float)(powf(v29, 3.0) * -170.0) + (float)(v135 * 323.0);
                  float v128 = 15.0;
LABEL_138:
                  float v77 = v127 + (float)(v29 * v128);
LABEL_139:
                  float v30 = v77 * v75;
                  break;
                case 6:
                  float v68 = powf((float)(v29 * v29) + -1.0, 3.0) * -84459.0;
                  float v70 = powf(v29, 4.0);
                  float v71 = (float)(v29 * v29) * -102.0;
                  float v72 = 323.0;
LABEL_141:
                  float v69 = (float)(v71 + (float)(v70 * v72)) + 3.0;
LABEL_142:
                  float v30 = v68 * v69;
                  break;
                case 7:
                  float v129 = 1.0 - (float)(v29 * v29);
                  float v130 = fabsf(sqrtf(v129)) * 5743200.0;
                  if (v129 == -INFINITY) {
                    float v131 = INFINITY;
                  }
                  else {
                    float v131 = v130;
                  }
                  float v110 = powf((float)(v29 * v29) + -1.0, 3.0) * v131;
                  float v111 = powf(v29, 3.0);
                  float v112 = v29 * -3.0;
                  float v113 = 19.0;
LABEL_132:
                  float v30 = (float)(v112 + (float)(v111 * v113)) * v110;
                  break;
                case 8:
                  float v61 = v29 * v29;
                  float v54 = powf(v61 + -1.0, 4.0) * 17230000.0;
                  float v62 = 19.0;
LABEL_144:
                  float v50 = (float)(v61 * v62) + -1.0;
                  goto LABEL_145;
                case 9:
                  float v40 = v29 * -654730000.0;
                  float v55 = 1.0 - (float)(v29 * v29);
                  float v56 = 4.5;
LABEL_118:
                  float v41 = powf(v55, v56);
LABEL_119:
                  float v30 = v40 * v41;
                  break;
                default:
                  float v33 = powf((float)(v29 * v29) + -1.0, 5.0);
                  float v34 = -654730000.0;
                  goto LABEL_68;
              }
              goto LABEL_146;
            default:
              float v30 = 0.0;
              goto LABEL_146;
          }
        }
      }
LABEL_147:
      uint64_t v136 = v169;
      int v20 = v170;
      uint64_t v137 = v166;
      unsigned int v167 = (float *)((char *)v167 + v169);
      ++v23;
    }
    while (v23 != v166);
    int v138 = v162;
    int v139 = v162 + v17;
    uint64_t v140 = v168;
    uint64_t v141 = v168;
    uint64_t v10 = v161;
    do
    {
      while (1)
      {
        uint64_t v142 = (int)v141 >= 0 ? v141 : -(int)v141;
        if (v20 >= 1) {
          break;
        }
        if (v137 == ++v141)
        {
          uint64_t v149 = v17 + 1;
          goto LABEL_164;
        }
      }
      float v143 = sqrtf((float)((float)((float)((float)(int)v17 * 2.0) + 1.0) * flt_1901C7884[v17 - v142])* flt_1901C78D8[(v142 + v17)]);
      int v144 = v142 * v20;
      int v145 = (float *)(a4 + 4 * (v139 + (int)v141) * v20);
      uint64_t v146 = &v10[v144];
      uint64_t v147 = v22;
      do
      {
        float v148 = *v146++;
        *v145++ = v143 * v148;
        --v147;
      }
      while (v147);
      ++v141;
    }
    while (v137 != v141);
    uint64_t v150 = 0;
    uint64_t v160 = v17 + 1;
    int v151 = (float *)(a4 + v136 * (v17 + 1 + v138));
    LODWORD(v167) = v20 * v138;
    do
    {
      if (v17)
      {
        uint64_t v152 = 0;
        int v153 = (int)v167;
        unsigned int v154 = v151;
        int v155 = v17;
        do
        {
          *unsigned int v154 = *v154 * (float)(cosf(*((float *)this + v150) * (float)(int)++v152) * 1.4142);
          float v156 = sinf(-(float)(*((float *)this + v150) * (float)v155));
          uint64_t v157 = v169;
          int v20 = v170;
          uint64_t v140 = v168;
          *(float *)(a4 + 4 * (v150 + v153)) = *(float *)(a4 + 4 * (v150 + v153)) * (float)(v156 * 1.4142);
          --v155;
          unsigned int v154 = (float *)((char *)v154 + v157);
          v153 += v20;
        }
        while (v140 + v152);
      }
      ++v150;
      ++v151;
      uint64_t v22 = v165;
    }
    while (v150 != v165);
    uint64_t v149 = v160;
    uint64_t v10 = v161;
    int v138 = v162;
    uint64_t v137 = v166;
LABEL_164:
    int v19 = v138 + 2 * v17 + 1;
    uint64_t v21 = v137 + 1;
    uint64_t v18 = v140 - 1;
    uint64_t v17 = v149;
  }
  while (v149 != v159);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18FFFDE88(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HOA::createDecoder(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a1 + 28))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967246;
    }
    *(_DWORD *)int buf = 136315906;
    unsigned int v167 = "HOA.cpp";
    __int16 v168 = 1024;
    int v169 = 948;
    __int16 v170 = 2080;
    uint64_t v171 = "createDecoder";
    __int16 v172 = 1024;
    *(_DWORD *)unsigned int v173 = 948;
    float v126 = MEMORY[0x1E4F14500];
    float v127 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; HOA object was not initialized";
LABEL_107:
    _os_log_impl(&dword_18FEC0000, v126, OS_LOG_TYPE_ERROR, v127, buf, 0x22u);
    return 4294967246;
  }
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (!v4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294967246;
    }
    *(_DWORD *)int buf = 136315906;
    unsigned int v167 = "HOA.cpp";
    __int16 v168 = 1024;
    int v169 = 953;
    __int16 v170 = 2080;
    uint64_t v171 = "createDecoder";
    __int16 v172 = 1024;
    *(_DWORD *)unsigned int v173 = 953;
    float v126 = MEMORY[0x1E4F14500];
    float v127 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Empty azimuth/elevation";
    goto LABEL_107;
  }
  uint64_t v6 = v4 >> 2;
  if (v6 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315906;
      unsigned int v167 = "HOA.cpp";
      __int16 v168 = 1024;
      int v169 = 958;
      __int16 v170 = 2080;
      uint64_t v171 = "createDecoder";
      __int16 v172 = 1024;
      *(_DWORD *)unsigned int v173 = 958;
      float v126 = MEMORY[0x1E4F14500];
      float v127 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Inconsistent azimuth/elevation size";
      goto LABEL_107;
    }
    return 4294967246;
  }
  a1[5] = v6;
  std::vector<float>::resize((char **)a1 + 16, v6);
  std::vector<float>::resize((char **)a1 + 19, a1[5]);
  vDSP_vsmul(*(const float **)a2, 1, &kDeg2Radf, *((float **)a1 + 16), 1, a1[5]);
  vDSP_vsmul(*(const float **)a3, 1, &kDeg2Radf, *((float **)a1 + 19), 1, a1[5]);
  uint64_t v8 = (char **)(a1 + 14);
  unint64_t v9 = a1[2] * a1[5];
  *(_DWORD *)int buf = 0;
  std::vector<float>::assign((char **)a1 + 7, v9, buf);
  if (!*a1)
  {
    unsigned int v129 = a1[5];
    if (v129)
    {
      float v130 = 1.0 / sqrtf((float)v129);
      float v131 = *v8;
      do
      {
        *(float *)float v131 = v130;
        v131 += 4;
        --v129;
      }
      while (v129);
    }
    uint64_t v134 = 0;
    goto LABEL_143;
  }
  uint64_t v160 = 0;
  uint64_t v161 = 0;
  uint64_t v159 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v159, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::vector<char> __p = 0;
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  memset(v190, 0, 24);
  float64x2_t v188 = 0uLL;
  double v189 = 0.0;
  VBAP::VBAP((size_t)buf, (uint64_t *)&v159, (uint64_t *)&__p, (uint64_t)v190, (uint64_t **)&v188);
  v162[0] = (float *)&v188;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v162);
  if (*(void *)v190)
  {
    *(void *)&v190[2] = *(void *)v190;
    operator delete(*(void **)v190);
  }
  if (__p)
  {
    uint64_t v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    uint64_t v160 = v159;
    operator delete(v159);
  }
  if (!v187)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v190[0] = 136315906;
      *(void *)&v190[1] = "HOA.cpp";
      LOWORD(v190[3]) = 1024;
      *(_DWORD *)((char *)&v190[3] + 2) = 982;
      HIWORD(v190[4]) = 2080;
      *(void *)&v190[5] = "createDecoder";
      __int16 v191 = 1024;
      int v192 = 982;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; VBAP object was not initialized",
        (uint8_t *)v190,
        0x22u);
    }
    VBAP::~VBAP((VBAP *)buf);
    return 4294967246;
  }
  unint64_t v10 = 216 * a1[2];
  v190[0] = 0;
  std::vector<float>::vector(__B, v10, v190);
  v190[0] = 0;
  std::vector<float>::vector(__dst, 0xD8uLL, v190);
  v190[0] = 0;
  std::vector<float>::vector(__C, 0xD8uLL, v190);
  v190[0] = 0;
  std::vector<float>::vector(v152, 0x288uLL, v190);
  unsigned int v11 = (float *)__dst[0];
  if (__dst[0])
  {
    uint64_t v12 = __C[0];
    if (__C[0])
    {
      memcpy(__dst[0], &unk_1901C8F00, 0x360uLL);
      memcpy(v12, &unk_1901C9260, 0x360uLL);
    }
  }
  vDSP_vsmul(v11, 1, &kDeg2Radf, v11, 1, 0xD8uLL);
  vDSP_vsmul(__C[0], 1, &kDeg2Radf, __C[0], 1, 0xD8uLL);
  HOA::sphericalHarmonics((HOA *)__dst[0], __C[0], (const float *)0xD8, (uint64_t)__B[0], (float *)*a1);
  uint64_t v13 = 0;
  uint64_t v14 = (char *)__dst[0];
  uint64_t v15 = __C[0];
  float v16 = (float *)((char *)v152[0] + 8);
  do
  {
    float v17 = *(float *)&v14[v13 * 4];
    __float2 v18 = __sincosf_stret(v15[v13]);
    __float2 v19 = __sincosf_stret(v17);
    *(v16 - 2) = v19.__cosval * v18.__cosval;
    *(v16 - 1) = v19.__sinval * v18.__cosval;
    *float v16 = v18.__sinval;
    v16 += 3;
    ++v13;
  }
  while (v13 != 216);
  if (a1[76] == 2)
  {
    std::vector<float>::vector(v190, 216 * a1[2]);
    vDSP_mmul(*((const float **)a1 + 46), 1, __B[0], 1, *(float **)v190, 1, a1[2], 0xD8uLL, a1[2]);
    int v20 = *(void **)v190;
    if (*(void *)&v190[2] != *(void *)v190)
    {
      memmove(__B[0], *(const void **)v190, *(void *)&v190[2] - *(void *)v190);
      int v20 = *(void **)v190;
    }
    if (v20)
    {
      *(void *)&v190[2] = v20;
      operator delete(v20);
    }
  }
  float __A = 0.0046296;
  std::vector<float>::vector(v150, (uint64_t)(*((void *)a1 + 11) - *((void *)a1 + 10)) >> 2);
  vDSP_svdiv(&__A, *((const float **)a1 + 10), 1, v150[0], 1, a1[2]);
  for (uint64_t i = 0; i != 216; ++i)
    vDSP_vmul(v150[0], 1, &__B[0][i], 216, &__B[0][i], 216, a1[2]);
  uint64_t v22 = __B[0];
  uint64_t v23 = (char *)v152[0];
  vDSP_vclr(*((float **)a1 + 7), 1, a1[2] * a1[5]);
  std::vector<float>::vector(v162, a1[5]);
  uint64_t v24 = 0;
  while (1)
  {
    if (!v187)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v190[0] = 136315906;
        *(void *)&v190[1] = "VBAP.cpp";
        LOWORD(v190[3]) = 1024;
        *(_DWORD *)((char *)&v190[3] + 2) = 579;
        HIWORD(v190[4]) = 2080;
        *(void *)&v190[5] = "calculateVBAPGains";
        __int16 v191 = 1024;
        int v192 = 579;
        float v132 = MEMORY[0x1E4F14500];
        float v133 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Can not calculate gain if the VBAP object is not initialized";
LABEL_126:
        _os_log_impl(&dword_18FEC0000, v132, OS_LOG_TYPE_ERROR, v133, (uint8_t *)v190, 0x22u);
        uint64_t v134 = 4294967246;
        goto LABEL_128;
      }
      goto LABEL_127;
    }
    int v25 = (float32x2_t *)&v23[12 * v24];
    uint64_t v26 = v162[0];
    if (v25->f32[0] == 0.0 && v25->f32[1] == 0.0 && v25[1].f32[0] == 0.0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v190[0] = 136315906;
        *(void *)&v190[1] = "VBAP.cpp";
        LOWORD(v190[3]) = 1024;
        *(_DWORD *)((char *)&v190[3] + 2) = 585;
        HIWORD(v190[4]) = 2080;
        *(void *)&v190[5] = "calculateVBAPGains";
        __int16 v191 = 1024;
        int v192 = 585;
        float v132 = MEMORY[0x1E4F14500];
        float v133 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Can not calculate gain for a source location [0, 0, 0]";
        goto LABEL_126;
      }
LABEL_127:
      uint64_t v134 = 4294967246;
      goto LABEL_128;
    }
    vDSP_vclr(v162[0], 1, v184);
    vDSP_vclr(v176, 1, (v177 - (uint64_t)v176) >> 2);
    float64x2_t v27 = vcvtq_f64_f32(*v25);
    v28.f64[0] = v25[1].f32[0];
    float64x2_t v29 = vmulq_f64(v28, v28);
    v29.f64[0] = 1.0 / sqrt(v29.f64[0] + vaddvq_f64(vmulq_f64(v27, v27)));
    float64x2_t v30 = vmulq_f64(v28, v29);
    float64x2_t v31 = vmulq_n_f64(v27, v29.f64[0]);
    unint64_t v32 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    if (!v186) {
      break;
    }
    v27.f64[0] = *(float *)(v174 + 8);
    v29.f64[0] = *(float *)(v174 + 20);
    *(void *)&v31.f64[1] = v32;
    float v33 = sqrt((vmulq_f64(v30, v27).f64[0] + vaddvq_f64(vmulq_f64(v31, vcvtq_f64_f32(*(float32x2_t *)v174))) + 1.0) * 0.5);
    float v34 = sqrt((vmulq_f64(v30, v29).f64[0] + vaddvq_f64(vmulq_f64(v31, vcvtq_f64_f32(*(float32x2_t *)(v174 + 12)))) + 1.0)* 0.5);
    float *v26 = v33;
    v26[1] = v34;
LABEL_42:
    unint64_t v45 = a1[5];
    if (v45)
    {
      uint64_t v46 = 0;
      for (unint64_t j = 0; j < v45; ++j)
      {
        vDSP_vsma(&v22[v24], 216, &v162[0][v46], (const float *)(*((void *)a1 + 7) + v46 * 4), v45, (float *)(*((void *)a1 + 7) + v46 * 4), v45, a1[2]);
        unint64_t v45 = a1[5];
        ++v46;
      }
    }
    if (++v24 == 216)
    {
      uint64_t v134 = 0;
      goto LABEL_130;
    }
  }
  if (v184 < 2)
  {
    float *v26 = 1.0;
    goto LABEL_42;
  }
  if (v187)
  {
    unint64_t v139 = v32;
    float64_t v140 = v31.f64[0];
    float64x2_t v141 = v30;
    unsigned int subtriangle_containment = CDelaunayTriangles3D::find_subtriangle_containment(v183, COERCE_FLOAT(*v25), COERCE_FLOAT(HIDWORD(*(unint64_t *)v25)), v28.f64[0]);
    if ((subtriangle_containment & 0x80000000) == 0
      && 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3) > subtriangle_containment)
    {
      int v138 = v23;
      float v36 = v22;
      float v37 = v8;
      float64x2_t v188 = vcvtq_f64_f32(*v25);
      double v189 = v25[1].f32[0];
      uint64_t v38 = v181 + 24 * subtriangle_containment;
      for (uint64_t k = *(void *)(v38 + 8); k != v38; uint64_t k = *(void *)(k + 8))
      {
        int v40 = *(_DWORD *)(k + 16);
        *(void *)v190 = 0;
        int v41 = 9 * v40;
        vDSP_dotprD((const double *)(v180 + 72 * v40), 1, v188.f64, 1, (double *)v190, 3uLL);
        if (*(double *)v190 > -0.00000011920929)
        {
          double v165 = 0.0;
          vDSP_dotprD((const double *)(v180 + 8 * (v41 + 3)), 1, v188.f64, 1, &v165, 3uLL);
          if (v165 > -0.00000011920929)
          {
            double v164 = 0.0;
            vDSP_dotprD((const double *)(v180 + 8 * (v41 + 6)), 1, v188.f64, 1, &v164, 3uLL);
            if (v164 > -0.00000011920929)
            {
              int v48 = 0;
              float v49 = (int *)(v179 + 12 * v40);
              float64x2_t v50 = vcvtq_f64_f32(*(float32x2_t *)(*(void *)&v173[2] + 12 * *v49));
              v42.f64[0] = *(float *)(*(void *)&v173[2] + 4 * (3 * *v49 + 2));
              unint64_t v51 = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
              float64x2_t v52 = vcvtq_f64_f32(*(float32x2_t *)(*(void *)&v173[2] + 12 * v49[1]));
              v43.f64[0] = *(float *)(*(void *)&v173[2] + 4 * (3 * v49[1] + 2));
              unint64_t v53 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
              float64x2_t v54 = vcvtq_f64_f32(*(float32x2_t *)(*(void *)&v173[2] + 12 * v49[2]));
              v44.f64[0] = *(float *)(*(void *)&v173[2] + 4 * (3 * v49[2] + 2));
              unint64_t v55 = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
              double v56 = vmulq_f64(v42, v43).f64[0] + vaddvq_f64(vmulq_f64(v50, v52));
              float64_t v57 = vmulq_f64(v43, v44).f64[0] + vaddvq_f64(vmulq_f64(v52, v54));
              float64_t v58 = vmulq_f64(v42, v44).f64[0] + vaddvq_f64(vmulq_f64(v50, v54));
              double v59 = 1.0 - v56 * v56;
              double v60 = -(v58 - v56 * v57) / v59;
              double v61 = -(v57 - v56 * v58) / v59;
              float64x2_t v62 = 0uLL;
              float64x2_t v63 = 0uLL;
              float64x2_t v64 = 0uLL;
              float64x2_t v65 = 0uLL;
              do
              {
                float64x2_t v66 = v65;
                *(float64_t *)&long long v67 = v52.f64[0];
                *((void *)&v67 + 1) = v53;
                v149[0] = v67;
                v149[1] = v43;
                double v68 = *((double *)v149 + (v48 & 3));
                *(float64_t *)&long long v67 = v50.f64[0];
                *((void *)&v67 + 1) = v51;
                v148[0] = v67;
                v148[1] = v42;
                double v69 = *((double *)v148 + (v48 & 3));
                float64x2_t v146 = v64;
                float64x2_t v147 = v66;
                v146.f64[v48 & 3] = v68 - v69 * v56;
                float64x2_t v64 = v146;
                v65.f64[0] = v147.f64[0];
                v65.f64[1] = v66.f64[1];
                v66.f64[0] = v54.f64[0];
                *(void *)&v66.f64[1] = v55;
                v145[0] = v66;
                v145[1] = v44;
                v66.f64[0] = *((float64_t *)v145 + (v48 & 3));
                float64x2_t v143 = v62;
                float64x2_t v144 = v63;
                v143.f64[v48 & 3] = v66.f64[0] + v61 * v68 + v60 * v69;
                float64x2_t v62 = v143;
                v63.f64[0] = v144.f64[0];
                ++v48;
              }
              while (v48 != 3);
              v70.f64[0] = v140;
              *(void *)&v70.f64[1] = v139;
              float64x2_t v72 = vmulq_f64(v65, v65);
              double v71 = v72.f64[0] + vaddvq_f64(vmulq_f64(v64, v64));
              v72.f64[0] = 0.0;
              double v73 = 0.0;
              uint64_t v8 = v37;
              if (v71 >= 0.00000999999975) {
                double v73 = (vmulq_f64(v141, v65).f64[0] + vaddvq_f64(vmulq_f64(v70, v64))) / v71;
              }
              double v74 = vmulq_f64(v63, v63).f64[0] + vaddvq_f64(vmulq_f64(v143, v143));
              uint64_t v22 = v36;
              if (v74 >= 0.00000999999975)
              {
                float64x2_t v72 = vmulq_f64(v141, v63);
                v72.f64[0] = (v72.f64[0] + vaddvq_f64(vmulq_f64(v70, v143))) / v74;
              }
              double v75 = vmulq_f64(v141, v42).f64[0] + vaddvq_f64(vmulq_f64(v70, v50)) - v73 * v56 + v72.f64[0] * v60;
              double v76 = v73 + v72.f64[0] * v61;
              v77.f64[0] = v75;
              v77.f64[1] = v76;
              double v78 = vmulq_f64(v72, v72).f64[0] + vaddvq_f64(vmulq_f64(v77, v77));
              int8x16_t v79 = 0uLL;
              long long v80 = 0uLL;
              uint64_t v23 = v138;
              if (v78 > 0.00000999999975)
              {
                double v81 = 1.0 / sqrt(v78);
                *(double *)v79.i64 = v75 * v81;
                double v82 = v76 * v81;
                *(double *)&long long v80 = v72.f64[0] * v81;
                *(double *)&v79.i64[1] = v82;
              }
              uint64_t v83 = 0;
              uint64_t v84 = v184;
              unint64_t v85 = vextq_s8(v79, v79, 8uLL).u64[0];
              float v86 = v176;
              do
              {
                uint64_t v87 = v49[v83];
                *(void *)&long long v88 = v79.i64[0];
                *((void *)&v88 + 1) = v85;
                v142[0] = v88;
                v142[1] = v80;
                double v89 = *((double *)v142 + (v83 & 3));
                if (v87 >= v84)
                {
                  int v91 = v87 - v84;
                  float v92 = v89 + v86[v91];
                  v86[v91] = v92;
                }
                else
                {
                  float v90 = v89;
                  v26[v87] = v90;
                }
                ++v83;
              }
              while (v83 != 3);
              v190[2] = 0;
              *(void *)v190 = 0;
              int v93 = 0;
              if (v84)
              {
                float v94 = v26;
                uint64_t v95 = v84;
                do
                {
                  if (*v94 >= 0.00001) {
                    v190[v93++] = *(_DWORD *)v94;
                  }
                  else {
                    float *v94 = 0.0;
                  }
                  ++v94;
                  --v95;
                }
                while (v95);
              }
              LODWORD(v188.f64[1]) = 0;
              v188.f64[0] = 0.0;
              unint64_t v96 = v185;
              if (v185)
              {
                uint64_t v97 = 0;
                unsigned int v98 = 0;
                float v99 = v176;
                do
                {
                  float v100 = v99[v97];
                  if (v100 >= 0.00001) {
                    *((float *)v188.f64 + v98++) = v100;
                  }
                  else {
                    v99[v97] = 0.0;
                  }
                  ++v97;
                }
                while (v96 > v97);
                double v165 = 0.0;
                if (!v93 && v98 == 1)
                {
                  *(float32x2_t *)v79.i8 = vcvt_f32_f64(vdivq_f64((float64x2_t)xmmword_1901C60D0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt((double)v84) * *(float *)v188.f64), 0)));
                  goto LABEL_79;
                }
                if (v93 || v98 != 2)
                {
                  if (v93 == 1 && v98 == 1)
                  {
                    float v101 = sqrtf((float)((float)v84+ (float)((float)-(float)(*(float *)v190 * (float)v84) * *(float *)v190))+ (float)(*(float *)v190 * *(float *)v190));
                    float v102 = *(float *)v188.f64 * (float)v84;
                    float v103 = (float)-(float)(*(float *)v190 + v101) / v102;
                    *(float *)&double v165 = (float)-(float)(*(float *)v190 - v101) / v102;
                  }
                  else if (v93 == 1 && v98 == 2)
                  {
                    float v104 = *(float *)v190;
                    float v105 = *(float *)v188.f64 * (float)v84;
                    float v106 = *((float *)v188.f64 + 1) * (float)v84;
                    float v107 = sqrtf((float)((float)((float)((float)((float)((float)(*(float *)v188.f64 * v105)+ (float)((float)(*(float *)v188.f64+ *(float *)v188.f64)* *((float *)v188.f64 + 1)))+ (float)(v106 * *((float *)v188.f64 + 1)))+ (float)((float)((float)(v104 * v104) * *(float *)v188.f64)* *(float *)v188.f64))+ (float)((float)((float)(v104 * v104) * *((float *)v188.f64 + 1))* *((float *)v188.f64 + 1)))+ (float)((float)(*(float *)v188.f64* (float)(v104 * (float)-(float)(v104 * (float)v84)))* *(float *)v188.f64))+ (float)((float)(*((float *)v188.f64 + 1)* (float)(v104 * (float)-(float)(v104 * (float)v84)))* *((float *)v188.f64 + 1)));
                    float v108 = (float)((float)((float)(*(float *)v188.f64 + *(float *)v188.f64) * *((float *)v188.f64 + 1))
                                 + (float)(v105 * *(float *)v188.f64))
                         + (float)(v106 * *((float *)v188.f64 + 1));
                    float v109 = (float)-(float)((float)(v107 + (float)(v104 * *(float *)v188.f64))
                                         + (float)(v104 * *((float *)v188.f64 + 1)))
                         / v108;
                    float v103 = (float)-(float)((float)(*(float *)v190 * *((float *)v188.f64 + 1))
                                         - (float)(v107 - (float)(*(float *)v190 * *(float *)v188.f64)))
                         / v108;
                    *(float *)&double v165 = v109;
                  }
                  else
                  {
                    if (v93 != 2 || v98 != 1) {
                      goto LABEL_90;
                    }
                    float v110 = sqrtf((float)((float)((float)((float)((float)v84+ (float)((float)(*(float *)v190 + *(float *)v190)* *(float *)&v190[1]))+ (float)((float)-(float)(*(float *)v190 * (float)v84)* *(float *)v190))+ (float)((float)-(float)(*(float *)&v190[1] * (float)v84)* *(float *)&v190[1]))+ (float)(*(float *)v190 * *(float *)v190))+ (float)(*(float *)&v190[1] * *(float *)&v190[1]));
                    float v111 = *(float *)v188.f64 * (float)v84;
                    float v112 = (float)-(float)((float)(*(float *)v190 + *(float *)&v190[1]) - v110) / v111;
                    float v103 = (float)-(float)((float)(*(float *)v190 + *(float *)&v190[1]) + v110) / v111;
                    *(float *)&double v165 = v112;
                  }
                  *((float *)&v165 + 1) = v103;
                }
                else
                {
                  *(float *)v79.i32 = sqrtf((float)((float)((float)((float)(*(float *)v188.f64* (float)(*(float *)v188.f64* (float)v84))+ (float)((float)(*(float *)v188.f64 + *(float *)v188.f64)* *((float *)v188.f64 + 1)))+ (float)((float)(*((float *)v188.f64 + 1)* (float)v84)* *((float *)v188.f64 + 1)))+ (float)(*(float *)v188.f64 * *(float *)v188.f64))+ (float)(*((float *)v188.f64 + 1) * *((float *)v188.f64 + 1)));
                  *(float32x2_t *)v79.i8 = vdiv_f32((float32x2_t)0xBF8000003F800000, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 0));
LABEL_79:
                  double v165 = *(double *)v79.i64;
                }
              }
              else
              {
                double v165 = 0.0;
              }
LABEL_90:
              LODWORD(v164) = 0;
              vDSP_maxv((const float *)&v165, 1, (float *)&v164, 2uLL);
              if (*(_DWORD *)buf)
              {
                uint64_t v113 = 0;
                unsigned int v114 = v184;
                uint64_t v115 = v178;
                float v116 = v176;
                uint64_t v117 = v175;
                do
                {
                  unsigned int v118 = v49[v113];
                  BOOL v119 = v118 >= v114;
                  uint64_t v120 = v118 - v114;
                  if (v119)
                  {
                    uint64_t v121 = *(void *)(v115 + 24 * v120);
                    uint64_t v122 = *(void *)(v115 + 24 * v120 + 8);
                    uint64_t v123 = v122 - v121;
                    if (v122 != v121)
                    {
                      uint64_t v124 = 0;
                      unint64_t v125 = v123 >> 2;
                      do
                      {
                        v26[*(unsigned int *)(v121 + 4 * v124)] = v26[*(unsigned int *)(v121 + 4 * v124)]
                                                                + (float)((float)(v116[v120] / (float)v125)
                                                                        / *(float *)(v117 + 4 * v120));
                        ++v124;
                      }
                      while (v125 > v124);
                    }
                  }
                  ++v113;
                }
                while (v113 != 3);
              }
              else
              {
                float v163 = 0.0;
                vDSP_sve(v176, 1, &v163, v185);
                float v163 = *(float *)&v164 * v163;
                vDSP_vsadd(v26, 1, &v163, v26, 1, v184);
                unsigned int v114 = v184;
              }
              float v163 = 0.0;
              vDSP_svesq(v26, 1, &v163, v114);
              float v163 = 1.0 / sqrtf(v163);
              vDSP_vsmul(v26, 1, &v163, v26, 1, v184);
              goto LABEL_42;
            }
          }
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v190[0] = 136315906;
        *(void *)&v190[1] = "VBAP.cpp";
        LOWORD(v190[3]) = 1024;
        *(_DWORD *)((char *)&v190[3] + 2) = 349;
        HIWORD(v190[4]) = 2080;
        *(void *)&v190[5] = "triangleLookup";
        __int16 v191 = 1024;
        int v192 = 349;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup error",
          (uint8_t *)v190,
          0x22u);
      }
      uint64_t v134 = 4294964151;
      uint64_t v8 = v37;
      goto LABEL_117;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v190[0] = 136315906;
      *(void *)&v190[1] = "VBAP.cpp";
      LOWORD(v190[3]) = 1024;
      *(_DWORD *)((char *)&v190[3] + 2) = 322;
      HIWORD(v190[4]) = 2080;
      *(void *)&v190[5] = "triangleLookup";
      __int16 v191 = 1024;
      int v192 = 322;
      uint64_t v136 = MEMORY[0x1E4F14500];
      uint64_t v137 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup error";
      goto LABEL_149;
    }
LABEL_150:
    uint64_t v134 = 4294967246;
  }
  else
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_150;
    }
    v190[0] = 136315906;
    *(void *)&v190[1] = "VBAP.cpp";
    LOWORD(v190[3]) = 1024;
    *(_DWORD *)((char *)&v190[3] + 2) = 316;
    HIWORD(v190[4]) = 2080;
    *(void *)&v190[5] = "triangleLookup";
    __int16 v191 = 1024;
    int v192 = 316;
    uint64_t v136 = MEMORY[0x1E4F14500];
    uint64_t v137 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; VBAP object not initialized";
LABEL_149:
    _os_log_impl(&dword_18FEC0000, v136, OS_LOG_TYPE_ERROR, v137, (uint8_t *)v190, 0x22u);
    uint64_t v134 = 4294967246;
  }
LABEL_117:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    v190[0] = 136315906;
    *(void *)&v190[1] = "VBAP.cpp";
    LOWORD(v190[3]) = 1024;
    *(_DWORD *)((char *)&v190[3] + 2) = 619;
    HIWORD(v190[4]) = 2080;
    *(void *)&v190[5] = "calculateVBAPGains";
    __int16 v191 = 1024;
    int v192 = 619;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup failed",
      (uint8_t *)v190,
      0x22u);
  }
LABEL_128:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    v190[0] = 136315906;
    *(void *)&v190[1] = "HOA.cpp";
    LOWORD(v190[3]) = 1024;
    *(_DWORD *)((char *)&v190[3] + 2) = 863;
    HIWORD(v190[4]) = 2080;
    *(void *)&v190[5] = "createALLRAD";
    __int16 v191 = 1024;
    int v192 = 863;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; VBAP calculation error",
      (uint8_t *)v190,
      0x22u);
  }
LABEL_130:
  if (v162[0])
  {
    v162[1] = v162[0];
    operator delete(v162[0]);
  }
  if (v150[0])
  {
    v150[1] = v150[0];
    operator delete(v150[0]);
  }
  if (v152[0])
  {
    v152[1] = v152[0];
    operator delete(v152[0]);
  }
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  VBAP::~VBAP((VBAP *)buf);
  unsigned int v129 = *a1;
LABEL_143:
  if (a1[1] != v129)
  {
    unint64_t v135 = a1[5] * a1[3];
    *(_DWORD *)int buf = 0;
    std::vector<float>::resize(v8, v135, buf);
  }
  return v134;
}

void sub_18FFFF254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  double v71 = *(void **)(v69 - 176);
  if (v71)
  {
    *(void *)(v69 - 168) = v71;
    operator delete(v71);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a48) {
    operator delete(a48);
  }
  if (a51) {
    operator delete(a51);
  }
  if (a54) {
    operator delete(a54);
  }
  VBAP::~VBAP((VBAP *)&a69);
  _Unwind_Resume(a1);
}

void std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::__list_imp<ID3FrameInfo>::clear(v4);
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  unsigned int v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    unint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      uint64_t v23 = &v5[4 * (a2 - v7)];
      uint64_t v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)unsigned int v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v12);
      uint64_t v15 = &v13[4 * v7];
      float v16 = &v13[4 * a2];
      uint64_t v17 = 4 * a2 - 4 * v7;
      __float2 v18 = v15;
      do
      {
        *(_DWORD *)__float2 v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      __float2 v19 = &v13[4 * v14];
      int v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 4)
      {
        int v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void *audioipc::current_render_context(audioipc *this)
{
  uint64_t v1 = audioipc::tlsRenderThreadState();
  uint64_t v2 = mach_absolute_time();
  if (v2 > *(void *)(v1 + 8) || (int base_priority = *(_DWORD *)v1) == 0)
  {
    unint64_t v7 = (caulk::mach::thread *)pthread_self();
    int base_priority = caulk::mach::thread::get_base_priority(v7, v8);
    *(_DWORD *)uint64_t v1 = base_priority;
    *(void *)(v1 + 8) = v2 + 480000;
  }
  if (base_priority < 96) {
    return (void *)base_priority;
  }
  uint64_t v4 = (void *)os_workgroup_interval_copy_current_4AudioToolbox();
  if (!v4) {
    return (void *)base_priority;
  }
  unsigned int v5 = v4;
  os_release(v4);
  return v5;
}

void gsl::narrowing_error::~narrowing_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x192FC8940);
}

uint64_t audioipc::SharedAudioBuffers::Element::Element(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
    uint64_t v6 = *((unsigned int *)a2 + 7);
  }
  else {
    uint64_t v6 = 1;
  }
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 48), (16 * v6) | 8, &__x);
  **(_DWORD **)(a1 + 48) = v6;
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
    uint64_t v7 = *((unsigned int *)a2 + 7);
  }
  else {
    uint64_t v7 = 1;
  }
  std::vector<char>::value_type v10 = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 72), (16 * v7) | 8, &v10);
  **(_DWORD **)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_18FFFF6A8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<audioipc::SharedAudioBuffers::Element>>(unint64_t a1)
{
  if (a1 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 7);
}

uint64_t *std::vector<audioipc::SharedAudioBuffers::Element>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 128);
      long long v9 = *(_OWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_OWORD *)(v6 - 96) = v9;
      *(_OWORD *)(v6 - 128) = v8;
      *(void *)(v6 - 72) = 0;
      *(void *)(v6 - 64) = 0;
      *(void *)(v6 - 80) = 0;
      *(_OWORD *)(v6 - 80) = *(_OWORD *)(v2 + v5 - 80);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 48) = 0;
      *(void *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      long long v10 = *(_OWORD *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 16) = v10;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  *uint64_t result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<audioipc::SharedAudioBuffers::Element>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    std::__destroy_at[abi:ne180100]<audioipc::SharedAudioBuffers::Element,0>((void *)(i - 128));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t audioipc::eventlink_primitive::timed_wait_or_error(audioipc::eventlink_primitive *this, double a2)
{
  os_retain(this);
  int v3 = os_eventlink_wait_until();
  if (v3)
  {
    if (v3 == 60) {
      uint64_t v4 = 0x100000000;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v3 == 60) {
      unsigned __int8 v5 = 0;
    }
    else {
      unsigned __int8 v5 = v3;
    }
    if (v3 == 60) {
      unsigned int v6 = 0;
    }
    else {
      unsigned int v6 = v3 & 0xFFFFFF00;
    }
  }
  else
  {
    unsigned int v6 = 0;
    unsigned __int8 v5 = 0;
    uint64_t v4 = 0x100000000;
  }
  os_release(this);
  return v4 | v6 | v5;
}

void sub_18FFFF8A8(_Unwind_Exception *a1)
{
  os_release(v1);
  _Unwind_Resume(a1);
}

uint64_t audioipc::eventlink_primitive::timed_wait_signal_or_error(audioipc::eventlink_primitive *this, double a2)
{
  os_retain(this);
  int v3 = os_eventlink_signal_and_wait_until();
  unsigned __int8 v4 = v3;
  if (v3)
  {
    if (v3 != 60)
    {
      uint64_t v6 = 0;
      unsigned int v5 = v3 & 0xFFFFFF00;
      goto LABEL_7;
    }
    unsigned __int8 v4 = 0;
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    unsigned __int8 v4 = 0;
  }
  uint64_t v6 = 0x100000000;
LABEL_7:
  os_release(this);
  return v6 | v5 | v4;
}

void sub_18FFFF978(_Unwind_Exception *a1)
{
  os_release(v1);
  _Unwind_Resume(a1);
}

unint64_t audioipc::eventlink_primitive::wait_signal_or_error(audioipc::eventlink_primitive *this)
{
  os_retain(this);
  unsigned int v2 = os_eventlink_signal_and_wait();
  os_release(this);
  return v2 | ((unint64_t)(v2 == 0) << 32);
}

void sub_18FFFF9EC(_Unwind_Exception *a1)
{
  os_release(v1);
  _Unwind_Resume(a1);
}

unint64_t audioipc::eventlink_primitive::wait_or_error(audioipc::eventlink_primitive *this)
{
  os_retain(this);
  unsigned int v2 = os_eventlink_wait();
  os_release(this);
  return v2 | ((unint64_t)(v2 == 0) << 32);
}

void sub_18FFFFA60(_Unwind_Exception *a1)
{
  os_release(v1);
  _Unwind_Resume(a1);
}

uint64_t AMRAudioFile::ScanForPackets(AMRAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  unsigned __int8 v4 = a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)&v26.UInt32 mVariableFramesInPacket = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  if (!a3) {
    unsigned __int8 v4 = (DataSource *)*((void *)this + 13);
  }
  if (*((unsigned char *)this + 140)) {
    return 0;
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 15);
  if (!v6) {
    operator new();
  }
  uint64_t v7 = v6[3];
  if (a2 == -1)
  {
    uint64_t v8 = -1;
  }
  else
  {
    uint64_t v8 = a2 - v7;
    if (a2 <= v7) {
      return 0;
    }
  }
  if (*((unsigned char *)this + 140)) {
    return 0;
  }
  unsigned int v10 = (*(uint64_t (**)(DataSource *, uint64_t *))(*(void *)v4 + 24))(v4, &v27);
  if (!v10)
  {
    if (v7)
    {
      uint64_t v11 = *((void *)this + 9);
      uint64_t v12 = v7 - 1;
      CompressedPacketTable::operator[]((uint64_t)buf, v6, v7 - 1);
      uint64_t v13 = *(void *)buf;
      CompressedPacketTable::operator[]((uint64_t)v23, v6, v12);
      uint64_t v14 = v13 + v11 + v24;
    }
    else
    {
      (*(void (**)(AMRAudioFile *, void))(*(void *)this + 648))(this, 0);
      uint64_t v14 = *((void *)this + 9);
    }
    unsigned int v10 = 0;
    char v15 = a4;
    while (1)
    {
      v26.mStartOffset = v14 - *((void *)this + 9);
      v26.mDataByteSize = 0;
      if (*((_DWORD *)this + 36))
      {
        uint64_t v16 = 0;
        unsigned int v17 = 0;
        while (1)
        {
          buf[0] = 0;
          unsigned int v10 = (*(uint64_t (**)(DataSource *, void, uint64_t, uint64_t, unsigned char *, int *))(*(void *)v4 + 48))(v4, 0, v14, 1, buf, &v25);
          if (v10) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = v25 == 1;
          }
          if (!v18) {
            goto LABEL_40;
          }
          __float2 v19 = (__int16 *)(*((unsigned char *)this + 152) ? &_AMR_WB_FRAMESIZE : &_AMR_NB_FRAMESIZE);
          unsigned int v20 = v19[((unint64_t)buf[0] >> 3) & 0xF];
          if (!v20) {
            break;
          }
          v14 += v20;
          if (v14 > v27) {
            break;
          }
          uint64_t v16 = v16 + v20;
          ++v17;
          if (v14 == v27)
          {
            unsigned int v10 = 0;
            v26.mDataByteSize = v16;
            *((_DWORD *)this + 37) = 160 * v17;
            goto LABEL_42;
          }
          if (v17 >= *((_DWORD *)this + 36))
          {
            unsigned int v10 = 0;
            int v21 = 0;
            v26.mDataByteSize = v16;
            char v15 = a4;
            if ((a4 & 1) == 0) {
              goto LABEL_35;
            }
            goto LABEL_43;
          }
        }
        unsigned int v10 = 0;
LABEL_40:
        v26.mDataByteSize = v16;
LABEL_42:
        char v15 = a4;
        *((unsigned char *)this + 140) = a4;
        int v21 = 1;
        if ((a4 & 1) == 0)
        {
LABEL_35:
          if (v17 == *((_DWORD *)this + 36)) {
            goto LABEL_44;
          }
          goto LABEL_50;
        }
LABEL_43:
        if (!v17) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v16 = 0;
        int v21 = 0;
        if (v15)
        {
          int v21 = 0;
          goto LABEL_50;
        }
      }
LABEL_44:
      if (v16 > (*(unsigned int (**)(AMRAudioFile *))(*(void *)this + 632))(this)) {
        (*(void (**)(AMRAudioFile *, uint64_t))(*(void *)this + 648))(this, v16);
      }
      AudioFileObject::AppendPacket(this, &v26);
      if (v8 == -1) {
        uint64_t v8 = -1;
      }
      else {
        --v8;
      }
      char v15 = a4;
      if (!v8) {
        goto LABEL_51;
      }
LABEL_50:
      if (v21) {
        goto LABEL_51;
      }
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
    __int16 v29 = 1024;
    int v30 = 568;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
  }
LABEL_51:
  if ((v10 & 0xFFFFFFFE) == 0xFFFFFFD8) {
    return 0;
  }
  else {
    return v10;
  }
}

BOOL AMRAudioFile::IsDataFormatSupported(AMRAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID = a2->mFormatID;
  return mFormatID == 1935764850 || mFormatID == 1935767394;
}

uint64_t AMRAudioFile::GetEstimatedDuration(AMRAudioFile *this, double *a2)
{
  double v4 = *((double *)this + 3);
  uint64_t v5 = *((unsigned int *)this + 11);
  if (*((unsigned char *)this + 140))
  {
    uint64_t v6 = 0;
    double v7 = (double)(*((unsigned int *)this + 37)
                + ((*(uint64_t (**)(AMRAudioFile *))(*(void *)this + 240))(this) - 1) * v5);
LABEL_3:
    *a2 = v7 / v4;
    return v6;
  }
  *a2 = 0.0;
  if ((*(unsigned int (**)(AMRAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, 1, 0, 1))
  {
    return 0;
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 15);
  if (!v8) {
    operator new();
  }
  uint64_t v16 = 0;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v16);
  if (!v6)
  {
    v16 -= *((void *)this + 9);
    uint64_t v10 = *((void *)this + 15);
    if (v10) {
      uint64_t v11 = *(void *)(v10 + 24);
    }
    else {
      uint64_t v11 = 0;
    }
    CompressedPacketTable::operator[]((uint64_t)v15, v8, v11 - 1);
    uint64_t v12 = v15[0];
    CompressedPacketTable::operator[]((uint64_t)v13, v8, v11 - 1);
    double v7 = (double)v16 / (double)(v12 + v14) * (double)(unint64_t)(v11 * v5);
    goto LABEL_3;
  }
  return v6;
}

uint64_t AudioFileObject::GetLoudnessInfo(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AMRAudioFile::GetInfoDictionary(AMRAudioFile *this, CACFDictionary *a2)
{
  double v5 = 0.0;
  int v3 = (AudioFileObject *)(*(uint64_t (**)(AMRAudioFile *, double *))(*(void *)this + 544))(this, &v5);
  if (v3) {
    return 1886681407;
  }
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

uint64_t AMRAudioFile::SetMagicCookieData(AMRAudioFile *this, UInt32 a2, const void *a3)
{
  uint64_t v4 = 1718449215;
  long long v5 = *(_OWORD *)((char *)this + 40);
  long long outPropertyData = *(_OWORD *)((char *)this + 24);
  long long v13 = v5;
  uint64_t v14 = *((void *)this + 7);
  UInt32 ioPropertyDataSize = 40;
  AudioFormatGetProperty(0x666D7469u, a2, a3, &ioPropertyDataSize, &outPropertyData);
  int v6 = *((_DWORD *)this + 36);
  unsigned int v7 = DWORD1(v13);
  if (!v6 || (*((unsigned char *)this + 152) ? (unsigned int v8 = 320) : (unsigned int v8 = 160), v6 == DWORD1(v13) / v8))
  {
    if (*((unsigned char *)this + 152)) {
      unsigned int v9 = 320;
    }
    else {
      unsigned int v9 = 160;
    }
    *((_DWORD *)this + 36) = DWORD1(v13) / v9;
    if (v9 <= v7) {
      return 0;
    }
    else {
      return 1718449215;
    }
  }
  return v4;
}

double AMRAudioFile::GetMagicCookieData(AMRAudioFile *this, unsigned int *a2, char *a3)
{
  if (*a2 >= 0x2F)
  {
    BOOL v3 = *((unsigned char *)this + 152) == 0;
    *(void *)a3 = 0x616D72660C000000;
    if (v3) {
      int v4 = 1919770995;
    }
    else {
      int v4 = 1651990899;
    }
    *((_DWORD *)a3 + 2) = v4;
    if (v3) {
      __int16 v5 = -127;
    }
    else {
      __int16 v5 = -125;
    }
    *(void *)(a3 + 12) = 0x61646E650A000000;
    *((_WORD *)a3 + 10) = 0;
    *(void *)(a3 + 22) = 0x726D616411000000;
    *(_DWORD *)(a3 + 30) = 1819308129;
    a3[34] = 1;
    *(_WORD *)(a3 + 35) = v5;
    *(_WORD *)(a3 + 37) = 3840;
    *(void *)&double result = 0x8000000;
    *(void *)(a3 + 39) = 0x8000000;
    *a2 = 47;
  }
  return result;
}

uint64_t AMRAudioFile::GetMagicCookieDataSize(AMRAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 1;
  }
  if (a2) {
    *a2 = 47;
  }
  return 0;
}

uint64_t AMRAudioFile::GetNumPackets(AMRAudioFile *this)
{
  if ((*((unsigned char *)this + 100) & 2) != 0 && *((_DWORD *)this + 10))
  {
    unsigned int v2 = (char *)this + 16;
    return *(void *)v2;
  }
  if (*((unsigned char *)this + 140)
    || (int v5 = (*(uint64_t (**)(AMRAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1), result = 0, !v5))
  {
    uint64_t v3 = *((void *)this + 15);
    if (v3)
    {
      unsigned int v2 = (char *)(v3 + 24);
      return *(void *)v2;
    }
    return 0;
  }
  return result;
}

uint64_t AMRAudioFile::GetNumBytes(AMRAudioFile *this)
{
  if ((*((unsigned char *)this + 100) & 2) != 0 && *((_DWORD *)this + 10)) {
    return *((void *)this + 1);
  }
  uint64_t v3 = 0;
  (*(void (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v3);
  return v3 - *((void *)this + 9);
}

uint64_t AMRAudioFile::UpdateSize(AMRAudioFile *this)
{
  return 0;
}

uint64_t AMRAudioFile::WritePackets(AMRAudioFile *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 10))
  {
    if (!*((_DWORD *)this + 36))
    {
      uint64_t v14 = 2003334207;
      unsigned int v15 = *((_DWORD *)this + 11);
      if (!v15)
      {
        uint64_t mDataByteSize = a4->mDataByteSize;
        if (mDataByteSize)
        {
          int v17 = 0;
          AudioStreamPacketDescription v26 = (unsigned __int8 *)&a7[mDataByteSize];
          if (*((unsigned char *)this + 152)) {
            uint64_t v27 = (__int16 *)&_AMR_WB_FRAMESIZE;
          }
          else {
            uint64_t v27 = (__int16 *)&_AMR_NB_FRAMESIZE;
          }
          float64x2_t v28 = (unsigned __int8 *)a7;
          while (v27[((unint64_t)*v28 >> 3) & 0xF])
          {
            ++v17;
            v28 += v27[((unint64_t)*v28 >> 3) & 0xF];
            if (v28 >= v26) {
              goto LABEL_11;
            }
          }
        }
        *((_DWORD *)this + 36) = 0;
        return v14;
      }
      unsigned int v16 = *((unsigned char *)this + 152) ? 320 : 160;
      int v17 = v15 / v16;
LABEL_11:
      *((_DWORD *)this + 36) = v17;
      if (!v17) {
        return v14;
      }
    }
    if (a6)
    {
      if (*a6)
      {
        int v38 = 0;
        v37.mStartOffset = 0;
        *(void *)&v37.UInt32 mVariableFramesInPacket = 0;
        (*(void (**)(AMRAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
        BOOL v18 = (uint64_t *)*((void *)this + 15);
        if (v18)
        {
          if (v18[3] == a5)
          {
            if (!a4)
            {
              uint64_t v14 = 1885563711;
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136315394;
                *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
                LOWORD(v40[0]) = 1024;
                *(_DWORD *)((char *)v40 + 2) = 890;
                __int16 v29 = MEMORY[0x1E4F14500];
                int v30 = "%25s:%-5d  Packet Descriptions were not provided";
LABEL_45:
                _os_log_impl(&dword_18FEC0000, v29, OS_LOG_TYPE_ERROR, v30, buf, 0x12u);
              }
              return v14;
            }
            uint64_t v19 = *((void *)this + 9);
            uint64_t v20 = v18[3];
            if (v20)
            {
              CompressedPacketTable::operator[]((uint64_t)buf, v18, v20 - 1);
              uint64_t v21 = *((void *)this + 15);
              if (v21) {
                uint64_t v22 = *(void *)(v21 + 24) - 1;
              }
              else {
                uint64_t v22 = -1;
              }
              uint64_t v31 = *(void *)buf;
              CompressedPacketTable::operator[]((uint64_t)v36, v18, v22);
              uint64_t v20 = v31 + v36[3];
            }
            uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *, int *))(**((void **)this + 13)
                                                                                             + 56))(*((void *)this + 13), 0, v20 + v19, a3, a7, &v38);
            if (v14)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136315394;
                *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
                LOWORD(v40[0]) = 1024;
                *(_DWORD *)((char *)v40 + 2) = 896;
                __int16 v29 = MEMORY[0x1E4F14500];
                int v30 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
                goto LABEL_45;
              }
              return v14;
            }
            if (*a6)
            {
              unint64_t v32 = 0;
              p_uint64_t mDataByteSize = &a4->mDataByteSize;
              do
              {
                SInt64 v34 = *((void *)this + 15);
                if (v34)
                {
                  SInt64 v34 = *(void *)(v34 + 24);
                  if (v34)
                  {
                    CompressedPacketTable::operator[]((uint64_t)buf, v18, v34 - 1);
                    SInt64 v34 = *(void *)buf + v40[0];
                  }
                }
                v37.mStartOffset = v34;
                UInt32 v35 = *p_mDataByteSize;
                v37.UInt32 mVariableFramesInPacket = 0;
                v37.uint64_t mDataByteSize = v35;
                AudioFileObject::AppendPacket(this, &v37);
                ++v32;
                p_mDataByteSize += 4;
              }
              while (v32 < *a6);
            }
            return 0;
          }
        }
        else if (!a5)
        {
          operator new();
        }
        return 1885563711;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
      LOWORD(v40[0]) = 1024;
      *(_DWORD *)((char *)v40 + 2) = 875;
      uint64_t v23 = MEMORY[0x1E4F14500];
      unsigned int v24 = "%25s:%-5d  WritePackets Failed - *ioNumPackets == 0";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
      LOWORD(v40[0]) = 1024;
      *(_DWORD *)((char *)v40 + 2) = 874;
      uint64_t v23 = MEMORY[0x1E4F14500];
      unsigned int v24 = "%25s:%-5d  WritePackets Failed - ioNumPackets == NULL";
    }
    _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
    return 0;
  }
  return AudioFileObject::WritePackets(this, a2, a3, a4, a5, a6, a7);
}

uint64_t AMRAudioFile::ReadPackets(AMRAudioFile *this, unsigned int a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a4) {
    BOOL v7 = a7 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (a6)
  {
    uint64_t v10 = *a6;
    if (v10)
    {
      if (a5 < 0)
      {
        uint64_t v18 = 2003334207;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return v18;
        }
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
        LOWORD(v41[0]) = 1024;
        *(_DWORD *)((char *)v41 + 2) = 744;
        uint64_t v19 = MEMORY[0x1E4F14500];
        uint64_t v20 = "%25s:%-5d  invalid starting packet parameter";
        goto LABEL_15;
      }
      uint64_t v17 = (*(uint64_t (**)(AMRAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, v10 + a5, 0, 1);
      if (v17)
      {
        uint64_t v18 = v17;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
          LOWORD(v41[0]) = 1024;
          *(_DWORD *)((char *)v41 + 2) = 748;
          uint64_t v19 = MEMORY[0x1E4F14500];
          uint64_t v20 = "%25s:%-5d  ScanForPackets (AMR) failed";
LABEL_15:
          _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
          return v18;
        }
        return v18;
      }
      uint64_t v22 = (uint64_t *)*((void *)this + 15);
      if (!v22) {
        return 1685348671;
      }
      unsigned int v39 = 0;
      uint64_t v23 = v22[3];
      if (a3) {
        *a3 = 0;
      }
      uint64_t v24 = *a6;
      if (v24 + a5 > v23)
      {
        LODWORD(v24) = v23 - a5;
        *a6 = v23 - a5;
      }
      if (!v24)
      {
        if (a3) {
          *a3 = 0;
        }
        return 4294967257;
      }
      AudioStreamPacketDescription v37 = a3;
      CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
      uint64_t v38 = *(void *)buf;
      int v25 = *a6;
      if (v8)
      {
        if (v25)
        {
          unint64_t v26 = 0;
          p_UInt32 mVariableFramesInPacket = &a4->mVariableFramesInPacket;
          do
          {
            CompressedPacketTable::operator[]((uint64_t)buf, v22, a5 + v26);
            UInt32 v28 = v41[0];
            *((void *)p_mVariableFramesInPacket - 1) = *(void *)buf - v38;
            *p_UInt32 mVariableFramesInPacket = 0;
            p_mVariableFramesInPacket[1] = v28;
            p_mVariableFramesInPacket += 4;
            ++v26;
          }
          while (v26 < *a6);
        }
        uint64_t v18 = 0;
        unsigned int v39 = 0;
      }
      else
      {
        if (v25)
        {
          unsigned int v29 = 0;
          unint64_t v30 = 0;
          uint64_t v31 = &a4->mVariableFramesInPacket;
          do
          {
            CompressedPacketTable::operator[]((uint64_t)buf, v22, a5 + v30);
            UInt32 v32 = v41[0];
            v29 += v41[0];
            unsigned int v39 = v29;
            if (a4)
            {
              *((void *)v31 - 1) = *(void *)buf - v38;
              *uint64_t v31 = 0;
              v31[1] = v32;
            }
            ++v30;
            v31 += 4;
          }
          while (v30 < *a6);
        }
        CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
        uint64_t v33 = (*(uint64_t (**)(AMRAudioFile *, void, void, unsigned int *, void *))(*(void *)this + 72))(this, a2, *(void *)buf, &v39, a7);
        uint64_t v18 = v33;
        if (v33 != -39 && v33 != 0)
        {
          BOOL v36 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
          UInt32 v35 = v37;
          if (v36)
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
            LOWORD(v41[0]) = 1024;
            *(_DWORD *)((char *)v41 + 2) = 827;
            _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
          }
          if (v18 != -39) {
            return v18;
          }
LABEL_45:
          if (v35) {
            unsigned int *v35 = v39;
          }
          return v18;
        }
      }
      UInt32 v35 = v37;
      goto LABEL_45;
    }
  }
  uint64_t v18 = 2003334207;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "AMRAudioFile.cpp";
    LOWORD(v41[0]) = 1024;
    *(_DWORD *)((char *)v41 + 2) = 743;
    uint64_t v19 = MEMORY[0x1E4F14500];
    uint64_t v20 = "%25s:%-5d  invalid num packets parameter";
    goto LABEL_15;
  }
  return v18;
}

uint64_t AMRAudioFile::InitializeDataSource(AMRAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v4 = 1718449215;
  AudioFormatID mFormatID = a2->mFormatID;
  if (mFormatID != 1935764850)
  {
    if (mFormatID != 1935767394) {
      return v4;
    }
    *((unsigned char *)this + 152) = 1;
  }
  AMRAudioFile::WriteHeader(this);
  mUInt32 FramesPerPacket = a2->mFramesPerPacket;
  if (!mFramesPerPacket) {
    return 0;
  }
  unsigned int v7 = *((unsigned char *)this + 152) ? 320 : 160;
  *((_DWORD *)this + 36) = mFramesPerPacket / v7;
  if (v7 <= mFramesPerPacket) {
    return 0;
  }
  return v4;
}

void AMRAudioFile::WriteHeader(AMRAudioFile *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = 0;
  if (*((unsigned char *)this + 152))
  {
    char v9 = 10;
    uint64_t v8 = *(void *)"#!AMR-WB\n";
    if ((*(unsigned int (**)(void, void, void, uint64_t, uint64_t *, unsigned int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, 0, 9, &v8, &v3))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_DWORD *)int buf = 136315394;
      int v5 = "AMRAudioFile.cpp";
      __int16 v6 = 1024;
      int v7 = 368;
      unsigned int v2 = MEMORY[0x1E4F14500];
LABEL_8:
      _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d  WriteBytes Failed", buf, 0x12u);
      return;
    }
  }
  else
  {
    qmemcpy(&v8, "#!AMR\n", 6);
    if ((*(unsigned int (**)(void, void, void, uint64_t, uint64_t *, unsigned int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, 0, 6, &v8, &v3))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_DWORD *)int buf = 136315394;
      int v5 = "AMRAudioFile.cpp";
      __int16 v6 = 1024;
      int v7 = 374;
      unsigned int v2 = MEMORY[0x1E4F14500];
      goto LABEL_8;
    }
  }
  *((void *)this + 9) = v3;
}

uint64_t AMRAudioFile::OpenFromDataSource(AMRAudioFile *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 100) & 2) != 0) {
    return 1886547263;
  }
  LODWORD(outPropertyData) = 9;
  (*(void (**)(void, void, void, uint64_t, unsigned char *, uint64_t *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, 0, 9, inSpecifier, &outPropertyData);
  if (*(_DWORD *)inSpecifier != 1296113955 || *(unsigned __int16 *)&inSpecifier[4] != 2642)
  {
    if (*(void *)inSpecifier != 0x42572D524D412123 || inSpecifier[8] != 10)
    {
      uint64_t v4 = 1718449215;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)inSpecifier = 136315394;
        *(void *)&inSpecifier[4] = "AMRAudioFile.cpp";
        *(_WORD *)&inSpecifier[12] = 1024;
        *(_DWORD *)uint64_t v20 = 293;
        int v5 = MEMORY[0x1E4F14500];
        __int16 v6 = "%25s:%-5d  AMRAudioFile::OpenFromDataSource - ReadHeader Failed";
LABEL_30:
        _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, v6, inSpecifier, 0x12u);
        return v4;
      }
      return v4;
    }
    *((unsigned char *)this + 152) = 1;
    uint64_t v8 = (char *)this + 152;
    long long v17 = 0u;
    long long v18 = 0u;
    *((void *)this + 9) = 9;
    LODWORD(v17) = 1935767394;
    uint64_t outPropertyData = 0x40CF400000000000;
    goto LABEL_16;
  }
  uint64_t v8 = (char *)this + 152;
  int v7 = *((unsigned __int8 *)this + 152);
  long long v17 = 0u;
  long long v18 = 0u;
  if (v7)
  {
    *((void *)this + 9) = 9;
    uint64_t outPropertyData = 0x40CF400000000000;
    LODWORD(v17) = 1935767394;
LABEL_16:
    DWORD1(v18) = 1;
    UInt32 ioPropertyDataSize = 40;
    *(void *)inSpecifier = 0x616D72660C000000;
    strcpy(&inSpecifier[8], "sawb");
    inSpecifier[13] = 0;
    *(_WORD *)uint64_t v20 = 2560;
    strcpy(&v20[2], "enda");
    char v21 = 0;
    uint64_t v22 = 0x726D616411000000;
    int v23 = 1819308129;
    __int16 v9 = -125;
    char v24 = 1;
    goto LABEL_18;
  }
  *((void *)this + 9) = 6;
  uint64_t outPropertyData = 0x40BF400000000000;
  LODWORD(v17) = 1935764850;
  DWORD1(v18) = 1;
  UInt32 ioPropertyDataSize = 40;
  *(void *)inSpecifier = 0x616D72660C000000;
  strcpy(&inSpecifier[8], "samr");
  inSpecifier[13] = 0;
  *(_WORD *)uint64_t v20 = 2560;
  strcpy(&v20[2], "enda");
  char v21 = 0;
  uint64_t v22 = 0x726D616411000000;
  int v23 = 1819308129;
  char v24 = 1;
  __int16 v9 = -127;
LABEL_18:
  __int16 v25 = v9;
  __int16 v26 = 3840;
  uint64_t v27 = 0x8000000;
  AudioFormatGetProperty(0x666D7469u, 0x2Fu, inSpecifier, &ioPropertyDataSize, &outPropertyData);
  if (HIDWORD(v17))
  {
    if (*v8) {
      unsigned int v10 = 320;
    }
    else {
      unsigned int v10 = 160;
    }
    int v11 = HIDWORD(v17) / v10;
  }
  else
  {
    if (*v8) {
      int v12 = 4800;
    }
    else {
      int v12 = 2400;
    }
    HIDWORD(v17) = v12;
    int v11 = 15;
  }
  *((_DWORD *)this + 36) = v11;
  uint64_t v4 = (*(uint64_t (**)(AMRAudioFile *, uint64_t *))(*(void *)this + 176))(this, &outPropertyData);
  if (!v4)
  {
    uint64_t v14 = 0;
    (*(void (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v14);
    (*(void (**)(AMRAudioFile *, uint64_t))(*(void *)this + 232))(this, v14 - *((void *)this + 9));
    (*(void (**)(AMRAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, 1, 0, 1);
    return v4;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)inSpecifier = 136315394;
    *(void *)&inSpecifier[4] = "AMRAudioFile.cpp";
    *(_WORD *)&inSpecifier[12] = 1024;
    *(_DWORD *)uint64_t v20 = 296;
    int v5 = MEMORY[0x1E4F14500];
    __int16 v6 = "%25s:%-5d  AMRAudioFile::OpenFromDataSource - ParseHeader Failed";
    goto LABEL_30;
  }
  return v4;
}

uint64_t AMRAudioFile::Create(AMRAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t result = 1718449215;
  AudioFormatID mFormatID = a3->mFormatID;
  if (mFormatID == 1935767394 || mFormatID == 1935764850)
  {
    uint64_t result = AudioFileObject::Create(this, a2, a3);
    if (!result)
    {
      if (a3->mFormatID == 1935767394) {
        *((unsigned char *)this + 152) = 1;
      }
      mUInt32 FramesPerPacket = a3->mFramesPerPacket;
      if (!mFramesPerPacket
        || (*((unsigned char *)this + 152) ? (unsigned int v9 = 320) : (unsigned int v9 = 160),
            *((_DWORD *)this + 36) = mFramesPerPacket / v9,
            uint64_t result = 1718449215,
            v9 <= mFramesPerPacket))
      {
        (*(void (**)(AMRAudioFile *, void))(*(void *)this + 648))(this, a3->mBytesPerFrame);
        AMRAudioFile::WriteHeader(this);
        return 0;
      }
    }
  }
  return result;
}

void AMRAudioFile::~AMRAudioFile(AMRAudioFile *this)
{
  AudioFileObject::~AudioFileObject(this);
  JUMPOUT(0x192FC8940);
}

void AMRAudioFormat::NewStream(AMRAudioFormat *this)
{
}

void AMRAudioFormat::New(AMRAudioFormat *this)
{
}

uint64_t AMRAudioFormat::GetHFSCodes(AMRAudioFormat *this, unsigned int *a2, void *__dst)
{
  long long v6 = xmmword_1901C60E0;
  unsigned int v3 = *a2 >> 2;
  if (v3 >= 4) {
    unsigned int v3 = 4;
  }
  size_t v4 = 4 * v3;
  *a2 = v4;
  if (__dst) {
    memcpy(__dst, &v6, v4);
  }
  return 0;
}

uint64_t AMRAudioFormat::GetAvailableStreamDescriptions(AMRAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  if (a2 == 1935764850 || a2 == 1935767394)
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    DWORD2(v7[0]) = a2;
    if (*a3 >= 0x28) {
      size_t v5 = 40;
    }
    else {
      size_t v5 = 0;
    }
    *a3 = v5;
    if (__dst) {
      memcpy(__dst, v7, v5);
    }
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t AMRAudioFormat::GetAvailableFormatIDs(AMRAudioFormat *this, unsigned int *a2, void *__dst)
{
  uint64_t __src = 0x7361776273616D72;
  unsigned int v3 = *a2 >> 2;
  if (v3 >= 2) {
    unsigned int v3 = 2;
  }
  size_t v4 = 4 * v3;
  *a2 = v4;
  if (__dst) {
    memcpy(__dst, &__src, v4);
  }
  return 0;
}

void AMRAudioFormat::GetFileTypeName(AMRAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  unsigned int v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    unsigned int v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_5:
    CFStringRef v4 = (const __CFString *)CFRetain(@"AMR");
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle) {
    goto LABEL_5;
  }
LABEL_3:
  CFStringRef v4 = CFBundleCopyLocalizedString(v3, @"AMR", @"AMR", @"FileTypeNames");
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_19000186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *AMRAudioFormat::GetMIMETypes(AMRAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"audio/AMR";
  values[1] = @"audio/AMR-WB";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AMRAudioFormat::GetUTIs(AMRAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"org.3gpp.adaptive-multi-rate-audio";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AMRAudioFormat::GetExtensions(AMRAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"amr";
  values[1] = @"awb";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

BOOL AMRAudioFormat::FileDataIsThisFormat(AMRAudioFormat *this, unsigned int a2, char *__s1)
{
  if (a2 < 9) {
    return 0;
  }
  if (!strncmp(__s1, "#!AMR\n", 6uLL)) {
    return 1;
  }
  return strncmp(__s1, "#!AMR-WB\n", 9uLL) == 0;
}

BOOL AMRAudioFormat::ExtensionIsThisFormat(AMRAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3 = 1;
  if (CFStringCompare(theString1, @"amr", 1uLL)) {
    return CFStringCompare(theString1, @"awb", 1uLL) == kCFCompareEqualTo;
  }
  return v3;
}

void AMRAudioFormat::~AMRAudioFormat(AMRAudioFormat *this)
{
}

BOOL KeyIsValid(const __CFString *a1)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, @"main loudness parameters");
    CFArrayAppendValue(v3, @"sound check info");
    CFArrayAppendValue(v3, @"additional loudness parameters");
    CFArrayAppendValue(v3, @"dialogue anchor parameters");
  }
  CFIndex v4 = 0;
  do
  {
    CFIndex v5 = v4;
    CFIndex Count = CFArrayGetCount(v3);
    if (v5 >= Count) {
      break;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(v3, v5);
    int v8 = CFEqual(a1, ValueAtIndex);
    CFIndex v4 = v5 + 1;
  }
  while (!v8);
  if (v3) {
    CFRelease(v3);
  }
  return v5 < Count;
}

uint64_t RemoveKeyFromList(CFArrayRef theArray, const __CFString *a2)
{
  while (1)
  {
    v5.length = CFArrayGetCount(theArray);
    v5.location = 0;
    uint64_t result = CFArrayGetFirstIndexOfValue(theArray, v5, a2);
    if (result == -1) {
      break;
    }
    CFArrayRemoveValueAtIndex(theArray, result);
  }
  return result;
}

uint64_t ___ZN11APComponent11newInstanceEjbU13block_pointerFvP28OpaqueAudioComponentInstanceiE_block_invoke(void *a1, uint64_t a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    CFRange v5 = (const AudioClassDescription *)a1[5];
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    int v8 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      to_string(v5 + 3, &__p);
      unsigned int v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315906;
      uint64_t v14 = "APComponent.mm";
      __int16 v15 = 1024;
      int v16 = 355;
      __int16 v17 = 1024;
      int v18 = a3;
      __int16 v19 = 2080;
      uint64_t v20 = v10;
      _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d returned from OpenAsync for %s", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = a1[6];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    return (*(uint64_t (**)(void))(a1[4] + 16))();
  }
  else
  {
    long long v6 = *(uint64_t (**)(void))(a1[4] + 16);
    return v6();
  }
}

void sub_190001E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioComponentLogCategory(void)
{
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  return gAudioComponentLogCategory;
}

RenderContextChangeGenerator *std::optional<RenderContextChangeGenerator>::emplace[abi:ne180100]<void({block_pointer} {__strong}&)(AudioUnitRenderContext const*),void>(RenderContextChangeGenerator *this, void **a2)
{
  if (LOBYTE(this[1].mLastWorkgroup))
  {
    RenderContextChangeGenerator::~RenderContextChangeGenerator(this);
    LOBYTE(this[1].mLastWorkgroup) = 0;
  }
  CFIndex v4 = *a2;
  this->mLastWorkgroup = 0;
  if (v4) {
    CFIndex v4 = _Block_copy(v4);
  }
  this->mObserver = v4;
  LOBYTE(this[1].mLastWorkgroup) = 1;
  return this;
}

uint64_t APComponent_FromBundle_Loadable::ResolveFactoryFunction(APComponent_FromBundle_Loadable *this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  CFErrorRef error = 0;
  unsigned int v2 = (__CFBundle *)*((void *)this + 24);
  if (!v2)
  {
    CFStringRef v6 = (const __CFString *)*((void *)this + 20);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
    CFURLRef v7 = CFURLCreateWithFileSystemPath(0, v6, kCFURLPOSIXPathStyle, 1u);
    *(void *)int buf = v7;
    CFBundleRef v8 = CFBundleCreate(0, v7);
    unsigned int v9 = (const void *)*((void *)this + 24);
    *((void *)this + 24) = v8;
    if (v9) {
      CFRelease(v9);
    }
    if (v7) {
      CFRelease(v7);
    }
    unsigned int v2 = (__CFBundle *)*((void *)this + 24);
    if (!v2) {
      return 0xFFFFFFFFLL;
    }
  }
  if (!CFBundleLoadExecutableAndReturnError(v2, &error))
  {
    unsigned int v10 = error;
    if (error)
    {
      CFStringRef v11 = CFErrorCopyDescription(error);
      unsigned int v10 = error;
    }
    else
    {
      CFStringRef v11 = 0;
    }
    CFDictionaryRef v20 = CFErrorCopyUserInfo(v10);
    CFDictionaryRef v21 = v20;
    if (v20) {
      CFNumberRef Value = CFDictionaryGetValue(v20, @"NSDebugDescription");
    }
    else {
      CFNumberRef Value = 0;
    }
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    int v23 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *((void *)this + 24);
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "APComponent.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 891;
      __int16 v34 = 2112;
      *(void *)UInt32 v35 = v25;
      *(_WORD *)&v35[8] = 2112;
      *(void *)&v35[10] = v11;
      __int16 v36 = 2112;
      AudioStreamPacketDescription v37 = Value;
      _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d %@: cannot load bundle: %@ (%@)", buf, 0x30u);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (error) {
      CFRelease(error);
    }
    return 0xFFFFFFFFLL;
  }
  CFStringRef v3 = (const __CFString *)*((void *)this + 22);
  if (v3)
  {
    FunctionPointerForName = CFBundleGetFunctionPointerForName(*((CFBundleRef *)this + 24), v3);
    CFRange v5 = FunctionPointerForName;
    *(void *)&v35[4] = 0;
    if (FunctionPointerForName)
    {
      *(void *)int buf = &unk_1EDF9E440;
      *(void *)&uint8_t buf[8] = FunctionPointerForName;
      *(void *)&v35[4] = buf;
    }
    std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::swap[abi:ne180100](buf, (void *)this + 10);
    std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__value_func[abi:ne180100](buf);
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    int v16 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *((void *)this + 24);
      uint64_t v19 = *((void *)this + 22);
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "APComponent.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 916;
      __int16 v34 = 2112;
      *(void *)UInt32 v35 = v18;
      *(_WORD *)&v35[8] = 2112;
      *(void *)&v35[10] = v19;
      __int16 v36 = 2048;
      AudioStreamPacketDescription v37 = v5;
      _os_log_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d %@ %@ -> %p", buf, 0x30u);
    }
  }
  else
  {
    int v12 = (void *)*((void *)this + 23);
    if (v12)
    {
      long long v13 = v12;
      uint64_t v14 = NSClassFromString(v13);

      if (v14)
      {
        *((void *)this + 25) = v14;
        id v15 = v14;
        *(void *)int buf = &unk_1EDFA0D08;
        *(void *)&uint8_t buf[8] = v15;
        *(void *)&v35[4] = buf;
        std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::swap[abi:ne180100](buf, (void *)this + 10);
        std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__value_func[abi:ne180100](buf);
      }
      else
      {
        if (!gAudioComponentLogCategory) {
          operator new();
        }
        uint64_t v27 = *(id *)gAudioComponentLogCategory;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *((void *)this + 24);
          CAFormatter::CAFormatter((CAFormatter *)&v31, (const AudioComponentDescription *)((char *)this + 36));
          unint64_t v30 = (const void *)*((void *)this + 23);
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "APComponent.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 921;
          __int16 v34 = 2112;
          *(void *)UInt32 v35 = v29;
          *(_WORD *)&v35[8] = 2080;
          *(void *)&v35[10] = v31;
          __int16 v36 = 2112;
          AudioStreamPacketDescription v37 = v30;
          _os_log_impl(&dword_18FEC0000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d %@: %s: AUAudioUnit subclass %@ not found", buf, 0x30u);
          if (v31) {
            free(v31);
          }
        }
      }
    }
  }
  if (*((void *)this + 13)) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_19000243C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFURL const*>::~ObjectRef(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    CFStringRef v3 = result;
    CFIndex v4 = (void *)result[3];
    CFRange v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_190002718(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::operator()()
{
}

void sub_19000279C(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A1C406BDEE126);
  _Unwind_Resume(a1);
}

void std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy(uint64_t a1)
{
}

id std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0D08;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void *std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1)
{
  unsigned int v2 = operator new(0x10uLL);
  *unsigned int v2 = &unk_1EDFA0D08;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

void std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x192FC8940);
}

uint64_t std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func(uint64_t a1)
{
  return a1;
}

id APComponent_FromBundle_Loadable::getV3Class(APComponent_FromBundle_Loadable *this)
{
  if (!*((void *)this + 13)) {
    (*(void (**)(APComponent_FromBundle_Loadable *))(*(void *)this + 96))(this);
  }
  unsigned int v2 = (void *)*((void *)this + 25);
  return v2;
}

void APComponent_FromBundle_Loadable::~APComponent_FromBundle_Loadable(APComponent *this)
{
  *(void *)this = &unk_1EDF946A8;
  unsigned int v2 = (const void *)*((void *)this + 24);
  if (v2) {
    CFRelease(v2);
  }
  APComponent_FromBundle_Base::~APComponent_FromBundle_Base(this);
  JUMPOUT(0x192FC8940);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF946A8;
  unsigned int v2 = (const void *)*((void *)this + 24);
  if (v2) {
    CFRelease(v2);
  }
  APComponent_FromBundle_Base::~APComponent_FromBundle_Base(this);
}

uint64_t getConfigurationInfo(const AudioComponentDescription *a1, uint64_t a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  CFStringRef v6 = (void (**)(void, void))v5;
  if (a1->componentType) {
    BOOL v7 = a1->componentSubType == 0;
  }
  else {
    BOOL v7 = 1;
  }
  BOOL v9 = !v7 && a1->componentManufacturer != 0 && HIWORD(a1->componentType) == 24949;
  uint64_t v10 = v9;
  if (v9)
  {
    createConfgurationInfoCacheKey(a1, a2);
    CFStringRef v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    CFDictionaryRef v12 = (const __CFDictionary *)copyConfigurationInfoFromCache(v11);
    if (v12)
    {
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v12);
      addValidationStatusIfExists(a1, a2, MutableCopy);
      if (!gAudioComponentLogCategory) {
        operator new();
      }
      id v15 = *(id *)gAudioComponentLogCategory;
      int v16 = v15;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioComponentConfigurationInfo.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 249;
        _os_log_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_INFO, "%25s:%-5d returning cached info", buf, 0x12u);
      }

      ((void (**)(void, __CFDictionary *))v6)[2](v6, MutableCopy);
    }
    else
    {
      long long v26 = *(_OWORD *)&a1->componentType;
      componentFlagsMasuint64_t k = a1->componentFlagsMask;
      uint64_t v18 = MEMORY[0x1E4F143A8];
      uint64_t v19 = 3221225472;
      CFDictionaryRef v20 = ___Z20getConfigurationInfoRK25AudioComponentDescriptionjU13block_pointerFvPK14__CFDictionaryE_block_invoke;
      CFDictionaryRef v21 = &unk_1E5681048;
      int v23 = v6;
      uint64_t v22 = v11;
      char v24 = a1;
      int v25 = a2;
      uint64_t v14 = &v18;
      long long v28 = v26;
      UInt32 v29 = componentFlagsMask;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL38instantiateAndCatalogConfigurationInfo25AudioComponentDescriptionU13block_pointerFvP14__CFDictionaryE_block_invoke;
      uint64_t v31 = &unk_1E5681070;
      UInt32 v32 = v14;
      long long v33 = v26;
      UInt32 v34 = componentFlagsMask;
      +[AUAudioUnit instantiateWithComponentDescription:options:completionHandler:](AUAudioUnit, "instantiateWithComponentDescription:options:completionHandler:", &v28, 1, buf, v18, v19, v20, v21);
    }
  }
  else
  {
    (*((void (**)(id, void))v5 + 2))(v5, 0);
  }

  return v10;
}

void sub_190002D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void addValidationStatusIfExists(const AudioComponentDescription *a1, uint64_t a2, __CFDictionary *a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a3;
  uint64_t v19 = objc_opt_new();
  v20[0] = 0xC01000007;
  getValidationCapsuleVersion();
  uint64_t v6 = v5;
  char v7 = 0;
  uint64_t v8 = 1;
  BOOL v9 = (int *)v20;
  do
  {
    char v10 = v7;
    CFStringRef v11 = getValidationResultFromCache(a1, *v9, a2, v6, 0);
    CFDictionaryRef v12 = v11;
    if (v11)
    {
      long long v13 = [v11 objectForKeyedSubscript:@"Result"];
      int v14 = [v13 intValue];

      if (v14)
      {
        id v15 = [v12 objectForKeyedSubscript:@"Result"];
        int v16 = @"arm64";
        if (*v9 == 16777223) {
          int v16 = @"x86_64";
        }
        __int16 v17 = v16;
        [v19 setObject:v15 forKeyedSubscript:v17];
      }
    }

    BOOL v9 = (int *)v20 + v8;
    char v7 = 1;
    uint64_t v8 = 2;
  }
  while ((v10 & 1) == 0);
  if ([v19 count]) {
    [(__CFDictionary *)v18 setObject:v19 forKeyedSubscript:@"ValidationResult"];
  }
}

void sub_190002F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z20getConfigurationInfoRK25AudioComponentDescriptionjU13block_pointerFvPK14__CFDictionaryE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = a2;
    CFIndex v4 = [v3 objectForKeyedSubscript:@"ChannelConfigurations"];
    if (!v4) {
      goto LABEL_7;
    }
    uint64_t v5 = [v3 objectForKeyedSubscript:@"ChannelConfigurations"];
    uint64_t v6 = [v5 count];

    if (!v6) {
      goto LABEL_7;
    }
    char v7 = [v3 objectForKeyedSubscript:@"InitialInputs"];
    if (v7
      && ([v3 objectForKeyedSubscript:@"InitialOutputs"],
          uint64_t v8 = objc_claimAutoreleasedReturnValue(),
          v8,
          v7,
          v8))
    {

      writeConfigurationInfoToCache(*(const __CFString **)(a1 + 32), (const __CFDictionary *)v3);
    }
    else
    {
LABEL_7:
    }
    addValidationStatusIfExists(*(const AudioComponentDescription **)(a1 + 48), *(unsigned int *)(a1 + 56), (__CFDictionary *)v3);
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    CFStringRef v11 = *(id *)gAudioComponentLogCategory;
    CFDictionaryRef v12 = v11;
    if (v11)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v14 = 136315906;
        id v15 = "AudioComponentConfigurationInfo.mm";
        __int16 v16 = 1024;
        int v17 = 265;
        __int16 v18 = 2112;
        uint64_t v19 = v13;
        __int16 v20 = 2112;
        id v21 = v3;
        _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d %@ -> %@", (uint8_t *)&v14, 0x26u);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    BOOL v9 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v9();
  }
}

void sub_190003234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38instantiateAndCatalogConfigurationInfo25AudioComponentDescriptionU13block_pointerFvP14__CFDictionaryE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  v49[2] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v46 = a3;
  float v47 = v5;
  if (v5)
  {
    uint64_t v45 = a1;
    uint64_t v6 = objc_opt_new();
    char v7 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", objc_msgSend(v5, "providesUserInterface"));
    [v6 setObject:v7 forKeyedSubscript:@"HasCustomView"];

    id v8 = v5;
    BOOL v9 = [v8 channelCapabilities];
    if (v9)
    {
      char v10 = objc_opt_new();
      int v11 = [v9 count];
      if ((int)(v11 & 0xFFFFFFFE) >= 1)
      {
        uint64_t v12 = 0;
        unint64_t v13 = v11 & 0xFFFFFFFE;
        do
        {
          int v14 = [v9 objectAtIndexedSubscript:v12];
          v49[0] = v14;
          uint64_t v15 = v12 + 1;
          __int16 v16 = [v9 objectAtIndexedSubscript:v12 + 1];
          v49[1] = v16;
          int v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v49 count:2];
          [v10 addObject:v17];

          uint64_t v12 = v15 + 1;
        }
        while (v15 + 1 < v13);
      }
    }
    else
    {
      int v44 = *(_DWORD *)(v45 + 40);
      char v10 = &unk_1EDFB2E18;
      if (v44 != 1635083896 && v44 != 1635085670 && v44 != 1635086188) {
        char v10 = (void *)MEMORY[0x1E4F1CBF0];
      }
    }

    [v6 setObject:v10 forKeyedSubscript:@"ChannelConfigurations"];
    __int16 v18 = [v8 inputBusses];
    uint64_t v19 = busArrayChannelCounts(v18);

    if (v19) {
      [v6 setObject:v19 forKeyedSubscript:@"InitialInputs"];
    }

    __int16 v20 = [v8 outputBusses];
    id v21 = busArrayChannelCounts(v20);

    if (v21) {
      [v6 setObject:v21 forKeyedSubscript:@"InitialOutputs"];
    }

    v48[0] = MEMORY[0x1E4F1CC28];
    uint64_t v22 = (void *)MEMORY[0x1E4F28ED0];
    int v23 = [v8 inputBusses];
    char v24 = objc_msgSend(v22, "numberWithBool:", objc_msgSend(v23, "isCountChangeable"));
    v48[1] = v24;
    int v25 = (void *)MEMORY[0x1E4F28ED0];
    long long v26 = [v8 outputBusses];
    uint64_t v27 = objc_msgSend(v25, "numberWithBool:", objc_msgSend(v26, "isCountChangeable"));
    v48[2] = v27;
    long long v28 = [MEMORY[0x1E4F1C978] arrayWithObjects:v48 count:3];
    [v6 setObject:v28 forKeyedSubscript:@"BusCountWritable"];

    UInt32 v29 = objc_opt_new();
    unint64_t v30 = [v8 inputBusses];
    BOOL v31 = [v30 count] == 0;

    if (!v31)
    {
      UInt32 v32 = [v8 inputBusses];
      long long v33 = [v32 objectAtIndexedSubscript:0];
      UInt32 v34 = [v33 supportedChannelLayoutTags];
      [v29 setObject:v34 forKeyedSubscript:@"Input"];
    }
    uint64_t v35 = [v8 outputBusses];
    BOOL v36 = [v35 count] == 0;

    if (!v36)
    {
      AudioStreamPacketDescription v37 = [v8 outputBusses];
      uint64_t v38 = [v37 objectAtIndexedSubscript:0];
      unsigned int v39 = [v38 supportedChannelLayoutTags];
      [v29 setObject:v39 forKeyedSubscript:@"Output"];
    }
    [v6 setObject:v29 forKeyedSubscript:@"SupportedChannelLayoutTags"];
    int v40 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", objc_msgSend(v8, "AudioUnitMIDIProtocol"));
    [v6 setObject:v40 forKeyedSubscript:@"MIDIProtocol"];

    uint64_t v41 = [v8 migrateFromPlugin];
    [v6 setObject:v41 forKeyedSubscript:@"MigrateFromPlugin"];

    uint64_t v42 = *(void *)(v45 + 32);
    id v43 = v6;
    (*(void (**)(uint64_t, id))(v42 + 16))(v42, v43);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_190003754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id busArrayChannelCounts(AUAudioUnitBusArray *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  unsigned int v2 = v1;
  if (v1 && [(AUAudioUnitBusArray *)v1 count])
  {
    id v3 = objc_opt_new();
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    CFIndex v4 = v2;
    uint64_t v5 = [(AUAudioUnitBusArray *)v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v4);
          }
          id v8 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * i), "format", (void)v11);
          BOOL v9 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(v8, "channelCount"));
          [v3 addObject:v9];
        }
        uint64_t v5 = [(AUAudioUnitBusArray *)v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_190003A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MP4AOTSpecificBase::Serialize()
{
  return 4294967292;
}

uint64_t MP4AOTSpecificBase::SerializeCount(MP4AOTSpecificBase *this)
{
  return 0;
}

uint64_t MP4USACSpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 216) = 0;
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  unsigned int v5 = v4 >> 27;
  int v6 = *(_DWORD *)(a2 + 20) - 5;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    int v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    int v6 = v9 + 32;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = v8 << -(char)v9;
    }
  }
  else
  {
    unsigned int v7 = 32 * v4;
  }
  *(_DWORD *)(a2 + 16) = v7;
  if (v5 > 0x1F) {
    goto LABEL_15;
  }
  if (((1 << v5) & 0x70006000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      float64x2_t v143 = "MP4USACSpecificConfig.cpp";
      __int16 v144 = 1024;
      int v145 = 176;
      char v10 = MEMORY[0x1E4F14500];
      long long v11 = "%25s:%-5d  MP4USACSpecificConfig::Deserialize: reserved sample rate index";
      goto LABEL_10;
    }
    return 4294967090;
  }
  if (v5 == 31)
  {
    unsigned int v13 = v7 >> 8;
    v6 -= 24;
    *(_DWORD *)(a2 + 20) = v6;
    if (v6 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v14 = *(_DWORD *)(a2 + 16);
      int v15 = *(_DWORD *)(a2 + 20);
      v13 |= v14 >> v15;
      int v6 = v15 + 32;
      if (v15 == -32) {
        unsigned int v7 = 0;
      }
      else {
        unsigned int v7 = v14 << -(char)v15;
      }
    }
    else
    {
      v7 <<= 24;
    }
    *(_DWORD *)(a2 + 16) = v7;
  }
  else
  {
LABEL_15:
    unsigned int v13 = kUSACSampleRateTable[v5];
  }
  *(_DWORD *)(a1 + 8) = v13;
  unsigned int v16 = v7 >> 29;
  int v17 = v6 - 3;
  *(_DWORD *)(a2 + 20) = v17;
  if (v17 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v19 = *(_DWORD *)(a2 + 16);
    int v20 = *(_DWORD *)(a2 + 20);
    v16 |= v19 >> v20;
    int v17 = v20 + 32;
    *(_DWORD *)(a2 + 20) = v20 + 32;
    if (v20 == -32) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = v19 << -(char)v20;
    }
  }
  else
  {
    unsigned int v18 = 8 * v7;
  }
  *(_DWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a1 + 12) = v16;
  if (v16 >= 5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      float64x2_t v143 = "MP4USACSpecificConfig.cpp";
      __int16 v144 = 1024;
      int v145 = 186;
      char v10 = MEMORY[0x1E4F14500];
      long long v11 = "%25s:%-5d  MP4USACSpecificConfig::Deserialize: reserved coreSbrFrameLengthIndex";
      goto LABEL_10;
    }
    return 4294967090;
  }
  unsigned int v21 = v18 >> 27;
  int v22 = v17 - 5;
  *(_DWORD *)(a2 + 20) = v22;
  if (v22 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v24 = *(_DWORD *)(a2 + 16);
    int v25 = *(_DWORD *)(a2 + 20);
    v21 |= v24 >> v25;
    *(_DWORD *)(a2 + 20) = v25 + 32;
    if (v25 == -32) {
      int v23 = 0;
    }
    else {
      int v23 = v24 << -(char)v25;
    }
  }
  else
  {
    int v23 = 32 * v18;
  }
  *(_DWORD *)(a2 + 16) = v23;
  *(_DWORD *)(a1 + 16) = v21;
  if (!v21)
  {
    unsigned int v26 = escapedValue(a2, 5, 8, 16);
    uint64_t v27 = *(void *)(a1 + 24);
    uint64_t v28 = v26;
    unint64_t v29 = *(void *)(a1 + 32) - v27;
    if (v26 <= v29)
    {
      if (v26 < v29) {
        *(void *)(a1 + 32) = v27 + v26;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 24), v26 - v29);
    }
    if (v28)
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        unsigned int v31 = *(_DWORD *)(a2 + 16);
        unsigned int v32 = v31 >> 27;
        int v33 = *(_DWORD *)(a2 + 20) - 5;
        *(_DWORD *)(a2 + 20) = v33;
        if (v33 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v35 = *(_DWORD *)(a2 + 16);
          int v36 = *(_DWORD *)(a2 + 20);
          v32 |= v35 >> v36;
          *(_DWORD *)(a2 + 20) = v36 + 32;
          if (v36 == -32) {
            int v34 = 0;
          }
          else {
            int v34 = v35 << -(char)v36;
          }
        }
        else
        {
          int v34 = 32 * v31;
        }
        *(_DWORD *)(a2 + 16) = v34;
        *(unsigned char *)(*(void *)(a1 + 24) + i) = v32;
      }
    }
  }
  int v37 = escapedValue(a2, 4, 8, 16);
  unint64_t v38 = (v37 + 1);
  unsigned int v39 = *(char **)(a1 + 48);
  int v40 = *(unsigned char **)(a1 + 56);
  unint64_t v41 = (v40 - v39) >> 2;
  if (v38 <= v41)
  {
    if (v38 >= v41) {
      goto LABEL_63;
    }
    float64x2_t v52 = &v39[4 * v38];
    goto LABEL_60;
  }
  unint64_t v42 = v38 - v41;
  uint64_t v43 = *(void *)(a1 + 64);
  if (v38 - v41 <= (v43 - (uint64_t)v40) >> 2)
  {
    bzero(*(void **)(a1 + 56), 4 * v42);
    float64x2_t v52 = &v40[4 * v42];
LABEL_60:
    *(void *)(a1 + 56) = v52;
    goto LABEL_63;
  }
  uint64_t v44 = v43 - (void)v39;
  uint64_t v45 = v44 >> 1;
  if (v44 >> 1 <= v38) {
    uint64_t v45 = (v37 + 1);
  }
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v46 = v45;
  }
  if (v46 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  float v47 = (char *)operator new(4 * v46);
  int v48 = &v47[4 * v41];
  float v49 = &v47[4 * v46];
  bzero(v48, 4 * v42);
  float64x2_t v50 = &v48[4 * v42];
  while (v40 != v39)
  {
    int v51 = *((_DWORD *)v40 - 1);
    v40 -= 4;
    *((_DWORD *)v48 - 1) = v51;
    v48 -= 4;
  }
  *(void *)(a1 + 48) = v48;
  *(void *)(a1 + 56) = v50;
  *(void *)(a1 + 64) = v49;
  if (v39) {
    operator delete(v39);
  }
LABEL_63:
  if (!v38)
  {
LABEL_152:
    int Bit = TBitstreamReader<unsigned int>::GetBit(a2);
    *(unsigned char *)(a1 + 185) = Bit != 0;
    if (Bit)
    {
      int v116 = escapedValue(a2, 2, 4, 8);
      if (v116 != -1)
      {
        int v117 = v116;
        int v118 = 0;
        do
        {
          int v119 = escapedValue(a2, 4, 8, 16);
          unsigned int v120 = escapedValue(a2, 4, 8, 16);
          unsigned int v121 = v120;
          if (v119 == 2)
          {
            uint64_t v129 = v120;
            uint64_t v130 = *(void *)(a1 + 192);
            unint64_t v131 = *(void *)(a1 + 200) - v130;
            if (v120 <= v131)
            {
              if (v120 < v131) {
                *(void *)(a1 + 200) = v130 + v120;
              }
            }
            else
            {
              std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 192), v120 - v131);
            }
            if (v121)
            {
              uint64_t v132 = 0;
              do
              {
                unsigned int v133 = *(_DWORD *)(a2 + 16);
                unsigned int v134 = HIBYTE(v133);
                int v135 = *(_DWORD *)(a2 + 20) - 8;
                *(_DWORD *)(a2 + 20) = v135;
                if (v135 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                  *(void *)a2 += 4;
                  unsigned int v137 = *(_DWORD *)(a2 + 16);
                  int v138 = *(_DWORD *)(a2 + 20);
                  v134 |= v137 >> v138;
                  *(_DWORD *)(a2 + 20) = v138 + 32;
                  if (v138 == -32) {
                    int v136 = 0;
                  }
                  else {
                    int v136 = v137 << -(char)v138;
                  }
                }
                else
                {
                  int v136 = v133 << 8;
                }
                *(_DWORD *)(a2 + 16) = v136;
                *(unsigned char *)(*(void *)(a1 + 192) + v132++) = v134;
              }
              while (v129 != v132);
            }
          }
          else if (v119)
          {
            TBitstreamReader<unsigned int>::SkipBits(a2, 8 * v120);
          }
          else
          {
            unsigned int v122 = v120 + 1;
            while (--v122)
            {
              unsigned int v123 = *(_DWORD *)(a2 + 16);
              unsigned int v124 = HIBYTE(v123);
              int v125 = *(_DWORD *)(a2 + 20) - 8;
              *(_DWORD *)(a2 + 20) = v125;
              if (v125 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                *(void *)a2 += 4;
                unsigned int v127 = *(_DWORD *)(a2 + 16);
                int v128 = *(_DWORD *)(a2 + 20);
                v124 |= v127 >> v128;
                *(_DWORD *)(a2 + 20) = v128 + 32;
                if (v128 == -32) {
                  int v126 = 0;
                }
                else {
                  int v126 = v127 << -(char)v128;
                }
              }
              else
              {
                int v126 = v123 << 8;
              }
              *(_DWORD *)(a2 + 16) = v126;
              if (v124 != 165)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136315394;
                  float64x2_t v143 = "MP4USACSpecificConfig.cpp";
                  __int16 v144 = 1024;
                  int v145 = 309;
                  char v10 = MEMORY[0x1E4F14500];
                  long long v11 = "%25s:%-5d  MP4USACSpecificConfig::Deserialize: invalid fill pattern for ID_CONFIG_EXT_FILL";
                  goto LABEL_10;
                }
                return 4294967090;
              }
            }
          }
        }
        while (v118++ != v117);
      }
    }
    uint64_t result = 0;
    *(unsigned char *)(a1 + 216) = 1;
    return result;
  }
  uint64_t v53 = 0;
  uint64_t v141 = a1 + 77;
  while (2)
  {
    unsigned int v54 = *(_DWORD *)(a2 + 16);
    unsigned int v55 = v54 >> 30;
    int v56 = *(_DWORD *)(a2 + 20) - 2;
    *(_DWORD *)(a2 + 20) = v56;
    if (v56 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v58 = *(_DWORD *)(a2 + 16);
      int v59 = *(_DWORD *)(a2 + 20);
      v55 |= v58 >> v59;
      *(_DWORD *)(a2 + 20) = v59 + 32;
      if (v59 == -32) {
        int v57 = 0;
      }
      else {
        int v57 = v58 << -(char)v59;
      }
    }
    else
    {
      int v57 = 4 * v54;
    }
    *(_DWORD *)(a2 + 16) = v57;
    *(_DWORD *)(*(void *)(a1 + 48) + 4 * v53) = v55;
    int v60 = kUSACSbrFrameLengthInfoTable[4 * *(unsigned int *)(a1 + 12) + 1];
    switch(v55)
    {
      case 0u:
        *(unsigned char *)(a1 + 72) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
        *(unsigned char *)(a1 + 73) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
        if (v60)
        {
          *(unsigned char *)(a1 + 74) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          *(unsigned char *)(a1 + 75) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          *(unsigned char *)(a1 + 76) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          USACSBRHeader::Deserialize(v141, a2);
        }
        goto LABEL_151;
      case 1u:
        *(unsigned char *)(a1 + 72) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
        *(unsigned char *)(a1 + 73) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
        if (v60)
        {
          *(unsigned char *)(a1 + 74) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          *(unsigned char *)(a1 + 75) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          *(unsigned char *)(a1 + 76) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          USACSBRHeader::Deserialize(v141, a2);
          unsigned int v62 = *(_DWORD *)(a2 + 16);
          unsigned int v63 = v62 >> 30;
          int v64 = *(_DWORD *)(a2 + 20) - 2;
          *(_DWORD *)(a2 + 20) = v64;
          if (v64 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(void *)a2 += 4;
            unsigned int v73 = *(_DWORD *)(a2 + 16);
            int v74 = *(_DWORD *)(a2 + 20);
            v63 |= v73 >> v74;
            int v64 = v74 + 32;
            *(_DWORD *)(a2 + 20) = v74 + 32;
            unsigned int v65 = v74 == -32 ? 0 : v73 << -(char)v74;
          }
          else
          {
            unsigned int v65 = 4 * v62;
          }
          *(_DWORD *)(a2 + 16) = v65;
          if (v63)
          {
            unsigned int v81 = v65 >> 19;
            int v82 = v64 - 13;
            *(_DWORD *)(a2 + 20) = v82;
            if (v82 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(void *)a2 += 4;
              unsigned int v84 = *(_DWORD *)(a2 + 16);
              int v85 = *(_DWORD *)(a2 + 20);
              v81 |= v84 >> v85;
              int v82 = v85 + 32;
              *(_DWORD *)(a2 + 20) = v85 + 32;
              if (v85 == -32) {
                unsigned int v83 = 0;
              }
              else {
                unsigned int v83 = v84 << -(char)v85;
              }
            }
            else
            {
              unsigned int v83 = v65 << 13;
            }
            *(_DWORD *)(a2 + 16) = v83;
            *(unsigned char *)(a1 + 88) = (v81 >> 10) & 7;
            *(unsigned char *)(a1 + 89) = (v81 >> 7) & 7;
            *(int8x8_t *)v61.i8 = vand_s8((int8x8_t)vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v81) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFEFFFDFFFBLL), (int8x8_t)0x1000100030003);
            *(_DWORD *)(a1 + 90) = vmovn_s16(v61).u32[0];
            *(unsigned char *)(a1 + 94) = v81 & 1;
            if (v81)
            {
              unsigned int v107 = v83 >> 27;
              v82 -= 5;
              *(_DWORD *)(a2 + 20) = v82;
              if (v82 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                *(void *)a2 += 4;
                unsigned int v108 = *(_DWORD *)(a2 + 16);
                int v109 = *(_DWORD *)(a2 + 20);
                v107 |= v108 >> v109;
                int v82 = v109 + 32;
                *(_DWORD *)(a2 + 20) = v109 + 32;
                if (v109 == -32) {
                  unsigned int v83 = 0;
                }
                else {
                  unsigned int v83 = v108 << -(char)v109;
                }
              }
              else
              {
                v83 *= 32;
              }
              *(_DWORD *)(a2 + 16) = v83;
              *(unsigned char *)(a1 + 95) = v107;
            }
            if ((v63 & 0xFFFFFFFE) == 2)
            {
              unsigned int v110 = v83 >> 27;
              int v111 = v82 - 5;
              *(_DWORD *)(a2 + 20) = v111;
              if (v111 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                *(void *)a2 += 4;
                unsigned int v113 = *(_DWORD *)(a2 + 16);
                int v114 = *(_DWORD *)(a2 + 20);
                v110 |= v113 >> v114;
                *(_DWORD *)(a2 + 20) = v114 + 32;
                if (v114 == -32) {
                  int v112 = 0;
                }
                else {
                  int v112 = v113 << -(char)v114;
                }
              }
              else
              {
                int v112 = 32 * v83;
              }
              *(_DWORD *)(a2 + 16) = v112;
              *(unsigned char *)(a1 + 96) = v110;
              if (*(unsigned __int8 *)(a1 + 95) < v110) {
                *(unsigned char *)(a1 + 95) = v110;
              }
              *(unsigned char *)(a1 + 97) = TBitstreamReader<unsigned int>::GetBit(a2);
            }
            if (*(unsigned char *)(a1 + 90) == 2) {
              *(unsigned char *)(a1 + 98) = TBitstreamReader<unsigned int>::GetBit(a2);
            }
            *(unsigned char *)(a1 + 99) = 1;
          }
        }
        goto LABEL_151;
      case 2u:
        *(_WORD *)(a1 + 72) = 0;
        goto LABEL_151;
      case 3u:
        int v66 = escapedValue(a2, 4, 8, 16);
        unsigned int v67 = escapedValue(a2, 4, 8, 16);
        int v68 = TBitstreamReader<unsigned int>::GetBit(a2);
        *(unsigned char *)(a1 + 100) = v68 != 0;
        if (v68) {
          int v69 = escapedValue(a2, 8, 16, 0) + 1;
        }
        else {
          int v69 = 0;
        }
        break;
      default:
        goto LABEL_151;
    }
    *(_DWORD *)(a1 + 104) = v69;
    *(unsigned char *)(a1 + 108) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
    switch(v66)
    {
      case 0:
        goto LABEL_151;
      case 1:
        uint64_t v70 = v67;
        uint64_t v71 = *(void *)(a1 + 112);
        unint64_t v72 = *(void *)(a1 + 120) - v71;
        if (v67 <= v72)
        {
          if (v67 < v72) {
            *(void *)(a1 + 120) = v71 + v67;
          }
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 112), v67 - v72);
        }
        if (v67)
        {
          uint64_t v86 = 0;
          do
          {
            unsigned int v87 = *(_DWORD *)(a2 + 16);
            unsigned int v88 = HIBYTE(v87);
            int v89 = *(_DWORD *)(a2 + 20) - 8;
            *(_DWORD *)(a2 + 20) = v89;
            if (v89 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(void *)a2 += 4;
              unsigned int v91 = *(_DWORD *)(a2 + 16);
              int v92 = *(_DWORD *)(a2 + 20);
              v88 |= v91 >> v92;
              *(_DWORD *)(a2 + 20) = v92 + 32;
              if (v92 == -32) {
                int v90 = 0;
              }
              else {
                int v90 = v91 << -(char)v92;
              }
            }
            else
            {
              int v90 = v87 << 8;
            }
            *(_DWORD *)(a2 + 16) = v90;
            *(unsigned char *)(*(void *)(a1 + 112) + v86++) = v88;
          }
          while (v70 != v86);
        }
        goto LABEL_151;
      case 2:
        uint64_t v75 = v67;
        uint64_t v76 = *(void *)(a1 + 136);
        unint64_t v77 = *(void *)(a1 + 144) - v76;
        if (v67 <= v77)
        {
          if (v67 < v77) {
            *(void *)(a1 + 144) = v76 + v67;
          }
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 136), v67 - v77);
        }
        if (v67)
        {
          uint64_t v93 = 0;
          do
          {
            unsigned int v94 = *(_DWORD *)(a2 + 16);
            unsigned int v95 = HIBYTE(v94);
            int v96 = *(_DWORD *)(a2 + 20) - 8;
            *(_DWORD *)(a2 + 20) = v96;
            if (v96 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(void *)a2 += 4;
              unsigned int v98 = *(_DWORD *)(a2 + 16);
              int v99 = *(_DWORD *)(a2 + 20);
              v95 |= v98 >> v99;
              *(_DWORD *)(a2 + 20) = v99 + 32;
              if (v99 == -32) {
                int v97 = 0;
              }
              else {
                int v97 = v98 << -(char)v99;
              }
            }
            else
            {
              int v97 = v94 << 8;
            }
            *(_DWORD *)(a2 + 16) = v97;
            *(unsigned char *)(*(void *)(a1 + 136) + v93++) = v95;
          }
          while (v75 != v93);
        }
        goto LABEL_151;
      case 3:
        *(unsigned char *)(a1 + 184) = v53 == 0;
        goto LABEL_151;
      case 4:
        uint64_t v78 = v67;
        uint64_t v79 = *(void *)(a1 + 160);
        unint64_t v80 = *(void *)(a1 + 168) - v79;
        if (v67 <= v80)
        {
          if (v67 < v80) {
            *(void *)(a1 + 168) = v79 + v67;
          }
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 160), v67 - v80);
        }
        if (v67)
        {
          uint64_t v100 = 0;
          do
          {
            unsigned int v101 = *(_DWORD *)(a2 + 16);
            unsigned int v102 = HIBYTE(v101);
            int v103 = *(_DWORD *)(a2 + 20) - 8;
            *(_DWORD *)(a2 + 20) = v103;
            if (v103 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(void *)a2 += 4;
              unsigned int v105 = *(_DWORD *)(a2 + 16);
              int v106 = *(_DWORD *)(a2 + 20);
              v102 |= v105 >> v106;
              *(_DWORD *)(a2 + 20) = v106 + 32;
              if (v106 == -32) {
                int v104 = 0;
              }
              else {
                int v104 = v105 << -(char)v106;
              }
            }
            else
            {
              int v104 = v101 << 8;
            }
            *(_DWORD *)(a2 + 16) = v104;
            *(unsigned char *)(*(void *)(a1 + 160) + v100++) = v102;
          }
          while (v78 != v100);
        }
        goto LABEL_151;
      default:
        if (8 * v67 <= *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2))
        {
          TBitstreamReader<unsigned int>::SkipBits(a2, 8 * v67);
LABEL_151:
          if (++v53 == v38) {
            goto LABEL_152;
          }
          continue;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          float64x2_t v143 = "MP4USACSpecificConfig.cpp";
          __int16 v144 = 1024;
          int v145 = 290;
          char v10 = MEMORY[0x1E4F14500];
          long long v11 = "%25s:%-5d  MP4USACSpecificConfig::Deserialize: insufficient bits";
LABEL_10:
          _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
        }
        return 4294967090;
    }
  }
}

uint64_t escapedValue(uint64_t a1, int a2, int a3, int a4)
{
  char v6 = a2;
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  uint64_t v9 = v8 >> -(char)a2;
  int v10 = *(_DWORD *)(a1 + 20) - a2;
  *(_DWORD *)(a1 + 20) = v10;
  if (v10 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
    *(void *)a1 += 4;
    unsigned int v12 = *(_DWORD *)(a1 + 16);
    int v13 = *(_DWORD *)(a1 + 20);
    uint64_t v9 = (v12 >> v13) | v9;
    int v10 = v13 + 32;
    *(_DWORD *)(a1 + 20) = v13 + 32;
    if (v13 == -32) {
      unsigned int v11 = 0;
    }
    else {
      unsigned int v11 = v12 << -(char)v13;
    }
  }
  else
  {
    unsigned int v11 = v8 << a2;
  }
  *(_DWORD *)(a1 + 16) = v11;
  if (v9 == ~(-1 << v6))
  {
    unsigned int v14 = v11 >> -(char)a3;
    int v15 = v10 - a3;
    *(_DWORD *)(a1 + 20) = v15;
    if (v15 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
      *(void *)a1 += 4;
      unsigned int v17 = *(_DWORD *)(a1 + 16);
      int v18 = *(_DWORD *)(a1 + 20);
      v14 |= v17 >> v18;
      int v15 = v18 + 32;
      *(_DWORD *)(a1 + 20) = v18 + 32;
      unsigned int v16 = v18 == -32 ? 0 : v17 << -(char)v18;
    }
    else
    {
      unsigned int v16 = v11 << a3;
    }
    *(_DWORD *)(a1 + 16) = v16;
    uint64_t v9 = v14 + v9;
    if (v14 == ~(-1 << a3))
    {
      if (a4)
      {
        unsigned int v19 = v16 >> -(char)a4;
        int v20 = v15 - a4;
        *(_DWORD *)(a1 + 20) = v20;
        if (v20 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
          *(void *)a1 += 4;
          unsigned int v22 = *(_DWORD *)(a1 + 16);
          int v23 = *(_DWORD *)(a1 + 20);
          v19 |= v22 >> v23;
          *(_DWORD *)(a1 + 20) = v23 + 32;
          if (v23 == -32) {
            int v21 = 0;
          }
          else {
            int v21 = v22 << -(char)v23;
          }
        }
        else
        {
          int v21 = v16 << a4;
        }
        *(_DWORD *)(a1 + 16) = v21;
      }
      else
      {
        unsigned int v19 = 0;
      }
      return v19 + v9;
    }
  }
  return v9;
}

uint64_t USACSBRHeader::Deserialize(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  unsigned int v5 = v4 >> 22;
  int v6 = *(_DWORD *)(a2 + 20) - 10;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    int v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    int v6 = v9 + 32;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = v8 << -(char)v9;
    }
  }
  else
  {
    unsigned int v7 = v4 << 10;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(unsigned char *)uint64_t v3 = (v5 >> 6) & 0xF;
  *(unsigned char *)(v3 + 1) = (v5 >> 2) & 0xF;
  *(unsigned char *)(v3 + 2) = (v5 & 2) != 0;
  *(unsigned char *)(v3 + 6) = v5 & 1;
  if ((v5 >> 1))
  {
    unsigned int v13 = v7 >> 27;
    v6 -= 5;
    *(_DWORD *)(a2 + 20) = v6;
    if (v6 < 0)
    {
      uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v16 = *(_DWORD *)(a2 + 16);
      int v17 = *(_DWORD *)(a2 + 20);
      v13 |= v16 >> v17;
      int v6 = v17 + 32;
      *(_DWORD *)(a2 + 20) = v17 + 32;
      if (v17 == -32) {
        unsigned int v7 = 0;
      }
      else {
        unsigned int v7 = v16 << -(char)v17;
      }
    }
    else
    {
      v7 *= 32;
    }
    *(_DWORD *)(a2 + 16) = v7;
    *(unsigned char *)(v3 + 3) = (v13 >> 3) & 3;
    *(unsigned char *)(v3 + 4) = (v13 & 4) != 0;
    *(unsigned char *)(v3 + 5) = v13 & 3;
    if (*(unsigned char *)(v3 + 6)) {
      goto LABEL_8;
    }
LABEL_20:
    *(_WORD *)(v3 + 7) = 514;
    char v18 = 1;
    *(unsigned char *)(v3 + 9) = 1;
    goto LABEL_21;
  }
  *(_WORD *)(v3 + 3) = 258;
  *(unsigned char *)(v3 + 5) = 2;
  if ((v5 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_8:
  unsigned int v10 = v7 >> 26;
  int v11 = v6 - 6;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 < 0)
  {
    uint64_t result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v14 = *(_DWORD *)(a2 + 16);
    int v15 = *(_DWORD *)(a2 + 20);
    v10 |= v14 >> v15;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32) {
      int v12 = 0;
    }
    else {
      int v12 = v14 << -(char)v15;
    }
  }
  else
  {
    int v12 = v7 << 6;
  }
  *(_DWORD *)(a2 + 16) = v12;
  *(unsigned char *)(v3 + 7) = (v10 >> 4) & 3;
  *(unsigned char *)(v3 + 8) = (v10 >> 2) & 3;
  *(unsigned char *)(v3 + 9) = (v10 & 2) != 0;
  char v18 = v10 & 1;
LABEL_21:
  *(unsigned char *)(v3 + 10) = v18;
  return result;
}

void MP4USACSpecificConfig::~MP4USACSpecificConfig(MP4USACSpecificConfig *this)
{
  *(void *)this = &unk_1EDF934F8;
  unsigned int v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    *((void *)this + 15) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_1EDF934F8;
  unsigned int v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    *((void *)this + 15) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
}

uint64_t ID3FileStream::ParseHeader(uint64_t a1)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 236);
  if (v2 > 129)
  {
    if (v2 > 170)
    {
      switch(v2)
      {
        case 171:
          int v38 = *(_DWORD *)(a1 + 256);
          unsigned int v39 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_142;
        case 200:
          int v42 = *(_DWORD *)(a1 + 256);
          uint64_t v43 = *(void *)(a1 + 8);
          uint64_t v44 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_170;
        case 235:
          int v3 = *(_DWORD *)(a1 + 256);
          unsigned int v4 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_119;
      }
      goto LABEL_61;
    }
    if (v2 != 130)
    {
      if (v2 == 157)
      {
        int v27 = *(_DWORD *)(a1 + 256);
        uint64_t v28 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_105;
      }
      goto LABEL_61;
    }
    LODWORD(v40) = *(_DWORD *)(a1 + 256);
    unint64_t v41 = *(unsigned __int8 **)(a1 + 264);
LABEL_96:
    *(_DWORD *)__little = v40;
    StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), (unsigned int *)__little, v41);
    int v57 = *(_DWORD *)__little;
    int v58 = *(_DWORD *)(a1 + 256);
    *(void *)(a1 + 264) += *(unsigned int *)__little;
    int v59 = v58 - v57;
    *(_DWORD *)(a1 + 256) = v59;
    if (v59)
    {
      uint64_t result = 0;
      int v37 = 130;
      goto LABEL_73;
    }
    uint64_t v54 = *(void *)(a1 + 336);
    while (1)
    {
      *(_DWORD *)(a1 + 420) = 0;
      unsigned int FrameDataSize = ID3TagBase::GetFrameDataSize((ID3TagBase *)v54, (unsigned __int8 *)(a1 + 402), 0xAu, (unsigned int *)(a1 + 420));
      *(_DWORD *)(a1 + 416) = FrameDataSize;
      int16x8_t v61 = *(_DWORD **)(a1 + 336);
      if (v61[16] == 4
        && (unsigned int v62 = FrameDataSize, v63 = *(_DWORD *)(a1 + 420), v63 > FrameDataSize)
        && *(_DWORD *)(a1 + 344) + v63 < v61[13])
      {
        if (ID3FileStream::IsCurFrameRequired((ID3FileStream *)a1))
        {
          unsigned int v64 = v61[14] + v63;
          unsigned int v65 = malloc_type_malloc(v64, 0x7C51E058uLL);
          if (v64 && !v65)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            float64x2_t v147 = std::bad_alloc::bad_alloc(exception);
          }
          *(void *)(a1 + 440) = v65;
          memcpy(v65, (const void *)(a1 + 402), *(unsigned int *)(*(void *)(a1 + 336) + 56));
          uint64_t v66 = *(unsigned int *)(*(void *)(a1 + 336) + 56);
          int v27 = v66 + *(_DWORD *)(a1 + 416);
          *(_DWORD *)(a1 + 256) = v27;
          uint64_t v28 = (unsigned __int8 *)(*(void *)(a1 + 440) + v66);
          *(void *)(a1 + 264) = v28;
LABEL_105:
          *(_DWORD *)__little = v27;
          StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), (unsigned int *)__little, v28);
          int v67 = *(_DWORD *)__little;
          int v68 = *(_DWORD *)(a1 + 256);
          *(void *)(a1 + 264) += *(unsigned int *)__little;
          int v69 = v68 - v67;
          *(_DWORD *)(a1 + 256) = v69;
          if (v69)
          {
            uint64_t result = 0;
            int v37 = 157;
            goto LABEL_73;
          }
          uint64_t v70 = *(unsigned int **)(a1 + 336);
          uint64_t v71 = *(void *)(a1 + 440);
          if (v71)
          {
            unsigned int v72 = bswap32(*(_DWORD *)(v71 + *(unsigned int *)(a1 + 416) + v70[14]));
            unsigned int v73 = (ID3TagBase *)v70[16];
            if (v73 == 2) {
              int v74 = v72 >> 8;
            }
            else {
              int v74 = v72;
            }
          }
          else
          {
            int v74 = 0;
            unsigned int v73 = (ID3TagBase *)v70[16];
          }
          if (ID3TagBase::IsValidFrameID(v73, v74))
          {
            uint64_t v96 = *(unsigned int *)(a1 + 416);
            *(_DWORD *)(a1 + 420) = v96;
            memcpy((void *)(a1 + 424), (const void *)(v71 + v96 + v70[14]), v70[14]);
            int v97 = v96;
          }
          else
          {
            uint64_t v98 = *(unsigned int *)(a1 + 416);
            uint64_t v99 = v70[14];
            int v38 = *(_DWORD *)(a1 + 420) - v98 - v99;
            *(_DWORD *)(a1 + 256) = v38;
            unsigned int v39 = (unsigned __int8 *)(v71 + v98 + v99 + v99);
            *(void *)(a1 + 264) = v39;
LABEL_142:
            *(_DWORD *)__little = v38;
            StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), (unsigned int *)__little, v39);
            int v100 = *(_DWORD *)__little;
            int v101 = *(_DWORD *)(a1 + 256);
            *(void *)(a1 + 264) += *(unsigned int *)__little;
            int v102 = v101 - v100;
            *(_DWORD *)(a1 + 256) = v102;
            if (v102)
            {
              uint64_t result = 0;
              int v37 = 171;
              goto LABEL_73;
            }
            int v97 = *(_DWORD *)(a1 + 420);
            LODWORD(v96) = *(_DWORD *)(a1 + 416);
            uint64_t v70 = *(unsigned int **)(a1 + 336);
          }
          if (ID3TagBase::ProvideFrameData((ID3TagBase *)v70, (unsigned __int8 *)(a1 + 402), v70[14], *(_DWORD *)(a1 + 344), (unsigned int *)(a1 + 412), v97 != v96))goto LABEL_196; {
          uint64_t v103 = *(void *)(a1 + 336);
          }
          uint64_t v104 = v103 + 24;
          do
          {
            uint64_t v104 = *(void *)(v104 + 8);
            if (v104 == v103 + 24) {
              goto LABEL_196;
            }
          }
          while (*(_DWORD *)(v104 + 24) != *(_DWORD *)(a1 + 344));
          uint64_t v105 = *(void *)(v104 + 16);
          *(_DWORD *)(a1 + 472) = *(_DWORD *)(v104 + 24);
          *(void *)(a1 + 464) = v105;
          unsigned int v106 = bswap32(*(_DWORD *)(a1 + 402));
          int v107 = *(_DWORD *)(v103 + 64);
          if (v107 == 2) {
            unsigned int v87 = (ID3TagBase *)(v106 >> 8);
          }
          else {
            unsigned int v87 = (ID3TagBase *)v106;
          }
          if (v107 == 2)
          {
            int v108 = 4411213;
            if ((v87 & 0xFFFF0000) == 0x540000) {
              goto LABEL_156;
            }
          }
          else
          {
            int v108 = 1129270605;
            if (v87 >> 24 == 84) {
              goto LABEL_156;
            }
          }
          if (v108 == v87) {
            goto LABEL_137;
          }
          if (v107 == 2) {
            int v109 = 5590100;
          }
          else {
            int v109 = 1431522388;
          }
          if (v109 == v87) {
            goto LABEL_163;
          }
        }
        else
        {
          uint64_t v43 = *(void *)(a1 + 8);
          *(void *)(v43 + 96) += v62;
          int v42 = v61[14];
          *(_DWORD *)(a1 + 256) = v42;
          uint64_t v44 = (unsigned __int8 *)(a1 + 424);
          *(void *)(a1 + 264) = a1 + 424;
LABEL_170:
          *(_DWORD *)__little = v42;
          StreamBuffer::Copy((void *)(v43 + 72), (unsigned int *)__little, v44);
          int v111 = *(_DWORD *)__little;
          int v112 = *(_DWORD *)(a1 + 256);
          *(void *)(a1 + 264) += *(unsigned int *)__little;
          int v113 = v112 - v111;
          *(_DWORD *)(a1 + 256) = v113;
          if (v113)
          {
            uint64_t result = 0;
            int v37 = 200;
            goto LABEL_73;
          }
          int v114 = *(unsigned int **)(a1 + 336);
          unsigned int v115 = bswap32(*(_DWORD *)(a1 + 424));
          int v116 = (ID3TagBase *)v114[16];
          if (v116 == 2) {
            int v117 = v115 >> 8;
          }
          else {
            int v117 = v115;
          }
          BOOL IsValidFrameID = ID3TagBase::IsValidFrameID(v116, v117);
          BOOL v119 = IsValidFrameID;
          ID3TagBase::ProvideFrameData((ID3TagBase *)v114, (unsigned __int8 *)(a1 + 402), v114[14], *(_DWORD *)(a1 + 344), (unsigned int *)(a1 + 412), !IsValidFrameID);
          uint64_t v120 = *(void *)(a1 + 336);
          if (*(unsigned char *)(v120 + 48)) {
            goto LABEL_196;
          }
          if (!v119)
          {
            *(void *)(*(void *)(a1 + 8) + 96) += (*(_DWORD *)(a1 + 420)
                                                                    - *(_DWORD *)(a1 + 416)
                                                                    - *(_DWORD *)(v120 + 56));
            *(_WORD *)(a1 + 432) = 0;
            *(void *)(a1 + 424) = 0;
          }
        }
      }
      else
      {
        if (ID3TagBase::ProvideFrameData(*(ID3TagBase **)(a1 + 336), (unsigned __int8 *)(a1 + 402), v61[14], *(_DWORD *)(a1 + 344), (unsigned int *)(a1 + 412), 0))goto LABEL_196; {
        uint64_t v75 = *(void *)(a1 + 336);
        }
        uint64_t v76 = v75 + 24;
        do
        {
          uint64_t v76 = *(void *)(v76 + 8);
          if (v76 == v75 + 24) {
            goto LABEL_196;
          }
        }
        while (*(_DWORD *)(v76 + 24) != *(_DWORD *)(a1 + 344));
        uint64_t v77 = *(void *)(v76 + 16);
        *(_DWORD *)(a1 + 472) = *(_DWORD *)(v76 + 24);
        *(void *)(a1 + 464) = v77;
        unsigned int v78 = *(_DWORD *)(v75 + 56);
        if (*(_DWORD *)(a1 + 468) > v78 && ID3FileStream::IsCurFrameRequired((ID3FileStream *)a1))
        {
          unsigned int v79 = *(_DWORD *)(a1 + 412);
          unint64_t v80 = malloc_type_malloc(v79, 0x7C51E058uLL);
          if (v79 && !v80)
          {
            __int16 v144 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            int v145 = std::bad_alloc::bad_alloc(v144);
          }
          *(void *)(a1 + 440) = v80;
          memcpy(v80, (const void *)(a1 + 402), *(unsigned int *)(*(void *)(a1 + 336) + 56));
          uint64_t v81 = *(unsigned int *)(*(void *)(a1 + 336) + 56);
          int v3 = *(_DWORD *)(a1 + 412) - v81;
          *(_DWORD *)(a1 + 256) = v3;
          unsigned int v4 = (unsigned __int8 *)(*(void *)(a1 + 440) + v81);
          *(void *)(a1 + 264) = v4;
LABEL_119:
          *(_DWORD *)__little = v3;
          StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), (unsigned int *)__little, v4);
          int v83 = *(_DWORD *)__little;
          int v84 = *(_DWORD *)(a1 + 256);
          *(void *)(a1 + 264) += *(unsigned int *)__little;
          int v85 = v84 - v83;
          *(_DWORD *)(a1 + 256) = v85;
          if (v85)
          {
            uint64_t result = 0;
            int v37 = 235;
            goto LABEL_73;
          }
          uint64_t v86 = *(unsigned int **)(a1 + 336);
          unsigned int v87 = (ID3TagBase *)*(unsigned int *)(a1 + 464);
          unsigned int v88 = v86[16];
          if (v88 == 2) {
            int v89 = 5527640;
          }
          else {
            int v89 = 1415075928;
          }
          if (v89 == v87)
          {
            int v90 = *(char **)(a1 + 440);
            if (v90)
            {
              unsigned int v91 = (CFDictionaryRef *)(a1 + 352);
              if (!ID3TagBase::CopyFrameData((ID3TagBase *)v86, v90, *(_DWORD *)(a1 + 412), *(_DWORD *)(a1 + 472), (const void **)(a1 + 352)))
              {
                if (*v91)
                {
                  *(void *)(a1 + 480) = CFDictionaryGetValue(*v91, @"identifier");
                  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 352), @"text");
                  *(void *)(a1 + 488) = Value;
                  CFStringRef v93 = *(const __CFString **)(a1 + 480);
                  if (v93)
                  {
                    if (Value)
                    {
                      unsigned int v94 = *(CACFDictionary **)(a1 + 384);
                      if (!v94)
                      {
                        if (!(unint64_t)CFStringFind(v93, @"REPLAYGAIN", 1uLL).location) {
                          operator new();
                        }
                        unsigned int v94 = *(CACFDictionary **)(a1 + 384);
                      }
                      AddTextToReplayGainDict(*(CFComparisonResult *)(a1 + 480), *(const __CFString **)(a1 + 488), v94);
                    }
                  }
                }
              }
            }
          }
          else
          {
            if (v88 == 2)
            {
              int v95 = 4411213;
              if ((v87 & 0xFFFF0000) == 0x540000) {
                goto LABEL_156;
              }
            }
            else
            {
              int v95 = 1129270605;
              if (v87 >> 24 == 84)
              {
LABEL_156:
                ID3FileStream::ProcessTextFrame((ID3FileStream *)a1, v87);
                goto LABEL_177;
              }
            }
            if (v95 == v87)
            {
LABEL_137:
              ID3FileStream::ProcessCommentFrame(a1);
              goto LABEL_177;
            }
            if (v88 == 2) {
              int v110 = 5590100;
            }
            else {
              int v110 = 1431522388;
            }
            if (v110 == v87)
            {
LABEL_163:
              ID3FileStream::ProcessLyricFrame(a1);
              goto LABEL_177;
            }
            if (v87 == 1347570006)
            {
              uint64_t v121 = *(void *)(a1 + 440);
              if (v121)
              {
                strcpy(__little, "com.apple.streaming.audioDescription");
                uint64_t v122 = v86[14];
                size_t v123 = (*(_DWORD *)(a1 + 412) - v122);
                int v124 = v121 + v122;
                int v125 = strnstr((const char *)(v121 + v122), __little, v123);
                if (v125)
                {
                  uint64_t v126 = (v125 - v124 + 37);
                  if (v126 + 8 <= v123)
                  {
                    uint64_t v127 = *(void *)(a1 + 8);
                    uint64_t v128 = *(void *)(a1 + 440);
                    size_t v129 = (v123 - v126);
                    uint64_t v130 = malloc_type_calloc(1uLL, v129, 0xEC50E5E2uLL);
                    *(void *)(v127 + 136) = v130;
                    memcpy(v130, (const void *)(v128 + v122 + v126), v129);
                    *(_DWORD *)(v127 + 144) = v129;
                    *(unsigned char *)(a1 + 505) = 1;
                  }
                }
              }
            }
            else
            {
              if (v88 == 2) {
                int v131 = 5065804;
              }
              else {
                int v131 = 1296845908;
              }
              if (v131 == v87) {
                ID3FileStream::ProcessMLLTFrame((ID3FileStream *)a1, v82);
              }
            }
          }
        }
        else
        {
          if (*(unsigned char *)(v75 + 48)) {
            goto LABEL_196;
          }
          *(void *)(*(void *)(a1 + 8) + 96) += *(_DWORD *)(a1 + 412) - v78;
        }
      }
LABEL_177:
      ID3FileStream::EndOfFrame((ID3FileStream *)a1);
      uint64_t v54 = *(void *)(a1 + 336);
      if (*(unsigned char *)(v54 + 48)
        || *(unsigned char *)(a1 + 504)
        && *(unsigned char *)(a1 + 505)
        && *(unsigned char *)(a1 + 506)
        && *(unsigned char *)(a1 + 507)
        && *(unsigned char *)(a1 + 508)
        && *(unsigned char *)(a1 + 509)
        && *(unsigned char *)(a1 + 510))
      {
        goto LABEL_196;
      }
      unsigned int v55 = *(_DWORD *)(a1 + 344);
      unsigned int v56 = *(_DWORD *)(v54 + 52);
      size_t v40 = *(unsigned int *)(v54 + 56);
      if (v55 >= v56 - v40)
      {
        BOOL v132 = v56 >= v55;
        uint64_t v133 = v56 - v55;
        if (v133 != 0 && v132) {
          *(void *)(*(void *)(a1 + 8) + 96) += v133;
        }
LABEL_196:
        unsigned int v134 = *(CACFDictionary **)(a1 + 368);
        if (v134)
        {
          *(unsigned char *)(a1 + 508) = 1;
          if (CACFDictionary::Size(v134))
          {
            uint64_t v135 = *(void *)(a1 + 8);
            *(_DWORD *)__little = 0;
            int v136 = *(void (**)(void, void, uint64_t, char *))(v135 + 24);
            if (v136) {
              v136(*(void *)(v135 + 40), *(unsigned int *)(v135 + 8), 1768842863, __little);
            }
          }
        }
        if (*(void *)(a1 + 376))
        {
LABEL_201:
          unsigned int v137 = *(CACFDictionary **)(a1 + 384);
          if (!v137) {
            goto LABEL_205;
          }
          int v138 = CACFDictionary::Size(v137);
          unint64_t v139 = *(CACFDictionary **)(a1 + 376);
          if (v138)
          {
            CACFDictionary::AddDictionary(v139, @"REPLAYGAIN", **(const __CFDictionary ***)(a1 + 384));
            unint64_t v139 = *(CACFDictionary **)(a1 + 376);
          }
          if (v139)
          {
LABEL_205:
            *(unsigned char *)(a1 + 509) = 1;
            uint64_t v140 = *(void *)(a1 + 8);
            *(_DWORD *)__little = 0;
            if (!*(unsigned char *)(v140 + 110))
            {
              *(unsigned char *)(v140 + 110) = 1;
              uint64_t v141 = *(void (**)(void, void, uint64_t, char *))(v140 + 24);
              if (v141) {
                v141(*(void *)(v140 + 40), *(unsigned int *)(v140 + 8), 1819243876, __little);
              }
            }
          }
        }
        else
        {
          uint64_t v142 = *(CACFDictionary **)(a1 + 384);
          if (v142 && CACFDictionary::Size(v142))
          {
            if (!*(void *)(a1 + 376)) {
              operator new();
            }
            goto LABEL_201;
          }
        }
        uint64_t v143 = *(void *)(a1 + 336);
        if (v143)
        {
          (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
          *(void *)(a1 + 336) = 0;
        }
        ID3FileStream::EndOfFrame((ID3FileStream *)a1);
        unsigned int v47 = *(_DWORD *)(a1 + 332);
        uint64_t v5 = *(void *)(a1 + 8);
LABEL_215:
        *(void *)(v5 + 96) = *(void *)(a1 + 456) + v47;
        if (*(unsigned char *)(a1 + 536)) {
          operator new();
        }
        operator new();
      }
      *(_DWORD *)(a1 + 412) = 0;
      if (!*(unsigned char *)(a1 + 424))
      {
        *(_DWORD *)(a1 + 256) = v40;
        unint64_t v41 = (unsigned __int8 *)(a1 + 402);
        *(void *)(a1 + 264) = a1 + 402;
        goto LABEL_96;
      }
      memcpy((void *)(a1 + 402), (const void *)(a1 + 424), v40);
      *(void *)(a1 + 424) = 0;
      *(_WORD *)(a1 + 432) = 0;
    }
  }
  if (v2 > 92)
  {
    if (v2 == 93)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      LODWORD(v23) = *(_DWORD *)(v5 + 116);
LABEL_46:
      unsigned int v30 = *(_DWORD *)(a1 + 256) - v23;
      uint64_t v31 = *(void *)(v5 + 88);
      uint64_t v32 = *(void *)(v5 + 96);
      uint64_t v33 = v31 + *(unsigned int *)(v5 + 80);
      if (v33 <= v32 || v32 < v31) {
        unsigned int v35 = 0;
      }
      else {
        unsigned int v35 = v33 - v32;
      }
      if (v30 <= v35) {
        unsigned int v30 = v35;
      }
      *(_DWORD *)__little = v30;
      size_t v36 = v30 + v23;
      if (*(_DWORD *)(v5 + 120) < v36)
      {
        *(_DWORD *)(v5 + 120) = v36;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), v36);
        uint64_t v5 = *(void *)(a1 + 8);
      }
      StreamBuffer::Copy((void *)(v5 + 72), (unsigned int *)__little, (unsigned __int8 *)(*(void *)(v5 + 128) + *(unsigned int *)(v5 + 116)));
      uint64_t v5 = *(void *)(a1 + 8);
      unsigned int v22 = *(_DWORD *)(v5 + 116) + *(_DWORD *)__little;
      *(_DWORD *)(v5 + 116) = v22;
      if (v22 < *(_DWORD *)(a1 + 256))
      {
        uint64_t result = 0;
        int v37 = 93;
        goto LABEL_73;
      }
      uint64_t v7 = *(void *)(a1 + 272);
      uint64_t v45 = *(void *)(v5 + 128);
      *(void *)(v5 + 88) = v7;
      *(void *)(v5 + 96) = v7;
      *(void *)(v5 + 72) = v45;
      *(_DWORD *)(v5 + 80) = v22;
      uint64_t v9 = v7 + v22;
      uint64_t v8 = v7;
      goto LABEL_63;
    }
    if (v2 == 103)
    {
      int v25 = *(_DWORD *)(a1 + 256);
      unsigned int v26 = *(unsigned __int8 **)(a1 + 264);
      uint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_70;
    }
LABEL_61:
    uint64_t result = 0;
    int v37 = -1;
    goto LABEL_73;
  }
  if (v2 == -1) {
    return 0;
  }
  if (v2) {
    goto LABEL_61;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 80);
  uint64_t v8 = *(void *)(v5 + 88);
  uint64_t v7 = *(void *)(v5 + 96);
  uint64_t v9 = v8 + v6;
  if (v7 < v8 + v6 && v7 >= v8) {
    LODWORD(v6) = v7 - v8;
  }
  *(_DWORD *)(a1 + 448) = v6;
  *(void *)(a1 + 456) = v7;
  uint64_t v11 = *(void *)(v5 + 48);
  uint64_t v12 = *(void *)(v5 + 56);
  uint64_t v13 = v12 - v11;
  if (v12 != v11)
  {
    unint64_t v14 = 0;
    unint64_t v15 = v13 >> 2;
    unsigned int v16 = 1;
    do
    {
      int v17 = *(_DWORD *)(v11 + 4 * v14);
      unint64_t v14 = v16++;
    }
    while (v17 != 1768174437 && v15 > v14);
    if (v17 == 1768174437)
    {
      *(_DWORD *)__little = 0;
      unsigned int v19 = *(void (**)(void, void, uint64_t, char *))(v5 + 24);
      if (v19)
      {
        v19(*(void *)(v5 + 40), *(unsigned int *)(v5 + 8), 1768174437, __little);
        uint64_t v5 = *(void *)(a1 + 8);
        uint64_t v8 = *(void *)(v5 + 88);
        uint64_t v7 = *(void *)(v5 + 96);
        uint64_t v9 = v8 + *(unsigned int *)(v5 + 80);
      }
    }
  }
  *(_DWORD *)(a1 + 256) = 10;
  BOOL v21 = v7 < v8 || v9 <= v7;
  unsigned int v22 = v9 - v7;
  if (v21) {
    size_t v23 = 0;
  }
  else {
    size_t v23 = v22;
  }
  if (v23 <= 9)
  {
    *(void *)(a1 + 272) = v7;
    unsigned int v24 = *(char **)(v5 + 72);
    if (v24 == *(char **)(v5 + 128))
    {
      if (v22) {
        int v51 = v21;
      }
      else {
        int v51 = 1;
      }
      float64x2_t v52 = &v24[(v7 - v8)];
      if (v51) {
        uint64_t v53 = 0;
      }
      else {
        uint64_t v53 = v52;
      }
      memmove(v24, v53, v23);
      uint64_t v5 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v5 + 120) <= 9u)
      {
        *(_DWORD *)(v5 + 120) = 10;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0xAuLL);
        uint64_t v5 = *(void *)(a1 + 8);
      }
      *(_DWORD *)(v5 + 116) = v23;
      *(void *)(v5 + 96) = *(void *)(v5 + 88) + *(unsigned int *)(v5 + 80);
    }
    else
    {
      if (*(_DWORD *)(v5 + 120) <= 9u)
      {
        *(_DWORD *)(v5 + 120) = 10;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0xAuLL);
        uint64_t v5 = *(void *)(a1 + 8);
      }
      LODWORD(v23) = 0;
      *(_DWORD *)(v5 + 116) = 0;
    }
    goto LABEL_46;
  }
LABEL_63:
  unint64_t v46 = 0;
  int v148 = 0;
  if (v7 >= v8 && v7 < v9 && v22) {
    unint64_t v46 = (const unsigned __int8 *)(*(void *)(v5 + 72) + (v7 - v8));
  }
  unsigned int v47 = ID3Size(0xAu, v46, &v148);
  *(_DWORD *)(a1 + 332) = v47;
  if (!v47) {
    return 1685348671;
  }
  if (v148 != 2) {
    goto LABEL_215;
  }
  *(_DWORD *)(a1 + 344) = 0;
  int v25 = 10;
  *(_DWORD *)(a1 + 256) = 10;
  unsigned int v26 = (unsigned __int8 *)(a1 + 392);
  *(void *)(a1 + 264) = a1 + 392;
LABEL_70:
  *(_DWORD *)__little = v25;
  StreamBuffer::Copy((void *)(v5 + 72), (unsigned int *)__little, v26);
  int v48 = *(_DWORD *)__little;
  int v49 = *(_DWORD *)(a1 + 256);
  *(void *)(a1 + 264) += *(unsigned int *)__little;
  int v50 = v49 - v48;
  *(_DWORD *)(a1 + 256) = v50;
  if (!v50)
  {
    *(_DWORD *)(a1 + 344) = 10;
    operator new();
  }
  uint64_t result = 0;
  int v37 = 103;
LABEL_73:
  *(_DWORD *)(a1 + 236) = v37;
  return result;
}

void sub_190005FB4(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1020C40FFEA222ELL);
  _Unwind_Resume(a1);
}

uint64_t ID3FileStream::IsCurFrameRequired(ID3FileStream *this)
{
  unsigned int v1 = bswap32(*(_DWORD *)((char *)this + 402));
  int v2 = *(_DWORD *)(*((void *)this + 42) + 64);
  unsigned int v3 = v1 >> 8;
  if (v2 == 2)
  {
    int v4 = 5527640;
  }
  else
  {
    unsigned int v3 = v1;
    int v4 = 1415075928;
  }
  if (v4 == v3 && !*((unsigned char *)this + 509)) {
    return 1;
  }
  if (v2 == 2)
  {
    if ((v3 & 0xFFFF0000) != 0x540000)
    {
LABEL_11:
      if (v2 == 2) {
        int v5 = 4411213;
      }
      else {
        int v5 = 1129270605;
      }
      if (v5 == v3
        && (!*((unsigned char *)this + 507) || !*((unsigned char *)this + 506) || !*((unsigned char *)this + 509) || !*((unsigned char *)this + 508)))
      {
        return 1;
      }
      int v6 = v2 == 2 ? 5590100 : 1431522388;
      if (v6 == v3 && !*((unsigned char *)this + 504)) {
        return 1;
      }
      if (v3 == 1347570006)
      {
        if (!*((unsigned char *)this + 505)) {
          return 1;
        }
      }
      else
      {
        if (v2 == 2) {
          int v7 = 5065804;
        }
        else {
          int v7 = 1296845908;
        }
        if (v7 == v3 && !*((unsigned char *)this + 510)) {
          return 1;
        }
      }
      return 0;
    }
  }
  else if (HIBYTE(v3) != 84)
  {
    goto LABEL_11;
  }
  if (*((unsigned char *)this + 508)) {
    goto LABEL_11;
  }
  return 1;
}

void ID3FileStream::ProcessTextFrame(ID3FileStream *this, ID3TagBase *a2)
{
  unsigned int v3 = (char *)*((void *)this + 55);
  if (v3)
  {
    if (!*((void *)this + 46)) {
      operator new();
    }
    CFStringRef theString = 0;
    int v5 = ID3TagBase::CopyFrameData(*((ID3TagBase **)this + 42), v3, *((_DWORD *)this + 103), *((_DWORD *)this + 118), (const void **)&theString);
    CFStringRef v6 = theString;
    if (!v5 && theString != 0)
    {
      int v8 = ID3TagBase::TranslateV2IDToV3(a2);
      if (v8 > 1414091825)
      {
        if (v8 <= 1414546736)
        {
          switch(v8)
          {
            case 1414091826:
              uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Title;
              goto LABEL_41;
            case 1414091827:
              uint64_t v9 = InfoDictionaryKeys::sAFDictionary_SubTitle;
              goto LABEL_41;
            case 1414219097:
              uint64_t v9 = InfoDictionaryKeys::sAFDictionary_KeySignature;
              goto LABEL_41;
          }
        }
        else if (v8 > 1414746690)
        {
          if (v8 == 1414746691)
          {
            uint64_t v9 = InfoDictionaryKeys::sAFDictionary_ISRC;
            goto LABEL_41;
          }
          if (v8 == 1415136594)
          {
            uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Year;
            goto LABEL_41;
          }
        }
        else
        {
          if (v8 == 1414546737)
          {
            uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Artist;
            goto LABEL_41;
          }
          if (v8 == 1414677323)
          {
            uint64_t v9 = InfoDictionaryKeys::sAFDictionary_TrackNumber;
            goto LABEL_41;
          }
        }
      }
      else if (v8 <= 1413697357)
      {
        switch(v8)
        {
          case 1413565506:
            uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Album;
            goto LABEL_41;
          case 1413632077:
            uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Tempo;
            goto LABEL_41;
          case 1413697357:
            uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Composer;
            goto LABEL_41;
        }
      }
      else if (v8 > 1413828162)
      {
        if (v8 == 1413828163)
        {
          uint64_t v9 = InfoDictionaryKeys::sAFDictionary_EncodingApplication;
          goto LABEL_41;
        }
        if (v8 == 1413830740)
        {
          uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Lyricist;
          goto LABEL_41;
        }
      }
      else
      {
        if (v8 == 1413697358)
        {
          uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Genre;
          goto LABEL_41;
        }
        if (v8 == 1413697360)
        {
          uint64_t v9 = InfoDictionaryKeys::sAFDictionary_Copyright;
LABEL_41:
          CFStringRef v10 = *v9;
          if (*v9)
          {
            char HasKey = CACFDictionary::HasKey(*((CACFDictionary **)this + 46), *v9);
            CFStringRef v6 = theString;
            if ((HasKey & 1) == 0)
            {
              CFIndex Length = CFStringGetLength(theString);
              CFStringRef v6 = theString;
              if (Length)
              {
                CACFDictionary::AddString(*((CACFDictionary **)this + 46), v10, theString);
                CFStringRef v6 = theString;
              }
            }
          }
        }
      }
      CFRelease(v6);
    }
  }
}

void sub_190006408(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1020C40FFEA222ELL);
  _Unwind_Resume(a1);
}

uint64_t ID3FileStream::ProcessCommentFrame(uint64_t this)
{
  uint64_t v1 = *(char **)(this + 440);
  if (v1)
  {
    uint64_t v2 = this;
    unsigned int v3 = (uint64_t *)(this + 352);
    this = ID3TagBase::CopyFrameData(*(ID3TagBase **)(this + 336), v1, *(_DWORD *)(v2 + 412), *(_DWORD *)(v2 + 472), (const void **)(v2 + 352));
    if (!this)
    {
      this = *v3;
      if (*v3)
      {
        *(void *)(v2 + 480) = CFDictionaryGetValue((CFDictionaryRef)this, @"identifier");
        CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 352), @"text");
        *(void *)(v2 + 488) = Value;
        this = *(void *)(v2 + 480);
        if (this)
        {
          if (Value)
          {
            if (*(unsigned char *)(v2 + 508) || CFStringHasPrefix((CFStringRef)this, @"iTun"))
            {
              int v5 = malloc_type_malloc(0x80uLL, 0x7C51E058uLL);
              if (!v5)
              {
                exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                uint64_t v12 = std::bad_alloc::bad_alloc(exception);
              }
              *(void *)(v2 + 496) = v5;
              void v5[6] = 0u;
              v5[7] = 0u;
              void v5[4] = 0u;
              void v5[5] = 0u;
              v5[2] = 0u;
              v5[3] = 0u;
              *int v5 = 0u;
              v5[1] = 0u;
              this = CFStringGetCString(*(CFStringRef *)(v2 + 488), *(char **)(v2 + 496), 128, 0x201u);
              if (this)
              {
                if (*(unsigned char *)(v2 + 507)
                  || (this = CFStringCompare(*(CFStringRef *)(v2 + 480), @"iTunSMPB", 0)) != 0)
                {
                  if (!*(unsigned char *)(v2 + 506) || !*(unsigned char *)(v2 + 509))
                  {
                    this = CFStringCompare(*(CFStringRef *)(v2 + 480), @"iTunNORM", 0);
                    if (!this) {
                      operator new();
                    }
                    if (!*(unsigned char *)(v2 + 509))
                    {
                      this = CFStringCompare(*(CFStringRef *)(v2 + 480), @"iTunLOUD", 0);
                      if (!this) {
                        operator new();
                      }
                    }
                  }
                }
                else
                {
                  this = ParseiTunesSMPBData((char *)(*(void *)(v2 + 496) + 9), 119, (AudioFilePacketTableInfo *)(v2 + 160));
                  if (!this)
                  {
                    *(unsigned char *)(v2 + 507) = 1;
                    uint64_t v9 = *(void *)(v2 + 8);
                    int v13 = 0;
                    if (!*(unsigned char *)(v9 + 106))
                    {
                      *(unsigned char *)(v9 + 106) = 1;
                      CFStringRef v10 = *(uint64_t (**)(void, void, uint64_t, int *))(v9 + 24);
                      if (v10) {
                        return v10(*(void *)(v9 + 40), *(unsigned int *)(v9 + 8), 1886283375, &v13);
                      }
                    }
                  }
                }
              }
            }
            else
            {
              CFStringRef v6 = *(CACFDictionary **)(v2 + 368);
              if (!v6) {
                operator new();
              }
              this = CACFDictionary::HasKey(v6, @"comments");
              if ((this & 1) == 0)
              {
                int v7 = *(CACFDictionary **)(v2 + 368);
                CFStringRef v8 = *(const __CFString **)(v2 + 488);
                return CACFDictionary::AddString(v7, @"comments", v8);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_190006824(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1020C40FFEA222ELL);
  _Unwind_Resume(a1);
}

uint64_t ID3FileStream::ProcessLyricFrame(uint64_t this)
{
  uint64_t v1 = *(char **)(this + 440);
  if (v1)
  {
    uint64_t v2 = this;
    unsigned int v3 = (void *)(this + 352);
    this = ID3TagBase::CopyFrameData(*(ID3TagBase **)(this + 336), v1, *(_DWORD *)(v2 + 412), *(_DWORD *)(v2 + 344), (const void **)(v2 + 352));
    if (!this)
    {
      if (*v3)
      {
        *(unsigned char *)(v2 + 504) = 1;
        uint64_t v4 = *(void *)(v2 + 8);
        int v6 = 0;
        int v5 = *(uint64_t (**)(void, void, uint64_t, int *))(v4 + 24);
        if (v5) {
          return v5(*(void *)(v4 + 40), *(unsigned int *)(v4 + 8), 1280922179, &v6);
        }
      }
    }
  }
  return this;
}

void ID3FileStream::ProcessMLLTFrame(ID3FileStream *this, __n128 a2)
{
  uint64_t v2 = *((void *)this + 55);
  if (!v2) {
    return;
  }
  uint64_t v4 = *(unsigned int *)(*((void *)this + 42) + 56);
  int v5 = (unsigned int *)(v2 + v4);
  unint64_t v6 = v2 + v4 + (*((_DWORD *)this + 103) - v4);
  if (((v2 + v4) & 3) != 0)
  {
    int v7 = 0;
    CFStringRef v8 = (char *)v5 + 1;
    int v9 = -8;
    CFStringRef v10 = v5;
    do
    {
      int v11 = v9;
      if ((unint64_t)v10 >= v6) {
        int v12 = 255;
      }
      else {
        int v12 = *(unsigned __int8 *)v10;
      }
      int v7 = v12 | (v7 << 8);
      CFStringRef v10 = (unsigned int *)((char *)v10 + 1);
      int v9 = v11 + 8;
      BOOL v50 = (v8++ & 3) == 0;
    }
    while (!v50);
    a2.n128_u32[0] = v7 << (16 - v11);
    a2.n128_u32[1] = v11 + 16;
  }
  else
  {
    a2 = 0uLL;
    CFStringRef v10 = (unsigned int *)(v2 + v4);
  }
  uint64_t v13 = *((void *)this + 1);
  *(void *)(v13 + 176) = *(void *)(v13 + 168);
  unsigned int v14 = a2.n128_u32[0];
  unsigned __int32 v15 = HIWORD(a2.n128_u32[0]);
  unsigned __int32 v16 = a2.n128_u32[1] - 16;
  if ((signed __int32)(a2.n128_u32[1] - 16) < 0)
  {
    if (((v6 - v10) & ~((uint64_t)(v6 - (void)v10) >> 63) & 0xFFFFFFFC) == 0 || v5 > v10)
    {
      uint64_t v19 = 0;
      do
      {
        int v20 = (unsigned __int8 *)v10 + v19;
        int v21 = 255;
        if ((unint64_t)v10 + v19 < v6 && v20 >= (unsigned __int8 *)v5) {
          int v21 = *v20;
        }
        unsigned int v14 = v21 | (v14 << 8);
        ++v19;
      }
      while (v19 != 4);
    }
    else
    {
      unsigned int v14 = bswap32(*v10);
    }
    ++v10;
    unsigned __int32 v16 = a2.n128_u32[1] + 16;
    v15 |= v14 >> (a2.n128_u8[4] + 16);
    if (a2.n128_u32[1] == -16)
    {
      unsigned int v22 = 0;
      unsigned int v17 = 0;
      *(_WORD *)(v13 + 152) = v15;
      goto LABEL_28;
    }
    unsigned int v17 = v14 << (16 - a2.n128_u8[4]);
  }
  else
  {
    unsigned int v17 = a2.n128_u32[0] << 16;
  }
  *(_WORD *)(v13 + 152) = v15;
  unsigned int v22 = v17 >> 8;
  int v23 = v16 - 24;
  if ((int)(v16 - 24) >= 0)
  {
    int v24 = v17 << 24;
    goto LABEL_38;
  }
LABEL_28:
  if (((v6 - v10) & ~((uint64_t)(v6 - (void)v10) >> 63) & 0xFFFFFFFC) != 0 && v5 <= v10)
  {
    unsigned int v17 = bswap32(*v10);
  }
  else
  {
    uint64_t v25 = 0;
    do
    {
      unsigned int v26 = (unsigned __int8 *)v10 + v25;
      int v27 = 255;
      if ((unint64_t)v10 + v25 < v6 && v26 >= (unsigned __int8 *)v5) {
        int v27 = *v26;
      }
      unsigned int v17 = v27 | (v17 << 8);
      ++v25;
    }
    while (v25 != 4);
  }
  int v23 = v16 + 8;
  BOOL v50 = v16 == -8;
  ++v10;
  v22 |= v17 >> (v16 + 8);
  int v24 = v17 << (24 - v16);
  if (v50) {
    int v24 = 0;
  }
LABEL_38:
  *(_DWORD *)(v13 + 156) = v22;
  unsigned int v28 = 24;
  if (v23 <= 23)
  {
    unsigned int v28 = 24 - v23;
    if ((24 - v23) >= 0x20)
    {
      int v24 = 0;
      CFStringRef v10 = (unsigned int *)((char *)v10 + ((v28 >> 3) & 0x1FFFFFFC));
      int v23 = 0;
      v28 &= 0x1Fu;
      if (!v28)
      {
        int v30 = 0;
        goto LABEL_58;
      }
    }
    else
    {
      int v24 = 0;
      int v23 = 0;
    }
  }
  int v29 = v23 - v28;
  if ((int)(v23 - v28) < 0)
  {
    if (((v6 - v10) & ~((uint64_t)(v6 - (void)v10) >> 63) & 0xFFFFFFFC) != 0
      && v5 <= v10)
    {
      unsigned int v31 = *v10++;
      int v24 = bswap32(v31);
      int v30 = v29 + 32;
    }
    else
    {
      uint64_t v32 = 0;
      do
      {
        uint64_t v33 = (unsigned __int8 *)v10 + v32;
        int v34 = 255;
        if ((unint64_t)v10 + v32 < v6 && v33 >= (unsigned __int8 *)v5) {
          int v34 = *v33;
        }
        int v24 = v34 | (v24 << 8);
        ++v32;
      }
      while (v32 != 4);
      ++v10;
      int v30 = v29 + 32;
      if (v29 == -32)
      {
        int v24 = 0;
        int v23 = 0;
        goto LABEL_58;
      }
    }
    int v23 = v24 << -(char)v29;
  }
  else
  {
    int v23 = v24 << v28;
    int v30 = v29;
  }
  int v24 = HIBYTE(v23);
  int v35 = v30 - 8;
  if (v30 >= 8)
  {
    unsigned int v36 = v23 << 8;
    goto LABEL_68;
  }
LABEL_58:
  if (((v6 - v10) & ~((uint64_t)(v6 - (void)v10) >> 63) & 0xFFFFFFFC) != 0 && v5 <= v10)
  {
    int v23 = bswap32(*v10);
  }
  else
  {
    uint64_t v37 = 0;
    do
    {
      int v38 = (unsigned __int8 *)v10 + v37;
      int v39 = 255;
      if ((unint64_t)v10 + v37 < v6 && v38 >= (unsigned __int8 *)v5) {
        int v39 = *v38;
      }
      int v23 = v39 | (v23 << 8);
      ++v37;
    }
    while (v37 != 4);
  }
  ++v10;
  int v35 = v30 + 24;
  v24 |= v23 >> (v30 + 24);
  if (v30 == -24)
  {
    unsigned int v40 = 0;
    unsigned int v36 = 0;
    *(unsigned char *)(v13 + 160) = v24;
LABEL_71:
    if (((v6 - v10) & ~((uint64_t)(v6 - (void)v10) >> 63) & 0xFFFFFFFC) != 0
      && v5 <= v10)
    {
      unsigned int v36 = bswap32(*v10);
      a2.n128_u32[0] = v36;
    }
    else
    {
      uint64_t v43 = 0;
      do
      {
        uint64_t v44 = (unsigned __int8 *)v10 + v43;
        int v45 = 255;
        if ((unint64_t)v10 + v43 < v6 && v44 >= (unsigned __int8 *)v5) {
          int v45 = *v44;
        }
        unsigned int v36 = v45 | (v36 << 8);
        a2.n128_u32[0] = v36;
        ++v43;
      }
      while (v43 != 4);
    }
    char v46 = 8 - v35;
    unsigned __int32 v47 = v35 + 24;
    a2.n128_u32[1] = v47;
    unsigned int v48 = v36 << v46;
    ++v10;
    v40 |= v36 >> v47;
    if (v47) {
      unsigned int v42 = v48;
    }
    else {
      unsigned int v42 = 0;
    }
    if (v47) {
      unsigned __int32 v41 = v47;
    }
    else {
      unsigned __int32 v41 = 0;
    }
    goto LABEL_85;
  }
  unsigned int v36 = v23 << (8 - v30);
LABEL_68:
  *(unsigned char *)(v13 + 160) = v24;
  unsigned int v40 = HIBYTE(v36);
  a2.n128_u32[0] = v36;
  unsigned __int32 v41 = v35 - 8;
  a2.n128_u32[1] = v35 - 8;
  if (v35 - 8 < 0) {
    goto LABEL_71;
  }
  unsigned int v42 = v36 << 8;
LABEL_85:
  *(unsigned char *)(v13 + 161) = v40;
  unsigned int v49 = v40 + v24;
  if (v49) {
    BOOL v50 = (v49 & 4) == 0;
  }
  else {
    BOOL v50 = 0;
  }
  if (v50)
  {
    unsigned int v51 = v41 + 8 * (v6 - v10);
    unsigned int v52 = v51 / v49;
    __n128 v76 = a2;
    std::vector<unsigned int>::resize((std::vector<int> *)(v13 + 168), v51 / v49);
    __n128 v53 = v76;
    if (v49 <= v51)
    {
      uint64_t v54 = 0;
      v53.n128_u32[0] = v42;
      char v55 = *(unsigned char *)(v13 + 161);
      int v56 = ~(-1 << *(unsigned char *)(v13 + 160));
      uint64_t v57 = *(void *)(v13 + 168);
      if (v52 <= 1) {
        uint64_t v58 = 1;
      }
      else {
        uint64_t v58 = v52;
      }
      do
      {
        if (v49 - 33 >= 0xFFFFFFE0)
        {
          unsigned int v60 = v53.n128_u32[0];
          unsigned int v59 = v53.n128_u32[0] >> (32 - v49);
          unsigned __int32 v61 = v53.n128_u32[1] - v49;
          v53.n128_u32[1] -= v49;
          if (v53.n128_i32[1] < 0)
          {
            if (((v6 - v10) & ~((uint64_t)(v6 - (void)v10) >> 63) & 0xFFFFFFFC) != 0
              && v5 <= v10)
            {
              unsigned int v60 = bswap32(*v10);
            }
            else
            {
              uint64_t v63 = 0;
              do
              {
                unsigned int v64 = (unsigned __int8 *)v10 + v63;
                int v65 = 255;
                if ((unint64_t)v10 + v63 < v6 && v64 >= (unsigned __int8 *)v5) {
                  int v65 = *v64;
                }
                unsigned int v60 = v65 | (v60 << 8);
                ++v63;
              }
              while (v63 != 4);
            }
            v53.n128_u32[1] = v61 + 32;
            ++v10;
            v59 |= v60 >> v61;
            if (v61 == -32) {
              unsigned __int32 v62 = 0;
            }
            else {
              unsigned __int32 v62 = v60 << -(char)v61;
            }
          }
          else
          {
            unsigned __int32 v62 = v53.n128_u32[0] << v49;
          }
          v53.n128_u32[0] = v62;
        }
        else
        {
          unsigned int v59 = 0;
        }
        *(_DWORD *)(v57 + 4 * v54++) = (v59 >> v55) & v56;
      }
      while (v54 != v58);
    }
    *((unsigned char *)this + 510) = 1;
    uint64_t v66 = *((void *)this + 1);
    uint64_t v67 = *(void *)(v66 + 48);
    uint64_t v68 = *(void *)(v66 + 56);
    uint64_t v69 = v68 - v67;
    if (v68 != v67)
    {
      unint64_t v70 = 0;
      unint64_t v71 = v69 >> 2;
      unsigned int v72 = 1;
      do
      {
        int v73 = *(_DWORD *)(v67 + 4 * v70);
        unint64_t v70 = v72++;
      }
      while (v73 != 1296845908 && v71 > v70);
      if (v73 == 1296845908)
      {
        int v77 = 0;
        uint64_t v75 = *(void (**)(void, void, uint64_t, int *, __n128))(v66 + 24);
        if (v75) {
          v75(*(void *)(v66 + 40), *(unsigned int *)(v66 + 8), 1296845908, &v77, v53);
        }
      }
    }
  }
}

void ID3FileStream::EndOfFrame(ID3FileStream *this)
{
  *((_DWORD *)this + 86) += *((_DWORD *)this + 103);
  uint64_t v2 = (const void *)*((void *)this + 44);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 44) = 0;
  }
  if (*((unsigned char *)this + 508))
  {
    unsigned int v3 = (CACFDictionary *)*((void *)this + 46);
    if (v3)
    {
      CACFDictionary::~CACFDictionary(v3);
      MEMORY[0x192FC8940]();
      *((void *)this + 46) = 0;
    }
  }
  uint64_t v4 = (void *)*((void *)this + 55);
  if (v4)
  {
    free(v4);
    *((void *)this + 55) = 0;
  }
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  int v5 = (void *)*((void *)this + 62);
  if (v5)
  {
    free(v5);
    *((void *)this + 62) = 0;
  }
}

uint64_t ID3FileStream::GetProperty(ID3FileStream *this, int a2, unsigned int *a3, _DWORD *__dst)
{
  if (a2 <= 1768842862)
  {
    if (a2 != 1280922179)
    {
      if (a2 != 1768174433)
      {
        if (a2 == 1768174437)
        {
          if (*a3 == 4)
          {
            uint64_t result = 0;
            *uint64_t __dst = *((_DWORD *)this + 112);
            return result;
          }
          return 561211770;
        }
        goto LABEL_29;
      }
      if (*a3 == 8)
      {
        uint64_t result = 0;
        CFTypeRef v9 = (CFTypeRef)*((void *)this + 57);
LABEL_34:
        *(void *)uint64_t __dst = v9;
        return result;
      }
      return 561211770;
    }
    if (*a3 != 8) {
      return 561211770;
    }
    CFDictionaryRef v8 = (const __CFDictionary *)*((void *)this + 44);
    if (v8)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(v8, @"text");
      *(void *)uint64_t __dst = result;
      if (!result) {
        return result;
      }
      CFRetain((CFTypeRef)result);
      return 0;
    }
    return 1836020325;
  }
  switch(a2)
  {
    case 1768842863:
      if (*a3 != 8) {
        return 561211770;
      }
      uint64_t result = 1836020325;
      if (!*((unsigned char *)this + 508)) {
        return result;
      }
      int v7 = (CFTypeRef *)*((void *)this + 46);
      if (!v7) {
        return result;
      }
      goto LABEL_22;
    case 1819243876:
      if (*a3 != 8) {
        return 561211770;
      }
      CFStringRef v10 = (CFTypeRef *)*((void *)this + 47);
      if (!v10)
      {
        if (*((void *)this + 45))
        {
          CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          __int16 v13 = 257;
          AudioFileGetLoudnessInfoFromSoundCheckDictionary(*((CFDictionaryRef **)this + 45), (CACFDictionary *)&cf);
          if (cf)
          {
            CFRetain(cf);
            CFTypeRef v11 = cf;
          }
          else
          {
            CFTypeRef v11 = 0;
          }
          *(void *)uint64_t __dst = v11;
          CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
          return 0;
        }
        return 1836020325;
      }
      if (*v10)
      {
        CFRetain(*v10);
        CFTypeRef v9 = *v10;
        goto LABEL_33;
      }
LABEL_32:
      CFTypeRef v9 = 0;
      goto LABEL_33;
    case 1935893603:
      if (*a3 != 8) {
        return 561211770;
      }
      int v7 = (CFTypeRef *)*((void *)this + 45);
      if (!v7) {
        return 1836020325;
      }
LABEL_22:
      if (*v7)
      {
        CFRetain(*v7);
        CFTypeRef v9 = *v7;
LABEL_33:
        uint64_t result = 0;
        goto LABEL_34;
      }
      goto LABEL_32;
  }
LABEL_29:
  return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
}

void sub_19000719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ID3FileStream::GetPropertyInfo(ID3FileStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 > 1768842862)
  {
    if (a2 != 1768842863 && a2 != 1819243876 && a2 != 1935893603) {
      return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
    }
  }
  else if (a2 != 1280922179 && a2 != 1768174433)
  {
    if (a2 == 1768174437)
    {
      if (a3)
      {
        unsigned int v4 = 4;
LABEL_12:
        *a3 = v4;
        goto LABEL_13;
      }
      goto LABEL_13;
    }
    return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a3)
  {
    unsigned int v4 = 8;
    goto LABEL_12;
  }
LABEL_13:
  if (a4) {
    *a4 = 0;
  }
  return 0;
}

void ID3FileStream::~ID3FileStream(ID3FileStream *this)
{
  ID3FileStream::~ID3FileStream(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  const void *v3;
  CACFDictionary *v4;
  CACFDictionary *v5;
  CACFDictionary *v6;
  CACFDictionary *v7;
  void *v8;
  const void *v9;
  const void *v10;
  void *v11;
  void *v12;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8E140;
  uint64_t v2 = *((void *)this + 42);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v3 = (const void *)*((void *)this + 44);
  if (v3) {
    CFRelease(v3);
  }
  unsigned int v4 = (CACFDictionary *)*((void *)this + 45);
  if (v4)
  {
    CACFDictionary::~CACFDictionary(v4);
    MEMORY[0x192FC8940]();
  }
  int v5 = (CACFDictionary *)*((void *)this + 46);
  if (v5)
  {
    CACFDictionary::~CACFDictionary(v5);
    MEMORY[0x192FC8940]();
  }
  unint64_t v6 = (CACFDictionary *)*((void *)this + 47);
  if (v6)
  {
    CACFDictionary::~CACFDictionary(v6);
    MEMORY[0x192FC8940]();
  }
  int v7 = (CACFDictionary *)*((void *)this + 48);
  if (v7)
  {
    CACFDictionary::~CACFDictionary(v7);
    MEMORY[0x192FC8940]();
  }
  CFDictionaryRef v8 = (void *)*((void *)this + 55);
  if (v8) {
    free(v8);
  }
  CFTypeRef v9 = (const void *)*((void *)this + 60);
  if (v9) {
    CFRelease(v9);
  }
  CFStringRef v10 = (const void *)*((void *)this + 61);
  if (v10) {
    CFRelease(v10);
  }
  CFTypeRef v11 = (void *)*((void *)this + 62);
  if (v11) {
    free(v11);
  }
  if (*((unsigned char *)this + 616)) {
    AudioFileAllowListFilter::~AudioFileAllowListFilter((ID3FileStream *)((char *)this + 544));
  }
  if (*((unsigned char *)this + 536))
  {
    int v12 = (void *)*((void *)this + 64);
    if (v12)
    {
      *((void *)this + 65) = v12;
      operator delete(v12);
    }
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

void ID3FileFormat::NewStream(ID3FileFormat *this)
{
}

uint64_t ID3FileFormat::New(ID3FileFormat *this)
{
  return 0;
}

uint64_t ID3FileFormat::GetHFSCodes(ID3FileFormat *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 0;
}

uint64_t ID3FileFormat::GetAvailableStreamDescriptions(ID3FileFormat *this, unsigned int a2, unsigned int *a3, void *a4)
{
  *a3 = 0;
  return 0;
}

uint64_t ID3FileFormat::GetAvailableFormatIDs(ID3FileFormat *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 0;
}

void ID3FileFormat::GetFileTypeName(ID3FileFormat *this, const __CFString **a2)
{
  *a2 = 0;
}

void ID3FileFormat::GetExtensions(ID3FileFormat *this, const __CFArray **a2)
{
  *a2 = 0;
}

uint64_t ID3FileFormat::FileDataIsThisFormat(ID3FileFormat *this, unsigned int a2, unsigned char *a3)
{
  if (a2 < 3) {
    return 0xFFFFFFFFLL;
  }
  if (*(_WORD *)a3 == 17481 && a3[2] == 51) {
    return 1;
  }
  return *(_WORD *)a3 == 16724 && a3[2] == 71;
}

uint64_t ID3FileFormat::ExtensionIsThisFormat(ID3FileFormat *this, const __CFString *a2)
{
  return 0;
}

void ID3FileFormat::~ID3FileFormat(ID3FileFormat *this)
{
}

uint64_t std::optional<AudioFileAllowListFilter>::operator=[abi:ne180100]<AudioFileAllowListFilter const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    AudioFileAllowListFilter::operator=(a1, a2);
  }
  else
  {
    *(unsigned char *)(a1 + 64) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 25) = 0u;
    AudioFileAllowListFilter::operator=(a1, a2);
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_190007610(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 64))
  {
    unsigned int v3 = *(void **)(v1 + 40);
    if (v3)
    {
      *(void *)(v1 + 48) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileObject::ScanForPackets(AudioFileObject *this, uint64_t a2, DataSource *a3)
{
  if ((*(uint64_t (**)(AudioFileObject *, uint64_t, DataSource *))(*(void *)this + 240))(this, a2, a3) >= a2) {
    return 0;
  }
  else {
    return 4294967257;
  }
}

BOOL NextAudioFile::IsDataFormatSupported(NextAudioFile *this, const AudioStreamBasicDescription *a2)
{
  MakeSNDSoundStruct((uint64_t)a2, (uint64_t)v4);
  return v2 == 0;
}

double MakeSNDSoundStruct(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1634492791)
  {
    int v7 = 27;
    goto LABEL_15;
  }
  if (v2 == 1970037111)
  {
    int v7 = 1;
    goto LABEL_15;
  }
  if (v2 != 1819304813) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 12);
  int v4 = *(_DWORD *)(a1 + 32);
  if ((v3 & 1) == 0)
  {
    HIDWORD(v5) = *(_DWORD *)(a1 + 32);
    LODWORD(v5) = v4 - 8;
    int v6 = 3;
    int v7 = 2;
    switch((v5 >> 3))
    {
      case 0u:
        goto LABEL_15;
      case 1u:
        goto LABEL_14;
      case 2u:
        int v6 = 4;
        goto LABEL_14;
      case 3u:
        int v6 = 5;
        goto LABEL_14;
      default:
        return result;
    }
    return result;
  }
  if (v4 == 32)
  {
    int v6 = 6;
  }
  else
  {
    if (v4 != 64) {
      return result;
    }
    int v6 = 7;
  }
LABEL_14:
  int v7 = v6;
  if ((v3 & 2) != 0)
  {
LABEL_15:
    int v8 = (int)*(double *)a1;
    unsigned int v9 = *(_DWORD *)(a1 + 28);
    *(void *)&double result = 0x1C2E736E64;
    *(void *)a2 = 0x1C2E736E64;
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v7;
    *(_DWORD *)(a2 + 16) = v8;
    *(void *)(a2 + 20) = v9;
  }
  return result;
}

uint64_t NextAudioFile::UpdateSize(NextAudioFile *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (*(uint64_t (**)(NextAudioFile *))(*(void *)this + 224))(this);
  *((_DWORD *)this + 37) = v2;
  int v8 = 0;
  unsigned int v9 = bswap32(v2);
  uint64_t v3 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, int *))(**((void **)this + 13)
                                                                                          + 56))(*((void *)this + 13), 0, 8, 4, &v9, &v8);
  if (v3)
  {
    uint64_t v4 = v3;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      CFTypeRef v11 = "NextAudioFile.cpp";
      __int16 v12 = 1024;
      int v13 = 336;
      unint64_t v5 = MEMORY[0x1E4F14500];
      int v6 = "%25s:%-5d  WriteBytes Failed";
LABEL_7:
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
    }
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(void, void))(**((void **)this + 13) + 32))(*((void *)this + 13), (*((_DWORD *)this + 37) + *((_DWORD *)this + 36)));
    if (v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      CFTypeRef v11 = "NextAudioFile.cpp";
      __int16 v12 = 1024;
      int v13 = 339;
      unint64_t v5 = MEMORY[0x1E4F14500];
      int v6 = "%25s:%-5d  SetSize Failed";
      goto LABEL_7;
    }
  }
  return v4;
}

void NextAudioFile::UpdateDataFormat(NextAudioFile *this, const AudioStreamBasicDescription *a2)
{
  double SNDSoundStruct = MakeSNDSoundStruct((uint64_t)a2, (uint64_t)&v13);
  if (!v5
    && !(*(unsigned int (**)(NextAudioFile *, const AudioStreamBasicDescription *, double))(*(void *)this + 176))(this, a2, SNDSoundStruct))
  {
    unsigned int v6 = v14;
    unsigned int v7 = v15;
    *((_DWORD *)this + 39) = v14;
    *((_DWORD *)this + 40) = v7;
    int8x16_t v8 = v13;
    *((_DWORD *)this + 38) = v13.i32[3];
    int8x16_t v9 = vrev32q_s8(v8);
    unsigned int v10 = bswap32(v6);
    unsigned int v11 = bswap32(v7);
    int v12 = v16;
    (*(void (**)(void, void, uint64_t, uint64_t, unint64_t, void))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, 12, 12, (unint64_t)&v9 | 0xC, 0);
  }
}

uint64_t NextAudioFile::InitializeDataSource(NextAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3 = 0;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  AudioFormatID mFormatID = a2->mFormatID;
  do
  {
    int v5 = *(_DWORD *)&sNextFormatIDs[v3];
    BOOL v6 = v5 == mFormatID || v3 == 8;
    v3 += 4;
  }
  while (!v6);
  if (v5 != mFormatID) {
    return 1718449215;
  }
  MakeSNDSoundStruct((uint64_t)a2, (uint64_t)this + 140);
  uint64_t v8 = v7;
  if (v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      unsigned int v11 = "NextAudioFile.cpp";
      __int16 v12 = 1024;
      int v13 = 318;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  MakeSNDSoundStruct Failed", (uint8_t *)&v10, 0x12u);
    }
  }
  else
  {
    NextAudioFile::WriteHeader(this);
  }
  return v8;
}

void NextAudioFile::WriteHeader(NextAudioFile *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *((void *)this + 9) = 28;
  int8x16_t v2 = vrev32q_s8(*(int8x16_t *)((char *)this + 140));
  int8x8_t v3 = vrev32_s8(*(int8x8_t *)((char *)this + 156));
  int v4 = *((_DWORD *)this + 41);
  int v1 = 0;
  if ((*(unsigned int (**)(void, void, void, uint64_t, int8x16_t *, int *))(**((void **)this + 13)
                                                                                           + 56))(*((void *)this + 13), 0, 0, 28, &v2, &v1))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      BOOL v6 = "NextAudioFile.cpp";
      __int16 v7 = 1024;
      int v8 = 388;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  WriteBytes Failed", buf, 0x12u);
    }
  }
}

uint64_t NextAudioFile::OpenFromDataSource(NextAudioFile *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v10 = 0;
  uint64_t v2 = (*(uint64_t (**)(void, void, void, uint64_t, char *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, 0, 28, (char *)this + 140, &v10);
  int8x16_t v3 = vrev32q_s8(*(int8x16_t *)((char *)this + 140));
  *(int8x16_t *)((char *)this + 140) = v3;
  int8x8_t v4 = vrev32_s8(*(int8x8_t *)((char *)this + 156));
  *(int8x8_t *)((char *)this + 156) = v4;
  if (v2)
  {
    uint64_t v5 = v2;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v12 = "NextAudioFile.cpp";
      __int16 v13 = 1024;
      v14[0] = 367;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes Failed", buf, 0x12u);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v12 = "NextAudioFile.cpp";
      __int16 v13 = 1024;
      v14[0] = 300;
      BOOL v6 = MEMORY[0x1E4F14500];
      __int16 v7 = "%25s:%-5d  NextAudioFile::OpenFromDataSource - ReadHeader Failed";
LABEL_12:
      _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, v7, buf, 0x12u);
    }
  }
  else
  {
    if (v4.i32[0] >= 0xFFFF0000) {
      *((_DWORD *)this + 39) = v4.u16[0];
    }
    *((void *)this + 9) = v3.u32[1];
    uint64_t v5 = ASBDfromSNDSoundStruct((_DWORD *)this + 35, (uint64_t)buf);
    if (v5
      || (uint64_t v5 = (*(uint64_t (**)(NextAudioFile *, uint8_t *))(*(void *)this + 176))(this, buf), v5))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        __int16 v12 = "NextAudioFile.cpp";
        __int16 v13 = 1024;
        v14[0] = 303;
        BOOL v6 = MEMORY[0x1E4F14500];
        __int16 v7 = "%25s:%-5d  NextAudioFile::OpenFromDataSource - ParseHeader Failed";
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v9 = *((_DWORD *)this + 37);
      if (v9 == -1)
      {
        (*(void (**)(void, char *))(**((void **)this + 13) + 16))(*((void *)this + 13), (char *)this + 148);
        unsigned int v9 = *((_DWORD *)this + 37);
      }
      (*(void (**)(NextAudioFile *, void))(*(void *)this + 232))(this, v9);
      (*(void (**)(NextAudioFile *, void))(*(void *)this + 248))(this, (*((_DWORD *)this + 37) / *(_DWORD *)((char *)v14 + 2)));
      (*(void (**)(NextAudioFile *, void))(*(void *)this + 648))(this, *(_DWORD *)((char *)v14 + 2));
      return 0;
    }
  }
  return v5;
}

uint64_t ASBDfromSNDSoundStruct(_DWORD *a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 12) = 10;
  *(double *)a2 = (double)a1[4];
  int v2 = a1[5];
  *(_DWORD *)(a2 + 28) = v2;
  *(_DWORD *)(a2 + 20) = 1;
  int v3 = a1[3];
  switch(v3)
  {
    case 1:
      int v4 = 1970037111;
      goto LABEL_5;
    case 2:
      *(void *)(a2 + 8) = 0xE6C70636DLL;
      goto LABEL_7;
    case 3:
      *(void *)(a2 + 8) = 0xE6C70636DLL;
      int v5 = 2;
      int v6 = 16;
      goto LABEL_14;
    case 4:
      *(void *)(a2 + 8) = 0xE6C70636DLL;
      int v5 = 3;
      int v6 = 24;
      goto LABEL_14;
    case 5:
      uint64_t v7 = 0xE6C70636DLL;
      goto LABEL_12;
    case 6:
      uint64_t v7 = 0xB6C70636DLL;
LABEL_12:
      *(void *)(a2 + 8) = v7;
      int v5 = 4;
      int v6 = 32;
      goto LABEL_14;
    case 7:
      *(void *)(a2 + 8) = 0xB6C70636DLL;
      int v5 = 8;
      int v6 = 64;
      goto LABEL_14;
    default:
      if (v3 != 27) {
        return 1718449215;
      }
      int v4 = 1634492791;
LABEL_5:
      *(_DWORD *)(a2 + 8) = v4;
LABEL_7:
      int v5 = 1;
      int v6 = 8;
LABEL_14:
      uint64_t result = 0;
      *(_DWORD *)(a2 + 32) = v6;
      int v9 = v5 * v2;
      *(_DWORD *)(a2 + 24) = v9;
      *(_DWORD *)(a2 + 16) = v9;
      return result;
  }
}

void NextAudioFile::Create(NextAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v6 = 0;
  AudioFormatID mFormatID = a3->mFormatID;
  do
  {
    int v8 = *(_DWORD *)&sNextFormatIDs[v6];
    BOOL v9 = v8 == mFormatID || v6 == 8;
    v6 += 4;
  }
  while (!v9);
  if (v8 == mFormatID)
  {
    MakeSNDSoundStruct((uint64_t)a3, (uint64_t)this + 140);
    if (!v10 && !AudioFileObject::Create(this, a2, a3))
    {
      (*(void (**)(NextAudioFile *, void))(*(void *)this + 648))(this, a3->mBytesPerFrame);
      NextAudioFile::WriteHeader(this);
    }
  }
}

void NextAudioFile::~NextAudioFile(NextAudioFile *this)
{
  AudioFileObject::~AudioFileObject(this);
  JUMPOUT(0x192FC8940);
}

void NextAudioFormat::NewStream(NextAudioFormat *this)
{
}

void NextAudioFormat::New(NextAudioFormat *this)
{
}

uint64_t NextAudioFormat::GetHFSCodes(NextAudioFormat *this, unsigned int *a2, void *__dst)
{
  __src[2] = *MEMORY[0x1E4F143B8];
  qmemcpy(__src, "sTxNTXeNSTxN", 12);
  unsigned int v3 = *a2 >> 2;
  if (v3 >= 3) {
    unsigned int v3 = 3;
  }
  size_t v4 = 4 * v3;
  *a2 = v4;
  if (__dst) {
    memcpy(__dst, __src, v4);
  }
  return 0;
}

uint64_t NextAudioFormat::GetAvailableStreamDescriptions(NextAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v6 = 1634492791;
  if (a2 == 1634492791 || (int v6 = 1970037111, a2 == 1970037111))
  {
    *(void *)&long long v15 = 0;
    long long outPropertyData = 0u;
    long long v14 = 0u;
    DWORD2(outPropertyData) = v6;
    UInt32 ioPropertyDataSize = 40;
    AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, &outPropertyData);
    unsigned int v9 = 1;
  }
  else
  {
    if (a2 != 1819304813)
    {
      *a3 = 0;
      return 1718449215;
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v7 = (_DWORD *)&v14 + 1;
    long long outPropertyData = 0u;
    long long v14 = 0u;
    uint64_t v8 = -32;
    do
    {
      *(void *)(v7 - 3) = 0xE6C70636DLL;
      _OWORD v7[3] = v8 + 40;
      *uint64_t v7 = 1;
      v7 += 10;
      v8 += 8;
    }
    while (v8);
    *((void *)&v23 + 1) = 0xB6C70636DLL;
    LODWORD(v25) = 32;
    DWORD1(v24) = 1;
    *(void *)&long long v26 = 0xB6C70636DLL;
    DWORD2(v27) = 64;
    HIDWORD(v26) = 1;
    unsigned int v9 = 6;
  }
  if (*a3 / 0x28 < v9) {
    unsigned int v9 = *a3 / 0x28;
  }
  size_t v10 = 40 * v9;
  *a3 = v10;
  if (__dst) {
    memcpy(__dst, &outPropertyData, v10);
  }
  return 0;
}

uint64_t NextAudioFormat::GetAvailableFormatIDs(NextAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v3 = *a2 >> 2;
  if (v3 >= 3) {
    unsigned int v3 = 3;
  }
  size_t v4 = 4 * v3;
  *a2 = v4;
  if (__dst) {
    memcpy(__dst, "mcplwaluwala", v4);
  }
  return 0;
}

void NextAudioFormat::GetFileTypeName(NextAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  unsigned int v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    unsigned int v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_5:
    CFStringRef v4 = (const __CFString *)CFRetain(@"NeXT/Sun");
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle) {
    goto LABEL_5;
  }
LABEL_3:
  CFStringRef v4 = CFBundleCopyLocalizedString(v3, @"NeXT/Sun", @"NeXT/Sun", @"FileTypeNames");
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_19000867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *NextAudioFormat::GetMIMETypes(NextAudioFormat *this, const __CFArray **a2)
{
  v4[3] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"audio/basic";
  v4[1] = @"audio/au";
  v4[2] = @"audio/snd";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 3, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *NextAudioFormat::GetUTIs(NextAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"public.au-audio";
  values[1] = @"public.ulaw-audio";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *NextAudioFormat::GetExtensions(NextAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"snd";
  values[1] = @"au";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

BOOL NextAudioFormat::FileDataIsThisFormat(NextAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  return a2 >= 4 && *a3 == 1684960046;
}

BOOL NextAudioFormat::ExtensionIsThisFormat(NextAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3 = 1;
  if (CFStringCompare(theString1, @"snd", 1uLL)) {
    return CFStringCompare(theString1, @"au", 1uLL) == kCFCompareEqualTo;
  }
  return v3;
}

void NextAudioFormat::~NextAudioFormat(NextAudioFormat *this)
{
}

void CA::AudioMetadataDeserializer::AudioMetadataDeserializer(CA::AudioMetadataDeserializer *this, AudioMetadataMemoryPool *a2)
{
}

{
  operator new();
}

double CA::AudioMetadataDeserializer::Impl::Impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 576) = 1065353216;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 616) = 1065353216;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_DWORD *)(a1 + 656) = 1065353216;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_DWORD *)(a1 + 736) = 1065353216;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 776) = 1065353216;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 1065353216;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = 1065353216;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_DWORD *)(a1 + 896) = 1065353216;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_DWORD *)(a1 + 936) = 1065353216;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_DWORD *)(a1 + 976) = 1065353216;
  return result;
}

void CA::AudioMetadataDeserializer::~AudioMetadataDeserializer(CA::AudioMetadataDeserializer *this)
{
}

{
  std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t *std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 944);
    *(void *)(v2 + 944) = 0;
    if (v3) {
      operator delete(v3);
    }
    CFStringRef v4 = *(void **)(v2 + 920);
    if (v4)
    {
      do
      {
        char v5 = (void *)*v4;
        operator delete(v4);
        CFStringRef v4 = v5;
      }
      while (v5);
    }
    int v6 = *(void **)(v2 + 904);
    *(void *)(v2 + 904) = 0;
    if (v6) {
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(v2 + 760);
    if (v7)
    {
      do
      {
        uint64_t v8 = (void *)*v7;
        operator delete(v7);
        uint64_t v7 = v8;
      }
      while (v8);
    }
    unsigned int v9 = *(void **)(v2 + 744);
    *(void *)(v2 + 744) = 0;
    if (v9) {
      operator delete(v9);
    }
    size_t v10 = *(void **)(v2 + 704);
    *(void *)(v2 + 704) = 0;
    if (v10) {
      operator delete(v10);
    }
    unsigned int v11 = *(void **)(v2 + 424);
    *(void *)(v2 + 424) = 0;
    if (v11) {
      operator delete(v11);
    }
    __int16 v12 = *(void **)(v2 + 400);
    if (v12)
    {
      do
      {
        __int16 v13 = (void *)*v12;
        operator delete(v12);
        __int16 v12 = v13;
      }
      while (v13);
    }
    long long v14 = *(void **)(v2 + 384);
    *(void *)(v2 + 384) = 0;
    if (v14) {
      operator delete(v14);
    }
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 208));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 184));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 160));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 136));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 112));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 88));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 64));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 40));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(v2 + 16));
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<anonymous namespace'::BlockFormatID,std::vector<anonymous namespace'::FormatID>>,std::__unordered_map_hasher<anonymous namespace'::BlockFormatID,std::__hash_value_type<anonymous namespace'::BlockFormatID,std::vector<anonymous namespace'::FormatID>>,std::hash<anonymous namespace'::BlockFormatID>,std::equal_to<anonymous namespace'::BlockFormatID>,true>,std::__unordered_map_equal<anonymous namespace'::BlockFormatID,std::__hash_value_type<anonymous namespace'::BlockFormatID,std::vector<anonymous namespace'::FormatID>>,std::equal_to<anonymous namespace'::BlockFormatID>,std::hash<anonymous namespace'::BlockFormatID>,true>,std::allocator<std::__hash_value_type<anonymous namespace'::BlockFormatID,std::vector<anonymous namespace'::FormatID>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    int v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      int v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<anonymous namespace'::FormatID,std::vector<anonymous namespace'::FormatID>>,std::__unordered_map_hasher<anonymous namespace'::FormatID,std::__hash_value_type<anonymous namespace'::FormatID,std::vector<anonymous namespace'::FormatID>>,std::hash<anonymous namespace'::FormatID>,std::equal_to<anonymous namespace'::FormatID>,true>,std::__unordered_map_equal<anonymous namespace'::FormatID,std::__hash_value_type<anonymous namespace'::FormatID,std::vector<anonymous namespace'::FormatID>>,std::equal_to<anonymous namespace'::FormatID>,std::hash<anonymous namespace'::FormatID>,true>,std::allocator<std::__hash_value_type<anonymous namespace'::FormatID,std::vector<anonymous namespace'::FormatID>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *CA::AudioMetadataDeserializer::AudioMetadataDeserializer(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *double result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *double result = v2;
  return result;
}

uint64_t *CA::AudioMetadataDeserializer::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100](a1, v3);
  return a1;
}

uint64_t CA::AudioMetadataDeserializer::deserialize(uint64_t *a1, _anonymous_namespace_ *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  return CA::AudioMetadataDeserializer::Impl::deserialize(*a1, a2, a3, a4, a5);
}

uint64_t CA::AudioMetadataDeserializer::Impl::deserialize(uint64_t a1, _anonymous_namespace_ *this, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  unint64_t v111 = 0;
  unsigned __int8 v110 = 0;
  if (v9)
  {
    uint64_t v11 = v9;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 503;
      __int16 v13 = "%25s:%-5d ...at packet version/type";
      goto LABEL_4;
    }
    return v11;
  }
  unsigned int v16 = v110;
  if (v110 >= 4u)
  {
    uint64_t v11 = 4294900723;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return v11;
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 508;
    __int16 v114 = 1024;
    *(_DWORD *)unsigned int v115 = v16 >> 2;
    __int16 v13 = "%25s:%-5d Unsupported packet version (%d)";
LABEL_12:
    long long v14 = v17;
    uint32_t v15 = 24;
    goto LABEL_13;
  }
  if (v110 != 2)
  {
    if (v110 == 3)
    {
      uint64_t v11 = 4294900722;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        return v11;
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 517;
      __int16 v114 = 1024;
      *(_DWORD *)unsigned int v115 = 3;
      __int16 v13 = "%25s:%-5d Unknown packet type (%d)";
      goto LABEL_12;
    }
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(a1 + 16));
    *(void *)(a1 + 8) = a1 + 16;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 16) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(a1 + 40));
    *(void *)(a1 + 32) = a1 + 40;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(a1 + 64));
    *(void *)(a1 + 56) = a1 + 64;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 64) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(a1 + 88));
    *(void *)(a1 + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = a1 + 88;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 88) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(a1 + 112));
    *(void *)(a1 + 104) = a1 + 112;
    *(void *)(a1 + 12std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    *(void *)(a1 + 112) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(a1 + 136));
    *(void *)(a1 + 128) = a1 + 136;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 136) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(void **)(a1 + 160));
    long long v19 = *(void **)(a1 + 184);
    *(void *)(a1 + 152) = a1 + 160;
    *(void *)(a1 + 16std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    *(void *)(a1 + 168) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(v19);
    *(void *)(a1 + 176) = a1 + 184;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 224);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 264);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 304);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 344);
    if (*(void *)(a1 + 408))
    {
      long long v20 = *(void **)(a1 + 400);
      if (v20)
      {
        do
        {
          long long v21 = (void *)*v20;
          operator delete(v20);
          long long v20 = v21;
        }
        while (v21);
      }
      *(void *)(a1 + 40std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      uint64_t v22 = *(void *)(a1 + 392);
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(void *)(*(void *)(a1 + 384) + 8 * i) = 0;
      }
      *(void *)(a1 + 408) = 0;
    }
    if (*(void *)(a1 + 448))
    {
      *(void *)(a1 + 44std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      uint64_t v24 = *(void *)(a1 + 432);
      if (v24)
      {
        for (uint64_t j = 0; j != v24; ++j)
          *(void *)(*(void *)(a1 + 424) + 8 * j) = 0;
      }
      *(void *)(a1 + 448) = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 464);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 504);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 544);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 584);
    if (*(void *)(a1 + 728))
    {
      *(void *)(a1 + 72std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      uint64_t v26 = *(void *)(a1 + 712);
      if (v26)
      {
        for (uint64_t k = 0; k != v26; ++k)
          *(void *)(*(void *)(a1 + 704) + 8 * k) = 0;
      }
      *(void *)(a1 + 728) = 0;
    }
    if (*(void *)(a1 + 768))
    {
      uint64_t v28 = *(void **)(a1 + 760);
      if (v28)
      {
        do
        {
          int v29 = (void *)*v28;
          operator delete(v28);
          uint64_t v28 = v29;
        }
        while (v29);
      }
      *(void *)(a1 + 76std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      uint64_t v30 = *(void *)(a1 + 752);
      if (v30)
      {
        for (uint64_t m = 0; m != v30; ++m)
          *(void *)(*(void *)(a1 + 744) + 8 * m) = 0;
      }
      *(void *)(a1 + 768) = 0;
    }
    if (*(void *)(a1 + 928))
    {
      uint64_t v32 = *(void **)(a1 + 920);
      if (v32)
      {
        do
        {
          uint64_t v33 = (void *)*v32;
          operator delete(v32);
          uint64_t v32 = v33;
        }
        while (v33);
      }
      *(void *)(a1 + 92std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      uint64_t v34 = *(void *)(a1 + 912);
      if (v34)
      {
        for (uint64_t n = 0; n != v34; ++n)
          *(void *)(*(void *)(a1 + 904) + 8 * n) = 0;
      }
      *(void *)(a1 + 928) = 0;
    }
    if (*(void *)(a1 + 968))
    {
      *(void *)(a1 + 96std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      uint64_t v36 = *(void *)(a1 + 952);
      if (v36)
      {
        for (iuint64_t i = 0; ii != v36; ++ii)
          *(void *)(*(void *)(a1 + 944) + 8 * ii) = 0;
      }
      *(void *)(a1 + 968) = 0;
    }
  }
  unint64_t v109 = 0;
  if (v38)
  {
    uint64_t v11 = v38;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 552;
      __int16 v13 = "%25s:%-5d ...at packet element count";
      goto LABEL_4;
    }
    return v11;
  }
  uint64_t v101 = a4;
  unint64_t v103 = v109;
  if (!v109)
  {
LABEL_133:
    AudioMetadataMemoryPool::create<AudioMetadataFormatExtended>(buf, *(void *)a1);
    uint64_t v68 = *(std::__shared_weak_count **)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)buf;
    if (v68) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v68);
    }
    memset(v108, 0, sizeof(v108));
    uint64_t v69 = *(void *)(a1 + 8);
    if (v69 == a1 + 16)
    {
      int v95 = *(atomic_ullong **)(v101 + 8);
      v107[3] = *(void **)v101;
      v107[4] = v95;
      if (v95) {
        atomic_fetch_add_explicit(v95 + 1, 1uLL, memory_order_relaxed);
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataProgramme,AudioMetadataProgrammeRefs,AudioMetadataFormatExtended>();
    }
    unint64_t v70 = (uint64_t *)(a1 + 40);
    uint64_t v105 = 0;
    std::string __p = 0;
    unint64_t v106 = 0;
    unint64_t v71 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)(a1 + 224), *(_WORD *)(v69 + 32), (_WORD *)(v69 + 32));
    unsigned int v72 = (unsigned __int16 *)v71[3];
    int v73 = (unsigned __int16 *)v71[4];
    if (v72 == v73)
    {
LABEL_166:
      unsigned int v91 = *(atomic_ullong **)(v69 + 48);
      v107[5] = *(void **)(v69 + 40);
      v107[6] = v91;
      if (v91) {
        atomic_fetch_add_explicit(v91 + 1, 1uLL, memory_order_relaxed);
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataProgramme>();
    }
    int v74 = 0;
    while (1)
    {
      uint64_t v75 = *v70;
      if (!*v70) {
        break;
      }
      unsigned int v76 = *v72;
      uint64_t v77 = a1 + 40;
      do
      {
        unsigned int v78 = *(unsigned __int16 *)(v75 + 32);
        BOOL v79 = v78 >= v76;
        if (v78 >= v76) {
          unint64_t v80 = (uint64_t *)v75;
        }
        else {
          unint64_t v80 = (uint64_t *)(v75 + 8);
        }
        if (v79) {
          uint64_t v77 = v75;
        }
        uint64_t v75 = *v80;
      }
      while (*v80);
      if ((uint64_t *)v77 == v70 || v76 < *(unsigned __int16 *)(v77 + 32)) {
        break;
      }
      uint64_t v81 = *(void *)(v77 + 40);
      if ((unint64_t)v74 >= v106)
      {
        int v83 = (char *)__p;
        uint64_t v84 = (v74 - (unsigned char *)__p) >> 3;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v86 = v106 - (void)__p;
        if ((uint64_t)(v106 - (void)__p) >> 2 > v85) {
          unint64_t v85 = v86 >> 2;
        }
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v85;
        }
        if (v87) {
          unint64_t v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v87);
        }
        else {
          uint64_t v88 = 0;
        }
        int v89 = (char *)(v87 + 8 * v84);
        *(void *)int v89 = v81;
        __n128 v82 = v89 + 8;
        if (v74 != v83)
        {
          do
          {
            uint64_t v90 = *((void *)v74 - 1);
            v74 -= 8;
            *((void *)v89 - 1) = v90;
            v89 -= 8;
          }
          while (v74 != v83);
          int v74 = (char *)__p;
        }
        std::string __p = v89;
        uint64_t v105 = v82;
        unint64_t v106 = v87 + 8 * v88;
        if (v74) {
          operator delete(v74);
        }
      }
      else
      {
        *(void *)int v74 = v81;
        __n128 v82 = v74 + 8;
      }
      uint64_t v105 = v82;
      ++v72;
      int v74 = v82;
      if (v72 == v73) {
        goto LABEL_166;
      }
    }
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      uint64_t v93 = **(void **)(v69 + 40);
      int v94 = *v72;
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 695;
      __int16 v114 = 2080;
      *(void *)unsigned int v115 = v93;
      *(_WORD *)&v115[8] = 1024;
      int v116 = v94;
      _os_log_impl(&dword_18FEC0000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d Programme %s refers to missing content ACO_%04hx", buf, 0x22u);
    }
    if (__p) {
      operator delete(__p);
    }
    uint64_t v11 = 4294900724;
    if (v108[0]) {
      operator delete((void *)v108[0]);
    }
    return v11;
  }
  uint64_t v40 = 0;
  int v102 = (uint64_t *)(a1 + 64);
  int v100 = (uint64_t *)(a1 + 16);
  while (1)
  {
    if (v16 == 2)
    {
      LOBYTE(__p) = 0;
      if (v41)
      {
        uint64_t v11 = v41;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          return v11;
        }
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 561;
        __int16 v13 = "%25s:%-5d ...at packet status";
        goto LABEL_4;
      }
      int v42 = __p >> 6;
    }
    else
    {
      int v42 = 0;
    }
    LOBYTE(v107[0]) = 0;
    if (v43 {
      || (int v45 = LOBYTE(v107[0]) >> 4,
    }
          LOBYTE(__p) = LOBYTE(v107[0]) >> 4,
          LOWORD(v112.__r_.__value_.__l.__data_) = 0,
          LOBYTE(v107[0]) >= 0x30u)
    {
LABEL_177:
      uint64_t v11 = v43;
LABEL_178:
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 569;
        __int16 v13 = "%25s:%-5d ...at packet element ID";
        goto LABEL_4;
      }
      return v11;
    }
    switch(v45)
    {
      case 0:
      case 1:
      case 2:
        unsigned int data_low = LOWORD(v108[0]);
        WORD2(__p) = v108[0];
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        unsigned int data_low = LOWORD(v112.__r_.__value_.__l.__data_);
        WORD2(__p) = v112.__r_.__value_.__l.__data_;
        HIWORD(__p) = v108[0];
        break;
      case 4:
        buf[0] = 0;
        if (v43) {
          goto LABEL_177;
        }
        unsigned int data_low = LOWORD(v112.__r_.__value_.__l.__data_);
        WORD2(__p) = v112.__r_.__value_.__l.__data_;
        HIWORD(__p) = v108[0];
        LOBYTE(v105) = buf[0];
        break;
      case 8:
        *(_DWORD *)int buf = 0;
        if (v43) {
          goto LABEL_177;
        }
        unsigned int data_low = LOWORD(v112.__r_.__value_.__l.__data_);
        WORD2(__p) = v112.__r_.__value_.__l.__data_;
        HIWORD(__p) = v108[0];
        LODWORD(v105) = *(_DWORD *)buf;
        break;
      default:
        uint64_t v11 = 4294900722;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 296;
          __int16 v114 = 1024;
          *(_DWORD *)unsigned int v115 = v45;
          _os_log_impl(&dword_18FEC0000, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown element type (%d)", buf, 0x18u);
        }
        goto LABEL_178;
    }
    v108[0] = 0;
    if (v48) {
      break;
    }
    if (v42 == 2)
    {
      switch(v45)
      {
        case 0:
          std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>>>::__erase_unique<unsigned short>((uint64_t **)(a1 + 8), data_low);
          goto LABEL_131;
        case 1:
          std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>>>::__erase_unique<unsigned short>((uint64_t **)(a1 + 32), data_low);
          goto LABEL_131;
        case 2:
          std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>>>::__erase_unique<unsigned short>((uint64_t **)(a1 + 56), data_low);
          goto LABEL_131;
        case 3:
          CA::AudioMetadataDeserializer::Impl::expire_stream_format(a1, data_low, HIWORD(__p));
          goto LABEL_131;
        case 4:
          CA::AudioMetadataDeserializer::Impl::expire_track_format(a1, (unsigned __int16 *)&__p + 2);
          goto LABEL_131;
        case 5:
          CA::AudioMetadataDeserializer::Impl::expire_track_uid(a1, data_low, HIWORD(__p));
          goto LABEL_131;
        case 6:
          CA::AudioMetadataDeserializer::Impl::expire_pack_format(a1, data_low, HIWORD(__p));
          goto LABEL_131;
        case 7:
          CA::AudioMetadataDeserializer::Impl::expire_channel_format(a1, data_low, HIWORD(__p));
          goto LABEL_131;
        case 8:
          CA::AudioMetadataDeserializer::Impl::expire_block_format((void *)a1, (unsigned __int16 *)&__p + 2);
LABEL_131:
          a4 = v101;
          goto LABEL_132;
        default:
          uint64_t v11 = 4294900722;
          if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
            goto LABEL_193;
          }
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 668;
          __int16 v114 = 1024;
          *(_DWORD *)unsigned int v115 = v45;
          int v97 = "%25s:%-5d Unknown element type expired (%d)";
          break;
      }
      goto LABEL_192;
    }
    BOOL v50 = (const unsigned __int8 *)(v108[0] + v111);
    if (v42 != 1)
    {
      if (!v42)
      {
        switch(v45)
        {
          case 0:
            CA::AudioMetadataDeserializer::Impl::decode_programme((CA::AudioMetadataDeserializer::Impl *)a1, (const unsigned __int8 *)this, v108[0] + v111, &v111, (const unsigned __int16 *)&__p + 2);
          case 1:
            CA::AudioMetadataDeserializer::Impl::decode_content((CA::AudioMetadataDeserializer::Impl *)a1, (const unsigned __int8 *)this, v108[0] + v111, &v111, (const unsigned __int16 *)&__p + 2);
          case 2:
            CA::AudioMetadataDeserializer::Impl::decode_object((CA::AudioMetadataDeserializer::Impl *)a1, (const unsigned __int8 *)this, v108[0] + v111, &v111, (const unsigned __int16 *)&__p + 2);
          case 3:
            CA::AudioMetadataDeserializer::Impl::decode_stream_format((uint64_t *)a1, (uint64_t)this, v108[0] + v111, (uint64_t)&v111, (unsigned __int16 *)&__p + 2);
          case 4:
            CA::AudioMetadataDeserializer::Impl::decode_track_format((uint64_t *)a1, (uint64_t)this, v108[0] + v111, (uint64_t)&v111, (unsigned __int16 *)&__p + 2);
          case 5:
            CA::AudioMetadataDeserializer::Impl::decode_track_uid((uint64_t *)a1, (uint64_t)this, v108[0] + v111, (uint64_t)&v111, (unsigned __int16 *)&__p + 2);
          case 6:
            CA::AudioMetadataDeserializer::Impl::decode_pack_format((uint64_t *)a1, (uint64_t)this, v108[0] + v111, (uint64_t)&v111, (unsigned __int16 *)&__p + 2);
          case 7:
            CA::AudioMetadataDeserializer::Impl::decode_channel_format((uint64_t *)a1, (uint64_t)this, v108[0] + v111, (uint64_t)&v111, (unsigned __int16 *)&__p + 2);
          case 8:
            v112.__r_.__value_.__s.__data_[0] = 0;
            a4 = v101;
            if (!v67)
            {
              uint64_t v11 = CA::AudioMetadataDeserializer::Impl::decode_block_format((uint64_t *)a1, (uint64_t)this, (uint64_t)v50, (uint64_t)&v111, (unsigned __int16 *)&__p + 2);
              goto LABEL_126;
            }
            uint64_t v11 = v67;
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
              return v11;
            }
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 610;
            __int16 v13 = "%25s:%-5d ...at block format type";
            break;
          default:
            uint64_t v11 = 4294900722;
            if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
              goto LABEL_193;
            }
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 617;
            __int16 v114 = 1024;
            *(_DWORD *)unsigned int v115 = v45;
            int v97 = "%25s:%-5d Unknown element type (%d)";
            goto LABEL_192;
        }
LABEL_4:
        long long v14 = v12;
        uint32_t v15 = 18;
LABEL_13:
        _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
        return v11;
      }
      uint64_t v11 = 4294900722;
      if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
        goto LABEL_193;
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 675;
      __int16 v114 = 1024;
      *(_DWORD *)unsigned int v115 = v42;
      int v97 = "%25s:%-5d Unknown element status (%d)";
LABEL_192:
      _os_log_impl(&dword_18FEC0000, v96, OS_LOG_TYPE_ERROR, v97, buf, 0x18u);
      goto LABEL_193;
    }
    if (v45 == 2)
    {
      a4 = v101;
      uint64_t v59 = *v102;
      if (!*v102) {
        goto LABEL_184;
      }
      uint64_t v60 = a1 + 64;
      do
      {
        unsigned int v61 = *(unsigned __int16 *)(v59 + 32);
        BOOL v62 = v61 >= data_low;
        if (v61 >= data_low) {
          uint64_t v63 = (uint64_t *)v59;
        }
        else {
          uint64_t v63 = (uint64_t *)(v59 + 8);
        }
        if (v62) {
          uint64_t v60 = v59;
        }
        uint64_t v59 = *v63;
      }
      while (*v63);
      if ((uint64_t *)v60 == v102 || data_low < *(unsigned __int16 *)(v60 + 32))
      {
LABEL_184:
        uint64_t v11 = 4294900724;
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2163;
          __int16 v114 = 1024;
          *(_DWORD *)unsigned int v115 = data_low;
          int v97 = "%25s:%-5d Object extension refers to missing object AO_%04hx";
          goto LABEL_192;
        }
LABEL_193:
        if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR)) {
          return v11;
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 680;
        __int16 v114 = 1024;
        *(_DWORD *)unsigned int v115 = v40 + 1;
        *(_WORD *)&v115[4] = 1024;
        *(_DWORD *)&v115[6] = v103;
        __int16 v13 = "%25s:%-5d ...at element #%d of %d";
        long long v14 = v98;
        uint32_t v15 = 30;
        goto LABEL_13;
      }
      v112.__r_.__value_.__r.__words[0] = 0;
      if (!v11)
      {
        uint64_t v65 = *(void *)(v60 + 40);
        *(unsigned char *)(v65 + 28) = 1;
        *(void *)(v65 + 32) = v112.__r_.__value_.__r.__words[0];
        goto LABEL_126;
      }
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2169;
        uint64_t v57 = v64;
        uint64_t v58 = "%25s:%-5d ...at object extension duration";
        goto LABEL_109;
      }
    }
    else
    {
      if (v45)
      {
        uint64_t v11 = 4294900722;
        if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
          goto LABEL_193;
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 632;
        __int16 v114 = 1024;
        *(_DWORD *)unsigned int v115 = v45;
        int v97 = "%25s:%-5d Expected element type for extension (%d)";
        goto LABEL_192;
      }
      uint64_t v51 = *v100;
      a4 = v101;
      if (!*v100) {
        goto LABEL_186;
      }
      uint64_t v52 = a1 + 16;
      do
      {
        unsigned int v53 = *(unsigned __int16 *)(v51 + 32);
        BOOL v54 = v53 >= data_low;
        if (v53 >= data_low) {
          char v55 = (uint64_t *)v51;
        }
        else {
          char v55 = (uint64_t *)(v51 + 8);
        }
        if (v54) {
          uint64_t v52 = v51;
        }
        uint64_t v51 = *v55;
      }
      while (*v55);
      if ((uint64_t *)v52 == v100 || data_low < *(unsigned __int16 *)(v52 + 32))
      {
LABEL_186:
        uint64_t v11 = 4294900724;
        if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
          goto LABEL_193;
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2419;
        __int16 v114 = 1024;
        *(_DWORD *)unsigned int v115 = data_low;
        int v97 = "%25s:%-5d Programme extension refers to missing programme AP_%04hx";
        goto LABEL_192;
      }
      v112.__r_.__value_.__r.__words[0] = 0;
      if (!v11)
      {
        uint64_t v66 = *(void *)(v52 + 40);
        *(unsigned char *)(v66 + 36) = 1;
        *(void *)(v66 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v112.__r_.__value_.__r.__words[0];
        goto LABEL_126;
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2425;
        uint64_t v57 = v56;
        uint64_t v58 = "%25s:%-5d ...at programme extension end";
LABEL_109:
        _os_log_impl(&dword_18FEC0000, v57, OS_LOG_TYPE_ERROR, v58, buf, 0x12u);
      }
    }
LABEL_126:
    if (v11) {
      goto LABEL_193;
    }
LABEL_132:
    if (++v40 == v103) {
      goto LABEL_133;
    }
  }
  uint64_t v11 = v48;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 575;
    __int16 v13 = "%25s:%-5d ...at packet element size";
    goto LABEL_4;
  }
  return v11;
}

void sub_19000C9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  unint64_t v70 = *(void **)(v68 - 128);
  if (v70) {
    operator delete(v70);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a68) {
    operator delete(a68);
  }
  if (STACK[0x200]) {
    operator delete((void *)STACK[0x200]);
  }
  if (STACK[0x228]) {
    operator delete((void *)STACK[0x228]);
  }
  unint64_t v71 = *(void **)(v68 - 200);
  if (v71) {
    operator delete(v71);
  }
  if (STACK[0x288]) {
    operator delete((void *)STACK[0x288]);
  }
  unsigned int v72 = *(void **)(v68 - 256);
  if (v72) {
    operator delete(v72);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::decode_byte(_anonymous_namespace_ *this, const unsigned __int8 *a2, void *a3, unint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*a3 >= (unint64_t)a2)
  {
    uint64_t v5 = 4294900721;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "AudioMetadataDeserializer.cpp";
      __int16 v10 = 1024;
      int v11 = 155;
      _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v8, 0x12u);
    }
  }
  else
  {
    uint64_t v5 = 0;
    *(unsigned char *)a4 = *((unsigned char *)this + (*a3)++);
  }
  return v5;
}

uint64_t anonymous namespace'::log()
{
  uint64_t v0 = &unk_1E9299000;
  {
    uint64_t v0 = (void *)&unk_1E9299000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9299000;
    }
  }
  return v0[91];
}

void std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::unordered_map<anonymous namespace'::FormatID,anonymous namespace'::FormatID>::clear[abi:ne180100](void *result)
{
  if (result[3])
  {
    int v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t anonymous namespace'::decode_var_uint(_anonymous_namespace_ *this, const unsigned __int8 *a2, void *a3, unint64_t *a4, unsigned __int8 *a5)
{
  *a4 = 0;
  while (1)
  {
    LOBYTE(v11) = 0;
    if (result) {
      break;
    }
    char v10 = v11;
    *a4 = v11 & 0x7F | (*a4 << 7);
    if ((v10 & 0x80) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t anonymous namespace'::decode_uint16(_anonymous_namespace_ *this, const unsigned __int8 *a2, unint64_t *a3, unint64_t *a4, unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a3 + 2;
  if (v5 <= (unint64_t)a2)
  {
    uint64_t v6 = 0;
    *(_WORD *)a4 = bswap32(*(unsigned __int16 *)((char *)this + *a3)) >> 16;
    *a3 = v5;
  }
  else
  {
    uint64_t v6 = 4294900721;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      char v10 = "AudioMetadataDeserializer.cpp";
      __int16 v11 = 1024;
      int v12 = 390;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v9, 0x12u);
    }
  }
  return v6;
}

uint64_t anonymous namespace'::decode_uint32(_anonymous_namespace_ *this, const unsigned __int8 *a2, unint64_t *a3, unint64_t *a4, unsigned int *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a3 + 4;
  if (v5 <= (unint64_t)a2)
  {
    uint64_t v6 = 0;
    *(_DWORD *)a4 = bswap32(*(_DWORD *)((char *)this + *a3));
    *a3 = v5;
  }
  else
  {
    uint64_t v6 = 4294900721;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      char v10 = "AudioMetadataDeserializer.cpp";
      __int16 v11 = 1024;
      int v12 = 404;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v9, 0x12u);
    }
  }
  return v6;
}

void CA::AudioMetadataDeserializer::Impl::decode_programme(CA::AudioMetadataDeserializer::Impl *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4, const unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AudioMetadataMemoryPool::create<AudioMetadataProgramme>(&v10, *(void *)this);
  snprintf(__str, 9uLL, "APR_%04hx", *a5);
  uint64_t v7 = *(void *)this;
  int v8 = v10;
  v9[0] = v10;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v7, (int)v9, v8, __str);
}

void sub_19000E478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (*(char *)(v48 - 217) < 0) {
    operator delete(*(void **)(v48 - 240));
  }
  if (*(char *)(v48 - 185) < 0) {
    operator delete(*(void **)(v48 - 208));
  }
  if (*(char *)(v48 - 137) < 0) {
    operator delete(*(void **)(v48 - 160));
  }
  if (*(char *)(v48 - 105) < 0) {
    operator delete(*(void **)(v48 - 128));
  }
  if (__p) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  _Unwind_Resume(exception_object);
}

void CA::AudioMetadataDeserializer::Impl::decode_content(CA::AudioMetadataDeserializer::Impl *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4, const unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AudioMetadataMemoryPool::create<AudioMetadataContent>(v10, *(void *)this);
  snprintf(__str, 9uLL, "ACO_%04hx", *a5);
  uint64_t v7 = *(void *)this;
  int v8 = v10[0];
  v9[0] = *(void *)v10;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v7, (int)v9, v8, __str);
}

void sub_19000F0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v42 < 0) {
    operator delete(*(void **)(v43 + 104));
  }
  if (v44 < 0) {
    operator delete(*(void **)(v43 + 136));
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (*(void *)(v43 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v43 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CA::AudioMetadataDeserializer::Impl::decode_object(CA::AudioMetadataDeserializer::Impl *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4, const unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AudioMetadataMemoryPool::create<AudioMetadataObject>(&v10, *(void *)this);
  snprintf(__str, 9uLL, "AO_%04hx", *a5);
  uint64_t v7 = *(void *)this;
  int v8 = v10;
  v9[0] = v10;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataObject>(v7, (int)v9, v8, __str);
}

void sub_1900101C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(exception_object);
}

void CA::AudioMetadataDeserializer::Impl::decode_stream_format(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AudioMetadataMemoryPool::create<AudioMetadataStreamFormat>(&v10, *a1);
  snprintf(&__s[1], 0xCuLL, "AS_%04hx%04hx", *a5, a5[1]);
  uint64_t v7 = *a1;
  int v8 = v10;
  v9[0] = v10;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v7, (int)v9, v8, &__s[1]);
}

void sub_19001097C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a12 < 0) {
    operator delete(__p);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(exception_object);
}

void CA::AudioMetadataDeserializer::Impl::decode_track_format(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AudioMetadataMemoryPool::create<AudioMetadataTrackFormat>(&v10, *a1);
  snprintf(&__s[1], 0xFuLL, "AT_%04hx%04hx_%02hhx", *a5, a5[1], *((unsigned __int8 *)a5 + 4));
  uint64_t v7 = *a1;
  int v8 = v10;
  v9[0] = v10;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v7, (int)v9, v8, &__s[1]);
}

void sub_190010FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, uint64_t a15, int a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v26 < 0) {
    operator delete(*(void **)(v27 - 160));
  }
  if (a14 < 0) {
    operator delete(*(void **)(v27 - 128));
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void CA::AudioMetadataDeserializer::Impl::decode_track_uid(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AudioMetadataMemoryPool::create<AudioMetadataTrackUID>(&v10, *a1);
  snprintf(__str, 0xDuLL, "ATU_%04hx%04hx", *a5, a5[1]);
  uint64_t v7 = *a1;
  int v8 = v10;
  v9[0] = v10;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataTrackUID>(v7, (int)v9, v8, __str);
}

void sub_190011760(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void CA::AudioMetadataDeserializer::Impl::decode_pack_format(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AudioMetadataMemoryPool::create<AudioMetadataPackFormat>(&v10, *a1);
  snprintf(__str, 0xCuLL, "AP_%04hx%04hx", *a5, a5[1]);
  uint64_t v7 = *a1;
  int v8 = v10;
  v9[0] = v10;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v7, (int)v9, v8, __str);
}

void sub_190012418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a13 < 0) {
    operator delete(__p);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void CA::AudioMetadataDeserializer::Impl::decode_channel_format(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AudioMetadataMemoryPool::create<AudioMetadataChannelFormat>(&v10, *a1);
  snprintf(__str, 0xCuLL, "AC_%04hx%04hx", *a5, a5[1]);
  uint64_t v7 = *a1;
  int v8 = v10;
  v9[0] = v10;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v7, (int)v9, v8, __str);
}

void sub_190012E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v34 < 0) {
    operator delete(__p);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (a13 < 0) {
    operator delete(a18);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_block_format(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v17 = *a5;
  unsigned __int16 v18 = a5[1];
  {
    AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(&v15, *a1);
    snprintf(__str, 0x15uLL, "AB_%04hx%04hx_%08x", *a5, a5[1], *((_DWORD *)a5 + 1));
    uint64_t v7 = *a1;
    int v8 = v15;
    v14[0] = v15;
    v14[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v7, (int)v14, v8, __str);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = *a5;
    int v11 = a5[1];
    int v12 = *((_DWORD *)a5 + 1);
    buf[0] = 136316674;
    *(void *)&buf[1] = "AudioMetadataDeserializer.cpp";
    __int16 v21 = 1024;
    int v22 = 1258;
    __int16 v23 = 1024;
    int v24 = v10;
    __int16 v25 = 1024;
    int v26 = v11;
    __int16 v27 = 1024;
    int v28 = v10;
    __int16 v29 = 1024;
    int v30 = v11;
    __int16 v31 = 1024;
    int v32 = v12;
    _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing channel format AC_%04hx%04hx for block format AB_%04hx%04hx_%08x", (uint8_t *)buf, 0x30u);
  }
  return 4294900724;
}

void sub_1900155E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,std::__shared_weak_count *a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if ((a12 & 0x80) != 0) {
    operator delete(__p);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  unsigned int v49 = *(void **)(v47 - 208);
  if (v49) {
    operator delete(v49);
  }
  if (*(void *)(v47 - 232)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v47 - 232));
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>>>::__erase_unique<unsigned short>(uint64_t **a1, unsigned __int16 a2)
{
  CFStringRef v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    unint64_t v5 = v4;
    uint64_t v6 = v3;
    do
    {
      unsigned int v7 = *((unsigned __int16 *)v6 + 16);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        int v9 = (uint64_t **)v6;
      }
      else {
        int v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        unint64_t v5 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((unsigned __int16 *)v5 + 16) <= a2)
    {
      int v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        int v12 = v5;
        do
        {
          int v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          int v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      long long v14 = (std::__shared_weak_count *)v5[6];
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      operator delete(v5);
    }
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_stream_format(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  CFStringRef v4 = (uint64_t **)(a1 + 176);
  if ((uint64_t *)(a1 + 184) != v5)
  {
    uint64_t v6 = v5;
    unsigned int v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        unsigned int v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      int v9 = v5;
      do
      {
        BOOL v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        int v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5) {
      uint64_t *v4 = v8;
    }
    int v11 = *(uint64_t **)(a1 + 184);
    --*(void *)(a1 + 192);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    int v12 = (std::__shared_weak_count *)v6[6];
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    operator delete(v6);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_track_format(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 152);
  if ((uint64_t *)(a1 + 160) != v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = (uint64_t *)v4[1];
    if (v6)
    {
      do
      {
        unsigned int v7 = v6;
        uint64_t v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      BOOL v8 = v4;
      do
      {
        unsigned int v7 = (uint64_t *)v8[2];
        BOOL v9 = *v7 == (void)v8;
        BOOL v8 = v7;
      }
      while (!v9);
    }
    if (*v3 == v4) {
      *uint64_t v3 = v7;
    }
    BOOL v10 = *(uint64_t **)(a1 + 160);
    --*(void *)(a1 + 168);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, v5);
    int v11 = (std::__shared_weak_count *)v5[6];
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    operator delete(v5);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_track_uid(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  CFStringRef v4 = (uint64_t **)(a1 + 128);
  if ((uint64_t *)(a1 + 136) != v5)
  {
    uint64_t v6 = v5;
    unsigned int v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        unsigned int v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      BOOL v9 = v5;
      do
      {
        BOOL v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        BOOL v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5) {
      uint64_t *v4 = v8;
    }
    int v11 = *(uint64_t **)(a1 + 136);
    --*(void *)(a1 + 144);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    int v12 = (std::__shared_weak_count *)v6[6];
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    operator delete(v6);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_pack_format(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  CFStringRef v4 = (uint64_t **)(a1 + 80);
  if ((uint64_t *)(a1 + 88) != v5)
  {
    uint64_t v6 = v5;
    unsigned int v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        unsigned int v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      BOOL v9 = v5;
      do
      {
        BOOL v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        BOOL v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5) {
      uint64_t *v4 = v8;
    }
    int v11 = *(uint64_t **)(a1 + 88);
    --*(void *)(a1 + 96);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    int v12 = (std::__shared_weak_count *)v6[6];
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    operator delete(v6);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_channel_format(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  CFStringRef v4 = (uint64_t **)(a1 + 104);
  if ((uint64_t *)(a1 + 112) != v5)
  {
    uint64_t v6 = v5;
    unsigned int v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        unsigned int v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      BOOL v9 = v5;
      do
      {
        BOOL v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        BOOL v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5) {
      uint64_t *v4 = v8;
    }
    int v11 = *(uint64_t **)(a1 + 112);
    --*(void *)(a1 + 120);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    int v12 = (std::__shared_weak_count *)v6[6];
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    operator delete(v6);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_block_format(void *a1, unsigned __int16 *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (uint64_t **)(a1 + 25);
  if (a1 + 26 != v5)
  {
    uint64_t v6 = v5;
    unsigned int v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        unsigned int v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      BOOL v9 = v5;
      do
      {
        BOOL v8 = (uint64_t *)v9[2];
        BOOL v21 = *v8 == (void)v9;
        BOOL v9 = v8;
      }
      while (!v21);
    }
    if (*v4 == v5) {
      uint64_t *v4 = v8;
    }
    BOOL v10 = (uint64_t *)a1[26];
    --a1[27];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, v6);
    int v11 = (std::__shared_weak_count *)v6[6];
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    operator delete(v6);
  }
  int8x8_t v12 = (int8x8_t)a1[89];
  if (!*(void *)&v12) {
    goto LABEL_33;
  }
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  unint64_t v15 = v14 + v13;
  uint8x8_t v16 = (uint8x8_t)vcnt_s8(v12);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    unint64_t v17 = v14 + v13;
    if (v15 >= *(void *)&v12) {
      unint64_t v17 = v15 % *(void *)&v12;
    }
  }
  else
  {
    unint64_t v17 = (v12.i32[0] - 1) & v15;
  }
  unsigned __int16 v18 = *(uint64_t ****)(a1[88] + 8 * v17);
  if (!v18 || (long long v19 = *v18) == 0)
  {
LABEL_33:
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v23 = *a2;
      int v24 = a2[1];
      int v25 = *((_DWORD *)a2 + 1);
      int v29 = 136316674;
      int v30 = "AudioMetadataDeserializer.cpp";
      __int16 v31 = 1024;
      int v32 = 2633;
      __int16 v33 = 1024;
      int v34 = v23;
      __int16 v35 = 1024;
      int v36 = v24;
      __int16 v37 = 1024;
      int v38 = v25;
      __int16 v39 = 1024;
      int v40 = v23;
      __int16 v41 = 1024;
      int v42 = v24;
      _os_log_impl(&dword_18FEC0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Expired block format AB_%04hx%04hx_%08x for unknown channel format AC_%04hx%04hx", (uint8_t *)&v29, 0x30u);
    }
    return;
  }
  while (1)
  {
    unint64_t v20 = (unint64_t)v19[1];
    if (v20 == v15) {
      break;
    }
    if (v16.u32[0] > 1uLL)
    {
      if (v20 >= *(void *)&v12) {
        v20 %= *(void *)&v12;
      }
    }
    else
    {
      v20 &= *(void *)&v12 - 1;
    }
    if (v20 != v17) {
      goto LABEL_33;
    }
LABEL_32:
    long long v19 = (uint64_t **)*v19;
    if (!v19) {
      goto LABEL_33;
    }
  }
  BOOL v21 = *((unsigned __int16 *)v19 + 8) == v13 && *((unsigned __int16 *)v19 + 9) == v14;
  if (!v21) {
    goto LABEL_32;
  }
  __int16 v27 = (unsigned __int16 *)v19[3];
  int v26 = (unsigned __int16 *)v19[4];
  if (v27 != v26)
  {
    while (__PAIR64__(v27[1], *v27) != __PAIR64__(v14, v13) || *((_DWORD *)v27 + 1) != *((_DWORD *)a2 + 1))
    {
      v27 += 4;
      if (v27 == v26) {
        return;
      }
    }
    int64_t v28 = (char *)v26 - (char *)(v27 + 4);
    if (v26 != v27 + 4) {
      memmove(v27, v27 + 4, (char *)v26 - (char *)(v27 + 4));
    }
    v19[4] = (uint64_t *)((char *)v27 + v28);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    BOOL v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      BOOL v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int8x8_t v12 = a1 + 2;
  BOOL v10 = operator new(0x30uLL);
  *BOOL v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[4] = 0;
  void v10[5] = 0;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v19 = operator new(8 * *(void *)&prime);
          unint64_t v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          int v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            int64_t v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  void *v22 = *v28;
                  void *v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v29) = v28;
                  int64_t v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                int v22 = v28;
                int64_t v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        int v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v30 = *a1;
  __int16 v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    *BOOL v10 = *v31;
LABEL_72:
    *__int16 v31 = v10;
    goto LABEL_73;
  }
  *BOOL v10 = *v12;
  *int8x8_t v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    __int16 v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1900162A4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataProgramme>()
{
}

void sub_190016394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataProgramme,AudioMetadataProgrammeRefs,AudioMetadataFormatExtended>()
{
}

void sub_190016484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataContent>()
{
}

void sub_190016574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataFormatExtended>()
{
}

void sub_190016664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref(uint64_t *result, unsigned __int16 *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = a2[1];
  if (v2 <= 0xFFF && (v2 & 0xFFF) != 0)
  {
    CFStringRef v4 = result;
    int v5 = *a2;
    if (v4 + 11 == result)
    {
      uint64_t result = (uint64_t *)snprintf(__str, 0xCuLL, "AP_%04hx%04hx", v5, v2);
      uint64_t v6 = 0;
      unint64_t v7 = (const char **)CA::ADMCommonFormats::pack_formats;
      while (v6 != 347)
      {
        uint64_t result = (uint64_t *)strcmp(__str, *v7);
        if (!result)
        {
          AudioMetadataMemoryPool::create<AudioMetadataPackFormat>(&v11, *v4);
          uint64_t v8 = *v4;
          int v9 = v11;
          v10[0] = v11;
          v10[1] = v12;
          if (v12) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
          }
          AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v8, (int)v10, v9, __str);
        }
        ++v6;
        v7 += 6;
      }
    }
  }
  return result;
}

void sub_190016B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void *std::unordered_map<anonymous namespace'::FormatID,std::vector<anonymous namespace'::FormatID>>::unordered_map(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = (void *)a1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  int v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    unint64_t v32 = v4 + 2;
    do
    {
      uint64_t v6 = *((unsigned __int16 *)v5 + 8);
      uint64_t v7 = *((unsigned __int16 *)v5 + 9);
      unint64_t v8 = v7 + v6;
      unint64_t v9 = v4[1];
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7 + v6;
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
        uint64_t v11 = *(uint64_t ****)(*v4 + 8 * v2);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = (uint64_t **)*i)
          {
            unint64_t v13 = (unint64_t)i[1];
            if (v13 == v8)
            {
              if (*((unsigned __int16 *)i + 8) == v6 && *((unsigned __int16 *)i + 9) == v7) {
                goto LABEL_47;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v2) {
                break;
              }
            }
          }
        }
      }
      BOOL v15 = operator new(0x30uLL);
      v33[0] = v15;
      v33[1] = v32;
      char v34 = 0;
      void *v15 = 0;
      v15[1] = v8;
      int v16 = *((_DWORD *)v5 + 4);
      void v15[3] = 0;
      *((_DWORD *)v15 + 4) = v16;
      void v15[4] = 0;
      v15[5] = 0;
      unsigned __int16 v18 = (unsigned char *)v5[3];
      unint64_t v17 = (unsigned char *)v5[4];
      int64_t v19 = v17 - v18;
      if (v17 != v18)
      {
        if (v19 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v19 >> 2);
        void v15[3] = v20;
        void v15[4] = v20;
        v15[5] = &v20[4 * v21];
        memmove(v20, v18, v19);
        void v15[4] = &v20[4 * (v19 >> 2)];
      }
      char v34 = 1;
      CFStringRef v4 = (void *)a1;
      float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v23 = *(float *)(a1 + 32);
      if (!v9 || (float)(v23 * (float)v9) < v22)
      {
        BOOL v24 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v24 = 1;
        }
        unint64_t v25 = v24 | (2 * v9);
        unint64_t v26 = vcvtps_u32_f32(v22 / v23);
        if (v25 <= v26) {
          size_t v27 = v26;
        }
        else {
          size_t v27 = v25;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v27);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      int64_t v28 = *(void **)(*(void *)a1 + 8 * v2);
      if (v28)
      {
        *(void *)v33[0] = *v28;
        void *v28 = v33[0];
      }
      else
      {
        *(void *)v33[0] = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v33[0];
        *(void *)(*(void *)a1 + 8 * v2) = v32;
        if (*(void *)v33[0])
        {
          unint64_t v29 = *(void *)(*(void *)v33[0] + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v29 >= v9) {
              v29 %= v9;
            }
          }
          else
          {
            v29 &= v9 - 1;
          }
          *(void *)(*(void *)a1 + 8 * v29) = v33[0];
        }
      }
      v33[0] = 0;
      ++*(void *)(a1 + 24);
LABEL_47:
      int v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return v4;
}

void sub_190016E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref(uint64_t *result, unsigned __int16 *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = a2[1];
  if (v2 <= 0xFFF && (v2 & 0xFFF) != 0)
  {
    CFStringRef v4 = result;
    int v5 = *a2;
    if (v4 + 14 == result)
    {
      snprintf(__str, 0xCuLL, "AC_%04hx%04hx", v5, v2);
      AudioMetadataMemoryPool::create<AudioMetadataChannelFormat>(&v9, *v4);
      uint64_t v6 = *v4;
      int v7 = v9;
      v8[0] = v9;
      v8[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v6, (int)v8, v7, __str);
    }
  }
  return result;
}

void sub_190017488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v39)
  {
    *(void *)(v43 - 208) = v39;
    operator delete(v39);
    int v38 = *(std::__shared_weak_count **)(v43 - 168);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<anonymous namespace'::TrackFormatID,std::shared_ptr<AudioMetadataTrackFormat>>,std::__map_value_compare<anonymous namespace'::TrackFormatID,std::__value_type<anonymous namespace'::TrackFormatID,std::shared_ptr<AudioMetadataTrackFormat>>,std::less<anonymous namespace'::TrackFormatID>,true>,std::allocator<std::__value_type<anonymous namespace'::TrackFormatID,std::shared_ptr<AudioMetadataTrackFormat>>>>::find<anonymous namespace'::TrackFormatID>(uint64_t a1, unsigned __int16 *a2)
{
  CFStringRef v4 = *(uint64_t **)(a1 + 8);
  unsigned int v2 = (uint64_t *)(a1 + 8);
  unint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  int v7 = v2;
  unsigned int v8 = *((unsigned __int8 *)a2 + 4);
  do
  {
    unsigned int v9 = *((unsigned __int16 *)v3 + 16);
    if (v9 < v5)
    {
LABEL_6:
      ++v3;
      goto LABEL_9;
    }
    if (v9 > v5) {
      goto LABEL_8;
    }
    unsigned int v10 = *((unsigned __int16 *)v3 + 17);
    if (v10 < v6) {
      goto LABEL_6;
    }
    if (v10 <= v6)
    {
      if (*((unsigned __int8 *)v3 + 36) < v8) {
        ++v3;
      }
      else {
        int v7 = v3;
      }
    }
    else
    {
LABEL_8:
      int v7 = v3;
    }
LABEL_9:
    unint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v11 = *((unsigned __int16 *)v7 + 16);
  if (v5 < v11) {
    return v2;
  }
  if (v5 <= v11)
  {
    unsigned int v12 = *((unsigned __int16 *)v7 + 17);
    if (v6 < v12 || v6 <= v12 && v8 < *((unsigned __int8 *)v7 + 36)) {
      return v2;
    }
  }
  return v7;
}

void AudioMetadataMemoryPool::create<AudioMetadataTrackFormat>(void *a1, uint64_t a2)
{
  CFStringRef v4 = (char *)operator new(0x50uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)CFStringRef v4 = &unk_1EDFA2310;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((void *)v4 + 9) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  int v7 = v4 + 24;
  unsigned int v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  unsigned int v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001771C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(int a1, int a2, int a3, char *__s)
{
}

void sub_1900177E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *CA::AudioMetadataDeserializer::Impl::check_common_stream_format_ref(uint64_t *result, unsigned __int16 *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = a2[1];
  if (v2 <= 0xFFF && (v2 & 0xFFF) != 0)
  {
    CFStringRef v4 = result;
    int v5 = *a2;
    if (v4 + 23 == result)
    {
      snprintf(__str, 0xCuLL, "AS_%04hx%04hx", v5, v2);
      AudioMetadataMemoryPool::create<AudioMetadataStreamFormat>(&v9, *v4);
      uint64_t v6 = *v4;
      int v7 = v9;
      v8[0] = v9;
      v8[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v6, (int)v8, v7, __str);
    }
  }
  return result;
}

void sub_190017BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

char *std::map<anonymous namespace'::TrackFormatID,std::shared_ptr<AudioMetadataTrackFormat>>::operator[](uint64_t **a1, unsigned __int16 *a2)
{
  int v5 = a1 + 1;
  CFStringRef v4 = (unsigned __int16 *)a1[1];
  if (!v4)
  {
    uint64_t v9 = a1 + 1;
    goto LABEL_15;
  }
  unsigned int v6 = *a2;
  unsigned int v7 = a2[1];
  unsigned int v8 = *((unsigned __int8 *)a2 + 4);
  do
  {
    while (1)
    {
      uint64_t v9 = v4;
      unsigned int v10 = v4[16];
      if (v6 >= v10)
      {
        if (v6 > v10) {
          goto LABEL_5;
        }
        unsigned int v11 = *((unsigned __int16 *)v9 + 17);
        if (v7 >= v11) {
          break;
        }
      }
LABEL_10:
      CFStringRef v4 = (unsigned __int16 *)*v9;
      int v5 = (uint64_t **)v9;
      if (!*v9) {
        goto LABEL_15;
      }
    }
    if (v7 <= v11)
    {
      unsigned int v12 = *((unsigned __int8 *)v9 + 36);
      if (v8 < v12) {
        goto LABEL_10;
      }
      if (v12 >= v8) {
        return (char *)(v9 + 5);
      }
    }
LABEL_5:
    CFStringRef v4 = (unsigned __int16 *)v9[1];
  }
  while (v4);
  int v5 = (uint64_t **)(v9 + 1);
LABEL_15:
  unint64_t v13 = v9;
  uint64_t v9 = operator new(0x38uLL);
  *((_DWORD *)v9 + 8) = *(_DWORD *)a2;
  *((_WORD *)v9 + 18) = a2[2];
  void v9[5] = 0;
  v9[6] = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  void v9[2] = v13;
  *int v5 = v9;
  uint64_t v14 = (uint64_t *)**a1;
  BOOL v15 = v9;
  if (v14)
  {
    *a1 = v14;
    BOOL v15 = *v5;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (char *)(v9 + 5);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataObject>()
{
}

void sub_190017E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<anonymous namespace'::FormatID,std::shared_ptr<AudioMetadataPackFormat>>,std::__map_value_compare<anonymous namespace'::FormatID,std::__value_type<anonymous namespace'::FormatID,std::shared_ptr<AudioMetadataPackFormat>>,std::less<anonymous namespace'::FormatID>,true>,std::allocator<std::__value_type<anonymous namespace'::FormatID,std::shared_ptr<AudioMetadataPackFormat>>>>::find<anonymous namespace'::FormatID>(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int v5 = *(uint64_t **)(a1 + 8);
  unint64_t v3 = (uint64_t *)(a1 + 8);
  CFStringRef v4 = v5;
  if (!v5) {
    return v3;
  }
  unsigned int v6 = v3;
  do
  {
    unsigned int v7 = *((unsigned __int16 *)v4 + 16);
    if (v7 >= a2)
    {
      if (v7 <= a2)
      {
        if (*((unsigned __int16 *)v4 + 17) < a3) {
          ++v4;
        }
        else {
          unsigned int v6 = v4;
        }
      }
      else
      {
        unsigned int v6 = v4;
      }
    }
    else
    {
      ++v4;
    }
    CFStringRef v4 = (uint64_t *)*v4;
  }
  while (v4);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v8 = *((unsigned __int16 *)v6 + 16);
  if (v8 > a2 || v8 >= a2 && *((unsigned __int16 *)v6 + 17) > a3) {
    return v3;
  }
  return v6;
}

uint64_t *std::unordered_map<unsigned short,std::vector<anonymous namespace'::FormatID>>::operator[](uint64_t a1, unsigned __int16 a2)
{
  unint64_t v4 = a2;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v2 = a2;
      if (v5 <= a2) {
        unint64_t v2 = a2 % v5;
      }
    }
    else
    {
      unint64_t v2 = (v5 - 1) & a2;
    }
    unsigned int v7 = *(uint64_t ****)(*(void *)a1 + 8 * v2);
    if (v7)
    {
      for (uint64_t i = *v7; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v9 = (unint64_t)i[1];
        if (v9 == a2)
        {
          if (*((unsigned __int16 *)i + 8) == a2) {
            return (uint64_t *)(i + 3);
          }
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v9 >= v5) {
              v9 %= v5;
            }
          }
          else
          {
            v9 &= v5 - 1;
          }
          if (v9 != v2) {
            break;
          }
        }
      }
    }
  }
  unsigned int v10 = (void *)(a1 + 16);
  unsigned int v11 = operator new(0x30uLL);
  v33[0] = v11;
  v33[1] = a1 + 16;
  *unsigned int v11 = 0;
  v11[1] = v4;
  *((_WORD *)v11 + 8) = v4;
  _DWORD v11[4] = 0;
  void v11[5] = 0;
  v11[3] = 0;
  char v34 = 1;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v5 || (float)(v13 * (float)v5) < v12)
  {
    BOOL v14 = (v5 & (v5 - 1)) == 0;
    if (v5 < 3) {
      BOOL v14 = 0;
    }
    unint64_t v15 = (2 * v5) | !v14;
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v5)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v5 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v5)
      {
        unint64_t v5 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned __int16 v18 = operator new(8 * *(void *)&prime);
          int64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void *)*v10;
          if (*v10)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = v10;
            size_t v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  void *v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  size_t v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                uint64_t v21 = v27;
                size_t v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v5 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v32 = *(void **)a1;
        *(void *)a1 = 0;
        if (v32) {
          operator delete(v32);
        }
        unint64_t v5 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v5 <= v4) {
        unint64_t v2 = v4 % v5;
      }
      else {
        unint64_t v2 = v4;
      }
    }
    else
    {
      unint64_t v2 = (v5 - 1) & v4;
    }
  }
  unint64_t v29 = *(void **)(*(void *)a1 + 8 * v2);
  if (v29)
  {
    *(void *)v33[0] = *v29;
    *unint64_t v29 = v33[0];
  }
  else
  {
    *(void *)v33[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v33[0];
    *(void *)(*(void *)a1 + 8 * v2) = v10;
    if (*(void *)v33[0])
    {
      unint64_t v30 = *(void *)(*(void *)v33[0] + 8);
      if ((v5 & (v5 - 1)) != 0)
      {
        if (v30 >= v5) {
          v30 %= v5;
        }
      }
      else
      {
        v30 &= v5 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v3std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v33[0];
    }
  }
  uint64_t i = (uint64_t **)v33[0];
  v33[0] = 0;
  ++*(void *)(a1 + 24);
  return (uint64_t *)(i + 3);
}

void sub_19001831C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackUID,AudioMetadataTrackUIDRefs,AudioMetadataObject>()
{
}

void sub_190018408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AudioMetadataObject *>::push_back[abi:ne180100](void **a1, void *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((char *)v5 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    float v12 = (void *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    *float v12 = *a2;
    uint8x8_t v6 = v12 + 1;
    unint64_t v15 = (char *)*a1;
    BOOL v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--float v12 = v16;
      }
      while (v14 != v15);
      BOOL v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *unint64_t v5 = *a2;
    uint8x8_t v6 = v5 + 1;
  }
  a1[1] = v6;
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataFormatExtended>()
{
}

void sub_1900185D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unordered_map<anonymous namespace'::FormatID,std::vector<anonymous namespace'::FormatID>>::operator[](uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = v6 + v5;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v6 + v5;
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ****)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int16 *)i + 8) == v5 && *((unsigned __int16 *)i + 9) == v6) {
            return (uint64_t *)(i + 3);
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = a1 + 16;
  unint64_t v15 = operator new(0x30uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a2;
  void v15[4] = 0;
  v15[5] = 0;
  void v15[3] = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v2);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v2) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (uint64_t **)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  return (uint64_t *)(i + 3);
}

void sub_190018834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataPackFormat>()
{
}

void sub_190018920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataPackFormat>()
{
}

void sub_190018A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::unordered_map<anonymous namespace'::FormatID,anonymous namespace'::FormatID>::find[abi:ne180100](void *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = a3 + (unint64_t)a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a3 + (unint64_t)a2;
    if (v4 >= *(void *)&v3) {
      unint64_t v6 = v4 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v6 = (v3.i32[0] - 1) & v4;
  }
  unint64_t v7 = *(uint64_t ****)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  for (uint64_t result = *v7; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v9 = (unint64_t)result[1];
    if (v9 == v4)
    {
      if (*((unsigned __int16 *)result + 8) == a2 && *((unsigned __int16 *)result + 9) == a3) {
        return result;
      }
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(void *)&v3) {
          v9 %= *(void *)&v3;
        }
      }
      else
      {
        v9 &= *(void *)&v3 - 1;
      }
      if (v9 != v6) {
        return 0;
      }
    }
  }
  return result;
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataFormatExtended>()
{
}

void sub_190018BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unordered_map<anonymous namespace'::FormatID,std::vector<anonymous namespace'::BlockFormatID>>::operator[](uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = v6 + v5;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v6 + v5;
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ****)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int16 *)i + 8) == v5 && *((unsigned __int16 *)i + 9) == v6) {
            return (uint64_t *)(i + 3);
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  unint64_t v15 = operator new(0x30uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a2;
  void v15[4] = 0;
  v15[5] = 0;
  void v15[3] = 0;
  char v38 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3) {
      BOOL v18 = 0;
    }
    unint64_t v19 = (2 * v8) | !v18;
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v22 = operator new(8 * *(void *)&prime);
          unint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint8x8_t v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = v14;
            int v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_59;
                  }
                  void *v25 = *v31;
                  *int v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  int v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_59:
                uint8x8_t v25 = v31;
                int v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        int v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  __int16 v33 = *(void **)(*(void *)a1 + 8 * v2);
  if (v33)
  {
    *(void *)v37[0] = *v33;
    void *v33 = v37[0];
  }
  else
  {
    *(void *)v37[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v37[0];
    *(void *)(*(void *)a1 + 8 * v2) = v14;
    if (*(void *)v37[0])
    {
      unint64_t v34 = *(void *)(*(void *)v37[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v34 >= v8) {
          v34 %= v8;
        }
      }
      else
      {
        v34 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v34) = v37[0];
    }
  }
  uint64_t i = (uint64_t **)v37[0];
  v37[0] = 0;
  ++*(void *)(a1 + 24);
  return (uint64_t *)(i + 3);
}

void sub_190019004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<anonymous namespace'::BlockFormatID,std::shared_ptr<AudioMetadataBlockFormat>>,std::__map_value_compare<anonymous namespace'::BlockFormatID,std::__value_type<anonymous namespace'::BlockFormatID,std::shared_ptr<AudioMetadataBlockFormat>>,std::less<anonymous namespace'::BlockFormatID>,true>,std::allocator<std::__value_type<anonymous namespace'::BlockFormatID,std::shared_ptr<AudioMetadataBlockFormat>>>>::find<anonymous namespace'::BlockFormatID>(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = (uint64_t *)(a1 + 8);
  int8x8_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  unint64_t v7 = v2;
  unsigned int v8 = *((_DWORD *)a2 + 1);
  do
  {
    unsigned int v9 = *((unsigned __int16 *)v3 + 16);
    if (v9 < v5)
    {
LABEL_6:
      ++v3;
      goto LABEL_9;
    }
    if (v9 > v5) {
      goto LABEL_8;
    }
    unsigned int v10 = *((unsigned __int16 *)v3 + 17);
    if (v10 < v6) {
      goto LABEL_6;
    }
    if (v10 <= v6)
    {
      if (*((_DWORD *)v3 + 9) < v8) {
        ++v3;
      }
      else {
        unint64_t v7 = v3;
      }
    }
    else
    {
LABEL_8:
      unint64_t v7 = v3;
    }
LABEL_9:
    int8x8_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v11 = *((unsigned __int16 *)v7 + 16);
  if (v5 < v11) {
    return v2;
  }
  if (v5 <= v11)
  {
    unsigned int v12 = *((unsigned __int16 *)v7 + 17);
    if (v6 < v12 || v6 <= v12 && v8 < *((_DWORD *)v7 + 9)) {
      return v2;
    }
  }
  return v7;
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataBlockFormat,AudioMetadataBlockFormatRefs,AudioMetadataChannelFormat>()
{
}

void sub_1900191A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataFormatExtended>()
{
}

void sub_190019290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackUID,AudioMetadataTrackUIDRefs,AudioMetadataFormatExtended>()
{
}

void sub_190019380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackFormat,AudioMetadataTrackFormatRefs,AudioMetadataFormatExtended>()
{
}

void sub_190019470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataStreamFormat,AudioMetadataStreamFormatRefs,AudioMetadataFormatExtended>()
{
}

void sub_190019560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unordered_map<anonymous namespace'::BlockFormatID,anonymous namespace'::FormatID>::find[abi:ne180100](void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *((unsigned int *)a2 + 1);
  unint64_t v6 = v4 + v3 + v5;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4 + v3 + v5;
    if (v6 >= *(void *)&v2) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v2 - 1) & v6;
  }
  unsigned int v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (uint64_t result = *v9; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v11 == v6)
    {
      if (__PAIR64__(*((unsigned __int16 *)result + 9), *((unsigned __int16 *)result + 8)) == __PAIR64__(v4, v3)
        && *((_DWORD *)result + 5) == v5)
      {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
      }
      else
      {
        v11 &= *(void *)&v2 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *std::unordered_map<anonymous namespace'::BlockFormatID,std::vector<anonymous namespace'::FormatID>>::operator[](uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned int *)a2 + 1);
  unint64_t v8 = v6 + v5 + v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v6 + v5 + v7;
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (__PAIR64__(*((unsigned __int16 *)i + 9), *((unsigned __int16 *)i + 8)) == __PAIR64__(v6, v5)
            && *((_DWORD *)i + 5) == v7)
          {
            return i + 3;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  unint64_t v15 = operator new(0x30uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v8;
  v15[2] = *(void *)a2;
  void v15[3] = 0;
  void v15[4] = 0;
  v15[5] = 0;
  char v38 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3) {
      BOOL v18 = 0;
    }
    unint64_t v19 = (2 * v9) | !v18;
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v22 = operator new(8 * *(void *)&prime);
          unint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint8x8_t v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = v14;
            int v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  void *v25 = *v31;
                  *int v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  int v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_56:
                uint8x8_t v25 = v31;
                int v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        int v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  __int16 v33 = *(void **)(*(void *)a1 + 8 * v2);
  if (v33)
  {
    *(void *)v37[0] = *v33;
    void *v33 = v37[0];
  }
  else
  {
    *(void *)v37[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v37[0];
    *(void *)(*(void *)a1 + 8 * v2) = v14;
    if (*(void *)v37[0])
    {
      unint64_t v34 = *(void *)(*(void *)v37[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v34 >= v9) {
          v34 %= v9;
        }
      }
      else
      {
        v34 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v34) = v37[0];
    }
  }
  uint64_t i = (uint64_t *)v37[0];
  v37[0] = 0;
  ++*(void *)(a1 + 24);
  return i + 3;
}

void sub_190019A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<anonymous namespace'::BlockFormatID,std::vector<anonymous namespace'::FormatID>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<anonymous namespace'::BlockFormatID,std::vector<anonymous namespace'::FormatID>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void AudioMetadataMemoryPool::create<AudioMetadataStreamFormat>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x50uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EDFA2348;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((void *)v4 + 9) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  uint64_t v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_190019B9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(int a1, int a2, int a3, char *__s)
{
}

void sub_190019C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

char *std::map<anonymous namespace'::FormatID,std::shared_ptr<AudioMetadataStreamFormat>>::operator[](uint64_t **a1, unsigned __int16 *a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = (unsigned __int16 *)a1[1];
  if (!v4)
  {
    unint64_t v8 = a1 + 1;
    goto LABEL_12;
  }
  unsigned int v6 = *a2;
  unsigned int v7 = a2[1];
  do
  {
    while (1)
    {
      unint64_t v8 = v4;
      unsigned int v9 = v4[16];
      if (v6 >= v9) {
        break;
      }
LABEL_6:
      uint64_t v4 = (unsigned __int16 *)*v8;
      uint64_t v5 = (uint64_t **)v8;
      if (!*v8) {
        goto LABEL_12;
      }
    }
    if (v6 <= v9)
    {
      unsigned int v10 = *((unsigned __int16 *)v8 + 17);
      if (v7 < v10) {
        goto LABEL_6;
      }
      if (v10 >= v7) {
        return (char *)(v8 + 5);
      }
    }
    uint64_t v4 = (unsigned __int16 *)v8[1];
  }
  while (v4);
  uint64_t v5 = (uint64_t **)(v8 + 1);
LABEL_12:
  unint64_t v11 = v8;
  unint64_t v8 = operator new(0x38uLL);
  *((_DWORD *)v8 + 8) = *(_DWORD *)a2;
  void v8[5] = 0;
  v8[6] = 0;
  *unint64_t v8 = 0;
  v8[1] = 0;
  void v8[2] = v11;
  *uint64_t v5 = v8;
  unsigned int v12 = (uint64_t *)**a1;
  unint64_t v13 = v8;
  if (v12)
  {
    *a1 = v12;
    unint64_t v13 = *v5;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (char *)(v8 + 5);
}

void std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_190019DD0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x192FC8910](v1, 0x1000C8077774924);
  }
  __cxa_rethrow();
}

void sub_190019DF8(_Unwind_Exception *a1)
{
}

uint64_t std::__shared_ptr_pointer<char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FC8910);
  }
  return result;
}

void std::__shared_ptr_pointer<char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataStreamFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataStreamFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTrackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTrackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AudioMetadataMemoryPool::create<AudioMetadataChannelFormat>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x70uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EDFA2380;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *((void *)v4 + 13) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  unsigned int v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  unsigned int v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001A01C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(int a1, int a2, int a3, char *__s)
{
}

void sub_19001A0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0xE8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EDFA22D8;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 20std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  unsigned int v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  unsigned int v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001A1D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(int a1, int a2, int a3, char *__s)
{
}

void sub_19001A298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AudioMetadataBlockFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA22D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataBlockFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA22D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataChannelFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataChannelFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AudioMetadataMemoryPool::create<AudioMetadataPackFormat>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0xA0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EDFA2268;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  unsigned int v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  unsigned int v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001A46C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(int a1, int a2, int a3, char *__s)
{
}

void sub_19001A534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AudioMetadataPackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataPackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t anonymous namespace'::decode_double(_anonymous_namespace_ *this, const unsigned __int8 *a2, unint64_t *a3, unint64_t *a4, double *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a3 + 8;
  if (v5 <= (unint64_t)a2)
  {
    uint64_t v6 = 0;
    unint64_t v8 = (unsigned __int8 *)this + *a3;
    unint64_t v9 = (((unint64_t)*v8 << 56) | ((unint64_t)v8[1] << 48) | ((unint64_t)v8[2] << 40) | ((unint64_t)v8[3] << 32) | ((unint64_t)v8[4] << 24) | ((unint64_t)v8[5] << 16) | ((unint64_t)v8[6] << 8))
       + v8[7];
    *a3 = v5;
    *a4 = v9;
  }
  else
  {
    uint64_t v6 = 4294900721;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      unsigned int v12 = "AudioMetadataDeserializer.cpp";
      __int16 v13 = 1024;
      int v14 = 224;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v11, 0x12u);
    }
  }
  return v6;
}

uint64_t anonymous namespace'::decode_float(_anonymous_namespace_ *this, const unsigned __int8 *a2, unint64_t *a3, unint64_t *a4, float *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a3 + 4;
  if (v5 <= (unint64_t)a2)
  {
    uint64_t v6 = 0;
    unsigned int v8 = bswap32(*(_DWORD *)((char *)this + *a3));
    *a3 = v5;
    *(_DWORD *)a4 = v8;
  }
  else
  {
    uint64_t v6 = 4294900721;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "AudioMetadataDeserializer.cpp";
      __int16 v12 = 1024;
      int v13 = 310;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v10, 0x12u);
    }
  }
  return v6;
}

uint64_t anonymous namespace'::decode_string(_anonymous_namespace_ *a1, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v22 = 0;
  if (v9)
  {
    uint64_t v10 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 375;
      __int16 v12 = "%25s:%-5d ...at string length";
LABEL_7:
      _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
      return v10;
    }
    return v10;
  }
  uint64_t v13 = *a3;
  unint64_t v14 = v22;
  if (v22 + *a3 <= (unint64_t)a2)
  {
    if (v22 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v22 >= 0x17)
    {
      unint64_t v16 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        unint64_t v16 = v22 | 7;
      }
      unint64_t v17 = v16 + 1;
      uint64_t v15 = operator new(v16 + 1);
      *(void *)&uint8_t buf[8] = v14;
      *(void *)&buf[16] = v17 | 0x8000000000000000;
      *(void *)int buf = v15;
    }
    else
    {
      buf[23] = v22;
      uint64_t v15 = buf;
      if (!v22)
      {
LABEL_17:
        unsigned char *v15 = 0;
        if (*(char *)(a4 + 23) < 0) {
          operator delete(*(void **)a4);
        }
        uint64_t v10 = 0;
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(void *)(a4 + 16) = *(void *)&buf[16];
        *a3 += v14;
        return v10;
      }
    }
    BOOL v18 = (char *)a1 + v13;
    unint64_t v19 = v14;
    do
    {
      char v20 = *v18++;
      *v15++ = v20;
      --v19;
    }
    while (v19);
    goto LABEL_17;
  }
  uint64_t v10 = 4294900721;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 379;
    __int16 v12 = "%25s:%-5d Metadata serialized element truncated at string content";
    goto LABEL_7;
  }
  return v10;
}

uint64_t anonymous namespace'::decode_coordinates(_anonymous_namespace_ *a1, const unsigned __int8 *a2, unint64_t *a3, uint64_t a4, float *a5)
{
  char v5 = (char)a5;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  LODWORD(v2std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  if (v10)
  {
    uint64_t v12 = v10;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v2std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 136315394;
      size_t v21 = "AudioMetadataDeserializer.cpp";
      __int16 v22 = 1024;
      int v23 = 189;
      unint64_t v14 = "%25s:%-5d ...at position x/azimuth";
LABEL_10:
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v20 + 4, 0x12u);
    }
  }
  else
  {
    HIDWORD(v19) = 0;
    if (v15)
    {
      uint64_t v12 = v15;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HIDWORD(v2std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 136315394;
        size_t v21 = "AudioMetadataDeserializer.cpp";
        __int16 v22 = 1024;
        int v23 = 195;
        unint64_t v14 = "%25s:%-5d ...at position y/elevation";
        goto LABEL_10;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!v12)
      {
        *(unsigned char *)(a4 + 12) = v5;
        int v18 = HIDWORD(v19);
        *(_DWORD *)a4 = v20;
        *(_DWORD *)(a4 + 4) = v18;
        *(_DWORD *)(a4 + 8) = v19;
        return v12;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HIDWORD(v2std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 136315394;
        size_t v21 = "AudioMetadataDeserializer.cpp";
        __int16 v22 = 1024;
        int v23 = 201;
        unint64_t v14 = "%25s:%-5d ...at position z/distance";
        goto LABEL_10;
      }
    }
  }
  return v12;
}

char *std::unordered_map<anonymous namespace'::BlockFormatID,anonymous namespace'::FormatID>::operator[](float *a1, unsigned __int16 *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned int *)a2 + 1);
  unint64_t v8 = v6 + v5 + v7;
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v6 + v5 + v7;
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (__PAIR64__(*((unsigned __int16 *)v12 + 9), *((unsigned __int16 *)v12 + 8)) == __PAIR64__(v6, v5)
              && *((_DWORD *)v12 + 5) == v7)
            {
              return (char *)(v12 + 3);
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v2) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  void v12[2] = *(void *)a2;
  *((_DWORD *)v12 + 6) = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3) {
      BOOL v16 = 0;
    }
    unint64_t v17 = (2 * v9) | !v16;
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v20 = operator new(8 * *(void *)&prime);
          size_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            uint8x8_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v3std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v23;
                    goto LABEL_56;
                  }
                  void *v23 = *v29;
                  *uint8x8_t v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v3std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v29;
                  uint8x8_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_56:
                int v23 = v29;
                uint8x8_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        __int16 v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  int v31 = *(void **)a1;
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v2);
  if (v32)
  {
    *uint64_t v12 = *v32;
LABEL_73:
    *unint64_t v32 = v12;
    goto LABEL_74;
  }
  *uint64_t v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v31[v2] = a1 + 4;
  if (*v12)
  {
    unint64_t v33 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9) {
        v33 %= v9;
      }
    }
    else
    {
      v33 &= v9 - 1;
    }
    unint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_73;
  }
LABEL_74:
  ++*((void *)a1 + 3);
  return (char *)(v12 + 3);
}

void sub_19001B014(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::decode_jump_position(_anonymous_namespace_ *a1, const unsigned __int8 *a2, unint64_t *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v16[0] = 0;
  if (v9)
  {
    uint64_t v11 = v9;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&v16[1] = 136315394;
      *(void *)&void v16[5] = "AudioMetadataDeserializer.cpp";
      __int16 v17 = 1024;
      int v18 = 355;
      unint64_t v13 = "%25s:%-5d ...at jump position flags";
LABEL_4:
      _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_ERROR, v13, &v16[1], 0x12u);
    }
  }
  else
  {
    char v14 = v16[0];
    *(unsigned char *)(a4 + 4) = v16[0] >> 7;
    if ((v14 & 0x40) == 0) {
      return 0;
    }
    if (v11)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)&v16[1] = 136315394;
        *(void *)&void v16[5] = "AudioMetadataDeserializer.cpp";
        __int16 v17 = 1024;
        int v18 = 363;
        unint64_t v13 = "%25s:%-5d ...at jump position interpolation length";
        goto LABEL_4;
      }
    }
  }
  return v11;
}

void AudioMetadataMemoryPool::create<AudioMetadataMatrixCoefficient>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x48uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EDFA23F0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  uint64_t v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001B244(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<anonymous namespace'::FormatID>::push_back[abi:ne180100](void **a1, _DWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((char *)v5 - (unsigned char *)*a1) >> 2;
    if ((unint64_t)(v7 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 1;
    if (v8 >> 1 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (_DWORD *)(v10 + 4 * v7);
    unint64_t v13 = v10 + 4 * v11;
    *uint64_t v12 = *a2;
    uint64_t v6 = v12 + 1;
    float v15 = (char *)*a1;
    char v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        int v16 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--uint64_t v12 = v16;
      }
      while (v14 != v15);
      char v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  a1[1] = v6;
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataMatrixCoefficient,AudioMetadataMatrix,AudioMetadataBlockFormat>()
{
}

void sub_19001B408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::create<AudioMetadataZone>(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_1EDFA2118;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *((_DWORD *)v4 + 14) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  uint64_t v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001B4CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataZone,AudioMetadataZoneExclusions,AudioMetadataBlockFormat>()
{
}

void sub_19001B5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<anonymous namespace'::BlockFormatID>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = &v12[8 * v8];
    *(void *)unint64_t v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v6 = v5 + 8;
  }
  a1[1] = v6;
}

char *std::map<anonymous namespace'::BlockFormatID,std::shared_ptr<AudioMetadataBlockFormat>>::operator[](uint64_t **a1, unsigned __int16 *a2)
{
  uint64_t v5 = a1 + 1;
  unint64_t v4 = (unsigned __int16 *)a1[1];
  if (!v4)
  {
    unint64_t v9 = a1 + 1;
    goto LABEL_15;
  }
  unsigned int v6 = *a2;
  unsigned int v7 = a2[1];
  unsigned int v8 = *((_DWORD *)a2 + 1);
  do
  {
    while (1)
    {
      unint64_t v9 = v4;
      unsigned int v10 = v4[16];
      if (v6 >= v10)
      {
        if (v6 > v10) {
          goto LABEL_5;
        }
        unsigned int v11 = *((unsigned __int16 *)v9 + 17);
        if (v7 >= v11) {
          break;
        }
      }
LABEL_10:
      unint64_t v4 = (unsigned __int16 *)*v9;
      uint64_t v5 = (uint64_t **)v9;
      if (!*v9) {
        goto LABEL_15;
      }
    }
    if (v7 <= v11)
    {
      unsigned int v12 = *((_DWORD *)v9 + 9);
      if (v8 < v12) {
        goto LABEL_10;
      }
      if (v12 >= v8) {
        return (char *)(v9 + 5);
      }
    }
LABEL_5:
    unint64_t v4 = (unsigned __int16 *)v9[1];
  }
  while (v4);
  uint64_t v5 = (uint64_t **)(v9 + 1);
LABEL_15:
  unint64_t v13 = v9;
  unint64_t v9 = operator new(0x38uLL);
  uint64_t v14 = *(void *)a2;
  void v9[5] = 0;
  v9[6] = 0;
  v9[4] = v14;
  *unint64_t v9 = 0;
  v9[1] = 0;
  void v9[2] = v13;
  *uint64_t v5 = v9;
  float v15 = (uint64_t *)**a1;
  int v16 = v9;
  if (v15)
  {
    *a1 = v15;
    int v16 = *v5;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (char *)(v9 + 5);
}

void std::__shared_ptr_emplace<AudioMetadataZone>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataZone>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataMatrixCoefficient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA23F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataMatrixCoefficient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA23F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t anonymous namespace'::decode_format_refs(_anonymous_namespace_ *a1, const unsigned __int8 *a2, unint64_t *a3, char **a4, unsigned __int8 *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  *(void *)&v35[4] = 0;
  if (v9)
  {
    uint64_t v11 = v9;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v37 = "AudioMetadataDeserializer.cpp";
      __int16 v38 = 1024;
      int v39 = 329;
      unint64_t v13 = "%25s:%-5d ...at format refs count";
      uint64_t v14 = v12;
      uint32_t v15 = 18;
LABEL_31:
      _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
    }
  }
  else
  {
    a4[1] = *a4;
    int v16 = *(_DWORD *)&v35[4];
    if (*(void *)&v35[4])
    {
      unint64_t v17 = 0;
      while (1)
      {
        if (v18)
        {
          uint64_t v11 = v18;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            return v11;
          }
          *(_DWORD *)int buf = 136315906;
          __int16 v37 = "AudioMetadataDeserializer.cpp";
          __int16 v38 = 1024;
          int v39 = 337;
          __int16 v40 = 1024;
          int v41 = v17 + 1;
          __int16 v42 = 1024;
          int v43 = v16;
          unint64_t v13 = "%25s:%-5d ...at format ref #%d of %d, major";
          goto LABEL_30;
        }
        if (v20) {
          break;
        }
        uint64_t v22 = a4[1];
        unint64_t v21 = (unint64_t)a4[2];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v24 = (v22 - *a4) >> 2;
          if ((unint64_t)(v24 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v21 - (void)*a4;
          uint64_t v26 = v25 >> 1;
          if (v25 >> 1 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27) {
            unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v27);
          }
          else {
            uint64_t v28 = 0;
          }
          uint8x8_t v29 = (char *)(v27 + 4 * v24);
          *(_DWORD *)uint8x8_t v29 = *(_DWORD *)v35;
          int v23 = v29 + 4;
          int v31 = *a4;
          unint64_t v30 = a4[1];
          if (v30 != *a4)
          {
            do
            {
              int v32 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *((_DWORD *)v29 - 1) = v32;
              v29 -= 4;
            }
            while (v30 != v31);
            unint64_t v30 = *a4;
          }
          *a4 = v29;
          a4[1] = v23;
          a4[2] = (char *)(v27 + 4 * v28);
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v22 = *(_DWORD *)v35;
          int v23 = v22 + 4;
        }
        a4[1] = v23;
        ++v17;
        int v16 = *(_DWORD *)&v35[4];
        if (v17 >= *(void *)&v35[4]) {
          return 0;
        }
      }
      uint64_t v11 = v20;
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        return v11;
      }
      *(_DWORD *)int buf = 136315906;
      __int16 v37 = "AudioMetadataDeserializer.cpp";
      __int16 v38 = 1024;
      int v39 = 342;
      __int16 v40 = 1024;
      int v41 = v17 + 1;
      __int16 v42 = 1024;
      int v43 = v16;
      unint64_t v13 = "%25s:%-5d ...at format ref #%d of %d, minor";
LABEL_30:
      uint64_t v14 = v33;
      uint32_t v15 = 30;
      goto LABEL_31;
    }
    return 0;
  }
  return v11;
}

char *std::unordered_map<anonymous namespace'::FormatID,anonymous namespace'::FormatID>::operator[](float *a1, unsigned __int16 *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = v6 + v5;
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v6 + v5;
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == v5 && *((unsigned __int16 *)v11 + 9) == v6) {
              return (char *)v11 + 20;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = *(_DWORD *)a2;
  *((_DWORD *)v11 + 5) = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3) {
      BOOL v16 = 0;
    }
    unint64_t v17 = (2 * v8) | !v16;
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          unint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            uint8x8_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v3std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v23;
                    goto LABEL_59;
                  }
                  void *v23 = *v29;
                  *uint8x8_t v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v3std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v29;
                  uint8x8_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_59:
                int v23 = v29;
                uint8x8_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        __int16 v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  int v31 = *(void **)a1;
  int v32 = *(void **)(*(void *)a1 + 8 * v2);
  if (v32)
  {
    *uint64_t v11 = *v32;
LABEL_76:
    *int v32 = v11;
    goto LABEL_77;
  }
  *uint64_t v11 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v11;
  v31[v2] = a1 + 4;
  if (*v11)
  {
    unint64_t v33 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    int v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
  return (char *)v11 + 20;
}

void sub_19001BF94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::create<AudioMetadataTrackUID>(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_1EDFA21F8;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 68) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  unint64_t v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001C058(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataTrackUID>(int a1, int a2, int a3, char *__s)
{
}

void sub_19001C120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

char *std::unordered_map<anonymous namespace'::FormatID,anonymous namespace'::TrackFormatID>::operator[](float *a1, unsigned __int16 *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = v6 + v5;
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v6 + v5;
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == v5 && *((unsigned __int16 *)v11 + 9) == v6) {
              return (char *)v11 + 20;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = *(_DWORD *)a2;
  *((_DWORD *)v11 + 5) = 0;
  *((_WORD *)v11 + 12) = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3) {
      BOOL v16 = 0;
    }
    unint64_t v17 = (2 * v8) | !v16;
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          unint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            uint8x8_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v3std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v23;
                    goto LABEL_59;
                  }
                  void *v23 = *v29;
                  *uint8x8_t v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v3std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v29;
                  uint8x8_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_59:
                int v23 = v29;
                uint8x8_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        __int16 v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  int v31 = *(void **)a1;
  int v32 = *(void **)(*(void *)a1 + 8 * v2);
  if (v32)
  {
    *uint64_t v11 = *v32;
LABEL_76:
    *int v32 = v11;
    goto LABEL_77;
  }
  *uint64_t v11 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v11;
  v31[v2] = a1 + 4;
  if (*v11)
  {
    unint64_t v33 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    int v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
  return (char *)v11 + 20;
}

void sub_19001C528(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AudioMetadataTrackUID>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA21F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTrackUID>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA21F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AudioMetadataMemoryPool::create<AudioMetadataObject>(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0xF8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)unint64_t v4 = &unk_1EDFA2150;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 20std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  unint64_t v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001C690(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataObject>(int a1, int a2, int a3, char *__s)
{
}

void sub_19001C758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::decode_content_refs(_anonymous_namespace_ *a1, const unsigned __int8 *a2, unint64_t *a3, void *a4, unsigned __int8 *a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)&void v33[2] = 0;
  if (v9)
  {
    uint64_t v11 = v9;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v35 = "AudioMetadataDeserializer.cpp";
      __int16 v36 = 1024;
      int v37 = 168;
      unint64_t v13 = "%25s:%-5d ...at content refs count";
      float v14 = v12;
      uint32_t v15 = 18;
LABEL_4:
      _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
    }
  }
  else
  {
    a4[1] = *a4;
    uint64_t v16 = *(void *)&v33[2];
    if (!*(void *)&v33[2]) {
      return 0;
    }
    uint64_t v17 = 0;
    while (1)
    {
      *(_WORD *)unint64_t v33 = 0;
      if (v18) {
        break;
      }
      uint64_t v20 = (_WORD *)a4[1];
      unint64_t v19 = a4[2];
      if ((unint64_t)v20 >= v19)
      {
        unint64_t v21 = (_WORD *)*a4;
        uint64_t v22 = (uint64_t)v20 - *a4;
        if (v22 <= -3) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v22 >> 1;
        unint64_t v24 = v19 - (void)v21;
        if (v24 <= (v22 >> 1) + 1) {
          unint64_t v25 = v23 + 1;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v26 = v25;
        }
        if (v26)
        {
          uint64_t v26 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v26);
          unint64_t v21 = (_WORD *)*a4;
          uint64_t v20 = (_WORD *)a4[1];
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (_WORD *)(v26 + 2 * v23);
        _WORD *v28 = *(_WORD *)v33;
        uint8x8_t v29 = v28 + 1;
        while (v20 != v21)
        {
          __int16 v30 = *--v20;
          *--uint64_t v28 = v30;
        }
        *a4 = v28;
        a4[1] = v29;
        a4[2] = v26 + 2 * v27;
        if (v21) {
          operator delete(v21);
        }
        a4[1] = v29;
      }
      else
      {
        *uint64_t v20 = *(_WORD *)v33;
        a4[1] = v20 + 1;
      }
      if (++v17 == v16) {
        return 0;
      }
    }
    uint64_t v11 = v18;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315906;
      __int16 v35 = "AudioMetadataDeserializer.cpp";
      __int16 v36 = 1024;
      int v37 = 176;
      __int16 v38 = 1024;
      int v39 = v17 + 1;
      __int16 v40 = 1024;
      int v41 = v16;
      unint64_t v13 = "%25s:%-5d ...at content ref #%d of %d";
      float v14 = v32;
      uint32_t v15 = 30;
      goto LABEL_4;
    }
  }
  return v11;
}

void *std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = v5;
        unsigned int v8 = v5[16];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = (unsigned __int16 *)*v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = (unsigned __int16 *)v7[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = v7;
    unint64_t v7 = operator new(0x38uLL);
    *((_WORD *)v7 + 16) = *a3;
    void v7[5] = 0;
    v7[6] = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = v9;
    *uint64_t v6 = v7;
    unsigned int v10 = (uint64_t *)**a1;
    uint64_t v11 = v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__shared_ptr_emplace<AudioMetadataObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AudioMetadataMemoryPool::create<AudioMetadataContent>(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0xA0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_1EDFA21C0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  unint64_t v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001CBE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataContent>(int a1, int a2, int a3, char *__s)
{
}

void sub_19001CCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AudioMetadataContent>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA21C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataContent>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA21C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AudioMetadataMemoryPool::create<AudioMetadataProgramme>(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0xF0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)unint64_t v4 = &unk_1EDFA2230;
  *(_OWORD *)(v4 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 20std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((void *)v4 + 29) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  unint64_t v7 = v4 + 24;
  uint64_t v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  void v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19001CE18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(int a1, int a2, int a3, char *__s)
{
}

void sub_19001CEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AudioMetadataProgramme>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataProgramme>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AUv3InstanceBase::isRemoteV2(AUv3InstanceBase *this)
{
  return 0;
}

uint64_t AUv3InstanceBase::MIDIEventList(AUv3InstanceBase *this, unsigned int a2, const MIDIEventList *a3)
{
  return (*(uint64_t (**)(void))(*((void *)this + 24) + 16))();
}

uint64_t AUv3InstanceBase::MIDISysEx(AUv3InstanceBase *this, const unsigned __int8 *a2)
{
  return 0;
}

uint64_t AUv3InstanceBase::MIDIEvent(AUv3InstanceBase *this, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  NextMIDIEvent(v6, (const unsigned __int8 *)&v7);
  (*(void (**)(void))(*((void *)this + 23) + 16))();
  return 0;
}

uint64_t AUv3InstanceBase::Stop(AUv3InstanceBase *this)
{
  unint64_t v2 = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Stop(void)::{lambda(void)#1}>, (uint64_t)&v2);
}

uint64_t AUv3InstanceBase::NSExceptionBarrier(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v3 = a2;
  return a1(&v3);
}

void sub_19001D130(void *a1)
{
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Stop(void)::{lambda(void)#1}>(uint64_t a1)
{
  return 0;
}

uint64_t AUv3InstanceBase::Start(AUv3InstanceBase *this)
{
  unint64_t v2 = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Start(void)::{lambda(void)#1}>, (uint64_t)&v2);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Start(void)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t v1 = *(void **)(**(void **)a1 + 72);
  id v7 = 0;
  char v2 = [v1 startHardwareAndReturnError:&v7];
  id v3 = v7;
  unint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = [v3 code];
  }

  return v5;
}

void sub_19001D228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUv3InstanceBase::ScheduleParameters(AUv3InstanceBase *this, const AudioUnitParameterEvent *a2, int a3)
{
  uint64_t v6 = a2;
  int v5 = a3;
  v4[0] = &v6;
  v4[1] = &v5;
  v4[2] = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::ScheduleParameters(AudioUnitParameterEvent const*,unsigned int)::$_0>, (uint64_t)v4);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::ScheduleParameters(AudioUnitParameterEvent const*,unsigned int)::$_0>(uint64_t *a1, __n128 a2)
{
  uint64_t v2 = *a1;
  if (**(_DWORD **)(*a1 + 8))
  {
    unsigned int v3 = 0;
    uint64_t v4 = *(void *)(v2 + 16);
    uint64_t v5 = **(void **)v2 + 16;
    do
    {
      int v6 = *(_DWORD *)(v5 - 4);
      if (v6 == 100)
      {
        a2.n128_u32[0] = 1321042525;
        (*(void (**)(__n128))(*(void *)(v4 + 176) + 16))(a2);
      }
      else
      {
        if (v6 == 1)
        {
          a2.n128_u32[0] = *(_DWORD *)(v5 + 4);
        }
        else
        {
          (*(void (**)(float))(*(void *)(v4 + 176) + 16))(*(float *)(v5 + 8));
          a2.n128_u32[0] = *(_DWORD *)(v5 + 12);
        }
        (*(void (**)(__n128))(*(void *)(v4 + 176) + 16))(a2);
      }
      ++v3;
      v5 += 32;
    }
    while (v3 < **(_DWORD **)(v2 + 8));
  }
  return 0;
}

uint64_t AUv3InstanceBase::Process(AUv3InstanceBase *this, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, const AudioBufferList **a6, unsigned int a7, AudioBufferList **a8)
{
  return 4294967292;
}

uint64_t AUv3InstanceBase::Render(AUv3InstanceBase *this, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t v7 = *((void *)this + 21);
  if (!v7) {
    return 4294967292;
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN17AUv3RenderAdapter6RenderERjRK14AudioTimeStampjjR15AudioBufferList_block_invoke;
  void v9[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
  v9[4] = (char *)this + 136;
  return (*(uint64_t (**)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, void, AudioBufferList *, void *))(v7 + 16))(v7, a2, a3, a5, a4, a6, v9);
}

uint64_t AUv3InstanceBase::SetParameter(AUv3InstanceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5, int a6)
{
  float v16 = a5;
  int v15 = a6;
  unsigned int v8 = AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase *)((char *)this + 200), a3, a4, a2);
  unsigned int v10 = v8;
  float v14 = v8;
  if (v8)
  {
    if (*((unsigned char *)this + 80))
    {
      v13[0] = &v14;
      v13[1] = this;
      _OWORD v13[2] = &v16;
      v13[3] = &v15;
      uint64_t v11 = AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::$_0>, (uint64_t)v13);
      unsigned int v10 = v14;
    }
    else
    {
      *(float *)&double v9 = a5;
      [v8 setValue:10 originator:v9];
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 4294956418;
  }

  return v11;
}

void sub_19001D520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id AUv3InstanceBase::ParameterMap::findParameterByScopeElementID(AUv3InstanceBase::ParameterMap *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  AUv3InstanceBase::ParameterMap::checkCacheParameters((uint64_t)this);
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = 0;
  unsigned int v8 = (id *)*((void *)this + 3);
  double v9 = (id *)*((void *)this + 4);
  if (v9 == v8) {
    goto LABEL_16;
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 4);
  do
  {
    unint64_t v11 = v10 >> 1;
    unint64_t v12 = (unsigned int *)&v8[6 * (v10 >> 1)];
    BOOL v13 = *v12 < a2;
    if (*v12 == a2)
    {
      unsigned int v14 = HIDWORD(v8[6 * v11]);
      BOOL v15 = v14 == a3;
      BOOL v13 = v14 < a3;
      if (v15) {
        BOOL v13 = LODWORD(v8[6 * v11 + 1]) < a4;
      }
    }
    float v16 = (id *)(v12 + 12);
    v10 += ~v11;
    if (v13) {
      unsigned int v8 = v16;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  while (v10);
  if (v8 != v9 && *(_DWORD *)v8 == a2 && *((_DWORD *)v8 + 1) == a3 && *((_DWORD *)v8 + 2) == a4) {
    id WeakRetained = objc_loadWeakRetained(v8 + 2);
  }
  else {
LABEL_16:
  }
    id WeakRetained = 0;
  objc_destroyWeak((id *)v19 + 1);
  return WeakRetained;
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::$_0>(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (atomic_uint *)(*a1)[1];
  uint64_t v3 = AUv3InstanceBase::sAUParameter_address(***a1, AUv3InstanceBase::sSel_address);
  unsigned int add = atomic_fetch_add(v2 + 94, 1u);
  uint64_t v5 = add + 1;
  if (add == -1) {
    uint64_t v5 = atomic_fetch_add(v2 + 94, 1u) + 1;
  }
  (*((void (**)(void, uint64_t, uint64_t, void, uint64_t, float))v2 + 48))(*((void *)v2 + 9), AUv3InstanceBase::sSel_SetV2Parameter, v3, *(unsigned int *)v1[3], v5, *(float *)v1[2]);
  return 0;
}

uint64_t AUv3InstanceBase::ParameterMap::checkCacheParameters(uint64_t this)
{
  v48[16] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v1 = (unsigned __int8 *)(this + 16);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(this + 16));
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = this;
    os_unfair_recursive_lock_lock_with_options();
    unsigned __int8 v4 = atomic_load(v1);
    if ((v4 & 1) == 0)
    {
      id WeakRetained = objc_loadWeakRetained((id *)v3);
      int v6 = [WeakRetained parameterTree];

      if (v6)
      {
        BOOL v43 = [v6 _autoCreatedForV2AU] != 0;
        memset(v41, 0, sizeof(v41));
        int v42 = 1065353216;
        int v32 = [v6 allParameters];
        uint64_t v8 = *(void *)(v3 + 24);
        uint64_t v7 = *(void *)(v3 + 32);
        if (v7 != v8)
        {
          do
          {
            uint64_t v9 = v7 - 48;
            objc_destroyWeak((id *)(v7 - 32));
            uint64_t v7 = v9;
          }
          while (v9 != v8);
        }
        uint64_t v10 = *(void *)(v3 + 48);
        *(void *)(v3 + 32) = v8;
        uint64_t v11 = *(void *)(v3 + 56);
        if (v11 != v10)
        {
          do
          {
            uint64_t v12 = v11 - 48;
            objc_destroyWeak((id *)(v11 - 32));
            uint64_t v11 = v12;
          }
          while (v12 != v10);
        }
        BOOL v13 = *(void **)(v3 + 104);
        *(void *)(v3 + 56) = v10;
        std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(v13);
        *(void *)(v3 + 96) = v3 + 104;
        *(void *)(v3 + 104) = 0;
        *(void *)(v3 + 112) = 0;
        __int16 v38 = 0;
        int v39 = 0;
        uint64_t v40 = 0;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::reserve((uint64_t *)(v3 + 24), [v32 count]);
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::reserve((uint64_t *)(v3 + 48), [v32 count]);
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::reserve((uint64_t *)&v38, [v32 count]);
        v35[4] = (unsigned __int8 *)&v38;
        id v36 = 0;
        int v37 = 0;
        v35[0] = (unsigned __int8 *)&v43;
        v35[1] = (unsigned __int8 *)v41;
        unsigned int v35[2] = (unsigned __int8 *)&v36;
        v35[3] = (unsigned __int8 *)v3;
        id v14 = v6;
        AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0::operator()(v35, 0, v14);
        if ([v14 isGroup])
        {
          id v15 = v14;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          float v16 = [v15 children];
          uint64_t v17 = [v16 countByEnumeratingWithState:&v44 objects:v48 count:16];
          if (v17)
          {
            uint64_t v18 = *(void *)v45;
            do
            {
              for (uint64_t i = 0; i != v17; ++i)
              {
                if (*(void *)v45 != v18) {
                  objc_enumerationMutation(v16);
                }
                id v20 = *(id *)(*((void *)&v44 + 1) + 8 * i);
                TraverseParameterTree<AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0 &>(v15, v20, v35);
              }
              uint64_t v17 = [v16 countByEnumeratingWithState:&v44 objects:v48 count:16];
            }
            while (v17);
          }
        }
        unint64_t v21 = *(uint64_t **)(v3 + 24);
        uint64_t v22 = *(uint64_t **)(v3 + 32);
        unint64_t v23 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 4));
        v48[0] = (void **)AUv3InstanceBase::ScopeElementIDObj::lessByID;
        if (v22 == v21) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v23;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>(v21, v22, (uint64_t (**)(uint64_t *, uint64_t *))v48, v24, 1);
        unint64_t v25 = *(uint64_t **)(v3 + 48);
        uint64_t v26 = *(uint64_t **)(v3 + 56);
        unint64_t v27 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 4));
        v48[0] = (void **)AUv3InstanceBase::ScopeElementIDObj::lessByOriginalOrder;
        if (v26 == v25) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = v27;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>(v25, v26, (uint64_t (**)(uint64_t *, uint64_t *))v48, v28, 1);
        unint64_t v29 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 4));
        v48[0] = (void **)AUv3InstanceBase::ScopeElementIDObj::lessByAddress;
        if (v39 == v38) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v29;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>((uint64_t *)v38, (uint64_t *)v39, (uint64_t (**)(uint64_t *, uint64_t *))v48, v30, 1);
        uint64_t v31 = *(void *)(*(void *)(v3 + 8) + 40);
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3321888768;
        void v33[2] = ___ZN16AUv3InstanceBase12ParameterMap20checkCacheParametersEv_block_invoke;
        v33[3] = &__block_descriptor_64_ea8_32c79_ZTSNSt3__16vectorIN16AUv3InstanceBase17ScopeElementIDObjENS_9allocatorIS2_EEEE_e46_v24__0q8r__AUParameterAutomationEvent_QQfIQ_16l;
        memset(v34, 0, 24);
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__init_with_size[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj*,AUv3InstanceBase::ScopeElementIDObj*>(v34, (uint64_t *)v38, (uint64_t *)v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 4));
        void v34[3] = v31;
        atomic_store([v14 tokenByAddingParameterAutomationObserver:v33], (unint64_t *)(v3 + 88));
        objc_storeWeak((id *)(v3 + 128), v14);
        atomic_store(1u, (unsigned __int8 *)(v3 + 16));
        v48[0] = (void **)v34;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](v48);

        v48[0] = (void **)&v38;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](v48);
      }
    }
    return os_unfair_recursive_lock_unlock();
  }
  return this;
}

void sub_19001DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  a19 = (void **)&a26;
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](&a19);

  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

BOOL AUv3InstanceBase::ScopeElementIDObj::lessByID(int *a1, _DWORD *a2)
{
  int v3 = *a1;
  BOOL result = *a1 < *a2;
  if (v3 == *a2)
  {
    unsigned int v5 = a1[1];
    unsigned int v6 = a2[1];
    BOOL result = v5 < v6;
    if (v5 == v6) {
      return a1[2] < a2[2];
    }
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

uint64_t *std::vector<AUv3InstanceBase::ScopeElementIDObj>::reserve(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v2 = result;
    uint64_t v3 = result[1] - *result;
    void v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 48 * v4;
    std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0::operator()(unsigned __int8 **a1, void *a2, void *a3)
{
  id v122 = a2;
  id v5 = a3;
  unsigned int v6 = a1[3];
  if (([v5 isGroup] & 1) == 0)
  {
    id v121 = v5;
    id v125 = 0;
    LODWORD(v126) = [v121 _originalOrder];
    if (**a1)
    {
      unint64_t v7 = [v121 address];
      LODWORD(v123) = v7 >> 61;
      HIDWORD(v123) = HIDWORD(v7) & 0x1FFFFFFF;
      int v124 = v7;
      goto LABEL_103;
    }
    id v8 = [v121 keyPath];
    uint64_t v9 = (unsigned char *)[v8 UTF8String];
    int v10 = *v9;
    if (*v9)
    {
      uint64_t v11 = v9 + 1;
      LODWORD(v12) = 5381;
      do
      {
        uint64_t v12 = (33 * v12 + v10);
        int v13 = *v11++;
        int v10 = v13;
      }
      while (v13);
    }
    else
    {
      uint64_t v12 = 5381;
    }

    id v14 = a1[1];
    unint64_t v15 = *((void *)v14 + 1);
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v17 = v16.u32[0];
    int v18 = v15 - 1;
    unint64_t v19 = v15 - 1;
    unsigned int v20 = v12;
LABEL_10:
    unint64_t v21 = v20;
    if (v15)
    {
      if (v16.u32[0] > 1uLL)
      {
        unint64_t v22 = v20;
        if (v15 <= v20) {
          unint64_t v22 = v20 % v15;
        }
      }
      else
      {
        unint64_t v22 = v18 & v20;
      }
      unint64_t v23 = *(uint64_t ***)(*(void *)v14 + 8 * v22);
      if (v23)
      {
        for (uint64_t i = *v23; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v25 = i[1];
          if (v25 == v20)
          {
            if (*((_DWORD *)i + 4) == v20)
            {
              ++v20;
              goto LABEL_10;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v25 >= v15) {
                v25 %= v15;
              }
            }
            else
            {
              v25 &= v19;
            }
            if (v25 != v22) {
              break;
            }
          }
        }
      }
      if (v16.u32[0] > 1uLL)
      {
        uint64_t v12 = v20;
        if (v15 <= v20) {
          uint64_t v12 = v20 % v15;
        }
      }
      else
      {
        uint64_t v12 = v18 & v20;
      }
      uint64_t v26 = *(uint64_t **)(*(void *)v14 + 8 * v12);
      if (v26)
      {
        while (1)
        {
          uint64_t v26 = (uint64_t *)*v26;
          if (!v26) {
            break;
          }
          unint64_t v27 = v26[1];
          if (v27 == v20)
          {
            if (*((_DWORD *)v26 + 4) == v20) {
              goto LABEL_102;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v27 >= v15) {
                v27 %= v15;
              }
            }
            else
            {
              v27 &= v19;
            }
            if (v27 != v12) {
              break;
            }
          }
        }
      }
    }
    else
    {
      unsigned int v20 = v12;
    }
    uint64_t v28 = operator new(0x18uLL);
    void *v28 = 0;
    v28[1] = v21;
    *((_DWORD *)v28 + 4) = v20;
    float v29 = (float)(unint64_t)(*((void *)v14 + 3) + 1);
    float v30 = *((float *)v14 + 8);
    if (v15 && (float)(v30 * (float)v15) >= v29)
    {
LABEL_92:
      long long v47 = *(void **)v14;
      uint64_t v48 = *(void **)(*(void *)v14 + 8 * v12);
      if (v48)
      {
        void *v28 = *v48;
      }
      else
      {
        void *v28 = *((void *)v14 + 2);
        *((void *)v14 + 2) = v28;
        v47[v12] = v14 + 16;
        if (!*v28) {
          goto LABEL_101;
        }
        unint64_t v49 = *(void *)(*v28 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v49 >= v15) {
            v49 %= v15;
          }
        }
        else
        {
          v49 &= v15 - 1;
        }
        uint64_t v48 = (void *)(*(void *)v14 + 8 * v49);
      }
      *uint64_t v48 = v28;
LABEL_101:
      ++*((void *)v14 + 3);
LABEL_102:
      uint64_t v123 = 0;
      int v124 = v20;
LABEL_103:
      objc_storeWeak(&v125, v121);
      *((void *)&v126 + 1) = [v121 address];
      int v127 = 0;
      if (v122 && [v122 isGroup])
      {
        BOOL v50 = a1[2];
        if (*(id *)v50 != v122)
        {
          int v51 = **a1;
          id v52 = v121;
          BOOL v119 = (uint64_t *)v122;
          unsigned int v53 = [v119 identifier];
          uint64_t v54 = [v53 length];

          if (v54)
          {
            id v118 = v52;
            if (v51)
            {
              uint64_t v55 = [v52 _clumpID];
            }
            else
            {
              id v57 = [v119 keyPath];
              uint64_t v58 = (unsigned char *)[v57 UTF8String];
              int v59 = *v58;
              if (*v58)
              {
                uint64_t v60 = v58 + 1;
                LODWORD(v55) = 5381;
                do
                {
                  uint64_t v55 = (33 * v55 + v59);
                  int v61 = *v60++;
                  int v59 = v61;
                }
                while (v61);
              }
              else
              {
                uint64_t v55 = 5381;
              }
            }
            unsigned int v64 = (uint64_t **)(v6 + 104);
            uint64_t v63 = *((void *)v6 + 13);
            uint64_t v65 = (uint64_t **)(v6 + 104);
            if (!v63) {
              goto LABEL_196;
            }
            uint64_t v66 = (uint64_t **)(v6 + 104);
            do
            {
              unsigned int v67 = *(_DWORD *)(v63 + 32);
              BOOL v68 = v67 >= v55;
              if (v67 >= v55) {
                uint64_t v69 = (uint64_t *)v63;
              }
              else {
                uint64_t v69 = (uint64_t *)(v63 + 8);
              }
              if (v68) {
                uint64_t v66 = (uint64_t **)v63;
              }
              uint64_t v63 = *v69;
            }
            while (*v69);
            uint64_t v65 = (uint64_t **)(v6 + 104);
            if (v66 == v64
              || (uint64_t v65 = (uint64_t **)(v6 + 104), v55 < *((_DWORD *)v66 + 8))
              || (uint64_t v65 = v66, v66[5] != v119))
            {
LABEL_196:
              if (!v51) {
                goto LABEL_197;
              }
              unint64_t v70 = [v119 identifier];
              unint64_t v71 = objc_msgSend(NSString, "stringWithFormat:", @"clump_%d", v55);
              int v72 = [v70 isEqualToString:v71];

              uint64_t v66 = v65;
              if (v72)
              {
LABEL_197:
                while (1)
                {
                  int v73 = v119;
                  int v74 = v73;
                  uint64_t v75 = *v64;
                  if (!*v64) {
                    break;
                  }
                  while (1)
                  {
                    while (1)
                    {
                      unsigned int v76 = (uint64_t **)v75;
                      unsigned int v77 = *((_DWORD *)v75 + 8);
                      if (v55 >= v77) {
                        break;
                      }
                      uint64_t v75 = *v76;
                      unsigned int v78 = v76;
                      if (!*v76) {
                        goto LABEL_147;
                      }
                    }
                    if (v77 >= v55) {
                      break;
                    }
                    uint64_t v75 = v76[1];
                    if (!v75)
                    {
                      unsigned int v78 = v76 + 1;
                      goto LABEL_147;
                    }
                  }
                  LODWORD(v55) = v55 + 1;
                }
                unsigned int v78 = (uint64_t **)(v6 + 104);
                unsigned int v76 = (uint64_t **)(v6 + 104);
LABEL_147:
                uint64_t v66 = (uint64_t **)operator new(0x30uLL);
                *((_DWORD *)v66 + 8) = v55;
                v66[5] = v74;
                _WORD *v66 = 0;
                v66[1] = 0;
                v66[2] = (uint64_t *)v76;
                int64x2_t *v78 = (uint64_t *)v66;
                uint64_t v79 = **((void **)v6 + 12);
                unint64_t v80 = (uint64_t *)v66;
                if (v79)
                {
                  *((void *)v6 + 12) = v79;
                  unint64_t v80 = *v78;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v6 + 13), v80);
                ++*((void *)v6 + 14);
              }
            }
            int v56 = *((_DWORD *)v66 + 8);
            id v52 = v118;
          }
          else
          {
            int v56 = 0;
          }

          uint64_t v81 = a1[2];
          objc_storeStrong((id *)v81, a2);
          *((_DWORD *)v81 + 2) = v56;
          BOOL v50 = a1[2];
        }
        int v127 = *((_DWORD *)v50 + 2);
      }
      unint64_t v82 = *((void *)v6 + 5);
      unint64_t v83 = *((void *)v6 + 4);
      if (v83 >= v82)
      {
        uint64_t v86 = *((void *)v6 + 3);
        unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - v86) >> 4);
        if (v87 + 1 > 0x555555555555555) {
          goto LABEL_192;
        }
        unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - v86) >> 4);
        uint64_t v89 = 2 * v88;
        if (2 * v88 <= v87 + 1) {
          uint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v90 = 0x555555555555555;
        }
        else {
          unint64_t v90 = v89;
        }
        BOOL v132 = (uint64_t *)(v6 + 40);
        if (v90) {
          unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v90);
        }
        else {
          uint64_t v91 = 0;
        }
        unint64_t v92 = v90 + 48 * v87;
        unint64_t v128 = v90;
        unint64_t v129 = v92;
        unint64_t v131 = v90 + 48 * v91;
        *(_DWORD *)(v92 + 8) = v124;
        *(void *)unint64_t v92 = v123;
        objc_copyWeak((id *)(v92 + 16), &v125);
        long long v93 = v126;
        *(_DWORD *)(v92 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v127;
        *(_OWORD *)(v92 + 24) = v93;
        unint64_t v130 = v92 + 48;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer((uint64_t *)v6 + 3, &v128);
        unint64_t v85 = *((void *)v6 + 4);
        std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer((uint64_t)&v128);
      }
      else
      {
        *(_DWORD *)(v83 + 8) = v124;
        *(void *)unint64_t v83 = v123;
        objc_copyWeak((id *)(v83 + 16), &v125);
        long long v84 = v126;
        *(_DWORD *)(v83 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v127;
        *(_OWORD *)(v83 + 24) = v84;
        unint64_t v85 = v83 + 48;
      }
      unint64_t v94 = *((void *)v6 + 8);
      *((void *)v6 + 4) = v85;
      unint64_t v95 = *((void *)v6 + 7);
      if (v95 >= v94)
      {
        uint64_t v98 = *((void *)v6 + 6);
        unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - v98) >> 4);
        if (v99 + 1 > 0x555555555555555) {
          goto LABEL_192;
        }
        unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - v98) >> 4);
        uint64_t v101 = 2 * v100;
        if (2 * v100 <= v99 + 1) {
          uint64_t v101 = v99 + 1;
        }
        if (v100 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v102 = 0x555555555555555;
        }
        else {
          unint64_t v102 = v101;
        }
        BOOL v132 = (uint64_t *)(v6 + 64);
        if (v102) {
          unint64_t v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v102);
        }
        else {
          uint64_t v103 = 0;
        }
        unint64_t v104 = v102 + 48 * v99;
        unint64_t v128 = v102;
        unint64_t v129 = v104;
        unint64_t v131 = v102 + 48 * v103;
        *(_DWORD *)(v104 + 8) = v124;
        *(void *)unint64_t v104 = v123;
        objc_copyWeak((id *)(v104 + 16), &v125);
        long long v105 = v126;
        *(_DWORD *)(v104 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v127;
        *(_OWORD *)(v104 + 24) = v105;
        unint64_t v130 = v104 + 48;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer((uint64_t *)v6 + 6, &v128);
        unint64_t v97 = *((void *)v6 + 7);
        std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer((uint64_t)&v128);
      }
      else
      {
        *(_DWORD *)(v95 + 8) = v124;
        *(void *)unint64_t v95 = v123;
        objc_copyWeak((id *)(v95 + 16), &v125);
        long long v96 = v126;
        *(_DWORD *)(v95 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v127;
        *(_OWORD *)(v95 + 24) = v96;
        unint64_t v97 = v95 + 48;
      }
      *((void *)v6 + 7) = v97;
      unint64_t v106 = (uint64_t *)a1[4];
      unint64_t v107 = v106[1];
      unint64_t v108 = v106[2];
      if (v107 < v108)
      {
        *(_DWORD *)(v107 + 8) = v124;
        *(void *)unint64_t v107 = v123;
        objc_copyWeak((id *)(v107 + 16), &v125);
        long long v109 = v126;
        *(_DWORD *)(v107 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v127;
        *(_OWORD *)(v107 + 24) = v109;
        uint64_t v110 = v107 + 48;
LABEL_189:
        v106[1] = v110;
        objc_destroyWeak(&v125);

        goto LABEL_190;
      }
      unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - *v106) >> 4);
      if (v111 + 1 <= 0x555555555555555)
      {
        unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - *v106) >> 4);
        uint64_t v113 = 2 * v112;
        if (2 * v112 <= v111 + 1) {
          uint64_t v113 = v111 + 1;
        }
        if (v112 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v114 = 0x555555555555555;
        }
        else {
          unint64_t v114 = v113;
        }
        BOOL v132 = v106 + 2;
        if (v114) {
          unint64_t v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v114);
        }
        else {
          uint64_t v115 = 0;
        }
        unint64_t v116 = v114 + 48 * v111;
        unint64_t v128 = v114;
        unint64_t v129 = v116;
        unint64_t v131 = v114 + 48 * v115;
        *(_DWORD *)(v116 + 8) = v124;
        *(void *)unint64_t v116 = v123;
        objc_copyWeak((id *)(v116 + 16), &v125);
        long long v117 = v126;
        *(_DWORD *)(v116 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v127;
        *(_OWORD *)(v116 + 24) = v117;
        unint64_t v130 = v116 + 48;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer(v106, &v128);
        uint64_t v110 = v106[1];
        std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer((uint64_t)&v128);
        goto LABEL_189;
      }
LABEL_192:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    BOOL v32 = v15 < 3 || v17 > 1;
    unint64_t v33 = v32 | (2 * v15);
    unint64_t v34 = vcvtps_u32_f32(v29 / v30);
    if (v33 <= v34) {
      int8x8_t prime = (int8x8_t)v34;
    }
    else {
      int8x8_t prime = (int8x8_t)v33;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v15 = *((void *)v14 + 1);
    if (*(void *)&prime > v15) {
      goto LABEL_58;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v42 = vcvtps_u32_f32((float)*((unint64_t *)v14 + 3) / *((float *)v14 + 8));
      if (v15 < 3 || (uint8x8_t v43 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        unint64_t v42 = std::__next_prime(v42);
      }
      else
      {
        uint64_t v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2) {
          unint64_t v42 = v44;
        }
      }
      if (*(void *)&prime <= v42) {
        int8x8_t prime = (int8x8_t)v42;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = *((void *)v14 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_58:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          id v36 = operator new(8 * *(void *)&prime);
          int v37 = *(void **)v14;
          *(void *)id v14 = v36;
          if (v37) {
            operator delete(v37);
          }
          uint64_t v38 = 0;
          *((int8x8_t *)v14 + 1) = prime;
          do
            *(void *)(*(void *)v14 + 8 * v38++) = 0;
          while (*(void *)&prime != v38);
          int v39 = (void *)*((void *)v14 + 2);
          if (v39)
          {
            unint64_t v40 = v39[1];
            uint8x8_t v41 = (uint8x8_t)vcnt_s8(prime);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              if (v40 >= *(void *)&prime) {
                v40 %= *(void *)&prime;
              }
            }
            else
            {
              v40 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v14 + 8 * v4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v14 + 16;
            long long v45 = (void *)*v39;
            if (*v39)
            {
              do
              {
                unint64_t v46 = v45[1];
                if (v41.u32[0] > 1uLL)
                {
                  if (v46 >= *(void *)&prime) {
                    v46 %= *(void *)&prime;
                  }
                }
                else
                {
                  v46 &= *(void *)&prime - 1;
                }
                if (v46 != v40)
                {
                  if (!*(void *)(*(void *)v14 + 8 * v46))
                  {
                    *(void *)(*(void *)v14 + 8 * v46) = v39;
                    goto LABEL_83;
                  }
                  *int v39 = *v45;
                  *long long v45 = **(void **)(*(void *)v14 + 8 * v46);
                  **(void **)(*(void *)v14 + 8 * v46) = v45;
                  long long v45 = v39;
                }
                unint64_t v46 = v40;
LABEL_83:
                int v39 = v45;
                long long v45 = (void *)*v45;
                unint64_t v40 = v46;
              }
              while (v45);
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_87;
        }
        BOOL v62 = *(void **)v14;
        *(void *)id v14 = 0;
        if (v62) {
          operator delete(v62);
        }
        unint64_t v15 = 0;
        *((void *)v14 + 1) = 0;
      }
    }
LABEL_87:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v15 <= v21) {
        uint64_t v12 = v21 % v15;
      }
      else {
        uint64_t v12 = v21;
      }
    }
    else
    {
      uint64_t v12 = (v15 - 1) & v21;
    }
    goto LABEL_92;
  }
LABEL_190:
}

void sub_19001E828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, id *location, void *a15)
{
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void TraverseParameterTree<AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0 &>(void *a1, void *a2, unsigned __int8 **a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0::operator()(a3, v5, v6);
  if ([v6 isGroup])
  {
    id v7 = v6;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v8 = objc_msgSend(v7, "children", 0);
    uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v14;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v8);
          }
          id v12 = *(id *)(*((void *)&v13 + 1) + 8 * v11);
          TraverseParameterTree<AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0 &>(v7, v12, a3);

          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v9);
    }
  }
}

void sub_19001EA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
void sub_19001F8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location)
{
}

void ___ZN16AUv3InstanceBase12ParameterMap20checkCacheParametersEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v7 = a3 + 32 * i;
      if (*(void *)(v7 + 24))
      {
        unint64_t v8 = *(void *)(v7 + 8);
        int v9 = *(_DWORD *)(v7 + 20);
        v22[0] = 0u;
        long long v21 = 0u;
        v22[1] = v8;
        uint64_t v10 = *(uint64_t **)(a1 + 32);
        uint64_t v11 = *(uint64_t **)(a1 + 40);
        if (v11 != v10)
        {
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v10) >> 4);
          do
          {
            unint64_t v13 = v12 >> 1;
            unint64_t v14 = &v10[6 * (v12 >> 1)];
            unint64_t v15 = v14[4];
            long long v16 = v14 + 6;
            v12 += ~(v12 >> 1);
            if (v15 < v8) {
              uint64_t v10 = v16;
            }
            else {
              unint64_t v12 = v13;
            }
          }
          while (v12);
          if (v10 != v11 && v10[4] == v8)
          {
            if (v9 == 2) {
              AudioUnitEventType v17 = kAudioUnitEvent_EndParameterChangeGesture;
            }
            else {
              AudioUnitEventType v17 = v9 == 1;
            }
            v20.mEventType = v17;
            AudioUnitParameterID v18 = *((_DWORD *)v10 + 2);
            v20.mArgument.mParameter.AudioUnit mAudioUnit = *(AudioUnit *)(a1 + 56);
            uint64_t v19 = *v10;
            v20.mArgument.mParameter.AudioUnitParameterID mParameterID = v18;
            *(void *)&v20.mArgument.mProperty.AudioUnitScope mScope = v19;
            AUEventListenerNotify(0, 0, &v20);
          }
        }
        objc_destroyWeak((id *)v22);
      }
    }
  }
}

void sub_19001FA88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void std::vector<AUv3InstanceBase::ScopeElementIDObj>::__init_with_size[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj*,AUv3InstanceBase::ScopeElementIDObj*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x555555555555556) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[48 * v8];
    while (a2 != a3)
    {
      uint64_t v9 = *a2;
      *((_DWORD *)v7 + 2) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v7 = v9;
      objc_copyWeak((id *)v7 + 2, (id *)a2 + 2);
      long long v10 = *(_OWORD *)(a2 + 3);
      *((_DWORD *)v7 + 1std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *((_DWORD *)a2 + 10);
      *(_OWORD *)(v7 + 24) = v10;
      v7 += 48;
      a2 += 6;
    }
    a1[1] = v7;
  }
}

void sub_19001FB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 6;
        objc_destroyWeak(v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void __destroy_helper_block_ea8_32c79_ZTSNSt3__16vectorIN16AUv3InstanceBase17ScopeElementIDObjENS_9allocatorIS2_EEEE(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void __copy_helper_block_ea8_32c79_ZTSNSt3__16vectorIN16AUv3InstanceBase17ScopeElementIDObjENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  unsigned __int8 v2 = (void *)(a1 + 32);
  v2[2] = 0;
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__init_with_size[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj*,AUv3InstanceBase::ScopeElementIDObj*>(v2, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4));
}

BOOL AUv3InstanceBase::ScopeElementIDObj::lessByAddress(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

BOOL AUv3InstanceBase::ScopeElementIDObj::lessByOriginalOrder(int *a1, _DWORD *a2)
{
  int v3 = *a1;
  BOOL result = *a1 < *a2;
  if (v3 == *a2)
  {
    unsigned int v5 = a1[1];
    unsigned int v6 = a2[1];
    BOOL result = v5 < v6;
    if (v5 == v6) {
      return a1[6] < a2[6];
    }
  }
  return result;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a1 + 2);
  uint64_t v4 = (id *)(a1 + 2);
  objc_moveWeak(&v11, (id *)a1 + 2);
  long long v12 = *(_OWORD *)(a1 + 3);
  int v13 = *((_DWORD *)a1 + 10);
  int v5 = *((_DWORD *)a2 + 2);
  *a1 = *a2;
  *((_DWORD *)a1 + 2) = v5;
  id WeakRetained = objc_loadWeakRetained((id *)a2 + 2);
  objc_storeWeak(v4, WeakRetained);

  long long v7 = *(_OWORD *)(a2 + 3);
  *((_DWORD *)a1 + 1std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(a1 + 3) = v7;
  *a2 = v9;
  *((_DWORD *)a2 + 2) = v10;
  id v8 = objc_loadWeakRetained(&v11);
  objc_storeWeak((id *)a2 + 2, v8);

  *(_OWORD *)(a2 + 3) = v12;
  *((_DWORD *)a2 + 1std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v13;
  objc_destroyWeak(&v11);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  int v9 = (*a4)(a3, a2);
  if (v8)
  {
    if (v9)
    {
      int v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, a2);
      if (!(*a4)(a3, a2)) {
        return;
      }
      int v10 = a2;
    }
    id v11 = a3;
  }
  else
  {
    if (!v9) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a2, a3);
    if (!(*a4)(a2, a1)) {
      return;
    }
    int v10 = a1;
    id v11 = a2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(v10, v11);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a3, a4);
    if ((*a5)(a3, a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a2, a3);
      if ((*a5)(a2, a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a4, a5);
    if ((*a6)(a4, a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a3, a4);
      if ((*a6)(a3, a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a2, a3);
        if ((*a6)(a2, a1))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, a2);
        }
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4 = a2;
  BOOL v6 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)(a2 - 6, a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, v4 - 6);
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a1 + 6, a2 - 6, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a1 + 6, a1 + 12, a2 - 6, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a1 + 6, a1 + 12, a1 + 18, a2 - 6, a3);
      return v6;
    default:
      long long v7 = a1 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a1 + 6, a1 + 12, a3);
      char v8 = a1 + 18;
      if (a1 + 18 == v4) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      long long v21 = v4;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    long long v7 = v8;
    v9 += 48;
    v8 += 6;
    if (v8 == v4) {
      return 1;
    }
  }
  uint64_t v22 = *v8;
  int v23 = *((_DWORD *)v8 + 2);
  objc_moveWeak(&v24, (id *)v8 + 2);
  long long v25 = *(_OWORD *)(v8 + 3);
  int v26 = *((_DWORD *)v8 + 10);
  uint64_t v11 = v9;
  while (1)
  {
    uint64_t v12 = v11;
    int v13 = (char *)a1 + v11;
    *((void *)v13 + 18) = *(uint64_t *)((char *)a1 + v11 + 96);
    *((_DWORD *)v13 + 38) = *(_DWORD *)((char *)a1 + v11 + 104);
    unint64_t v14 = (id *)((char *)a1 + v11 + 112);
    id WeakRetained = objc_loadWeakRetained(v14);
    objc_storeWeak((id *)v13 + 20, WeakRetained);

    *(_OWORD *)(v13 + 168) = *(_OWORD *)(v13 + 120);
    *((_DWORD *)v13 + 46) = *((_DWORD *)v13 + 34);
    if (v12 == -96) {
      break;
    }
    char v16 = (*a3)(&v22, (uint64_t *)v13 + 6);
    uint64_t v11 = v12 - 48;
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = (uint64_t)a1 + v11 + 144;
      uint64_t v18 = (uint64_t)a1 + v12 + 120;
      unint64_t v14 = (id *)((char *)a1 + v12 + 112);
      goto LABEL_12;
    }
  }
  uint64_t v18 = (uint64_t)(v13 + 120);
  uint64_t v17 = (uint64_t)a1;
LABEL_12:
  *(void *)uint64_t v17 = v22;
  *(_DWORD *)(v17 + 8) = v23;
  id v19 = objc_loadWeakRetained(&v24);
  objc_storeWeak(v14, v19);

  *(_OWORD *)uint64_t v18 = v25;
  *(_DWORD *)(v18 + 16) = v26;
  ++v10;
  uint64_t v4 = v21;
  if (v10 != 8)
  {
    objc_destroyWeak(&v24);
    goto LABEL_14;
  }
  BOOL v6 = v8 + 6 == v21;
  objc_destroyWeak(&v24);
  return v6;
}

void sub_1900202D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
}

void std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    uint64_t v7 = *(void *)(v4 - 48);
    v4 -= 48;
    int v8 = *(_DWORD *)(v4 + 8);
    *(void *)(v6 - 48) = v7;
    v6 -= 48;
    *(_DWORD *)(v6 + 8) = v8;
    objc_moveWeak((id *)(v6 + 16), (id *)(v4 + 16));
    long long v9 = *(_OWORD *)(v4 + 24);
    *(_DWORD *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_DWORD *)(v4 + 40);
    *(_OWORD *)(v6 + 24) = v9;
  }
  a2[1] = v6;
  uint64_t v10 = *a1;
  *a1 = v6;
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    objc_destroyWeak((id *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t AUv3InstanceBase::GetParameter(AUv3InstanceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v7 = AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase *)((char *)this + 200), a3, a4, a2);
  int v13 = (void *)v7;
  if (!v7) {
    return 4294956418;
  }
  if (*((unsigned char *)this + 80)
    || (int v8 = (void *)v7, [*((id *)this + 9) isLocalCachingDisabled]))
  {
    v12[0] = &v13;
    v12[1] = this;
    void v12[2] = a5;
    uint64_t v9 = AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetParameter(unsigned int,unsigned int,unsigned int,float &)::$_0>, (uint64_t)v12);
    int v8 = v13;
  }
  else
  {
    [v8 value];
    uint64_t v9 = 0;
    *(_DWORD *)a5 = v11;
  }

  return v9;
}

void sub_1900204C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetParameter(unsigned int,unsigned int,unsigned int,float &)::$_0>(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = (*a1)[1];
  uint64_t v3 = AUv3InstanceBase::sAUParameter_address(***a1, AUv3InstanceBase::sSel_address);
  *(float *)v1[2] = ((float (*)(void, uint64_t, uint64_t, void))v2[49])(v2[9], AUv3InstanceBase::sSel_GetV2Parameter, v3, *((unsigned int *)v2 + 94));
  return 0;
}

uint64_t AUv3InstanceBase::RemoveRenderNotify(id *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  return 0;
}

uint64_t AUv3InstanceBase::AddRenderNotify(id *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  return 0;
}

uint64_t AUv3InstanceBase::RemovePropertyListener(AUv3InstanceBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4, char a5)
{
  int v10 = a2;
  int v8 = a4;
  uint64_t v9 = a3;
  char v7 = a5;
  v6[0] = this;
  v6[1] = &v10;
  _OWORD v6[2] = &v9;
  unsigned __int8 v6[3] = &v7;
  void v6[4] = &v8;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::RemovePropertyListener(unsigned int,void (*)(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int),void *,BOOL)::$_0>, (uint64_t)v6);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::RemovePropertyListener(unsigned int,void (*)(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int),void *,BOOL)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  unsigned __int8 v2 = (_DWORD *)(*a1)[1];
  uint64_t v3 = (void *)(*a1)[2];
  uint64_t v4 = (unsigned char *)(*a1)[3];
  uint64_t v5 = (void *)(*a1)[4];
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v6 = *(void **)(v1 + 104);
  char v7 = *(void **)(v1 + 112);
  if (v6 != v7)
  {
    while (1)
    {
      uint64_t v8 = *v6;
      if (*(_DWORD *)(*v6 + 24) == *v2 && *(void *)(v8 + 32) == *v3 && (!*v4 || *(void *)(v8 + 40) == *v5)) {
        break;
      }
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_7;
      }
    }
    if (v6 != v7)
    {
      int v10 = v6 + 2;
      if (v6 + 2 != v7)
      {
        do
        {
          uint64_t v11 = *v10;
          if (*(_DWORD *)(*v10 + 24) != *v2 || *(void *)(v11 + 32) != *v3 || *v4 && *(void *)(v11 + 40) != *v5)
          {
            uint64_t v12 = v10[1];
            *int v10 = 0;
            v10[1] = 0;
            int v13 = (std::__shared_weak_count *)v6[1];
            *uint64_t v6 = v11;
            v6[1] = v12;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            v6 += 2;
          }
          v10 += 2;
        }
        while (v10 != v7);
        char v7 = *(void **)(v1 + 112);
      }
      if (v6 != v7)
      {
        while (v7 != v6)
        {
          unint64_t v14 = (std::__shared_weak_count *)*(v7 - 1);
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          v7 -= 2;
        }
        *(void *)(v1 + 112) = v6;
      }
    }
  }
LABEL_7:
  os_unfair_recursive_lock_unlock();
  return 0;
}

uint64_t AUv3InstanceBase::AddPropertyListener(AUv3InstanceBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  int v8 = a2;
  uint64_t v6 = a4;
  char v7 = a3;
  v5[0] = &v8;
  v5[1] = this;
  v5[2] = &v7;
  v5[3] = &v6;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::AddPropertyListener(unsigned int,void (*)(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int),void *)::$_0>, (uint64_t)v5);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::AddPropertyListener(unsigned int,void (*)(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int),void *)::$_0>(unsigned int ***a1)
{
  uint64_t v1 = (uint64_t)*a1;
  unsigned __int8 v2 = (*a1)[1];
  uint64_t v3 = (const void *)***a1;
  uint64_t v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = (id *)CFDictionaryGetValue(*v4, v3);
  if (!Value || (uint64_t v6 = Value, ((_BYTE)Value[2] & 2) != 0))
  {
    unsigned int v21 = **(_DWORD **)v1;
    uint64_t result = 4294956417;
    if (v21 > 0x13) {
      return result;
    }
    int v23 = 1 << v21;
    if ((v23 & 0x818) != 0)
    {
      os_unfair_recursive_lock_lock_with_options();
      id v24 = *(unsigned int **)v1;
      int v26 = *(uint64_t **)(v1 + 16);
      long long v25 = *(uint64_t **)(v1 + 24);
      long long v27 = operator new(0x48uLL);
      uint64_t v28 = v27;
      v27[1] = 0;
      v27[2] = 0;
      void *v27 = &unk_1EDFA24D0;
      float v29 = (char *)(v27 + 3);
      unsigned int v30 = *v24;
      uint64_t v31 = *v26;
      uint64_t v32 = *v25;
      void v27[3] = &unk_1EDF94D40;
      v27[4] = v2;
      v27[5] = 0;
      *((_DWORD *)v27 + 12) = v30;
      v27[7] = v31;
      v27[8] = v32;
      unint64_t v33 = *((void *)v2 + 15);
      long long v34 = (void *)*((void *)v2 + 14);
      if ((unint64_t)v34 >= v33)
      {
        uint64_t v51 = *((void *)v2 + 13);
        uint64_t v52 = ((uint64_t)v34 - v51) >> 4;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v54 = v33 - v51;
        if (v54 >> 3 > v53) {
          unint64_t v53 = v54 >> 3;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        long long v81 = v2 + 30;
        uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v55);
        uint64_t v57 = &v56[16 * v52];
        unsigned int v77 = v56;
        uint64_t v78 = v57;
        unint64_t v80 = &v56[16 * v58];
        *(void *)uint64_t v57 = v29;
        *((void *)v57 + 1) = v28;
        uint64_t v79 = v57 + 16;
        std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)v2 + 13, &v77);
        uint64_t v35 = (void *)*((void *)v2 + 14);
        std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v77);
      }
      else
      {
        *long long v34 = v29;
        v34[1] = v27;
        uint64_t v35 = v34 + 2;
        *((void *)v2 + 14) = v34 + 2;
      }
      *((void *)v2 + 14) = v35;
    }
    else
    {
      if ((v23 & 0x80100) == 0) {
        return result;
      }
      os_unfair_recursive_lock_lock_with_options();
      id v36 = *(unsigned int **)v1;
      long long v37 = *(uint64_t **)(v1 + 16);
      char v38 = *(uint64_t **)(v1 + 24);
      uint64_t v39 = (char *)operator new(0x48uLL);
      *((void *)v39 + 1) = 0;
      *((void *)v39 + 2) = 0;
      *(void *)uint64_t v39 = &unk_1EDFA2498;
      LODWORD(v36) = *v36;
      uint64_t v40 = *v37;
      uint64_t v41 = *v38;
      int v42 = @"format";
      uint8x8_t v43 = @"format";
      *((void *)v39 + 4) = v2;
      *((void *)v39 + 5) = @"format";
      *((_DWORD *)v39 + 12) = v36;
      *((void *)v39 + 7) = v40;
      *((void *)v39 + 8) = v41;
      *((void *)v39 + 3) = &unk_1EDF94D18;
      uint64_t v44 = [*((id *)v2 + 9) inputBusses];
      uint64_t v45 = AUv3InstanceBase::Proxy(*((AUv3InstanceBase **)v39 + 4));
      [v44 addObserverToAllBusses:v45 forKeyPath:@"format" options:0 context:v39 + 24];

      id v46 = [*(id *)(*((void *)v39 + 4) + 72) outputBusses];
      long long v47 = AUv3InstanceBase::Proxy(*((AUv3InstanceBase **)v39 + 4));
      [v46 addObserverToAllBusses:v47 forKeyPath:@"format" options:0 context:v39 + 24];

      unint64_t v48 = *((void *)v2 + 15);
      id v49 = (void *)*((void *)v2 + 14);
      if ((unint64_t)v49 >= v48)
      {
        uint64_t v68 = *((void *)v2 + 13);
        uint64_t v69 = ((uint64_t)v49 - v68) >> 4;
        unint64_t v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v71 = v48 - v68;
        if (v71 >> 3 > v70) {
          unint64_t v70 = v71 >> 3;
        }
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v70;
        }
        long long v81 = v2 + 30;
        int v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v72);
        *(void *)&long long v74 = v39 + 24;
        *((void *)&v74 + 1) = v39;
        uint64_t v75 = &v73[16 * v69];
        unsigned int v77 = v73;
        uint64_t v78 = v75;
        unint64_t v80 = &v73[16 * v76];
        *(_OWORD *)uint64_t v75 = v74;
        uint64_t v79 = v75 + 16;
        std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)v2 + 13, &v77);
        long long v50 = (void *)*((void *)v2 + 14);
        std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v77);
      }
      else
      {
        *id v49 = v39 + 24;
        v49[1] = v39;
        long long v50 = v49 + 2;
      }
      *((void *)v2 + 14) = v50;
    }
  }
  else
  {
    os_unfair_recursive_lock_lock_with_options();
    id v7 = v6[1];
    int v8 = *(unsigned int **)v1;
    uint64_t v9 = *(uint64_t **)(v1 + 16);
    int v10 = *(uint64_t **)(v1 + 24);
    uint64_t v11 = operator new(0x48uLL);
    v11[1] = 0;
    _OWORD v11[2] = 0;
    *uint64_t v11 = &unk_1EDFA2508;
    unsigned int v12 = *v8;
    uint64_t v13 = *v9;
    uint64_t v14 = *v10;
    id v15 = v7;
    _DWORD v11[4] = v2;
    void v11[5] = v15;
    *((_DWORD *)v11 + 12) = v12;
    v11[7] = v13;
    v11[8] = v14;
    v11[3] = &unk_1EDF94D68;
    char v16 = (void *)*((void *)v2 + 9);
    uint64_t v17 = AUv3InstanceBase::Proxy((AUv3InstanceBase *)v2);
    [v16 addObserver:v17 forKeyPath:v11[5] options:0 context:v11 + 3];

    unint64_t v18 = *((void *)v2 + 15);
    id v19 = (void *)*((void *)v2 + 14);
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v59 = *((void *)v2 + 13);
      uint64_t v60 = ((uint64_t)v19 - v59) >> 4;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v62 = v18 - v59;
      if (v62 >> 3 > v61) {
        unint64_t v61 = v62 >> 3;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      long long v81 = v2 + 30;
      unsigned int v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v63);
      *(void *)&long long v65 = v11 + 3;
      *((void *)&v65 + 1) = v11;
      uint64_t v66 = &v64[16 * v60];
      unsigned int v77 = v64;
      uint64_t v78 = v66;
      unint64_t v80 = &v64[16 * v67];
      *(_OWORD *)uint64_t v66 = v65;
      uint64_t v79 = v66 + 16;
      std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)v2 + 13, &v77);
      AudioUnitEvent v20 = (void *)*((void *)v2 + 14);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v77);
    }
    else
    {
      *id v19 = v11 + 3;
      v19[1] = v11;
      AudioUnitEvent v20 = v19 + 2;
    }
    *((void *)v2 + 14) = v20;
  }
  os_unfair_recursive_lock_unlock();
  return 0;
}

void sub_190020D18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);

  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t AUv3InstanceBase::ClientPropertyListener::call(AUv3InstanceBase::ClientPropertyListener *this, NSObject *a2, NSString *a3)
{
  return (*((uint64_t (**)(void, void, void, void, void))this + 4))(*((void *)this + 5), *(void *)(*((void *)this + 1) + 40), *((unsigned int *)this + 6), 0, 0);
}

void AUv3InstanceBase::ClientPropertyListener::~ClientPropertyListener(id *this)
{
  JUMPOUT(0x192FC8940);
}

{
}

uint64_t std::__shared_ptr_emplace<AUv3InstanceBase::ClientPropertyListener>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AUv3InstanceBase::ClientPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA24D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AUv3InstanceBase::ClientPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA24D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

id AUv3InstanceBase::Proxy(AUv3InstanceBase *this)
{
  unsigned __int8 v2 = (void *)*((void *)this + 11);
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(AUExtensionInstanceProxy);
    uint64_t v4 = (void *)*((void *)this + 11);
    *((void *)this + 11) = v3;

    [*((id *)this + 11) setAuInstance:this];
    unsigned __int8 v2 = (void *)*((void *)this + 11);
  }
  return v2;
}

void AUv3InstanceBase::BusPropertyListener::call(AUv3InstanceBase::BusPropertyListener *this, NSObject *a2, NSString *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v5 = [*(id *)(*((void *)this + 1) + 72) inputBusses];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v6)
  {
    int v7 = 0;
    uint64_t v8 = *(void *)v23;
    while (2)
    {
      uint64_t v9 = 0;
      int v10 = v7 + v6;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        if (*(NSObject **)(*((void *)&v22 + 1) + 8 * v9) == v4)
        {
          uint64_t v16 = (v7 + v9);
          uint64_t v17 = 1;
LABEL_20:

          (*((void (**)(void, void, void, uint64_t, uint64_t))this + 4))(*((void *)this + 5), *(void *)(*((void *)this + 1) + 40), *((unsigned int *)this + 6), v17, v16);
          goto LABEL_21;
        }
        ++v9;
      }
      while (v6 != v9);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
      int v7 = v10;
      if (v6) {
        continue;
      }
      break;
    }
  }

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v5 = objc_msgSend(*(id *)(*((void *)this + 1) + 72), "outputBusses", 0);
  uint64_t v11 = [v5 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v11)
  {
    int v12 = 0;
    uint64_t v13 = *(void *)v19;
    while (2)
    {
      uint64_t v14 = 0;
      int v15 = v12 + v11;
      do
      {
        if (*(void *)v19 != v13) {
          objc_enumerationMutation(v5);
        }
        if (*(NSObject **)(*((void *)&v18 + 1) + 8 * v14) == v4)
        {
          uint64_t v16 = (v12 + v14);
          uint64_t v17 = 2;
          goto LABEL_20;
        }
        ++v14;
      }
      while (v11 != v14);
      uint64_t v11 = [v5 countByEnumeratingWithState:&v18 objects:v26 count:16];
      int v12 = v15;
      if (v11) {
        continue;
      }
      break;
    }
  }

LABEL_21:
}

void sub_1900211C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AUv3InstanceBase::BusPropertyListener::~BusPropertyListener(AUv3InstanceBase::BusPropertyListener *this)
{
  AUv3InstanceBase::BusPropertyListener::~BusPropertyListener(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = &unk_1EDF94D18;
  unsigned __int8 v2 = [*(id *)(*((void *)this + 1) + 72) inputBusses];
  uint64_t v3 = AUv3InstanceBase::Proxy(*((AUv3InstanceBase **)this + 1));
  [v2 removeObserverFromAllBusses:v3 forKeyPath:*((void *)this + 2) context:this];

  uint64_t v4 = [*(id *)(*((void *)this + 1) + 72) outputBusses];
  uint64_t v5 = AUv3InstanceBase::Proxy(*((AUv3InstanceBase **)this + 1));
  [v4 removeObserverFromAllBusses:v5 forKeyPath:*((void *)this + 2) context:this];
}

uint64_t std::__shared_ptr_emplace<AUv3InstanceBase::BusPropertyListener>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AUv3InstanceBase::BusPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AUv3InstanceBase::BusPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AUv3InstanceBase::GlobalPropertyListener::~GlobalPropertyListener(AUv3InstanceBase::GlobalPropertyListener *this)
{
  AUv3InstanceBase::GlobalPropertyListener::~GlobalPropertyListener(this);
  JUMPOUT(0x192FC8940);
}

{
  AUv3InstanceBase *v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1EDF94D68;
  unsigned __int8 v2 = (AUv3InstanceBase *)*((void *)this + 1);
  uint64_t v3 = (void *)*((void *)v2 + 9);
  uint64_t v4 = AUv3InstanceBase::Proxy(v2);
  [v3 removeObserver:v4 forKeyPath:*((void *)this + 2) context:this];
}

uint64_t std::__shared_ptr_emplace<AUv3InstanceBase::GlobalPropertyListener>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AUv3InstanceBase::GlobalPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AUv3InstanceBase::GlobalPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AUv3InstanceBase::SetProperty(AUv3InstanceBase *this, int a2, int a3, int a4, const void *a5, int a6)
{
  int v11 = a3;
  int v12 = a2;
  int v10 = a4;
  uint64_t v9 = a5;
  int v8 = a6;
  v7[0] = this;
  v7[1] = &v12;
  _OWORD v7[2] = &v11;
  _OWORD v7[3] = &v10;
  v7[4] = &v9;
  void v7[5] = &v8;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::SetProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::{lambda(void)#1}>, (uint64_t)v7);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::SetProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = **a1;
  unsigned __int8 v2 = (const void *)*(unsigned int *)(*a1)[1];
  int v3 = *(_DWORD *)(*a1)[2];
  unint64_t v4 = *(unsigned int *)(*a1)[3];
  uint64_t v5 = *(unsigned __int8 **)(*a1)[4];
  LODWORD(v6) = *(_DWORD *)(*a1)[5];
  int v79 = 0;
  int v7 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v7, v2);
  if (!Value || (uint64_t v9 = Value, (v10 = Value[10]) == 0))
  {
    v78[0] = (CFTypeRef *)v5;
    uint64_t v16 = (CFTypeRef *)*(id *)(v1 + 72);
    v78[1] = v16;
    if ((int)v2 > 26)
    {
      if ((int)v2 <= 55)
      {
        if ((int)v2 <= 47)
        {
          if (v2 != 27)
          {
            if (v2 == 36)
            {
              uint64_t v17 = objc_opt_new();
              [v17 setNumber:*(int *)v5];
              long long v18 = (const void *)*((void *)v5 + 1);
              if (v18) {
                CFRetain(*((CFTypeRef *)v5 + 1));
              }
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, v18);
              [v17 setName:*(void *)cf];
              long long v19 = *(void **)(v1 + 72);
              *(void *)uint64_t __dst = 0;
              [v19 _setValue:v17 forKey:@"currentPreset" error:__dst];
              id v11 = *(id *)__dst;
              if (*(void *)cf) {
                CFRelease(*(CFTypeRef *)cf);
              }

              goto LABEL_32;
            }
            goto LABEL_42;
          }
          *(void *)(v1 + 368) = 0;
          *(_OWORD *)(v1 + 336) = 0u;
          *(_OWORD *)(v1 + 352) = 0u;
          if (v6 >= 0x28) {
            size_t v39 = 40;
          }
          else {
            size_t v39 = v6;
          }
          memcpy((void *)(v1 + 336), v5, v39);
          if (*(void *)(v1 + 344) || *(void *)(v1 + 352))
          {
            *(void *)CFTypeRef cf = MEMORY[0x1E4F143A8];
            *(void *)&cf[8] = 3221225472;
            *(void *)&cf[16] = ___ZN16AUv3InstanceBase16setHostCallbacksEPK16HostCallbackInfom_block_invoke;
            *(void *)&cf[24] = &__block_descriptor_40_e29_B56__0_d8_d16_q24_d32_q40_d48l;
            *(void *)&long long v81 = v1 + 336;
            [*(id *)(v1 + 72) setMusicalContextBlock:cf];
          }
          else
          {
            [*(id *)(v1 + 72) setMusicalContextBlock:0];
          }
          if (*(void *)(v1 + 360) || *(void *)(v1 + 368))
          {
            *(void *)uint64_t __dst = MEMORY[0x1E4F143A8];
            *(void *)&__dst[8] = 3221225472;
            *(void *)&__dst[16] = ___ZN16AUv3InstanceBase16setHostCallbacksEPK16HostCallbackInfom_block_invoke_2;
            *(void *)&__dst[24] = &__block_descriptor_40_e21_B40__0_Q8_d16_d24_d32l;
            uint64_t v84 = v1 + 336;
            [*(id *)(v1 + 72) setTransportStateBlock:__dst];
          }
          else
          {
            [*(id *)(v1 + 72) setTransportStateBlock:0];
          }
LABEL_122:
          id v11 = 0;
          goto LABEL_123;
        }
        if (v2 != 48)
        {
          if (v2 == 50)
          {
            *(void *)CFTypeRef cf = 0;
            AUv3InstanceBase::setProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::operator()(v78, @"fullStateForDocument", (uint64_t)cf);
LABEL_31:
            id v11 = *(id *)cf;
LABEL_32:
            if (v11)
            {
              uint64_t v12 = [v11 code];
LABEL_124:

              goto LABEL_125;
            }
LABEL_123:
            uint64_t v12 = 0;
            goto LABEL_124;
          }
LABEL_42:
          if (!gAudioComponentLogCategory) {
            operator new();
          }
          unint64_t v55 = *(id *)gAudioComponentLogCategory;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136316418;
            *(void *)&cf[4] = "AUv3Instance.mm";
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 1435;
            *(_WORD *)&cf[18] = 1024;
            *(_DWORD *)&cf[20] = v2;
            *(_WORD *)&cf[24] = 1024;
            *(_DWORD *)&cf[26] = v3;
            *(_WORD *)&cf[30] = 1024;
            LODWORD(v81) = v4;
            WORD2(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 6) = v6;
            _os_log_impl(&dword_18FEC0000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid property id %d (scope %d, element %d, size %d)", cf, 0x2Au);
          }
          id v11 = 0;
          uint64_t v12 = 4294956417;
          goto LABEL_124;
        }
LABEL_37:
        int v21 = [*(id *)(v1 + 72) renderResourcesAllocated];
        if (v21)
        {
          long long v22 = [*(id *)(v1 + 72) transportStateBlock];
          long long v23 = [*(id *)(v1 + 72) musicalContextBlock];
          [*(id *)(v1 + 72) deallocateRenderResources];
        }
        else
        {
          long long v22 = 0;
          long long v23 = 0;
        }
        if (v2 == 63)
        {
          long long v47 = _Block_copy(*(const void **)v5);
          *(void *)CFTypeRef cf = MEMORY[0x1E4F143A8];
          *(void *)&cf[8] = 3221225472;
          *(void *)&cf[16] = ___ZN16AUv3InstanceBase11setPropertyEjjjPKvj_block_invoke_2;
          *(void *)&cf[24] = &unk_1E5687A60;
          id v48 = v47;
          *(void *)&long long v81 = v48;
          id v49 = _Block_copy(cf);
          [*(id *)(v1 + 72) setMIDIOutputEventListBlock:v49];
        }
        else
        {
          if (v6 >= 0x10) {
            size_t v6 = 16;
          }
          else {
            size_t v6 = v6;
          }
          if (v6 <= 0xF) {
            size_t v40 = 16 - v6;
          }
          else {
            size_t v40 = 0;
          }
          bzero(&__dst[v6], v40);
          memcpy(__dst, v5, v6);
          char v41 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 216))(v1);
          *(void *)CFTypeRef cf = MEMORY[0x1E4F143A8];
          *(void *)&cf[8] = 3221225472;
          *(void *)&cf[16] = ___ZN16AUv3InstanceBase11setPropertyEjjjPKvj_block_invoke;
          *(void *)&cf[24] = &__block_descriptor_49_e18_i36__0q8C16q20r_28l;
          char v82 = v41;
          long long v81 = *(_OWORD *)__dst;
          int v42 = _Block_copy(cf);
          [*(id *)(v1 + 72) setMIDIOutputEventBlock:v42];
        }
        if (v21)
        {
          [*(id *)(v1 + 72) setTransportStateBlock:v22];
          [*(id *)(v1 + 72) setMusicalContextBlock:v23];
          long long v50 = *(void **)(v1 + 72);
          id v77 = 0;
          [v50 allocateRenderResourcesAndReturnError:&v77];
          id v51 = v77;
          if (v51)
          {
            uint64_t v52 = v51;
            if (!gAudioComponentLogCategory) {
              operator new();
            }
            uint64_t v59 = *(id *)gAudioComponentLogCategory;
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t __dst = 136315650;
              *(void *)&__dst[4] = "AUv3Instance.mm";
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = 1386;
              *(_WORD *)&__dst[18] = 2112;
              *(void *)&__dst[20] = v52;
              _os_log_impl(&dword_18FEC0000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d Error occured while trying to reinitialize AU when setting MIDIOutputBlock: %@", __dst, 0x1Cu);
            }

            id v11 = 0;
            uint64_t v12 = 4294956447;
            goto LABEL_124;
          }
        }

        goto LABEL_122;
      }
      if ((int)v2 > 1841)
      {
        if (v2 == 1842)
        {
          id v11 = 0;
          [*(id *)(v1 + 72) setRequestViewControllerSynchronously:*v5];
          goto LABEL_123;
        }
        if (v2 == 3503)
        {
          id v11 = 0;
          [*(id *)(v1 + 72) setLocalCachingDisabled:*v5];
          goto LABEL_123;
        }
        goto LABEL_42;
      }
      if (v2 != 56)
      {
        if (v2 != 63) {
          goto LABEL_42;
        }
        goto LABEL_37;
      }
      id WeakRetained = objc_loadWeakRetained((id *)v5);
      [*(id *)(v1 + 72) requestViewControllerWithCompletionHandler:WeakRetained];
LABEL_121:

      goto LABEL_122;
    }
    switch((int)v2)
    {
      case 0:
        *(void *)CFTypeRef cf = 0;
        AUv3InstanceBase::setProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::operator()(v78, @"fullState", (uint64_t)cf);
        goto LABEL_31;
      case 1:
        goto LABEL_25;
      case 2:
        if (v6 < 8) {
          goto LABEL_59;
        }
        if (v3) {
          unsigned int v25 = v4;
        }
        else {
          unsigned int v25 = 0;
        }
        if (v3) {
          int v26 = v3;
        }
        else {
          int v26 = 2;
        }
        long long v27 = AUv3InstanceBase::GetBus((id *)v1, v26, v25, &v79);
        uint64_t v28 = v27;
        uint64_t v12 = v79;
        if (v79) {
          goto LABEL_96;
        }
        id v11 = [v27 format];
        if (v11)
        {
          float v29 = [v28 format];
          uint64_t v30 = [v29 streamDescription];
          long long v31 = *(_OWORD *)v30;
          long long v32 = *(_OWORD *)(v30 + 16);
          *(void *)&long long v81 = *(void *)(v30 + 32);
          *(_OWORD *)CFTypeRef cf = v31;
          *(_OWORD *)&cf[16] = v32;

          *(void *)CFTypeRef cf = *(void *)v5;
          id v33 = objc_alloc((Class)getAVAudioFormatClass());
          long long v34 = [v28 format];
          uint64_t v35 = [v34 channelLayout];
          id v36 = (void *)[v33 initWithStreamDescription:cf channelLayout:v35];

          *(void *)uint64_t __dst = 0;
          [v28 setFormat:v36 error:__dst];
          id v11 = *(id *)__dst;

          goto LABEL_32;
        }

        uint64_t v12 = 4294956445;
        goto LABEL_124;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
        goto LABEL_42;
      case 8:
        if (v6 < 0x28) {
          goto LABEL_59;
        }
        if (v3) {
          unsigned int v53 = v4;
        }
        else {
          unsigned int v53 = 0;
        }
        if (v3) {
          int v54 = v3;
        }
        else {
          int v54 = 2;
        }
        uint64_t v28 = AUv3InstanceBase::GetBus((id *)v1, v54, v53, &v79);
        uint64_t v12 = v79;
        if (v79) {
          goto LABEL_96;
        }
        unsigned int v61 = *((_DWORD *)v5 + 7);
        if (v61 < 3)
        {
          long long v74 = 0;
          goto LABEL_131;
        }
        id AVAudioChannelLayoutClass = getAVAudioChannelLayoutClass();
        id v63 = [v28 format];
        unsigned int v64 = [v63 channelLayout];
        uint64_t v65 = v61 | 0x930000;
        if (!v64) {
          goto LABEL_130;
        }
        uint64_t v66 = [v63 channelLayout];
        uint64_t v67 = [v66 layout];
        if (v5 && v67)
        {
          uint64_t v68 = [v63 channelLayout];
          id v76 = AVAudioChannelLayoutClass;
          int v69 = [v68 channelCount];
          int v70 = *((_DWORD *)v5 + 7);

          BOOL v71 = v69 == v70;
          id AVAudioChannelLayoutClass = v76;
          if (!v71) {
            goto LABEL_130;
          }
          unsigned int v64 = [v63 channelLayout];
          uint64_t v65 = *(unsigned int *)[v64 layout];
        }
        else
        {
        }
LABEL_130:

        long long v74 = [AVAudioChannelLayoutClass layoutWithLayoutTag:v65];

LABEL_131:
        uint64_t v75 = (void *)[objc_alloc((Class)getAVAudioFormatClass()) initWithStreamDescription:v5 channelLayout:v74];
        *(void *)CFTypeRef cf = 0;
        [v28 setFormat:v75 error:cf];
        id v11 = *(id *)cf;

        goto LABEL_32;
      case 11:
        if (v6 < 4)
        {
LABEL_59:
          id v11 = 0;
          uint64_t v12 = 4294967246;
          goto LABEL_124;
        }
        unint64_t v37 = *(unsigned int *)v5;
        if (v3 == 2)
        {
          unint64_t v72 = [*(id *)(v1 + 72) outputBusses];
          *(void *)CFTypeRef cf = 0;
          [v72 setBusCount:v37 error:cf];
          id v11 = *(id *)cf;

          goto LABEL_32;
        }
        if (v3 == 1)
        {
          char v38 = [*(id *)(v1 + 72) inputBusses];
          *(void *)CFTypeRef cf = 0;
          [v38 setBusCount:v37 error:cf];
          id v11 = *(id *)cf;

          std::vector<AUv3RenderAdapter::AUInputElement>::resize((char **)(v1 + 144), v37);
          goto LABEL_32;
        }
        id v11 = 0;
        uint64_t v12 = 4294956430;
        goto LABEL_124;
      default:
        if (v2 == 19)
        {
          uint64_t v28 = AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v79);
          uint64_t v12 = v79;
          if (!v79)
          {
            uint8x8_t v43 = [getAVAudioChannelLayoutClass() layoutWithLayout:v5];
            id v44 = objc_alloc((Class)getAVAudioFormatClass());
            uint64_t v45 = [v28 format];
            id v46 = objc_msgSend(v44, "initWithStreamDescription:channelLayout:", objc_msgSend(v45, "streamDescription"), v43);

            *(void *)CFTypeRef cf = 0;
            [v28 setFormat:v46 error:cf];
            id v11 = *(id *)cf;

            goto LABEL_32;
          }
LABEL_96:
        }
        else
        {
          if (v2 != 23) {
            goto LABEL_42;
          }
LABEL_25:
          id WeakRetained = AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v79);
          uint64_t v12 = v79;
          if (!v79)
          {
            uint64_t v12 = AUv3RenderAdapter::SetProperty((AUv3RenderAdapter *)(v1 + 136), (int)v2, v3, v4, v5, v6);
            int v79 = v12;
            if (!v12)
            {
              uint64_t v57 = *(void *)(v1 + 144);
              BOOL v58 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v1 + 152) - v57) >> 3) > v4
                 && *(_DWORD *)(v57 + 40 * v4) != 0;
              [WeakRetained setEnabled:v58];
              goto LABEL_121;
            }
          }
        }
        id v11 = 0;
        goto LABEL_124;
    }
  }
  *(void *)CFTypeRef cf = v5;
  *(_DWORD *)uint64_t __dst = v6;
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, int *))(*(void *)v10 + 48))(v10, cf, __dst, &v79);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = v79;
  if (!v79)
  {
    if ((v9[2] & 2) != 0)
    {
      long long v24 = AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v79);
      id v15 = v24;
      uint64_t v12 = v79;
      if (!v79)
      {
        [v24 setValue:v11 forKey:v9[1]];
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v13 = *(void **)(v1 + 72);
      id v14 = (id)v9[1];
      *(void *)CFTypeRef cf = 0;
      [v13 _setValue:v11 forKey:v14 error:cf];
      id v15 = *(id *)cf;

      if (!v15)
      {
        uint64_t v12 = 0;
        goto LABEL_125;
      }
      uint64_t v12 = [v15 code];
    }
  }
LABEL_125:

  return v12;
}

void sub_190022228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id AUv3InstanceBase::GetBus(id *this, int a2, unsigned int a3, int *a4)
{
  if (a2 == 2)
  {
    size_t v6 = [this[9] outputBusses];
  }
  else
  {
    if (a2 != 1)
    {
      int v8 = 0;
      *a4 = -10866;
      goto LABEL_9;
    }
    size_t v6 = [this[9] inputBusses];
  }
  int v7 = v6;
  if ([v6 count] <= (unint64_t)a3)
  {
    *a4 = -10877;

    int v8 = 0;
  }
  else
  {
    *a4 = 0;
    int v8 = objc_msgSend(v7, "objectAtIndexedSubscript:");
  }
LABEL_9:
  return v8;
}

void sub_190022514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<AUv3RenderAdapter::AUInputElement>::resize(char **a1, unint64_t a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    long long v19 = &v4[40 * a2];
    goto LABEL_23;
  }
  int v8 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3) >= v7)
  {
    long long v19 = &v5[40 * v7];
    uint64_t v20 = 40 * a2 - 8 * ((v5 - *a1) >> 3);
    do
    {
      *(_DWORD *)uint64_t v5 = 0;
      v5 += 40;
      v20 -= 40;
    }
    while (v20);
LABEL_23:
    a1[1] = v19;
    return;
  }
  if (a2 > 0x666666666666666) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x333333333333333) {
    unint64_t v11 = 0x666666666666666;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 > 0x666666666666666) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v12 = (char *)operator new(40 * v11);
  uint64_t v13 = &v12[40 * v6];
  id v14 = v13;
  uint64_t v15 = 40 * a2 - 40 * v6;
  do
  {
    *(_DWORD *)id v14 = 0;
    v14 += 40;
    v15 -= 40;
  }
  while (v15);
  uint64_t v16 = *a1;
  if (v5 != *a1)
  {
    do
    {
      long long v17 = *(_OWORD *)(v5 - 40);
      long long v18 = *(_OWORD *)(v5 - 24);
      *((void *)v13 - 1) = *((void *)v5 - 1);
      *(_OWORD *)(v13 - 24) = v18;
      *(_OWORD *)(v13 - 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v17;
      v13 -= 40;
      v5 -= 40;
    }
    while (v5 != v16);
    uint64_t v5 = *a1;
  }
  *a1 = v13;
  a1[1] = &v12[40 * a2];
  a1[2] = &v12[40 * v11];
  if (v5)
  {
    operator delete(v5);
  }
}

id getAVAudioChannelLayoutClass(void)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVAudioChannelLayoutClass(void)::softClass;
  uint64_t v7 = getAVAudioChannelLayoutClass(void)::softClass;
  if (!getAVAudioChannelLayoutClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL28getAVAudioChannelLayoutClassv_block_invoke;
    v3[3] = &unk_1E5688B80;
    v3[4] = &v4;
    ___ZL28getAVAudioChannelLayoutClassv_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_190022788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVAudioFormatClass(void)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVAudioFormatClass(void)::softClass;
  uint64_t v7 = getAVAudioFormatClass(void)::softClass;
  if (!getAVAudioFormatClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL21getAVAudioFormatClassv_block_invoke;
    v3[3] = &unk_1E5688B80;
    v3[4] = &v4;
    ___ZL21getAVAudioFormatClassv_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19002286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16AUv3InstanceBase11setPropertyEjjjPKvj_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *__src)
{
  double v7 = (double)a2;
  BOOL v8 = *(unsigned char *)(a1 + 48) == 0;
  if (*(unsigned char *)(a1 + 48)) {
    double v7 = 0.0;
  }
  double v16 = v7;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  int v20 = 1;
  int v12 = 1;
  if (v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = a2;
  }
  uint64_t v13 = v9;
  __int16 v14 = a4;
  if (a4 >= 0x100) {
    size_t v10 = 256;
  }
  else {
    size_t v10 = a4;
  }
  memcpy(&v15, __src, v10);
  return (*(uint64_t (**)(void, double *, uint64_t, int *))(a1 + 32))(*(void *)(a1 + 40), &v16, a3, &v12);
}

uint64_t ___ZN16AUv3InstanceBase11setPropertyEjjjPKvj_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AUv3InstanceBase::setProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::operator()(CFTypeRef **a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  CFTypeRef v6 = **a1;
  if (v6) {
    CFRetain(**a1);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v6);
  [(CFTypeRef *)a1[1] _setValue:cf forKey:v5 error:a3];
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1900229C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);

  _Unwind_Resume(a1);
}

uint64_t ___ZN16AUv3InstanceBase16setHostCallbacksEPK16HostCallbackInfom_block_invoke(uint64_t a1, void *a2, double *a3, void *a4, void *a5, void *a6, void *a7)
{
  __int16 v14 = *(void **)(a1 + 32);
  __int16 v15 = (unsigned int (*)(void, void *, void *))v14[1];
  if (v15 && !v15(*v14, a5, a2))
  {
    uint64_t v16 = 1;
  }
  else
  {
    if (a5) {
      *a5 = 0;
    }
    uint64_t v16 = 0;
    if (a2) {
      *a2 = 0x405E000000000000;
    }
  }
  unsigned int v21 = 4;
  unsigned int v22 = 0;
  float v20 = 4.0;
  long long v17 = *(void **)(a1 + 32);
  long long v18 = (unsigned int (*)(void, unsigned int *, float *, unsigned int *, void *))v17[2];
  if (v18 && !v18(*v17, &v22, &v20, &v21, a7))
  {
    if (a6) {
      *a6 = v22;
    }
    if (a3) {
      *a3 = v20;
    }
    if (a4) {
      *a4 = v21;
    }
    return 1;
  }
  else
  {
    if (a6) {
      *a6 = 0;
    }
    if (a3) {
      *a3 = 4.0;
    }
    if (a4) {
      *a4 = 0;
    }
    if (a7) {
      *a7 = 0;
    }
  }
  return v16;
}

uint64_t ___ZN16AUv3InstanceBase16setHostCallbacksEPK16HostCallbackInfom_block_invoke_2(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v12 = 0;
  __int16 v11 = 0;
  CFTypeRef v6 = *(void **)(a1 + 32);
  double v7 = (unsigned int (*)(void, char *, __int16 *, char *, uint64_t, __int16 *, uint64_t, uint64_t))v6[4];
  if (v7)
  {
    if (!v7(*v6, (char *)&v12 + 1, &v12, (char *)&v11 + 1, a3, &v11, a4, a5))
    {
      if (a2)
      {
        uint64_t v8 = (2 * (HIBYTE(v12) != 0)) | (4 * ((_BYTE)v12 != 0));
LABEL_10:
        *a2 = v8 | (HIBYTE(v11) != 0) | (8 * ((_BYTE)v11 != 0));
        return 1;
      }
      return 1;
    }
    return 0;
  }
  uint64_t v9 = (unsigned int (*)(void, char *, char *, uint64_t, __int16 *, uint64_t, uint64_t))v6[3];
  if (!v9 || v9(*v6, (char *)&v12 + 1, (char *)&v11 + 1, a3, &v11, a4, a5)) {
    return 0;
  }
  if (a2)
  {
    uint64_t v8 = 2 * (HIBYTE(v12) != 0);
    goto LABEL_10;
  }
  return 1;
}

void ___ZL21getAVAudioFormatClassv_block_invoke(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFormat");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFormatClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unsigned __int8 v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getAVAudioFormatClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 64, @"Unable to find class %s", "AVAudioFormat");

    __break(1u);
  }
}

void sub_190022CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVFAudioLibrary(void)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = ___ZL19AVFAudioLibraryCorePPc_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E56875E0;
    uint64_t v5 = 0;
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    unsigned __int8 v2 = [NSString stringWithUTF8String:"void *AVFAudioLibrary()"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"AVFASoftLink.h", 63, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

void sub_190022E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19AVFAudioLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AVFAudioLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void ___ZL28getAVAudioChannelLayoutClassv_block_invoke(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioChannelLayout");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioChannelLayoutClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unsigned __int8 v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getAVAudioChannelLayoutClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 65, @"Unable to find class %s", "AVAudioChannelLayout");

    __break(1u);
  }
}

void sub_190022FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUv3InstanceBase::GetProperty(AUv3InstanceBase *this, int a2, int a3, int a4, void *a5, unsigned int *a6)
{
  int v10 = a3;
  int v11 = a2;
  int v9 = a4;
  uint64_t v8 = a5;
  v7[0] = this;
  v7[1] = &v11;
  _OWORD v7[2] = &v10;
  _OWORD v7[3] = &v9;
  v7[4] = &v8;
  void v7[5] = a6;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetProperty(unsigned int,unsigned int,unsigned int,void *,unsigned int &)::{lambda(void)#1}>, (uint64_t)v7);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetProperty(unsigned int,unsigned int,unsigned int,void *,unsigned int &)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = **a1;
  unsigned __int8 v2 = (const void *)*(unsigned int *)(*a1)[1];
  unsigned int v3 = *(_DWORD *)(*a1)[2];
  unsigned int v4 = *(_DWORD *)(*a1)[3];
  uint64_t v5 = (int *)(*a1)[5];
  uint64_t v6 = *(uint64_t **)(*a1)[4];
  int v130 = 0;
  if (*(unsigned char *)(v1 + 80))
  {
    if (v2 == 20 || v2 == 12) {
      [*(id *)(v1 + 72) flushEventSchedule];
    }
  }
  uint64_t v8 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = CFDictionaryGetValue(*v8, v2);
  if (Value)
  {
    int v10 = Value;
    if (*((void *)Value + 6))
    {
      if ((Value[16] & 2) != 0)
      {
        unsigned int v22 = AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v130);
        long long v23 = v22;
        uint64_t v12 = v130;
        if (v130)
        {

          int v11 = 0;
          goto LABEL_191;
        }
        int v11 = [v22 valueForKey:*((void *)v10 + 1)];
      }
      else
      {
        if (v3)
        {
          int v11 = 0;
          uint64_t v12 = 4294956430;
LABEL_191:

          return v12;
        }
        if (v4)
        {
          int v11 = 0;
          uint64_t v12 = 4294956419;
          goto LABEL_191;
        }
        if (v2 == 29
          && *(void *)(v1 + 72)
          && (*(unsigned int (**)(uint64_t))(*(void *)v1 + 216))(v1)
          && ([*(id *)(v1 + 72) isLoadedInProcess] & 1) == 0)
        {
          if (*v5 >= 4)
          {
            int v11 = 0;
            uint64_t v12 = 0;
            *(_DWORD *)uint64_t v6 = 0;
            goto LABEL_191;
          }
          int v11 = 0;
          goto LABEL_190;
        }
        uint64_t v105 = *(void **)(v1 + 72);
        id v106 = *((id *)v10 + 1);
        unint64_t v107 = +[AUAudioUnitProperty propertyWithKey:v106 v2propID:*((unsigned int *)v10 + 5) scope:0 element:0];
        __src[0] = 0;
        int v11 = [v105 _valueForProperty:v107 error:__src];
        uint64_t v108 = __src[0];

        if (v108)
        {
          uint64_t v12 = [v108 code];

          goto LABEL_191;
        }
      }
      if (v11)
      {
        uint64_t v12 = std::function<int ()(objc_object *,void *,unsigned int &)>::operator()((uint64_t)(v10 + 24), v11, (uint64_t)v6, (uint64_t)v5);
        goto LABEL_191;
      }
LABEL_190:
      uint64_t v12 = 4294956445;
      goto LABEL_191;
    }
  }
  if ((int)v2 <= 26)
  {
    switch((int)v2)
    {
      case 2:
        if (*v5 < 8) {
          return 4294967246;
        }
        if (v3) {
          unsigned int v15 = v4;
        }
        else {
          unsigned int v15 = 0;
        }
        if (v3) {
          int v16 = v3;
        }
        else {
          int v16 = 2;
        }
        long long v17 = AUv3InstanceBase::GetBus((id *)v1, v16, v15, &v130);
        id v18 = v17;
        uint64_t v12 = v130;
        if (v130) {
          goto LABEL_186;
        }
        long long v19 = [v17 format];
        float v20 = (uint64_t *)[v19 streamDescription];

        if (!v20) {
          goto LABEL_177;
        }
        *uint64_t v6 = *v20;
        int v21 = 8;
        goto LABEL_120;
      case 3:
        AUv3InstanceBase::ParameterMap::paramIDsForScope((AUv3InstanceBase::ParameterMap *)__src, (AUv3InstanceBase::ParameterMap *)(v1 + 200), v3);
        uint64_t v84 = __src[0];
        unsigned int v85 = (LODWORD(__src[1]) - LODWORD(__src[0])) & 0xFFFFFFFC;
        if (v85 >= *v5) {
          size_t v86 = *v5;
        }
        else {
          size_t v86 = v85;
        }
        memcpy(v6, __src[0], v86);
        *uint64_t v5 = v86;
        if (v84) {
          operator delete(v84);
        }
        return 0;
      case 4:
        if (*v5 < 0x64) {
          return 4294967246;
        }
        AUv3InstanceBase::ParameterMap::checkCacheParameters(v1 + 200);
        uint64_t v136 = 0;
        long long v134 = 0u;
        long long v135 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        memset(__src, 0, sizeof(__src));
        memset((char *)v128 + 8, 0, 40);
        *(void *)&v128[0] = v3;
        DWORD2(v128[0]) = v4;
        BOOL v58 = *(id **)(v1 + 224);
        uint64_t v57 = *(id **)(v1 + 232);
        if (v57 == v58) {
          goto LABEL_164;
        }
        unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v58) >> 4);
        break;
      case 8:
        if (*v5 < 0x28) {
          return 4294967246;
        }
        if (v3) {
          unsigned int v77 = v4;
        }
        else {
          unsigned int v77 = 0;
        }
        if (v3) {
          int v78 = v3;
        }
        else {
          int v78 = 2;
        }
        int v79 = AUv3InstanceBase::GetBus((id *)v1, v78, v77, &v130);
        id v18 = v79;
        uint64_t v12 = v130;
        if (v130) {
          goto LABEL_186;
        }
        unint64_t v80 = [v79 format];
        uint64_t v81 = [v80 streamDescription];

        if (!v81)
        {
LABEL_177:
          uint64_t v12 = 4294956445;
          goto LABEL_186;
        }
        long long v82 = *(_OWORD *)v81;
        long long v83 = *(_OWORD *)(v81 + 16);
        void v6[4] = *(void *)(v81 + 32);
        *(_OWORD *)uint64_t v6 = v82;
        *((_OWORD *)v6 + 1) = v83;
        int v21 = 40;
LABEL_120:
        *uint64_t v5 = v21;
        goto LABEL_38;
      case 11:
        if (*v5 < 4) {
          return 4294967246;
        }
        if (v3)
        {
          if (v3 == 2)
          {
            BOOL v71 = [*(id *)(v1 + 72) outputBusses];
            int v72 = [v71 count];
          }
          else
          {
            if (v3 != 1) {
              return 4294956430;
            }
            BOOL v71 = [*(id *)(v1 + 72) inputBusses];
            int v72 = [v71 count];
          }
          *(_DWORD *)uint64_t v6 = v72;
        }
        else
        {
          *(_DWORD *)uint64_t v6 = 1;
        }
        uint64_t v12 = 0;
        *uint64_t v5 = 4;
        return v12;
      case 13:
        unint64_t v87 = [*(id *)(v1 + 72) channelCapabilities];
        id v18 = v87;
        if (!v87) {
          goto LABEL_161;
        }
        int v88 = [v87 count];
        if (*v5 < (2 * v88))
        {
          uint64_t v12 = 4294967246;
          goto LABEL_186;
        }
        if (v88 >= 1)
        {
          uint64_t v111 = 0;
          uint64_t v112 = v88;
          do
          {
            id v113 = [v18 objectAtIndexedSubscript:v111];
            *((_WORD *)v6 + v111) = [v113 shortValue];

            ++v111;
          }
          while (v112 != v111);
        }
        goto LABEL_38;
      case 16:
        if (*v5 < 8) {
          return 4294967246;
        }
        long long v89 = AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v4);
        id v18 = v89;
        if (v89)
        {
          id v90 = [v89 valueStrings];
          if (v90)
          {

            id v91 = v90;
            goto LABEL_163;
          }
LABEL_161:
          uint64_t v12 = 4294956417;
        }
        else
        {
LABEL_160:
          uint64_t v12 = 4294956418;
        }
        goto LABEL_186;
      case 19:
        int v73 = AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v130);
        id v18 = v73;
        uint64_t v12 = v130;
        if (v130) {
          goto LABEL_186;
        }
        long long v74 = [v73 format];
        uint64_t v75 = [v74 channelLayout];

        if (v75)
        {
          size_t v76 = layoutSize(v75);
          if (v76 <= *v5)
          {
            memcpy(v6, [(AVAudioChannelLayout *)v75 layout], v76);
            *uint64_t v5 = v76;

            goto LABEL_38;
          }
          uint64_t v12 = 4294967246;
        }
        else
        {
          uint64_t v12 = 4294956445;
        }

LABEL_186:
        return v12;
      default:
        goto LABEL_158;
    }
    while (1)
    {
      unint64_t v60 = v59 >> 1;
      unsigned int v61 = (unsigned int *)&v58[6 * (v59 >> 1)];
      BOOL v62 = *v61 >= v3;
      if (*v61 != v3) {
        goto LABEL_91;
      }
      if (!HIDWORD(v58[6 * v60])) {
        break;
      }
LABEL_93:
      unint64_t v59 = v60;
      if (!v60)
      {
        if (v58 == v57 || *(_DWORD *)v58 != v3 || *((_DWORD *)v58 + 1) || *((_DWORD *)v58 + 2) != v4)
        {
LABEL_164:
          objc_destroyWeak((id *)&v128[1]);
        }
        else
        {
          id WeakRetained = objc_loadWeakRetained(v58 + 2);
          unsigned int v64 = *((_DWORD *)v58 + 10);
          objc_destroyWeak((id *)&v128[1]);
          if (WeakRetained)
          {
            id v65 = objc_loadWeakRetained((id *)(v1 + 200));
            uint64_t v66 = objc_msgSend(v65, "parameterTree", v128[0], v128[1], v128[2]);
            int v67 = [v66 _autoCreatedForV2AU];

            *((void *)&v133 + 1) = [WeakRetained unitName];

            LODWORD(v135) = [WeakRetained unit];
            [WeakRetained minValue];
            DWORD1(v135) = v68;
            [WeakRetained maxValue];
            DWORD2(v135) = v69;
            if (v67) {
              [WeakRetained _defaultValue];
            }
            else {
              [WeakRetained value];
            }
            HIDWORD(v135) = v70;
            int v115 = [WeakRetained flags];
            LODWORD(v136) = v115 | 0x8000000;
            LODWORD(v134) = v64;
            uint64_t v116 = *(void *)(v1 + 304);
            if (v116)
            {
              uint64_t v117 = v1 + 304;
              do
              {
                unsigned int v118 = *(_DWORD *)(v116 + 32);
                BOOL v119 = v118 >= v64;
                if (v118 >= v64) {
                  uint64_t v120 = (uint64_t *)v116;
                }
                else {
                  uint64_t v120 = (uint64_t *)(v116 + 8);
                }
                if (v119) {
                  uint64_t v117 = v116;
                }
                uint64_t v116 = *v120;
              }
              while (*v120);
              if (v117 != v1 + 304 && v64 >= *(_DWORD *)(v117 + 32)) {
                LODWORD(v136) = v115 | 0x8100000;
              }
            }
            id v121 = [WeakRetained displayName];
            id v122 = v121;
            if (v121)
            {
              *((void *)&v134 + 1) = v121;
              stpncpy((char *)__src, (const char *)[v121 UTF8String], 0x34uLL);
            }
            else
            {
              *((void *)&v134 + 1) = &stru_1EDFA53D0;
            }

            uint64_t v12 = 0;
            long long v123 = *(_OWORD *)__src;
            long long v124 = v132;
            *((_OWORD *)v6 + 1) = *(_OWORD *)&__src[2];
            *((_OWORD *)v6 + 2) = v124;
            *(_OWORD *)uint64_t v6 = v123;
            long long v125 = v133;
            long long v126 = v134;
            long long v127 = v135;
            v6[12] = v136;
            *((_OWORD *)v6 + 4) = v126;
            *((_OWORD *)v6 + 5) = v127;
            *((_OWORD *)v6 + 3) = v125;
            return v12;
          }
        }
        return 4294956418;
      }
    }
    BOOL v62 = LODWORD(v58[6 * v60 + 1]) >= v4;
LABEL_91:
    if (!v62)
    {
      BOOL v58 = (id *)(v61 + 12);
      unint64_t v60 = v59 + ~v60;
    }
    goto LABEL_93;
  }
  if ((int)v2 <= 56)
  {
    switch((int)v2)
    {
      case 27:
        if (*v5 < 0x28) {
          return 4294967246;
        }
        uint64_t v12 = 0;
        long long v13 = *(_OWORD *)(v1 + 336);
        long long v14 = *(_OWORD *)(v1 + 352);
        void v6[4] = *(void *)(v1 + 368);
        *(_OWORD *)uint64_t v6 = v13;
        *((_OWORD *)v6 + 1) = v14;
        return v12;
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 36:
      case 37:
        goto LABEL_158;
      case 33:
        if (*v5 < 0x18) {
          return 4294967246;
        }
        unsigned int v37 = *(_DWORD *)v6;
        uint64_t v38 = v6[1];
        _OWORD v6[2] = 0;
        size_t v39 = AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v37);
        id v18 = v39;
        if (!v39) {
          goto LABEL_160;
        }
        size_t v40 = [v39 stringFromValue:v38];
        char v41 = v40;
        if (v40) {
          _OWORD v6[2] = (uint64_t)v40;
        }

        uint64_t v12 = 0;
        goto LABEL_186;
      case 34:
        if (*v5 < 0x10) {
          return 4294967246;
        }
        int v42 = (AUv3InstanceBase::ParameterMap *)(v1 + 200);
        unsigned int v43 = *(_DWORD *)v6;
        uint64_t v44 = *((int *)v6 + 1);
        id v45 = objc_loadWeakRetained((id *)(v1 + 200));
        id v18 = [v45 parameterTree];

        v6[1] = 0;
        id v46 = AUv3InstanceBase::ParameterMap::findParameterByScopeElementID(v42, v3, 0, v43);
        long long v47 = v46;
        if (v46)
        {
          id v48 = [v46 displayNameWithLength:v44];
          id v49 = v48;
          if (v48)
          {
            uint64_t v12 = 0;
            v6[1] = (uint64_t)v48;
          }
          else
          {
            uint64_t v12 = 4294956417;
          }
        }
        else
        {
          uint64_t v12 = 4294956418;
        }

        goto LABEL_186;
      case 35:
        if (*v5 < 0x10) {
          return 4294967246;
        }
        unsigned int v50 = *(_DWORD *)v6;
        AUv3InstanceBase::ParameterMap::checkCacheParameters(v1 + 200);
        v6[1] = 0;
        uint64_t v51 = *(void *)(v1 + 304);
        if (!v51) {
          return 4294967246;
        }
        uint64_t v52 = v1 + 304;
        do
        {
          unsigned int v53 = *(_DWORD *)(v51 + 32);
          BOOL v54 = v53 >= v50;
          if (v53 >= v50) {
            unint64_t v55 = (uint64_t *)v51;
          }
          else {
            unint64_t v55 = (uint64_t *)(v51 + 8);
          }
          if (v54) {
            uint64_t v52 = v51;
          }
          uint64_t v51 = *v55;
        }
        while (*v55);
        if (v52 == v1 + 304 || *(_DWORD *)(v52 + 32) > v50) {
          return 4294967246;
        }
        id v18 = *(id *)(v52 + 40);
        uint64_t v56 = [v18 displayName];

        if (v56)
        {
          v6[1] = [v18 displayName];
        }
        goto LABEL_38;
      case 38:
        if (*v5 < 0x18) {
          return 4294967246;
        }
        unsigned int v33 = *(_DWORD *)v6;
        uint64_t v34 = v6[1];
        *((_DWORD *)v6 + 4) = 0;
        uint64_t v35 = AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v33);
        id v18 = v35;
        if (!v35) {
          goto LABEL_160;
        }
        [v35 valueFromString:v34];
        uint64_t v12 = 0;
        *((_DWORD *)v6 + 4) = v36;
        goto LABEL_186;
      default:
        if (v2 != 45) {
          goto LABEL_158;
        }
        int v26 = AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v4);
        long long v27 = v26;
        if (!v26) {
          return 4294967246;
        }
        long long v129 = 0u;
        memset(v128, 0, sizeof(v128));
        uint64_t v28 = objc_msgSend(v26, "dependentParameters", 0);
        uint64_t v29 = [v28 countByEnumeratingWithState:v128 objects:__src count:16];
        if (v29)
        {
          uint64_t v30 = **(void **)&v128[1];
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (**(void **)&v128[1] != v30) {
                objc_enumerationMutation(v28);
              }
              unint64_t v32 = [*(id *)(*((void *)&v128[0] + 1) + 8 * i) unsignedLongLongValue];
              *(_DWORD *)uint64_t v6 = v32 >> 61;
              *((_DWORD *)v6++ + 1) = v32;
            }
            uint64_t v29 = [v28 countByEnumeratingWithState:v128 objects:__src count:16];
          }
          while (v29);
        }

        return 0;
    }
  }
  if ((int)v2 <= 3500)
  {
    if (v2 != 57)
    {
      if (v2 == 1849)
      {
        uint64_t v12 = 0;
        *uint64_t v6 = *(void *)(v1 + 72);
        return v12;
      }
      if (v2 == 2015)
      {
        long long v24 = [*(id *)(v1 + 72) osWorkgroup];
        id v18 = v24;
        if (v24) {
          id v25 = v24;
        }
        *uint64_t v6 = (uint64_t)v18;
LABEL_38:

        return 0;
      }
LABEL_158:
      if (!gAudioComponentLogCategory) {
        operator new();
      }
      long long v109 = *(id *)gAudioComponentLogCategory;
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__src[0]) = 136316162;
        *(void **)((char *)__src + 4) = "AUv3Instance.mm";
        WORD2(__src[1]) = 1024;
        *(_DWORD *)((char *)&__src[1] + 6) = 1196;
        WORD1(__src[2]) = 1024;
        HIDWORD(__src[2]) = v2;
        LOWORD(__src[3]) = 1024;
        *(_DWORD *)((char *)&__src[3] + 2) = v3;
        HIWORD(__src[3]) = 1024;
        LODWORD(v132) = v4;
        _os_log_impl(&dword_18FEC0000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid property id %d (scope %d, element %d)", (uint8_t *)__src, 0x24u);
      }
      return 4294956417;
    }
    unint64_t v92 = *v5 / 0x18uLL;
    uint64_t v93 = [*(id *)(v1 + 72) parametersForOverviewWithCount:v92];
    unint64_t v94 = [v93 count];
    if (v94 >= v92) {
      int v95 = v92;
    }
    else {
      int v95 = v94;
    }
    *uint64_t v5 = 24 * v95;
    long long v129 = 0u;
    memset(v128, 0, sizeof(v128));
    id v96 = v93;
    uint64_t v97 = [v96 countByEnumeratingWithState:v128 objects:__src count:16];
    if (v97)
    {
      uint64_t v98 = **(void **)&v128[1];
      do
      {
        for (uint64_t j = 0; j != v97; ++j)
        {
          if (**(void **)&v128[1] != v98) {
            objc_enumerationMutation(v96);
          }
          uint64_t v100 = *(void **)(*((void *)&v128[0] + 1) + 8 * j);
          *uint64_t v6 = *(void *)(v1 + 40);
          unint64_t v101 = objc_msgSend(v100, "unsignedLongLongValue", *(void *)&v128[0]);
          *((_DWORD *)v6 + 3) = v101 >> 61;
          *((_DWORD *)v6 + 4) = HIDWORD(v101) & 0x1FFFFFFF;
          *((_DWORD *)v6 + 2) = v101;
          v6 += 3;
        }
        uint64_t v97 = [v96 countByEnumeratingWithState:v128 objects:__src count:16];
      }
      while (v97);
    }

    return 0;
  }
  if (v2 == 3501)
  {
    if (*v5 >= 8)
    {
      long long v102 = [*(id *)(v1 + 72) XPCListenerEndpoint];
      id v103 = [v102 _endpoint];

      if (v103) {
        id v104 = v103;
      }
      *uint64_t v6 = (uint64_t)v103;

      return 0;
    }
    return 4294967246;
  }
  if (v2 != 3502)
  {
    if (v2 != 3503) {
      goto LABEL_158;
    }
    if (*v5)
    {
      uint64_t v12 = 0;
      *(unsigned char *)uint64_t v6 = [*(id *)(v1 + 72) isLocalCachingDisabled];
      return v12;
    }
    return 4294967246;
  }
  if (*v5 < 8) {
    return 4294967246;
  }
  id v91 = [*(id *)(v1 + 72) audioUnitInstanceUUID];
LABEL_163:
  uint64_t v12 = 0;
  *uint64_t v6 = (uint64_t)v91;
  return v12;
}

void sub_190023DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  id v10 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, id *, uint64_t *, uint64_t))(*(void *)v6 + 48))(v6, &v10, &v9, a4);

  return v7;
}

void sub_190024014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t layoutSize(AVAudioChannelLayout *a1)
{
  uint64_t v1 = a1;
  if ([(AVAudioChannelLayout *)v1 layout])
  {
    if (*(_DWORD *)[(AVAudioChannelLayout *)v1 layout]) {
      uint64_t v2 = 12;
    }
    else {
      uint64_t v2 = 20 * [(AVAudioChannelLayout *)v1 layout][8] + 12;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_190024094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AUv3InstanceBase::ParameterMap::paramIDsForScope(AUv3InstanceBase::ParameterMap *this, AUv3InstanceBase::ParameterMap *a2, unsigned int a3)
{
  AUv3InstanceBase::ParameterMap::checkCacheParameters((uint64_t)a2);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v7 = (char *)*((void *)a2 + 6);
  uint64_t v6 = (char *)*((void *)a2 + 7);
  if (v6 != v7)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
    do
    {
      unint64_t v9 = v8 >> 1;
      id v10 = &v7[48 * (v8 >> 1)];
      unsigned int v11 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 != a3)
      {
        uint64_t v12 = v10 + 48;
        unint64_t v13 = v8 + ~v9;
        if (v11 < a3)
        {
          unint64_t v9 = v13;
          uint64_t v7 = v12;
        }
      }
      unint64_t v8 = v9;
    }
    while (v9);
    if (v7 < v6)
    {
      long long v14 = 0;
      unsigned int v15 = 0;
      int v16 = 0;
      do
      {
        if (*(_DWORD *)v7 != a3 || *((_DWORD *)v7 + 1)) {
          break;
        }
        if (v16 >= v15)
        {
          uint64_t v18 = (v16 - v14) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if ((v15 - v14) >> 1 > v19) {
            unint64_t v19 = (v15 - v14) >> 1;
          }
          float v20 = (char *)((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v19);
          if (v20) {
            float v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((unint64_t)v20);
          }
          else {
            uint64_t v21 = 0;
          }
          unsigned int v22 = &v20[4 * v18];
          *(_DWORD *)unsigned int v22 = *((_DWORD *)v7 + 2);
          long long v17 = v22 + 4;
          while (v16 != v14)
          {
            int v23 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          unsigned int v15 = &v20[4 * v21];
          *(void *)this = v22;
          *((void *)this + 1) = v17;
          *((void *)this + 2) = v15;
          if (v14) {
            operator delete(v14);
          }
          long long v14 = v22;
        }
        else
        {
          *(_DWORD *)int v16 = *((_DWORD *)v7 + 2);
          long long v17 = v16 + 4;
        }
        *((void *)this + 1) = v17;
        v7 += 48;
        int v16 = v17;
      }
      while ((unint64_t)v7 < *((void *)a2 + 7));
    }
  }
  objc_destroyWeak((id *)v24);
}

void sub_190024258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  objc_destroyWeak((id *)va);
  uint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t AUv3InstanceBase::GetPropertyInfo(AUv3InstanceBase *this, int a2, int a3, int a4, unsigned int *a5, unsigned __int8 *a6)
{
  int v9 = a3;
  int v10 = a2;
  int v8 = a4;
  v7[0] = this;
  v7[1] = &v10;
  _OWORD v7[2] = &v9;
  _OWORD v7[3] = &v8;
  v7[4] = a5;
  void v7[5] = a6;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetPropertyInfo(unsigned int,unsigned int,unsigned int,unsigned int &,unsigned char &)::{lambda(void)#1}>, (uint64_t)v7);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetPropertyInfo(unsigned int,unsigned int,unsigned int,unsigned int &,unsigned char &)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = **a1;
  uint64_t v2 = (const void *)*(unsigned int *)(*a1)[1];
  uint64_t v3 = *(unsigned int *)(*a1)[2];
  unint64_t v4 = *(unsigned int *)(*a1)[3];
  uint64_t v5 = (_DWORD *)(*a1)[4];
  uint64_t v6 = (char *)(*a1)[5];
  int v43 = 0;
  uint64_t v7 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFNumberRef Value = (id *)CFDictionaryGetValue(*v7, v2);
  if (Value)
  {
    int v9 = Value;
    *(void *)std::string __p = 0;
    int v10 = (objc_class *)objc_opt_class();
    unsigned int v11 = (objc_class *)[v9[1] UTF8String];
    AUAudioUnitProperties::accessorsForProperty(v10, v11, 0, (objc_selector **)__p, v12);
    *uint64_t v6 = objc_opt_respondsToSelector() & 1;
    uint64_t v13 = (*(uint64_t (**)(id *, void, uint64_t, unint64_t))*v9)(v9, *(void *)(v1 + 72), v3, v4);
    uint64_t v14 = v13;
    if ((v13 & 0xFF00000000) == 0) {
      return v14;
    }
    if (v13)
    {
      *uint64_t v5 = v13;
      if (((_BYTE)v9[2] & 5) != 0) {
        return 0;
      }
      uint64_t v14 = 0;
LABEL_55:
      *uint64_t v6 = 0;
      return v14;
    }
    if (v9[6])
    {
      if (((_BYTE)v9[2] & 2) != 0)
      {
        uint64_t v21 = AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v43);
        unsigned int v22 = v21;
        uint64_t v14 = v43;
        if (v43)
        {

          unsigned int v15 = 0;
          goto LABEL_95;
        }
        unsigned int v15 = [v21 valueForKey:v9[1]];
      }
      else
      {
        if (v3)
        {
          unsigned int v15 = 0;
          uint64_t v14 = 4294956430;
LABEL_95:

          return v14;
        }
        if (v4)
        {
          unsigned int v15 = 0;
          uint64_t v14 = 4294956419;
          goto LABEL_95;
        }
        unsigned int v15 = [*(id *)(v1 + 72) valueForKey:v9[1]];
      }
      if (v15)
      {
        *uint64_t v5 = 0;
        uint64_t v14 = std::function<int ()(objc_object *,void *,unsigned int &)>::operator()((uint64_t)(v9 + 3), v15, 0, (uint64_t)v5);
      }
      else
      {
        uint64_t v14 = 4294956445;
      }
      goto LABEL_95;
    }
  }
  if ((int)v2 <= 37)
  {
    switch((int)v2)
    {
      case 1:
      case 23:
        if (v3 != 1) {
          return 4294956430;
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v1 + 152) - *(void *)(v1 + 144)) >> 3) <= v4) {
          return 4294956419;
        }
        if (v2 == 23 || v2 == 1)
        {
          uint64_t v14 = 0;
          int v17 = 16;
          goto LABEL_72;
        }
        return 4294956417;
      case 2:
        if (v3) {
          unsigned int v24 = v4;
        }
        else {
          unsigned int v24 = 0;
        }
        if (v3) {
          int v25 = v3;
        }
        else {
          int v25 = 2;
        }
        id v26 = AUv3InstanceBase::GetBus((id *)v1, v25, v24, &v43);
        uint64_t v14 = v43;
        if (!v43) {
          goto LABEL_42;
        }
        return v14;
      case 3:
        AUv3InstanceBase::ParameterMap::paramIDsForScope((AUv3InstanceBase::ParameterMap *)__p, (AUv3InstanceBase::ParameterMap *)(v1 + 200), v3);
        long long v27 = *(void **)__p;
        *uint64_t v5 = (*(_DWORD *)&__p[8] - *(_DWORD *)__p) & 0xFFFFFFFC;
        *uint64_t v6 = 0;
        if (v27) {
          operator delete(v27);
        }
        return 0;
      case 4:
        uint64_t v14 = 0;
        int v23 = 104;
        goto LABEL_54;
      case 8:
        if (v3) {
          unsigned int v28 = v4;
        }
        else {
          unsigned int v28 = 0;
        }
        if (v3) {
          int v29 = v3;
        }
        else {
          int v29 = 2;
        }
        id v30 = AUv3InstanceBase::GetBus((id *)v1, v29, v28, &v43);
        uint64_t v14 = v43;
        if (!v43) {
          goto LABEL_71;
        }
        return v14;
      case 11:
        if ((v3 - 3) < 0xFFFFFFFE) {
          return 4294956430;
        }
        int v36 = *(void **)(v1 + 72);
        if (v3 == 1) {
          [v36 inputBusses];
        }
        else {
        int v42 = [v36 outputBusses];
        }
        *uint64_t v5 = 4;
        *uint64_t v6 = [v42 isCountChangeable];

        return 0;
      case 13:
        long long v31 = [*(id *)(v1 + 72) channelCapabilities];
        unint64_t v32 = v31;
        if (v31)
        {
          *uint64_t v5 = 2 * [v31 count];
          *uint64_t v6 = 0;

          return 0;
        }
        size_t v39 = *(id *)AudioComponentLogCategory();
        if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
          return 4294956417;
        }
        *(_DWORD *)std::string __p = 136316162;
        *(void *)&__p[4] = "AUv3Instance.mm";
        __int16 v45 = 1024;
        int v46 = 767;
        __int16 v47 = 1024;
        int v48 = 13;
        __int16 v49 = 1024;
        int v50 = v3;
        __int16 v51 = 1024;
        int v52 = v4;
        goto LABEL_99;
      case 19:
        unsigned int v33 = AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v43);
        uint64_t v34 = v33;
        uint64_t v14 = v43;
        if (v43)
        {

          return v14;
        }
        *uint64_t v6 = 1;
        unsigned int v37 = [v33 format];
        uint64_t v38 = [v37 channelLayout];

        if (v38)
        {
          *uint64_t v5 = layoutSize(v38);

          return 0;
        }

        uint64_t v14 = 4294956445;
        break;
      case 27:
        uint64_t v14 = 0;
LABEL_71:
        int v17 = 40;
        goto LABEL_72;
      case 29:
        *uint64_t v5 = 4;
        if (*(void *)(v1 + 72) && (*(unsigned int (**)(uint64_t))(*(void *)v1 + 216))(v1)) {
          char v35 = [*(id *)(v1 + 72) isLoadedInProcess];
        }
        else {
          char v35 = 1;
        }
        uint64_t v14 = 0;
        *uint64_t v6 = v35;
        return v14;
      case 33:
        goto LABEL_40;
      case 34:
      case 35:
        uint64_t v14 = 0;
        int v23 = 16;
        goto LABEL_54;
      default:
        goto LABEL_79;
    }
    return v14;
  }
  if ((int)v2 <= 1841)
  {
    if ((int)v2 <= 55)
    {
      if (v2 != 38)
      {
        if (v2 == 45)
        {
          uint64_t v18 = AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v4);
          unint64_t v19 = v18;
          if (!v18) {
            return 4294967246;
          }
          float v20 = [v18 dependentParameters];
          *uint64_t v5 = 8 * [v20 count];

          *uint64_t v6 = 0;
          return 0;
        }
        goto LABEL_79;
      }
LABEL_40:
      uint64_t v14 = 0;
      int v23 = 24;
LABEL_54:
      *uint64_t v5 = v23;
      goto LABEL_55;
    }
    if (v2 != 56)
    {
      if (v2 == 57)
      {
        uint64_t v14 = 0;
        *uint64_t v5 = 0;
        goto LABEL_55;
      }
      goto LABEL_79;
    }
LABEL_41:
    uint64_t v14 = 0;
LABEL_42:
    int v17 = 8;
LABEL_72:
    *uint64_t v5 = v17;
    *uint64_t v6 = 1;
    return v14;
  }
  if ((int)v2 > 3500)
  {
    if (v2 != 3501 && v2 != 3502) {
      goto LABEL_79;
    }
LABEL_38:
    uint64_t v14 = 0;
    int v23 = 8;
    goto LABEL_54;
  }
  if (v2 == 1842) {
    goto LABEL_41;
  }
  if (v2 == 2015) {
    goto LABEL_38;
  }
LABEL_79:
  if (!gAudioComponentLogCategory) {
    operator new();
  }
  size_t v39 = *(id *)gAudioComponentLogCategory;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string __p = 136316162;
    *(void *)&__p[4] = "AUv3Instance.mm";
    __int16 v45 = 1024;
    int v46 = 910;
    __int16 v47 = 1024;
    int v48 = (int)v2;
    __int16 v49 = 1024;
    int v50 = v3;
    __int16 v51 = 1024;
    int v52 = v4;
LABEL_99:
    _os_log_impl(&dword_18FEC0000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid property id %d (scope %d, element %d)", __p, 0x24u);
  }
  return 4294956417;
}

void sub_1900249CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUv3InstanceBase::Reset(AUv3InstanceBase *this, int a2, int a3)
{
  int v5 = a3;
  int v6 = a2;
  v4[0] = &v6;
  v4[1] = &v5;
  v4[2] = this;
  return AUv3InstanceBase::NSExceptionBarrier(caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Reset(unsigned int,unsigned int)::{lambda(void)#1}>, (uint64_t)v4);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Reset(unsigned int,unsigned int)::{lambda(void)#1}>(void *a1)
{
  uint64_t v1 = (_DWORD **)*a1;
  if (**(_DWORD **)*a1) {
    return 4294956430;
  }
  if (*v1[1]) {
    return 4294956419;
  }
  [*((id *)v1[2] + 9) reset];
  return 0;
}

uint64_t AUv3InstanceBase::Uninitialize(AUv3InstanceBase *this)
{
  uint64_t v2 = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Uninitialize(void)::{lambda(void)#1}>, (uint64_t)&v2);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Uninitialize(void)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(unsigned char *)(v1 + 80))
  {
    [*(id *)(v1 + 72) deallocateRenderResources];
    *(unsigned char *)(v1 + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  }
  return 0;
}

uint64_t AUv3InstanceBase::Initialize(AUv3InstanceBase *this)
{
  uint64_t v2 = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Initialize(void)::{lambda(void)#1}>, (uint64_t)&v2);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Initialize(void)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(unsigned char *)(v1 + 80)) {
    return 0;
  }
  uint64_t v3 = *(void **)(v1 + 72);
  id v8 = 0;
  char v4 = [v3 allocateRenderResourcesAndReturnError:&v8];
  id v5 = v8;
  int v6 = v5;
  if (v4)
  {
    AUv3RenderAdapter::initialize((AUv3RenderAdapter *)(v1 + 136), *(AUAudioUnit **)(v1 + 72));
    uint64_t v2 = 0;
    *(unsigned char *)(v1 + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
  }
  else if (v5)
  {
    uint64_t v2 = [v5 code];
  }
  else
  {
    uint64_t v2 = 0xFFFFFFFFLL;
  }

  return v2;
}

void sub_190024CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUv3InstanceBase::Close(AUv3InstanceBase *this)
{
  (*(void (**)(AUv3InstanceBase *))(*(void *)this + 64))(this);
  uint64_t v2 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;

  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 22) = 0;
  }
  char v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    *((void *)this + 23) = 0;
  }
  id v5 = (void *)*((void *)this + 24);
  if (v5)
  {
    *((void *)this + 24) = 0;
  }
  AUv3InstanceBase::ParameterMap::setAudioUnit((AUv3InstanceBase *)((char *)this + 200), 0, 0);
  int v6 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;

  return 0;
}

void AUv3InstanceBase::ParameterMap::setAudioUnit(AUv3InstanceBase::ParameterMap *this, AUv3InstanceBase *a2, AUAudioUnit *a3)
{
  obuint64_t j = a3;
  id WeakRetained = (AUAudioUnit *)objc_loadWeakRetained((id *)this);

  if (WeakRetained != obj)
  {
    id v6 = objc_loadWeakRetained((id *)this);
    [v6 removeObserver:*((void *)this + 9) forKeyPath:@"parameterTree" context:0];

    unint64_t v7 = atomic_exchange((atomic_ullong *volatile)this + 11, 0);
    if (v7)
    {
      id v8 = objc_loadWeakRetained((id *)this);
      int v9 = [v8 parameterTree];
      [v9 removeParameterObserver:v7];
    }
    atomic_store(0, (unsigned __int8 *)this + 16);
    id v10 = objc_storeWeak((id *)this, obj);
    *((void *)this + 1) = a2;
    id v11 = v10;

    if (obj)
    {
      id v12 = objc_loadWeakRetained((id *)this);
      [v12 addObserver:*((void *)this + 9) forKeyPath:@"parameterTree" options:3 context:0];

      *((unsigned char *)this + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
    }
  }
}

void sub_190024EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190024EB8(void *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x190024E18);
  }
  JUMPOUT(0x190024EA8);
}

BOOL AUv3InstanceBase::CanDo(AUv3InstanceBase *this, unsigned int a2)
{
  if (a2 <= 0x15)
  {
    BOOL result = 1;
    if (((1 << a2) & 0x37CEFE) != 0) {
      return result;
    }
  }
  if (a2 - 257 >= 2)
  {
    if (a2 - 513 <= 1) {
      return *((_DWORD *)this + 12) == 1635086197;
    }
    return 0;
  }
  int v4 = *((_DWORD *)this + 12);
  BOOL result = 1;
  if (v4 > 1635086952)
  {
    if (v4 == 1635086953) {
      return result;
    }
    unsigned __int16 v5 = 29293;
  }
  else
  {
    if (v4 == 1635085673) {
      return result;
    }
    unsigned __int16 v5 = 28021;
  }
  if (v4 != (v5 | 0x61750000)) {
    return 0;
  }
  return result;
}

void ___ZN16AUv3InstanceBase12ParameterMapC2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)MEMORY[0x192FC9400]();
  os_unfair_recursive_lock_lock_with_options();
  id WeakRetained = objc_loadWeakRetained((id *)(v1 + 128));
  int v4 = WeakRetained;
  if (WeakRetained)
  {
    if (atomic_exchange((atomic_ullong *volatile)(v1 + 88), 0)) {
      objc_msgSend(WeakRetained, "removeParameterObserver:");
    }
    objc_storeWeak((id *)(v1 + 128), 0);
  }

  atomic_store(0, (unsigned __int8 *)(v1 + 16));
  os_unfair_recursive_lock_unlock();
  id v5 = objc_loadWeakRetained((id *)v1);
  id v6 = [v5 parameterTree];

  if (v6)
  {
    id v7 = v6;
    if ((int)[v7 _autoCreatedForV2AU] >= 2)
    {
      uint64_t v8 = *(void *)(v1 + 8);
      os_unfair_recursive_lock_lock_with_options();
      float v20 = 0;
      uint64_t v21 = 0;
      uint64_t v9 = *(void *)(v8 + 104);
      uint64_t v10 = *(void *)(v8 + 112);
      unsigned int v22 = 0;
      int v23 = &v20;
      char v24 = 0;
      uint64_t v11 = v10 - v9;
      if (v10 != v9)
      {
        if (v11 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        id v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v11 >> 4);
        uint64_t v13 = 0;
        float v20 = v12;
        uint64_t v21 = v12;
        unsigned int v22 = &v12[16 * v14];
        do
        {
          unsigned int v15 = &v12[v13];
          uint64_t v16 = v9 + v13;
          *(void *)unsigned int v15 = *(void *)(v9 + v13);
          uint64_t v17 = *(void *)(v9 + v13 + 8);
          *((void *)v15 + 1) = v17;
          if (v17) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
          }
          v13 += 16;
        }
        while (v16 + 16 != v10);
        uint64_t v21 = &v12[v13];
        if (v13)
        {
          uint64_t v18 = 16 * (v13 >> 4);
          unint64_t v19 = v12 + 8;
          do
          {
            if (!*(void *)v19 || *(void *)(*(void *)v19 + 8)) {
              (*(void (**)(void, void, void, void, void))(*((void *)v19 - 1) + 32))(*(void *)(*((void *)v19 - 1) + 40), *(void *)(*(void *)(*((void *)v19 - 1) + 8) + 40), *(unsigned int *)(*((void *)v19 - 1) + 24), 0, 0);
            }
            v19 += 16;
            v18 -= 16;
          }
          while (v18);
        }
      }
      int v23 = &v20;
      std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      os_unfair_recursive_lock_unlock();
    }
  }
}

void sub_190025190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  os_unfair_recursive_lock_unlock();

  _Unwind_Resume(a1);
}

void AUv3InstanceBase::AUv3InstanceBase(AUv3InstanceBase *this, const AudioComponentDescription *a2)
{
  *(void *)this = &unk_1EDF8F128;
  *((void *)this + 5) = 0;
  *((void *)this + 1) = AUIB_Open;
  *((void *)this + 2) = AUIB_Close;
  OSType componentType = a2->componentType;
  int v4 = AUInstanceBase::LookupMethod_Music;
  if ((int)a2->componentType <= 1635086196)
  {
    unsigned int v5 = componentType - 1635085670;
    BOOL v6 = v5 > 0xF;
    int v7 = (1 << v5) & 0x8009;
    if (!v6 && v7 != 0) {
      goto LABEL_15;
    }
LABEL_14:
    int v4 = AUInstanceBase::LookupMethod;
    goto LABEL_15;
  }
  if (componentType != 1635086957 && componentType != 1635086953)
  {
    if (componentType == 1635086197)
    {
      int v4 = AUInstanceBase::LookupMethod_Output;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_15:
  *((void *)this + 3) = v4;
  *((void *)this + 4) = 0;
  *(void *)this = &unk_1EDF91570;
  long long v10 = *(_OWORD *)&a2->componentType;
  *((_DWORD *)this + 16) = a2->componentFlagsMask;
  *((_OWORD *)this + 3) = v10;
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((unsigned char *)this + 216) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  uint64_t v11 = objc_alloc_init(_AUParameterTreeObserver);
  *((void *)this + 34) = v11;
  *((unsigned char *)this + 28std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = (char *)this + 304;
  *((void *)this + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *((void *)this + 41) = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = ___ZN16AUv3InstanceBase12ParameterMapC2Ev_block_invoke;
  void v12[3] = &__block_descriptor_40_e5_v8__0l;
  v12[4] = (char *)this + 200;
  [(_AUParameterTreeObserver *)v11 setCallback:v12];
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  if (AUv3InstanceBase::sSelectorsOnce[0] != -1) {
    dispatch_once(AUv3InstanceBase::sSelectorsOnce, &__block_literal_global_4105);
  }
}

void sub_190025430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17 = v16;
  objc_destroyWeak(v17);
  std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(*(void **)(v14 + 304));

  a14 = v14 + 248;
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  objc_destroyWeak(v15);

  AUv3RenderAdapter::~AUv3RenderAdapter((AUv3RenderAdapter *)(v14 + 136));
  uint64_t v19 = *(void *)(v14 + 128);
  *(void *)(v14 + 128) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  a14 = v14 + 104;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

IMP ___ZN16AUv3InstanceBaseC2ERK25AudioComponentDescription_block_invoke()
{
  AUv3InstanceBase::sSel_SetV2uint64_t Parameter = (uint64_t)sel_setV2Parameter_value_bufferOffset_sequenceNumber_;
  AUv3InstanceBase::sSel_GetV2uint64_t Parameter = (uint64_t)sel_getV2Parameter_sequenceNumber_;
  AUv3InstanceBase::sSel_address = (uint64_t)sel_address;
  uint64_t v0 = (objc_class *)objc_opt_class();
  IMP result = class_getMethodImplementation(v0, (SEL)AUv3InstanceBase::sSel_address);
  AUv3InstanceBase::sAUParameter_address = (uint64_t (*)(void, void))result;
  return result;
}

void AUv3InstanceBase::DoOpen(AUv3InstanceBase *this, OpaqueAudioComponentInstance *a2, AUAudioUnit *a3)
{
  unsigned int v28 = a3;
  *((void *)this + 5) = a2;
  BOOL v6 = (id *)((char *)this + 72);
  objc_storeStrong((id *)this + 9, a3);
  AUv3InstanceBase::ParameterMap::setAudioUnit((AUv3InstanceBase *)((char *)this + 200), this, v28);
  int v7 = [*((id *)this + 9) renderBlock];

  if (!v7) {
    AudioComponentInstanceSetNoCanDo((uint64_t)a2, 14);
  }
  AudioComponentInstanceSetNoCanDo((uint64_t)a2, 20);
  AudioComponentInstanceSetNoCanDo((uint64_t)a2, 21);
  uint64_t v8 = [(AUAudioUnit *)v28 inputBusses];
  std::vector<AUv3RenderAdapter::AUInputElement>::resize((char **)this + 18, [v8 count]);

  uint64_t v9 = [*v6 scheduleParameterBlock];
  long long v10 = (void *)*((void *)this + 22);
  *((void *)this + 22) = v9;

  uint64_t v11 = (void *)*((void *)this + 22);
  if (v11)
  {
    uint64_t v12 = [v11 copy];
    uint64_t v13 = (void *)*((void *)this + 22);
    *((void *)this + 22) = v12;
  }
  uint64_t v14 = [*v6 scheduleMIDIEventBlock];
  unsigned int v15 = (void *)*((void *)this + 23);
  *((void *)this + 23) = v14;

  uint64_t v16 = (void *)*((void *)this + 23);
  if (v16)
  {
    uint64_t v17 = [v16 copy];
    uint64_t v18 = (void *)*((void *)this + 23);
    *((void *)this + 23) = v17;
  }
  uint64_t v19 = [*v6 scheduleMIDIEventListBlock];
  float v20 = (void *)*((void *)this + 24);
  *((void *)this + 24) = v19;

  uint64_t v21 = (void *)*((void *)this + 24);
  if (v21)
  {
    uint64_t v22 = [v21 copy];
    int v23 = (void *)*((void *)this + 24);
    *((void *)this + 24) = v22;
  }
  char v24 = (objc_class *)objc_opt_class();
  *((void *)this + 49) = class_getMethodImplementation(v24, (SEL)AUv3InstanceBase::sSel_GetV2Parameter);
  IMP MethodImplementation = class_getMethodImplementation(v24, (SEL)AUv3InstanceBase::sSel_SetV2Parameter);
  *((void *)this + 48) = MethodImplementation;
  if (!*((void *)this + 49) || !MethodImplementation) {
    std::terminate();
  }
  uint64_t v26 = *((void *)this + 5);
  if (v26)
  {
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 8))(v26);
    if (v27) {
      *(unsigned char *)(v27 + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = [*v6 isLoadedInProcess] ^ 1;
    }
  }
}

void sub_190025750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t MP4BoxParser_SampleSize::Init(MP4BoxParser **this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    int v3 = *((_DWORD *)this + 5);
    if (v3 != 1937013298 && v3 != 1937011578) {
      return 4294967294;
    }
    unsigned int v5 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v5, 8uLL, v11);
    if (!result)
    {
      *((_DWORD *)this + 16) = bswap32(v11[1]);
      int v6 = *((_DWORD *)this + 6);
      int v7 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      if (*((_DWORD *)this + 5) == 1937011578)
      {
        unsigned int v8 = v11[0];
        *((_DWORD *)this + 15) = bswap32(v11[0]);
        if (v8) {
          return 0;
        }
        char v10 = 2;
      }
      else
      {
        int v9 = HIBYTE(v11[0]);
        *((_DWORD *)this + 15) = HIBYTE(v11[0]);
        if (v9 != 16) {
          return 2003334207;
        }
        char v10 = 1;
      }
      if (*((_DWORD *)this + 16) <= (v6 - v7 - 8) >> v10) {
        return 0;
      }
      else {
        return 2003334207;
      }
    }
  }
  return result;
}

void MP4BoxParser_SampleSize::~MP4BoxParser_SampleSize(MP4BoxParser_SampleSize *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void MP4BoxParser_SampleSize::MP4BoxParser_SampleSize(MP4BoxParser_SampleSize *this, DataSource *a2, uint64_t a3)
{
  *(void *)this = &unk_1EDF8DA18;
  (*(void (**)(DataSource *, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 8;
  *(void *)this = &unk_1EDF939D0;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = 0;
}

uint64_t MP4BoxParser_SampleSize::GetSampleSize(MP4BoxParser_SampleSize *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result = 2003334207;
  if (*((_DWORD *)this + 16) <= a2) {
    return result;
  }
  *a3 = 0;
  unsigned int v7 = *((_DWORD *)this + 15);
  if (*((_DWORD *)this + 5) == 1937011578)
  {
    if (v7)
    {
LABEL_4:
      uint64_t result = 0;
      *a3 = v7;
      return result;
    }
  }
  else if (v7)
  {
    if (v7 != 16) {
      return result;
    }
    unsigned int v8 = 2;
    goto LABEL_9;
  }
  unsigned int v8 = 4;
LABEL_9:
  unsigned int v9 = (*(uint64_t (**)(MP4BoxParser_SampleSize *))(*(void *)this + 24))(this);
  uint64_t result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v8 * a2 + (unint64_t)v9 + 8, v8, &v11);
  if (!result)
  {
    int v10 = *((_DWORD *)this + 15);
    if (v10 == 16)
    {
      unsigned int v7 = bswap32((unsigned __int16)v11) >> 16;
      goto LABEL_4;
    }
    uint64_t result = 2003334207;
    if (!v10)
    {
      unsigned int v7 = bswap32(v11);
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t MP4BoxParser_SampleSize::GetByteCount(MP4BoxParser_SampleSize *this)
{
  if (*((_DWORD *)this + 5) == 1937011578)
  {
    int v2 = *((_DWORD *)this + 15);
    if (v2) {
      return (*((_DWORD *)this + 16) * v2);
    }
  }
  unsigned int v6 = 0;
  if (*((_DWORD *)this + 16))
  {
    unsigned int v4 = 0;
    LODWORD(v3) = 0;
    while (!MP4BoxParser_SampleSize::GetSampleSize(this, v4, &v6))
    {
      uint64_t v3 = v6 + v3;
      if (++v4 >= *((_DWORD *)this + 16)) {
        return v3;
      }
    }
  }
  return 0;
}

OSStatus AudioFileStreamOpen(void *inClientData, AudioFileStream_PropertyListenerProc inPropertyListenerProc, AudioFileStream_PacketsProc inPacketsProc, AudioFileTypeID inFileTypeHint, AudioFileStreamID *outAudioFileStream)
{
  if (outAudioFileStream) {
    operator new();
  }
  return -50;
}

void sub_190025DF4(void *a1, int a2)
{
  BaseOpaqueObject::~BaseOpaqueObject(v2);
  MEMORY[0x192FC8940](v2, 0x10F1C40B8FC8A45);
  __cxa_begin_catch(a1);
  if (a2 != 2) {
    __cxa_rethrow();
  }
  __cxa_end_catch();
  __break(1u);
}

void sub_190025E58(void *a1)
{
}

uint64_t AudioFileStreamPrepareToOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6) {
    operator new();
  }
  return 4294967246;
}

void sub_190025FD0(void *a1, int a2)
{
  MEMORY[0x192FC8940](v3, 0x10F3C40BA36BB60);
  BaseOpaqueObject::~BaseOpaqueObject(v2);
  MEMORY[0x192FC8940](v2, 0x10F1C40B8FC8A45);
  __cxa_begin_catch(a1);
  if (a2 != 2) {
    __cxa_rethrow();
  }
  __cxa_end_catch();
  __break(1u);
}

void sub_190026058(void *a1)
{
}

OSStatus AudioFileStreamParseBytes(AudioFileStreamID inAudioFileStream, UInt32 inDataByteSize, const void *inData, AudioFileStreamParseFlags inFlags)
{
  char v4 = inFlags;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (inDataByteSize && !inData) {
    return -50;
  }
  uint64_t v8 = BaseOpaqueObject::ResolveOpaqueRef();
  uint64_t v9 = v8;
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v17[0]) = 136315394;
      *(void *)((char *)v17 + 4) = "AudioFileStream.cpp";
      WORD6(v17[0]) = 1024;
      *(_DWORD *)((char *)v17 + 14) = 122;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)v17, 0x12u);
    }
    return -50;
  }
  *(void *)(v8 + 88) += *(unsigned int *)(v8 + 80);
  *(void *)(v8 + 72) = inData;
  *(_DWORD *)(v8 + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = inDataByteSize;
  if (!inDataByteSize && !inData) {
    return (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 16))(*(void *)(v8 + 16));
  }
  for (uint64_t i = *(void *)(v8 + 16); ; *(_DWORD *)(i + 236) = 0)
  {
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
    char v11 = v4 | (*(unsigned char *)(i + 176) != 0);
    *(unsigned char *)(i + 176) = v4 & 1 | (*(unsigned char *)(i + 176) != 0);
    if ((v11 & 1) != 0
      && *(unsigned char *)(*(void *)(i + 8) + 104)
      && ((*(uint64_t (**)(uint64_t))(*(void *)i + 216))(i) & 1) != 0)
    {
      break;
    }
    uint64_t v12 = *(uint64_t (**)(void *, _OWORD *))(i + 240);
    uint64_t v13 = *(void *)(i + 248);
    uint64_t v14 = (void *)(i + (v13 >> 1));
    if (v13) {
      uint64_t v12 = *(uint64_t (**)(void *, _OWORD *))(*v14 + v12);
    }
    OSStatus result = v12(v14, v17);
    *(unsigned char *)(i + 176) = 0;
    uint64_t i = *(void *)&v17[0];
    if (result) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = *(void *)&v17[0] == 0;
    }
    if (v15) {
      return result;
    }
    uint64_t v16 = *(void *)(v9 + 16);
    if (v16 != *(void *)&v17[0])
    {
      *(void *)(v9 + 16) = *(void *)&v17[0];
      *(void *)(i + 8) = v9;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        uint64_t i = *(void *)(v9 + 16);
      }
    }
    *(_OWORD *)(i + 24std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_OWORD *)((char *)v17 + 8);
  }
  return 1685283617;
}

void sub_1900262EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1900260D4);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamSeek(AudioFileStreamID inAudioFileStream, SInt64 inPacketOffset, SInt64 *outDataByteOffset, AudioFileStreamSeekFlags *ioFlags)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!outDataByteOffset) {
    return -50;
  }
  uint64_t v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      char v11 = "AudioFileStream.cpp";
      __int16 v12 = 1024;
      int v13 = 148;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v10, 0x12u);
    }
    return -50;
  }
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, SInt64, SInt64 *, AudioFileStreamSeekFlags *))(*(void *)v8 + 48))(v8, inPacketOffset, outDataByteOffset, ioFlags);
  }
  else {
    return 1836020325;
  }
}

void sub_19002645C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x190026420);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamGetPropertyInfo(AudioFileStreamID inAudioFileStream, AudioFileStreamPropertyID inPropertyID, UInt32 *outPropertyDataSize, Boolean *outWritable)
{
  uint64_t v6 = *(void *)&inPropertyID;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      return (*(uint64_t (**)(void, uint64_t, UInt32 *, Boolean *))(*(void *)v8 + 24))(*(void *)(v7 + 16), v6, outPropertyDataSize, outWritable);
    }
    else if (v6 == 1869640816)
    {
      if (outPropertyDataSize) {
        *outPropertyDataSize = (*(_DWORD *)(v7 + 56) - *(_DWORD *)(v7 + 48)) & 0xFFFFFFFC;
      }
      OSStatus v9 = 0;
      if (outWritable) {
        *Boolean outWritable = 1;
      }
    }
    else
    {
      return 1886681407;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      __int16 v12 = "AudioFileStream.cpp";
      __int16 v13 = 1024;
      int v14 = 172;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v11, 0x12u);
    }
    return -50;
  }
  return v9;
}

void sub_190026604(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1900265D0);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamGetProperty(AudioFileStreamID inAudioFileStream, AudioFileStreamPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  OSStatus result = -50;
  if (ioPropertyDataSize)
  {
    unsigned int v5 = outPropertyData;
    if (outPropertyData)
    {
      uint64_t v7 = *(void *)&inPropertyID;
      uint64_t v8 = BaseOpaqueObject::ResolveOpaqueRef();
      uint64_t v9 = v8;
      if (v8)
      {
        if (v7 == 1869640816)
        {
          bzero(v5, *ioPropertyDataSize);
          unint64_t v10 = (unint64_t)*ioPropertyDataSize >> 2;
          int v11 = *(int **)(v9 + 48);
          unint64_t v12 = (uint64_t)(*(void *)(v9 + 56) - (void)v11) >> 2;
          if (v12 >= v10) {
            uint64_t v13 = v10;
          }
          else {
            uint64_t v13 = v12;
          }
          *UInt32 ioPropertyDataSize = 4 * v13;
          if (v13)
          {
            do
            {
              int v14 = *v11++;
              *v5++ = v14;
              --v13;
            }
            while (v13);
          }
          return 0;
        }
        else
        {
          uint64_t v15 = *(void *)(v8 + 16);
          if (v15) {
            return (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, _DWORD *))(*(void *)v15 + 32))(v15, v7, ioPropertyDataSize, v5);
          }
          else {
            return 1886681407;
          }
        }
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 136315394;
          uint64_t v17 = "AudioFileStream.cpp";
          __int16 v18 = 1024;
          int v19 = 198;
          _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v16, 0x12u);
        }
        return -50;
      }
    }
  }
  return result;
}

void sub_1900267D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1900267A0);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamSetProperty(AudioFileStreamID inAudioFileStream, AudioFileStreamPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  OSStatus v4 = -50;
  if (inPropertyDataSize && inPropertyData)
  {
    uint64_t v6 = *(void *)&inPropertyDataSize;
    uint64_t v7 = *(void *)&inPropertyID;
    uint64_t v8 = BaseOpaqueObject::ResolveOpaqueRef();
    uint64_t v9 = (void *)v8;
    if (v8)
    {
      if (v7 == 1869640816)
      {
        if (v6 >= 4)
        {
          uint64_t v10 = 0;
          uint64_t v11 = v6 >> 2;
          unint64_t v12 = *(char **)(v8 + 56);
          do
          {
            int v13 = *((_DWORD *)inPropertyData + v10);
            int v14 = (char *)v9[6];
            unint64_t v15 = (v12 - v14) >> 2;
            if (v12 == v14)
            {
LABEL_11:
              unint64_t v19 = v9[8];
              if ((unint64_t)v12 >= v19)
              {
                unint64_t v21 = v15 + 1;
                if ((v15 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v22 = v19 - (void)v14;
                if (v22 >> 1 > v21) {
                  unint64_t v21 = v22 >> 1;
                }
                if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v21;
                }
                if (v23)
                {
                  unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v23);
                  int v14 = (char *)v9[6];
                  unint64_t v12 = (char *)v9[7];
                }
                else
                {
                  uint64_t v24 = 0;
                }
                int v25 = (_DWORD *)(v23 + 4 * v15);
                _DWORD *v25 = v13;
                uint64_t v20 = (char *)(v25 + 1);
                while (v12 != v14)
                {
                  int v26 = *((_DWORD *)v12 - 1);
                  v12 -= 4;
                  *--int v25 = v26;
                }
                v9[6] = v25;
                v9[7] = v20;
                v9[8] = v23 + 4 * v24;
                if (v14) {
                  operator delete(v14);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v12 = v13;
                uint64_t v20 = v12 + 4;
              }
              v9[7] = v20;
              unint64_t v12 = v20;
            }
            else
            {
              uint64_t v16 = 0;
              unsigned int v17 = 1;
              while (*(_DWORD *)&v14[4 * v16] != v13)
              {
                uint64_t v16 = v17;
                if (v15 <= v17++) {
                  goto LABEL_11;
                }
              }
            }
            ++v10;
          }
          while (v10 != v11);
        }
        return 0;
      }
      else
      {
        uint64_t v27 = *(void *)(v8 + 16);
        if (v27) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)v27 + 40))(v27, v7, v6, inPropertyData);
        }
        else {
          return 1886681407;
        }
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v29 = 136315394;
        id v30 = "AudioFileStream.cpp";
        __int16 v31 = 1024;
        int v32 = 223;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v29, 0x12u);
      }
      return -50;
    }
  }
  return v4;
}

void sub_190026A6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x190026A28);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamClose(AudioFileStreamID inAudioFileStream)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315394;
      OSStatus v4 = "AudioFileStream.cpp";
      __int16 v5 = 1024;
      int v6 = 242;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v3, 0x12u);
    }
    return -50;
  }
}

void sub_190026BA4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x190026B78);
  }
  _Unwind_Resume(a1);
}

uint64_t HOA::getTDesign(HOA *this, _OWORD *__dst, float *a3, float *__C, float *a5)
{
  switch((int)this)
  {
    case 0:
      uint64_t v7 = 1;
      if (__dst && a3)
      {
        *(_DWORD *)uint64_t __dst = 0;
        *a3 = 0.0;
      }
      break;
    case 1:
      uint64_t v7 = 4;
      if (__dst && a3)
      {
        *uint64_t __dst = xmmword_1901C6710;
        *(_OWORD *)a3 = xmmword_1901C6720;
      }
      break;
    case 2:
      uint64_t v7 = 12;
      if (__dst && a3)
      {
        *uint64_t __dst = *(_OWORD *)"";
        __dst[1] = unk_1901C7AD0;
        __dst[2] = xmmword_1901C7AE0;
        uint64_t v11 = &xmmword_1901C7AF0;
        *((_OWORD *)a3 + 2) = xmmword_1901C7B10;
        goto LABEL_20;
      }
      break;
    case 3:
      uint64_t v7 = 24;
      if (__dst && a3)
      {
        __dst[2] = xmmword_1901C7B40;
        char __dst[3] = unk_1901C7B50;
        __dst[4] = xmmword_1901C7B60;
        __dst[5] = unk_1901C7B70;
        *uint64_t __dst = xmmword_1901C7B20;
        __dst[1] = unk_1901C7B30;
        *((_OWORD *)a3 + 2) = xmmword_1901C7BA0;
        *((_OWORD *)a3 + 3) = unk_1901C7BB0;
        *((_OWORD *)a3 + 4) = xmmword_1901C7BC0;
        *((_OWORD *)a3 + 5) = unk_1901C7BD0;
        *(_OWORD *)a3 = xmmword_1901C7B80;
        *((_OWORD *)a3 + 1) = unk_1901C7B90;
      }
      break;
    case 4:
      uint64_t v7 = 36;
      if (__dst && a3)
      {
        __dst[2] = xmmword_1901C7C00;
        char __dst[3] = unk_1901C7C10;
        __dst[8] = xmmword_1901C7C60;
        __int16 __dst[6] = xmmword_1901C7C40;
        __dst[7] = unk_1901C7C50;
        __dst[4] = xmmword_1901C7C20;
        __dst[5] = unk_1901C7C30;
        *uint64_t __dst = xmmword_1901C7BE0;
        __dst[1] = unk_1901C7BF0;
        uint64_t v11 = &xmmword_1901C7C70;
        *((_OWORD *)a3 + 6) = xmmword_1901C7CD0;
        *((_OWORD *)a3 + 7) = unk_1901C7CE0;
        *((_OWORD *)a3 + 8) = xmmword_1901C7CF0;
        *((_OWORD *)a3 + 2) = xmmword_1901C7C90;
        *((_OWORD *)a3 + 3) = unk_1901C7CA0;
        *((_OWORD *)a3 + 4) = xmmword_1901C7CB0;
        *((_OWORD *)a3 + 5) = unk_1901C7CC0;
LABEL_20:
        long long v12 = v11[1];
        *(_OWORD *)a3 = *v11;
        *((_OWORD *)a3 + 1) = v12;
      }
      break;
    case 5:
      uint64_t v7 = 60;
      if (__dst && a3)
      {
        __dst[12] = xmmword_1901C7DC0;
        __dst[13] = unk_1901C7DD0;
        __dst[14] = xmmword_1901C7DE0;
        __dst[8] = xmmword_1901C7D80;
        __dst[9] = unk_1901C7D90;
        __dst[10] = xmmword_1901C7DA0;
        __dst[11] = unk_1901C7DB0;
        __dst[4] = xmmword_1901C7D40;
        __dst[5] = unk_1901C7D50;
        __int16 __dst[6] = xmmword_1901C7D60;
        __dst[7] = unk_1901C7D70;
        *uint64_t __dst = xmmword_1901C7D00;
        __dst[1] = unk_1901C7D10;
        __dst[2] = xmmword_1901C7D20;
        char __dst[3] = unk_1901C7D30;
        *((_OWORD *)a3 + 12) = xmmword_1901C7EB0;
        *((_OWORD *)a3 + 13) = unk_1901C7EC0;
        *((_OWORD *)a3 + 14) = xmmword_1901C7ED0;
        *((_OWORD *)a3 + 8) = xmmword_1901C7E70;
        *((_OWORD *)a3 + 9) = unk_1901C7E80;
        *((_OWORD *)a3 + 1std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = xmmword_1901C7E90;
        *((_OWORD *)a3 + 11) = unk_1901C7EA0;
        *((_OWORD *)a3 + 4) = xmmword_1901C7E30;
        *((_OWORD *)a3 + 5) = unk_1901C7E40;
        *((_OWORD *)a3 + 6) = xmmword_1901C7E50;
        *((_OWORD *)a3 + 7) = unk_1901C7E60;
        *(_OWORD *)a3 = xmmword_1901C7DF0;
        *((_OWORD *)a3 + 1) = unk_1901C7E00;
        *((_OWORD *)a3 + 2) = xmmword_1901C7E10;
        *((_OWORD *)a3 + 3) = unk_1901C7E20;
      }
      break;
    case 6:
      uint64_t v7 = 84;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901C7EE0, 0x150uLL);
        uint64_t v8 = &unk_1901C8030;
        uint64_t v9 = a3;
        size_t v10 = 336;
        goto LABEL_72;
      }
      break;
    case 7:
      uint64_t v7 = 108;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901C8180, 0x1B0uLL);
        uint64_t v8 = &unk_1901C8330;
        uint64_t v9 = a3;
        size_t v10 = 432;
        goto LABEL_72;
      }
      break;
    case 8:
      uint64_t v7 = 144;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901C84E0, 0x240uLL);
        uint64_t v8 = &unk_1901C8720;
        uint64_t v9 = a3;
        size_t v10 = 576;
        goto LABEL_72;
      }
      break;
    case 9:
      uint64_t v7 = 180;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901C8960, 0x2D0uLL);
        uint64_t v8 = &unk_1901C8C30;
        uint64_t v9 = a3;
        size_t v10 = 720;
        goto LABEL_72;
      }
      break;
    case 10:
      uint64_t v7 = 216;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901C8F00, 0x360uLL);
        uint64_t v8 = &unk_1901C9260;
        uint64_t v9 = a3;
        size_t v10 = 864;
        goto LABEL_72;
      }
      break;
    case 11:
      uint64_t v7 = 266;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901C95C0, 0x428uLL);
        uint64_t v8 = &unk_1901C99E8;
        uint64_t v9 = a3;
        size_t v10 = 1064;
        goto LABEL_72;
      }
      break;
    case 12:
      uint64_t v7 = 314;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901C9E10, 0x4E8uLL);
        uint64_t v8 = &unk_1901CA2F8;
        uint64_t v9 = a3;
        size_t v10 = 1256;
        goto LABEL_72;
      }
      break;
    case 13:
      uint64_t v7 = 366;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901CA7E0, 0x5B8uLL);
        uint64_t v8 = &unk_1901CAD98;
        uint64_t v9 = a3;
        size_t v10 = 1464;
        goto LABEL_72;
      }
      break;
    case 14:
      uint64_t v7 = 422;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901CB350, 0x698uLL);
        uint64_t v8 = &unk_1901CB9E8;
        uint64_t v9 = a3;
        size_t v10 = 1688;
        goto LABEL_72;
      }
      break;
    case 15:
      uint64_t v7 = 482;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901CC080, 0x788uLL);
        uint64_t v8 = &unk_1901CC808;
        uint64_t v9 = a3;
        size_t v10 = 1928;
        goto LABEL_72;
      }
      break;
    case 16:
      uint64_t v7 = 546;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901CCF90, 0x888uLL);
        uint64_t v8 = &unk_1901CD818;
        uint64_t v9 = a3;
        size_t v10 = 2184;
        goto LABEL_72;
      }
      break;
    case 17:
      uint64_t v7 = 614;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901CE0A0, 0x998uLL);
        uint64_t v8 = &unk_1901CEA38;
        uint64_t v9 = a3;
        size_t v10 = 2456;
        goto LABEL_72;
      }
      break;
    case 18:
      uint64_t v7 = 686;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901CF3D0, 0xAB8uLL);
        uint64_t v8 = &unk_1901CFE88;
        uint64_t v9 = a3;
        size_t v10 = 2744;
        goto LABEL_72;
      }
      break;
    case 19:
      uint64_t v7 = 762;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901D0940, 0xBE8uLL);
        uint64_t v8 = &unk_1901D1528;
        uint64_t v9 = a3;
        size_t v10 = 3048;
        goto LABEL_72;
      }
      break;
    case 20:
      uint64_t v7 = 842;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901D2110, 0xD28uLL);
        uint64_t v8 = &unk_1901D2E38;
        uint64_t v9 = a3;
        size_t v10 = 3368;
        goto LABEL_72;
      }
      break;
    case 21:
      uint64_t v7 = 926;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901D3B60, 0xE78uLL);
        uint64_t v8 = &unk_1901D49D8;
        uint64_t v9 = a3;
        size_t v10 = 3704;
        goto LABEL_72;
      }
      break;
    default:
      uint64_t v7 = 1014;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_1901D5850, 0xFD8uLL);
        uint64_t v8 = &unk_1901D6828;
        uint64_t v9 = a3;
        size_t v10 = 4056;
LABEL_72:
        memcpy(v9, v8, v10);
      }
      break;
  }
  if (__C)
  {
    float __A = 1.0;
    vDSP_vfill(&__A, __C, 1, v7);
  }
  return v7;
}

uint64_t MP4BoxParser_MovieExtendsHeader::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) != 1835362404) {
      return 4294967294;
    }
    if (*((unsigned char *)this + 56) == 1)
    {
      unint64_t v6 = 0;
      unsigned int v5 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v5, 8uLL, &v6);
      if (result) {
        return result;
      }
      unint64_t v4 = bswap64(v6);
      goto LABEL_10;
    }
    if (!*((unsigned char *)this + 56))
    {
      unsigned int v7 = 0;
      unsigned int v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, &v7);
      if (result) {
        return result;
      }
      unint64_t v4 = bswap32(v7);
LABEL_10:
      this[8] = (MP4BoxParser *)v4;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void MP4BoxParser_MovieExtendsHeader::~MP4BoxParser_MovieExtendsHeader(MP4BoxParser_MovieExtendsHeader *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void sub_190027530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190027634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v12 = v11;

  _Unwind_Resume(a1);
}

void sub_190027728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19002793C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(void *a1, void *a2)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EDFA10F8;
  v5[1] = a1;
  v5[3] = v5;
  id v3 = a2;
  *a1 = v3;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v5);

  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100](v5);
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_190027A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  uint64_t v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayEE10sync_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c69_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayEEEEEE_e17_v16__0__NSError_8l;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v7);
  id v3 = [v2 synchronousRemoteObjectProxyWithErrorHandler:v5];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100](v7);
  return v3;
}

void sub_190027B58(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::reply(uint64_t a1)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v5, a1 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c69_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayEEEEEE_e29_v24__0__NSError_8__NSArray_16l;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  uint64_t v1 = _Block_copy(aBlock);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100](v5);
  return v1;
}

void sub_190027C64(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_190027E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c69_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c69_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_190027ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_190027F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray *> &&)#1},std::allocator<std::tuple<NSArray *> &>,void ()(NSError,std::tuple<NSArray *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray *> &&)#1},std::allocator<std::tuple<NSArray *> &>,void ()(NSError,std::tuple<NSArray *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA10F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray *> &&)#1},std::allocator<std::tuple<NSArray *> &>,void ()(NSError,std::tuple<NSArray *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA10F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray *> &&)#1},std::allocator<std::tuple<NSArray *> &>,void ()(NSError,std::tuple<NSArray *>)>::~__func()
{
}

void sub_1900281D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  va_start(va, a8);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  std::recursive_mutex::unlock(v9);

  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::async_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v7, (uint64_t)(a1 + 1));
  uint64_t v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE11async_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v6, (uint64_t)v7);
  uint64_t v3 = [v2 remoteObjectProxyWithErrorHandler:v5];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v6);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v7);
  return v3;
}

void sub_190028338(_Unwind_Exception *a1)
{
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v1);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE11async_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002856C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  va_start(va, a8);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  std::recursive_mutex::unlock(v9);

  _Unwind_Resume(a1);
}

void sub_19002878C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  va_start(va, a8);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  std::recursive_mutex::unlock(v9);

  _Unwind_Resume(a1);
}

void sub_190028A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getAVAudioFormatClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVAudioFormatClass(void)::softClass;
  uint64_t v7 = getAVAudioFormatClass(void)::softClass;
  if (!getAVAudioFormatClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL21getAVAudioFormatClassv_block_invoke_4232;
    v3[3] = &unk_1E5688B80;
    v3[4] = &v4;
    ___ZL21getAVAudioFormatClassv_block_invoke_4232((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_190028B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVAudioChannelLayoutClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVAudioChannelLayoutClass(void)::softClass;
  uint64_t v7 = getAVAudioChannelLayoutClass(void)::softClass;
  if (!getAVAudioChannelLayoutClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL28getAVAudioChannelLayoutClassv_block_invoke_4219;
    v3[3] = &unk_1E5688B80;
    v3[4] = &v4;
    ___ZL28getAVAudioChannelLayoutClassv_block_invoke_4219((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

{
  void *v0;
  id v1;
  void v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVAudioChannelLayoutClass(void)::softClass;
  uint64_t v7 = getAVAudioChannelLayoutClass(void)::softClass;
  if (!getAVAudioChannelLayoutClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL28getAVAudioChannelLayoutClassv_block_invoke_9239;
    v3[3] = &unk_1E5688B80;
    v3[4] = &v4;
    ___ZL28getAVAudioChannelLayoutClassv_block_invoke_9239((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

{
  void *v0;
  id v1;
  void v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVAudioChannelLayoutClass(void)::softClass;
  uint64_t v7 = getAVAudioChannelLayoutClass(void)::softClass;
  if (!getAVAudioChannelLayoutClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL28getAVAudioChannelLayoutClassv_block_invoke_9646;
    v3[3] = &unk_1E5688B80;
    v3[4] = &v4;
    ___ZL28getAVAudioChannelLayoutClassv_block_invoke_9646((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_190028C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL28getAVAudioChannelLayoutClassv_block_invoke_4219(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioChannelLayout");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioChannelLayoutClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    char v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAVAudioChannelLayoutClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 65, @"Unable to find class %s", "AVAudioChannelLayout");

    __break(1u);
  }
}

void sub_190028D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVFAudioLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = ___ZL19AVFAudioLibraryCorePPc_block_invoke_4226;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E56876D8;
    uint64_t v5 = 0;
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    char v2 = [NSString stringWithUTF8String:"void *AVFAudioLibrary()"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"AVFASoftLink.h", 63, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3[6];
  long long v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = ___ZL19AVFAudioLibraryCorePPc_block_invoke_4969;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E56877A8;
    uint64_t v5 = 0;
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    char v2 = [NSString stringWithUTF8String:"void *AVFAudioLibrary()"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"AVFASoftLink.h", 63, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3[6];
  long long v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = ___ZL19AVFAudioLibraryCorePPc_block_invoke_9233;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5688200;
    uint64_t v5 = 0;
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    char v2 = [NSString stringWithUTF8String:"void *AVFAudioLibrary()"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"AVFASoftLink.h", 63, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

void sub_190028EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19AVFAudioLibraryCorePPc_block_invoke_4226()
{
  uint64_t result = _sl_dlopen();
  AVFAudioLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void ___ZL21getAVAudioFormatClassv_block_invoke_4232(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFormat");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFormatClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    char v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAVAudioFormatClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 64, @"Unable to find class %s", "AVAudioFormat");

    __break(1u);
  }
}

void sub_190029004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900290D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190029168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190029224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19002933C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900293E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900295D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  __int16 v18 = v17;

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v16);
  a9.super_class = (Class)AUMessageChannel_XPC;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJEE11async_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EEclEOU8__strongS3_SB_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EE7destroyEv(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

void *_ZNKSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EE7__cloneEPNS0_6__baseISC_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E488;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EE7__cloneEv()
{
  return 0;
}

void _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EED0Ev(uint64_t a1)
{
  JUMPOUT(0x192FC8940);
}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EED1Ev(uint64_t a1)
{
  return a1;
}

void sub_190029884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v12 = v10;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190029A24(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_190029DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(uint64_t a1, void *a2)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EDFA1218;
  v5[1] = a1;
  v5[3] = v5;
  id v3 = a2;
  *(void *)a1 = v3;
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::__value_func[abi:ne180100](a1 + 8, (uint64_t)v5);

  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100](v5);
  *(void *)(a1 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  return a1;
}

void sub_190029EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  char v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbEE10sync_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbEEEEEE_e17_v16__0__NSError_8l;
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v7);
  id v3 = [v2 synchronousRemoteObjectProxyWithErrorHandler:v5];
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100](v7);
  return v3;
}

void sub_190029FE0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::reply(uint64_t a1)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::__value_func[abi:ne180100]((uint64_t)v5, a1 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbEEEEEE_e20_v20__0__NSError_8B16l;
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  id v1 = _Block_copy(aBlock);
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100](v5);
  return v1;
}

void sub_19002A0EC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbEE5replyEv_block_invoke(uint64_t a1, void *a2, char a3)
{
  char v3 = a3;
  std::function<void ()(NSError *,std::tuple<BOOL> &&)>::operator()(a1 + 32, a2, (uint64_t)&v3);
}

void *__destroy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<BOOL> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<BOOL> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002A318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2 = 0;
  std::function<void ()(NSError *,std::tuple<BOOL> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL> &&)#1},std::allocator<std::tuple<BOOL> &>,void ()(NSError,std::tuple<BOOL>)>::operator()(uint64_t a1, id *a2, unsigned char *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  *(unsigned char *)(v6 + 48) = *a3;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL> &&)#1},std::allocator<std::tuple<BOOL> &>,void ()(NSError,std::tuple<BOOL>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1218;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL> &&)#1},std::allocator<std::tuple<BOOL> &>,void ()(NSError,std::tuple<BOOL>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1218;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL> &&)#1},std::allocator<std::tuple<BOOL> &>,void ()(NSError,std::tuple<BOOL>)>::~__func()
{
}

void sub_19002A54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v10;

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002A65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v10;

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(void *a1, void *a2)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EDFA11D0;
  v5[1] = a1;
  v5[3] = v5;
  id v3 = a2;
  *a1 = v3;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v5);

  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100](v5);
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_19002A744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  uint64_t v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP8NSStringEE10sync_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c70_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP8NSStringEEEEEE_e17_v16__0__NSError_8l;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v7);
  id v3 = [v2 synchronousRemoteObjectProxyWithErrorHandler:v5];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100](v7);
  return v3;
}

void sub_19002A85C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::reply(uint64_t a1)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v5, a1 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP8NSStringEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c70_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP8NSStringEEEEEE_e30_v24__0__NSError_8__NSString_16l;
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  uint64_t v1 = _Block_copy(aBlock);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100](v5);
  return v1;
}

void sub_19002A968(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP8NSStringEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_19002AB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c70_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP8NSStringEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c70_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP8NSStringEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP8NSStringEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002AC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSString *> &&)#1},std::allocator<std::tuple<NSString *> &>,void ()(NSError,std::tuple<NSString *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSString *> &&)#1},std::allocator<std::tuple<NSString *> &>,void ()(NSError,std::tuple<NSString *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA11D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSString *> &&)#1},std::allocator<std::tuple<NSString *> &>,void ()(NSError,std::tuple<NSString *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA11D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSString *> &&)#1},std::allocator<std::tuple<NSString *> &>,void ()(NSError,std::tuple<NSString *>)>::~__func()
{
}

void sub_19002AE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v10;

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002AF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  va_start(va, a6);
  id v8 = v6;

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19002B0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  va_start(va, a6);
  uint64_t v9 = v7;

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19002B468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::~sync_message((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP21NSXPCListenerEndpointEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_19002B6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c84_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP21NSXPCListenerEndpointEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c84_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP21NSXPCListenerEndpointEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002B744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP21NSXPCListenerEndpointEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002B794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSXPCListenerEndpoint *> &&)#1},std::allocator<std::tuple<NSXPCListenerEndpoint *> &>,void ()(NSError,std::tuple<NSXPCListenerEndpoint *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSXPCListenerEndpoint *> &&)#1},std::allocator<std::tuple<NSXPCListenerEndpoint *> &>,void ()(NSError,std::tuple<NSXPCListenerEndpoint *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA10B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSXPCListenerEndpoint *> &&)#1},std::allocator<std::tuple<NSXPCListenerEndpoint *> &>,void ()(NSError,std::tuple<NSXPCListenerEndpoint *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA10B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSXPCListenerEndpoint *> &&)#1},std::allocator<std::tuple<NSXPCListenerEndpoint *> &>,void ()(NSError,std::tuple<NSXPCListenerEndpoint *>)>::~__func()
{
}

void sub_19002BBE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::~sync_message((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayIP17AUAudioUnitPresetEEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_19002BE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c91_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c91_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayIP17AUAudioUnitPresetEEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002BF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> *> &&)#1},std::allocator<std::tuple<NSArray<AUAudioUnitPreset *> *> &>,void ()(NSError,std::tuple<NSArray<AUAudioUnitPreset *> *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> *> &&)#1},std::allocator<std::tuple<NSArray<AUAudioUnitPreset *> *> &>,void ()(NSError,std::tuple<NSArray<AUAudioUnitPreset *> *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1140;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> *> &&)#1},std::allocator<std::tuple<NSArray<AUAudioUnitPreset *> *> &>,void ()(NSError,std::tuple<NSArray<AUAudioUnitPreset *> *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1140;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> *> &&)#1},std::allocator<std::tuple<NSArray<AUAudioUnitPreset *> *> &>,void ()(NSError,std::tuple<NSArray<AUAudioUnitPreset *> *>)>::~__func()
{
}

void sub_19002C2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_19002C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c101_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c101_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002C580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002C5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> *> &&)#1},std::allocator<std::tuple<NSDictionary<NSString *,objc_object *> *> &>,void ()(NSError,std::tuple<NSDictionary<NSString *,objc_object *> *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> *> &&)#1},std::allocator<std::tuple<NSDictionary<NSString *,objc_object *> *> &>,void ()(NSError,std::tuple<NSDictionary<NSString *,objc_object *> *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0FD8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> *> &&)#1},std::allocator<std::tuple<NSDictionary<NSString *,objc_object *> *> &>,void ()(NSError,std::tuple<NSDictionary<NSString *,objc_object *> *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA0FD8;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> *> &&)#1},std::allocator<std::tuple<NSDictionary<NSString *,objc_object *> *> &>,void ()(NSError,std::tuple<NSDictionary<NSString *,objc_object *> *>)>::~__func()
{
}

void sub_19002C81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002C9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002CAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19002CC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19002CD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002CE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002D108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP18MIDICIProfileStateEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_19002D334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c81_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP18MIDICIProfileStateEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c81_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP18MIDICIProfileStateEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002D3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP18MIDICIProfileStateEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002D424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<MIDICIProfileState *> &&)#1},std::allocator<std::tuple<MIDICIProfileState *> &>,void ()(NSError,std::tuple<MIDICIProfileState *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<MIDICIProfileState *> &&)#1},std::allocator<std::tuple<MIDICIProfileState *> &>,void ()(NSError,std::tuple<MIDICIProfileState *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1068;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<MIDICIProfileState *> &&)#1},std::allocator<std::tuple<MIDICIProfileState *> &>,void ()(NSError,std::tuple<MIDICIProfileState *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1068;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<MIDICIProfileState *> &&)#1},std::allocator<std::tuple<MIDICIProfileState *> &>,void ()(NSError,std::tuple<MIDICIProfileState *>)>::~__func()
{
}

void sub_19002D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  va_start(va, a6);
  uint64_t v9 = v7;

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19002D8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP10NSIndexSetEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_19002DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c73_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP10NSIndexSetEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c73_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP10NSIndexSetEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002DBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP10NSIndexSetEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002DC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSIndexSet *> &&)#1},std::allocator<std::tuple<NSIndexSet *> &>,void ()(NSError,std::tuple<NSIndexSet *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSIndexSet *> &&)#1},std::allocator<std::tuple<NSIndexSet *> &>,void ()(NSError,std::tuple<NSIndexSet *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0F48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSIndexSet *> &&)#1},std::allocator<std::tuple<NSIndexSet *> &>,void ()(NSError,std::tuple<NSIndexSet *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA0F48;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSIndexSet *> &&)#1},std::allocator<std::tuple<NSIndexSet *> &>,void ()(NSError,std::tuple<NSIndexSet *>)>::~__func()
{
}

void sub_19002DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayIP8NSNumberEEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_19002E17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c81_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayIP8NSNumberEEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c81_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayIP8NSNumberEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002E21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayIP8NSNumberEEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002E26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<NSNumber *> *> &&)#1},std::allocator<std::tuple<NSArray<NSNumber *> *> &>,void ()(NSError,std::tuple<NSArray<NSNumber *> *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<NSNumber *> *> &&)#1},std::allocator<std::tuple<NSArray<NSNumber *> *> &>,void ()(NSError,std::tuple<NSArray<NSNumber *> *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1188;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<NSNumber *> *> &&)#1},std::allocator<std::tuple<NSArray<NSNumber *> *> &>,void ()(NSError,std::tuple<NSArray<NSNumber *> *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1188;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<NSNumber *> *> &&)#1},std::allocator<std::tuple<NSArray<NSNumber *> *> &>,void ()(NSError,std::tuple<NSArray<NSNumber *> *>)>::~__func()
{
}

void sub_19002E45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(uint64_t a1, void *a2)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EDFA12A8;
  v5[1] = a1;
  v5[3] = v5;
  id v3 = a2;
  *(void *)a1 = v3;
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::__value_func[abi:ne180100](a1 + 8, (uint64_t)v5);

  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100](v5);
  *(void *)(a1 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_19002E544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  uint64_t v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJfEE10sync_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJfEEEEEE_e17_v16__0__NSError_8l;
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v7);
  id v3 = [v2 synchronousRemoteObjectProxyWithErrorHandler:v5];
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100](v7);
  return v3;
}

void sub_19002E65C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::reply(uint64_t a1)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::__value_func[abi:ne180100]((uint64_t)v5, a1 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJfEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJfEEEEEE_e20_v20__0__NSError_8f16l;
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  uint64_t v1 = _Block_copy(aBlock);
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100](v5);
  return v1;
}

void sub_19002E768(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJfEE5replyEv_block_invoke(uint64_t a1, void *a2, float a3)
{
  float v3 = a3;
  std::function<void ()(NSError *,std::tuple<float> &&)>::operator()(a1 + 32, a2, (uint64_t)&v3);
}

void *__destroy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJfEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJfEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<float> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<float> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJfEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  int v2 = 0;
  std::function<void ()(NSError *,std::tuple<float> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<float> &&)#1},std::allocator<std::tuple<float> &>,void ()(NSError,std::tuple<float>)>::operator()(uint64_t a1, id *a2, _DWORD *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  *(_DWORD *)(v6 + 48) = *a3;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<float> &&)#1},std::allocator<std::tuple<float> &>,void ()(NSError,std::tuple<float>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA12A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<float> &&)#1},std::allocator<std::tuple<float> &>,void ()(NSError,std::tuple<float>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA12A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<float> &&)#1},std::allocator<std::tuple<float> &>,void ()(NSError,std::tuple<float>)>::~__func()
{
}

void sub_19002EF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  objc_destroyWeak(v33);
  objc_destroyWeak(v32);
  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak((id *)(v34 - 200));
  std::mutex::unlock(v29);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_19002F16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v12 = v11;

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002F2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002F448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v13 = v11;

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19002F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP15AUParameterTreeEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_19002F734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c78_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP15AUParameterTreeEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c78_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP15AUParameterTreeEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19002F7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP15AUParameterTreeEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_19002F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<AUParameterTree *> &&)#1},std::allocator<std::tuple<AUParameterTree *> &>,void ()(NSError,std::tuple<AUParameterTree *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<AUParameterTree *> &&)#1},std::allocator<std::tuple<AUParameterTree *> &>,void ()(NSError,std::tuple<AUParameterTree *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1020;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<AUParameterTree *> &&)#1},std::allocator<std::tuple<AUParameterTree *> &>,void ()(NSError,std::tuple<AUParameterTree *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1020;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<AUParameterTree *> &&)#1},std::allocator<std::tuple<AUParameterTree *> &>,void ()(NSError,std::tuple<AUParameterTree *>)>::~__func()
{
}

void sub_19002FB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::recursive_mutex *a11)
{
  _Unwind_Resume(a1);
}

void sub_19002FC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19002FE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  va_start(va, a8);
  int v13 = v11;

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  std::recursive_mutex::unlock(v9);

  _Unwind_Resume(a1);
}

void sub_190030030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  va_start(va, a8);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  std::recursive_mutex::unlock(v9);

  _Unwind_Resume(a1);
}

void sub_190030224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  va_start(va, a8);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  std::recursive_mutex::unlock(v9);

  _Unwind_Resume(a1);
}

void sub_190030474(_Unwind_Exception *a1)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::~sync_message(v3 - 152);
  _Unwind_Resume(a1);
}

void sub_1900305EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190030730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v12 = v11;

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(void *a1, void *a2)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EDFA0F90;
  v5[1] = a1;
  v5[3] = v5;
  id v3 = a2;
  *a1 = v3;
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v5);

  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100](v5);
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_190030824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_proxy(void **a1)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  uint64_t v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP11objc_objectEE10sync_proxyEv_block_invoke;
  v5[3] = &__block_descriptor_64_ea8_32c74_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP11objc_objectEEEEEE_e17_v16__0__NSError_8l;
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v7);
  id v3 = [v2 synchronousRemoteObjectProxyWithErrorHandler:v5];
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100](v7);
  return v3;
}

void sub_19003093C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::reply(uint64_t a1)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v5, a1 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP11objc_objectEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c74_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP11objc_objectEEEEEE_e20_v24__0__NSError_8_16l;
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v5);
  uint64_t v1 = _Block_copy(aBlock);
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100](v5);
  return v1;
}

void sub_190030A48(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP11objc_objectEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  std::function<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);
}

void sub_190030C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c74_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP11objc_objectEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c74_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP11objc_objectEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_190030CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP11objc_objectEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2 = 0;
  std::function<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_190030D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<objc_object *> &&)#1},std::allocator<std::tuple<objc_object *> &>,void ()(NSError,std::tuple<objc_object *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<objc_object *> &&)#1},std::allocator<std::tuple<objc_object *> &>,void ()(NSError,std::tuple<objc_object *>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0F90;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<objc_object *> &&)#1},std::allocator<std::tuple<objc_object *> &>,void ()(NSError,std::tuple<objc_object *>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA0F90;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<objc_object *> &&)#1},std::allocator<std::tuple<objc_object *> &>,void ()(NSError,std::tuple<objc_object *>)>::~__func()
{
}

void sub_190030F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190030FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190031148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190031F1C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, caulk::pooled_semaphore_mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long buf)
{
  if (a2)
  {
    caulk::pooled_semaphore_mutex::_unlock(a13);
    atomic_store(0, v22);
    caulk::semaphore::signal((caulk::semaphore *)(v21 + 100));
    int v25 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v26 = v25;
      uint64_t v27 = *(NSObject **)kAUExtensionScope;
      unsigned int v28 = applesauce::dispatch::v1::source::operator*(*(id *)kAUExtensionScope);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v29;
        _os_log_error_impl(&dword_18FEC0000, v27, OS_LOG_TYPE_ERROR, "render error: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      __cxa_end_catch();
    }
    JUMPOUT(0x190031450);
  }
  _Unwind_Resume(a1);
}

void sub_190032090()
{
}

void sub_1900321B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  va_start(va, a6);
  uint64_t v7 = v6;

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1900322FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1900339DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,void *a22,void *a23,uint64_t a24,std::recursive_mutex *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  unsigned int v61 = *(void **)(v59 + 112);
  if (v61)
  {
    *(void *)(v59 + 12std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v61;
    operator delete(v61);
  }
  BOOL v62 = *(void **)(v59 + 88);
  if (v62) {
    operator delete(v62);
  }

  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

auoop::RenderPipeUser *caulk::__expected_detail::base<auoop::RenderPipeUser,NSError * {__strong}>::~base(auoop::RenderPipeUser *this)
{
  if (*((unsigned char *)this + 72)) {
    auoop::RenderPipeUser::~RenderPipeUser(this);
  }
  else {

  }
  return this;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJmmmU8__strongP6NSDatabjEE5replyEv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, int a8)
{
  v12[0] = a3;
  v12[1] = a4;
  void v12[2] = a5;
  id v13 = a6;
  char v14 = a7;
  int v15 = a8;
  std::function<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)v12);
}

void sub_190033FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c73_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJmmmU8__strongP6NSDatabjEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c73_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJmmmU8__strongP6NSDatabjEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_19003409C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJmmmU8__strongP6NSDatabjEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  int v5 = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  char v4 = 0;
  std::function<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_1900340F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &&)#1},std::allocator<std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &>,void ()(NSError,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int>)>::operator()(uint64_t a1, id *a2, uint64_t a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  *(void *)(v6 + 48) = *(void *)a3;
  *(void *)(v6 + 56) = *(void *)(a3 + 8);
  *(void *)(v6 + 64) = *(void *)(a3 + 16);
  objc_storeStrong((id *)(v6 + 72), *(id *)(a3 + 24));
  *(unsigned char *)(v6 + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(unsigned char *)(a3 + 32);
  *(_DWORD *)(v6 + 84) = *(_DWORD *)(a3 + 36);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &&)#1},std::allocator<std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &>,void ()(NSError,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1338;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &&)#1},std::allocator<std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &>,void ()(NSError,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1338;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &&)#1},std::allocator<std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &>,void ()(NSError,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int>)>::~__func()
{
}

void sub_1900342DC(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1900343B0(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_190034528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19003478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, char a12)
{
  id v13 = v12;

  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::~sync_message((uint64_t)&a12);
  a9.super_class = (Class)AUAudioUnit_XPC;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_190034B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c40_ZTSN5caulk8weak_refI15AUAudioUnit_XPCEE(uint64_t a1)
{
}

void __copy_helper_block_ea8_40c40_ZTSN5caulk8weak_refI15AUAudioUnit_XPCEE(uint64_t a1, uint64_t a2)
{
}

void postNotificationIfNotPosted<caulk::weak_ref<AUAudioUnit_XPC>>(id *a1, void *a2)
{
  CFDictionaryRef v3 = a2;
  uint64_t v4 = caulk::strong<AURemoteMessageChannel>(a1);
  uint64_t v5 = v4;
  if (v4)
  {
    std::mutex::lock((std::mutex *)(v4 + 656));
    if (!*(unsigned char *)(v5 + 648))
    {
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterPostNotification(LocalCenter, @"com.apple.coreaudio.AudioComponentInstanceInvalidated", (const void *)v5, v3, 0);
      *(unsigned char *)(v5 + 648) = 1;
    }
    std::mutex::unlock((std::mutex *)(v5 + 656));
  }

  objc_destroyWeak(a1);
}

void sub_190034C9C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v4);

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190034F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190035188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190035D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  operator delete(v17);
  objc_destroyWeak((id *)(v18 - 216));

  _Unwind_Resume(a1);
}

void sub_190035F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::~sync_message(uint64_t a1)
{
  std::__function::__value_func<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::__function::__value_func<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbbU8__strongP7NSArrayS7_bbimmEE5replyEv_block_invoke(uint64_t a1, void *a2, char a3, char a4, void *a5, void *a6, char a7, char a8, int a9, uint64_t a10, uint64_t a11)
{
  v16[0] = a3;
  v16[1] = a4;
  id v17 = a5;
  id v18 = a6;
  char v19 = a7;
  char v20 = a8;
  int v21 = a9;
  uint64_t v22 = a10;
  uint64_t v23 = a11;
  std::function<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::operator()(a1 + 32, a2, (uint64_t)v16);
}

void sub_1900361A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c79_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbbU8__strongP7NSArrayS6_bbimmEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c79_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbbU8__strongP7NSArrayS6_bbimmEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void std::function<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v5 + 48))(v5, &v6, a3);
}

void sub_190036248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbbU8__strongP7NSArrayS7_bbimmEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  __int16 v2 = 0;
  id v3 = 0;
  id v4 = 0;
  __int16 v5 = 0;
  uint64_t v7 = 0;
  uint64_t v6 = 0;
  int v8 = 0;
  std::function<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void sub_1900362B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &&)#1},std::allocator<std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &>,void ()(NSError,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>)>::operator()(uint64_t a1, id *a2, uint64_t a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  id v8 = v5;

  *(unsigned char *)(v6 + 48) = *(unsigned char *)a3;
  *(unsigned char *)(v6 + 49) = *(unsigned char *)(a3 + 1);
  objc_storeStrong((id *)(v6 + 56), *(id *)(a3 + 8));
  objc_storeStrong((id *)(v6 + 64), *(id *)(a3 + 16));
  *(unsigned char *)(v6 + 72) = *(unsigned char *)(a3 + 24);
  *(unsigned char *)(v6 + 73) = *(unsigned char *)(a3 + 25);
  *(_DWORD *)(v6 + 76) = *(_DWORD *)(a3 + 28);
  *(void *)(v6 + 8std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(a3 + 32);
  *(void *)(v6 + 88) = *(void *)(a3 + 40);
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &&)#1},std::allocator<std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &>,void ()(NSError,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1260;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &&)#1},std::allocator<std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &>,void ()(NSError,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1260;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &&)#1},std::allocator<std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &>,void ()(NSError,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>)>::~__func()
{
}

void __destroy_helper_block_ea8_32c40_ZTSN5caulk8weak_refI15AUAudioUnit_XPCEE(uint64_t a1)
{
}

void __copy_helper_block_ea8_32c40_ZTSN5caulk8weak_refI15AUAudioUnit_XPCEE(uint64_t a1, uint64_t a2)
{
}

void APAC::RendererDataJSON(unsigned __int8 *a1, float *a2, int a3)
{
  if (!a3) {
    goto LABEL_79;
  }
  id v5 = (uint64_t *)*(unsigned __int8 *)a2;
  v652[0] = 4;
  v653 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v652);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v652);
  uint64_t v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHasData");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v652);
  int v7 = *v6;
  *uint64_t v6 = 4;
  v652[0] = v7;
  id v8 = (uint64_t *)*((void *)v6 + 1);
  *((void *)v6 + 1) = v5;
  v653 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v652);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v653, v7);
  if (*(unsigned char *)a2)
  {
LABEL_79:
    uint64_t v9 = (uint64_t *)*((unsigned __int16 *)a2 + 1);
    v650[0] = 5;
    v651 = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
    size_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mNumParameters");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
    int v11 = *v10;
    *size_t v10 = 5;
    v650[0] = v11;
    long long v12 = (uint64_t *)*((void *)v10 + 1);
    *((void *)v10 + 1) = v9;
    v651 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v651, v11);
    if (v9)
    {
      unint64_t v13 = 0;
      v465 = v9;
      do
      {
        char v14 = (uint64_t *)*((unsigned __int16 *)a2 + v13 + 2);
        v648[0] = 6;
        v649 = v14;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v648);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v648);
        int v15 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mParamIndexList");
        uint64_t v16 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v15, v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v648);
        int v17 = *v16;
        *uint64_t v16 = 6;
        v648[0] = v17;
        id v18 = (uint64_t *)*((void *)v16 + 1);
        *((void *)v16 + 1) = v14;
        v649 = v18;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v648);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v649, v17);
        switch((int)v14)
        {
          case 0:
            char v19 = (uint64_t *)*((unsigned __int8 *)a2 + 68);
            v646[0] = 4;
            v647 = v19;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v646);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v646);
            char v20 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
            int v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v20, "mPositionPresent");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v646);
            int v22 = *v21;
            char *v21 = 4;
            v646[0] = v22;
            uint64_t v23 = (uint64_t *)*((void *)v21 + 1);
            *((void *)v21 + 1) = v19;
            v647 = v23;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v646);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v647, v22);
            if (*((unsigned char *)a2 + 68))
            {
              uint64_t v24 = (uint64_t *)*((unsigned __int8 *)a2 + 69);
              v644[0] = 4;
              v645 = v24;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v644);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v644);
              int v25 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              int v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v25, "mIsCartesian");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v644);
              int v27 = *v26;
              char *v26 = 4;
              v644[0] = v27;
              unsigned int v28 = (uint64_t *)*((void *)v26 + 1);
              *((void *)v26 + 1) = v24;
              v645 = v28;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v644);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v645, v27);
              if (*((unsigned char *)a2 + 69))
              {
                double v29 = a2[22];
                v642[0] = 7;
                double v643 = v29;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v642);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v642);
                id v30 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                __int16 v31 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "mCoordinate");
                int v32 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v31, 0);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v642);
                int v33 = *v32;
                *int v32 = 7;
                v642[0] = v33;
                uint64_t v34 = *((uint64_t **)v32 + 1);
                *((double *)v32 + 1) = v29;
                double v643 = *(double *)&v34;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v642);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v643, v33);
                double v35 = a2[23];
                v640[0] = 7;
                double v641 = v35;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v640);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v640);
                int v36 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                unsigned int v37 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v36, "mCoordinate");
                uint64_t v38 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v37, 1uLL);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v640);
                int v39 = *v38;
                unsigned __int8 *v38 = 7;
                v640[0] = v39;
                size_t v40 = *((uint64_t **)v38 + 1);
                *((double *)v38 + 1) = v35;
                double v641 = *(double *)&v40;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v38);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v640);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v641, v39);
                double v41 = a2[24];
                v638[0] = 7;
                double v639 = v41;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v638);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v638);
                int v42 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                int v43 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "mCoordinate");
                uint64_t v44 = (double *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v43, 2uLL);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v638);
                int v45 = *(unsigned __int8 *)v44;
                *(unsigned char *)uint64_t v44 = 7;
                v638[0] = v45;
                double v46 = v44[1];
                v44[1] = v41;
                double v639 = v46;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v44);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v638);
                __int16 v47 = &v639;
              }
              else
              {
                double v319 = a2[18];
                v636[0] = 7;
                double v637 = v319;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v636);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v636);
                v320 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v321 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v320, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v636);
                int v322 = *v321;
                char *v321 = 7;
                v636[0] = v322;
                v323 = *((uint64_t **)v321 + 1);
                *((double *)v321 + 1) = v319;
                double v637 = *(double *)&v323;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v321);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v636);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v637, v322);
                double v324 = a2[19];
                v634[0] = 7;
                double v635 = v324;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v634);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v634);
                v325 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v326 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v325, "mElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v634);
                int v327 = *v326;
                char *v326 = 7;
                v634[0] = v327;
                v328 = *((uint64_t **)v326 + 1);
                *((double *)v326 + 1) = v324;
                double v635 = *(double *)&v328;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v326);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v634);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v635, v327);
                double v329 = a2[20];
                v632[0] = 7;
                double v633 = v329;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v632);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v632);
                v330 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v331 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v330, "mRadius");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v632);
                int v45 = *v331;
                char *v331 = 7;
                v632[0] = v45;
                double v332 = *((double *)v331 + 1);
                *((double *)v331 + 1) = v329;
                double v633 = v332;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v331);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v632);
                __int16 v47 = &v633;
              }
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v47, v45);
            }
            v333 = (uint64_t *)*((unsigned __int8 *)a2 + 84);
            v630[0] = 4;
            v631 = v333;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v630);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v630);
            v334 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
            v335 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v334, "mRotationPresent");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v630);
            int v336 = *v335;
            char *v335 = 4;
            v630[0] = v336;
            v337 = (uint64_t *)*((void *)v335 + 1);
            *((void *)v335 + 1) = v333;
            v631 = v337;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v335);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v630);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v631, v336);
            if (*((unsigned char *)a2 + 84))
            {
              double v338 = a2[25];
              v628[0] = 7;
              double v629 = v338;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v628);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v628);
              v339 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v340 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v339, "mQuaternion");
              v341 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v340, 0);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v628);
              int v342 = *v341;
              unsigned __int8 *v341 = 7;
              v628[0] = v342;
              v343 = *((uint64_t **)v341 + 1);
              *((double *)v341 + 1) = v338;
              double v629 = *(double *)&v343;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v341);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v628);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v629, v342);
              double v344 = a2[26];
              v626[0] = 7;
              double v627 = v344;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v626);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v626);
              v345 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v346 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v345, "mQuaternion");
              v347 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v346, 1uLL);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v626);
              int v348 = *v347;
              unsigned __int8 *v347 = 7;
              v626[0] = v348;
              v349 = *((uint64_t **)v347 + 1);
              *((double *)v347 + 1) = v344;
              double v627 = *(double *)&v349;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v347);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v626);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v627, v348);
              double v350 = a2[27];
              v624[0] = 7;
              double v625 = v350;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
              v351 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v352 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v351, "mQuaternion");
              v353 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v352, 2uLL);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
              int v354 = *v353;
              unsigned __int8 *v353 = 7;
              v624[0] = v354;
              v355 = *((uint64_t **)v353 + 1);
              *((double *)v353 + 1) = v350;
              double v625 = *(double *)&v355;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v353);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v625, v354);
              double v356 = a2[28];
              v622[0] = 7;
              double v623 = v356;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v622);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v622);
              v357 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v358 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v357, "mQuaternion");
              v359 = (double *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v358, 3uLL);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v622);
              int v80 = *(unsigned __int8 *)v359;
              *(unsigned char *)v359 = 7;
              v622[0] = v80;
              double v360 = v359[1];
              v359[1] = v356;
              double v623 = v360;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v359);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v622);
              long long v82 = &v623;
              goto LABEL_68;
            }
            break;
          case 1:
            int v48 = (uint64_t *)*((unsigned __int8 *)a2 + 116);
            v620[0] = 4;
            v621 = v48;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v620);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v620);
            __int16 v49 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
            int v50 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v49, "mIsCartesian");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v620);
            int v51 = *v50;
            char *v50 = 4;
            v620[0] = v51;
            int v52 = (uint64_t *)*((void *)v50 + 1);
            *((void *)v50 + 1) = v48;
            v621 = v52;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v50);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v620);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v621, v51);
            double v53 = a2[30];
            v618[0] = 7;
            double v619 = v53;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v618);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v618);
            BOOL v54 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
            unint64_t v55 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v54, "mWidth");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v618);
            int v56 = *v55;
            *unint64_t v55 = 7;
            v618[0] = v56;
            uint64_t v57 = *((uint64_t **)v55 + 1);
            *((double *)v55 + 1) = v53;
            double v619 = *(double *)&v57;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v618);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v619, v56);
            double v58 = a2[31];
            v616[0] = 7;
            double v617 = v58;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v616);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v616);
            uint64_t v59 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
            unint64_t v60 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "mHeight");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v616);
            int v61 = *v60;
            char *v60 = 7;
            v616[0] = v61;
            BOOL v62 = *((uint64_t **)v60 + 1);
            *((double *)v60 + 1) = v58;
            double v617 = *(double *)&v62;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v616);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v617, v61);
            id v63 = (uint64_t *)*((unsigned __int8 *)a2 + 117);
            v614[0] = 4;
            v615 = v63;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v614);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v614);
            unsigned int v64 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
            id v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v64, "mHasDepth");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v614);
            int v66 = *v65;
            *id v65 = 4;
            v614[0] = v66;
            int v67 = (uint64_t *)*((void *)v65 + 1);
            *((void *)v65 + 1) = v63;
            v615 = v67;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v614);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v615, v66);
            if (*((unsigned char *)a2 + 117))
            {
              double v68 = a2[32];
              v612[0] = 7;
              double v613 = v68;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
              int v69 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
              int v70 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "mDepth");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
              int v71 = *v70;
              *int v70 = 7;
              v612[0] = v71;
              double v72 = *((double *)v70 + 1);
              *((double *)v70 + 1) = v68;
              double v613 = v72;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v70);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
              int v73 = &v613;
              goto LABEL_62;
            }
            break;
          case 2:
            double v74 = a2[33];
            v610[0] = 7;
            double v611 = v74;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v610);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v610);
            uint64_t v75 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            size_t v76 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v75, "mGain");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v610);
            int v71 = *v76;
            *size_t v76 = 7;
            v610[0] = v71;
            double v77 = *((double *)v76 + 1);
            *((double *)v76 + 1) = v74;
            double v611 = v77;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v76);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v610);
            int v73 = &v611;
            goto LABEL_62;
          case 3:
            double v78 = a2[34];
            v608[0] = 7;
            double v609 = v78;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v608);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v608);
            int v79 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDiffuse");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v608);
            int v80 = *v79;
            *int v79 = 7;
            v608[0] = v80;
            double v81 = *((double *)v79 + 1);
            *((double *)v79 + 1) = v78;
            double v609 = v81;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v79);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v608);
            long long v82 = &v609;
            goto LABEL_68;
          case 4:
            long long v83 = (uint64_t *)*((unsigned __int8 *)a2 + 141);
            v606[0] = 4;
            v607 = v83;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v606);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v606);
            uint64_t v84 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectChannelLock");
            unsigned int v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v84, "mHasMaxDistance");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v606);
            int v86 = *v85;
            *unsigned int v85 = 4;
            v606[0] = v86;
            unint64_t v87 = (uint64_t *)*((void *)v85 + 1);
            *((void *)v85 + 1) = v83;
            v607 = v87;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v85);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v606);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v607, v86);
            if (!*((unsigned char *)a2 + 141)) {
              break;
            }
            double v88 = a2[36];
            v604[0] = 7;
            double v605 = v88;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v604);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v604);
            long long v89 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectChannelLock");
            id v90 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v89, "mHasMaxDistance");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v604);
            int v71 = *v90;
            *id v90 = 7;
            v604[0] = v71;
            double v91 = *((double *)v90 + 1);
            *((double *)v90 + 1) = v88;
            double v605 = v91;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v604);
            int v73 = &v605;
LABEL_62:
            int v288 = v71;
            goto LABEL_63;
          case 5:
            double v92 = a2[37];
            v602[0] = 7;
            double v603 = v92;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v602);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v602);
            uint64_t v93 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDivergence");
            unint64_t v94 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v93, "mDivergence");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v602);
            int v95 = *v94;
            char *v94 = 7;
            v602[0] = v95;
            id v96 = *((uint64_t **)v94 + 1);
            *((double *)v94 + 1) = v92;
            double v603 = *(double *)&v96;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v94);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v602);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v603, v95);
            uint64_t v97 = (uint64_t *)*((unsigned __int8 *)a2 + 152);
            v600[0] = 4;
            v601 = v97;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v600);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v600);
            uint64_t v98 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDivergence");
            unint64_t v99 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v98, "mIsCartesian");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v600);
            int v100 = *v99;
            *unint64_t v99 = 4;
            v600[0] = v100;
            unint64_t v101 = (uint64_t *)*((void *)v99 + 1);
            *((void *)v99 + 1) = v97;
            v601 = v101;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v99);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v600);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v601, v100);
            if (*((unsigned char *)a2 + 152))
            {
              double v102 = a2[40];
              v598[0] = 7;
              double v599 = v102;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v598);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v598);
              id v103 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDivergence");
              id v104 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v103, "mIsCartesian");
              uint64_t v105 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v104, "mPositionRange");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v598);
              int v71 = *v105;
              char *v105 = 7;
              v598[0] = v71;
              double v106 = *((double *)v105 + 1);
              *((double *)v105 + 1) = v102;
              double v599 = v106;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v105);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v598);
              int v73 = &v599;
            }
            else
            {
              double v314 = a2[41];
              v596[0] = 7;
              double v597 = v314;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v596);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v596);
              v315 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDivergence");
              v316 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v315, "mIsCartesian");
              v317 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v316, "mAzimuthRange");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v596);
              int v71 = *v317;
              char *v317 = 7;
              v596[0] = v71;
              double v318 = *((double *)v317 + 1);
              *((double *)v317 + 1) = v314;
              double v597 = v318;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v317);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v596);
              int v73 = &v597;
            }
            goto LABEL_62;
          case 6:
            uint64_t v107 = *((unsigned __int8 *)a2 + 168);
            v594[0] = 4;
            uint64_t v595 = v107;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v594);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v594);
            uint64_t v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mIsScreenSizeAdaptationEnabled");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v594);
            int v80 = *v108;
            char *v108 = 4;
            v594[0] = v80;
            uint64_t v109 = *((void *)v108 + 1);
            *((void *)v108 + 1) = v107;
            uint64_t v595 = v109;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v594);
            long long v82 = (double *)&v595;
LABEL_68:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v82, v80);
            break;
          case 7:
            uint64_t v110 = (uint64_t *)*((unsigned __int8 *)a2 + 172);
            v592[0] = 4;
            v593 = v110;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v592);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v592);
            uint64_t v111 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
            uint64_t v112 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v111, "mIsZoneDefined");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v592);
            int v113 = *v112;
            *uint64_t v112 = 4;
            v592[0] = v113;
            long long v114 = (uint64_t *)*((void *)v112 + 1);
            *((void *)v112 + 1) = v110;
            v593 = v114;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v112);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v592);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v593, v113);
            if (*((unsigned char *)a2 + 172))
            {
              int v115 = (uint64_t *)*((unsigned __int8 *)a2 + 173);
              v590[0] = 4;
              v591 = v115;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v590);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v590);
              uint64_t v116 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
              uint64_t v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v116, "mKeepPreviousZone");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v590);
              int v118 = *v117;
              *uint64_t v117 = 4;
              v590[0] = v118;
              BOOL v119 = (uint64_t *)*((void *)v117 + 1);
              *((void *)v117 + 1) = v115;
              v591 = v119;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v590);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v591, v118);
              if (!*((unsigned char *)a2 + 173))
              {
                uint64_t v120 = (uint64_t *)*((unsigned __int8 *)a2 + 174);
                v588[0] = 4;
                v589 = v120;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v588);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v588);
                id v121 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                id v122 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v121, "mIsCartesian");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v588);
                int v123 = *v122;
                *id v122 = 4;
                v588[0] = v123;
                long long v124 = (uint64_t *)*((void *)v122 + 1);
                *((void *)v122 + 1) = v120;
                v589 = v124;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v122);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v588);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v589, v123);
                long long v125 = (uint64_t *)*((unsigned __int8 *)a2 + 175);
                v586[0] = 5;
                v587 = v125;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v586);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v586);
                long long v126 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                long long v127 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v126, "mNumZones");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v586);
                int v128 = *v127;
                char *v127 = 5;
                v586[0] = v128;
                long long v129 = (uint64_t *)*((void *)v127 + 1);
                *((void *)v127 + 1) = v125;
                v587 = v129;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v586);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v587, v128);
                uint64_t v464 = *((unsigned __int8 *)a2 + 175);
                if (*((unsigned char *)a2 + 175))
                {
                  unint64_t v130 = 0;
                  uint64_t v131 = 57;
                  do
                  {
                    long long v132 = (uint64_t *)*((unsigned __int8 *)a2 + v130 + 176);
                    v584[0] = 4;
                    v585 = v132;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
                    long long v133 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                    long long v134 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v133, "mUsePreDefinedZone");
                    long long v135 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v134, v130);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
                    int v136 = *v135;
                    *long long v135 = 4;
                    v584[0] = v136;
                    uint64_t v137 = (uint64_t *)*((void *)v135 + 1);
                    *((void *)v135 + 1) = v132;
                    v585 = v137;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v585, v136);
                    if (*((unsigned char *)a2 + v130 + 176))
                    {
                      int v138 = (uint64_t *)*((unsigned __int8 *)a2 + v130 + 191);
                      v582[0] = 5;
                      v583 = v138;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v582);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v582);
                      unint64_t v139 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                      uint64_t v9 = v465;
                      uint64_t v140 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v139, "mZoneIndex");
                      uint64_t v141 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v140, v130);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v582);
                      int v142 = *v141;
                      *uint64_t v141 = 5;
                      v582[0] = v142;
                      uint64_t v143 = (uint64_t *)*((void *)v141 + 1);
                      *((void *)v141 + 1) = v138;
                      v583 = v143;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v141);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v582);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v583, v142);
                    }
                    else
                    {
                      int v144 = *((unsigned __int8 *)a2 + 174);
                      int v145 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                      id v146 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v145, "mZone");
                      long long v147 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v146, v130);
                      int v148 = (unsigned __int8 *)&a2[v131];
                      if (v144)
                      {
                        uint64_t v149 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v147, "cartesian");
                        double v150 = *((float *)v148 - 5);
                        v580[0] = 7;
                        double v581 = v150;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v580);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v580);
                        id v151 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMinX");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v580);
                        int v152 = *v151;
                        *id v151 = 7;
                        v580[0] = v152;
                        int v153 = *((uint64_t **)v151 + 1);
                        *((double *)v151 + 1) = v150;
                        double v581 = *(double *)&v153;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v580);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v581, v152);
                        double v154 = a2[v131 - 4];
                        v578[0] = 7;
                        double v579 = v154;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v578);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v578);
                        int v155 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMaxX");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v578);
                        int v156 = *v155;
                        *int v155 = 7;
                        v578[0] = v156;
                        uint64_t v157 = *((uint64_t **)v155 + 1);
                        *((double *)v155 + 1) = v154;
                        double v579 = *(double *)&v157;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v578);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v579, v156);
                        double v158 = a2[v131 - 3];
                        v576[0] = 7;
                        double v577 = v158;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v576);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v576);
                        uint64_t v159 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMinY");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v576);
                        int v160 = *v159;
                        *uint64_t v159 = 7;
                        v576[0] = v160;
                        uint64_t v161 = *((uint64_t **)v159 + 1);
                        *((double *)v159 + 1) = v158;
                        double v577 = *(double *)&v161;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v159);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v576);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v577, v160);
                        double v162 = a2[v131 - 2];
                        v574[0] = 7;
                        double v575 = v162;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
                        float v163 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMaxY");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
                        int v164 = *v163;
                        *float v163 = 7;
                        v574[0] = v164;
                        double v165 = *((uint64_t **)v163 + 1);
                        *((double *)v163 + 1) = v162;
                        double v575 = *(double *)&v165;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v163);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v575, v164);
                        double v166 = a2[v131 - 1];
                        v572[0] = 7;
                        double v573 = v166;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v572);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v572);
                        unsigned int v167 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMinZ");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v572);
                        int v168 = *v167;
                        *unsigned int v167 = 7;
                        v572[0] = v168;
                        int v169 = *((uint64_t **)v167 + 1);
                        *((double *)v167 + 1) = v166;
                        double v573 = *(double *)&v169;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v167);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v572);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v573, v168);
                        double v170 = a2[v131];
                        v570[0] = 7;
                        double v571 = v170;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v570);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v570);
                        uint64_t v171 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMaxZ");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v570);
                        int v172 = *v171;
                        char *v171 = 7;
                        v570[0] = v172;
                        double v173 = *((double *)v171 + 1);
                        *((double *)v171 + 1) = v170;
                        double v571 = v173;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v171);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v570);
                        uint64_t v174 = &v571;
                      }
                      else
                      {
                        uint64_t v175 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v147, "spherical");
                        double v176 = *((float *)v148 - 5);
                        v568[0] = 7;
                        double v569 = v176;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v568);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v568);
                        uint64_t v177 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v175, "mMinAzimuth");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v568);
                        int v178 = *v177;
                        *uint64_t v177 = 7;
                        v568[0] = v178;
                        uint64_t v179 = *((uint64_t **)v177 + 1);
                        *((double *)v177 + 1) = v176;
                        double v569 = *(double *)&v179;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v177);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v568);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v569, v178);
                        double v180 = a2[v131 - 4];
                        v566[0] = 7;
                        double v567 = v180;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v566);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v566);
                        uint64_t v181 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v175, "mMaxAzimuth");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v566);
                        int v182 = *v181;
                        *uint64_t v181 = 7;
                        v566[0] = v182;
                        int v183 = *((uint64_t **)v181 + 1);
                        *((double *)v181 + 1) = v180;
                        double v567 = *(double *)&v183;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v181);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v566);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v567, v182);
                        double v184 = a2[v131 - 3];
                        v564[0] = 7;
                        double v565 = v184;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
                        vDSP_Length v185 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v175, "mMinElevation");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
                        int v186 = *v185;
                        *vDSP_Length v185 = 7;
                        v564[0] = v186;
                        char v187 = *((uint64_t **)v185 + 1);
                        *((double *)v185 + 1) = v184;
                        double v565 = *(double *)&v187;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v185);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v565, v186);
                        double v188 = a2[v131 - 2];
                        v562[0] = 7;
                        double v563 = v188;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                        double v189 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v175, "mMzxElevation");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                        int v172 = *v189;
                        *double v189 = 7;
                        v562[0] = v172;
                        double v190 = *((double *)v189 + 1);
                        *((double *)v189 + 1) = v188;
                        double v563 = v190;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v189);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                        uint64_t v174 = &v563;
                      }
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v174, v172);
                      uint64_t v9 = v465;
                    }
                    ++v130;
                    v131 += 6;
                  }
                  while (v464 != v130);
                }
              }
            }
            break;
          case 8:
            uint64_t v191 = *((unsigned __int8 *)a2 + 1037);
            v486[0] = 5;
            uint64_t v487 = v191;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v486);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v486);
            int v192 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mBinauralizationPreset");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v486);
            int v193 = *v192;
            *int v192 = 5;
            v486[0] = v193;
            uint64_t v194 = *((void *)v192 + 1);
            *((void *)v192 + 1) = v191;
            uint64_t v487 = v194;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v486);
            v195 = (double *)&v487;
            goto LABEL_75;
          case 9:
            v196 = (uint64_t *)*((unsigned __int8 *)a2 + 568);
            v528[0] = 5;
            v529 = v196;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v528);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v528);
            v197 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v198 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v197, "mReverbProcIndex");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v528);
            int v199 = *v198;
            char *v198 = 5;
            v528[0] = v199;
            v200 = (uint64_t *)*((void *)v198 + 1);
            *((void *)v198 + 1) = v196;
            v529 = v200;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v528);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v529, v199);
            uint64_t v9 = v465;
            if (*((unsigned char *)a2 + 568) != 1) {
              break;
            }
            v201 = (uint64_t *)*((unsigned __int16 *)a2 + 285);
            v526[0] = 5;
            v527 = v201;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
            v202 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v203 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v202, "mAUSMReverbPreset");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
            int v204 = *v203;
            char *v203 = 5;
            v526[0] = v204;
            v205 = (uint64_t *)*((void *)v203 + 1);
            *((void *)v203 + 1) = v201;
            v527 = v205;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v203);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v527, v204);
            v206 = (uint64_t *)*((unsigned __int8 *)a2 + 732);
            v524[0] = 4;
            v525 = v206;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v524);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v524);
            v207 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v208 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v207, "mReverbParams");
            v209 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v208, "mWetDryMix");
            v210 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v209, "mHasData");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v524);
            int v211 = *v210;
            char *v210 = 4;
            v524[0] = v211;
            v212 = (uint64_t *)*((void *)v210 + 1);
            *((void *)v210 + 1) = v206;
            v525 = v212;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v210);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v524);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v525, v211);
            double v213 = a2[182];
            v522[0] = 7;
            double v523 = v213;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            v214 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v215 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v214, "mReverbParams");
            v216 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v215, "mWetDryMix");
            v217 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v216, "mValue");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            int v193 = *v217;
            char *v217 = 7;
            v522[0] = v193;
            double v218 = *((double *)v217 + 1);
            *((double *)v217 + 1) = v213;
            double v523 = v218;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v217);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            v195 = &v523;
            goto LABEL_75;
          case 10:
            v219 = (uint64_t *)*((unsigned __int8 *)a2 + 780);
            v520[0] = 5;
            v521 = v219;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v520);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v520);
            v220 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPostProcReverb");
            v221 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v220, "mReverbProcIndex");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v520);
            int v222 = *v221;
            char *v221 = 5;
            v520[0] = v222;
            v223 = (uint64_t *)*((void *)v221 + 1);
            *((void *)v221 + 1) = v219;
            v521 = v223;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v221);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v520);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v521, v222);
            uint64_t v9 = v465;
            if (*((unsigned char *)a2 + 780) != 1) {
              break;
            }
            v224 = (uint64_t *)*((unsigned __int8 *)a2 + 781);
            v518[0] = 4;
            v519 = v224;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v518);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v518);
            v225 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPostProcReverb");
            v226 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v225, "mEarlyReflectionTimeProvided");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v518);
            int v227 = *v226;
            char *v226 = 4;
            v518[0] = v227;
            v228 = (uint64_t *)*((void *)v226 + 1);
            *((void *)v226 + 1) = v224;
            v519 = v228;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v226);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v518);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v519, v227);
            uint64_t v9 = v465;
            if (!*((unsigned char *)a2 + 781)) {
              break;
            }
            double v229 = a2[196];
            v516[0] = 7;
            double v517 = v229;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v516);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v516);
            v230 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPostProcReverb");
            v231 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v230, "mEarlyReflectionTime");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v516);
            int v193 = *v231;
            char *v231 = 7;
            v516[0] = v193;
            double v232 = *((double *)v231 + 1);
            *((double *)v231 + 1) = v229;
            double v517 = v232;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v231);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v516);
            v195 = &v517;
            goto LABEL_75;
          case 11:
            v233 = (uint64_t *)*((unsigned __int8 *)a2 + 792);
            v514[0] = 5;
            v515 = v233;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            v234 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
            v235 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v234, "mAuSMProcIndex");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            int v236 = *v235;
            char *v235 = 5;
            v514[0] = v236;
            v237 = (uint64_t *)*((void *)v235 + 1);
            *((void *)v235 + 1) = v233;
            v515 = v237;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v235);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v515, v236);
            uint64_t v9 = v465;
            switch(*((unsigned char *)a2 + 792))
            {
              case 1:
                uint64_t v238 = *((unsigned __int16 *)a2 + 397);
                v512[0] = 5;
                uint64_t v513 = v238;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
                v239 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v240 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v239, "mSourceType");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
                int v193 = *v240;
                char *v240 = 5;
                v512[0] = v193;
                uint64_t v241 = *((void *)v240 + 1);
                *((void *)v240 + 1) = v238;
                uint64_t v513 = v241;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v240);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
                v195 = (double *)&v513;
                goto LABEL_75;
              case 2:
                v401 = (uint64_t *)*((unsigned __int8 *)a2 + 796);
                v510[0] = 5;
                v511 = v401;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
                v402 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v403 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v402, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
                int v404 = *v403;
                char *v403 = 5;
                v510[0] = v404;
                v405 = (uint64_t *)*((void *)v403 + 1);
                *((void *)v403 + 1) = v401;
                v511 = v405;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v403);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v511, v404);
                v406 = (uint64_t *)*((unsigned __int16 *)a2 + 399);
                v508[0] = 5;
                v509 = v406;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v508);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v508);
                v407 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v408 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v407, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v508);
                int v409 = *v408;
                char *v408 = 5;
                v508[0] = v409;
                v410 = (uint64_t *)*((void *)v408 + 1);
                *((void *)v408 + 1) = v406;
                v509 = v410;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v408);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v508);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v509, v409);
                v411 = (uint64_t *)*((unsigned __int16 *)a2 + 400);
                v506[0] = 5;
                v507 = v411;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v506);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v506);
                v412 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v413 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v412, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v506);
                int v414 = *v413;
                char *v413 = 5;
                v506[0] = v414;
                v415 = (uint64_t *)*((void *)v413 + 1);
                *((void *)v413 + 1) = v411;
                v507 = v415;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v413);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v506);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v507, v414);
                uint64_t v416 = *((unsigned __int16 *)a2 + 401);
                v504[0] = 5;
                uint64_t v505 = v416;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v504);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v504);
                v417 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v418 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v417, "mFallbackCustomIR");
                v419 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v418, "mSourceType");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v504);
                int v193 = *v419;
                char *v419 = 5;
                v504[0] = v193;
                uint64_t v420 = *((void *)v419 + 1);
                *((void *)v419 + 1) = v416;
                uint64_t v505 = v420;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v419);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v504);
                v195 = (double *)&v505;
                goto LABEL_75;
              case 3:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v502, "dump not implemented");
                v421 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v422 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v421, "mParametricRadiationPattern");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v502);
                char v423 = *v422;
                char *v422 = v502[0];
                v502[0] = v423;
                uint64_t v424 = *((void *)v422 + 1);
                *((void *)v422 + 1) = v503;
                uint64_t v503 = v424;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v422);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v502);
                int v288 = v502[0];
                int v73 = (double *)&v503;
                goto LABEL_63;
              case 4:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v500, "dump not implemented");
                v425 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v426 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v425, "mHOADirectivityModel");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v500);
                char v427 = *v426;
                char *v426 = v500[0];
                v500[0] = v427;
                uint64_t v428 = *((void *)v426 + 1);
                *((void *)v426 + 1) = v501;
                uint64_t v501 = v428;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v426);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v500);
                int v288 = v500[0];
                int v73 = (double *)&v501;
                goto LABEL_63;
              default:
                goto LABEL_76;
            }
            break;
          case 12:
            v242 = (uint64_t *)*((unsigned __int8 *)a2 + 1024);
            v498[0] = 4;
            v499 = v242;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v498);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v498);
            v243 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHPVirtualize");
            v244 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v243, "mBypass");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v498);
            int v245 = *v244;
            char *v244 = 4;
            v498[0] = v245;
            v246 = (uint64_t *)*((void *)v244 + 1);
            *((void *)v244 + 1) = v242;
            v499 = v246;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v244);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v498);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v499, v245);
            v247 = (uint64_t *)*((unsigned __int8 *)a2 + 1025);
            v496[0] = 4;
            v497 = v247;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v496);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v496);
            v248 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHPVirtualize");
            v249 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v248, "mHasDRR");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v496);
            int v250 = *v249;
            char *v249 = 4;
            v496[0] = v250;
            v251 = (uint64_t *)*((void *)v249 + 1);
            *((void *)v249 + 1) = v247;
            v497 = v251;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v249);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v496);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v497, v250);
            uint64_t v9 = v465;
            if (!*((unsigned char *)a2 + 1025)) {
              break;
            }
            double v252 = a2[257];
            v494[0] = 7;
            double v495 = v252;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v494);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v494);
            v253 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHPVirtualize");
            v254 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v253, "mDRR");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v494);
            int v193 = *v254;
            char *v254 = 7;
            v494[0] = v193;
            double v255 = *((double *)v254 + 1);
            *((double *)v254 + 1) = v252;
            double v495 = v255;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v494);
            v195 = &v495;
            goto LABEL_75;
          case 13:
            uint64_t v256 = *((unsigned __int8 *)a2 + 1032);
            v492[0] = 4;
            uint64_t v493 = v256;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v492);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v492);
            v257 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHeadLock");
            v258 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v257, "mHeadLocked");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v492);
            int v193 = *v258;
            char *v258 = 4;
            v492[0] = v193;
            uint64_t v259 = *((void *)v258 + 1);
            *((void *)v258 + 1) = v256;
            uint64_t v493 = v259;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v258);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v492);
            v195 = (double *)&v493;
            goto LABEL_75;
          case 14:
            uint64_t v260 = *((unsigned __int8 *)a2 + 1035);
            v490[0] = 4;
            uint64_t v491 = v260;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
            v261 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mParallax");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
            int v193 = *v261;
            char *v261 = 4;
            v490[0] = v193;
            uint64_t v262 = *((void *)v261 + 1);
            *((void *)v261 + 1) = v260;
            uint64_t v491 = v262;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
            v195 = (double *)&v491;
            goto LABEL_75;
          case 15:
            uint64_t v263 = *((unsigned __int8 *)a2 + 1036);
            v488[0] = 5;
            uint64_t v489 = v263;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
            v264 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPreferredDoF");
            v265 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v264, "mDoFIndex");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
            int v193 = *v265;
            char *v265 = 5;
            v488[0] = v193;
            uint64_t v266 = *((void *)v265 + 1);
            *((void *)v265 + 1) = v263;
            uint64_t v489 = v266;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v265);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
            v195 = (double *)&v489;
            goto LABEL_75;
          case 16:
            double v267 = a2[260];
            v484[0] = 7;
            double v485 = v267;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
            v268 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mFieldOfView");
            v269 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v268, "mAzimuth");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
            int v193 = *v269;
            char *v269 = 7;
            v484[0] = v193;
            double v270 = *((double *)v269 + 1);
            *((double *)v269 + 1) = v267;
            double v485 = v270;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v269);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
            v195 = &v485;
            goto LABEL_75;
          case 17:
            v271 = (uint64_t *)*((unsigned __int8 *)a2 + 1044);
            v560[0] = 4;
            v561 = v271;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v560);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v560);
            v272 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
            v273 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v272, "mIsZoneDefined");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v560);
            int v274 = *v273;
            char *v273 = 4;
            v560[0] = v274;
            v275 = (uint64_t *)*((void *)v273 + 1);
            *((void *)v273 + 1) = v271;
            v561 = v275;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v273);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v560);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v561, v274);
            uint64_t v9 = v465;
            if (!*((unsigned char *)a2 + 1044)) {
              break;
            }
            v276 = (uint64_t *)*((unsigned __int8 *)a2 + 1045);
            v558[0] = 4;
            v559 = v276;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v558);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v558);
            v277 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
            v278 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v277, "mUsePreDefinedZone");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v558);
            int v279 = *v278;
            char *v278 = 4;
            v558[0] = v279;
            v280 = (uint64_t *)*((void *)v278 + 1);
            *((void *)v278 + 1) = v276;
            v559 = v280;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v278);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v558);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v559, v279);
            if (*((unsigned char *)a2 + 1045))
            {
              uint64_t v281 = *((unsigned __int8 *)a2 + 1047);
              v556[0] = 5;
              uint64_t v557 = v281;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v556);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v556);
              v282 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
              v283 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v282, "mZoneIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v556);
              int v193 = *v283;
              char *v283 = 5;
              v556[0] = v193;
              uint64_t v284 = *((void *)v283 + 1);
              *((void *)v283 + 1) = v281;
              uint64_t v557 = v284;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v283);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v556);
              v195 = (double *)&v557;
            }
            else
            {
              v361 = (uint64_t *)*((unsigned __int8 *)a2 + 1046);
              v554[0] = 4;
              v555 = v361;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
              v362 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
              v363 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v362, "mIsCartesian");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
              int v364 = *v363;
              char *v363 = 4;
              v554[0] = v364;
              v365 = (uint64_t *)*((void *)v363 + 1);
              *((void *)v363 + 1) = v361;
              v555 = v365;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v363);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v555, v364);
              if (*((unsigned char *)a2 + 1046))
              {
                double v366 = a2[262];
                v552[0] = 7;
                double v553 = v366;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v552);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v552);
                v367 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v368 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v367, "mZone");
                v369 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v368, "mMinX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v552);
                int v370 = *v369;
                char *v369 = 7;
                v552[0] = v370;
                v371 = *((uint64_t **)v369 + 1);
                *((double *)v369 + 1) = v366;
                double v553 = *(double *)&v371;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v369);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v552);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v553, v370);
                double v372 = a2[263];
                v550[0] = 7;
                double v551 = v372;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                v373 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v374 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v373, "mZone");
                v375 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v374, "mMaxX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                int v376 = *v375;
                char *v375 = 7;
                v550[0] = v376;
                v377 = *((uint64_t **)v375 + 1);
                *((double *)v375 + 1) = v372;
                double v551 = *(double *)&v377;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v375);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v551, v376);
                double v378 = a2[264];
                v548[0] = 7;
                double v549 = v378;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v548);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v548);
                v379 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v380 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v379, "mZone");
                v381 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v380, "mMinY");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v548);
                int v382 = *v381;
                char *v381 = 7;
                v548[0] = v382;
                v383 = *((uint64_t **)v381 + 1);
                *((double *)v381 + 1) = v378;
                double v549 = *(double *)&v383;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v381);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v548);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v549, v382);
                double v384 = a2[265];
                v546[0] = 7;
                double v547 = v384;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v546);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v546);
                v385 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v386 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v385, "mZone");
                v387 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v386, "mMaxY");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v546);
                int v388 = *v387;
                char *v387 = 7;
                v546[0] = v388;
                v389 = *((uint64_t **)v387 + 1);
                *((double *)v387 + 1) = v384;
                double v547 = *(double *)&v389;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v387);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v546);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v547, v388);
                double v390 = a2[266];
                v544[0] = 7;
                double v545 = v390;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v544);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v544);
                v391 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v392 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v391, "mZone");
                v393 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v392, "mMinZ");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v544);
                int v394 = *v393;
                char *v393 = 7;
                v544[0] = v394;
                v395 = *((uint64_t **)v393 + 1);
                *((double *)v393 + 1) = v390;
                double v545 = *(double *)&v395;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v393);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v544);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v545, v394);
                double v396 = a2[267];
                v542[0] = 7;
                double v543 = v396;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                v397 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v398 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v397, "mZone");
                v399 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v398, "mMaxZ");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                int v193 = *v399;
                char *v399 = 7;
                v542[0] = v193;
                double v400 = *((double *)v399 + 1);
                *((double *)v399 + 1) = v396;
                double v543 = v400;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                v195 = &v543;
              }
              else
              {
                double v429 = a2[268];
                v540[0] = 7;
                double v541 = v429;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v540);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v540);
                v430 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v431 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v430, "mZone");
                v432 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v431, "mMinAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v540);
                int v433 = *v432;
                char *v432 = 7;
                v540[0] = v433;
                v434 = *((uint64_t **)v432 + 1);
                *((double *)v432 + 1) = v429;
                double v541 = *(double *)&v434;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v432);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v540);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v541, v433);
                double v435 = a2[269];
                v538[0] = 7;
                double v539 = v435;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                v436 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v437 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v436, "mZone");
                v438 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v437, "mMaxAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                int v439 = *v438;
                char *v438 = 7;
                v538[0] = v439;
                v440 = *((uint64_t **)v438 + 1);
                *((double *)v438 + 1) = v435;
                double v539 = *(double *)&v440;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v438);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v539, v439);
                double v441 = a2[270];
                v536[0] = 7;
                double v537 = v441;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v536);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v536);
                v442 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v443 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v442, "mZone");
                v444 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v443, "mMinElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v536);
                int v445 = *v444;
                char *v444 = 7;
                v536[0] = v445;
                v446 = *((uint64_t **)v444 + 1);
                *((double *)v444 + 1) = v441;
                double v537 = *(double *)&v446;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v444);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v536);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v537, v445);
                double v447 = a2[271];
                v534[0] = 7;
                double v535 = v447;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v534);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v534);
                v448 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v449 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v448, "mZone");
                v450 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v449, "mMaxElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v534);
                int v451 = *v450;
                char *v450 = 7;
                v534[0] = v451;
                v452 = *((uint64_t **)v450 + 1);
                *((double *)v450 + 1) = v447;
                double v535 = *(double *)&v452;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v450);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v534);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v535, v451);
                double v453 = a2[272];
                v532[0] = 7;
                double v533 = v453;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v532);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v532);
                v454 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v455 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v454, "mZone");
                v456 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v455, "mMinDistance");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v532);
                int v457 = *v456;
                char *v456 = 7;
                v532[0] = v457;
                v458 = *((uint64_t **)v456 + 1);
                *((double *)v456 + 1) = v453;
                double v533 = *(double *)&v458;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v456);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v532);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v533, v457);
                double v459 = a2[273];
                v530[0] = 7;
                double v531 = v459;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
                v460 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v461 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v460, "mZone");
                v462 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v461, "mMaxDistance");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
                int v193 = *v462;
                char *v462 = 7;
                v530[0] = v193;
                double v463 = *((double *)v462 + 1);
                *((double *)v462 + 1) = v459;
                double v531 = v463;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v462);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
                v195 = &v531;
              }
            }
LABEL_75:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v195, v193);
            uint64_t v9 = v465;
            break;
          case 18:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v482, "dump not implemented");
            v285 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOA_Origin");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v482);
            char v286 = *v285;
            char *v285 = v482[0];
            v482[0] = v286;
            uint64_t v287 = *((void *)v285 + 1);
            *((void *)v285 + 1) = v483;
            uint64_t v483 = v287;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v285);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v482);
            int v288 = v482[0];
            int v73 = (double *)&v483;
            goto LABEL_63;
          case 19:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v480, "dump not implemented");
            v289 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOA_Radius");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v480);
            char v290 = *v289;
            char *v289 = v480[0];
            v480[0] = v290;
            uint64_t v291 = *((void *)v289 + 1);
            *((void *)v289 + 1) = v481;
            uint64_t v481 = v291;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v289);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v480);
            int v288 = v480[0];
            int v73 = (double *)&v481;
            goto LABEL_63;
          case 20:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v478, "dump not implemented");
            v292 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOA_Rotation");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v478);
            char v293 = *v292;
            char *v292 = v478[0];
            v478[0] = v293;
            uint64_t v294 = *((void *)v292 + 1);
            *((void *)v292 + 1) = v479;
            uint64_t v479 = v294;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v292);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v478);
            int v288 = v478[0];
            int v73 = (double *)&v479;
            goto LABEL_63;
          case 21:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v476, "dump not implemented");
            v295 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOA_InteriorOrExterior");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v476);
            char v296 = *v295;
            char *v295 = v476[0];
            v476[0] = v296;
            uint64_t v297 = *((void *)v295 + 1);
            *((void *)v295 + 1) = v477;
            uint64_t v477 = v297;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v295);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v476);
            int v288 = v476[0];
            int v73 = (double *)&v477;
            goto LABEL_63;
          case 22:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v474, "dump not implemented");
            v298 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOARenderingMatrix");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v474);
            char v299 = *v298;
            char *v298 = v474[0];
            v474[0] = v299;
            uint64_t v300 = *((void *)v298 + 1);
            *((void *)v298 + 1) = v475;
            uint64_t v475 = v300;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v298);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v474);
            int v288 = v474[0];
            int v73 = (double *)&v475;
            goto LABEL_63;
          case 23:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v472, "dump not implemented");
            v301 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mNFCRefDist");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v472);
            char v302 = *v301;
            char *v301 = v472[0];
            v472[0] = v302;
            uint64_t v303 = *((void *)v301 + 1);
            *((void *)v301 + 1) = v473;
            uint64_t v473 = v303;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v301);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v472);
            int v288 = v472[0];
            int v73 = (double *)&v473;
            goto LABEL_63;
          case 24:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v470, "dump not implemented");
            v304 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPropagationDelay");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v470);
            char v305 = *v304;
            char *v304 = v470[0];
            v470[0] = v305;
            uint64_t v306 = *((void *)v304 + 1);
            *((void *)v304 + 1) = v471;
            uint64_t v471 = v306;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v304);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v470);
            int v288 = v470[0];
            int v73 = (double *)&v471;
LABEL_63:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v73, v288);
            break;
          default:
            std::to_string(&v468, v14);
            v307 = std::string::insert(&v468, 0, "Unknown parameter id ", 0x15uLL);
            std::string v469 = *v307;
            v307->__r_.__value_.__l.__size_ = 0;
            v307->__r_.__value_.__r.__words[2] = 0;
            v307->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v468.__r_.__value_.__l.__data_);
            }
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v466, "not implemented");
            int v308 = SHIBYTE(v469.__r_.__value_.__r.__words[2]);
            v309 = (void *)v469.__r_.__value_.__r.__words[0];
            if ((v469.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v310 = &v469;
            }
            else {
              v310 = (std::string *)v469.__r_.__value_.__r.__words[0];
            }
            v311 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, (char *)v310);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v466);
            char v312 = *v311;
            char *v311 = v466[0];
            v466[0] = v312;
            v313 = (uint64_t *)*((void *)v311 + 1);
            *((void *)v311 + 1) = v467;
            v467 = v313;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v311);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v466);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v467, v466[0]);
            if (v308 < 0) {
              operator delete(v309);
            }
            break;
        }
LABEL_76:
        ++v13;
      }
      while ((uint64_t *)v13 != v9);
    }
  }
}

void sub_19003988C(_Unwind_Exception *a1)
{
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::object or m_value.object != nullptr";
      int v2 = 1220;
      break;
    case 2:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::array or m_value.array != nullptr";
      int v2 = 1221;
      break;
    case 3:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::string or m_value.string != nullptr";
      int v2 = 1222;
      break;
    case 8:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      int v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    id v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *id v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v12 = *a1;
    if (v12 > 9) {
      unint64_t v13 = "number";
    }
    else {
      unint64_t v13 = off_1E56876F8[v12];
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, v13);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "cannot use operator[] with a string argument with ", &v14);
    nlohmann::detail::type_error::create((uint64_t)exception, 305, (uint64_t)&__p);
  }
  uint64_t v6 = (uint64_t **)*((void *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  int v7 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v6, &v14, &__p);
  id v8 = (char *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (uint64_t **)v7;
    id v8 = (char *)operator new(0x48uLL);
    *(std::string *)(v8 + 32) = __p;
    memset(&__p, 0, sizeof(__p));
    v8[56] = 0;
    *((void *)v8 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v8 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v8 + 56));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v8 + 56;
}

void sub_19003A000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v30, (*a1)[2]);
    uint64_t v4 = (uint64_t)(*a1 + 1);
    id v5 = (void *)**a1;
    if (v5 != (void *)v4)
    {
      unint64_t v6 = v31;
      do
      {
        if (v6 >= v32)
        {
          unint64_t v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v30, (uint64_t)(v5 + 7));
        }
        else
        {
          *(unsigned char *)unint64_t v6 = *((unsigned char *)v5 + 56);
          *(void *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((unsigned char *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        unint64_t v31 = v6;
        int v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            id v8 = v7;
            int v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            id v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            id v5 = v8;
          }
          while (!v9);
        }
        id v5 = v8;
      }
      while (v8 != (void *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v30, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(**a1, (*a1)[1], &v30);
  }
  for (unint64_t i = v31; v30 != v31; unint64_t i = v31)
  {
    unsigned int v13 = *(unsigned __int8 *)(i - 16);
    uint64_t v11 = i - 16;
    uint64_t v12 = v13;
    LOBYTE(v28) = v13;
    std::string v14 = *(uint64_t **)(v11 + 8);
    double v29 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(unsigned char *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28);
    unint64_t v15 = v31;
    unint64_t v16 = v31 - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v31 - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v15 - 8, *(unsigned __int8 *)(v15 - 16));
    unint64_t v31 = v16;
    if (v13 == 1)
    {
      uint64_t v22 = *v14;
      if ((uint64_t *)*v14 == v14 + 1)
      {
        uint64_t v12 = 1;
      }
      else
      {
        do
        {
          if (v16 >= v32)
          {
            unint64_t v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v30, v22 + 56);
          }
          else
          {
            *(unsigned char *)unint64_t v16 = *(unsigned char *)(v22 + 56);
            *(void *)(v16 + 8) = *(void *)(v22 + 64);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v22 + 56);
            *(unsigned char *)(v22 + 56) = 0;
            *(void *)(v22 + 64) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          unint64_t v31 = v16;
          uint64_t v23 = *(uint64_t **)(v22 + 8);
          if (v23)
          {
            do
            {
              uint64_t v24 = v23;
              uint64_t v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              uint64_t v24 = *(uint64_t **)(v22 + 16);
              BOOL v9 = *v24 == v22;
              uint64_t v22 = (uint64_t)v24;
            }
            while (!v9);
          }
          uint64_t v22 = (uint64_t)v24;
        }
        while (v24 != v14 + 1);
        std::string v14 = v29;
        uint64_t v12 = v28;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((char *)v14[1]);
      *std::string v14 = (uint64_t)(v14 + 1);
      void v14[2] = 0;
      v14[1] = 0;
    }
    else if (v12 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(*v14, v14[1], &v30);
      uint64_t v18 = *v14;
      uint64_t v17 = v14[1];
      if (v17 != *v14)
      {
        uint64_t v19 = v17 - 16;
        char v20 = (unsigned __int8 *)(v17 - 16);
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
          unsigned int v21 = *v20;
          v20 -= 16;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19 + 8, v21);
          BOOL v9 = v19 == v18;
          uint64_t v19 = (uint64_t)v20;
        }
        while (!v9);
      }
      v14[1] = v18;
      uint64_t v12 = 2;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v12);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((char *)(*a1)[1]);
      goto LABEL_45;
    case 1:
      unsigned int v28 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v28);
      goto LABEL_45;
    case 2:
      int v25 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      int v26 = (void *)*v25;
      break;
    case 7:
      int v25 = *a1;
      int v27 = (void *)**a1;
      if (!v27) {
        goto LABEL_46;
      }
      v25[1] = (uint64_t)v27;
      int v26 = v27;
      break;
    default:
      goto LABEL_47;
  }
  operator delete(v26);
LABEL_45:
  int v25 = *a1;
LABEL_46:
  operator delete(v25);
LABEL_47:
  unsigned int v28 = (void **)&v30;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v28);
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  return a1;
}

unint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, unint64_t a2)
{
  int v3 = a1;
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 2;
    id v5 = operator new(0x18uLL);
    v5[1] = 0;
    v5[2] = 0;
    *id v5 = 0;
    *((void *)v3 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
    int v4 = *v3;
  }
  if (v4 != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v58 = *v3;
    if (v58 > 9) {
      uint64_t v59 = "number";
    }
    else {
      uint64_t v59 = off_1E56876F8[v58];
    }
    std::string::basic_string[abi:ne180100]<0>(&v73, v59);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v70, "cannot use operator[] with a numeric argument with ", &v73);
    nlohmann::detail::type_error::create((uint64_t)exception, 305, (uint64_t)&v70);
  }
  unint64_t v6 = (uint64_t *)*((void *)v3 + 1);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  unint64_t v9 = (v8 - *v6) >> 4;
  if (v9 <= a2)
  {
    unint64_t v10 = a2 - v9 + 1;
    v68[0] = 0;
    int v69 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
    if (a2 - v9 != -1)
    {
      uint64_t v11 = *v6;
      uint64_t v12 = v8 - *v6;
      uint64_t v13 = v12 >> 4;
      unint64_t v14 = *v6 + (v12 & 0xFFFFFFFFFFFFFFF0);
      unsigned int v64 = v6;
      uint64_t v17 = v6[2];
      uint64_t v16 = (uint64_t)(v6 + 2);
      uint64_t v15 = v17;
      unint64_t v18 = *(void *)(v16 - 8);
      if (v10 > (uint64_t)(v17 - v18) >> 4)
      {
        unint64_t v19 = v10 + ((uint64_t)(v18 - v11) >> 4);
        if (v19 >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v15 - v11;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        uint64_t v72 = v16;
        if (v21)
        {
          unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v21);
          uint64_t v23 = a2 - v9 + 1;
        }
        else
        {
          uint64_t v23 = a2 - v9 + 1;
          uint64_t v22 = 0;
        }
        std::string::size_type v48 = v21 + 16 * v13;
        v70.__r_.__value_.__r.__words[0] = v21;
        v70.__r_.__value_.__l.__size_ = v48;
        v70.__r_.__value_.__r.__words[2] = v48;
        unint64_t v71 = v21 + 16 * v22;
        uint64_t v49 = 16 * a2 - 16 * v9 + 16;
        std::string::size_type v50 = v48 + 16 * v23;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v48, (uint64_t)v68);
          v48 += 16;
          v49 -= 16;
        }
        while (v49);
        v70.__r_.__value_.__r.__words[2] = v50;
        v70.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(v16, v14, v14, *v64, *v64, v70.__r_.__value_.__l.__size_, v70.__r_.__value_.__l.__size_);
        uint64_t v51 = v64[1];
        uint64_t v52 = v70.__r_.__value_.__r.__words[2];
        std::string::size_type v75 = v70.__r_.__value_.__r.__words[2];
        std::string::size_type v76 = v70.__r_.__value_.__r.__words[2];
        v73.__r_.__value_.__r.__words[0] = v16;
        v73.__r_.__value_.__l.__size_ = (std::string::size_type)&v75;
        v73.__r_.__value_.__r.__words[2] = (std::string::size_type)&v76;
        while (v14 != v51)
        {
          *(unsigned char *)uint64_t v52 = *(unsigned char *)v14;
          *(void *)(v52 + 8) = *(void *)(v14 + 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
          *(unsigned char *)unint64_t v14 = 0;
          *(void *)(v14 + 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v52);
          uint64_t v52 = v76 + 16;
          v76 += 16;
          v14 += 16;
        }
        char v74 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v73);
        std::string::size_type v53 = *v64;
        uint64_t *v64 = v70.__r_.__value_.__l.__size_;
        v70.__r_.__value_.__r.__words[0] = v53;
        v70.__r_.__value_.__l.__size_ = v53;
        std::string::size_type v54 = v64[1];
        v64[1] = v52;
        v70.__r_.__value_.__r.__words[2] = v54;
        uint64_t v55 = v64[2];
        v64[2] = v71;
        unint64_t v71 = v55;
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v70);
        goto LABEL_42;
      }
      uint64_t v24 = v18 - v14;
      uint64_t v61 = v13;
      if (v10 <= (uint64_t)(v18 - v14) >> 4)
      {
        uint64_t v28 = *(void *)(v16 - 8);
        uint64_t v26 = v10;
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = v24 >> 4;
        uint64_t v66 = v18 + 16 * (v10 - (v24 >> 4));
        uint64_t v27 = 16 * a2 - 16 * (v9 + (v24 >> 4)) + 16;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v18 + v25, (uint64_t)v68);
          v25 += 16;
        }
        while (v27 != v25);
        uint64_t v28 = v66;
        v64[1] = v66;
        if (v18 == v14) {
          goto LABEL_42;
        }
      }
      unint64_t v29 = v14 + 16 * v10;
      unint64_t v60 = v10;
      unint64_t v30 = v28 - 16 * v10;
      uint64_t v31 = v28;
      unint64_t v65 = v30;
      if (v30 < v18)
      {
        unint64_t v32 = v28 - 16 * v10;
        uint64_t v31 = v28;
        do
        {
          *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
          *(void *)(v31 + 8) = *(void *)(v32 + 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v32);
          *(unsigned char *)unint64_t v32 = 0;
          *(void *)(v32 + 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v31);
          v31 += 16;
          v32 += 16;
        }
        while (v32 < v18);
        unint64_t v30 = v65;
      }
      unint64_t v62 = a2;
      id v63 = v3;
      v64[1] = v31;
      uint64_t v67 = v28;
      if (v28 != v29)
      {
        uint64_t v33 = 0;
        uint64_t v34 = (uint64_t)(v28 - v29) >> 4;
        uint64_t v35 = v11 + 16 * v61 + 16 * v34;
        uint64_t v36 = -16 * v34;
        do
        {
          uint64_t v37 = v35 + v33;
          uint64_t v38 = v33 - 16;
          v70.__r_.__value_.__s.__data_[0] = *(unsigned char *)(v35 + v33 - 16);
          std::string::value_type v39 = v70.__r_.__value_.__s.__data_[0];
          v70.__r_.__value_.__l.__size_ = *(void *)(v35 + v33 - 8);
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v33 - 16 + v30);
          *(unsigned char *)(v37 - 16) = 0;
          *(void *)(v37 - 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
          uint64_t v41 = v67 + v33;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
          int v42 = *(unsigned __int8 *)(v41 - 16);
          v41 -= 16;
          *(unsigned char *)uint64_t v41 = v39;
          v70.__r_.__value_.__s.__data_[0] = v42;
          std::string::size_type v43 = *(void *)(v41 + 8);
          *(void *)(v41 + 8) = size;
          v70.__r_.__value_.__l.__size_ = v43;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v41);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v70.__r_.__value_.__l.__size_, v42);
          unint64_t v30 = v65;
          uint64_t v33 = v38;
        }
        while (v36 != v38);
      }
      uint64_t v44 = v68;
      if (v14 <= (unint64_t)v68)
      {
        unint64_t v45 = v60;
        if (v64[1] <= (unint64_t)v68) {
          unint64_t v45 = 0;
        }
        uint64_t v44 = &v68[16 * v45];
      }
      a2 = v62;
      int v3 = v63;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v70, (uint64_t)v44);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
        std::string::value_type v46 = *(unsigned char *)v14;
        *(unsigned char *)unint64_t v14 = v70.__r_.__value_.__s.__data_[0];
        v70.__r_.__value_.__s.__data_[0] = v46;
        std::string::size_type v47 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v70.__r_.__value_.__l.__size_;
        v70.__r_.__value_.__l.__size_ = v47;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v70.__r_.__value_.__l.__size_, v70.__r_.__value_.__s.__data_[0]);
        v14 += 16;
        --v26;
      }
      while (v26);
    }
LABEL_42:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v69, v68[0]);
    uint64_t v7 = **((void **)v3 + 1);
  }
  return v7 + 16 * a2;
}

void sub_19003A95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  int v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_19003AA58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  int v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_19003AAD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::create(uint64_t a1, int a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  std::operator+<char>();
  unint64_t v6 = std::string::append(&v26, ".", 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v25, a2);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v25;
  }
  else {
    uint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = std::string::append(&v27, (const std::string::value_type *)v8, size);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v28, "] ", 2uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    uint64_t v15 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v15 = *(const std::string::value_type **)a3;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(a3 + 8);
  }
  uint64_t v17 = std::string::append(&v22, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t v24 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v23 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v24 >= 0) {
    unint64_t v19 = v23;
  }
  else {
    unint64_t v19 = (void **)v23[0];
  }
  *(void *)a1 = &unk_1EDF9E268;
  *(_DWORD *)(a1 + 8) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const char *)v19);
  *(void *)a1 = &unk_1EDF9E210;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
}

void sub_19003ACEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::exception::~exception(v41);
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::~type_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDF9E268;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDF9E268;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x192FC8940);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDF9E268;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDF9E268;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      unint64_t v9 = *(void **)(a2 + 8);
      uint64_t v4 = (uint64_t)operator new(0x18uLL);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = v4 + 8;
      uint64_t v12 = (void *)*v9;
      unint64_t v10 = v9 + 1;
      long long v11 = v12;
      if (v12 == v10) {
        goto LABEL_37;
      }
      break;
    case 2:
      int64_t v24 = *(uint64_t **)(a2 + 8);
      uint64_t v4 = (uint64_t)operator new(0x18uLL);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      uint64_t v27 = v26 - *v24;
      if (v26 != *v24)
      {
        if (v27 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        std::string v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v27 >> 4);
        *(void *)uint64_t v4 = v28;
        *(void *)(v4 + 8) = v28;
        *(void *)(v4 + 16) = &v28[16 * v29];
        uint64_t v34 = v28;
        uint64_t v35 = v28;
        v32[0] = v4 + 16;
        v32[1] = (uint64_t)&v34;
        unsigned int v32[2] = (uint64_t)&v35;
        unint64_t v30 = v28;
        char v33 = 0;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v30, v25);
          v25 += 16;
          unint64_t v30 = v35 + 16;
          v35 += 16;
        }
        while (v25 != v26);
        char v33 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v32);
        *(void *)(v4 + 8) = v30;
      }
      goto LABEL_37;
    case 3:
      id v5 = *(long long **)(a2 + 8);
      unint64_t v6 = (std::string *)operator new(0x18uLL);
      uint64_t v4 = (uint64_t)v6;
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        v6->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      goto LABEL_37;
    case 4:
      uint64_t v4 = *(unsigned __int8 *)(a2 + 8);
      goto LABEL_37;
    case 5:
    case 6:
    case 7:
      uint64_t v4 = *(void *)(a2 + 8);
      goto LABEL_37;
    case 8:
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v4 = (uint64_t)operator new(0x20uLL);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v4, *(const void **)v8, *(void *)(v8 + 8), *(void *)(v8 + 8) - *(void *)v8);
      *(_WORD *)(v4 + 24) = *(_WORD *)(v8 + 24);
LABEL_37:
      *(void *)(a1 + 8) = v4;
      goto LABEL_38;
    default:
LABEL_38:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
      return a1;
  }
  while (1)
  {
    uint64_t v13 = *(void *)(v4 + 8);
    int v14 = (void *)(v4 + 8);
    if (*(void *)v4 == v4 + 8) {
      goto LABEL_15;
    }
    uint64_t v15 = *(void **)(v4 + 8);
    std::string::size_type v16 = (void *)(v4 + 8);
    if (v13)
    {
      do
      {
        int v14 = v15;
        uint64_t v15 = (void *)v15[1];
      }
      while (v15);
    }
    else
    {
      do
      {
        int v14 = (void *)v16[2];
        BOOL v17 = *v14 == (void)v16;
        std::string::size_type v16 = v14;
      }
      while (v17);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14 + 4, v11 + 4) & 0x80) != 0)
    {
LABEL_15:
      if (!v13)
      {
        v32[0] = v4 + 8;
        long long v18 = (uint64_t **)(v4 + 8);
LABEL_20:
        unint64_t v19 = (char *)operator new(0x48uLL);
        uint64_t v20 = (uint64_t *)v19;
        if (*((char *)v11 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v19 + 32), (const std::string::value_type *)v11[4], v11[5]);
        }
        else
        {
          long long v21 = *((_OWORD *)v11 + 2);
          *((void *)v19 + 6) = v11[6];
          *((_OWORD *)v19 + 2) = v21;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v20 + 7, v11 + 7);
        goto LABEL_24;
      }
      v32[0] = (uint64_t)v14;
      long long v18 = (uint64_t **)(v14 + 1);
    }
    else
    {
      long long v18 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v4, v32, v11 + 4);
    }
    if (!*v18) {
      goto LABEL_20;
    }
LABEL_24:
    std::string v22 = (void *)v11[1];
    if (v22)
    {
      do
      {
        uint64_t v23 = v22;
        std::string v22 = (void *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        uint64_t v23 = (void *)v11[2];
        BOOL v17 = *v23 == (void)v11;
        long long v11 = v23;
      }
      while (!v17);
    }
    long long v11 = v23;
    if (v23 == v10) {
      goto LABEL_37;
    }
  }
}

void sub_19003B228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(i - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i - 8, *(unsigned __int8 *)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v10 = 0;
    do
    {
      *(unsigned char *)(a7 + v10 - 16) = *(unsigned char *)(a3 + v10 - 16);
      *(void *)(a7 + v10 - 8) = *(void *)(a3 + v10 - 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3 + v10 - 16);
      *(unsigned char *)(a3 + v10 - 16) = 0;
      *(void *)(a3 + v10 - 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a7 + v10 - 16);
      v10 -= 16;
    }
    while (a3 + v10 != a5);
    a7 += v10;
  }
  return a7;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = v2 - 16;
      id v5 = (unsigned __int8 *)(v2 - 16);
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
        int v6 = *v5;
        v5 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v4 + 8), v6);
        BOOL v7 = v4 == v3;
        uint64_t v4 = (uint64_t)v5;
      }
      while (!v7);
    }
  }
  return a1;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      BOOL v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }
      while (!v9);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*((void *)a1 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a1 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 64, a1[56]);
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + 56);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a2 + 64), *(unsigned __int8 *)(a2 + 56));
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  id v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        BOOL v7 = v4;
        unsigned int v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        id v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      id v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    BOOL v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    void v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    unint64_t v6 = a3[1];
    do
    {
      if (v6 >= a3[2])
      {
        uint64_t result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a3, v5);
        unint64_t v6 = result;
      }
      else
      {
        *(unsigned char *)unint64_t v6 = *(unsigned char *)v5;
        *(void *)(v6 + 8) = *(void *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(unsigned char *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v6 += 16;
      }
      a3[1] = v6;
      v5 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = a1 + 2;
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 3 > v3) {
    unint64_t v3 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v3;
  }
  v14[4] = v6;
  BOOL v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v8);
  uint64_t v10 = (uint64_t)&v9[16 * v2];
  v14[0] = v9;
  v14[1] = v10;
  v14[3] = &v9[16 * v11];
  *(unsigned char *)uint64_t v10 = *(unsigned char *)a2;
  *(void *)(v10 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  void v14[2] = v10 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void APAC::MetadataJSON(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v3 = v2;
  uint64_t v4 = (unsigned __int16 *)v1;
  uint64_t v6 = v5;
  v2162[0] = 0;
  v2163 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2162);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2162);
  v1731 = v4;
  uint64_t v7 = (uint64_t *)*v4;
  v2160[0] = 5;
  v2161 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2160);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2160);
  unint64_t v8 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  BOOL v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "syncWords");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2160);
  int v10 = *v9;
  *BOOL v9 = 5;
  v2160[0] = v10;
  uint64_t v11 = (uint64_t *)*((void *)v9 + 1);
  *((void *)v9 + 1) = v7;
  v2161 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2160);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2161, v10);
  uint64_t v12 = (uint64_t *)v1731[1];
  v2158[0] = 5;
  v2159 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2158);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2158);
  uint64_t v13 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  int v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "chunkSize");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2158);
  int v15 = *v14;
  *int v14 = 5;
  v2158[0] = v15;
  std::string::size_type v16 = (uint64_t *)*((void *)v14 + 1);
  *((void *)v14 + 1) = v12;
  v2159 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2158);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2159, v15);
  BOOL v17 = (uint64_t *)*((unsigned __int8 *)v1731 + 4);
  v2156[0] = 5;
  v2157 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2156);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2156);
  long long v18 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  unint64_t v19 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "version");
  uint64_t v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "major");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2156);
  int v21 = *v20;
  *uint64_t v20 = 5;
  v2156[0] = v21;
  std::string v22 = (uint64_t *)*((void *)v20 + 1);
  *((void *)v20 + 1) = v17;
  v2157 = v22;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2156);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2157, v21);
  uint64_t v23 = (uint64_t *)*((unsigned __int8 *)v1731 + 5);
  v2154[0] = 5;
  v2155 = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2154);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2154);
  int64_t v24 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  uint64_t v25 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v24, "version");
  uint64_t v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v25, "minor");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2154);
  int v27 = *v26;
  char *v26 = 5;
  v2154[0] = v27;
  std::string v28 = (uint64_t *)*((void *)v26 + 1);
  *((void *)v26 + 1) = v23;
  v2155 = v28;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2154);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2155, v27);
  uint64_t v29 = (uint64_t *)*((unsigned __int8 *)v1731 + 6);
  v2152[0] = 4;
  v2153 = v29;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2152);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2152);
  unint64_t v30 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  uint64_t v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "informationFrame");
  v1695 = v6;
  int v1696 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2152);
  int v32 = *v31;
  *uint64_t v31 = 4;
  v2152[0] = v32;
  char v33 = (uint64_t *)*((void *)v31 + 1);
  *((void *)v31 + 1) = v29;
  v2153 = v33;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2152);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2153, v32);
  uint64_t v34 = (unsigned __int8 *)v1731;
  if (*((unsigned char *)v1731 + 4) != 1 || (int v35 = *((unsigned __int8 *)v1731 + 5), (v35 - 4) <= 0xFFFFFFFC))
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = "unsupported version";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (v35 == 3)
  {
    v1095 = (uint64_t *)*((unsigned __int8 *)v1731 + 1451081);
    v1924[0] = 4;
    v1925 = v1095;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1924);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1924);
    v1096 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
    v1097 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1096, "mRendererMetadataPresent");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1924);
    int v1098 = *v1097;
    char *v1097 = 4;
    v1924[0] = v1098;
    v1099 = (uint64_t *)*((void *)v1097 + 1);
    *((void *)v1097 + 1) = v1095;
    v1925 = v1099;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1097);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1924);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1925, v1098);
    if (!*((unsigned char *)v1731 + 1451081)) {
      goto LABEL_204;
    }
    v1703 = (char *)v1731 + 1451081;
    v1719 = (uint64_t *)(v1731 + 727932);
    if (!*((unsigned char *)v1731 + 6)) {
      goto LABEL_195;
    }
    v1100 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
    v1101 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1100, "mRendererMetadata");
    v1102 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1101, "mGlobalConfig");
    v1103 = (uint64_t *)*((unsigned __int8 *)v1731 + 1451096);
    v1922[0] = 4;
    v1923 = v1103;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1922);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1922);
    v1104 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHasData");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1922);
    int v1105 = *v1104;
    char *v1104 = 4;
    v1922[0] = v1105;
    v1106 = (uint64_t *)*((void *)v1104 + 1);
    *((void *)v1104 + 1) = v1103;
    v1923 = v1106;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1104);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1922);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1923, v1105);
    if (*((unsigned char *)v1731 + 1451096))
    {
      v1107 = (uint64_t *)v1731[725549];
      v1920[0] = 5;
      v1921 = v1107;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1920);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1920);
      v1108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mNumParameters");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1920);
      int v1109 = *v1108;
      char *v1108 = 5;
      v1920[0] = v1109;
      v1110 = (uint64_t *)*((void *)v1108 + 1);
      *((void *)v1108 + 1) = v1107;
      v1921 = v1110;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1108);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1920);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1921, v1109);
      uint64_t v1713 = v1731[725549];
      if (v1731[725549])
      {
        unint64_t v1111 = 0;
        v1112 = (float *)(v1731 + 727788);
        v1113 = (float *)(v1731 + 727598);
        v1728 = v1731 + 725550;
        v1710 = v1731 + 727892;
        v1722 = v1731 + 727898;
        v1729 = (char *)v1731 + 1455255;
        v1732 = (char *)v1731 + 1455445;
        v1698 = (float *)(v34 + 1455268);
        v1715 = v34 + 1455576;
        while (2)
        {
          v1114 = (uint64_t *)v1728[v1111];
          v1918[0] = 5;
          v1919 = v1114;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1918);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1918);
          v1115 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mParamIndexList");
          v1116 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1115, v1111);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1918);
          int v1117 = *v1116;
          unsigned __int8 *v1116 = 5;
          v1918[0] = v1117;
          v1118 = (uint64_t *)*((void *)v1116 + 1);
          *((void *)v1116 + 1) = v1114;
          v1919 = v1118;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1116);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1918);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1919, v1117);
          switch(v1728[v1111])
          {
            case 0u:
              uint64_t v1119 = *(unsigned __int8 *)v1113;
              v1916[0] = 4;
              uint64_t v1917 = v1119;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1916);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1916);
              v1120 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mApplyPostProcReverb");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1916);
              int v1121 = *v1120;
              char *v1120 = 4;
              v1916[0] = v1121;
              uint64_t v1122 = *((void *)v1120 + 1);
              *((void *)v1120 + 1) = v1119;
              uint64_t v1917 = v1122;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1120);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1916);
              v1123 = (uint64_t **)&v1917;
              goto LABEL_144;
            case 1u:
              uint64_t v1264 = *((unsigned __int8 *)v1113 + 1);
              v1914[0] = 4;
              uint64_t v1915 = v1264;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1914);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1914);
              v1265 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mIs6DoF");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1914);
              int v1121 = *v1265;
              char *v1265 = 4;
              v1914[0] = v1121;
              uint64_t v1266 = *((void *)v1265 + 1);
              *((void *)v1265 + 1) = v1264;
              uint64_t v1915 = v1266;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1265);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1914);
              v1123 = (uint64_t **)&v1915;
              goto LABEL_144;
            case 2u:
              uint64_t v1214 = *((unsigned __int8 *)v1113 + 2);
              v1912[0] = 4;
              uint64_t v1913 = v1214;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1912);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1912);
              v1215 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHasSceneRadiationPattern");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1912);
              int v1121 = *v1215;
              char *v1215 = 4;
              v1912[0] = v1121;
              uint64_t v1216 = *((void *)v1215 + 1);
              *((void *)v1215 + 1) = v1214;
              uint64_t v1913 = v1216;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1215);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1912);
              v1123 = (uint64_t **)&v1913;
              goto LABEL_144;
            case 3u:
              uint64_t v1221 = *((unsigned __int8 *)v1113 + 3);
              v1910[0] = 5;
              uint64_t v1911 = v1221;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1910);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1910);
              v1222 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mTargetPlaybackSystemIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1910);
              int v1126 = *v1222;
              char *v1222 = 5;
              v1910[0] = v1126;
              uint64_t v1223 = *((void *)v1222 + 1);
              *((void *)v1222 + 1) = v1221;
              uint64_t v1911 = v1223;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1222);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1910);
              v1128 = (double *)&v1911;
              goto LABEL_156;
            case 4u:
              v1146 = (uint64_t *)*((unsigned __int8 *)v1113 + 6);
              v1908[0] = 5;
              v1909 = v1146;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1908);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1908);
              v1147 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1148 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1147, "mAuthoringToolNameIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1908);
              int v1149 = *v1148;
              char *v1148 = 5;
              v1908[0] = v1149;
              v1150 = (uint64_t *)*((void *)v1148 + 1);
              *((void *)v1148 + 1) = v1146;
              v1909 = v1150;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1148);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1908);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1909, v1149);
              v1151 = (uint64_t *)*((unsigned __int8 *)v1113 + 7);
              v1906[0] = 5;
              v1907 = v1151;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1906);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1906);
              v1152 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1153 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1152, "mAuthoringToolVersion");
              v1154 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1153, "mMajor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1906);
              int v1155 = *v1154;
              char *v1154 = 5;
              v1906[0] = v1155;
              v1156 = (uint64_t *)*((void *)v1154 + 1);
              *((void *)v1154 + 1) = v1151;
              v1907 = v1156;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1154);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1906);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1907, v1155);
              v1157 = (uint64_t *)*((unsigned __int8 *)v1113 + 8);
              v1904[0] = 5;
              v1905 = v1157;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1904);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1904);
              v1158 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1159 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1158, "mAuthoringToolVersion");
              v1160 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1159, "mMinor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1904);
              int v1161 = *v1160;
              char *v1160 = 5;
              v1904[0] = v1161;
              v1162 = (uint64_t *)*((void *)v1160 + 1);
              *((void *)v1160 + 1) = v1157;
              v1905 = v1162;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1160);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1904);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1905, v1161);
              v1163 = (uint64_t *)*((unsigned __int8 *)v1113 + 9);
              v1902[0] = 5;
              v1903 = v1163;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1902);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1902);
              v1164 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1165 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1164, "mAuthoringToolVersion");
              v1166 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1165, "mPatch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1902);
              int v1167 = *v1166;
              char *v1166 = 5;
              v1902[0] = v1167;
              v1168 = (uint64_t *)*((void *)v1166 + 1);
              *((void *)v1166 + 1) = v1163;
              v1903 = v1168;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1166);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1902);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1903, v1167);
              v1169 = (uint64_t *)*((unsigned __int8 *)v1113 + 10);
              v1900[0] = 5;
              v1901 = v1169;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1900);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1900);
              v1170 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1171 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1170, "mRendererNameIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1900);
              int v1172 = *v1171;
              char *v1171 = 5;
              v1900[0] = v1172;
              v1173 = (uint64_t *)*((void *)v1171 + 1);
              *((void *)v1171 + 1) = v1169;
              v1901 = v1173;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1171);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1900);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1901, v1172);
              v1174 = (uint64_t *)*((unsigned __int8 *)v1113 + 11);
              v1898[0] = 5;
              v1899 = v1174;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1898);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1898);
              v1175 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1176 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1175, "mRendererVersion");
              v1177 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1176, "mMajor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1898);
              int v1178 = *v1177;
              char *v1177 = 5;
              v1898[0] = v1178;
              v1179 = (uint64_t *)*((void *)v1177 + 1);
              *((void *)v1177 + 1) = v1174;
              v1899 = v1179;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1177);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1898);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1899, v1178);
              v1180 = (uint64_t *)*((unsigned __int8 *)v1113 + 12);
              v1896[0] = 5;
              v1897 = v1180;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1896);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1896);
              v1181 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1182 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1181, "mRendererVersion");
              v1183 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1182, "mMinor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1896);
              int v1184 = *v1183;
              char *v1183 = 5;
              v1896[0] = v1184;
              v1185 = (uint64_t *)*((void *)v1183 + 1);
              *((void *)v1183 + 1) = v1180;
              v1897 = v1185;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1183);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1896);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1897, v1184);
              uint64_t v1186 = *((unsigned __int8 *)v1113 + 13);
              v1894[0] = 5;
              uint64_t v1895 = v1186;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1894);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1894);
              v1187 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1188 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1187, "mRendererVersion");
              v1189 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1188, "mPatch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1894);
              int v1126 = *v1189;
              char *v1189 = 5;
              v1894[0] = v1126;
              uint64_t v1190 = *((void *)v1189 + 1);
              *((void *)v1189 + 1) = v1186;
              uint64_t v1895 = v1190;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1189);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1894);
              v1128 = (double *)&v1895;
              goto LABEL_156;
            case 5u:
              double v1267 = v1113[4];
              v1892[0] = 7;
              double v1893 = v1267;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1892);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1892);
              v1268 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
              v1269 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1268, "mAspectRatio");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1892);
              int v1270 = *v1269;
              char *v1269 = 7;
              v1892[0] = v1270;
              v1271 = *((uint64_t **)v1269 + 1);
              *((double *)v1269 + 1) = v1267;
              double v1893 = *(double *)&v1271;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1269);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1892);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1893, v1270);
              v1272 = (uint64_t *)*((unsigned __int8 *)v1113 + 20);
              v1890[0] = 4;
              v1891 = v1272;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1890);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1890);
              v1273 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
              v1274 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1273, "mIsCartesian");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1890);
              int v1275 = *v1274;
              char *v1274 = 4;
              v1890[0] = v1275;
              v1276 = (uint64_t *)*((void *)v1274 + 1);
              *((void *)v1274 + 1) = v1272;
              v1891 = v1276;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1274);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1890);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1891, v1275);
              if (*((unsigned char *)v1113 + 20))
              {
                double v1277 = v1113[6];
                v1888[0] = 7;
                double v1889 = v1277;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1888);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1888);
                v1278 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1279 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1278, "mScreenCentrePosition");
                v1280 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1279, "mX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1888);
                int v1281 = *v1280;
                char *v1280 = 7;
                v1888[0] = v1281;
                v1282 = *((uint64_t **)v1280 + 1);
                *((double *)v1280 + 1) = v1277;
                double v1889 = *(double *)&v1282;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1280);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1888);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1889, v1281);
                double v1283 = v1113[7];
                v1886[0] = 7;
                double v1887 = v1283;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1886);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1886);
                v1284 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1285 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1284, "mScreenCentrePosition");
                v1286 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1285, "mY");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1886);
                int v1287 = *v1286;
                char *v1286 = 7;
                v1886[0] = v1287;
                v1288 = *((uint64_t **)v1286 + 1);
                *((double *)v1286 + 1) = v1283;
                double v1887 = *(double *)&v1288;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1286);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1886);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1887, v1287);
                double v1289 = v1113[8];
                v1884[0] = 7;
                double v1885 = v1289;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1884);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1884);
                v1290 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1291 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1290, "mScreenCentrePosition");
                v1292 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1291, "mZ");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1884);
                int v1293 = *v1292;
                char *v1292 = 7;
                v1884[0] = v1293;
                v1294 = *((uint64_t **)v1292 + 1);
                *((double *)v1292 + 1) = v1289;
                double v1885 = *(double *)&v1294;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1292);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1884);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1885, v1293);
                double v1295 = v1113[12];
                v1882[0] = 7;
                double v1883 = v1295;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1882);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1882);
                v1296 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1297 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1296, "mScreenWidth");
                v1298 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1297, "mX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1882);
                int v1126 = *v1298;
                char *v1298 = 7;
                v1882[0] = v1126;
                double v1299 = *((double *)v1298 + 1);
                *((double *)v1298 + 1) = v1295;
                double v1883 = v1299;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1298);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1882);
                v1128 = &v1883;
              }
              else
              {
                double v1438 = v1113[9];
                v1880[0] = 7;
                double v1881 = v1438;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1880);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1880);
                v1439 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1440 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1439, "mScreenCentrePosition");
                v1441 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1440, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1880);
                int v1442 = *v1441;
                char *v1441 = 7;
                v1880[0] = v1442;
                v1443 = *((uint64_t **)v1441 + 1);
                *((double *)v1441 + 1) = v1438;
                double v1881 = *(double *)&v1443;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1441);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1880);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1881, v1442);
                double v1444 = v1113[10];
                v1878[0] = 7;
                double v1879 = v1444;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1878);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1878);
                v1445 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1446 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1445, "mScreenCentrePosition");
                v1447 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1446, "mElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1878);
                int v1448 = *v1447;
                char *v1447 = 7;
                v1878[0] = v1448;
                v1449 = *((uint64_t **)v1447 + 1);
                *((double *)v1447 + 1) = v1444;
                double v1879 = *(double *)&v1449;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1447);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1878);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1879, v1448);
                double v1450 = v1113[11];
                v1876[0] = 7;
                double v1877 = v1450;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1876);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1876);
                v1451 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1452 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1451, "mScreenCentrePosition");
                v1453 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1452, "mRadius");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1876);
                int v1454 = *v1453;
                char *v1453 = 7;
                v1876[0] = v1454;
                v1455 = *((uint64_t **)v1453 + 1);
                *((double *)v1453 + 1) = v1450;
                double v1877 = *(double *)&v1455;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1453);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1876);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1877, v1454);
                double v1456 = v1113[12];
                v1874[0] = 7;
                double v1875 = v1456;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1874);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1874);
                v1457 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1458 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1457, "mScreenWidth");
                v1459 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1458, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1874);
                int v1126 = *v1459;
                char *v1459 = 7;
                v1874[0] = v1126;
                double v1460 = *((double *)v1459 + 1);
                *((double *)v1459 + 1) = v1456;
                double v1875 = v1460;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1459);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1874);
                v1128 = &v1875;
              }
              goto LABEL_156;
            case 6u:
              v1303 = (uint64_t *)*((unsigned __int8 *)v1113 + 56);
              v1872[0] = 5;
              v1873 = v1303;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1872);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1872);
              v1304 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
              v1305 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1304, "mSurroundDownmix");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1872);
              int v1306 = *v1305;
              char *v1305 = 5;
              v1872[0] = v1306;
              v1307 = (uint64_t *)*((void *)v1305 + 1);
              *((void *)v1305 + 1) = v1303;
              v1873 = v1307;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1305);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1872);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1873, v1306);
              v1308 = (uint64_t *)*((unsigned __int8 *)v1113 + 57);
              v1870[0] = 5;
              v1871 = v1308;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1870);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1870);
              v1309 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
              v1310 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1309, "mSurroundToStereoDownmix");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1870);
              int v1311 = *v1310;
              char *v1310 = 5;
              v1870[0] = v1311;
              v1312 = (uint64_t *)*((void *)v1310 + 1);
              *((void *)v1310 + 1) = v1308;
              v1871 = v1312;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1310);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1870);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1871, v1311);
              v1313 = (uint64_t *)*((unsigned __int8 *)v1113 + 58);
              v1868[0] = 5;
              v1869 = v1313;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1868);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1868);
              v1314 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
              v1315 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1314, "mPositionAdjustment");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1868);
              int v1316 = *v1315;
              char *v1315 = 5;
              v1868[0] = v1316;
              v1317 = (uint64_t *)*((void *)v1315 + 1);
              *((void *)v1315 + 1) = v1313;
              v1869 = v1317;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1315);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1868);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1869, v1316);
              unint64_t v1318 = 0;
              v1319 = v1698;
              do
              {
                v1320 = v1113;
                v1321 = (uint64_t *)v1729[v1318];
                v1866[0] = 4;
                v1867 = v1321;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1866);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1866);
                v1322 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                v1323 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1322, "mIsAutoTrim");
                v1324 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1323, v1318);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1866);
                int v1325 = *v1324;
                unsigned __int8 *v1324 = 4;
                v1866[0] = v1325;
                v1326 = (uint64_t *)*((void *)v1324 + 1);
                *((void *)v1324 + 1) = v1321;
                v1867 = v1326;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1324);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1866);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1867, v1325);
                v1113 = v1320;
                if (!v1729[v1318])
                {
                  double v1327 = *(v1319 - 1);
                  v1864[0] = 7;
                  double v1865 = v1327;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1864);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1864);
                  v1328 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1329 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1328, "mMixingGains");
                  v1330 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1329, v1318);
                  v1331 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1330, "mFrontGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1864);
                  int v1332 = *v1331;
                  char *v1331 = 7;
                  v1864[0] = v1332;
                  v1333 = *((uint64_t **)v1331 + 1);
                  *((double *)v1331 + 1) = v1327;
                  double v1865 = *(double *)&v1333;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1331);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1864);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1865, v1332);
                  double v1334 = *v1319;
                  v1862[0] = 7;
                  double v1863 = v1334;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1862);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1862);
                  v1335 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1336 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1335, "mMixingGains");
                  v1337 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1336, v1318);
                  v1338 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1337, "mBackGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1862);
                  int v1339 = *v1338;
                  char *v1338 = 7;
                  v1862[0] = v1339;
                  v1340 = (uint64_t *)*((void *)v1338 + 1);
                  *((double *)v1338 + 1) = v1334;
                  double v1863 = *(double *)&v1340;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1338);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1862);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1863, v1339);
                  double v1341 = v1319[1];
                  v1860[0] = 7;
                  double v1861 = v1341;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1860);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1860);
                  v1342 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1343 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1342, "mMixingGains");
                  v1344 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1343, v1318);
                  v1345 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1344, "mTopGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1860);
                  int v1346 = *v1345;
                  char *v1345 = 7;
                  v1860[0] = v1346;
                  v1347 = *((uint64_t **)v1345 + 1);
                  *((double *)v1345 + 1) = v1341;
                  double v1861 = *(double *)&v1347;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1345);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1860);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1861, v1346);
                  double v1348 = v1319[2];
                  v1858[0] = 7;
                  double v1859 = v1348;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1858);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1858);
                  v1349 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1350 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1349, "mMixingGains");
                  v1351 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1350, v1318);
                  v1352 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1351, "mEarLevelBalance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1858);
                  int v1353 = *v1352;
                  char *v1352 = 7;
                  v1858[0] = v1353;
                  v1354 = *((uint64_t **)v1352 + 1);
                  *((double *)v1352 + 1) = v1348;
                  double v1859 = *(double *)&v1354;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1352);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1858);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1859, v1353);
                  double v1355 = v1319[3];
                  v1856[0] = 7;
                  double v1857 = v1355;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1856);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1856);
                  v1356 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1357 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1356, "mMixingGains");
                  v1358 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1357, v1318);
                  v1359 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1358, "mHeightBalance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1856);
                  int v1360 = *v1359;
                  char *v1359 = 7;
                  v1856[0] = v1360;
                  v1361 = *((uint64_t **)v1359 + 1);
                  *((double *)v1359 + 1) = v1355;
                  double v1857 = *(double *)&v1361;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1359);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1856);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1857, v1360);
                }
                ++v1318;
                v1319 += 5;
              }
              while (v1318 != 9);
              v1362 = (uint64_t *)*((unsigned __int8 *)v1320 + 248);
              v1854[0] = 5;
              v1855 = v1362;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1854);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1854);
              v1363 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
              v1364 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1363, "mNumChannels");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1854);
              int v1365 = *v1364;
              char *v1364 = 5;
              v1854[0] = v1365;
              v1366 = (uint64_t *)*((void *)v1364 + 1);
              *((void *)v1364 + 1) = v1362;
              v1855 = v1366;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1364);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1854);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1855, v1365);
              if (*((unsigned char *)v1320 + 248))
              {
                unint64_t v1367 = 0;
                do
                {
                  v1368 = (uint64_t *)v1732[v1367];
                  v1852[0] = 4;
                  v1853 = v1368;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1852);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1852);
                  v1369 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1370 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1369, "mIsPerChTrimEnabled");
                  v1371 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1370, v1367);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1852);
                  int v1372 = *v1371;
                  unsigned __int8 *v1371 = 4;
                  v1852[0] = v1372;
                  v1373 = (uint64_t *)*((void *)v1371 + 1);
                  *((void *)v1371 + 1) = v1368;
                  v1853 = v1373;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1371);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1852);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1853, v1372);
                  ++v1367;
                }
                while (v1367 < *((unsigned __int8 *)v1320 + 248));
              }
              goto LABEL_158;
            case 7u:
              v1224 = (uint64_t *)*(unsigned __int8 *)v1112;
              v1850[0] = 4;
              v1851 = v1224;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1850);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1850);
              v1225 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
              v1226 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1225, "mIsDirectBinauralization");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1850);
              int v1227 = *v1226;
              char *v1226 = 4;
              v1850[0] = v1227;
              v1228 = (uint64_t *)*((void *)v1226 + 1);
              *((void *)v1226 + 1) = v1224;
              v1851 = v1228;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1226);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1850);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1851, v1227);
              if (*(unsigned char *)v1112)
              {
                v1229 = (uint64_t *)*((unsigned int *)v1112 + 1);
                v1848[0] = 5;
                v1849 = v1229;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1848);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1848);
                v1230 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1231 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1230, "mChannelLayoutTag");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1848);
                int v1232 = *v1231;
                char *v1231 = 5;
                v1848[0] = v1232;
                v1233 = (uint64_t *)*((void *)v1231 + 1);
                *((void *)v1231 + 1) = v1229;
                v1849 = v1233;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1231);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1848);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1849, v1232);
              }
              v1234 = (uint64_t *)*((unsigned __int8 *)v1112 + 8);
              v1846[0] = 5;
              v1847 = v1234;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1846);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1846);
              v1235 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
              v1236 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1235, "mHRTFType");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1846);
              int v1237 = *v1236;
              char *v1236 = 5;
              v1846[0] = v1237;
              v1238 = (uint64_t *)*((void *)v1236 + 1);
              *((void *)v1236 + 1) = v1234;
              v1847 = v1238;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1236);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1846);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1847, v1237);
              int v1239 = *((unsigned __int8 *)v1112 + 8);
              if (v1239 == 1)
              {
                uint64_t v1461 = *((unsigned __int8 *)v1112 + 9);
                v1844[0] = 5;
                uint64_t v1845 = v1461;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1844);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1844);
                v1462 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1463 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1462, "mPredefinedIR_ID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1844);
                int v1126 = *v1463;
                char *v1463 = 5;
                v1844[0] = v1126;
                uint64_t v1464 = *((void *)v1463 + 1);
                *((void *)v1463 + 1) = v1461;
                uint64_t v1845 = v1464;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1463);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1844);
                v1128 = (double *)&v1845;
              }
              else
              {
                if (v1239 != 2) {
                  goto LABEL_158;
                }
                v1240 = (uint64_t *)v1715[9];
                v1842[0] = 5;
                v1843 = v1240;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1842);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1842);
                v1241 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1242 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1241, "mPredefinedIR_ID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1842);
                int v1243 = *v1242;
                char *v1242 = 5;
                v1842[0] = v1243;
                v1244 = (uint64_t *)*((void *)v1242 + 1);
                *((void *)v1242 + 1) = v1240;
                v1843 = v1244;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1242);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1842);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1843, v1243);
                v1245 = (uint64_t *)v1715[14];
                v1840[0] = 5;
                v1841 = v1245;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1840);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1840);
                v1246 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1247 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1246, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1840);
                int v1248 = *v1247;
                char *v1247 = 5;
                v1840[0] = v1248;
                v1249 = (uint64_t *)*((void *)v1247 + 1);
                *((void *)v1247 + 1) = v1245;
                v1841 = v1249;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1247);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1840);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1841, v1248);
                v1250 = (uint64_t *)*((unsigned __int16 *)v1715 + 5);
                v1838[0] = 5;
                v1839 = v1250;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1838);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1838);
                v1251 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1252 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1251, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1838);
                int v1253 = *v1252;
                char *v1252 = 5;
                v1838[0] = v1253;
                v1254 = (uint64_t *)*((void *)v1252 + 1);
                *((void *)v1252 + 1) = v1250;
                v1839 = v1254;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1252);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1838);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1839, v1253);
                v1255 = (uint64_t *)*((unsigned __int16 *)v1715 + 6);
                v1836[0] = 5;
                v1837 = v1255;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1836);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1836);
                v1256 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1257 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1256, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1836);
                int v1258 = *v1257;
                char *v1257 = 5;
                v1836[0] = v1258;
                v1259 = (uint64_t *)*((void *)v1257 + 1);
                *((void *)v1257 + 1) = v1255;
                v1837 = v1259;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1257);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1836);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1837, v1258);
                uint64_t v1260 = v1715[8];
                v1834[0] = 5;
                uint64_t v1835 = v1260;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1834);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1834);
                v1261 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1262 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1261, "mHRTFType");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1834);
                int v1126 = *v1262;
                char *v1262 = 5;
                v1834[0] = v1126;
                uint64_t v1263 = *((void *)v1262 + 1);
                *((void *)v1262 + 1) = v1260;
                uint64_t v1835 = v1263;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1262);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1834);
                v1128 = (double *)&v1835;
              }
LABEL_156:
              int v1220 = v1126;
LABEL_157:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v1128, v1220);
LABEL_158:
              ++v1111;
              v1112 = (float *)v1715;
              if (v1111 == v1713) {
                break;
              }
              continue;
            case 8u:
              v1393 = (uint64_t *)*((unsigned __int8 *)v1112 + 16);
              v1832[0] = 5;
              v1833 = v1393;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1832);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1832);
              v1394 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHCFilter");
              v1395 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1394, "mDataLocationIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1832);
              int v1396 = *v1395;
              char *v1395 = 5;
              v1832[0] = v1396;
              v1397 = (uint64_t *)*((void *)v1395 + 1);
              *((void *)v1395 + 1) = v1393;
              v1833 = v1397;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1395);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1832);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1833, v1396);
              v1398 = (uint64_t *)*((unsigned __int16 *)v1112 + 9);
              v1830[0] = 5;
              v1831 = v1398;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1830);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1830);
              v1399 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHCFilter");
              v1400 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1399, "mCustomData_TableID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1830);
              int v1401 = *v1400;
              char *v1400 = 5;
              v1830[0] = v1401;
              v1402 = (uint64_t *)*((void *)v1400 + 1);
              *((void *)v1400 + 1) = v1398;
              v1831 = v1402;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1400);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1830);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1831, v1401);
              uint64_t v1403 = *((unsigned __int16 *)v1112 + 10);
              v1828[0] = 5;
              uint64_t v1829 = v1403;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1828);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1828);
              v1404 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHCFilter");
              v1405 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1404, "mCustomData_EntryID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1828);
              int v1126 = *v1405;
              char *v1405 = 5;
              v1828[0] = v1126;
              uint64_t v1406 = *((void *)v1405 + 1);
              *((void *)v1405 + 1) = v1403;
              uint64_t v1829 = v1406;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1405);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1828);
              v1128 = (double *)&v1829;
              goto LABEL_156;
            case 9u:
              v1200 = (uint64_t *)*((unsigned __int8 *)v1112 + 24);
              v1826[0] = 5;
              v1827 = v1200;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1826);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1826);
              v1201 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSPAD");
              v1202 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1201, "mDataLocationIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1826);
              int v1203 = *v1202;
              char *v1202 = 5;
              v1826[0] = v1203;
              v1204 = (uint64_t *)*((void *)v1202 + 1);
              *((void *)v1202 + 1) = v1200;
              v1827 = v1204;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1202);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1826);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1827, v1203);
              v1205 = (uint64_t *)*((unsigned __int16 *)v1112 + 13);
              v1824[0] = 5;
              v1825 = v1205;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1824);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1824);
              v1206 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSPAD");
              v1207 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1206, "mCustomData_TableID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1824);
              int v1208 = *v1207;
              char *v1207 = 5;
              v1824[0] = v1208;
              v1209 = (uint64_t *)*((void *)v1207 + 1);
              *((void *)v1207 + 1) = v1205;
              v1825 = v1209;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1207);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1824);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1825, v1208);
              uint64_t v1210 = *((unsigned __int16 *)v1112 + 14);
              v1822[0] = 5;
              uint64_t v1823 = v1210;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1822);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1822);
              v1211 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSPAD");
              v1212 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1211, "mCustomData_EntryID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1822);
              int v1126 = *v1212;
              char *v1212 = 5;
              v1822[0] = v1126;
              uint64_t v1213 = *((void *)v1212 + 1);
              *((void *)v1212 + 1) = v1210;
              uint64_t v1823 = v1213;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1212);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1822);
              v1128 = (double *)&v1823;
              goto LABEL_156;
            case 0xAu:
              v1374 = (uint64_t *)*((unsigned __int8 *)v1112 + 168);
              v1820[0] = 5;
              v1821 = v1374;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1820);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1820);
              v1375 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mDistanceAttenuation");
              v1376 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1375, "mAttnLawIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1820);
              int v1377 = *v1376;
              char *v1376 = 5;
              v1820[0] = v1377;
              v1378 = (uint64_t *)*((void *)v1376 + 1);
              *((void *)v1376 + 1) = v1374;
              v1821 = v1378;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1376);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1820);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1821, v1377);
              double v1379 = v1112[44];
              v1818[0] = 7;
              double v1819 = v1379;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1818);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1818);
              v1380 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mDistanceAttenuation");
              v1381 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1380, "mRefDistance");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1818);
              int v1382 = *v1381;
              char *v1381 = 7;
              v1818[0] = v1382;
              v1383 = *((uint64_t **)v1381 + 1);
              *((double *)v1381 + 1) = v1379;
              double v1819 = *(double *)&v1383;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1381);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1818);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1819, v1382);
              double v1384 = v1112[45];
              v1816[0] = 7;
              double v1817 = v1384;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1816);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1816);
              v1385 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mDistanceAttenuation");
              v1386 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1385, "mMaxDistance");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1816);
              int v1387 = *v1386;
              char *v1386 = 7;
              v1816[0] = v1387;
              v1388 = *((uint64_t **)v1386 + 1);
              *((double *)v1386 + 1) = v1384;
              double v1817 = *(double *)&v1388;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1386);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1816);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1817, v1387);
              uint64_t v1389 = *((unsigned __int8 *)v1112 + 184);
              v1814[0] = 4;
              uint64_t v1815 = v1389;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1814);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1814);
              v1390 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mDistanceAttenuation");
              v1391 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1390, "mAttnNormIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1814);
              int v1121 = *v1391;
              char *v1391 = 4;
              v1814[0] = v1121;
              uint64_t v1392 = *((void *)v1391 + 1);
              *((void *)v1391 + 1) = v1389;
              uint64_t v1815 = v1392;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1391);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1814);
              v1123 = (uint64_t **)&v1815;
LABEL_144:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v1123, v1121);
              goto LABEL_158;
            case 0xBu:
              v1129 = (uint64_t *)*((unsigned __int8 *)v1112 + 188);
              v1812[0] = 4;
              v1813 = v1129;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1812);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1812);
              v1130 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
              v1131 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1130, "mPositionPresent");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1812);
              int v1132 = *v1131;
              char *v1131 = 4;
              v1812[0] = v1132;
              v1133 = (uint64_t *)*((void *)v1131 + 1);
              *((void *)v1131 + 1) = v1129;
              v1813 = v1133;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1131);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1812);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1813, v1132);
              if (*((unsigned char *)v1112 + 188))
              {
                v1134 = (uint64_t *)v1715[189];
                v1810[0] = 4;
                v1811 = v1134;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1810);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1810);
                v1135 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                v1136 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1135, "mIsCartesian");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1810);
                int v1137 = *v1136;
                char *v1136 = 4;
                v1810[0] = v1137;
                v1138 = (uint64_t *)*((void *)v1136 + 1);
                *((void *)v1136 + 1) = v1134;
                v1811 = v1138;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1136);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1810);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1811, v1137);
                if (v1715[189])
                {
                  for (unint64_t i = 0; i != 3; ++i)
                  {
                    double v1140 = *(float *)&v1710[2 * i];
                    v1808[0] = 7;
                    double v1809 = v1140;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1808);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1808);
                    v1141 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                    v1142 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1141, "mCoordinate");
                    v1143 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1142, i);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1808);
                    int v1144 = *v1143;
                    unsigned __int8 *v1143 = 7;
                    v1808[0] = v1144;
                    v1145 = *((uint64_t **)v1143 + 1);
                    *((double *)v1143 + 1) = v1140;
                    double v1809 = *(double *)&v1145;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1143);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1808);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1809, v1144);
                  }
                }
                else
                {
                  double v1465 = *((float *)v1715 + 48);
                  v1806[0] = 7;
                  double v1807 = v1465;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1806);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1806);
                  v1466 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                  v1467 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1466, "mAzimuth");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1806);
                  int v1468 = *v1467;
                  char *v1467 = 7;
                  v1806[0] = v1468;
                  v1469 = *((uint64_t **)v1467 + 1);
                  *((double *)v1467 + 1) = v1465;
                  double v1807 = *(double *)&v1469;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1467);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1806);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1807, v1468);
                  double v1470 = *((float *)v1715 + 49);
                  v1804[0] = 7;
                  double v1805 = v1470;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1804);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1804);
                  v1471 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                  v1472 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1471, "mElevation");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1804);
                  int v1473 = *v1472;
                  char *v1472 = 7;
                  v1804[0] = v1473;
                  v1474 = *((uint64_t **)v1472 + 1);
                  *((double *)v1472 + 1) = v1470;
                  double v1805 = *(double *)&v1474;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1472);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1804);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1805, v1473);
                  double v1475 = *((float *)v1715 + 50);
                  v1802[0] = 7;
                  double v1803 = v1475;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1802);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1802);
                  v1476 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                  v1477 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1476, "mRadius");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1802);
                  int v1478 = *v1477;
                  char *v1477 = 7;
                  v1802[0] = v1478;
                  v1479 = *((uint64_t **)v1477 + 1);
                  *((double *)v1477 + 1) = v1475;
                  double v1803 = *(double *)&v1479;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1477);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1802);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1803, v1478);
                }
              }
              v1480 = (uint64_t *)v1715[204];
              v1800[0] = 4;
              v1801 = v1480;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1800);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1800);
              v1481 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
              v1482 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1481, "mRotationPresent");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1800);
              int v1483 = *v1482;
              char *v1482 = 4;
              v1800[0] = v1483;
              v1484 = (uint64_t *)*((void *)v1482 + 1);
              *((void *)v1482 + 1) = v1480;
              v1801 = v1484;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1482);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1800);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1801, v1483);
              if (v1715[204])
              {
                for (unint64_t j = 0; j != 4; ++j)
                {
                  double v1486 = *(float *)&v1722[2 * j];
                  v1798[0] = 7;
                  double v1799 = v1486;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1798);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1798);
                  v1487 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                  v1488 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1487, "mQuaternion");
                  v1489 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1488, j);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1798);
                  int v1490 = *v1489;
                  unsigned __int8 *v1489 = 7;
                  v1798[0] = v1490;
                  v1491 = *((uint64_t **)v1489 + 1);
                  *((double *)v1489 + 1) = v1486;
                  double v1799 = *(double *)&v1491;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1489);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1798);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1799, v1490);
                }
              }
              goto LABEL_158;
            case 0xCu:
              v1191 = (uint64_t *)*((unsigned __int8 *)v1112 + 236);
              v1796[0] = 4;
              v1797 = v1191;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1796);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1796);
              v1192 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
              v1193 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1192, "mHasPreset");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1796);
              int v1194 = *v1193;
              char *v1193 = 4;
              v1796[0] = v1194;
              v1195 = (uint64_t *)*((void *)v1193 + 1);
              *((void *)v1193 + 1) = v1191;
              v1797 = v1195;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1193);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1796);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1797, v1194);
              if (*((unsigned char *)v1112 + 236))
              {
                uint64_t v1196 = *((unsigned __int16 *)v1112 + 119);
                v1794[0] = 5;
                uint64_t v1795 = v1196;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1794);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1794);
                v1197 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1198 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1197, "mPresetIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1794);
                int v1126 = *v1198;
                char *v1198 = 5;
                v1794[0] = v1126;
                uint64_t v1199 = *((void *)v1198 + 1);
                *((void *)v1198 + 1) = v1196;
                uint64_t v1795 = v1199;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1198);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1794);
                v1128 = (double *)&v1795;
              }
              else
              {
                v1414 = (uint64_t *)*((unsigned __int8 *)v1112 + 240);
                v1792[0] = 5;
                v1793 = v1414;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1792);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1792);
                v1415 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1416 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1415, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1792);
                int v1417 = *v1416;
                char *v1416 = 5;
                v1792[0] = v1417;
                v1418 = (uint64_t *)*((void *)v1416 + 1);
                *((void *)v1416 + 1) = v1414;
                v1793 = v1418;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1416);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1792);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1793, v1417);
                v1419 = (uint64_t *)*((unsigned __int16 *)v1112 + 121);
                v1790[0] = 5;
                v1791 = v1419;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1790);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1790);
                v1420 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1421 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1420, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1790);
                int v1422 = *v1421;
                char *v1421 = 5;
                v1790[0] = v1422;
                v1423 = (uint64_t *)*((void *)v1421 + 1);
                *((void *)v1421 + 1) = v1419;
                v1791 = v1423;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1421);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1790);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1791, v1422);
                v1424 = (uint64_t *)*((unsigned __int16 *)v1112 + 122);
                v1788[0] = 5;
                v1789 = v1424;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1788);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1788);
                v1425 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1426 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1425, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1788);
                int v1427 = *v1426;
                char *v1426 = 5;
                v1788[0] = v1427;
                v1428 = (uint64_t *)*((void *)v1426 + 1);
                *((void *)v1426 + 1) = v1424;
                v1789 = v1428;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1426);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1788);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1789, v1427);
                v1429 = (uint64_t *)*((unsigned __int16 *)v1112 + 123);
                v1786[0] = 5;
                v1787 = v1429;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1786);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1786);
                v1430 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1431 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1430, "mFallbackIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1786);
                int v1432 = *v1431;
                char *v1431 = 5;
                v1786[0] = v1432;
                v1433 = (uint64_t *)*((void *)v1431 + 1);
                *((void *)v1431 + 1) = v1429;
                v1787 = v1433;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1431);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1786);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1787, v1432);
                uint64_t v1434 = *((unsigned int *)v1112 + 62);
                v1784[0] = 5;
                uint64_t v1785 = v1434;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1784);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1784);
                v1435 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1436 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1435, "mDataByteSize");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1784);
                int v1126 = *v1436;
                char *v1436 = 5;
                v1784[0] = v1126;
                uint64_t v1437 = *((void *)v1436 + 1);
                *((void *)v1436 + 1) = v1434;
                uint64_t v1785 = v1437;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1436);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1784);
                v1128 = (double *)&v1785;
              }
              goto LABEL_156;
            case 0xDu:
              uint64_t v1300 = *((unsigned __int8 *)v1113 + 4);
              v1782[0] = 5;
              uint64_t v1783 = v1300;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1782);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1782);
              v1301 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mContentKind");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1782);
              int v1126 = *v1301;
              char *v1301 = 5;
              v1782[0] = v1126;
              uint64_t v1302 = *((void *)v1301 + 1);
              *((void *)v1301 + 1) = v1300;
              uint64_t v1783 = v1302;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1301);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1782);
              v1128 = (double *)&v1783;
              goto LABEL_156;
            case 0xEu:
              uint64_t v1124 = *((unsigned __int8 *)v1113 + 5);
              v1780[0] = 5;
              uint64_t v1781 = v1124;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1780);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1780);
              v1125 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mMaxNumBlocks");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1780);
              int v1126 = *v1125;
              char *v1125 = 5;
              v1780[0] = v1126;
              uint64_t v1127 = *((void *)v1125 + 1);
              *((void *)v1125 + 1) = v1124;
              uint64_t v1781 = v1127;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1125);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1780);
              v1128 = (double *)&v1781;
              goto LABEL_156;
            case 0xFu:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v1778, "dump not implemented");
              v1217 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mChannelBedHeadphoneMetadata");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1778);
              char v1218 = *v1217;
              char *v1217 = v1778[0];
              v1778[0] = v1218;
              uint64_t v1219 = *((void *)v1217 + 1);
              *((void *)v1217 + 1) = v1779;
              uint64_t v1779 = v1219;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1217);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1778);
              int v1220 = v1778[0];
              v1128 = (double *)&v1779;
              goto LABEL_157;
            default:
              std::to_string(&v2084, v1728[v1111]);
              v1407 = std::string::insert(&v2084, 0, "Unknown parameter id ", 0x15uLL);
              std::string v2085 = *v1407;
              v1407->__r_.__value_.__l.__size_ = 0;
              v1407->__r_.__value_.__r.__words[2] = 0;
              v1407->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v2084.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v2084.__r_.__value_.__l.__data_);
              }
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v1776, "not implemented");
              int v1408 = SHIBYTE(v2085.__r_.__value_.__r.__words[2]);
              v1409 = (void *)v2085.__r_.__value_.__r.__words[0];
              if ((v2085.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v1410 = &v2085;
              }
              else {
                v1410 = (std::string *)v2085.__r_.__value_.__r.__words[0];
              }
              v1411 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, (char *)v1410);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1776);
              char v1412 = *v1411;
              char *v1411 = v1776[0];
              v1776[0] = v1412;
              v1413 = (uint64_t *)*((void *)v1411 + 1);
              *((void *)v1411 + 1) = v1777;
              v1777 = v1413;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1411);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1776);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1777, v1776[0]);
              if (v1408 < 0) {
                operator delete(v1409);
              }
              goto LABEL_158;
          }
          break;
        }
      }
    }
    uint64_t v1492 = *v1719;
    unsigned int v1493 = -1431655765 * ((unint64_t)(v1719[1] - *v1719) >> 4);
    unsigned int v1730 = *(unsigned __int16 *)(v1703 + 7);
    if (v1493 >= v1730) {
      unsigned int v1493 = *(unsigned __int16 *)(v1703 + 7);
    }
    if (!v1493)
    {
LABEL_195:
      v1621 = (uint64_t *)*(unsigned __int16 *)(v1703 + 7);
      v1746[0] = 5;
      v1747 = v1621;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1746);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1746);
      v1622 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
      v1623 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1622, "mRendererMetadata");
      v1624 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1623, "mGroupCount");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1746);
      int v1625 = *v1624;
      char *v1624 = 5;
      v1746[0] = v1625;
      v1626 = (uint64_t *)*((void *)v1624 + 1);
      *((void *)v1624 + 1) = v1621;
      v1747 = v1626;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1624);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1746);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1747, v1625);
      uint64_t v1717 = *(unsigned __int16 *)(v1703 + 7);
      if (*(_WORD *)(v1703 + 7))
      {
        unint64_t v1627 = 0;
        uint64_t v1723 = 16;
        do
        {
          uint64_t v1628 = v1719[3];
          v1629 = (unsigned char *)(v1628 + 40200 * v1627);
          v1630 = (uint64_t *)*v1629;
          v1744[0] = 4;
          v1745 = v1630;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1744);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1744);
          v1631 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1632 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1631, "mRendererMetadata");
          v1633 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1632, "mGroupData");
          v1634 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1633, v1627);
          v1635 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1634, "mHasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1744);
          int v1636 = *v1635;
          char *v1635 = 4;
          v1744[0] = v1636;
          v1637 = (uint64_t *)*((void *)v1635 + 1);
          *((void *)v1635 + 1) = v1630;
          v1745 = v1637;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1635);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1744);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1745, v1636);
          if (*v1629)
          {
            v1638 = (uint64_t *)*(unsigned __int16 *)(v1628 + 40200 * v1627 + 2);
            v1742[0] = 5;
            v1743 = v1638;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1742);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1742);
            v1639 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
            v1640 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1639, "mRendererMetadata");
            v1641 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1640, "mGroupData");
            v1642 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1641, v1627);
            v1643 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1642, "mGroupID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1742);
            int v1644 = *v1643;
            char *v1643 = 5;
            v1742[0] = v1644;
            v1645 = (uint64_t *)*((void *)v1643 + 1);
            *((void *)v1643 + 1) = v1638;
            v1743 = v1645;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1643);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1742);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1743, v1644);
            uint64_t v1646 = v1628 + 40200 * v1627;
            v1647 = (uint64_t *)*(unsigned __int8 *)(v1646 + 4);
            v1740[0] = 5;
            v1741 = v1647;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1740);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1740);
            v1648 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
            v1649 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1648, "mRendererMetadata");
            v1650 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1649, "mGroupData");
            v1651 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1650, v1627);
            v1652 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1651, "mNumBlocks");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1740);
            int v1653 = *v1652;
            char *v1652 = 5;
            v1740[0] = v1653;
            v1654 = (uint64_t *)*((void *)v1652 + 1);
            *((void *)v1652 + 1) = v1647;
            v1741 = v1654;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1652);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1740);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1741, v1653);
            uint64_t v1733 = *(unsigned __int8 *)(v1646 + 4);
            if (*(unsigned char *)(v1646 + 4))
            {
              unint64_t v1655 = 0;
              v1656 = (float *)(v1628 + v1723);
              do
              {
                v1657 = (uint64_t *)*((unsigned __int16 *)v1656 - 4);
                v1738[0] = 5;
                v1739 = v1657;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1738);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1738);
                v1658 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                v1659 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1658, "mRendererMetadata");
                v1660 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1659, "mGroupData");
                v1661 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1660, v1627);
                v1662 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1661, "mBlockData");
                v1663 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1662, v1655);
                v1664 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1663, "mRtime");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1738);
                int v1665 = *v1664;
                char *v1664 = 5;
                v1738[0] = v1665;
                v1666 = (uint64_t *)*((void *)v1664 + 1);
                *((void *)v1664 + 1) = v1657;
                v1739 = v1666;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1664);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1738);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1739, v1665);
                v1667 = (uint64_t *)*((unsigned __int8 *)v1656 - 6);
                v1736[0] = 4;
                v1737 = v1667;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1736);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1736);
                v1668 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                v1669 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1668, "mRendererMetadata");
                v1670 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1669, "mGroupData");
                v1671 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1670, v1627);
                v1672 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1671, "mBlockData");
                v1673 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1672, v1655);
                v1674 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1673, "mHasInterpolationLength");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1736);
                int v1675 = *v1674;
                char *v1674 = 4;
                v1736[0] = v1675;
                v1676 = (uint64_t *)*((void *)v1674 + 1);
                *((void *)v1674 + 1) = v1667;
                v1737 = v1676;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1674);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1736);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1737, v1675);
                if (*((unsigned char *)v1656 - 6))
                {
                  v1677 = (uint64_t *)*((unsigned __int16 *)v1656 - 2);
                  v1734[0] = 5;
                  v1735 = v1677;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1734);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1734);
                  v1678 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                  v1679 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1678, "mRendererMetadata");
                  v1680 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1679, "mGroupData");
                  v1681 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1680, v1627);
                  v1682 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1681, "mBlockData");
                  v1683 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1682, v1655);
                  v1684 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1683, "mInterpolationLength");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1734);
                  int v1685 = *v1684;
                  char *v1684 = 5;
                  v1734[0] = v1685;
                  v1686 = (uint64_t *)*((void *)v1684 + 1);
                  *((void *)v1684 + 1) = v1677;
                  v1735 = v1686;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1684);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1734);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1735, v1685);
                }
                v1687 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                v1688 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1687, "mRendererMetadata");
                v1689 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1688, "mGroupData");
                v1690 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1689, v1627);
                v1691 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1690, "mBlockData");
                v1692 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1691, v1655);
                v1693 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1692, "mRendererData");
                APAC::RendererDataJSON(v1693, v1656, 0);
                ++v1655;
                v1656 += 314;
              }
              while (v1733 != v1655);
            }
          }
          ++v1627;
          v1723 += 40200;
        }
        while (v1627 != v1717);
      }
      goto LABEL_204;
    }
    unint64_t v1494 = 0;
    while (1)
    {
      v1495 = (uint64_t *)*(unsigned __int16 *)(v1492 + 48 * v1494);
      v1774[0] = 5;
      v1775 = v1495;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1774);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1774);
      v1496 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
      v1497 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1496, "mRendererMetadata");
      v1498 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1497, "mGroupConfig");
      v1499 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1498, v1494);
      v1500 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1499, "mGroupID");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1774);
      int v1501 = *v1500;
      char *v1500 = 5;
      v1774[0] = v1501;
      v1502 = (uint64_t *)*((void *)v1500 + 1);
      *((void *)v1500 + 1) = v1495;
      v1775 = v1502;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1500);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1774);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1775, v1501);
      uint64_t v1503 = v1492 + 48 * v1494;
      unsigned int v1504 = *(unsigned __int8 *)(v1503 + 2);
      v1772[0] = 4;
      unint64_t v1773 = v1504;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1772);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1772);
      v1505 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
      v1506 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1505, "mRendererMetadata");
      v1507 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1506, "mGroupConfig");
      v1508 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1507, v1494);
      v1509 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1508, "mIsGlobal");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1772);
      int v1510 = *v1509;
      char *v1509 = 4;
      v1772[0] = v1510;
      v1511 = (uint64_t *)*((void *)v1509 + 1);
      *((void *)v1509 + 1) = v1504;
      unint64_t v1773 = (unint64_t)v1511;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1509);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1772);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1773, v1510);
      if (!*(unsigned char *)(v1503 + 2))
      {
        v1512 = (uint64_t *)*(unsigned __int16 *)(v1492 + 48 * v1494 + 4);
        v1770[0] = 5;
        v1771 = v1512;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1770);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1770);
        v1513 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
        v1514 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1513, "mRendererMetadata");
        v1515 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1514, "mGroupConfig");
        v1516 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1515, v1494);
        v1517 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1516, "mASCID");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1770);
        int v1518 = *v1517;
        char *v1517 = 5;
        v1770[0] = v1518;
        v1519 = (uint64_t *)*((void *)v1517 + 1);
        *((void *)v1517 + 1) = v1512;
        v1771 = v1519;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1517);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1770);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1771, v1518);
        uint64_t v1520 = v1492 + 48 * v1494;
        unsigned int v1521 = *(unsigned __int8 *)(v1520 + 3);
        v1768[0] = 4;
        unint64_t v1769 = v1521;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1768);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1768);
        v1522 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
        v1523 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1522, "mRendererMetadata");
        v1524 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1523, "mGroupConfig");
        v1525 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1524, v1494);
        v1526 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1525, "mIsPerASC");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1768);
        int v1527 = *v1526;
        char *v1526 = 4;
        v1768[0] = v1527;
        v1528 = (uint64_t *)*((void *)v1526 + 1);
        *((void *)v1526 + 1) = v1521;
        unint64_t v1769 = (unint64_t)v1528;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1526);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1768);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1769, v1527);
        if (!*(unsigned char *)(v1520 + 3))
        {
          uint64_t v1548 = v1492 + 48 * v1494;
          v1549 = (uint64_t *)*(unsigned __int16 *)(v1548 + 18);
          v1754[0] = 5;
          v1755 = v1549;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1754);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1754);
          v1550 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1551 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1550, "mRendererMetadata");
          v1552 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1551, "mGroupConfig");
          v1553 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1552, v1494);
          v1554 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1553, "mMemberCount");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1754);
          int v1555 = *v1554;
          char *v1554 = 5;
          v1754[0] = v1555;
          v1556 = (uint64_t *)*((void *)v1554 + 1);
          *((void *)v1554 + 1) = v1549;
          v1755 = v1556;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1554);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1754);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1755, v1555);
          unsigned int v1557 = *(unsigned __int16 *)(v1548 + 18);
          unsigned int v1558 = *(unsigned __int8 *)(v1548 + 20);
          v1752[0] = 4;
          unint64_t v1753 = v1558;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1752);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1752);
          v1559 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1560 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1559, "mRendererMetadata");
          v1561 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1560, "mGroupConfig");
          v1562 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1561, v1494);
          v1563 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1562, "mHasConjunctMembers");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1752);
          int v1564 = *v1563;
          char *v1563 = 4;
          v1752[0] = v1564;
          v1565 = (uint64_t *)*((void *)v1563 + 1);
          *((void *)v1563 + 1) = v1558;
          unint64_t v1753 = (unint64_t)v1565;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1563);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1752);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1753, v1564);
          if (!*(unsigned char *)(v1548 + 20))
          {
            uint64_t v1605 = v1492 + 48 * v1494;
            uint64_t v1608 = *(void *)(v1605 + 24);
            v1607 = (uint64_t *)(v1605 + 24);
            uint64_t v1606 = v1608;
            unint64_t v1609 = (unint64_t)(v1607[1] - v1608) >> 1;
            if (v1609 >= v1557) {
              LODWORD(v1609) = v1557;
            }
            if (v1609)
            {
              unint64_t v1610 = 0;
              do
              {
                v1611 = (uint64_t *)*(unsigned __int16 *)(v1606 + 2 * v1610);
                v1748[0] = 5;
                v1749 = v1611;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1748);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1748);
                v1612 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                v1613 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1612, "mRendererMetadata");
                v1614 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1613, "mGroupConfig");
                v1615 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1614, v1494);
                v1616 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1615, "mASCIDList");
                v1617 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1616, v1610);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1748);
                int v1618 = *v1617;
                unsigned __int8 *v1617 = 5;
                v1748[0] = v1618;
                v1619 = (uint64_t *)*((void *)v1617 + 1);
                *((void *)v1617 + 1) = v1611;
                v1749 = v1619;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1617);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1748);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1749, v1618);
                ++v1610;
                uint64_t v1606 = *v1607;
                unint64_t v1620 = (unint64_t)(v1607[1] - *v1607) >> 1;
                if (v1620 >= v1557) {
                  unint64_t v1620 = v1557;
                }
                else {
                  unint64_t v1620 = v1620;
                }
              }
              while (v1610 < v1620);
            }
            goto LABEL_181;
          }
          uint64_t v1566 = *(unsigned __int16 *)(v1492 + 48 * v1494 + 22);
          v1750[0] = 5;
          uint64_t v1751 = v1566;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1750);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1750);
          v1567 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1568 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1567, "mRendererMetadata");
          v1569 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1568, "mGroupConfig");
          v1570 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1569, v1494);
          v1571 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1570, "mStartASCID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1750);
          int v1545 = *v1571;
          char *v1571 = 5;
          v1750[0] = v1545;
          uint64_t v1572 = *((void *)v1571 + 1);
          *((void *)v1571 + 1) = v1566;
          uint64_t v1751 = v1572;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1571);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1750);
          v1547 = (uint64_t **)&v1751;
          goto LABEL_180;
        }
        v1529 = (unsigned __int8 *)(v1492 + 48 * v1494);
        unsigned int v1530 = v1529[6];
        v1529 += 6;
        v1766[0] = 5;
        unint64_t v1767 = v1530;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1766);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1766);
        v1531 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
        v1532 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1531, "mRendererMetadata");
        v1533 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1532, "mGroupConfig");
        v1534 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1533, v1494);
        v1535 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1534, "mASCType");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1766);
        int v1536 = *v1535;
        char *v1535 = 5;
        v1766[0] = v1536;
        v1537 = (uint64_t *)*((void *)v1535 + 1);
        *((void *)v1535 + 1) = v1530;
        unint64_t v1767 = (unint64_t)v1537;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1535);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1766);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1767, v1536);
        int v1538 = *v1529;
        if (!*v1529)
        {
          uint64_t v1597 = *(unsigned __int16 *)(v1492 + 48 * v1494 + 16);
          v1764[0] = 5;
          uint64_t v1765 = v1597;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1764);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1764);
          v1598 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1599 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1598, "mRendererMetadata");
          v1600 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1599, "mGroupConfig");
          v1601 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1600, v1494);
          v1602 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1601, "mChBedID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1764);
          int v1545 = *v1602;
          char *v1602 = 5;
          v1764[0] = v1545;
          uint64_t v1603 = *((void *)v1602 + 1);
          *((void *)v1602 + 1) = v1597;
          uint64_t v1765 = v1603;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1602);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1764);
          v1547 = (uint64_t **)&v1765;
          goto LABEL_180;
        }
        if (v1538 == 1)
        {
          v1573 = (uint64_t *)*(unsigned __int16 *)(v1492 + 48 * v1494 + 8);
          v1762[0] = 5;
          v1763 = v1573;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1762);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1762);
          v1574 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1575 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1574, "mRendererMetadata");
          v1576 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1575, "mGroupConfig");
          v1577 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1576, v1494);
          v1578 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1577, "mObjectID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1762);
          int v1579 = *v1578;
          char *v1578 = 5;
          v1762[0] = v1579;
          v1580 = (uint64_t *)*((void *)v1578 + 1);
          *((void *)v1578 + 1) = v1573;
          v1763 = v1580;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1578);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1762);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1763, v1579);
          uint64_t v1581 = v1492 + 48 * v1494;
          unsigned int v1582 = *(unsigned __int8 *)(v1581 + 10);
          v1760[0] = 4;
          unint64_t v1761 = v1582;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1760);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1760);
          v1583 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1584 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1583, "mRendererMetadata");
          v1585 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1584, "mGroupConfig");
          v1586 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1585, v1494);
          v1587 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1586, "mIsObjectInBed");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1760);
          int v1588 = *v1587;
          char *v1587 = 4;
          v1760[0] = v1588;
          v1589 = (uint64_t *)*((void *)v1587 + 1);
          *((void *)v1587 + 1) = v1582;
          unint64_t v1761 = (unint64_t)v1589;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1587);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1760);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1761, v1588);
          if (*(unsigned char *)(v1581 + 10))
          {
            uint64_t v1590 = *(unsigned __int16 *)(v1492 + 48 * v1494 + 12);
            v1758[0] = 5;
            uint64_t v1759 = v1590;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1758);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1758);
            v1591 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
            v1592 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1591, "mRendererMetadata");
            v1593 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1592, "mGroupConfig");
            v1594 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1593, v1494);
            v1595 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1594, "mBedASCID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1758);
            int v1545 = *v1595;
            char *v1595 = 5;
            v1758[0] = v1545;
            uint64_t v1596 = *((void *)v1595 + 1);
            *((void *)v1595 + 1) = v1590;
            uint64_t v1759 = v1596;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1595);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1758);
            v1547 = (uint64_t **)&v1759;
            goto LABEL_180;
          }
        }
        else if (v1538 == 2)
        {
          uint64_t v1539 = *(unsigned __int16 *)(v1492 + 48 * v1494 + 14);
          v1756[0] = 5;
          uint64_t v1757 = v1539;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1756);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1756);
          v1540 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1541 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1540, "mRendererMetadata");
          v1542 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1541, "mGroupConfig");
          v1543 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1542, v1494);
          v1544 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1543, "mHOAID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1756);
          int v1545 = *v1544;
          char *v1544 = 5;
          v1756[0] = v1545;
          uint64_t v1546 = *((void *)v1544 + 1);
          *((void *)v1544 + 1) = v1539;
          uint64_t v1757 = v1546;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1544);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1756);
          v1547 = (uint64_t **)&v1757;
LABEL_180:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v1547, v1545);
        }
      }
LABEL_181:
      ++v1494;
      uint64_t v1492 = *v1719;
      LODWORD(v1604) = -1431655765 * ((unint64_t)(v1719[1] - *v1719) >> 4);
      if (v1604 >= v1730) {
        unint64_t v1604 = v1730;
      }
      else {
        unint64_t v1604 = v1604;
      }
      if (v1494 >= v1604) {
        goto LABEL_195;
      }
    }
  }
  if (v35 == 2)
  {
    if (*((unsigned char *)v1731 + 6))
    {
      uint64_t v36 = (uint64_t *)*((unsigned __int8 *)v1731 + 8);
      v2150[0] = 4;
      v2151 = v36;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2150);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2150);
      uint64_t v37 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
      uint64_t v38 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v37, "refScreen");
      std::string::value_type v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v38, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2150);
      int v40 = *v39;
      *std::string::value_type v39 = 4;
      v2150[0] = v40;
      uint64_t v41 = (uint64_t *)*((void *)v39 + 1);
      *((void *)v39 + 1) = v36;
      v2151 = v41;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2150);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2151, v40);
      int v42 = (uint64_t *)*((unsigned __int8 *)v1731 + 436);
      v2148[0] = 4;
      v2149 = v42;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2148);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2148);
      std::string::size_type v43 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
      uint64_t v44 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "groupStaticData");
      unint64_t v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v44, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2148);
      int v46 = *v45;
      *unint64_t v45 = 4;
      v2148[0] = v46;
      std::string::size_type v47 = (uint64_t *)*((void *)v45 + 1);
      *((void *)v45 + 1) = v42;
      v2149 = v47;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2148);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2149, v46);
      std::string::size_type v48 = (uint64_t *)*((unsigned __int8 *)v1731 + 27872);
      v2146[0] = 5;
      v2147 = v48;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2146);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2146);
      uint64_t v49 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
      std::string::size_type v50 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v49, "sceneComponentStaticData");
      uint64_t v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v50, "ASCCount");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2146);
      int v52 = *v51;
      char *v51 = 5;
      v2146[0] = v52;
      std::string::size_type v53 = (uint64_t *)*((void *)v51 + 1);
      *((void *)v51 + 1) = v48;
      v2147 = v53;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2146);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2147, v52);
      uint64_t v1702 = *((unsigned __int8 *)v1731 + 27872);
      if (*((unsigned char *)v1731 + 27872))
      {
        unint64_t v54 = 0;
        uint64_t v55 = v1731 + 13978;
        do
        {
          int v56 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
          uint64_t v57 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v56, "sceneComponentStaticData");
          unint64_t v58 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "ASCData");
          uint64_t v59 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v58, v54);
          unint64_t v60 = (uint64_t *)v34[1144 * v54 + 27876];
          v2144[0] = 5;
          v2145 = v60;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2144);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2144);
          uint64_t v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "sceneComponentID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2144);
          int v62 = *v61;
          char *v61 = 5;
          v2144[0] = v62;
          id v63 = (uint64_t *)*((void *)v61 + 1);
          *((void *)v61 + 1) = v60;
          v2145 = v63;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2144);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2145, v62);
          unsigned int v64 = (uint64_t *)v34[1144 * v54 + 27877];
          v2142[0] = 5;
          v2143 = v64;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2142);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2142);
          unint64_t v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "sceneComponentType");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2142);
          int v66 = *v65;
          *unint64_t v65 = 5;
          v2142[0] = v66;
          uint64_t v67 = (uint64_t *)*((void *)v65 + 1);
          *((void *)v65 + 1) = v64;
          v2143 = v67;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2142);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2143, v66);
          double v68 = (uint64_t *)v34[1144 * v54 + 27878];
          v2140[0] = 5;
          v2141 = v68;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2140);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2140);
          int v69 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "startChannelIndex");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2140);
          int v70 = *v69;
          char *v69 = 5;
          v2140[0] = v70;
          unint64_t v71 = (uint64_t *)*((void *)v69 + 1);
          *((void *)v69 + 1) = v68;
          v2141 = v71;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2140);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2141, v70);
          uint64_t v72 = (uint64_t *)v34[1144 * v54 + 27879];
          v2138[0] = 5;
          v2139 = v72;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2138);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2138);
          std::string v73 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "rendererSubType");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2138);
          int v74 = *v73;
          *std::string v73 = 5;
          v2138[0] = v74;
          std::string::size_type v75 = (uint64_t *)*((void *)v73 + 1);
          *((void *)v73 + 1) = v72;
          v2139 = v75;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v73);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2138);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2139, v74);
          std::string::size_type v76 = (uint64_t *)v34[1144 * v54 + 27880];
          v2136[0] = 5;
          v2137 = v76;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2136);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2136);
          double v77 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "rendererVersion");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2136);
          int v78 = *v77;
          *double v77 = 5;
          v2136[0] = v78;
          int v79 = (uint64_t *)*((void *)v77 + 1);
          *((void *)v77 + 1) = v76;
          v2137 = v79;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v77);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2136);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2137, v78);
          int v80 = (uint64_t *)*(unsigned int *)&v34[1144 * v54 + 27884];
          v2134[0] = 5;
          v2135 = v80;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2134);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2134);
          double v81 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "channelLayoutTag");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2134);
          int v82 = *v81;
          char *v81 = 5;
          v2134[0] = v82;
          long long v83 = (uint64_t *)*((void *)v81 + 1);
          *((void *)v81 + 1) = v80;
          v2135 = v83;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v81);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2134);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2135, v82);
          uint64_t v84 = (uint64_t *)v34[1144 * v54 + 27888];
          v2132[0] = 5;
          v2133 = v84;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2132);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2132);
          unsigned int v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "HOAOrder");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2132);
          int v86 = *v85;
          *unsigned int v85 = 5;
          v2132[0] = v86;
          unint64_t v87 = (uint64_t *)*((void *)v85 + 1);
          *((void *)v85 + 1) = v84;
          v2133 = v87;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v85);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2132);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2133, v86);
          double v88 = (uint64_t *)v34[1144 * v54 + 27889];
          v2130[0] = 5;
          v2131 = v88;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2130);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2130);
          long long v89 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "HOAOrdering");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2130);
          int v90 = *v89;
          char *v89 = 5;
          v2130[0] = v90;
          double v91 = (uint64_t *)*((void *)v89 + 1);
          *((void *)v89 + 1) = v88;
          v2131 = v91;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v89);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2130);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2131, v90);
          double v92 = (uint64_t *)v34[1144 * v54 + 27890];
          v2128[0] = 5;
          v2129 = v92;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2128);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2128);
          uint64_t v93 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "HOANormalization");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2128);
          int v94 = *v93;
          char *v93 = 5;
          v2128[0] = v94;
          int v95 = (uint64_t *)*((void *)v93 + 1);
          *((void *)v93 + 1) = v92;
          v2129 = v95;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v93);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2128);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2129, v94);
          unint64_t v1726 = v54;
          id v96 = (uint64_t *)v34[1144 * v54 + 27892];
          v2126[0] = 4;
          v2127 = v96;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2126);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2126);
          uint64_t v97 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "NFCRefDist");
          uint64_t v98 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v97, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2126);
          int v99 = *v98;
          *uint64_t v98 = 4;
          v2126[0] = v99;
          int v100 = (uint64_t *)*((void *)v98 + 1);
          *((void *)v98 + 1) = v96;
          v2127 = v100;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2126);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2127, v99);
          unint64_t v101 = (uint64_t *)v34[1144 * v54 + 27900];
          v2124[0] = 4;
          v2125 = v101;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2124);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2124);
          double v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "screenRef");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2124);
          int v103 = *v102;
          *double v102 = 4;
          v2124[0] = v103;
          id v104 = (uint64_t *)*((void *)v102 + 1);
          *((void *)v102 + 1) = v101;
          v2125 = v104;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2124);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2125, v103);
          uint64_t v105 = &v34[1144 * v54 + 27904];
          double v106 = (uint64_t *)*v105;
          v2122[0] = 4;
          v2123 = v106;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2122);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2122);
          uint64_t v107 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
          uint64_t v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v107, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2122);
          int v109 = *v108;
          char *v108 = 4;
          v2122[0] = v109;
          uint64_t v110 = (uint64_t *)*((void *)v108 + 1);
          *((void *)v108 + 1) = v106;
          v2123 = v110;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2122);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2123, v109);
          if (*v105)
          {
            uint64_t v111 = (char *)&v1731[572 * v54 + 13952] + 1;
            uint64_t v112 = (uint64_t *)*v111;
            v2120[0] = 5;
            v2121 = v112;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2120);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2120);
            int v113 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
            long long v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v113, "numParameters");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2120);
            int v115 = *v114;
            *long long v114 = 5;
            v2120[0] = v115;
            uint64_t v116 = (uint64_t *)*((void *)v114 + 1);
            *((void *)v114 + 1) = v112;
            v2121 = v116;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v114);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2120);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2121, v115);
            if (*v111)
            {
              unint64_t v117 = 0;
              int v118 = &v1731[572 * v54];
              v1720 = (float *)(v118 + 13972);
              v1709 = (float *)(v118 + 13974);
              v1708 = (float *)(v118 + 13976);
              v1718 = (unsigned __int8 *)(v118 + 13970);
              v1716 = (unsigned __int8 *)(v118 + 13959);
              v1724 = (unsigned __int8 *)(v118 + 13955);
              v1701 = v118 + 13956;
              v1706 = (unsigned __int8 *)(v118 + 13957);
              v1700 = (unsigned __int8 *)v118 + 27915;
              v1699 = v118 + 13958;
              v1714 = (unsigned __int8 *)(v118 + 13954);
              v1712 = (unsigned __int8 *)v118 + 27907;
              v1711 = (unsigned __int8 *)(v118 + 13953);
              v1707 = v55;
              do
              {
                BOOL v119 = (uint64_t *)*((unsigned __int8 *)v55 + v117);
                v2118[0] = 5;
                v2119 = v119;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2118);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2118);
                uint64_t v120 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                id v121 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v120, "paramIndexList");
                id v122 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v121, v117);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2118);
                int v123 = *v122;
                *id v122 = 5;
                v2118[0] = v123;
                long long v124 = (uint64_t *)*((void *)v122 + 1);
                *((void *)v122 + 1) = v119;
                v2119 = v124;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v122);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2118);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2119, v123);
                unsigned int v125 = *((unsigned __int8 *)v55 + v117);
                switch(*((unsigned char *)v55 + v117))
                {
                  case 0:
                    uint64_t v126 = *v1711;
                    v2116[0] = 4;
                    uint64_t v2117 = v126;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2116);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2116);
                    long long v127 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    int v128 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v127, "isComplexSH");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2116);
                    int v129 = *v128;
                    *int v128 = 4;
                    v2116[0] = v129;
                    uint64_t v130 = *((void *)v128 + 1);
                    *((void *)v128 + 1) = v126;
                    uint64_t v2117 = v130;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v128);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2116);
                    uint64_t v131 = (uint64_t **)&v2117;
                    goto LABEL_21;
                  case 1:
                    uint64_t v180 = *v1712;
                    v2114[0] = 4;
                    uint64_t v2115 = v180;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2114);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2114);
                    uint64_t v181 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    int v182 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v181, "isCSPhase");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2114);
                    int v129 = *v182;
                    *int v182 = 4;
                    v2114[0] = v129;
                    uint64_t v183 = *((void *)v182 + 1);
                    *((void *)v182 + 1) = v180;
                    uint64_t v2115 = v183;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2114);
                    uint64_t v131 = (uint64_t **)&v2115;
                    goto LABEL_21;
                  case 2:
                    uint64_t v136 = *v1714;
                    v2112[0] = 5;
                    uint64_t v2113 = v136;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2112);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2112);
                    uint64_t v137 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    int v138 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v137, "productionCoordinate");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2112);
                    int v129 = *v138;
                    *int v138 = 5;
                    v2112[0] = v129;
                    uint64_t v139 = *((void *)v138 + 1);
                    *((void *)v138 + 1) = v136;
                    uint64_t v2113 = v139;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2112);
                    uint64_t v131 = (uint64_t **)&v2113;
                    goto LABEL_21;
                  case 3:
                    uint64_t v140 = (uint64_t *)*v1724;
                    v2110[0] = 5;
                    v2111 = v140;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2110);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2110);
                    uint64_t v141 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    int v142 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v141, "sceneReverb");
                    uint64_t v143 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v142, "reverbProcIndex");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2110);
                    int v144 = *v143;
                    *uint64_t v143 = 5;
                    v2110[0] = v144;
                    int v145 = (uint64_t *)*((void *)v143 + 1);
                    *((void *)v143 + 1) = v140;
                    v2111 = v145;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v143);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2110);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2111, v144);
                    int v146 = *v1724;
                    if (v146 == 1)
                    {
                      long long v147 = (uint64_t *)*v1701;
                      v2108[0] = 5;
                      v2109 = v147;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2108);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2108);
                      int v148 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                      uint64_t v149 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v148, "sceneReverb");
                      double v150 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "reverbProcPreset");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2108);
                      int v151 = *v150;
                      char *v150 = 5;
                      v2108[0] = v151;
                      int v152 = (uint64_t *)*((void *)v150 + 1);
                      *((void *)v150 + 1) = v147;
                      v2109 = v152;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v150);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2108);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2109, v151);
                      int v153 = (uint64_t *)*v1706;
                      v2106[0] = 5;
                      v2107 = v153;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2106);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2106);
                      double v154 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                      int v155 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v154, "sceneReverb");
                      int v156 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v155, "mixLevel");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2106);
                      int v157 = *v156;
                      *int v156 = 5;
                      v2106[0] = v157;
                      double v158 = (uint64_t *)*((void *)v156 + 1);
                      *((void *)v156 + 1) = v153;
                      v2107 = v158;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v156);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2106);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2107, v157);
                      int v146 = *v1724;
                    }
                    if (v146 != 2) {
                      break;
                    }
                    uint64_t v159 = (uint64_t *)*v1700;
                    v2104[0] = 5;
                    v2105 = v159;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2104);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2104);
                    int v160 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    uint64_t v161 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v160, "sceneReverb");
                    double v162 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v161, "codeBookID");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2104);
                    int v163 = *v162;
                    *double v162 = 5;
                    v2104[0] = v163;
                    int v164 = (uint64_t *)*((void *)v162 + 1);
                    *((void *)v162 + 1) = v159;
                    v2105 = v164;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v162);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2104);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2105, v163);
                    double v165 = (uint64_t *)*v1699;
                    v2102[0] = 5;
                    v2103 = v165;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2102);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2102);
                    double v166 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    unsigned int v167 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v166, "sceneReverb");
                    int v168 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v167, "IRFilterID");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2102);
                    int v169 = *v168;
                    char *v168 = 5;
                    v2102[0] = v169;
                    double v170 = (uint64_t *)*((void *)v168 + 1);
                    *((void *)v168 + 1) = v165;
                    v2103 = v170;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v168);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2102);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2103, v169);
                    uint64_t v171 = *v1706;
                    v2100[0] = 5;
                    uint64_t v2101 = v171;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2100);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2100);
                    int v172 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    double v173 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "sceneReverb");
                    uint64_t v174 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v173, "mixLevel");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2100);
                    int v129 = *v174;
                    *uint64_t v174 = 5;
                    v2100[0] = v129;
                    uint64_t v175 = *((void *)v174 + 1);
                    *((void *)v174 + 1) = v171;
                    uint64_t v2101 = v175;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2100);
                    uint64_t v131 = (uint64_t **)&v2101;
LABEL_21:
                    int v184 = v129;
LABEL_22:
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v131, v184);
                    break;
                  case 4:
                    uint64_t v132 = *v1716;
                    v2098[0] = 5;
                    uint64_t v2099 = v132;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2098);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2098);
                    long long v133 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    long long v134 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v133, "PostProcReverbIndex");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2098);
                    int v129 = *v134;
                    *long long v134 = 5;
                    v2098[0] = v129;
                    uint64_t v135 = *((void *)v134 + 1);
                    *((void *)v134 + 1) = v132;
                    uint64_t v2099 = v135;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v134);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2098);
                    uint64_t v131 = (uint64_t **)&v2099;
                    goto LABEL_21;
                  case 5:
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v2096, "dump not implemented");
                    vDSP_Length v185 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    int v186 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v185, "paramIndex 5");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2096);
                    char v187 = *v186;
                    *int v186 = v2096[0];
                    v2096[0] = v187;
                    uint64_t v188 = *((void *)v186 + 1);
                    *((void *)v186 + 1) = v2097;
                    uint64_t v2097 = v188;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2096);
                    int v184 = v2096[0];
                    uint64_t v131 = (uint64_t **)&v2097;
                    goto LABEL_22;
                  case 6:
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v2094, "dump not implemented");
                    double v189 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    double v190 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v189, "paramIndex 6");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2094);
                    char v191 = *v190;
                    *double v190 = v2094[0];
                    v2094[0] = v191;
                    uint64_t v192 = *((void *)v190 + 1);
                    *((void *)v190 + 1) = v2095;
                    uint64_t v2095 = v192;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v190);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2094);
                    int v184 = v2094[0];
                    uint64_t v131 = (uint64_t **)&v2095;
                    goto LABEL_22;
                  case 7:
                    uint64_t v176 = *v1718;
                    v2092[0] = 5;
                    uint64_t v2093 = v176;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2092);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2092);
                    uint64_t v177 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    int v178 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v177, "HCFilterCodeBookID");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2092);
                    int v129 = *v178;
                    *int v178 = 5;
                    v2092[0] = v129;
                    uint64_t v179 = *((void *)v178 + 1);
                    *((void *)v178 + 1) = v176;
                    uint64_t v2093 = v179;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2092);
                    uint64_t v131 = (uint64_t **)&v2093;
                    goto LABEL_21;
                  case 8:
                    double v193 = *v1720;
                    v2090[0] = 7;
                    double v2091 = v193;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2090);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2090);
                    uint64_t v194 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v195 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v194, "hoaRotation");
                    v196 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v195, "pitch");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2090);
                    int v197 = *v196;
                    char *v196 = 7;
                    v2090[0] = v197;
                    v198 = (uint64_t *)*((void *)v196 + 1);
                    *((double *)v196 + 1) = v193;
                    double v2091 = *(double *)&v198;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2090);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2091, v197);
                    double v199 = *v1709;
                    v2088[0] = 7;
                    double v2089 = v199;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2088);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2088);
                    v200 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v201 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v200, "hoaRotation");
                    v202 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v201, "yaw");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2088);
                    int v203 = *v202;
                    char *v202 = 7;
                    v2088[0] = v203;
                    int v204 = (uint64_t *)*((void *)v202 + 1);
                    *((double *)v202 + 1) = v199;
                    double v2089 = *(double *)&v204;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v202);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2088);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2089, v203);
                    double v205 = *v1708;
                    v2086[0] = 7;
                    double v2087 = v205;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2086);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2086);
                    v206 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v207 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v206, "hoaRotation");
                    v208 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v207, "roll");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2086);
                    int v209 = *v208;
                    char *v208 = 7;
                    v2086[0] = v209;
                    v210 = (uint64_t *)*((void *)v208 + 1);
                    *((double *)v208 + 1) = v205;
                    double v2087 = *(double *)&v210;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v208);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2086);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2087, v209);
                    uint64_t v55 = v1707;
                    goto LABEL_28;
                  default:
LABEL_28:
                    std::to_string(&v2084, v125);
                    int v211 = std::string::insert(&v2084, 0, "Unknown parameter id ", 0x15uLL);
                    std::string v2085 = *v211;
                    v211->__r_.__value_.__l.__size_ = 0;
                    v211->__r_.__value_.__r.__words[2] = 0;
                    v211->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v2084.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v2084.__r_.__value_.__l.__data_);
                    }
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v2082, "not implemented");
                    v212 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    int v213 = SHIBYTE(v2085.__r_.__value_.__r.__words[2]);
                    v214 = (void *)v2085.__r_.__value_.__r.__words[0];
                    if ((v2085.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v215 = &v2085;
                    }
                    else {
                      v215 = (std::string *)v2085.__r_.__value_.__r.__words[0];
                    }
                    v216 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v212, (char *)v215);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2082);
                    char v217 = *v216;
                    char *v216 = v2082[0];
                    v2082[0] = v217;
                    double v218 = (uint64_t *)*((void *)v216 + 1);
                    *((void *)v216 + 1) = v2083;
                    v2083 = v218;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2082);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2083, v2082[0]);
                    if (v213 < 0) {
                      operator delete(v214);
                    }
                    break;
                }
                ++v117;
              }
              while (v117 < *v111);
            }
          }
          uint64_t v34 = (unsigned __int8 *)v1731;
          v219 = (uint64_t *)LOBYTE(v1731[572 * v54 + 13994]);
          v2080[0] = 4;
          v2081 = v219;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2080);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2080);
          v220 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "dolbyStaticData");
          v221 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v220, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2080);
          int v222 = *v221;
          char *v221 = 4;
          v2080[0] = v222;
          v223 = (uint64_t *)*((void *)v221 + 1);
          *((void *)v221 + 1) = v219;
          v2081 = v223;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v221);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2080);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2081, v222);
          v224 = (uint64_t *)LOBYTE(v1731[572 * v54 + 13995]);
          v2078[0] = 4;
          v2079 = v224;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2078);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2078);
          v225 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "extASCStaticData");
          v226 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v225, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2078);
          int v227 = *v226;
          char *v226 = 4;
          v2078[0] = v227;
          v228 = (uint64_t *)*((void *)v226 + 1);
          *((void *)v226 + 1) = v224;
          v2079 = v228;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v226);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2078);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2079, v227);
          ++v54;
          v55 += 572;
        }
        while (v1726 + 1 != v1702);
      }
      double v229 = (uint64_t *)v34[173164];
      v2076[0] = 4;
      v2077 = v229;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2076);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2076);
      v230 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
      v231 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v230, "extStaticData");
      double v232 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v231, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2076);
      int v233 = *v232;
      *double v232 = 4;
      v2076[0] = v233;
      v234 = (uint64_t *)*((void *)v232 + 1);
      *((void *)v232 + 1) = v229;
      v2077 = v234;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v232);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2076);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2077, v233);
    }
    v235 = (uint64_t *)v34[174192];
    v2074[0] = 4;
    v2075 = v235;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2074);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2074);
    int v236 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
    v237 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v236, "groupDynamicData");
    uint64_t v238 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v237, "hasData");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2074);
    int v239 = *v238;
    *uint64_t v238 = 4;
    v2074[0] = v239;
    v240 = (uint64_t *)*((void *)v238 + 1);
    *((void *)v238 + 1) = v235;
    v2075 = v240;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v238);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2074);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2075, v239);
    uint64_t v241 = (uint64_t *)v34[206708];
    v2072[0] = 5;
    v2073 = v241;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2072);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2072);
    v242 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
    v243 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v242, "sceneComponentDynamicData");
    v244 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v243, "ASCCount");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2072);
    int v245 = *v244;
    char *v244 = 5;
    v2072[0] = v245;
    v246 = (uint64_t *)*((void *)v244 + 1);
    *((void *)v244 + 1) = v241;
    v2073 = v246;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v244);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2072);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2073, v245);
    uint64_t v1697 = v34[206708];
    if (v34[206708])
    {
      unint64_t v247 = 0;
      v1705 = v34 + 206906;
      v1704 = v34 + 206936;
      while (1)
      {
        v248 = &v34[9752 * v247 + 206712];
        v249 = (uint64_t *)*v248;
        v2070[0] = 5;
        v2071 = v249;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2070);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2070);
        int v250 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v251 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v250, "sceneComponentDynamicData");
        double v252 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v251, "ASCData");
        v253 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v252, v247);
        v254 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v253, "ASCType");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2070);
        int v255 = *v254;
        char *v254 = 5;
        v2070[0] = v255;
        uint64_t v256 = (uint64_t *)*((void *)v254 + 1);
        *((void *)v254 + 1) = v249;
        v2071 = v256;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2070);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2071, v255);
        unsigned int v257 = *v248;
        if (!*v248) {
          break;
        }
        if (v257 == 1)
        {
          double v360 = (uint64_t *)v34[9752 * v247 + 206780];
          v2028[0] = 5;
          v2029 = v360;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2028);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2028);
          v361 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v362 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v361, "sceneComponentDynamicData");
          v363 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v362, "ASCData");
          int v364 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v363, v247);
          v365 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v364, "objectMetadata");
          double v366 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v365, "objectID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2028);
          int v367 = *v366;
          *double v366 = 5;
          v2028[0] = v367;
          v368 = (uint64_t *)*((void *)v366 + 1);
          *((void *)v366 + 1) = v360;
          v2029 = v368;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v366);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2028);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2029, v367);
          v1721 = &v34[9752 * v247 + 206781];
          v369 = (uint64_t *)*v1721;
          v2026[0] = 5;
          v2027 = v369;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2026);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2026);
          int v370 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v371 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v370, "sceneComponentDynamicData");
          double v372 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v371, "ASCData");
          v373 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v372, v247);
          v374 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v373, "objectMetadata");
          v375 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v374, "numBlocks");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2026);
          LODWORD(v366) = *v375;
          char *v375 = 5;
          v2026[0] = (char)v366;
          int v376 = (uint64_t *)*((void *)v375 + 1);
          *((void *)v375 + 1) = v369;
          v2027 = v376;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v375);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2026);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2027, (int)v366);
          if (*v1721)
          {
            unint64_t v377 = 0;
            v1725 = (float *)v1704;
            double v378 = v1705;
            do
            {
              v379 = &v34[9752 * v247 + 206784 + 500 * v377];
              v380 = (uint64_t *)*v379;
              v2024[0] = 4;
              v2025 = v380;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2024);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2024);
              v381 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
              int v382 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v381, "sceneComponentDynamicData");
              v383 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v382, "ASCData");
              double v384 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v383, v247);
              v385 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v384, "objectMetadata");
              v386 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v385, "blockData");
              v387 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v386, v377);
              int v388 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v387, "isNewBlk");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2024);
              int v389 = *v388;
              *int v388 = 4;
              v2024[0] = v389;
              double v390 = (uint64_t *)*((void *)v388 + 1);
              *((void *)v388 + 1) = v380;
              v2025 = v390;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v388);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2024);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2025, v389);
              if (v377 && v377 < *v1721 - 1)
              {
                v391 = (uint64_t *)*(unsigned __int16 *)&v34[9752 * v247 + 206786 + 500 * v377];
                v2022[0] = 5;
                v2023 = v391;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2022);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2022);
                v392 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                v393 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v392, "sceneComponentDynamicData");
                int v394 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v393, "ASCData");
                v395 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v394, v247);
                double v396 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v395, "objectMetadata");
                v397 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v396, "blockData");
                v398 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v397, v377);
                v399 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v398, "rtime");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2022);
                int v400 = *v399;
                char *v399 = 5;
                v2022[0] = v400;
                v401 = (uint64_t *)*((void *)v399 + 1);
                *((void *)v399 + 1) = v391;
                v2023 = v401;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2022);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2023, v400);
              }
              if (*v379)
              {
                v1727 = &v34[9752 * v247 + 206788 + 500 * v377];
                v402 = (uint64_t *)*v1727;
                v2020[0] = 4;
                v2021 = v402;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2020);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2020);
                v403 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                int v404 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v403, "sceneComponentDynamicData");
                v405 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v404, "ASCData");
                v406 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v405, v247);
                v407 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v406, "objectMetadata");
                v408 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v407, "blockData");
                int v409 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v408, v377);
                v410 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v409, "cartesian");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2020);
                int v411 = *v410;
                char *v410 = 4;
                v2020[0] = v411;
                v412 = (uint64_t *)*((void *)v410 + 1);
                *((void *)v410 + 1) = v402;
                v2021 = v412;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v410);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2020);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2021, v411);
                float v413 = *(float *)&v34[9752 * v247 + 206792 + 500 * v377];
                double v414 = v413;
                if (*v1727)
                {
                  v2018[0] = 7;
                  double v2019 = v413;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2018);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2018);
                  v415 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  uint64_t v416 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v415, "sceneComponentDynamicData");
                  v417 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v416, "ASCData");
                  v418 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v417, v247);
                  v419 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v418, "objectMetadata");
                  uint64_t v420 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v419, "blockData");
                  v421 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v420, v377);
                  v422 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v421, "X");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2018);
                  int v423 = *v422;
                  char *v422 = 7;
                  v2018[0] = v423;
                  uint64_t v424 = *((uint64_t **)v422 + 1);
                  *((double *)v422 + 1) = v414;
                  double v2019 = *(double *)&v424;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v422);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2018);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2019, v423);
                  double v425 = *(float *)&v34[9752 * v247 + 206796 + 500 * v377];
                  v2016[0] = 7;
                  double v2017 = v425;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2016);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2016);
                  v426 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  char v427 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v426, "sceneComponentDynamicData");
                  uint64_t v428 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v427, "ASCData");
                  double v429 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v428, v247);
                  v430 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v429, "objectMetadata");
                  v431 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v430, "blockData");
                  v432 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v431, v377);
                  int v433 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v432, "Y");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2016);
                  int v434 = *v433;
                  *int v433 = 7;
                  v2016[0] = v434;
                  double v435 = *((uint64_t **)v433 + 1);
                  *((double *)v433 + 1) = v425;
                  double v2017 = *(double *)&v435;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v433);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2016);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2017, v434);
                  double v436 = *(float *)&v34[9752 * v247 + 206800 + 500 * v377];
                  v2014[0] = 7;
                  double v2015 = v436;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2014);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2014);
                  v437 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v438 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v437, "sceneComponentDynamicData");
                  int v439 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v438, "ASCData");
                  v440 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v439, v247);
                  double v441 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v440, "objectMetadata");
                  v442 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v441, "blockData");
                  v443 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v442, v377);
                  v444 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v443, "Z");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2014);
                  int v445 = *v444;
                  char *v444 = 7;
                  v2014[0] = v445;
                  double v446 = *((double *)v444 + 1);
                  *((double *)v444 + 1) = v436;
                  double v2015 = v446;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v444);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2014);
                  double v447 = &v2015;
                }
                else
                {
                  v2012[0] = 7;
                  double v2013 = v413;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2012);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2012);
                  v448 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v449 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v448, "sceneComponentDynamicData");
                  v450 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v449, "ASCData");
                  int v451 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v450, v247);
                  v452 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v451, "objectMetadata");
                  double v453 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v452, "blockData");
                  v454 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v453, v377);
                  v455 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v454, "azimuth");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2012);
                  int v456 = *v455;
                  char *v455 = 7;
                  v2012[0] = v456;
                  int v457 = *((uint64_t **)v455 + 1);
                  *((double *)v455 + 1) = v414;
                  double v2013 = *(double *)&v457;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v455);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2012);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2013, v456);
                  double v458 = *(float *)&v34[9752 * v247 + 206796 + 500 * v377];
                  v2010[0] = 7;
                  double v2011 = v458;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2010);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2010);
                  double v459 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v460 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v459, "sceneComponentDynamicData");
                  v461 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v460, "ASCData");
                  v462 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v461, v247);
                  double v463 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v462, "objectMetadata");
                  uint64_t v464 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v463, "blockData");
                  v465 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v464, v377);
                  v466 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v465, "elevation");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2010);
                  int v467 = *v466;
                  char *v466 = 7;
                  v2010[0] = v467;
                  std::string v468 = *((uint64_t **)v466 + 1);
                  *((double *)v466 + 1) = v458;
                  double v2011 = *(double *)&v468;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v466);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2010);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2011, v467);
                  double v469 = *(float *)&v34[9752 * v247 + 206800 + 500 * v377];
                  v2008[0] = 7;
                  double v2009 = v469;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2008);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2008);
                  v470 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  uint64_t v471 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v470, "sceneComponentDynamicData");
                  v472 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v471, "ASCData");
                  uint64_t v473 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v472, v247);
                  v474 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v473, "objectMetadata");
                  uint64_t v475 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v474, "blockData");
                  v476 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v475, v377);
                  uint64_t v477 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v476, "distance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2008);
                  int v445 = *v477;
                  *uint64_t v477 = 7;
                  v2008[0] = v445;
                  double v478 = *((double *)v477 + 1);
                  *((double *)v477 + 1) = v469;
                  double v2009 = v478;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v477);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2008);
                  double v447 = &v2009;
                }
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v447, v445);
                uint64_t v479 = &v34[9752 * v247 + 206804 + 500 * v377];
                v480 = (uint64_t *)*v479;
                v2006[0] = 4;
                v2007 = v480;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2006);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2006);
                uint64_t v481 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                v482 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v481, "sceneComponentDynamicData");
                uint64_t v483 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v482, "ASCData");
                v484 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v483, v247);
                double v485 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v484, "objectMetadata");
                v486 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v485, "blockData");
                uint64_t v487 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v486, v377);
                v488 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v487, "hasADMMetadata");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2006);
                int v489 = *v488;
                char *v488 = 4;
                v2006[0] = v489;
                v490 = (uint64_t *)*((void *)v488 + 1);
                *((void *)v488 + 1) = v480;
                v2007 = v490;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2006);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2007, v489);
                if (*v479)
                {
                  uint64_t v491 = &v34[9752 * v247 + 206808 + 500 * v377];
                  v492 = (uint64_t *)*v491;
                  v2004[0] = 4;
                  v2005 = v492;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2004);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2004);
                  uint64_t v493 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v494 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v493, "sceneComponentDynamicData");
                  double v495 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v494, "ASCData");
                  v496 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v495, v247);
                  v497 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v496, "objectMetadata");
                  v498 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v497, "blockData");
                  v499 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v498, v377);
                  v500 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v499, "absoluteDistance");
                  uint64_t v501 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v500, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2004);
                  int v502 = *v501;
                  *uint64_t v501 = 4;
                  v2004[0] = v502;
                  uint64_t v503 = (uint64_t *)*((void *)v501 + 1);
                  *((void *)v501 + 1) = v492;
                  v2005 = v503;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v501);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2004);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2005, v502);
                  if (*v491)
                  {
                    double v504 = *(float *)&v34[9752 * v247 + 206812 + 500 * v377];
                    v2002[0] = 7;
                    double v2003 = v504;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2002);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2002);
                    uint64_t v505 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v506 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v505, "sceneComponentDynamicData");
                    v507 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v506, "ASCData");
                    v508 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v507, v247);
                    v509 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v508, "objectMetadata");
                    v510 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v509, "blockData");
                    v511 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v510, v377);
                    v512 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v511, "absoluteDistance");
                    uint64_t v513 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v512, "distance");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2002);
                    int v514 = *v513;
                    *uint64_t v513 = 7;
                    v2002[0] = v514;
                    v515 = *((uint64_t **)v513 + 1);
                    *((double *)v513 + 1) = v504;
                    double v2003 = *(double *)&v515;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v513);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2002);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2003, v514);
                  }
                  v516 = &v34[9752 * v247 + 206816 + 500 * v377];
                  double v517 = (uint64_t *)*v516;
                  v2000[0] = 4;
                  v2001 = v517;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2000);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2000);
                  v518 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v519 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v518, "sceneComponentDynamicData");
                  v520 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v519, "ASCData");
                  v521 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v520, v247);
                  v522 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v521, "objectMetadata");
                  double v523 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v522, "blockData");
                  v524 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v523, v377);
                  v525 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v524, "spread");
                  v526 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v525, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2000);
                  int v527 = *v526;
                  char *v526 = 4;
                  v2000[0] = v527;
                  v528 = (uint64_t *)*((void *)v526 + 1);
                  *((void *)v526 + 1) = v517;
                  v2001 = v528;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2000);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2001, v527);
                  if (*v516)
                  {
                    double v529 = *(float *)&v34[9752 * v247 + 206820 + 500 * v377];
                    v1998[0] = 7;
                    double v1999 = v529;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1998);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1998);
                    v530 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    double v531 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v530, "sceneComponentDynamicData");
                    v532 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v531, "ASCData");
                    double v533 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v532, v247);
                    v534 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v533, "objectMetadata");
                    double v535 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v534, "blockData");
                    v536 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v535, v377);
                    double v537 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v536, "spread");
                    v538 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v537, "width");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1998);
                    int v539 = *v538;
                    char *v538 = 7;
                    v1998[0] = v539;
                    v540 = *((uint64_t **)v538 + 1);
                    *((double *)v538 + 1) = v529;
                    double v1999 = *(double *)&v540;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1998);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1999, v539);
                    double v541 = *(float *)&v34[9752 * v247 + 206824 + 500 * v377];
                    v1996[0] = 7;
                    double v1997 = v541;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1996);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1996);
                    v542 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    double v543 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v542, "sceneComponentDynamicData");
                    v544 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v543, "ASCData");
                    double v545 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v544, v247);
                    v546 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v545, "objectMetadata");
                    double v547 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v546, "blockData");
                    v548 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v547, v377);
                    double v549 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v548, "spread");
                    v550 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v549, "height");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1996);
                    int v551 = *v550;
                    char *v550 = 7;
                    v1996[0] = v551;
                    v552 = *((uint64_t **)v550 + 1);
                    *((double *)v550 + 1) = v541;
                    double v1997 = *(double *)&v552;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1996);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1997, v551);
                    double v553 = *(float *)&v34[9752 * v247 + 206828 + 500 * v377];
                    v1994[0] = 7;
                    double v1995 = v553;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1994);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1994);
                    v554 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v555 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v554, "sceneComponentDynamicData");
                    v556 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v555, "ASCData");
                    uint64_t v557 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v556, v247);
                    v558 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v557, "objectMetadata");
                    v559 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v558, "blockData");
                    v560 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v559, v377);
                    v561 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v560, "spread");
                    v562 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v561, "depth");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1994);
                    int v563 = *v562;
                    char *v562 = 7;
                    v1994[0] = v563;
                    v564 = *((uint64_t **)v562 + 1);
                    *((double *)v562 + 1) = v553;
                    double v1995 = *(double *)&v564;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1994);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1995, v563);
                  }
                  double v565 = &v34[9752 * v247 + 206832 + 500 * v377];
                  v566 = (uint64_t *)*v565;
                  v1992[0] = 4;
                  v1993 = v566;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1992);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1992);
                  double v567 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v568 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v567, "sceneComponentDynamicData");
                  double v569 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v568, "ASCData");
                  v570 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v569, v247);
                  double v571 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v570, "objectMetadata");
                  v572 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v571, "blockData");
                  double v573 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v572, v377);
                  v574 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v573, "gain");
                  double v575 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v574, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1992);
                  int v576 = *v575;
                  *double v575 = 4;
                  v1992[0] = v576;
                  double v577 = (uint64_t *)*((void *)v575 + 1);
                  *((void *)v575 + 1) = v566;
                  v1993 = v577;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1992);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1993, v576);
                  if (*v565)
                  {
                    v578 = (uint64_t *)v34[9752 * v247 + 206833 + 500 * v377];
                    v1990[0] = 4;
                    v1991 = v578;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1990);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1990);
                    double v579 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v580 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v579, "sceneComponentDynamicData");
                    double v581 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v580, "ASCData");
                    v582 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v581, v247);
                    v583 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v582, "objectMetadata");
                    v584 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v583, "blockData");
                    v585 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v584, v377);
                    v586 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v585, "gain");
                    v587 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v586, "isDB");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1990);
                    int v588 = *v587;
                    char *v587 = 4;
                    v1990[0] = v588;
                    v589 = (uint64_t *)*((void *)v587 + 1);
                    *((void *)v587 + 1) = v578;
                    v1991 = v589;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v587);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1990);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1991, v588);
                    double v590 = *(float *)&v34[9752 * v247 + 206836 + 500 * v377];
                    v1988[0] = 7;
                    double v1989 = v590;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1988);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1988);
                    v591 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v592 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v591, "sceneComponentDynamicData");
                    v593 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v592, "ASCData");
                    v594 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v593, v247);
                    uint64_t v595 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v594, "objectMetadata");
                    v596 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v595, "blockData");
                    double v597 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v596, v377);
                    v598 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v597, "gain");
                    double v599 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v598, "gain");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1988);
                    int v600 = *v599;
                    *double v599 = 7;
                    v1988[0] = v600;
                    v601 = *((uint64_t **)v599 + 1);
                    *((double *)v599 + 1) = v590;
                    double v1989 = *(double *)&v601;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1988);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1989, v600);
                  }
                  v602 = &v34[9752 * v247 + 206840 + 500 * v377];
                  double v603 = (uint64_t *)*v602;
                  v1986[0] = 4;
                  v1987 = v603;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1986);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1986);
                  v604 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  double v605 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v604, "sceneComponentDynamicData");
                  v606 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v605, "ASCData");
                  v607 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v606, v247);
                  v608 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v607, "objectMetadata");
                  double v609 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v608, "blockData");
                  v610 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v609, v377);
                  double v611 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v610, "diffuse");
                  v612 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v611, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1986);
                  int v613 = *v612;
                  char *v612 = 4;
                  v1986[0] = v613;
                  v614 = (uint64_t *)*((void *)v612 + 1);
                  *((void *)v612 + 1) = v603;
                  v1987 = v614;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1986);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1987, v613);
                  if (*v602)
                  {
                    double v615 = *(float *)&v34[9752 * v247 + 206844 + 500 * v377];
                    v1984[0] = 7;
                    double v1985 = v615;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1984);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1984);
                    v616 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    double v617 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v616, "sceneComponentDynamicData");
                    v618 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v617, "ASCData");
                    double v619 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v618, v247);
                    v620 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v619, "objectMetadata");
                    v621 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v620, "blockData");
                    v622 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v621, v377);
                    double v623 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v622, "diffuse");
                    v624 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v623, "diffuse");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1984);
                    int v625 = *v624;
                    char *v624 = 7;
                    v1984[0] = v625;
                    v626 = *((uint64_t **)v624 + 1);
                    *((double *)v624 + 1) = v615;
                    double v1985 = *(double *)&v626;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1984);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1985, v625);
                  }
                  double v627 = &v34[9752 * v247 + 206848 + 500 * v377];
                  v628 = (uint64_t *)*v627;
                  v1982[0] = 4;
                  v1983 = v628;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1982);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1982);
                  double v629 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v630 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v629, "sceneComponentDynamicData");
                  v631 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v630, "ASCData");
                  v632 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v631, v247);
                  double v633 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v632, "objectMetadata");
                  v634 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v633, "blockData");
                  double v635 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v634, v377);
                  v636 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v635, "channelLock");
                  double v637 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v636, "channelLock");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1982);
                  int v638 = *v637;
                  *double v637 = 4;
                  v1982[0] = v638;
                  double v639 = (uint64_t *)*((void *)v637 + 1);
                  *((void *)v637 + 1) = v628;
                  v1983 = v639;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1982);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1983, v638);
                  if (*v627)
                  {
                    v640 = &v34[9752 * v247 + 206849 + 500 * v377];
                    double v641 = (uint64_t *)*v640;
                    v1980[0] = 4;
                    v1981 = v641;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1980);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1980);
                    v642 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    double v643 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v642, "sceneComponentDynamicData");
                    v644 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v643, "ASCData");
                    v645 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v644, v247);
                    v646 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v645, "objectMetadata");
                    v647 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v646, "blockData");
                    v648 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v647, v377);
                    v649 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v648, "channelLock");
                    v650 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v649, "hasMaxDistance");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1980);
                    int v651 = *v650;
                    char *v650 = 4;
                    v1980[0] = v651;
                    v652 = (uint64_t *)*((void *)v650 + 1);
                    *((void *)v650 + 1) = v641;
                    v1981 = v652;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1980);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1981, v651);
                    if (*v640)
                    {
                      double v653 = *(float *)&v34[9752 * v247 + 206852 + 500 * v377];
                      v1978[0] = 7;
                      double v1979 = v653;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1978);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1978);
                      v654 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                      v655 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v654, "sceneComponentDynamicData");
                      v656 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v655, "ASCData");
                      v657 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v656, v247);
                      v658 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v657, "objectMetadata");
                      v659 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v658, "blockData");
                      v660 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v659, v377);
                      v661 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v660, "channelLock");
                      v662 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v661, "maxDistance");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1978);
                      int v663 = *v662;
                      char *v662 = 7;
                      v1978[0] = v663;
                      v664 = *((uint64_t **)v662 + 1);
                      *((double *)v662 + 1) = v653;
                      double v1979 = *(double *)&v664;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v662);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1978);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1979, v663);
                    }
                  }
                  v665 = &v34[9752 * v247 + 206856 + 500 * v377];
                  v666 = (uint64_t *)*v665;
                  v1976[0] = 4;
                  v1977 = v666;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1976);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1976);
                  v667 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v668 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v667, "sceneComponentDynamicData");
                  v669 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v668, "ASCData");
                  v670 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v669, v247);
                  v671 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v670, "objectMetadata");
                  v672 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v671, "blockData");
                  v673 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v672, v377);
                  v674 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v673, "objectDivergence");
                  v675 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v674, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1976);
                  int v676 = *v675;
                  char *v675 = 4;
                  v1976[0] = v676;
                  v677 = (uint64_t *)*((void *)v675 + 1);
                  *((void *)v675 + 1) = v666;
                  v1977 = v677;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1976);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1977, v676);
                  if (*v665)
                  {
                    double v678 = *(float *)&v34[9752 * v247 + 206860 + 500 * v377];
                    v1974[0] = 7;
                    double v1975 = v678;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1974);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1974);
                    v679 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v680 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v679, "sceneComponentDynamicData");
                    v681 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v680, "ASCData");
                    v682 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v681, v247);
                    v683 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v682, "objectMetadata");
                    v684 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v683, "blockData");
                    v685 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v684, v377);
                    v686 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v685, "objectDivergence");
                    v687 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v686, "objectDivergence");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1974);
                    int v688 = *v687;
                    char *v687 = 7;
                    v1974[0] = v688;
                    v689 = *((uint64_t **)v687 + 1);
                    *((double *)v687 + 1) = v678;
                    double v1975 = *(double *)&v689;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1974);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1975, v688);
                    if (*v1727)
                    {
                      double v690 = *(float *)&v34[9752 * v247 + 206864 + 500 * v377];
                      v1972[0] = 7;
                      double v1973 = v690;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1972);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1972);
                      v691 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                      v692 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v691, "sceneComponentDynamicData");
                      v693 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v692, "ASCData");
                      v694 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v693, v247);
                      v695 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v694, "objectMetadata");
                      v696 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v695, "blockData");
                      v697 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v696, v377);
                      v698 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v697, "objectDivergence");
                      v699 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v698, "positionRange");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1972);
                      int v700 = *v699;
                      char *v699 = 7;
                      v1972[0] = v700;
                      double v701 = *((double *)v699 + 1);
                      *((double *)v699 + 1) = v690;
                      double v1973 = v701;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1972);
                      v702 = &v1973;
                    }
                    else
                    {
                      double v703 = *(float *)&v34[9752 * v247 + 206868 + 500 * v377];
                      v1970[0] = 7;
                      double v1971 = v703;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1970);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1970);
                      v704 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                      v705 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v704, "sceneComponentDynamicData");
                      v706 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v705, "ASCData");
                      v707 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v706, v247);
                      v708 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v707, "objectMetadata");
                      v709 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v708, "blockData");
                      v710 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v709, v377);
                      v711 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v710, "objectDivergence");
                      v712 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v711, "azimuthRange");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1970);
                      int v700 = *v712;
                      char *v712 = 7;
                      v1970[0] = v700;
                      double v713 = *((double *)v712 + 1);
                      *((double *)v712 + 1) = v703;
                      double v1971 = v713;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v712);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1970);
                      v702 = &v1971;
                    }
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v702, v700);
                  }
                  v714 = (uint64_t *)v34[9752 * v247 + 206876 + 500 * v377];
                  v1968[0] = 4;
                  v1969 = v714;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1968);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1968);
                  v715 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v716 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v715, "sceneComponentDynamicData");
                  v717 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v716, "ASCData");
                  v718 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v717, v247);
                  v719 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v718, "objectMetadata");
                  v720 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v719, "blockData");
                  v721 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v720, v377);
                  v722 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v721, "screenRef");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1968);
                  int v723 = *v722;
                  char *v722 = 4;
                  v1968[0] = v723;
                  v724 = (uint64_t *)*((void *)v722 + 1);
                  *((void *)v722 + 1) = v714;
                  v1969 = v724;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v722);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1968);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1969, v723);
                  v725 = (uint64_t *)v34[9752 * v247 + 206879 + 500 * v377];
                  v1966[0] = 4;
                  v1967 = v725;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1966);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1966);
                  v726 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v727 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v726, "sceneComponentDynamicData");
                  v728 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v727, "ASCData");
                  v729 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v728, v247);
                  v730 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v729, "objectMetadata");
                  v731 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v730, "blockData");
                  v732 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v731, v377);
                  v733 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v732, "headLocked");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1966);
                  int v734 = *v733;
                  char *v733 = 4;
                  v1966[0] = v734;
                  v735 = (uint64_t *)*((void *)v733 + 1);
                  *((void *)v733 + 1) = v725;
                  v1967 = v735;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1966);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1967, v734);
                  v736 = &v34[9752 * v247 + 206880 + 500 * v377];
                  v737 = (uint64_t *)*v736;
                  v1964[0] = 4;
                  v1965 = v737;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1964);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1964);
                  v738 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v739 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v738, "sceneComponentDynamicData");
                  v740 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v739, "ASCData");
                  v741 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v740, v247);
                  v742 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v741, "objectMetadata");
                  v743 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v742, "blockData");
                  v744 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v743, v377);
                  v745 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v744, "headphoneVirtualize");
                  v746 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v745, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1964);
                  LODWORD(v733) = *v746;
                  char *v746 = 4;
                  v1964[0] = (char)v733;
                  v747 = (uint64_t *)*((void *)v746 + 1);
                  *((void *)v746 + 1) = v737;
                  v1965 = v747;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v746);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1964);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1965, (int)v733);
                  if (*v736)
                  {
                    v748 = (uint64_t *)v34[9752 * v247 + 206881 + 500 * v377];
                    v1962[0] = 4;
                    v1963 = v748;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1962);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1962);
                    v749 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v750 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v749, "sceneComponentDynamicData");
                    v751 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v750, "ASCData");
                    v752 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v751, v247);
                    v753 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v752, "objectMetadata");
                    v754 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v753, "blockData");
                    v755 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v754, v377);
                    v756 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v755, "headphoneVirtualize");
                    v757 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v756, "bypass");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1962);
                    int v758 = *v757;
                    char *v757 = 4;
                    v1962[0] = v758;
                    v759 = (uint64_t *)*((void *)v757 + 1);
                    *((void *)v757 + 1) = v748;
                    v1963 = v759;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v757);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1962);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1963, v758);
                    double v760 = *(float *)&v34[9752 * v247 + 206884 + 500 * v377];
                    v1960[0] = 7;
                    double v1961 = v760;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1960);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1960);
                    v761 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v762 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v761, "sceneComponentDynamicData");
                    v763 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v762, "ASCData");
                    v764 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v763, v247);
                    v765 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v764, "objectMetadata");
                    v766 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v765, "blockData");
                    v767 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v766, v377);
                    v768 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v767, "headphoneVirtualize");
                    v769 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v768, "DRR");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1960);
                    int v770 = *v769;
                    char *v769 = 7;
                    v1960[0] = v770;
                    v771 = *((uint64_t **)v769 + 1);
                    *((double *)v769 + 1) = v760;
                    double v1961 = *(double *)&v771;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v769);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1960);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1961, v770);
                  }
                  v772 = &v34[9752 * v247 + 206888 + 500 * v377];
                  v773 = (uint64_t *)*v772;
                  v1958[0] = 4;
                  v1959 = v773;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1958);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1958);
                  v774 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v775 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v774, "sceneComponentDynamicData");
                  v776 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v775, "ASCData");
                  v777 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v776, v247);
                  v778 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v777, "objectMetadata");
                  v779 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v778, "blockData");
                  v780 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v779, v377);
                  v781 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v780, "zoneExclusion");
                  v782 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v781, "isZoneDefined");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1958);
                  int v783 = *v782;
                  char *v782 = 4;
                  v1958[0] = v783;
                  v784 = (uint64_t *)*((void *)v782 + 1);
                  *((void *)v782 + 1) = v773;
                  v1959 = v784;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v782);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1958);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1959, v783);
                  if (*v772)
                  {
                    v785 = &v34[9752 * v247 + 206889 + 500 * v377];
                    v786 = (uint64_t *)*v785;
                    v1956[0] = 4;
                    v1957 = v786;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1956);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1956);
                    v787 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v788 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v787, "sceneComponentDynamicData");
                    v789 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v788, "ASCData");
                    v790 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v789, v247);
                    v791 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v790, "objectMetadata");
                    v792 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v791, "blockData");
                    v793 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v792, v377);
                    v794 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v793, "zoneExclusion");
                    v795 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v794, "keepPreviousZone");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1956);
                    int v796 = *v795;
                    char *v795 = 4;
                    v1956[0] = v796;
                    v797 = (uint64_t *)*((void *)v795 + 1);
                    *((void *)v795 + 1) = v786;
                    v1957 = v797;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v795);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1956);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1957, v796);
                    if (*v785)
                    {
                      v798 = &v34[9752 * v247 + 206890 + 500 * v377];
                      v799 = (uint64_t *)*v798;
                      v1954[0] = 5;
                      v1955 = v799;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1954);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1954);
                      v800 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                      v801 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v800, "sceneComponentDynamicData");
                      v802 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v801, "ASCData");
                      v803 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v802, v247);
                      v804 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v803, "objectMetadata");
                      v805 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v804, "blockData");
                      v806 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v805, v377);
                      v807 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v806, "zoneExclusion");
                      v808 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v807, "numZones");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1954);
                      int v809 = *v808;
                      char *v808 = 5;
                      v1954[0] = v809;
                      v810 = (uint64_t *)*((void *)v808 + 1);
                      *((void *)v808 + 1) = v799;
                      v1955 = v810;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v808);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1954);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1955, v809);
                      if (*v798)
                      {
                        unint64_t v811 = 0;
                        v812 = v1725;
                        do
                        {
                          v813 = (uint64_t *)v378[v811 - 15];
                          v1952[0] = 4;
                          v1953 = v813;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1952);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1952);
                          v814 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                          v815 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v814, "sceneComponentDynamicData");
                          v816 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v815, "ASCData");
                          v817 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v816, v247);
                          v818 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v817, "objectMetadata");
                          v819 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v818, "blockData");
                          v820 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v819, v377);
                          v821 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v820, "zoneExclusion");
                          v822 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v821, "usePreDefinedZone");
                          v823 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v822, v811);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1952);
                          int v824 = *v823;
                          unsigned __int8 *v823 = 4;
                          v1952[0] = v824;
                          v825 = (uint64_t *)*((void *)v823 + 1);
                          *((void *)v823 + 1) = v813;
                          v1953 = v825;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v823);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1952);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1953, v824);
                          if (v378[v811 - 15])
                          {
                            uint64_t v826 = v378[v811];
                            v1950[0] = 5;
                            uint64_t v1951 = v826;
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1950);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1950);
                            v827 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                            uint64_t v34 = (unsigned __int8 *)v1731;
                            v828 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v827, "sceneComponentDynamicData");
                            v829 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v828, "ASCData");
                            v830 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v829, v247);
                            v831 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v830, "objectMetadata");
                            v832 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v831, "blockData");
                            v833 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v832, v377);
                            v834 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v833, "zoneExclusion");
                            v835 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v834, "zoneIndex");
                            v836 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v835, v811);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1950);
                            int v837 = *v836;
                            unsigned __int8 *v836 = 5;
                            v1950[0] = v837;
                            uint64_t v838 = *((void *)v836 + 1);
                            *((void *)v836 + 1) = v826;
                            uint64_t v1951 = v838;
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v836);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1950);
                            v839 = (double *)&v1951;
                          }
                          else
                          {
                            float v840 = *(v812 - 3);
                            double v841 = v840;
                            uint64_t v34 = (unsigned __int8 *)v1731;
                            if (*v1727)
                            {
                              v1948[0] = 7;
                              double v1949 = v840;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1948);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1948);
                              v842 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v843 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v842, "sceneComponentDynamicData");
                              v844 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v843, "ASCData");
                              v845 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v844, v247);
                              v846 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v845, "objectMetadata");
                              v847 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v846, "blockData");
                              v848 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v847, v377);
                              v849 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v848, "zoneExclusion");
                              v850 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v849, "zone");
                              v851 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v850, v811);
                              v852 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v851, "minX");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1948);
                              int v853 = *v852;
                              char *v852 = 7;
                              v1948[0] = v853;
                              v854 = *((uint64_t **)v852 + 1);
                              *((double *)v852 + 1) = v841;
                              double v1949 = *(double *)&v854;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v852);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1948);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1949, v853);
                              double v855 = *(v812 - 2);
                              v1946[0] = 7;
                              double v1947 = v855;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1946);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1946);
                              v856 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v857 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v856, "sceneComponentDynamicData");
                              v858 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v857, "ASCData");
                              v859 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v858, v247);
                              v860 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v859, "objectMetadata");
                              v861 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v860, "blockData");
                              v862 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v861, v377);
                              v863 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v862, "zoneExclusion");
                              v864 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v863, "zone");
                              v865 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v864, v811);
                              v866 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v865, "maxX");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1946);
                              int v867 = *v866;
                              char *v866 = 7;
                              v1946[0] = v867;
                              v868 = *((uint64_t **)v866 + 1);
                              *((double *)v866 + 1) = v855;
                              double v1947 = *(double *)&v868;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v866);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1946);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1947, v867);
                              double v869 = *(v812 - 1);
                              v1944[0] = 7;
                              double v1945 = v869;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1944);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1944);
                              v870 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v871 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v870, "sceneComponentDynamicData");
                              v872 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v871, "ASCData");
                              v873 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v872, v247);
                              v874 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v873, "objectMetadata");
                              v875 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v874, "blockData");
                              v876 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v875, v377);
                              v877 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v876, "zoneExclusion");
                              v878 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v877, "zone");
                              v879 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v878, v811);
                              v880 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v879, "minY");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1944);
                              int v881 = *v880;
                              char *v880 = 7;
                              v1944[0] = v881;
                              v882 = *((uint64_t **)v880 + 1);
                              *((double *)v880 + 1) = v869;
                              double v1945 = *(double *)&v882;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v880);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1944);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1945, v881);
                              double v883 = *v812;
                              v1942[0] = 7;
                              double v1943 = v883;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1942);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1942);
                              v884 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v885 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v884, "sceneComponentDynamicData");
                              v886 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v885, "ASCData");
                              v887 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v886, v247);
                              v888 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v887, "objectMetadata");
                              v889 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v888, "blockData");
                              v890 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v889, v377);
                              v891 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v890, "zoneExclusion");
                              v892 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v891, "zone");
                              v893 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v892, v811);
                              v894 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v893, "maxY");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1942);
                              int v895 = *v894;
                              char *v894 = 7;
                              v1942[0] = v895;
                              v896 = (uint64_t *)*((void *)v894 + 1);
                              *((double *)v894 + 1) = v883;
                              double v1943 = *(double *)&v896;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v894);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1942);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1943, v895);
                              double v897 = v812[1];
                              v1940[0] = 7;
                              double v1941 = v897;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1940);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1940);
                              v898 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v899 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v898, "sceneComponentDynamicData");
                              v900 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v899, "ASCData");
                              v901 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v900, v247);
                              v902 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v901, "objectMetadata");
                              v903 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v902, "blockData");
                              v904 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v903, v377);
                              v905 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v904, "zoneExclusion");
                              v906 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v905, "zone");
                              v907 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v906, v811);
                              v908 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v907, "minZ");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1940);
                              int v909 = *v908;
                              char *v908 = 7;
                              v1940[0] = v909;
                              v910 = *((uint64_t **)v908 + 1);
                              *((double *)v908 + 1) = v897;
                              double v1941 = *(double *)&v910;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v908);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1940);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1941, v909);
                              double v911 = v812[2];
                              v1938[0] = 7;
                              double v1939 = v911;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1938);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1938);
                              v912 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v913 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v912, "sceneComponentDynamicData");
                              v914 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v913, "ASCData");
                              v915 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v914, v247);
                              v916 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v915, "objectMetadata");
                              v917 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v916, "blockData");
                              v918 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v917, v377);
                              v919 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v918, "zoneExclusion");
                              v920 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v919, "zone");
                              v921 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v920, v811);
                              v922 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v921, "maxZ");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1938);
                              int v837 = *v922;
                              char *v922 = 7;
                              v1938[0] = v837;
                              double v923 = *((double *)v922 + 1);
                              *((double *)v922 + 1) = v911;
                              double v1939 = v923;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v922);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1938);
                              v839 = &v1939;
                            }
                            else
                            {
                              v1936[0] = 7;
                              double v1937 = v840;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1936);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1936);
                              v924 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v925 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v924, "sceneComponentDynamicData");
                              v926 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v925, "ASCData");
                              v927 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v926, v247);
                              v928 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v927, "objectMetadata");
                              v929 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v928, "blockData");
                              v930 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v929, v377);
                              v931 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v930, "zoneExclusion");
                              v932 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v931, "zone");
                              v933 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v932, v811);
                              v934 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v933, "minAzimuth");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1936);
                              int v935 = *v934;
                              char *v934 = 7;
                              v1936[0] = v935;
                              v936 = *((uint64_t **)v934 + 1);
                              *((double *)v934 + 1) = v841;
                              double v1937 = *(double *)&v936;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v934);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1936);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1937, v935);
                              double v937 = *(v812 - 2);
                              v1934[0] = 7;
                              double v1935 = v937;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1934);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1934);
                              v938 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v939 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v938, "sceneComponentDynamicData");
                              v940 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v939, "ASCData");
                              v941 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v940, v247);
                              v942 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v941, "objectMetadata");
                              v943 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v942, "blockData");
                              v944 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v943, v377);
                              v945 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v944, "zoneExclusion");
                              v946 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v945, "zone");
                              v947 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v946, v811);
                              v948 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v947, "maxAzimuth");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1934);
                              int v949 = *v948;
                              char *v948 = 7;
                              v1934[0] = v949;
                              v950 = *((uint64_t **)v948 + 1);
                              *((double *)v948 + 1) = v937;
                              double v1935 = *(double *)&v950;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v948);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1934);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1935, v949);
                              double v951 = *(v812 - 1);
                              v1932[0] = 7;
                              double v1933 = v951;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1932);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1932);
                              v952 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v953 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v952, "sceneComponentDynamicData");
                              v954 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v953, "ASCData");
                              v955 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v954, v247);
                              v956 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v955, "objectMetadata");
                              v957 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v956, "blockData");
                              v958 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v957, v377);
                              v959 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v958, "zoneExclusion");
                              v960 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v959, "zone");
                              v961 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v960, v811);
                              v962 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v961, "minElevation");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1932);
                              int v963 = *v962;
                              char *v962 = 7;
                              v1932[0] = v963;
                              v964 = *((uint64_t **)v962 + 1);
                              *((double *)v962 + 1) = v951;
                              double v1933 = *(double *)&v964;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v962);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1932);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1933, v963);
                              double v965 = *v812;
                              v1930[0] = 7;
                              double v1931 = v965;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1930);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1930);
                              v966 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v967 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v966, "sceneComponentDynamicData");
                              v968 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v967, "ASCData");
                              v969 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v968, v247);
                              v970 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v969, "objectMetadata");
                              v971 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v970, "blockData");
                              v972 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v971, v377);
                              v973 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v972, "zoneExclusion");
                              v974 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v973, "zone");
                              v975 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v974, v811);
                              v976 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v975, "maxElevation");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1930);
                              int v837 = *v976;
                              char *v976 = 7;
                              v1930[0] = v837;
                              double v977 = *((double *)v976 + 1);
                              *((double *)v976 + 1) = v965;
                              double v1931 = v977;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v976);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1930);
                              v839 = &v1931;
                            }
                          }
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v839, v837);
                          ++v811;
                          v812 += 6;
                        }
                        while (v811 < *v798);
                      }
                    }
                  }
                }
              }
              ++v377;
              v378 += 500;
              v1725 += 125;
            }
            while (v377 < *v1721);
          }
          goto LABEL_104;
        }
        if (v257 != 2)
        {
          std::to_string(&v2084, v257);
          v1078 = std::string::insert(&v2084, 0, "Unknown ASC type ", 0x11uLL);
          std::string v2085 = *v1078;
          v1078->__r_.__value_.__l.__size_ = 0;
          v1078->__r_.__value_.__r.__words[2] = 0;
          v1078->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v2084.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v2084.__r_.__value_.__l.__data_);
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v1928, "not implemented");
          v1079 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v1080 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1079, "sceneComponentDynamicData");
          v1081 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1080, "ASCData");
          v1082 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1081, v247);
          int v1083 = SHIBYTE(v2085.__r_.__value_.__r.__words[2]);
          v1084 = (void *)v2085.__r_.__value_.__r.__words[0];
          if ((v2085.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v1085 = &v2085;
          }
          else {
            v1085 = (std::string *)v2085.__r_.__value_.__r.__words[0];
          }
          v1086 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1082, (char *)v1085);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1928);
          char v1087 = *v1086;
          char *v1086 = v1928[0];
          v1928[0] = v1087;
          v1088 = (uint64_t *)*((void *)v1086 + 1);
          *((void *)v1086 + 1) = v1929;
          v1929 = v1088;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1086);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1928);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1929, v1928[0]);
          if (v1083 < 0) {
            operator delete(v1084);
          }
          goto LABEL_104;
        }
        v258 = &v34[9752 * v247 + 206748];
        uint64_t v259 = (uint64_t *)*v258;
        v2048[0] = 4;
        v2049 = v259;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2048);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2048);
        uint64_t v260 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v261 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v260, "sceneComponentDynamicData");
        uint64_t v262 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v261, "ASCData");
        uint64_t v263 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v262, v247);
        v264 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v263, "HOAMetadata");
        v265 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v264, "hasADMMetadata");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2048);
        int v266 = *v265;
        char *v265 = 4;
        v2048[0] = v266;
        double v267 = (uint64_t *)*((void *)v265 + 1);
        *((void *)v265 + 1) = v259;
        v2049 = v267;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v265);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2048);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2049, v266);
        if (*v258)
        {
          v268 = &v34[9752 * v247 + 206752];
          v269 = (uint64_t *)*v268;
          v2046[0] = 4;
          v2047 = v269;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2046);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2046);
          double v270 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v271 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v270, "sceneComponentDynamicData");
          v272 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v271, "ASCData");
          v273 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v272, v247);
          int v274 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v273, "HOAMetadata");
          v275 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v274, "absoluteDistance");
          v276 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v275, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2046);
          int v277 = *v276;
          char *v276 = 4;
          v2046[0] = v277;
          v278 = (uint64_t *)*((void *)v276 + 1);
          *((void *)v276 + 1) = v269;
          v2047 = v278;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2046);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2047, v277);
          if (*v268)
          {
            double v279 = *(float *)&v34[9752 * v247 + 206756];
            v2044[0] = 7;
            double v2045 = v279;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2044);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2044);
            v280 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            uint64_t v281 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v280, "sceneComponentDynamicData");
            v282 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v281, "ASCData");
            v283 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v282, v247);
            uint64_t v284 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v283, "HOAMetadata");
            v285 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v284, "absoluteDistance");
            char v286 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v285, "distance");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2044);
            int v287 = *v286;
            *char v286 = 7;
            v2044[0] = v287;
            int v288 = *((uint64_t **)v286 + 1);
            *((double *)v286 + 1) = v279;
            double v2045 = *(double *)&v288;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v286);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2044);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2045, v287);
          }
          v289 = &v34[9752 * v247 + 206760];
          char v290 = (uint64_t *)*v289;
          v2042[0] = 4;
          v2043 = v290;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2042);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2042);
          uint64_t v291 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v292 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v291, "sceneComponentDynamicData");
          char v293 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v292, "ASCData");
          uint64_t v294 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v293, v247);
          v295 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v294, "HOAMetadata");
          char v296 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v295, "gain");
          uint64_t v297 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v296, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2042);
          int v298 = *v297;
          *uint64_t v297 = 4;
          v2042[0] = v298;
          char v299 = (uint64_t *)*((void *)v297 + 1);
          *((void *)v297 + 1) = v290;
          v2043 = v299;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v297);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2042);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2043, v298);
          if (*v289)
          {
            uint64_t v300 = (uint64_t *)v34[9752 * v247 + 206761];
            v2040[0] = 4;
            v2041 = v300;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2040);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2040);
            v301 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            char v302 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v301, "sceneComponentDynamicData");
            uint64_t v303 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v302, "ASCData");
            v304 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v303, v247);
            char v305 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v304, "HOAMetadata");
            uint64_t v306 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v305, "gain");
            v307 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v306, "isDB");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2040);
            int v308 = *v307;
            char *v307 = 4;
            v2040[0] = v308;
            v309 = (uint64_t *)*((void *)v307 + 1);
            *((void *)v307 + 1) = v300;
            v2041 = v309;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v307);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2040);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2041, v308);
            double v310 = *(float *)&v34[9752 * v247 + 206764];
            v2038[0] = 7;
            double v2039 = v310;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2038);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2038);
            v311 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            char v312 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v311, "sceneComponentDynamicData");
            v313 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v312, "ASCData");
            double v314 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v313, v247);
            v315 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v314, "HOAMetadata");
            v316 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v315, "gain");
            v317 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v316, "gain");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2038);
            int v318 = *v317;
            char *v317 = 7;
            v2038[0] = v318;
            double v319 = *((uint64_t **)v317 + 1);
            *((double *)v317 + 1) = v310;
            double v2039 = *(double *)&v319;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v317);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2038);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2039, v318);
          }
          v320 = (uint64_t *)v34[9752 * v247 + 206770];
          v2036[0] = 4;
          v2037 = v320;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2036);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2036);
          v321 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          int v322 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v321, "sceneComponentDynamicData");
          v323 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v322, "ASCData");
          double v324 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v323, v247);
          v325 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v324, "HOAMetadata");
          v326 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v325, "headLocked");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2036);
          int v327 = *v326;
          char *v326 = 4;
          v2036[0] = v327;
          v328 = (uint64_t *)*((void *)v326 + 1);
          *((void *)v326 + 1) = v320;
          v2037 = v328;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v326);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2036);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2037, v327);
          double v329 = &v34[9752 * v247 + 206772];
          v330 = (uint64_t *)*v329;
          v2034[0] = 4;
          v2035 = v330;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2034);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2034);
          v331 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          double v332 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v331, "sceneComponentDynamicData");
          v333 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v332, "ASCData");
          v334 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v333, v247);
          v335 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v334, "HOAMetadata");
          int v336 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v335, "headphoneVirtualize");
          v337 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v336, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2034);
          LODWORD(v326) = *v337;
          char *v337 = 4;
          v2034[0] = (char)v326;
          double v338 = (uint64_t *)*((void *)v337 + 1);
          *((void *)v337 + 1) = v330;
          v2035 = v338;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v337);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2034);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2035, (int)v326);
          if (*v329)
          {
            v339 = (uint64_t *)v34[9752 * v247 + 206773];
            v2032[0] = 4;
            v2033 = v339;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2032);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2032);
            v340 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            v341 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v340, "sceneComponentDynamicData");
            int v342 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v341, "ASCData");
            v343 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v342, v247);
            double v344 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v343, "HOAMetadata");
            v345 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v344, "headphoneVirtualize");
            v346 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v345, "bypass");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2032);
            int v347 = *v346;
            char *v346 = 4;
            v2032[0] = v347;
            int v348 = (uint64_t *)*((void *)v346 + 1);
            *((void *)v346 + 1) = v339;
            v2033 = v348;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v346);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2032);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2033, v347);
            double v349 = *(float *)&v34[9752 * v247 + 206776];
            v2030[0] = 7;
            double v2031 = v349;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2030);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2030);
            double v350 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            v351 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v350, "sceneComponentDynamicData");
            v352 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v351, "ASCData");
            v353 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v352, v247);
            int v354 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v353, "HOAMetadata");
            v355 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v354, "headphoneVirtualize");
            double v356 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v355, "DRR");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2030);
            int v357 = *v356;
            *double v356 = 7;
            v2030[0] = v357;
            double v358 = *((double *)v356 + 1);
            *((double *)v356 + 1) = v349;
            double v2031 = v358;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v356);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2030);
            v359 = &v2031;
LABEL_96:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v359, v357);
          }
        }
LABEL_104:
        ++v247;
        v1705 += 9752;
        v1704 += 9752;
        if (v247 == v1697) {
          goto LABEL_105;
        }
      }
      v978 = &v34[9752 * v247 + 206716];
      v979 = (uint64_t *)*v978;
      v2068[0] = 4;
      v2069 = v979;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2068);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2068);
      v980 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v981 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v980, "sceneComponentDynamicData");
      v982 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v981, "ASCData");
      v983 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v982, v247);
      v984 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v983, "channelMetadata");
      v985 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v984, "hasADMMetadata");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2068);
      int v986 = *v985;
      char *v985 = 4;
      v2068[0] = v986;
      v987 = (uint64_t *)*((void *)v985 + 1);
      *((void *)v985 + 1) = v979;
      v2069 = v987;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v985);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2068);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2069, v986);
      if (!*v978) {
        goto LABEL_104;
      }
      v988 = &v34[9752 * v247 + 206720];
      v989 = (uint64_t *)*v988;
      v2066[0] = 4;
      v2067 = v989;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2066);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2066);
      v990 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v991 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v990, "sceneComponentDynamicData");
      v992 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v991, "ASCData");
      v993 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v992, v247);
      v994 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v993, "channelMetadata");
      v995 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v994, "absoluteDistance");
      v996 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v995, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2066);
      int v997 = *v996;
      char *v996 = 4;
      v2066[0] = v997;
      v998 = (uint64_t *)*((void *)v996 + 1);
      *((void *)v996 + 1) = v989;
      v2067 = v998;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v996);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2066);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2067, v997);
      if (*v988)
      {
        double v999 = *(float *)&v34[9752 * v247 + 206724];
        v2064[0] = 7;
        double v2065 = v999;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2064);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2064);
        v1000 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v1001 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1000, "sceneComponentDynamicData");
        v1002 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1001, "ASCData");
        v1003 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1002, v247);
        v1004 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1003, "channelMetadata");
        v1005 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1004, "absoluteDistance");
        v1006 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1005, "distance");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2064);
        int v1007 = *v1006;
        char *v1006 = 7;
        v2064[0] = v1007;
        v1008 = *((uint64_t **)v1006 + 1);
        *((double *)v1006 + 1) = v999;
        double v2065 = *(double *)&v1008;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1006);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2064);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2065, v1007);
      }
      v1009 = &v34[9752 * v247 + 206728];
      v1010 = (uint64_t *)*v1009;
      v2062[0] = 4;
      v2063 = v1010;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2062);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2062);
      v1011 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1012 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1011, "sceneComponentDynamicData");
      v1013 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1012, "ASCData");
      v1014 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1013, v247);
      v1015 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1014, "channelMetadata");
      v1016 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1015, "gain");
      v1017 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1016, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2062);
      int v1018 = *v1017;
      char *v1017 = 4;
      v2062[0] = v1018;
      v1019 = (uint64_t *)*((void *)v1017 + 1);
      *((void *)v1017 + 1) = v1010;
      v2063 = v1019;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1017);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2062);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2063, v1018);
      if (*v1009)
      {
        v1020 = (uint64_t *)v34[9752 * v247 + 206729];
        v2060[0] = 4;
        v2061 = v1020;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2060);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2060);
        v1021 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v1022 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1021, "sceneComponentDynamicData");
        v1023 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1022, "ASCData");
        v1024 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1023, v247);
        v1025 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1024, "channelMetadata");
        v1026 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1025, "gain");
        v1027 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1026, "isDB");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2060);
        int v1028 = *v1027;
        char *v1027 = 4;
        v2060[0] = v1028;
        v1029 = (uint64_t *)*((void *)v1027 + 1);
        *((void *)v1027 + 1) = v1020;
        v2061 = v1029;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1027);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2060);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2061, v1028);
        double v1030 = *(float *)&v34[9752 * v247 + 206732];
        v2058[0] = 7;
        double v2059 = v1030;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2058);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2058);
        v1031 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v1032 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1031, "sceneComponentDynamicData");
        v1033 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1032, "ASCData");
        v1034 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1033, v247);
        v1035 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1034, "channelMetadata");
        v1036 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1035, "gain");
        v1037 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1036, "gain");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2058);
        int v1038 = *v1037;
        char *v1037 = 7;
        v2058[0] = v1038;
        v1039 = *((uint64_t **)v1037 + 1);
        *((double *)v1037 + 1) = v1030;
        double v2059 = *(double *)&v1039;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1037);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2058);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2059, v1038);
      }
      v1040 = (uint64_t *)v34[9752 * v247 + 206738];
      v2056[0] = 4;
      v2057 = v1040;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2056);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2056);
      v1041 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1042 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1041, "sceneComponentDynamicData");
      v1043 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1042, "ASCData");
      v1044 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1043, v247);
      v1045 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1044, "channelMetadata");
      v1046 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1045, "headLocked");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2056);
      int v1047 = *v1046;
      char *v1046 = 4;
      v2056[0] = v1047;
      v1048 = (uint64_t *)*((void *)v1046 + 1);
      *((void *)v1046 + 1) = v1040;
      v2057 = v1048;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1046);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2056);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2057, v1047);
      v1049 = &v34[9752 * v247 + 206740];
      v1050 = (uint64_t *)*v1049;
      v2054[0] = 4;
      v2055 = v1050;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2054);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2054);
      v1051 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1052 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1051, "sceneComponentDynamicData");
      v1053 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1052, "ASCData");
      v1054 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1053, v247);
      v1055 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1054, "channelMetadata");
      v1056 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1055, "headphoneVirtualize");
      v1057 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1056, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2054);
      LODWORD(v1046) = *v1057;
      char *v1057 = 4;
      v2054[0] = (char)v1046;
      v1058 = (uint64_t *)*((void *)v1057 + 1);
      *((void *)v1057 + 1) = v1050;
      v2055 = v1058;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1057);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2054);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2055, (int)v1046);
      if (!*v1049) {
        goto LABEL_104;
      }
      v1059 = (uint64_t *)v34[9752 * v247 + 206741];
      v2052[0] = 4;
      v2053 = v1059;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2052);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2052);
      v1060 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1061 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1060, "sceneComponentDynamicData");
      v1062 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1061, "ASCData");
      v1063 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1062, v247);
      v1064 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1063, "channelMetadata");
      v1065 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1064, "headphoneVirtualize");
      v1066 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1065, "bypass");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2052);
      int v1067 = *v1066;
      char *v1066 = 4;
      v2052[0] = v1067;
      v1068 = (uint64_t *)*((void *)v1066 + 1);
      *((void *)v1066 + 1) = v1059;
      v2053 = v1068;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1066);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2052);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2053, v1067);
      double v1069 = *(float *)&v34[9752 * v247 + 206744];
      v2050[0] = 7;
      double v2051 = v1069;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2050);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2050);
      v1070 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1071 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1070, "sceneComponentDynamicData");
      v1072 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1071, "ASCData");
      v1073 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1072, v247);
      v1074 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1073, "channelMetadata");
      v1075 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1074, "headphoneVirtualize");
      v1076 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1075, "DRR");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2050);
      int v357 = *v1076;
      char *v1076 = 7;
      v2050[0] = v357;
      double v1077 = *((double *)v1076 + 1);
      *((double *)v1076 + 1) = v1069;
      double v2051 = v1077;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1076);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2050);
      v359 = &v2051;
      goto LABEL_96;
    }
LABEL_105:
    v1089 = (uint64_t *)v34[1445216];
    v1926[0] = 4;
    v1927 = v1089;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1926);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1926);
    v1090 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
    v1091 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1090, "extDynamicData");
    v1092 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1091, "hasData");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1926);
    int v1093 = *v1092;
    char *v1092 = 4;
    v1926[0] = v1093;
    v1094 = (uint64_t *)*((void *)v1092 + 1);
    *((void *)v1092 + 1) = v1089;
    v1927 = v1094;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1092);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1926);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1927, v1093);
  }
LABEL_204:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v1695, (uint64_t)v2162, v1696);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2162);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2163, v2162[0]);
}