uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_3(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)a1 + 8) + 40);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_store_extra_inhabitant_index_3Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SymmetricRatchet();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a3)
  {
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    return v13(a1, a2, a2, v11);
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a6);
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + *(int *)(a4 + 20);
    return v16(v18, a2, a2, v17);
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unsigned char *specialized Data._Representation.init(_:)(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t __swift_get_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricRatchet();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a2)
  {
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v11(a1, a2, v9);
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + *(int *)(a3 + 20);
    return v14(v16, a2, v15);
  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(result) - result;
      if (!__OFSUB__(HIDWORD(result), result))
      {
        uint64_t v8 = (int)v8;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_26;
    case 2uLL:
      uint64_t v10 = *(void *)(result + 16);
      uint64_t v9 = *(void *)(result + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      break;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
          goto LABEL_11;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (v11) {
            goto LABEL_28;
          }
          goto LABEL_11;
        case 3uLL:
          char v17 = v8 == 0;
          goto LABEL_24;
        default:
          uint64_t v12 = BYTE6(a4);
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (result >> 32 < (int)result) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(v7, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v7, v7 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = v7;
                  unint64_t v19 = a2;
                  goto LABEL_23;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(result + 16);
                  uint64_t v22 = *(void *)(result + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  break;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = v7;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
LABEL_23:
                  outlined consume of Data._Representation(v18, v19);
                  break;
              }
            }
          }
          else
          {
            char v17 = 0;
          }
LABEL_24:
          uint64_t result = v17 & 1;
          break;
      }
      break;
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      __s1 = __DataStorage._length.getter();
      if (__s1 >= v9) {
        size_t v12 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v12 = __s1;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      if (!v10)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return __s1;
      }
      int v13 = memcmp(v7, v10, v12);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v13 == 0;
LABEL_24:
      char v22 = v8;
LABEL_29:
      *a4 = v22;
      return __s1;
    case 2uLL:
      uint64_t v14 = *(void *)(a2 + 16);
      uint64_t v15 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v16 = (char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_32;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_31;
      }
      __s1 = __DataStorage._length.getter();
      if (__s1 >= v19) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = __s1;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v16) {
        goto LABEL_38;
      }
      int v21 = memcmp(v7, v16, v20);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v21 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v22 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v24 = a3;
      char v25 = BYTE2(a3);
      char v26 = BYTE3(a3);
      char v27 = BYTE4(a3);
      char v28 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL SecMPSignAndProtectMessage(const __CFData *a1, uint64_t a2, uint64_t a3, CFDataRef theData, CFErrorRef *a5)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  CFDataRef v9 = a1;
  BOOL v10 = 0;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (!a1 || !a2 || !a3 || !theData) {
    goto LABEL_38;
  }
  CFIndex length = CFDataGetLength(theData);
  CFAllocatorRef v12 = *v11;
  CFDataRef Mutable = CFDataCreateMutable(*v11, 0);
  uint64_t v14 = CFDataCreateMutable(v12, 0);
  UInt8 bytes = 2;
  CFDataAppendBytes(v14, &bytes, 1);
  uint64_t v51 = v8;
  SecMPFIAppendCanonicalPublicHash(v8, v14);
  uint64_t v52 = v7;
  SecMPPIAppendCanonicalHash(v7, v14);
  CFIndex v15 = CFDataGetLength(v9);
  BytePtr = CFDataGetBytePtr(v9);
  CFIndex v17 = CFDataGetLength(Mutable);
  CFDataRef v50 = v9;
  if ((unint64_t)(v15 - 0x7FFFFFFF) < 0xFFFFFFFF80000002) {
    goto LABEL_44;
  }
  if (!BytePtr || (CFDataIncreaseLength(Mutable, v15 + 16), (MutableBytePtr = CFDataGetMutableBytePtr(Mutable)) == 0))
  {
    int v46 = -909;
    goto LABEL_47;
  }
  uint64_t v19 = (uint64_t)&MutableBytePtr[v17];
  if (SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], 0x10uLL, &MutableBytePtr[v17])
    || !CFDataGetBytePtr(v14)
    || CFDataGetLength(v14) < 1)
  {
LABEL_44:
    int v46 = -50;
LABEL_47:
    CFDataSetLength(Mutable, v17);
    SecMPCreateError(0, v46, @"Failed to Encrypt message", 0, a5);
    CFDataRef v38 = 0;
    CFDataRef v36 = 0;
    CFDataRef cf = 0;
    BOOL v10 = 0;
    uint64_t v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
    goto LABEL_18;
  }
  int v20 = SecMPComputeIntegrityTag(v9, v14, v19);
  if (v20)
  {
    int v46 = v20;
    goto LABEL_47;
  }
  v48 = v14;
  ccaes_ctr_crypt_mode();
  ccctr_one_shot();
  CFIndex v21 = SecMPPIEncryptionSpace(v52, 1);
  CFIndex v22 = CFDataGetLength(Mutable);
  if (v22 < v21) {
    CFIndex v21 = v22;
  }
  v23 = CFDataGetBytePtr(Mutable);
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  CFDataRef v25 = CFDataCreateWithBytesNoCopy(v12, v23, v21, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  CFIndex v26 = CFDataGetLength(Mutable) - v21;
  char v27 = CFDataGetBytePtr(Mutable);
  CFDataRef v28 = CFDataCreateWithBytesNoCopy(v12, &v27[v21], v26, v24);
  CFDataAppendBytes(theData, &bytes, 1);
  CFIndex v29 = CFDataGetLength(theData);
  CFDataIncreaseLength(theData, 2);
  CFIndex v30 = CFDataGetLength(theData);
  CFDataRef cf = v25;
  if (SecMPPIAppendPKIEncryptedData(v52, (uint64_t)v25, theData))
  {
    v31 = CFDataGetBytePtr(v28);
    CFIndex v32 = CFDataGetLength(v28);
    CFDataAppendBytes(theData, v31, v32);
    v33 = &CFDataGetMutableBytePtr(theData)[v29];
    uint64_t v34 = CFDataGetLength(theData) - v30;
    int inserted = insertSize(v34, v33, a5);
    uint64_t v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
    CFDataRef v36 = v28;
    if (inserted)
    {
      CFDataRef v38 = 0;
      BOOL v10 = 0;
    }
    else
    {
      v37 = CFDataGetBytePtr(theData);
      CFDataRef v38 = CFDataCreate(v12, &v37[v30], v34);
      BOOL v10 = SecMPFIAppendSignature(v51, (uint64_t)v38, theData, a5);
    }
  }
  else
  {
    CFDataRef v38 = 0;
    BOOL v10 = 0;
    uint64_t v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
    CFDataRef v36 = v28;
  }
  uint64_t v14 = v48;
LABEL_18:
  CFDataRef v9 = v50;
  if (a5 && *a5)
  {
    v39 = MessageProtectionLog();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      CFErrorRef v40 = *a5;
      *(_DWORD *)buf = 138412546;
      v55 = v14;
      __int16 v56 = 2112;
      CFErrorRef v57 = v40;
      v41 = "Message Encryption: sender/receiver hash: %@ status: %@";
      v42 = v39;
      uint32_t v43 = 22;
LABEL_24:
      _os_log_impl(&dword_2163F2000, v42, OS_LOG_TYPE_INFO, v41, buf, v43);
    }
  }
  else
  {
    v39 = MessageProtectionLog();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v55 = v14;
      v41 = "Message Encryption: sender/receiver hash: %@ status: success";
      v42 = v39;
      uint32_t v43 = 12;
      goto LABEL_24;
    }
  }

  if (v14) {
    CFRelease(v14);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v38) {
    CFRelease(v38);
  }
  uint64_t v7 = v52;
  if (!v10) {
    CFDataSetLength(theData, length);
  }
  uint64_t v8 = v51;
LABEL_38:
  if (a5)
  {
    if (!v10 && !*a5)
    {
      CFStringRef v44 = CFStringCreateWithFormat(*v11, 0, @"Parameter error, all pointers must be valid. sourceMessage = %p, sender = %p, receiver = %p, protected message = %p.", v9, v8, v7, theData);
      SecMPCreateError(0, -7, v44, 0, a5);
      if (v44) {
        CFRelease(v44);
      }
    }
  }
  return v10;
}

CFDataRef SecMPCopyProtectedMsgHash(const __CFData *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  CFIndex Length = CFDataGetLength(a1);
  if (Length)
  {
    unint64_t v7 = Length;
    uint64_t v8 = [*(id *)(a2 + 48) encryptionSize];
    CFDataRef v9 = 0;
    if ((v8 & 0x8000000000000000) == 0)
    {
      CFIndex v10 = v8;
      if (v7 >= v8 + 3)
      {
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        BytePtr = CFDataGetBytePtr(a1);
        CFDataRef v13 = CFDataCreateWithBytesNoCopy(v11, BytePtr + 3, v10, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
        uint64_t v14 = CFDataGetBytePtr(v13);
        CC_LONG v15 = CFDataGetLength(v13);
        CC_SHA256(v14, v15, md);
        CFDataRef v9 = CFDataCreate(v11, md, 32);
        if (v13) {
          CFRelease(v13);
        }
      }
    }
  }
  else
  {
    MPLogAndAssignCFError(1, a3, @"SecMPVerifyMessageContents: Missing incoming data.");
    return 0;
  }
  return v9;
}

uint64_t SecMPComputeIntegrityTag(const __CFData *a1, const __CFData *a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x263EF8340];
  CFIndex Length = CFDataGetLength(a1);
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex v8 = CFDataGetLength(a2);
  CFDataRef v9 = CFDataGetBytePtr(a2);
  uint64_t v10 = *(void *)ccsha256_di();
  MEMORY[0x270FA5388]();
  CFAllocatorRef v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388]();
  uint64_t result = 4294966387;
  if (a3 && BytePtr && Length >= 1)
  {
    cchmac_init();
    cchmac_update();
    if (v9)
    {
      if ((v8 & 0x8000000000000000) == 0) {
        cchmac_update();
      }
    }
    cchmac_final();
    *(_DWORD *)(a3 + 11) = *(_DWORD *)v11;
    *(unsigned char *)(a3 + 15) = v11[4];
    cc_clear();
    cc_clear();
    return 0;
  }
  return result;
}

SecKeyRef SecMWCreateEphemeralDeviceIdentity(const __CFAllocator *a1, CFErrorRef *a2)
{
  int valuePtr = 256;
  CFNumberRef v4 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  CFDictionaryRef v12 = CFDictionaryCreateForCFTypes(a1, v5, v6, v7, v8, v9, v10, v11, *MEMORY[0x263F16F50], *MEMORY[0x263EFFB38]);
  MutableForCFTypesWith = CFDictionaryCreateMutableForCFTypesWith(a1, v13, v14, v15, v16, v17, v18, v19, (void *)*MEMORY[0x263F16FA8], *MEMORY[0x263F16FB8]);
  SecKeyRef RandomKey = SecKeyCreateRandomKey(MutableForCFTypesWith, a2);
  if (MutableForCFTypesWith) {
    CFRelease(MutableForCFTypesWith);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v4) {
    CFRelease(v4);
  }
  return RandomKey;
}

CFDataRef SecMWCreateSessionSalt(const __CFAllocator *a1, CFErrorRef *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], 0x10uLL, bytes)) {
    return CFDataCreate(a1, bytes, 16);
  }
  if (!a2) {
    return 0;
  }
  CFErrorRef v4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"SecRandomCopyBytes", -1, 0);
  CFDataRef result = 0;
  *a2 = v4;
  return result;
}

CFDataRef SecMWCreateSessionSeed(const __CFAllocator *a1, CFErrorRef *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], 0x20uLL, bytes)) {
    return CFDataCreate(a1, bytes, 32);
  }
  if (!a2) {
    return 0;
  }
  CFErrorRef v4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"SecRandomCopyBytes", -1, 0);
  CFDataRef result = 0;
  *a2 = v4;
  return result;
}

CFDictionaryRef CFDictionaryCreateForCFTypes(CFAllocatorRef allocator, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  v23 = &a10;
  unint64_t v11 = 0;
  if (a9)
  {
    do
    {
      v11 += 2;
      CFDictionaryRef v12 = v23;
      v23 += 2;
    }
    while (v12[1]);
  }
  unint64_t v13 = v11 >> 1;
  CFAllocatorRef v24 = (const void **)&a9;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, v11 >> 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable) {
    return 0;
  }
  int v15 = Mutable;
  if (v11)
  {
    int v16 = (const void *)*MEMORY[0x263EFFD08];
    do
    {
      int v17 = v24;
      int v18 = *v24;
      v24 += 2;
      int v19 = v17[1];
      if (v19) {
        int v20 = v19;
      }
      else {
        int v20 = v16;
      }
      CFDictionarySetValue(v15, v18, v20);
      --v13;
    }
    while (v13);
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(allocator, v15);
  CFRelease(v15);
  return Copy;
}

__CFDictionary *CFDictionaryCreateMutableForCFTypesWith(const __CFAllocator *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *key, uint64_t a10)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v14 = (const void **)&a10;
  unint64_t v11 = key;
  if (key)
  {
    do
    {
      CFDictionarySetValue(Mutable, v11, *v14);
      CFDictionaryRef v12 = v14 + 1;
      v14 += 2;
      unint64_t v11 = *v12;
    }
    while (*v12);
  }
  return Mutable;
}

uint64_t NoError()
{
  return [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.messageprotection" code:0 userInfo:MEMORY[0x263EFFA78]];
}

id MessageProtectionLog()
{
  if (MessageProtectionLog_onceToken != -1) {
    dispatch_once(&MessageProtectionLog_onceToken, &__block_literal_global);
  }
  uint64_t v0 = (void *)MessageProtectionLog_log;
  return v0;
}

uint64_t __MessageProtectionLog_block_invoke()
{
  MessageProtectionLog_log = (uint64_t)os_log_create("com.apple.messageprotection", "MessageProtection");
  return MEMORY[0x270F9A758]();
}

void MPLogAndAssignCFError(uint64_t a1, uint64_t *a2, void *a3)
{
  v11[1] = *MEMORY[0x263EF8340];
  id v5 = a3;
  int v6 = v5;
  if (a2)
  {
    uint64_t v7 = (void *)MEMORY[0x263F087E8];
    uint64_t v10 = *MEMORY[0x263F08320];
    v11[0] = v5;
    int v8 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v10 count:1];
    *a2 = [v7 errorWithDomain:@"com.apple.messageprotection" code:a1 userInfo:v8];

    int v9 = MessageProtectionLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      MPLogAndAssignCFError_cold_2();
    }
  }
  else
  {
    int v9 = MessageProtectionLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      MPLogAndAssignCFError_cold_1();
    }
  }
}

void MPLogAndAssignError(uint64_t a1, void *a2, void *a3)
{
  v11[1] = *MEMORY[0x263EF8340];
  id v5 = a3;
  int v6 = v5;
  if (a2)
  {
    uint64_t v7 = (void *)MEMORY[0x263F087E8];
    uint64_t v10 = *MEMORY[0x263F08320];
    v11[0] = v5;
    int v8 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v10 count:1];
    *a2 = [v7 errorWithDomain:@"com.apple.messageprotection" code:a1 userInfo:v8];

    int v9 = MessageProtectionLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      MPLogAndAssignCFError_cold_2();
    }
  }
  else
  {
    int v9 = MessageProtectionLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      MPLogAndAssignError_cold_1();
    }
  }
}

uint64_t SecMPCreateError(int a1, CFIndex a2, const __CFString *a3, __CFError *cf, CFErrorRef *a5)
{
  userInfoKeys[2] = *(void **)MEMORY[0x263EF8340];
  if (a5 && !*a5)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    MutableCFDictionaryRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, a3);
    if (cf)
    {
      CFStringRef v11 = CFErrorCopyDescription(cf);
      CFStringAppend(MutableCopy, @" \\ ");
      CFStringAppend(MutableCopy, v11);
      CFRelease(v11);
      CFIndex v12 = 2;
    }
    else
    {
      CFIndex v12 = 1;
    }
    unint64_t v13 = (void *)*MEMORY[0x263EFFC88];
    userInfoKeys[0] = *(void **)MEMORY[0x263EFFC48];
    userInfoKeys[1] = v13;
    int v14 = (CFErrorDomain *)&sLocalErrorDomain;
    userInfoValues[0] = MutableCopy;
    userInfoValues[1] = cf;
    if (a1) {
      int v14 = (CFErrorDomain *)MEMORY[0x263EFFC58];
    }
    *a5 = CFErrorCreateWithUserInfoKeysAndValues(v9, *v14, a2, (const void *const *)userInfoKeys, (const void *const *)userInfoValues, v12);
    CFRelease(MutableCopy);
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

void sub_2163F825C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2163F8594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t SecMPPIEncryptionSpace(uint64_t a1, int a2)
{
  unint64_t v3 = [*(id *)(a1 + 32) encryptionSize];
  uint64_t v4 = -44;
  if (!a2) {
    uint64_t v4 = -43;
  }
  unint64_t v5 = v3 + v4;
  if (v3 >= 0x2A) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t SecMPPIRecreateSignature(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  MEMORY[0x2166CD500]();
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  MEMORY[0x270FA5388](v6);
  ccder_decode_sequence_tl();
  mp_decode_forced_uint();
  mp_decode_forced_uint();
  uint64_t v7 = *a3 + *a4;
  ccder_encode_integer();
  ccder_encode_integer();
  uint64_t result = ccder_encode_constructed_tl();
  *a3 = result;
  *a4 = (v7 - result) & ~((v7 - result) >> 63);
  return result;
}

uint64_t mp_decode_forced_uint()
{
  uint64_t result = ccder_decode_tl();
  if (result)
  {
    uint64_t v1 = result;
    if ((ccn_read_uint() & 0x80000000) != 0) {
      return 0;
    }
    else {
      return v1;
    }
  }
  return result;
}

uint64_t SecMPVerifyAndExposeMessage(const __CFData *a1, uint64_t a2, uint64_t a3, const __CFData *a4, CFErrorRef *a5)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          if (CFDataGetLength(a1))
          {
            BytePtr = CFDataGetBytePtr(a1);
            CFIndex v11 = CFDataGetLength(a4);
            CFIndex v12 = v11;
            if (*BytePtr != 2)
            {
              SecMPCreateError(0, -8, @"Unknown format of message to verify and expose", 0, a5);
LABEL_67:
              CFDataSetLength(a4, v12);
              return 0;
            }
            CFIndex v57 = v11;
            CFIndex v56 = CFDataGetLength(a4);
            CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
            unint64_t v15 = CFDataGetLength(a1);
            if (v15 <= 3)
            {
              int v16 = @"SecMPVerifyMessageContents: Incoming length is too short.";
LABEL_34:
              MPLogAndAssignCFError(1, (uint64_t *)a5, v16);
              CFDataRef cf = 0;
              goto LABEL_35;
            }
            unint64_t v19 = v15;
            unint64_t v62 = v15;
            unsigned __int16 v61 = 0;
            uint64_t v20 = [*(id *)(a3 + 48) encryptionSize];
            if (v20 < 0)
            {
              int v16 = @"SecMPVerifyMessageContents: Inconsistent encryptionSize.";
              goto LABEL_34;
            }
            unint64_t v21 = v20;
            CFIndex v22 = CFDataGetBytePtr(a1);
            v60 = v22;
            CFDataAppendBytes(Mutable, v22, 1);
            uint64_t v23 = SecMPPublicIdentityCopyFromPrivate(0, a3);
            if (!v23)
            {
              int v16 = @"SecMPVerifyMessageContents: Unable to get public identity from private of the receiver.";
              goto LABEL_34;
            }
            unint64_t v54 = v21;
            CFAllocatorRef v24 = Mutable;
            CFDataRef v25 = (id *)v23;
            SecMPPIAppendCanonicalHash(a2, v24);
            CFDataRef cf = v25;
            uint64_t v26 = (uint64_t)v25;
            CFMutableDictionaryRef Mutable = v24;
            SecMPPIAppendCanonicalHash(v26, v24);
            v60 = v22 + 1;
            unint64_t v62 = v19 - 1;
            if (readSize((uint64_t *)&v60, (uint64_t *)&v62, &v61, a5))
            {
LABEL_35:
              v39 = 0;
              CFDataRef ReferenceFromRange = 0;
              CFDataRef v36 = 0;
              CFDataRef v34 = 0;
              CFDataRef v31 = 0;
              goto LABEL_36;
            }
            uint64_t v27 = v54;
            if (v54 > v61 || v62 < (unint64_t)v61 + 60)
            {
              v47 = @"SecMPVerifyMessageContents: Insufficient size remaining.";
            }
            else
            {
              CFIndex v28 = v62 - v61;
              uint64_t v29 = v19 - v28;
              if (v29 >= 0)
              {
                CFIndex v30 = CFDataGetBytePtr(a1);
                CFAllocatorRef bytesDeallocator = (const __CFAllocator *)*MEMORY[0x263EFFB28];
                CFDataRef v31 = CFDataCreateWithBytesNoCopy(v13, &v30[v29], v28, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
                CFIndex v32 = v61;
                v33 = CFDataGetBytePtr(a1);
                CFIndex v51 = v32;
                CFDataRef v34 = CFDataCreateWithBytesNoCopy(v13, v33 + 3, v32, bytesDeallocator);
                v35 = CFDataGetBytePtr(v34);
                CFDataRef v36 = CFDataCreateWithBytesNoCopy(v13, v35, v54, bytesDeallocator);
                CFIndex length = SecMPFIEncryptionSpace(a3);
                if (length < 0)
                {
                  MPLogAndAssignCFError(1, (uint64_t *)a5, @"SecMPVerifyMessageContents: Insufficient public key encryption space.");
                }
                else
                {
                  bytesDeallocatora = CFDataGetBytePtr(v34);
                  CFIndex v50 = CFDataGetLength(v34);
                  v49 = (unsigned __int8 *)CFDataGetBytePtr(v31);
                  CFIndex v37 = CFDataGetLength(v31);
                  if (SecMPPIVerifySignature(a2, (uint64_t)bytesDeallocatora, v50, v49, v37, (uint64_t *)a5))
                  {
                    CFIndex v55 = v51 - v54;
                    CFDataRef ReferenceFromRange = CFDataCreateReferenceFromRange(v13, v34, v27, v51 - v27);
                    v39 = CFDataCreateMutable(v13, 0);
                    if (SecMPFIDecrypt(a3, (uint64_t)v36, v39, &length, a5))
                    {
                      if (v55 < 1) {
                        goto LABEL_46;
                      }
                      CFIndex v40 = length;
                      unint64_t v41 = [cf[4] encryptionSize];
                      unint64_t v42 = v41 - 44;
                      if (v41 < 0x2A) {
                        unint64_t v42 = 0;
                      }
                      if (v40 == v42) {
                        int v43 = 1;
                      }
                      else {
LABEL_46:
                      }
                        int v43 = 0;
                      CFDataSetLength(v39, length);
                      v48 = CFDataGetBytePtr(ReferenceFromRange);
                      CFDataAppendBytes(v39, v48, v55);
                      BOOL v44 = SecMPDecryptUsingCTREmbeddedKey(v39, Mutable, a4, v43, a5) == 0;
                      if (!a5) {
                        goto LABEL_48;
                      }
LABEL_37:
                      if (*a5)
                      {
                        v45 = CFCopyDescription(*a5);
                        int v46 = MessageProtectionLog();
                        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 138412546;
                          v64 = Mutable;
                          __int16 v65 = 2112;
                          v66 = v45;
                          _os_log_impl(&dword_2163F2000, v46, OS_LOG_TYPE_DEFAULT, "Message Decryption: sender/receiver hash: %@ status: %@", buf, 0x16u);
                        }

LABEL_50:
                        if (Mutable) {
                          CFRelease(Mutable);
                        }
                        if (v31) {
                          CFRelease(v31);
                        }
                        if (v34) {
                          CFRelease(v34);
                        }
                        if (v36) {
                          CFRelease(v36);
                        }
                        if (v39) {
                          CFRelease(v39);
                        }
                        if (ReferenceFromRange) {
                          CFRelease(ReferenceFromRange);
                        }
                        if (cf) {
                          CFRelease(cf);
                        }
                        if (v44) {
                          return 1;
                        }
                        CFDataSetLength(a4, v56);
                        CFIndex v12 = v57;
                        goto LABEL_67;
                      }
LABEL_48:
                      v45 = MessageProtectionLog();
                      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412290;
                        v64 = Mutable;
                        _os_log_impl(&dword_2163F2000, v45, OS_LOG_TYPE_DEFAULT, "Message Decryption: sender/receiver hash: %@ status: success", buf, 0xCu);
                      }
                      goto LABEL_50;
                    }
LABEL_36:
                    BOOL v44 = 0;
                    if (!a5) {
                      goto LABEL_48;
                    }
                    goto LABEL_37;
                  }
                }
                v39 = 0;
                CFDataRef ReferenceFromRange = 0;
                goto LABEL_36;
              }
              v47 = @"SecMPVerifyMessageContents: Insufficient size remaining for the signature.";
            }
            MPLogAndAssignCFError(1, (uint64_t *)a5, v47);
            goto LABEL_35;
          }
          int v17 = @"SecMPVerifyAndExposeMessage: Missing incoming data.";
        }
        else
        {
          int v17 = @"SecMPVerifyAndExposeMessage: Missing exposedMessageContents DataRef.";
        }
      }
      else
      {
        int v17 = @"SecMPVerifyAndExposeMessage: Missing receiver.";
      }
    }
    else
    {
      int v17 = @"SecMPVerifyAndExposeMessage: Missing sender.";
    }
  }
  else
  {
    int v17 = @"SecMPVerifyAndExposeMessage: Missing incoming message.";
  }
  MPLogAndAssignCFError(1, (uint64_t *)a5, v17);
  return 0;
}

CFDataRef CFDataCreateReferenceFromRange(const __CFAllocator *a1, CFDataRef theData, uint64_t a3, CFIndex a4)
{
  uint64_t v6 = &CFDataGetBytePtr(theData)[a3];
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  return CFDataCreateWithBytesNoCopy(a1, v6, a4, v7);
}

uint64_t SecMPDecryptUsingCTREmbeddedKey(const __CFData *a1, const __CFData *a2, const __CFData *a3, int a4, CFErrorRef *a5)
{
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a3);
  CFIndex v12 = CFDataGetLength(a1);
  uint64_t v13 = 4294966387;
  if (v12 < 17 || !BytePtr) {
    goto LABEL_10;
  }
  CFDataIncreaseLength(a3, v12 - 16);
  CFDataGetMutableBytePtr(a3);
  ccaes_ctr_crypt_mode();
  ccctr_one_shot();
  if (a4
    && (!CFDataGetBytePtr(a2)
     || CFDataGetLength(a2) < 1
     || SecMPVerifyIntegrityTag(a3, a2, (uint64_t)BytePtr)))
  {
    uint64_t v13 = 4294967246;
LABEL_10:
    CFDataSetLength(a3, Length);
    SecMPCreateError(0, (int)v13, @"Failed to Decrypt message", 0, a5);
    return v13;
  }
  return 0;
}

uint64_t SecMPVerifyIntegrityTag(const __CFData *a1, const __CFData *a2, uint64_t a3)
{
  CFDataGetLength(a1);
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a2);
  int v8 = CFDataGetBytePtr(a2);
  ccsha256_di();
  MEMORY[0x270FA5388]();
  MEMORY[0x270FA5388]();
  uint64_t v9 = 4294966387;
  if (a3 && BytePtr)
  {
    cchmac_init();
    cchmac_update();
    if (v8 && (Length & 0x8000000000000000) == 0) {
      cchmac_update();
    }
    cchmac_final();
    if (cc_cmp_safe()) {
      uint64_t v9 = 4294942003;
    }
    else {
      uint64_t v9 = 0;
    }
    cc_clear();
    cc_clear();
  }
  return v9;
}

void SecMPLogError(__CFError *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    CFDictionaryRef v2 = CFErrorCopyUserInfo(a1);
    CFIndex Code = CFErrorGetCode(a1);
    CFStringRef Domain = CFErrorGetDomain(a1);
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x263EFFC48]);
    if (CFDictionaryGetValue(v2, (const void *)*MEMORY[0x263EFFC88])) {
      SecMPLogError();
    }
    CFStringGetCString(Domain, buffer, 1024, 0x8000100u);
    CFStringGetCString(Value, v6, 1024, 0x8000100u);
    syslog(3, "MessageProtection: %s (%ld) -- %s", buffer, Code, v6);
    if (v2) {
      CFRelease(v2);
    }
  }
}

uint64_t insertSize(uint64_t a1, _WORD *a2, CFErrorRef *a3)
{
  if (a1 > 65534)
  {
    SecMPCreateError(0, -7, @"Message to be encrypted larger than 64K", 0, a3);
    return 4294967246;
  }
  else
  {
    unsigned int v3 = a1;
    uint64_t result = 0;
    *a2 = bswap32(v3) >> 16;
  }
  return result;
}

uint64_t appendSize(uint64_t a1, CFMutableDataRef theData, CFErrorRef *a3)
{
  if (a1 > 65534)
  {
    SecMPCreateError(0, -7, @"Size larger than 64K", 0, a3);
    return 4294967246;
  }
  else
  {
    *(_WORD *)UInt8 bytes = bswap32(a1) >> 16;
    CFDataAppendBytes(theData, bytes, 2);
    return 0;
  }
}

uint64_t appendOneByteSize(uint64_t a1, CFMutableDataRef theData, CFErrorRef *a3)
{
  if (a1 > 254)
  {
    SecMPCreateError(0, -7, @"Size larger than 255", 0, a3);
    return 4294967246;
  }
  else
  {
    UInt8 bytes = a1;
    CFDataAppendBytes(theData, &bytes, 1);
    return 0;
  }
}

uint64_t readSize(uint64_t *a1, uint64_t *a2, _WORD *a3, CFErrorRef *a4)
{
  if (a1 && a2 && a3 && (uint64_t v4 = *a2 - 2, (unint64_t)*a2 >= 2))
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1 + 2;
    *a3 = bswap32(*(unsigned __int16 *)*a1) >> 16;
    *a2 = v4;
    *a1 = v6;
  }
  else
  {
    SecMPCreateError(0, -7, @"Failed to read size", 0, a4);
    return 4294967246;
  }
  return v5;
}

uint64_t appendSizeAndData(const __CFData *a1, __CFData *a2, CFErrorRef *a3)
{
  CFIndex Length = CFDataGetLength(a1);
  if (appendSize(Length, a2, a3)) {
    return 4294942005;
  }
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex v8 = CFDataGetLength(a1);
  CFDataAppendBytes(a2, BytePtr, v8);
  return 0;
}

uint64_t appendPublicOctetsAndSize(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  return 4294941021;
}

void appendLongLong(__CFData *a1, unint64_t a2)
{
  v2[1] = *MEMORY[0x263EF8340];
  v2[0] = bswap64(a2);
  CFDataAppendBytes(a1, (const UInt8 *)v2, 8);
}

uint64_t readLongLong(unint64_t **a1, uint64_t *a2, void *a3)
{
  uint64_t result = 4294967246;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *a2 - 8;
    if ((unint64_t)*a2 >= 8)
    {
      uint64_t result = 0;
      uint64_t v6 = (uint64_t)(*a1 + 1);
      *a3 = bswap64(**a1);
      *a1 = (unint64_t *)v6;
      *a2 = v5;
    }
  }
  return result;
}

uint64_t SecMPFICreatePrivateAndPublicKeyReadPersistentRef(void *a1, uint64_t *a2, uint64_t *a3, void *a4, CFErrorRef *a5)
{
  keys[3] = *(void **)MEMORY[0x263EF8340];
  unsigned __int16 v24 = 0;
  if (readSize(a2, a3, &v24, a5) || *a3 < (unint64_t)v24)
  {
    id v12 = 0;
    goto LABEL_24;
  }
  id v10 = objc_alloc(MEMORY[0x263EFF8F8]);
  CFIndex v11 = (void *)[v10 initWithBytes:*a2 length:v24];
  id v12 = v11;
  if (!v11)
  {
LABEL_24:
    uint64_t v16 = 4294967246;
    goto LABEL_22;
  }
  uint64_t v13 = (void *)*MEMORY[0x263F175B0];
  keys[0] = *(void **)MEMORY[0x263F171B8];
  keys[1] = v13;
  keys[2] = *(void **)MEMORY[0x263F17530];
  values[0] = *(void **)MEMORY[0x263F171E0];
  values[1] = v11;
  values[2] = *(void **)MEMORY[0x263EFFB40];
  CFDictionaryRef v14 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef result = 0;
  uint64_t v15 = SecItemCopyMatching(v14, &result);
  if (v15)
  {
    uint64_t v16 = v15;
    goto LABEL_6;
  }
  uint64_t v16 = 4294941996;
  if (!result)
  {
LABEL_6:
    CFTypeRef v17 = 0;
    if (!v14) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFTypeID v18 = CFGetTypeID(result);
  CFTypeID TypeID = SecKeyGetTypeID();
  BOOL v20 = v18 == TypeID;
  if (v18 == TypeID) {
    CFTypeRef v17 = result;
  }
  else {
    CFTypeRef v17 = 0;
  }
  if (v20) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = 4294941996;
  }
  if (!v14) {
    goto LABEL_8;
  }
LABEL_7:
  CFRelease(v14);
LABEL_8:
  if (v16)
  {
    SecMPCreateError(0, (int)v16, @"Keychain lookup failed", 0, a5);
  }
  else
  {
    *a4 = v17;
    uint64_t v21 = v24;
    *a2 += v24;
    *a3 -= v21;
    if (readSize(a2, a3, &v24, a5) || (uint64_t v22 = v24, *a3 < (unint64_t)v24))
    {
      uint64_t v16 = 0;
    }
    else
    {
      *a3 -= v24;
      *a2 += v22;
      id v12 = v12;
      uint64_t v16 = 0;
      *a1 = v12;
    }
  }
LABEL_22:

  return v16;
}

uint64_t SecMPComputePaddingForTransport(unint64_t a1, int a2, CFErrorRef *a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    CFStringRef v6 = @"Invalid input size";
    CFIndex v7 = -7;
LABEL_12:
    SecMPCreateError(0, v7, v6, 0, a3);
    return -1;
  }
  if (a2 == 1)
  {
    unint64_t Multiple = 64;
  }
  else
  {
    if (a2 != 2)
    {
      CFStringRef v6 = @"Invalid message type";
      CFIndex v7 = -20;
      goto LABEL_12;
    }
    unint64_t Multiple = 196;
  }
  if (Multiple < a1) {
    unint64_t Multiple = nextMultiple(a1, 0x10uLL);
  }
  BOOL v8 = Multiple >= a1;
  uint64_t result = Multiple - a1;
  if (!v8)
  {
    CFStringRef v6 = @"Invalid handling";
    CFIndex v7 = -6;
    goto LABEL_12;
  }
  return result;
}

unint64_t nextMultiple(uint64_t a1, unint64_t a2)
{
  if (__CFADD__(a2, a1))
  {
    unsigned int v3 = MessageProtectionLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      nextMultiple_cold_1(a1, a2, v3);
    }

    __assert_rtn("nextMultiple", "SecMessageLengthHiding.m", 52, "0");
  }
  return (a1 + a2 - 1) / a2 * a2;
}

uint64_t SecMPComputePaddingForStorage(unint64_t a1, int a2, CFErrorRef *a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    CFStringRef v9 = @"Invalid input size";
    CFIndex v10 = -7;
LABEL_16:
    SecMPCreateError(0, v10, v9, 0, a3);
    return -1;
  }
  int v4 = a2 - 1;
  if ((a2 - 1) >= 3)
  {
    CFStringRef v9 = @"Invalid message type";
    CFIndex v10 = -20;
    goto LABEL_16;
  }
  unint64_t v6 = qword_2164942D8[v4];
  unint64_t Multiple = v6;
  if (v6 < a1)
  {
    unint64_t Multiple = qword_2164942F0[v4];
    if (Multiple < a1)
    {
      unint64_t v8 = qword_216494308[v4];
      if (v8 >= a1)
      {
        unint64_t v11 = 2 * v6;
        if (2 * v6 <= a1) {
          unint64_t v11 = a1;
        }
        uint64_t v12 = 1 << -(char)__clz(v11);
        if ((v11 & (v11 - 1)) != 0) {
          unint64_t Multiple = v12;
        }
        else {
          unint64_t Multiple = v11;
        }
      }
      else
      {
        unint64_t Multiple = nextMultiple(a1, v8);
      }
    }
  }
  BOOL v13 = Multiple >= a1;
  uint64_t result = Multiple - a1;
  if (!v13)
  {
    CFStringRef v9 = @"Invalid handling";
    CFIndex v10 = -6;
    goto LABEL_16;
  }
  return result;
}

uint64_t SecMPPublicIdentityCopyFromPrivate(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2 = [*(id *)(a2 + 48) publicIdentity];
  uint64_t v3 = [v2 asRef];

  return v3;
}

uint64_t SecMPPublicIdentityCreateFromBytes(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = [MEMORY[0x263EFF8F8] dataWithBytes:*a2 length:*a3];
  id v11 = 0;
  unint64_t v6 = +[SecMessageLegacyPublicIdentity identityWithIdentityData:v5 error:&v11];
  id v7 = v11;
  if (v6)
  {
    uint64_t v8 = [v6 asRef];
  }
  else
  {
    CFStringRef v9 = MessageProtectionLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      SecMPPublicIdentityCreateFromBytes_cold_1(v7, v9);
    }

    uint64_t v8 = 0;
    if (a4) {
      *a4 = v7;
    }
  }

  return v8;
}

uint64_t SecMPPublicIdentityCreateFromData(int a1, CFDataRef theData, void *a3)
{
  if (!theData) {
    return 0;
  }
  CFIndex Length = CFDataGetLength(theData);
  BytePtr = CFDataGetBytePtr(theData);
  return SecMPPublicIdentityCreateFromBytes((uint64_t)BytePtr, &BytePtr, &Length, a3);
}

BOOL SecMPPIEqualToBytes(uint64_t a1, const UInt8 *a2, CFIndex a3)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v5 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(v4, 0);
  SecMPPIAppendSerialization(a1, Mutable);
  if (v5) {
    BOOL v7 = Mutable == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    BOOL v9 = CFEqual(v5, Mutable) != 0;
    goto LABEL_10;
  }
  BOOL v9 = v5 == Mutable;
  if (v5)
  {
LABEL_10:
    CFRelease(v5);
    if (!Mutable) {
      return v9;
    }
    goto LABEL_8;
  }
  if (Mutable) {
LABEL_8:
  }
    CFRelease(Mutable);
  return v9;
}

BOOL SecMPPIAppendSerialization(uint64_t a1, __CFData *a2)
{
  CFDataRef v3 = [*(id *)(a1 + 32) identityData];
  BytePtr = CFDataGetBytePtr(v3);
  CFIndex Length = CFDataGetLength(v3);
  CFDataAppendBytes(a2, BytePtr, Length);

  return v3 != 0;
}

uint64_t SecMPPIEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  unint64_t v6 = CFDataCreateMutable(v4, 0);
  SecMPPIAppendSerialization(a1, Mutable);
  SecMPPIAppendSerialization(a2, v6);
  if (Mutable) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    BOOL v8 = Mutable == v6;
    if (!Mutable)
    {
      if (!v6) {
        return v8;
      }
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v8 = CFEqual(Mutable, v6) != 0;
  }
  CFRelease(Mutable);
  if (v6) {
LABEL_12:
  }
    CFRelease(v6);
  return v8;
}

BOOL SecMPPIAppendCanonicalPublicKey(uint64_t a1, __CFData *a2)
{
  CFDataRef v3 = [*(id *)(a1 + 32) identityData];
  BytePtr = CFDataGetBytePtr(v3);
  CFIndex Length = CFDataGetLength(v3);
  CFDataAppendBytes(a2, BytePtr, Length);

  return v3 != 0;
}

uint64_t SecMPPIVerifySignature(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t *a6)
{
  if (a5)
  {
    uint64_t v8 = *a4;
    if (a5 - 1 == v8)
    {
      uint64_t v12 = (uint64_t)(a4 + 1);
      BOOL v13 = [MEMORY[0x263EFF8F8] dataWithBytes:a4 + 1 length:*a4];
      CFDictionaryRef v14 = [MEMORY[0x263EFF8F8] dataWithBytes:a2 length:a3];
      if ([*(id *)(a1 + 32) verifySignature:v13 ofData:v14])
      {
        uint64_t v15 = 1;
      }
      else
      {
        uint64_t v22 = a5 + 2;
        uint64_t v16 = malloc_type_malloc(a5 + 2, 0x9B80EB76uLL);
        if (v16)
        {
          CFTypeRef v17 = v16;
          uint64_t v21 = v16;
          SecMPPIRecreateSignature(v12, v8, (uint64_t *)&v21, &v22);
          if (v21)
          {
            uint64_t v18 = [MEMORY[0x263EFF8F8] dataWithBytes:v21 length:v22];

            char v19 = [*(id *)(a1 + 32) verifySignature:v18 ofData:v14];
            free(v17);
            if (v19)
            {
              uint64_t v15 = 1;
            }
            else
            {
              MPLogAndAssignCFError(1, a6, @"SecMPPIVerifySignature: Failed to verify signature (primary and replacement signature).");
              uint64_t v15 = 0;
            }
            BOOL v13 = (void *)v18;
            goto LABEL_15;
          }
          MPLogAndAssignCFError(1, a6, @"SecMPPIVerifySignature: Failed to decode DER of replacement signature.");
          free(v17);
        }
        else
        {
          MPLogAndAssignCFError(1, a6, @"SecMPPIVerifySignature: Failed to allocate memory for replacement signature.");
        }
        uint64_t v15 = 0;
      }
LABEL_15:

      return v15;
    }
  }
  MPLogAndAssignCFError(1, a6, @"SecMPPIVerifySignature: Incorrect signature size or start.");
  return 0;
}

BOOL SecMPPIAppendPKIEncryptedData(uint64_t a1, uint64_t a2, __CFData *a3)
{
  CFDataRef v4 = [*(id *)(a1 + 32) encryptData:a2];
  CFDataRef v5 = v4;
  if (v4)
  {
    BytePtr = CFDataGetBytePtr(v4);
    CFIndex Length = CFDataGetLength(v5);
    CFDataAppendBytes(a3, BytePtr, Length);
  }
  else
  {
    uint64_t v8 = MessageProtectionLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      SecMPPIAppendPKIEncryptedData_cold_1(v8);
    }
  }
  return v5 != 0;
}

uint64_t SecMPFullIdentityGetTypeID()
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __SecMPFullIdentityGetTypeID_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = &SecMPFullIdentityGetTypeID_sSecMPFullIdentityGetTypeIDSingleton;
  if (SecMPFullIdentityGetTypeID_sSecMPFullIdentityGetTypeIDOnce != -1) {
    dispatch_once(&SecMPFullIdentityGetTypeID_sSecMPFullIdentityGetTypeIDOnce, block);
  }
  return SecMPFullIdentityGetTypeID_sSecMPFullIdentityGetTypeIDSingleton;
}

uint64_t __SecMPFullIdentityGetTypeID_block_invoke(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 32) = result;
  return result;
}

void SecMPFullIdentityDestroy(uint64_t a1)
{
}

CFStringRef SecMPFullIdentityCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"<SecMPFullIdentity: %p>", a1);
}

uint64_t SecMPPublicIdentityGetTypeID()
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __SecMPPublicIdentityGetTypeID_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = &SecMPPublicIdentityGetTypeID_sSecMPPublicIdentityGetTypeIDSingleton;
  if (SecMPPublicIdentityGetTypeID_sSecMPPublicIdentityGetTypeIDOnce != -1) {
    dispatch_once(&SecMPPublicIdentityGetTypeID_sSecMPPublicIdentityGetTypeIDOnce, block);
  }
  return SecMPPublicIdentityGetTypeID_sSecMPPublicIdentityGetTypeIDSingleton;
}

uint64_t __SecMPPublicIdentityGetTypeID_block_invoke(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 32) = result;
  return result;
}

void SecMPPublicIdentityDestroy(uint64_t a1)
{
}

CFStringRef SecMPPublicIdentityCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"<SecMPPublicIdentity: %p>", a1);
}

uint64_t SecMPFICopyProtClass()
{
  return *MEMORY[0x263F16ED0];
}

uint64_t SecMPFullIdentityCreate()
{
  uint64_t v0 = +[SecMessageLegacyFullIdentity identity];
  uint64_t v1 = [v0 asRef];

  return v1;
}

uint64_t SecMPFullIdentityCreateWithAccessProtClass()
{
  uint64_t v0 = +[SecMessageLegacyFullIdentity identity];
  uint64_t v1 = [v0 asRef];

  return v1;
}

uint64_t SecMPFullIdentityCreateWithProtClass()
{
  uint64_t v0 = +[SecMessageLegacyFullIdentity identity];
  uint64_t v1 = [v0 asRef];

  return v1;
}

uint64_t SecMPFullIdentityCreateFromData(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = 0;
  CFDataRef v4 = +[SecMessageLegacyFullIdentity identityWithDataRepresentation:a2 error:&v9];
  id v5 = v9;
  if (v5)
  {
    unint64_t v6 = MessageProtectionLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      SecMPFullIdentityCreateFromData_cold_1(v5);
    }

    *a3 = v5;
  }
  uint64_t v7 = [v4 asRef];

  return v7;
}

uint64_t SecMPFIPurgeFromKeychain()
{
  return 1;
}

uint64_t SecMPFIPurgeAllFromKeychain()
{
  return 1;
}

uint64_t SecMPFIAppendSerialization(uint64_t a1, __CFData *a2, CFErrorRef *a3)
{
  if (a1) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v5 = !v4;
  if (v4)
  {
    SecMPCreateError(0, -7, @"NULL parameter passed", 0, a3);
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 48);
    id v14 = 0;
    CFDataRef v8 = [v7 dataRepresentationWithError:&v14];
    id v9 = v14;
    CFIndex v10 = v9;
    if (a3 && v9) {
      *a3 = (CFErrorRef)v9;
    }
    BytePtr = CFDataGetBytePtr(v8);
    CFIndex Length = CFDataGetLength(v8);
    CFDataAppendBytes(a2, BytePtr, Length);
  }
  return v5;
}

unint64_t SecMPFIEncryptionSpace(uint64_t a1)
{
  unint64_t v1 = [*(id *)(a1 + 48) encryptionSize];
  if (v1 >= 0x2A) {
    return v1 - 42;
  }
  else {
    return 0;
  }
}

BOOL SecMPFIDecrypt(uint64_t a1, uint64_t a2, __CFData *a3, void *a4, void *a5)
{
  CFDataRef v8 = *(void **)(a1 + 48);
  id v15 = 0;
  CFDataRef v9 = [v8 decryptMessage:a2 error:&v15];
  id v10 = v15;
  id v11 = v10;
  if (v9)
  {
    BytePtr = CFDataGetBytePtr(v9);
    CFIndex Length = CFDataGetLength(v9);
    CFDataAppendBytes(a3, BytePtr, Length);
    *a4 = [(__CFData *)v9 length];
  }
  else
  {
    *a5 = v10;
  }

  return v9 != 0;
}

uint64_t SecMPFullIdentityCreateWithAccess()
{
  uint64_t v0 = +[SecMessageLegacyFullIdentity identity];
  uint64_t v1 = [v0 asRef];

  return v1;
}

uint64_t SecMPFIUpdateProtClass()
{
  return 1;
}

BOOL SecMPFIAppendSignature(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unint64_t v6 = *(void **)(a1 + 48);
  id v13 = 0;
  uint64_t v7 = [v6 signData:a2 error:&v13];
  id v8 = v13;
  if (v7)
  {
    id v9 = a3;
    char v12 = [v7 length];
    [v9 appendBytes:&v12 length:1];
    [v9 appendData:v7];
  }
  else
  {
    id v10 = MessageProtectionLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      SecMPFIAppendSignature_cold_1(v8);
    }

    if (a4) {
      *a4 = v8;
    }
  }

  return v7 != 0;
}

void SecMPFIAppendPublicHash(uint64_t a1, __CFData *a2)
{
  id v6 = [*(id *)(a1 + 48) publicIdentity];
  CFDataRef v3 = [v6 publicIDHash];
  BytePtr = CFDataGetBytePtr(v3);
  CFIndex Length = CFDataGetLength(v3);
  CFDataAppendBytes(a2, BytePtr, Length);
}

void SecMPFIAppendCanonicalPublicHash(uint64_t a1, __CFData *a2)
{
  id v6 = [*(id *)(a1 + 48) publicIdentity];
  CFDataRef v3 = [v6 publicIDCanonicalHash];
  BytePtr = CFDataGetBytePtr(v3);
  CFIndex Length = CFDataGetLength(v3);
  CFDataAppendBytes(a2, BytePtr, Length);
}

void SecMPPIAppendCanonicalHash(uint64_t a1, __CFData *a2)
{
  CFDataRef theData = [*(id *)(a1 + 32) publicIDCanonicalHash];
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  CFDataAppendBytes(a2, BytePtr, Length);
}

uint64_t SecMPFullIdentityCreateFromRefs(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2 = [[SecMessageLegacyFullIdentity alloc] initWithEncryptionSecKey:a2 signingSecKey:a1];
  CFDataRef v3 = [@"Testmessage" dataUsingEncoding:4];
  CFDataRef v4 = [MEMORY[0x263EFF990] data];
  CFDataRef v5 = [MEMORY[0x263EFF990] data];
  uint64_t v6 = [(SecMessageLegacyFullIdentity *)v2 asRef];
  uint64_t v7 = [(SecMessageLegacyFullIdentity *)v2 publicIdentity];
  id v8 = (const void *)[v7 asRef];

  if (!SecMPSignAndProtectMessage(v3, v6, (uint64_t)v8, v4, 0)) {
    SecMPFullIdentityCreateFromRefs_cold_3();
  }
  if ((SecMPVerifyAndExposeMessage(v4, (uint64_t)v8, v6, v5, 0) & 1) == 0) {
    SecMPFullIdentityCreateFromRefs_cold_2();
  }
  if (([(__CFData *)v5 isEqualToData:v3] & 1) == 0) {
    SecMPFullIdentityCreateFromRefs_cold_1();
  }
  CFRelease(v8);

  return v6;
}

void sub_216400FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_216401DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose((const void *)(v69 - 224), 8);
  _Block_object_dispose((const void *)(v69 - 160), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void sub_216403270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SecProtectStream(__CFReadStream *a1, __CFWriteStream *a2, CFMutableDataRef theData)
{
  CFDataAppendBytes(theData, (const UInt8 *)&kProtectedFileHeader, 1);
  CFIndex Length = CFDataGetLength(theData);
  CFDataIncreaseLength(theData, 32);
  uint64_t v7 = &CFDataGetMutableBytePtr(theData)[Length];
  uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], 0x20uLL, v7);
  if (!result)
  {
    return AES256CTRIV0TransformStream(a1, a2, (uint64_t)v7);
  }
  return result;
}

uint64_t AES256CTRIV0TransformStream(__CFReadStream *a1, __CFWriteStream *a2, uint64_t a3)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = (UInt8 *)malloc_type_malloc(0x4000uLL, 0x2EF06FD9uLL);
  uint64_t v7 = ccaes_ctr_crypt_mode();
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  id v10 = (char *)v17 - v9;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, void *))(v8 + 24))(v8, (char *)v17 - v9, 32, a3, &kIVZero);
  uint64_t v11 = CFReadStreamRead(a1, v6, 0x4000);
  if (v11 < 1)
  {
LABEL_7:
    if (v11) {
      uint64_t v15 = 4294967246;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v6) {
LABEL_11:
    }
      free(v6);
  }
  else
  {
LABEL_2:
    (*(void (**)(char *, uint64_t, UInt8 *, UInt8 *))(v7 + 40))(v10, v11, v6, v6);
    char v12 = v6;
    while (1)
    {
      CFIndex v13 = CFWriteStreamWrite(a2, v12, v11);
      if (v13 < 1) {
        break;
      }
      v12 += v13;
      BOOL v14 = v11 <= v13;
      v11 -= v13;
      if (v14)
      {
        uint64_t v11 = CFReadStreamRead(a1, v6, 0x4000);
        if (v11 > 0) {
          goto LABEL_2;
        }
        goto LABEL_7;
      }
    }
    uint64_t v15 = 4294967246;
    if (v6) {
      goto LABEL_11;
    }
  }
  return v15;
}

uint64_t SecExposeStream(__CFReadStream *a1, __CFWriteStream *a2, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if ((unint64_t)CFDataGetLength(theData) < 0x21 || *BytePtr) {
    return 4294967246;
  }
  return AES256CTRIV0TransformStream(a1, a2, (uint64_t)(BytePtr + 1));
}

uint64_t MPSecondaryEncryptionDisabled()
{
  if (get_value(@"SecondaryRegistrationDisabled")) {
    return 1;
  }
  return get_value(@"SecondaryEncryptionDisabled");
}

uint64_t MPSecondaryRegistrationDisabled()
{
  return get_value(@"SecondaryRegistrationDisabled");
}

uint64_t get_value(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x263EFFA40];
  id v2 = a1;
  CFDataRef v3 = (void *)[[v1 alloc] initWithSuiteName:@"com.apple.ids"];
  uint64_t v4 = [v3 BOOLForKey:v2];

  return v4;
}

void MPSetSecondaryEncryptionDisabled(uint64_t a1)
{
}

void set_value(void *a1, uint64_t a2)
{
  CFDataRef v3 = (objc_class *)MEMORY[0x263EFFA40];
  id v4 = a1;
  id v5 = (id)[[v3 alloc] initWithSuiteName:@"com.apple.ids"];
  [v5 setBool:a2 forKey:v4];
}

void MPSetSecondaryRegistrationDisabled(uint64_t a1)
{
}

void sub_216405908(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t SecMPFullIdentityObjCCreateOTRSessionWithFlags(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 signingKey];
  [v4 secKeyRef];

  id v5 = [v3 signingKey];

  [v5 secKeyRef];
  uint64_t v6 = (const void *)SecOTRFullIdentityCreateFromSecKeyRef();
  uint64_t v7 = SecOTRPublicIdentityCreateFromSecKeyRef();
  uint64_t v8 = (const void *)v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = SecOTRSessionCreateFromIDAndFlags();
    CFRelease(v6);
LABEL_6:
    CFRelease(v8);
    return v10;
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v10 = 0;
  uint64_t result = 0;
  if (v8) {
    goto LABEL_6;
  }
  return result;
}

uint64_t SecMPFullIdentityCreateOTRSessionWithFlags(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 48) signingKey];
  id v4 = [v3 secKeyRef];
  id v5 = (const void *)SecOTRFullIdentityCreateFromSecKeyRef();

  uint64_t v6 = [*(id *)(a2 + 32) signingKey];
  uint64_t v7 = [v6 secKeyRef];
  uint64_t v8 = (const void *)SecOTRPublicIdentityCreateFromSecKeyRef();

  if (v5) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = SecOTRSessionCreateFromIDAndFlags();
    CFRelease(v5);
LABEL_6:
    CFRelease(v8);
    return v10;
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v10 = 0;
  uint64_t result = 0;
  if (v8) {
    goto LABEL_6;
  }
  return result;
}

uint64_t SecMPFullIdentityCreateOTRSessionWith(uint64_t a1, uint64_t a2)
{
  return SecMPFullIdentityCreateOTRSessionWithFlags(a1, a2);
}

void sub_216407D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_2164086BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_216408FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_216409DC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL NGMPBLegacyKeyReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x263F62298];
  id v4 = (int *)MEMORY[0x263F62288];
  id v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    uint64_t v7 = (int *)MEMORY[0x263F62268];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 8;
LABEL_22:
        char v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadData();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t NGMPBDevicePreKeyReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x263F62298];
  id v4 = (int *)MEMORY[0x263F62288];
  id v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    uint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v19 = objc_alloc_init(NGMPBP256Key);
          objc_storeStrong((id *)(a1 + 16), v19);
          if PBReaderPlaceMark() && (NGMPBP256KeyReadFrom((uint64_t)v19, a2))
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + v16) = 1;
            uint64_t v23 = 0;
          }
          *(void *)(a1 + 8) = v23;
          continue;
        case 3u:
          uint64_t v24 = PBReaderReadData();
          uint64_t v25 = 24;
          goto LABEL_30;
        case 4u:
          uint64_t v24 = PBReaderReadData();
          uint64_t v25 = 32;
          goto LABEL_30;
        case 5u:
          uint64_t v24 = PBReaderReadData();
          uint64_t v25 = 40;
LABEL_30:
          uint64_t v26 = *(void **)(a1 + v25);
          *(void *)(a1 + v25) = v24;

          continue;
        case 6u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 52) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v30 = *v3;
        uint64_t v31 = *(void *)(a2 + v30);
        unint64_t v32 = v31 + 1;
        if (v31 == -1 || v32 > *(void *)(a2 + *v4)) {
          break;
        }
        char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
        *(void *)(a2 + v30) = v32;
        v29 |= (unint64_t)(v33 & 0x7F) << v27;
        if ((v33 & 0x80) == 0) {
          goto LABEL_39;
        }
        v27 += 7;
        BOOL v15 = v28++ >= 9;
        if (v15)
        {
          LODWORD(v29) = 0;
          goto LABEL_41;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v29) = 0;
      }
LABEL_41:
      *(_DWORD *)(a1 + 48) = v29;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL NGMPBFullDeviceIdentityReadFrom(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x263F62298];
  id v4 = (int *)MEMORY[0x263F62288];
  id v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    uint64_t v7 = (int *)MEMORY[0x263F62268];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(NGMPBP256Key);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (NGMPBP256KeyReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    int v17 = objc_alloc_init(NGMPBDevicePreKey);
    [a1 addPrekeys:v17];
    if (!PBReaderPlaceMark() || (NGMPBDevicePreKeyReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL NGMPBOuterMessageReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x263F62298];
  id v4 = (int *)MEMORY[0x263F62288];
  id v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    uint64_t v7 = (int *)MEMORY[0x263F62268];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 8;
          goto LABEL_25;
        case 2u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 16;
          goto LABEL_25;
        case 3u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 32;
          goto LABEL_25;
        case 4u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 40;
          goto LABEL_25;
        default:
          if ((v10 >> 3) == 99)
          {
            uint64_t v17 = PBReaderReadData();
            uint64_t v18 = 24;
LABEL_25:
            char v19 = *(void **)(a1 + v18);
            *(void *)(a1 + v18) = v17;
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            return 0;
          }
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t NGMPBPublicDeviceIdentityReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x263F62298];
  id v4 = (int *)MEMORY[0x263F62288];
  id v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    uint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t NGMPBPublicDevicePrekeyReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x263F62298];
  id v4 = (int *)MEMORY[0x263F62288];
  id v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    uint64_t v7 = (int *)MEMORY[0x263F62268];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            uint64_t v16 = *v5;
            int v17 = *(unsigned __int8 *)(a2 + v16);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        uint64_t v16 = *v5;
        int v17 = *(unsigned __int8 *)(a2 + v16);
        if (*(unsigned char *)(a2 + v16)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v17) {
          BOOL v18 = 1;
        }
        else {
          BOOL v18 = (v10 & 7) == 4;
        }
        if (!v18)
        {
          switch((v10 >> 3))
          {
            case 1u:
              uint64_t v19 = PBReaderReadData();
              uint64_t v20 = 16;
              goto LABEL_27;
            case 2u:
              uint64_t v19 = PBReaderReadData();
              uint64_t v20 = 24;
              goto LABEL_27;
            case 3u:
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
                *(void *)(a2 + v21) = v22 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + v16) = 1;
                uint64_t v23 = 0;
              }
              *(void *)(a1 + 8) = v23;
              goto LABEL_30;
            case 4u:
              uint64_t v19 = PBReaderReadData();
              uint64_t v20 = 32;
LABEL_27:
              uint64_t v25 = *(void **)(a1 + v20);
              *(void *)(a1 + v20) = v19;

              goto LABEL_30;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_30:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t NGMPBP256KeyReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x263F62298];
  id v4 = (int *)MEMORY[0x263F62288];
  id v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    uint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 16;
      }
      else
      {
        if (v17 != 3)
        {
          if (v17 == 2)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v20) = 0;
            }
LABEL_36:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 8;
      }
      uint64_t v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t NGMPBInnerMessageReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x263F62298];
  id v4 = (int *)MEMORY[0x263F62288];
  id v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    uint64_t v7 = (int *)MEMORY[0x263F62268];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2) {
        break;
      }
      if (v17 == 1)
      {
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 32;
LABEL_33:
        uint64_t v26 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_40;
      }
      if (v17 != 2) {
        goto LABEL_34;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 40) |= 1u;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_37;
        }
        v18 += 7;
        BOOL v14 = v19++ >= 9;
        if (v14)
        {
          LODWORD(v20) = 0;
          goto LABEL_39;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v20) = 0;
      }
LABEL_39:
      *(_DWORD *)(a1 + 8) = v20;
LABEL_40:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if (v17 == 3)
    {
      uint64_t v24 = PBReaderReadData();
      uint64_t v25 = 24;
    }
    else
    {
      if (v17 != 99)
      {
LABEL_34:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_40;
      }
      uint64_t v24 = PBReaderReadData();
      uint64_t v25 = 16;
    }
    goto LABEL_33;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x270FA5388](a1);
    return SymmetricKey.withUnsafeBytes<A>(_:)();
  }
  else
  {
    id v2 = objc_allocWithZone(MEMORY[0x263F087E8]);
    id v3 = (void *)MEMORY[0x2166CC8B0](0xD000000000000018, 0x800000021649B230);
    objc_msgSend(v2, sel_initWithDomain_code_userInfo_, v3, 0, 0);

    return swift_willThrow();
  }
}

uint64_t closure #1 in closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X5>, uint64_t a6@<X6>, _DWORD *a7@<X8>)
{
  v21[2] = *MEMORY[0x263EF8340];
  switch(a4 >> 62)
  {
    case 1uLL:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      outlined copy of Data._Representation(a3, a4);
      uint64_t v14 = __DataStorage._bytes.getter();
      if (v14)
      {
        uint64_t v15 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)a3, v15))
        {
          v14 += (int)a3 - v15;
          goto LABEL_7;
        }
LABEL_17:
        __break(1u);
      }
LABEL_7:
      __DataStorage._length.getter();
      int v16 = specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(a5, a6, a1, a2, v14);
      uint64_t result = outlined consume of Data._Representation(a3, a4);
LABEL_14:
      *a7 = v16;
      return result;
    case 2uLL:
      uint64_t v18 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v19 = __DataStorage._bytes.getter();
      if (!v19) {
        goto LABEL_11;
      }
      uint64_t v20 = __DataStorage._offset.getter();
      if (__OFSUB__(v18, v20)) {
        goto LABEL_16;
      }
      v19 += v18 - v20;
LABEL_11:
      __DataStorage._length.getter();
      int v16 = specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(a5, a6, a1, a2, v19);
      swift_release();
      uint64_t result = swift_release();
      goto LABEL_14;
    case 3uLL:
      memset(v21, 0, 14);
      goto LABEL_13;
    default:
      v21[0] = a3;
      LOWORD(v21[1]) = a4;
      BYTE2(v21[1]) = BYTE2(a4);
      BYTE3(v21[1]) = BYTE3(a4);
      BYTE4(v21[1]) = BYTE4(a4);
      BYTE5(v21[1]) = BYTE5(a4);
LABEL_13:
      uint64_t result = specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(a5, a6, a1, a2, (uint64_t)v21);
      int v16 = result;
      goto LABEL_14;
  }
}

uint64_t variable initialization expression of SymmetricRatchet.messageKeys()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of AES.IV.blockSize()
{
  return 16;
}

uint64_t variable initialization expression of TetraRatchetState.rootKey@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of TetraRatchetState.rootKey(MEMORY[0x263F04620], a1);
}

uint64_t variable initialization expression of TetraRatchetState.kemAmortizationCounter()
{
  return 0;
}

uint64_t variable initialization expression of TetraRatchetState.lastRekeyingDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of TetraRatchetState.rootKey(MEMORY[0x263F07490], a1);
}

uint64_t variable initialization expression of TetraRatchetState.rootKey@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

void type metadata accessor for SecKeyRef(uint64_t a1)
{
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSFileProtectionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, int __c)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t __b = *a1;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&__b, __c);
      uint64_t v5 = __b;
      unint64_t v6 = v19 | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      uint64_t __b = *a1;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v7 = v19;
      uint64_t v8 = *(void *)(__b + 16);
      uint64_t v9 = *(void *)(__b + 24);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __break(1u);
        JUMPOUT(0x21640FE18);
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = v8 - v12;
      if (__OFSUB__(v8, v12))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v14 = __OFSUB__(v9, v8);
      int64_t v15 = v9 - v8;
      if (v14) {
        goto LABEL_14;
      }
      uint64_t v16 = __DataStorage._length.getter();
      if (v16 >= v15) {
        size_t v17 = v15;
      }
      else {
        size_t v17 = v16;
      }
      memset((void *)(v11 + v13), __c, v17);
      *a1 = __b;
      a1[1] = v7 | 0x8000000000000000;
      return;
    case 3uLL:
      return;
    default:
      uint64_t __b = *a1;
      LOWORD(v19) = v2;
      BYTE2(v19) = BYTE2(v2);
      BYTE3(v19) = BYTE3(v2);
      BYTE4(v19) = BYTE4(v2);
      BYTE5(v19) = BYTE5(v2);
      BYTE6(v19) = BYTE6(v2);
      memset(&__b, __c, BYTE6(v2));
      uint64_t v5 = __b;
      unint64_t v6 = v19 | ((unint64_t)BYTE4(v19) << 32) | ((unint64_t)BYTE5(v19) << 40) | ((unint64_t)BYTE6(v19) << 48);
LABEL_4:
      *a1 = v5;
      a1[1] = v6;
      return;
  }
}

void *specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, void *, char *))
{
  uint64_t result = (void *)__DataStorage._bytes.getter();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = (void *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    uint64_t v8 = (void *)((char *)v8 + a1 - (void)result);
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = (char *)v8 + v12;
  if (v8) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }
  uint64_t result = a3(&v15, v8, v14);
  if (!v3) {
    return (void *)v15;
  }
  return result;
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, int a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }
  memset((void *)(v7 + v9), a2, v12);
}

uint64_t specialized static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v4 = a3 >> 62;
  uint64_t v7 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
      }
      uint64_t v7 = HIDWORD(a2) - (int)a2;
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v8 = *(void *)(a2 + 24);
      uint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        break;
      }
      goto LABEL_19;
    case 3uLL:
      break;
    default:
      uint64_t v7 = BYTE6(a3);
      break;
  }
  *(void *)&long long v22 = specialized Data.init(count:)(v7);
  *((void *)&v22 + 1) = v10;
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t *)&v22, 0);
  long long v23 = v22;
  uint64_t v11 = ccaes_ctr_crypt_mode();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  switch((int)v4)
  {
    case 0:
      *(void *)&long long v22 = a2;
      WORD4(v22) = a3;
      BYTE10(v22) = BYTE2(a3);
      BYTE11(v22) = BYTE3(a3);
      BYTE12(v22) = BYTE4(a3);
      BYTE13(v22) = BYTE5(a3);
      MEMORY[0x270FA5388](v12);
      SymmetricKey.withUnsafeBytes<A>(_:)();
      goto LABEL_12;
    case 1:
      if (a2 >> 32 < (int)a2) {
        goto LABEL_20;
      }
      swift_retain();
      unsigned int v20 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a2, a2 >> 32, (void *(*)(uint64_t *__return_ptr, void *, char *))partial apply for closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:));
      if (v3)
      {
        outlined consume of Data._Representation(a2, a3);
LABEL_23:
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x216410408);
      }
      unsigned int v16 = v20;
      outlined consume of Data._Representation(a2, a3);
      if (v16) {
        goto LABEL_13;
      }
      return specialized Data.init<A>(_:)(v23, *((unint64_t *)&v23 + 1));
    case 2:
      uint64_t v13 = *(void *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      unsigned int v15 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v14, (void *(*)(uint64_t *__return_ptr, void *, char *))partial apply for closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:));
      if (!v3)
      {
        unsigned int v16 = v15;
        swift_release();
        swift_release();
        if (!v16) {
          return specialized Data.init<A>(_:)(v23, *((unint64_t *)&v23 + 1));
        }
LABEL_13:
        uint64_t v17 = type metadata accessor for CryptoKitError();
        lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
        swift_allocError();
        *uint64_t v18 = v16;
        (*(void (**)(unsigned int *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v18, *MEMORY[0x263F04528], v17);
        swift_willThrow();
        return outlined consume of Data._Representation(v23, *((unint64_t *)&v23 + 1));
      }
      swift_release();
      swift_release();
      goto LABEL_23;
    case 3:
      *(void *)((char *)&v22 + 6) = 0;
      *(void *)&long long v22 = 0;
      MEMORY[0x270FA5388](v12);
      SymmetricKey.withUnsafeBytes<A>(_:)();
LABEL_12:
      unsigned int v16 = v21;
      if (v21) {
        goto LABEL_13;
      }
      return specialized Data.init<A>(_:)(v23, *((unint64_t *)&v23 + 1));
    default:
      JUMPOUT(0);
  }
}

uint64_t partial apply for closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(uint64_t a1)
{
  return closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(a1);
}

uint64_t partial apply for closure #1 in closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return partial apply for closure #1 in closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(a1, a2, a3);
}

{
  uint64_t v3;

  return closure #1 in closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(uint64_t **)(v3 + 40), *(void *)(v3 + 48), a3);
}

uint64_t specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_7;
  }
  uint64_t result = __DataStorage._offset.getter();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a6) {
    return ccctr_one_shot();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v10 = a2;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v13 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_216494380;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = v6 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_15;
      }
      uint64_t v18 = v10;
      if (v15 < (int)v6) {
        goto LABEL_19;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v6, __DataStorage._offset.getter())) {
        goto LABEL_20;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v17 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v13 = v17;
      uint64_t v15 = v6 >> 32;
      uint64_t v10 = v18;
LABEL_15:
      if (v15 < (int)v6)
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v6, v13, v10, a3, a4, a5);
      *a1 = v6;
      a1[1] = v13 | 0x4000000000000000;
      return result;
    case 2uLL:
      uint64_t v19 = *a1;
      uint64_t v21 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v19 + 16), v21, a2, a3, a4, a5);
      *a1 = v19;
      a1[1] = v21 | 0x8000000000000000;
      return result;
    case 3uLL:
      if (!a3) {
        goto LABEL_23;
      }
      if (!a5) {
        goto LABEL_24;
      }
      return ccctr_one_shot();
    default:
      LOWORD(v20) = a1[1];
      BYTE2(v20) = BYTE2(a1[1]);
      HIBYTE(v20) = BYTE3(a1[1]);
      __int16 v22 = WORD2(a1[1]);
      unsigned __int8 v23 = BYTE6(a1[1]);
      if (!a3)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x21641085CLL);
      }
      if (!a5) {
        goto LABEL_22;
      }
      uint64_t result = ccctr_one_shot();
      *a1 = v6;
      a1[1] = v20 | ((unint64_t)v22 << 32) | ((unint64_t)HIBYTE(v22) << 40) | ((unint64_t)v23 << 48);
      return result;
  }
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

void type metadata accessor for SecKeyRef(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t one-time initialization function for TetraLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, TetraLogger);
  __swift_project_value_buffer(v0, (uint64_t)TetraLogger);
  return Logger.init(subsystem:category:)();
}

dispatch_semaphore_t one-time initialization function for conversationLock()
{
  dispatch_semaphore_t result = dispatch_semaphore_create(1);
  conversationLock = (uint64_t)result;
  return result;
}

NSObject *closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  CFIndex v40 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TetraSessionStates();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.debug.getter();
  dispatch_semaphore_t result = MessageProtectionLog();
  if (!result)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v15 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for conversationLock != -1) {
    swift_once();
  }
  id v16 = (id)conversationLock;
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.debug.getter();
  dispatch_semaphore_t result = MessageProtectionLog();
  if (!result) {
    goto LABEL_20;
  }
  uint64_t v17 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v40, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v9, &demangling cache variable for type metadata for TetraSessionStates?);
    lazy protocol witness table accessor for type TetraCommitmentError and conformance TetraCommitmentError();
    uint64_t v18 = (void *)swift_allocError();
    *uint64_t v19 = 0;
    swift_willThrow();
    goto LABEL_12;
  }
  outlined init with take of TetraRatchetState((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  if ((TetraSessionStates.discardMessageKeyOnSessionStates(ephemeralECDHPublicKey:messageIndex:)(a4, a5) & 1) == 0)
  {
    lazy protocol witness table accessor for type TetraCommitmentError and conformance TetraCommitmentError();
    uint64_t v18 = (void *)swift_allocError();
    *unsigned int v20 = 1;
    swift_willThrow();
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
LABEL_12:
    os_log_type_t v21 = static os_log_type_t.error.getter();
    dispatch_semaphore_t result = MessageProtectionLog();
    if (result)
    {
      __int16 v22 = result;
      os_log_type_t v23 = v21;
      if (os_log_type_enabled(result, v21))
      {
        uint64_t v24 = v40;
        id v25 = v18;
        id v26 = v24;
        id v27 = v18;
        uint64_t v28 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        v42[0] = v29;
        *(_DWORD *)uint64_t v28 = 136315394;
        id v30 = objc_msgSend(v26, sel_base64EncodedStringWithOptions_, 0);
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v33 = v32;

        uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v34 = Error.localizedDescription.getter();
        uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2163F2000, v22, v23, "Failed to commit updated session state for %s because of error: %s.", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2166CDD30](v29, -1, -1);
        MEMORY[0x2166CDD30](v28, -1, -1);
      }

      static os_log_type_t.debug.getter();
      dispatch_semaphore_t result = MessageProtectionLog();
      if (result)
      {
        CFDataRef v36 = result;
        os_log(_:dso:log:_:_:)();

        id v37 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        return 0;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v40, (uint64_t)v13);
  static os_log_type_t.debug.getter();
  dispatch_semaphore_t result = MessageProtectionLog();
  if (result)
  {
    CFDataRef v38 = result;
    os_log(_:dso:log:_:_:)();

    id v39 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
    return 1;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t closure #1 in static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1)
  {
    uint64_t v12 = a2;
    outlined copy of Data._Representation(a2, a3);
    outlined copy of Data._Representation(a4, a5);
    specialized Data.append<A>(contentsOf:)(a4, a5);
    uint64_t v9 = a4;
    unint64_t v10 = a5;
  }
  else
  {
    uint64_t v12 = a4;
    outlined copy of Data._Representation(a2, a3);
    outlined copy of Data._Representation(a4, a5);
    specialized Data.append<A>(contentsOf:)(a2, a3);
    uint64_t v9 = a2;
    unint64_t v10 = a3;
  }
  outlined consume of Data._Representation(v9, v10);
  return v12;
}

Class static TetraAPI.seal(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:receiverRegistration:encryptedAttributes:resetState:signedBy:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, void *a9, uint64_t (*a10)(uint64_t), unint64_t a11, void *a12, objc_class *a13, uint64_t a14, char a15, void *a16)
{
  return specialized static TetraAPI.seal(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:receiverRegistration:encryptedAttributes:resetState:signedBy:)(a1, a2, a3, a4, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

NSObject *static TetraAPI.open(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:signedBy:tetraVersion:ourPrekeys:ourSigningPublicKeyCompactRepresentation:decryptionBlock:)(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t), objc_class *a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, void *a9, unint64_t a10, unint64_t a11, void *a12, char *a13, unsigned int a14, uint64_t a15, uint64_t a16, void (*a17)(NSObject *, unint64_t, unsigned int (*)(uint64_t, uint64_t, uint64_t), id, uint64_t (*)(), uint64_t), unint64_t a18)
{
  uint64_t v297 = a5;
  unint64_t v298 = a6;
  v304 = a3;
  unint64_t v305 = a4;
  v302 = (unsigned char *)a1;
  v303 = a2;
  uint64_t v20 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v271 = (uint64_t)&v266 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v272 = *(void *)(v275 - 8);
  MEMORY[0x270FA5388](v275);
  v277 = (char *)&v266 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v270 = type metadata accessor for TetraSessionState();
  uint64_t v266 = *(void *)(v270 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v270);
  v267 = (_DWORD *)((char *)&v266 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v23);
  v273 = (int *)((char *)&v266 - v25);
  uint64_t v284 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v283 = *(void *)(v284 - 8);
  MEMORY[0x270FA5388](v284);
  uint64_t v279 = v26;
  v280 = (char *)&v266 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v274 = (uint64_t)&v266 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  v276 = (char *)&v266 - v30;
  uint64_t v294 = type metadata accessor for TetraSessionStates();
  uint64_t v293 = *(void *)(v294 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v294);
  v278 = (char *)&v266 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v282 = (uint64_t)&v266 - v34;
  MEMORY[0x270FA5388](v33);
  v295 = (char *)&v266 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  v287 = (char *)&v266 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v268 = (uint64_t)&v266 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v269 = (uint64_t)&v266 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  v292 = ((char *)&v266 - v44);
  MEMORY[0x270FA5388](v43);
  v299 = (_DWORD *)((char *)&v266 - v45);
  v296 = (int *)type metadata accessor for TetraRatchetOuterMessage();
  uint64_t v46 = MEMORY[0x270FA5388](v296);
  uint64_t v288 = (uint64_t)&v266 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  uint64_t v286 = (uint64_t)&v266 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  uint64_t v285 = (uint64_t)&v266 - v51;
  uint64_t v52 = MEMORY[0x270FA5388](v50);
  uint64_t v291 = (uint64_t)&v266 - v53;
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  v290 = (char *)&v266 - v55;
  MEMORY[0x270FA5388](v54);
  uint64_t v307 = (uint64_t)&v266 - v56;
  v301 = a13;
  id v57 = objc_msgSend(a13, sel_compactRepresentation);
  uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v60 = v59;

  uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v63 = v62;
  v64 = specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a7, a8, a9, v58, v60, a10, a11, a12, v61, v62);
  uint64_t v66 = v65;
  outlined consume of Data._Representation(v61, v63);
  outlined consume of Data._Representation(v58, v60);
  uint64_t v67 = v64(0);
  unint64_t v69 = v68;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v67, v69);
  os_log_type_t v71 = static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
  v72 = isa;
  v73 = static OS_os_log.default.getter();
  BOOL v74 = os_log_type_enabled(v73, v71);
  uint64_t v306 = v66;
  v289 = (uint64_t (*)(uint64_t))v64;
  if (v74)
  {
    v75 = (uint8_t *)swift_slowAlloc();
    v76 = (void *)swift_slowAlloc();
    v309[0] = v76;
    *(_DWORD *)v75 = 136315138;
    v300 = (void (*)(NSObject *, unint64_t, unsigned int (*)(uint64_t, uint64_t, uint64_t), id, uint64_t (*)(), uint64_t))(v75 + 4);
    v77 = v72;
    id v78 = [(objc_class *)v72 base64EncodedStringWithOptions:0];
    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v81 = v80;

    v72 = v77;
    uint64_t v310 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v81, (uint64_t *)v309);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2163F2000, v73, v71, "Decrypting for conversationID: %s", v75, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2166CDD30](v76, -1, -1);
    MEMORY[0x2166CDD30](v75, -1, -1);
  }
  else
  {
  }
  static os_log_type_t.debug.getter();
  dispatch_semaphore_t result = MessageProtectionLog();
  uint64_t v83 = v307;
  if (!result) {
    goto LABEL_83;
  }
  v84 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for conversationLock != -1) {
    swift_once();
  }
  id v85 = (id)conversationLock;
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.debug.getter();
  dispatch_semaphore_t result = MessageProtectionLog();
  if (!result) {
    goto LABEL_84;
  }
  v86 = result;
  unint64_t v87 = a18;
  v300 = (void (*)(NSObject *, unint64_t, unsigned int (*)(uint64_t, uint64_t, uint64_t), id, uint64_t (*)(), uint64_t))a17;
  os_log(_:dso:log:_:_:)();

  v89 = v302;
  unint64_t v88 = (unint64_t)v303;
  outlined copy of Data._Representation((uint64_t)v302, (unint64_t)v303);
  uint64_t v91 = (uint64_t)v304;
  unint64_t v90 = v305;
  outlined copy of Data._Representation((uint64_t)v304, v305);
  v92 = v301;
  TetraRatchetOuterMessage.init(serializedData:authenticatedData:signedBy:)(v89, v88, v91, v90, v92, v83);
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v93 = (uint64_t)v299;
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v72, (uint64_t)v299);
  v304 = v72;
  unsigned int v94 = a14;
  uint64_t v95 = (uint64_t)v292;
  outlined init with copy of TetraSessionStates?(v93, (uint64_t)v292, &demangling cache variable for type metadata for TetraSessionStates?);
  v303 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v293 + 48);
  if (v303(v95, 1, v294) == 1)
  {
    uint64_t v96 = v93;
    outlined destroy of TetraSessionStates?(v95, &demangling cache variable for type metadata for TetraSessionStates?);
    v97 = v296;
    goto LABEL_12;
  }
  LODWORD(v302) = a14;
  outlined init with take of TetraRatchetState(v95, (uint64_t)v295, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  LOBYTE(v310) = 0;
  v104 = v296;
  unint64_t v105 = *(void *)(v83 + v296[9] + 8);
  v106 = v290;
  outlined init with copy of TetraRatchetOuterMessage(v83, (uint64_t)v290, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v105 >> 60 == 15)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v106, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    uint64_t v107 = v291;
LABEL_19:
    outlined init with copy of TetraRatchetOuterMessage(v83, v107, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v107, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
LABEL_20:
    unint64_t v305 = a18;
    v116 = (uint64_t *)(v83 + v296[10]);
    uint64_t v117 = v83;
    uint64_t v118 = *v116;
    unint64_t v119 = v116[1];
    outlined copy of Data?(*v116, v119);
    v126 = TetraSessionStates.openMessage(_:prekeysHash:sessionDST:theirTetraVersion:didRatchet:)(v117, v118, v119, v289, v306, v302, &v310);
    uint64_t v128 = v127;
    unint64_t v130 = v129;
    v302 = (unsigned char *)v131;
    outlined consume of Data?(v118, v119);
    id v132 = (id)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    if (v130 >> 60 != 15)
    {
      uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v135 = v134;
      outlined copy of Data._Representation(v128, v130);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v309[0] = v132;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v130, v133, v135, isUniquelyReferenced_nonNull_native);
      id v132 = v309[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v137 = v307;
    specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v304, (uint64_t)v295);
    static os_log_type_t.debug.getter();
    dispatch_semaphore_t result = MessageProtectionLog();
    if (!result) {
      goto LABEL_89;
    }
    v171 = result;
    os_log(_:dso:log:_:_:)();

    id v172 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    v303 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v132);
    swift_bridgeObjectRelease();
    uint64_t v173 = v137 + v296[7];
    v301 = (char *)*(unsigned int *)(v137 + 24);
    uint64_t v174 = v283;
    v175 = v280;
    uint64_t v176 = v284;
    (*(void (**)(char *, uint64_t, uint64_t))(v283 + 16))(v280, v173, v284);
    unint64_t v177 = (*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80);
    unint64_t v178 = (v279 + v177 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v179 = swift_allocObject();
    v180 = v304;
    *(void *)(v179 + 16) = v281;
    *(void *)(v179 + 24) = v180;
    (*(void (**)(unint64_t, char *, uint64_t))(v174 + 32))(v179 + v177, v175, v176);
    *(void *)(v179 + v178) = v301;
    v181 = v180;
    unint64_t v182 = (unint64_t)v302;
    v300(v126, (unint64_t)v302, v303, 0, partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:), v179);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Data._Representation((uint64_t)v126, v182);
    outlined consume of Data?(v128, v130);

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v295, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
    uint64_t v183 = v307;
LABEL_42:
    outlined destroy of TetraRatchetOuterMessage(v183, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?((uint64_t)v299, &demangling cache variable for type metadata for TetraSessionStates?);
    return swift_release();
  }
  v113 = (uint64_t *)&v106[v104[10]];
  uint64_t v114 = *v113;
  unint64_t v115 = v113[1];
  outlined copy of Data?(*v113, v115);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v106, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  uint64_t v107 = v291;
  if (v115 >> 60 == 15) {
    goto LABEL_19;
  }
  outlined consume of Data?(v114, v115);
  outlined init with copy of TetraRatchetOuterMessage(v83, v107, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  uint64_t v138 = v107;
  v139 = v296;
  unint64_t v140 = *(void *)(v138 + v296[9] + 8);
  uint64_t v141 = v285;
  outlined init with copy of TetraRatchetOuterMessage(v138, v285, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v140 >> 60 == 15)
  {
    outlined destroy of TetraRatchetOuterMessage(v141, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
LABEL_38:
    uint64_t v169 = v291;
    uint64_t v170 = v286;
    outlined init with copy of TetraRatchetOuterMessage(v291, v286, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v170, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v169, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    goto LABEL_39;
  }
  v166 = (uint64_t *)(v141 + v139[10]);
  uint64_t v167 = *v166;
  unint64_t v168 = v166[1];
  outlined copy of Data?(*v166, v168);
  outlined destroy of TetraRatchetOuterMessage(v141, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v168 >> 60 == 15) {
    goto LABEL_38;
  }
  outlined consume of Data?(v167, v168);
  uint64_t v184 = v286;
  outlined init with copy of TetraRatchetOuterMessage(v291, v286, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  outlined init with copy of TetraRatchetOuterMessage((uint64_t)v295, v282, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  uint64_t v185 = v283;
  v186 = v276;
  uint64_t v187 = v284;
  (*(void (**)(char *, uint64_t, uint64_t))(v283 + 16))(v276, v184 + v296[7], v284);
  uint64_t v188 = v185;
  uint64_t v189 = (uint64_t)v186;
  dispatch_semaphore_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v188 + 56))(v186, 0, 1, v187);
  uint64_t v190 = v184 + v296[10];
  unint64_t v191 = *(void *)(v190 + 8);
  if (v191 >> 60 == 15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v192 = *(void *)v190;
  outlined copy of Data._Representation(*(void *)v190, *(void *)(v190 + 8));
  uint64_t v193 = v282;
  LODWORD(v305) = TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(v189, v192, v191);
  outlined consume of Data?(v192, v191);
  outlined destroy of TetraSessionStates?(v189, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  outlined destroy of TetraRatchetOuterMessage(v193, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  outlined destroy of TetraRatchetOuterMessage(v286, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  outlined destroy of TetraRatchetOuterMessage(v291, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v305) {
    goto LABEL_20;
  }
LABEL_39:
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v295, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  uint64_t v96 = (uint64_t)v299;
  v97 = v296;
  unsigned int v94 = v302;
LABEL_12:
  v98 = (uint64_t *)(v83 + v97[10]);
  uint64_t v99 = v83;
  unint64_t v100 = v98[1];
  if (v100 >> 60 == 15)
  {
    lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
    v101 = (void *)swift_allocError();
    unsigned char *v102 = 0;
    swift_willThrow();
    outlined destroy of TetraRatchetOuterMessage(v99, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    uint64_t v103 = v96;
LABEL_23:
    outlined destroy of TetraSessionStates?(v103, &demangling cache variable for type metadata for TetraSessionStates?);
    v124 = v304;
LABEL_24:
    v125 = (id *)&unk_26AC05000;
    v194 = (void (*)(void, unint64_t, void, id, void, void))v300;
    v309[0] = v101;
    id v195 = v101;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast() && v310 == 3)
    {
      id v196 = objc_allocWithZone(MEMORY[0x263F087E8]);
      v197 = (void *)MEMORY[0x2166CC8B0](0xD00000000000001BLL, 0x800000021649B250);
      id v198 = objc_msgSend(v196, sel_initWithDomain_code_userInfo_, v197, 5, 0);

      static os_log_type_t.debug.getter();
      dispatch_semaphore_t result = MessageProtectionLog();
      if (result)
      {
        v199 = result;
        os_log(_:dso:log:_:_:)();

        id v200 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        id v201 = v198;
        v194(0, 0xF000000000000000, 0, v198, 0, 0);

        id v202 = v309[0];
LABEL_55:

        return swift_release();
      }
      goto LABEL_87;
    }

    id v203 = v101;
    os_log_type_t v204 = static os_log_type_t.error.getter();
    dispatch_semaphore_t result = MessageProtectionLog();
    if (result)
    {
      v205 = result;
      if (os_log_type_enabled(result, v204))
      {
        unint64_t v206 = v298;
        swift_bridgeObjectRetain();
        id v207 = v101;
        swift_bridgeObjectRetain();
        id v208 = v101;
        uint64_t v209 = swift_slowAlloc();
        v210 = (void *)swift_slowAlloc();
        unint64_t v305 = v87;
        v211 = v210;
        v309[0] = v210;
        *(_DWORD *)uint64_t v209 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v310 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v297, v206, (uint64_t *)v309);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v209 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v212 = Error.localizedDescription.getter();
        uint64_t v310 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v212, v213, (uint64_t *)v309);
        v125 = (id *)&unk_26AC05000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2163F2000, v205, v204, "Tetra failed decrypting %s with error: %s", (uint8_t *)v209, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2166CDD30](v211, -1, -1);
        MEMORY[0x2166CDD30](v209, -1, -1);
      }

      static os_log_type_t.debug.getter();
      dispatch_semaphore_t result = MessageProtectionLog();
      if (result)
      {
        v214 = result;
        os_log(_:dso:log:_:_:)();

        id v215 = v125[62];
        OS_dispatch_semaphore.signal()();

        id v216 = v101;
        v194(0, 0xF000000000000000, 0, v101, 0, 0);

        id v202 = v101;
        goto LABEL_55;
      }
      goto LABEL_86;
    }
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  unsigned int v108 = v94;
  uint64_t v109 = *v98;
  unint64_t v110 = *(void *)(v99 + v97[9] + 8);
  uint64_t v111 = v99;
  uint64_t v112 = v288;
  outlined init with copy of TetraRatchetOuterMessage(v111, v288, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v110 >> 60 == 15)
  {
    outlined copy of Data._Representation(v109, v100);
    outlined destroy of TetraRatchetOuterMessage(v112, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
LABEL_22:
    lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
    v101 = (void *)swift_allocError();
    unsigned char *v123 = 1;
    swift_willThrow();
    outlined consume of Data?(v109, v100);
    outlined destroy of TetraRatchetOuterMessage(v307, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    uint64_t v103 = (uint64_t)v299;
    goto LABEL_23;
  }
  v120 = (uint64_t *)(v112 + v97[10]);
  uint64_t v121 = *v120;
  unint64_t v122 = v120[1];
  outlined copy of Data?(v109, v100);
  outlined copy of Data?(v121, v122);
  outlined destroy of TetraRatchetOuterMessage(v112, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v122 >> 60 == 15) {
    goto LABEL_22;
  }
  unint64_t v305 = a18;
  outlined consume of Data?(v121, v122);
  outlined copy of Data?(v109, v100);
  unint64_t v142 = swift_bridgeObjectRetain();
  unint64_t v143 = specialized _ArrayProtocol.filter(_:)(v142, v109, v100);
  v302 = (unsigned char *)v109;
  outlined consume of Data?(v109, v100);
  dispatch_semaphore_t result = swift_bridgeObjectRelease();
  if (!(v143 >> 62))
  {
    uint64_t v144 = *(void *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v144)
    {
      if (v144 == 1) {
        goto LABEL_33;
      }
      goto LABEL_78;
    }
LABEL_79:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    v101 = (void *)swift_allocError();
    char v265 = 4;
    goto LABEL_80;
  }
  swift_bridgeObjectRetain();
  uint64_t v262 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v262) {
    goto LABEL_79;
  }
  swift_bridgeObjectRetain();
  uint64_t v263 = _CocoaArrayWrapper.endIndex.getter();
  dispatch_semaphore_t result = swift_bridgeObjectRelease();
  if (v263 != 1)
  {
LABEL_78:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    v101 = (void *)swift_allocError();
    char v265 = 5;
LABEL_80:
    char *v264 = v265;
    swift_willThrow();
    outlined consume of Data?((uint64_t)v302, v100);
    outlined destroy of TetraRatchetOuterMessage(v307, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?((uint64_t)v299, &demangling cache variable for type metadata for TetraSessionStates?);
    v124 = v304;
    unint64_t v87 = v305;
    goto LABEL_24;
  }
LABEL_33:
  if ((v143 & 0xC000000000000001) != 0)
  {
    v145 = (int *)MEMORY[0x2166CCBD0](0, v143);
    goto LABEL_36;
  }
  if (!*(void *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v145 = (int *)*(id *)(v143 + 32);
LABEL_36:
  v146 = v145;
  swift_bridgeObjectRelease();
  id v147 = objc_msgSend(v92, sel_compactRepresentation);
  v148 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v150 = v149;

  v309[0] = v148;
  v309[1] = v150;
  P256.Signing.PublicKey.init<A>(compactRepresentation:)();
  uint64_t v151 = v307 + v296[7];
  uint64_t v152 = v283;
  v296 = v146;
  v153 = *(char **)(v283 + 16);
  uint64_t v154 = v274;
  uint64_t v291 = v151;
  uint64_t v155 = v284;
  uint64_t v288 = v283 + 16;
  v290 = v153;
  ((void (*)(uint64_t))v153)(v274);
  v156 = *(void (**)(void))(v152 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v156)(v154, 0, 1, v155);
  v157 = (int *)v270;
  uint64_t v158 = (uint64_t)v273;
  v301 = (char *)v273 + *(int *)(v270 + 28);
  v156();
  v159 = (void *)(v158 + v157[8]);
  uint64_t v160 = (uint64_t)v302;
  void *v159 = v302;
  v159[1] = v100;
  v161 = *(void (**)(void))(v272 + 16);
  v295 = (unsigned char *)(v158 + v157[6]);
  uint64_t v162 = v272;
  v161();
  v292 = v157[9];
  *((unsigned char *)&v292->isa + v158) = 1;
  outlined copy of Data?(v160, v100);
  v163 = v296;
  uint64_t v164 = v271;
  v165 = v163;
  TetraRatchetState.init(asReceiverWithFullPrekey:)(v163, v271);
  v296 = v165;
  (*(void (**)(char *, uint64_t))(v162 + 8))(v277, v275);
  uint64_t v217 = v157[5];
  v218 = v273;
  outlined init with take of TetraRatchetState(v164, (uint64_t)v273 + v217, type metadata accessor for TetraRatchetState);
  if (v108 >= 0xD) {
    int v219 = 13;
  }
  else {
    int v219 = v108;
  }
  int *v218 = v219;
  outlined assign with take of P256.KeyAgreement.PublicKey?(v274, (uint64_t)v301);
  char v308 = 0;
  int *v218 = v219;
  *((unsigned char *)&v292->isa + (void)v218) = 1;
  v220 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v307, v289, v306, &v308);
  unint64_t v222 = v221;
  v292 = v220;
  v295 = (unsigned char *)v223;
  v301 = v224;
  v225 = v299;
  uint64_t v226 = v269;
  outlined init with copy of TetraSessionStates?((uint64_t)v299, v269, &demangling cache variable for type metadata for TetraSessionStates?);
  uint64_t v227 = v294;
  unsigned int v228 = v303(v226, 1, v294);
  outlined destroy of TetraSessionStates?(v226, &demangling cache variable for type metadata for TetraSessionStates?);
  if (v228 == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v225, &demangling cache variable for type metadata for TetraSessionStates?);
    outlined init with copy of TetraRatchetOuterMessage((uint64_t)v273, (uint64_t)v225, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    *((unsigned char *)v225 + *(int *)(v227 + 20)) = 0;
    *(void *)((char *)v225 + *(int *)(v227 + 24)) = MEMORY[0x263F8EE78];
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v293 + 56))(v225, 0, 1, v227);
  }
  else
  {
    v229 = v267;
    outlined init with copy of TetraRatchetOuterMessage((uint64_t)v273, (uint64_t)v267, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    dispatch_semaphore_t result = ((uint64_t (*)(_DWORD *, uint64_t, uint64_t))v303)(v225, 1, v227);
    if (result == 1)
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    if (specialized static TetraSessionState.== infix(_:_:)(v225, v229))
    {
      outlined assign with copy of TetraSessionState((uint64_t)v229, (uint64_t)v225);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
      unint64_t v230 = (*(unsigned __int8 *)(v266 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80);
      v231 = (_OWORD *)swift_allocObject();
      v231[1] = xmmword_2164944D0;
      outlined init with copy of TetraRatchetOuterMessage((uint64_t)v225, (uint64_t)v231 + v230, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      v232 = (char *)v225 + *(int *)(v294 + 24);
      uint64_t v233 = *(void *)v232;
      v309[0] = v231;
      specialized Array.append<A>(contentsOf:)(v233);
      *(id *)v232 = v309[0];
      uint64_t v234 = outlined assign with copy of TetraSessionState((uint64_t)v229, (uint64_t)v225);
      MEMORY[0x270FA5388](v234);
      dispatch_semaphore_t result = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))partial apply for closure #1 in TetraSessionStates.makeDefault(_:));
      int64_t v235 = *(void *)(*(void *)v232 + 16);
      if (v235 < (uint64_t)result)
      {
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      specialized Array.replaceSubrange<A>(_:with:)((uint64_t)result, v235);
      v229 = v267;
    }
    TetraSessionStates.cleanupPreviousSessionStates()();
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v229, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  }
  id v236 = (id)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  if (v222 >> 60 != 15)
  {
    uint64_t v237 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v239 = v238;
    uint64_t v240 = (uint64_t)v301;
    outlined copy of Data._Representation((uint64_t)v301, v222);
    char v241 = swift_isUniquelyReferenced_nonNull_native();
    v309[0] = v236;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v240, v222, v237, v239, v241);
    id v236 = v309[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v242 = v268;
  outlined init with copy of TetraSessionStates?((uint64_t)v299, v268, &demangling cache variable for type metadata for TetraSessionStates?);
  dispatch_semaphore_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v303)(v242, 1, v294);
  if (result == 1) {
    goto LABEL_91;
  }
  specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v304, v242);
  v303 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v222;
  outlined destroy of TetraRatchetOuterMessage(v242, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  static os_log_type_t.debug.getter();
  dispatch_semaphore_t result = MessageProtectionLog();
  if (!result)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v243 = result;
  os_log(_:dso:log:_:_:)();

  id v244 = (id)conversationLock;
  OS_dispatch_semaphore.signal()();

  os_log_type_t v245 = static os_log_type_t.info.getter();
  dispatch_semaphore_t result = MessageProtectionLog();
  if (result)
  {
    v246 = result;
    if (os_log_type_enabled(result, v245))
    {
      unint64_t v247 = v298;
      swift_bridgeObjectRetain_n();
      v248 = (uint8_t *)swift_slowAlloc();
      v249 = (void *)swift_slowAlloc();
      v309[0] = v249;
      *(_DWORD *)v248 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v310 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v297, v247, (uint64_t *)v309);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2163F2000, v246, v245, "Successfully decrypted %s", v248, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v249, -1, -1);
      MEMORY[0x2166CDD30](v248, -1, -1);
    }

    uint64_t v250 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v236);
    swift_bridgeObjectRelease();
    uint64_t v251 = v307;
    unint64_t v298 = *(unsigned int *)(v307 + 24);
    v252 = v280;
    uint64_t v253 = v284;
    ((void (*)(char *, uint64_t, uint64_t))v290)(v280, v291, v284);
    uint64_t v254 = v283;
    unint64_t v255 = (*(unsigned __int8 *)(v283 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v283 + 80);
    unint64_t v256 = (v279 + v255 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v257 = swift_allocObject();
    v258 = v304;
    *(void *)(v257 + 16) = v281;
    *(void *)(v257 + 24) = v258;
    (*(void (**)(unint64_t, char *, uint64_t))(v254 + 32))(v257 + v255, v252, v253);
    *(void *)(v257 + v256) = v298;
    v259 = v258;
    uint64_t v260 = (uint64_t)v292;
    unint64_t v261 = (unint64_t)v295;
    v300(v292, (unint64_t)v295, (unsigned int (*)(uint64_t, uint64_t, uint64_t))v250, 0, partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:), v257);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Data._Representation(v260, v261);
    outlined consume of Data?((uint64_t)v301, (unint64_t)v303);

    outlined consume of Data?((uint64_t)v302, v100);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v273, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    uint64_t v183 = v251;
    goto LABEL_42;
  }
LABEL_94:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Swift.AnyObject>);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    void v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    id v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    BOOL v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  unint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of TetraSessionStates?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    uint64_t v10 = v15[0];
    BOOL v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  unint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of TetraSessionStates?(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CFStringRef, Any));
    uint64_t v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    id v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    char v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v7, v8);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    void *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    void v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  unint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of TetraSessionStates?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    char v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    void *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    outlined init with take of Any(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : Swift.AnyObject].Iterator._Variant();
    return v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  long long v32;
  long long v33;
  uint64_t v34;
  long long v35;
  long long v36;
  long long v37;
  uint64_t v38;
  _OWORD v39[2];
  _OWORD v40[2];

  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  long long v31 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  uint64_t v30 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v30) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v30) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v31 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v30) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v30) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v31 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = 16 * v12;
    uint64_t v18 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = v18[1];
    unint64_t v20 = (uint64_t *)(*(void *)(a1 + 56) + v17);
    unint64_t v21 = *v20;
    char v22 = v20[1];
    *(void *)&v40[0] = *v18;
    *((void *)&v40[0] + 1) = v19;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v21, v22);
    swift_dynamicCast();
    swift_dynamicCast();
    uint64_t v36 = v32;
    uint64_t v37 = v33;
    uint64_t v38 = v34;
    outlined init with take of Any(&v35, v39);
    long long v32 = v36;
    long long v33 = v37;
    uint64_t v34 = v38;
    outlined init with take of Any(v39, v40);
    outlined init with take of Any(v40, &v36);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    unint64_t v23 = -1 << *(unsigned char *)(v2 + 32);
    BOOL v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v6 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v24) & ~*(void *)(v6 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        long long v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0;
        }
        v26 |= v28;
        long long v29 = *(void *)(v6 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v9 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v32;
    *(_OWORD *)(v10 + 16) = v33;
    *(void *)(v10 + 32) = v34;
    uint64_t result = (uint64_t)outlined init with take of Any(&v36, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v30)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : Swift.AnyObject].Iterator._Variant();
    return v2;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v30) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

id TetraAPI.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id TetraAPI.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraAPI();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TetraAPI.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraAPI();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for TetraSessionState() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *id v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Data.Iterator();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_32;
      }
      uint64_t v10 = HIDWORD(a1) - (int)a1;
LABEL_6:
      unint64_t v13 = *v3;
      int64_t v14 = *((void *)*v3 + 2);
      int64_t v15 = v14 + v10;
      if (__OFADD__(v14, v10))
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      void *v3 = v13;
      if (!isUniquelyReferenced_nonNull_native || (int64_t v17 = *((void *)v13 + 3) >> 1, v17 < v15))
      {
        if (v14 <= v15) {
          int64_t v18 = v14 + v10;
        }
        else {
          int64_t v18 = v14;
        }
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v18, 1, v13);
        void *v3 = v13;
        int64_t v17 = *((void *)v13 + 3) >> 1;
      }
      uint64_t v19 = v17 - *((void *)v13 + 2);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v20 = Data._copyContents(initializing:)();
      outlined consume of Data._Representation(a1, a2);
      outlined consume of Data._Representation(a1, a2);
      if (v20 < v10) {
        goto LABEL_20;
      }
      if (v20 >= 1)
      {
        uint64_t v21 = *((void *)v13 + 2);
        BOOL v22 = __OFADD__(v21, v20);
        uint64_t v23 = v21 + v20;
        if (v22)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          JUMPOUT(0x2164152C4);
        }
        *((void *)v13 + 2) = v23;
      }
      if (v20 == v19)
      {
LABEL_21:
        int64_t v25 = *((void *)v13 + 2);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator, MEMORY[0x263F06F40]);
        dispatch thunk of IteratorProtocol.next()();
        if (v30) {
          return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
        }
        while (1)
        {
          unint64_t v26 = *((void *)v13 + 3);
          int64_t v27 = v26 >> 1;
          if ((uint64_t)(v26 >> 1) >= v25 + 1) {
            break;
          }
          unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v25 + 1, 1, v13);
          void *v3 = v13;
          char v28 = v30;
          int64_t v27 = *((void *)v13 + 3) >> 1;
          if ((v30 & 1) == 0) {
            goto LABEL_26;
          }
LABEL_23:
          *((void *)v13 + 2) = v25;
          if (v28) {
            return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
          }
        }
        char v28 = 0;
        do
        {
LABEL_26:
          if (v25 >= v27) {
            break;
          }
          v13[v25++ + 32] = v29[14];
          dispatch thunk of IteratorProtocol.next()();
          char v28 = v30;
        }
        while ((v30 & 1) == 0);
        goto LABEL_23;
      }
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_6;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  int64_t v4 = *result;
  *int64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  int64_t v8 = *a2;
  if (*a2)
  {
    *int64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  _CFObject.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int16 a1)
{
  uint64_t v3 = MEMORY[0x2166CCE20](*(void *)(v1 + 40), a1, 2);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFStringRef(0);
    unint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    uint64_t v7 = v6;
    uint64_t v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        uint64_t v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        BOOL v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    unint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x2166CCB80](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSObject);
    unint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        uint64_t v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        uint64_t v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, SymmetricKey>);
  int v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v36 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    unint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  void *v38;
  void (**v39)(char *, unint64_t, uint64_t);
  int v40;
  uint64_t v41;

  uint64_t v3 = v2;
  uint64_t v41 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt16, SymmetricKey>);
  int v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v36 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    unint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(unsigned __int16 *)(*(void *)(v8 + 48) + 2 * v20);
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = MEMORY[0x2166CCE20](*(void *)(v10 + 40), v24, 2);
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_WORD *)(*(void *)(v10 + 48) + 2 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v3 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      char v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v8;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = outlined consume of Data._Representation(*(void *)v21, *(void *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v25 = a3;
  v25[1] = a4;
  char v26 = (void *)(v20[7] + 16 * v14);
  *char v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = type metadata accessor for SymmetricKey();
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:
  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, __int16 a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_WORD *)(a4[6] + 2 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(unint64_t))
{
  uint64_t v4 = type metadata accessor for TetraSessionState() - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v36 = (uint64_t)&v33 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v37 = (uint64_t)&v33 - v11;
  uint64_t v38 = v1;
  unint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v35 = v14;
  while (1)
  {
    char v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v19 = *(void *)(v12 + 16);
    if (v16 + 1 == v19) {
      return v16;
    }
    uint64_t v34 = v7;
    uint64_t v20 = v15 + v14;
    unint64_t v21 = v16 + 1;
    while (v21 < v19)
    {
      unint64_t v39 = v21;
      uint64_t v22 = v15;
      uint64_t v23 = v20;
      uint64_t v24 = v12 + v20;
      char v25 = a1;
      uint64_t v26 = v37;
      outlined init with copy of TetraRatchetOuterMessage(v24, v37, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      uint64_t v27 = v25;
      LOBYTE(v25) = v25(v26);
      uint64_t result = outlined destroy of TetraRatchetOuterMessage(v26, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      if (v25)
      {
        a1 = v27;
        uint64_t v15 = v22;
        unint64_t v28 = v39;
      }
      else
      {
        unint64_t v28 = v39;
        a1 = v27;
        uint64_t v15 = v22;
        if (v39 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          unint64_t v29 = *v38;
          unint64_t v30 = *(void *)(*v38 + 16);
          if (v16 >= v30) {
            goto LABEL_33;
          }
          uint64_t result = outlined init with copy of TetraRatchetOuterMessage(v29 + v35 + v16 * v22, v36, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
          if (v39 >= v30) {
            goto LABEL_34;
          }
          uint64_t v20 = v23;
          outlined init with copy of TetraRatchetOuterMessage(v29 + v23, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v38 = v29;
          if ((result & 1) == 0)
          {
            uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
            unint64_t v29 = result;
            *uint64_t v38 = result;
          }
          if (v16 >= *(void *)(v29 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = outlined assign with take of TetraSessionState((uint64_t)v34, v29 + v35 + v16 * v22);
          if (v39 >= *(void *)(*v38 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = outlined assign with take of TetraSessionState(v36, *v38 + v23);
          unint64_t v28 = v39;
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v32 = v28 + 1;
      if (__OFADD__(v28, 1)) {
        goto LABEL_30;
      }
      unint64_t v12 = *v38;
      unint64_t v19 = *(void *)(*v38 + 16);
      unint64_t v21 = v28 + 1;
      v20 += v15;
      if (v32 == v19) {
        return v16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for TetraSessionState() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(unint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, void *a8, uint64_t a9, unint64_t a10))(char a1)
{
  os_log_type_t v17 = static os_log_type_t.info.getter();
  uint64_t v18 = MessageProtectionLog();
  if (!v18)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    JUMPOUT(0x216417E98);
  }
  uint64_t v20 = a9;
  unint64_t v19 = a10;
  log = v18;
  unint64_t v102 = a7;
  uint64_t v103 = a8;
  v104 = a3;
  if (os_log_type_enabled(v18, v17))
  {
    swift_bridgeObjectRetain();
    os_log_type_t type = v17;
    id v21 = a3;
    outlined copy of Data._Representation(a4, a5);
    swift_bridgeObjectRetain();
    id v22 = a8;
    outlined copy of Data._Representation(a9, a10);
    swift_bridgeObjectRetain();
    unint64_t v101 = a5;
    id v23 = v21;
    outlined copy of Data._Representation(a4, v101);
    swift_bridgeObjectRetain();
    id v98 = v22;
    outlined copy of Data._Representation(a9, a10);
    uint64_t v24 = swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    uint64_t v111 = v99;
    *(_DWORD *)uint64_t v24 = 136316418;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2080;
    id v25 = objc_msgSend(v23, sel_base64EncodedStringWithOptions_, 0);
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a5 = v101;
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2080;
    Swift::String v29 = Data.base64EncodedString(options:)(0);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29._countAndFlagsBits, (unint64_t)v29._object, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a4, v101);
    outlined consume of Data._Representation(a4, v101);
    *(_WORD *)(v24 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 42) = 2080;
    id v30 = objc_msgSend(v98, sel_base64EncodedStringWithOptions_, 0);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    uint64_t v34 = v31;
    uint64_t v20 = a9;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 52) = 2080;
    Swift::String v35 = Data.base64EncodedString(options:)(0);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35._countAndFlagsBits, (unint64_t)v35._object, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v19 = a10;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a9, a10);
    outlined consume of Data._Representation(a9, a10);
    _os_log_impl(&dword_2163F2000, log, type, "Computing ConversationID with sendingURI:%s, sendingPushToken:%s, sendingPublicKey:%s receivingURI: %s receivingPushToken: %s receivingPublicKey:%s", (uint8_t *)v24, 0x3Eu);
    swift_arrayDestroy();
    MEMORY[0x2166CDD30](v99, -1, -1);
    MEMORY[0x2166CDD30](v24, -1, -1);
  }
  else
  {
  }
  switch(a5 >> 62)
  {
    case 1uLL:
      LODWORD(v36) = HIDWORD(a4) - a4;
      if (__OFSUB__(HIDWORD(a4), a4)) {
        goto LABEL_34;
      }
      uint64_t v36 = (int)v36;
LABEL_10:
      if (v36 != 32) {
        goto LABEL_39;
      }
      break;
    case 2uLL:
      uint64_t v38 = *(void *)(a4 + 16);
      uint64_t v37 = *(void *)(a4 + 24);
      BOOL v39 = __OFSUB__(v37, v38);
      uint64_t v36 = v37 - v38;
      if (!v39) {
        goto LABEL_10;
      }
      goto LABEL_35;
    case 3uLL:
      goto LABEL_39;
    default:
      uint64_t v36 = BYTE6(a5);
      goto LABEL_10;
  }
  switch(v19 >> 62)
  {
    case 1uLL:
      LODWORD(v40) = HIDWORD(v20) - v20;
      if (__OFSUB__(HIDWORD(v20), v20)) {
        goto LABEL_36;
      }
      uint64_t v40 = (int)v40;
LABEL_16:
      if (v40 != 32) {
        goto LABEL_40;
      }
      unint64_t v43 = a5;
      uint64_t v44 = String.count.getter();
      I2OSP(value:outputByteCount:)(v44, 4);
      uint64_t v46 = v45;
      unint64_t v48 = v47;
      swift_bridgeObjectRetain();
      uint64_t v49 = specialized Data.init<A>(_:)(a1, a2);
      unint64_t v51 = v50;
      outlined copy of Data._Representation(v46, v48);
      specialized Data.append<A>(contentsOf:)(v49, v51);
      outlined consume of Data._Representation(v49, v51);
      outlined consume of Data._Representation(v46, v48);
      uint64_t v52 = v46;
      unint64_t v53 = v48;
      id v54 = v104;
      uint64_t v55 = NSData.startIndex.getter();
      uint64_t v56 = NSData.endIndex.getter();
      uint64_t v57 = NSData.startIndex.getter();
      uint64_t v58 = NSData.endIndex.getter();
      if (v55 < v57 || v58 < v55)
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      uint64_t v59 = NSData.startIndex.getter();
      uint64_t v60 = NSData.endIndex.getter();

      if (v56 < v59 || v60 < v56) {
        goto LABEL_29;
      }
      if (__OFSUB__(v56, v55))
      {
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      I2OSP(value:outputByteCount:)(v56 - v55, 4);
      uint64_t v62 = v61;
      unint64_t v64 = v63;
      uint64_t v111 = v52;
      unint64_t v112 = v53;
      outlined copy of Data._Representation(v52, v53);
      specialized Data.append<A>(contentsOf:)(v62, v64);
      outlined consume of Data._Representation(v62, v64);
      outlined consume of Data._Representation(v52, v53);
      uint64_t v65 = v111;
      unint64_t v66 = v112;
      uint64_t v107 = v111;
      unint64_t v109 = v112;
      id v67 = v54;
      outlined copy of Data._Representation(v65, v66);
      specialized Data.append<A>(contentsOf:)(v67);

      outlined consume of Data._Representation(v65, v66);
      uint64_t v111 = v107;
      unint64_t v112 = v109;
      outlined copy of Data._Representation(a4, v43);
      outlined copy of Data._Representation(v107, v109);
      specialized Data.append<A>(contentsOf:)(a4, v43);
      outlined consume of Data._Representation(a4, v43);
      outlined consume of Data._Representation(v107, v109);
      uint64_t v68 = v111;
      unint64_t v69 = v112;
      uint64_t v70 = String.count.getter();
      I2OSP(value:outputByteCount:)(v70, 4);
      uint64_t v72 = v71;
      unint64_t v74 = v73;
      swift_bridgeObjectRetain();
      uint64_t v75 = specialized Data.init<A>(_:)(a6, v102);
      unint64_t v77 = v76;
      outlined copy of Data._Representation(v72, v74);
      specialized Data.append<A>(contentsOf:)(v75, v77);
      outlined consume of Data._Representation(v75, v77);
      outlined consume of Data._Representation(v72, v74);
      uint64_t v78 = v72;
      unint64_t v79 = v74;
      id v80 = v103;
      uint64_t v81 = NSData.startIndex.getter();
      uint64_t v82 = NSData.endIndex.getter();
      uint64_t v83 = NSData.startIndex.getter();
      uint64_t v84 = NSData.endIndex.getter();
      if (v81 < v83 || v84 < v81) {
        goto LABEL_31;
      }
      uint64_t v85 = NSData.startIndex.getter();
      uint64_t v86 = NSData.endIndex.getter();

      if (v82 < v85 || v86 < v82) {
        goto LABEL_32;
      }
      if (__OFSUB__(v82, v81)) {
        goto LABEL_33;
      }
      I2OSP(value:outputByteCount:)(v82 - v81, 4);
      uint64_t v88 = v87;
      unint64_t v90 = v89;
      uint64_t v111 = v78;
      unint64_t v112 = v79;
      outlined copy of Data._Representation(v78, v79);
      specialized Data.append<A>(contentsOf:)(v88, v90);
      outlined consume of Data._Representation(v88, v90);
      outlined consume of Data._Representation(v78, v79);
      uint64_t v91 = v111;
      unint64_t v92 = v112;
      uint64_t v108 = v111;
      unint64_t v110 = v112;
      id v93 = v80;
      outlined copy of Data._Representation(v91, v92);
      specialized Data.append<A>(contentsOf:)(v93);

      outlined consume of Data._Representation(v91, v92);
      uint64_t v111 = v108;
      unint64_t v112 = v110;
      outlined copy of Data._Representation(a9, a10);
      outlined copy of Data._Representation(v108, v110);
      specialized Data.append<A>(contentsOf:)(a9, a10);
      outlined consume of Data._Representation(a9, a10);
      outlined consume of Data._Representation(v108, v110);
      uint64_t v94 = v111;
      unint64_t v95 = v112;
      uint64_t v96 = (void *)swift_allocObject();
      v96[2] = v68;
      v96[3] = v69;
      v96[4] = v94;
      v96[5] = v95;
      return partial apply for closure #1 in static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:);
    case 2uLL:
      uint64_t v42 = *(void *)(v20 + 16);
      uint64_t v41 = *(void *)(v20 + 24);
      BOOL v39 = __OFSUB__(v41, v42);
      uint64_t v40 = v41 - v42;
      if (!v39) {
        goto LABEL_16;
      }
      goto LABEL_37;
    case 3uLL:
      goto LABEL_40;
    default:
      uint64_t v40 = BYTE6(v19);
      goto LABEL_16;
  }
}

uint64_t specialized static TetraAPI.markForStateReset(ourURI:ourPushToken:theirURI:theirPushToken:theirRegistration:signedByOur:)(unint64_t a1, unint64_t a2, void *a3, unint64_t a4, unint64_t a5, void *a6, char *a7, void *a8)
{
  unint64_t v72 = a5;
  unint64_t v73 = a6;
  unint64_t v71 = a4;
  uint64_t v13 = type metadata accessor for TetraSessionState();
  uint64_t v65 = *(void *)(v13 - 8);
  uint64_t v66 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v68 = (int *)((char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  MEMORY[0x270FA5388](v15 - 8);
  os_log_type_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for TetraSessionStates();
  uint64_t v18 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  unint64_t v69 = (_DWORD *)((char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v20 = objc_msgSend(a8, sel_publicKey);
  id v21 = objc_msgSend(v20, sel_compactRepresentation);

  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  id v67 = a7;
  id v25 = objc_msgSend(*(id *)&a7[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey], sel_compactRepresentation);
  uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v28 = v27;

  Swift::String v29 = specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a1, a2, a3, v22, v24, v71, v72, v73, v26, v28);
  uint64_t v31 = v30;
  outlined consume of Data._Representation(v26, v28);
  outlined consume of Data._Representation(v22, v24);
  uint64_t v32 = v29(1);
  unint64_t v34 = v33;
  v35.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v32, v34);
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v35.super.isa, (uint64_t)v17);
  uint64_t v36 = v70;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v70) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for TetraSessionStates?);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
    uint64_t v38 = v35.super.isa;
    BOOL v39 = static OS_os_log.default.getter();
    os_log_type_t v40 = v37;
    if (os_log_type_enabled(v39, v37))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 138412290;
      uint64_t v74 = (uint64_t)v38;
      unint64_t v43 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v42 = v38;

      _os_log_impl(&dword_2163F2000, v39, v40, "We failed to reset the session state for the provided session: %@.", v41, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v42, -1, -1);
      MEMORY[0x2166CDD30](v41, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
    }
    return 0;
  }
  else
  {
    uint64_t v45 = (uint64_t)v17;
    uint64_t v46 = v69;
    outlined init with take of TetraRatchetState(v45, (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
    uint64_t v47 = *(int *)(v36 + 20);
    if (*((unsigned char *)v46 + v47) & 1) != 0 || (*((unsigned char *)v46 + *(int *)(v66 + 36)))
    {
      unint64_t v48 = (char *)v67;
      uint64_t v49 = v68;
      TetraSessionState.init(remoteTetraRegistration:sessionDST:)(v48, (uint64_t (*)(uint64_t))v29, v31, v68);
      if (specialized static TetraSessionState.== infix(_:_:)(v46, v49))
      {
        outlined assign with copy of TetraSessionState((uint64_t)v49, (uint64_t)v46);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
        unint64_t v50 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
        uint64_t v51 = v36;
        uint64_t v52 = swift_allocObject();
        *(_OWORD *)(v52 + 16) = xmmword_2164944D0;
        outlined init with copy of TetraRatchetOuterMessage((uint64_t)v46, v52 + v50, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        unint64_t v53 = (uint64_t *)((char *)v46 + *(int *)(v51 + 24));
        uint64_t v54 = *v53;
        uint64_t v74 = v52;
        specialized Array.append<A>(contentsOf:)(v54);
        *unint64_t v53 = v74;
        uint64_t v55 = outlined assign with copy of TetraSessionState((uint64_t)v49, (uint64_t)v46);
        MEMORY[0x270FA5388](v55);
        uint64_t result = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))closure #1 in TetraSessionStates.makeDefault(_:)partial apply);
        int64_t v56 = *(void *)(*v53 + 16);
        if (v56 < result)
        {
          __break(1u);
          return result;
        }
        specialized Array.replaceSubrange<A>(_:with:)(result, v56);
      }
      TetraSessionStates.cleanupPreviousSessionStates()();
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      *((unsigned char *)v46 + v47) = 0;
    }
    specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v35.super.isa, (uint64_t)v46);
    os_log_type_t v57 = static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
    uint64_t v58 = v35.super.isa;
    uint64_t v59 = static OS_os_log.default.getter();
    os_log_type_t v60 = v57;
    if (os_log_type_enabled(v59, v57))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 138412290;
      uint64_t v74 = (uint64_t)v58;
      unint64_t v63 = v58;
      uint64_t v46 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v62 = v58;

      _os_log_impl(&dword_2163F2000, v59, v60, "Persisted the request to reset the following session: %@.", v61, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v62, -1, -1);
      MEMORY[0x2166CDD30](v61, -1, -1);
    }
    else
    {

      uint64_t v59 = v58;
    }

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v46, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
    swift_release();
    return 1;
  }
}

Class specialized static TetraAPI.seal(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:receiverRegistration:encryptedAttributes:resetState:signedBy:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, void *a7, uint64_t (*a8)(uint64_t), unint64_t a9, void *a10, objc_class *a11, uint64_t a12, char a13, void *a14)
{
  uint64_t v138 = a7;
  v139 = a8;
  uint64_t v131 = a3;
  unint64_t v132 = a4;
  uint64_t v141 = a14;
  v146 = a11;
  uint64_t v18 = type metadata accessor for TetraRatchetOuterMessage();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v127 = (uint64_t)v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v128 = (uint64_t)v124 - v21;
  uint64_t v130 = type metadata accessor for TetraSessionState();
  uint64_t v126 = *(void *)(v130 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v130);
  uint64_t v133 = (int *)((char *)v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v22);
  unint64_t v129 = (int *)((char *)v124 - v24);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  MEMORY[0x270FA5388](v25 - 8);
  unint64_t v140 = (unint64_t)v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for TetraSessionStates();
  uint64_t v135 = *(void *)(v27 - 8);
  uint64_t v136 = v27;
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  uint64_t v125 = (uint64_t)v124 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v134 = (_DWORD *)((char *)v124 - v30);
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(a12 + 16);
  unint64_t v142 = a2;
  unint64_t v145 = a1;
  if (v34)
  {
    uint64_t v35 = v31;
    outlined copy of Data._Representation(a1, a2);
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v33);
    if (v37)
    {
      uint64_t v38 = (uint64_t *)(*(void *)(a12 + 56) + 16 * v36);
      uint64_t v39 = *v38;
      unint64_t v143 = v38[1];
      uint64_t v144 = v39;
      outlined copy of Data._Representation(v39, v143);
      goto LABEL_6;
    }
  }
  else
  {
    outlined copy of Data._Representation(a1, a2);
  }
  unint64_t v143 = 0xF000000000000000;
  uint64_t v144 = 0;
LABEL_6:
  swift_bridgeObjectRelease();
  id v40 = objc_msgSend(v141, sel_publicKey);
  id v41 = objc_msgSend(v40, sel_compactRepresentation);

  uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v44 = v43;

  id v45 = objc_msgSend(*(id *)((char *)v146 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey), sel_compactRepresentation);
  uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v48 = v47;

  uint64_t v49 = specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a5, a6, v138, v42, v44, (unint64_t)v139, a9, a10, v46, v48);
  uint64_t v51 = v50;
  uint64_t v52 = v46;
  unint64_t v53 = (uint64_t (*)(uint64_t))v49;
  outlined consume of Data._Representation(v52, v48);
  outlined consume of Data._Representation(v42, v44);
  uint64_t v54 = v53(1);
  unint64_t v56 = v55;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v54, v56);
  os_log_type_t v58 = static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
  uint64_t v59 = isa;
  os_log_type_t v60 = static OS_os_log.default.getter();
  os_log_type_t v61 = v58;
  BOOL v62 = os_log_type_enabled(v60, v58);
  v139 = v53;
  if (v62)
  {
    unint64_t v63 = v51;
    uint64_t v64 = v59;
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    uint64_t v148 = v66;
    *(_DWORD *)uint64_t v65 = 136315138;
    uint64_t v138 = v63;
    v124[1] = v65 + 4;
    id v67 = [(objc_class *)v59 base64EncodedStringWithOptions:0];
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v70 = v69;

    uint64_t v71 = v68;
    uint64_t v59 = v64;
    uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v70, &v148);
    uint64_t v51 = v138;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2163F2000, v60, v61, "Encrypting for conversationID: %s", v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2166CDD30](v66, -1, -1);
    MEMORY[0x2166CDD30](v65, -1, -1);
  }
  else
  {
  }
  uint64_t v72 = v140;
  static os_log_type_t.debug.getter();
  Class result = (Class)MessageProtectionLog();
  unint64_t v74 = v142;
  if (!result)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  Class v75 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for conversationLock != -1) {
    swift_once();
  }
  id v76 = (id)conversationLock;
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.debug.getter();
  Class result = (Class)MessageProtectionLog();
  if (!result) {
    goto LABEL_41;
  }
  Class v77 = result;
  uint64_t v78 = MEMORY[0x263F8EE78];
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v79 = v137;
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v59, v72);
  if (v79)
  {
    static os_log_type_t.debug.getter();
    Class result = (Class)MessageProtectionLog();
    if (result)
    {
      Class v80 = result;
      os_log(_:dso:log:_:_:)();

      Class v81 = (Class)(id)conversationLock;
      OS_dispatch_semaphore.signal()();

      swift_willThrow();
      swift_release();

      outlined consume of Data._Representation(v145, v74);
      outlined consume of Data?(v144, v143);
      return v81;
    }
    goto LABEL_42;
  }
  uint64_t v82 = v136;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v72, 1, v136) == 1)
  {
    outlined destroy of TetraSessionStates?(v72, &demangling cache variable for type metadata for TetraSessionStates?);
    uint64_t v83 = v146;
    uint64_t v84 = v133;
    TetraSessionState.init(remoteTetraRegistration:sessionDST:)(v83, v139, (uint64_t)v51, v133);
    v146 = v59;
    uint64_t v138 = v51;
    uint64_t v85 = TetraRegistration.computeKeysHash()();
    uint64_t v87 = v85;
    unsigned int v88 = *(_DWORD *)&v83[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];
    if (v88 >= 0xD) {
      unsigned int v88 = 13;
    }
    int *v84 = v88;
    char v89 = *((unsigned char *)v84 + *(int *)(v130 + 36));
    unint64_t v140 = v86;
    if (v89)
    {
      uint64_t v90 = 0;
      unint64_t v91 = 0xF000000000000000;
    }
    else
    {
      unint64_t v91 = v86;
      outlined copy of Data._Representation(v85, v86);
      uint64_t v90 = v87;
    }
    uint64_t v97 = v127;
    TetraRatchetState.sealMessage(message:authenticatedData:prekeyHash:)(v145, v142, v144, v143, v131, v132, v90, v91, v127);
    outlined consume of Data?(v90, v91);
    outlined consume of Data._Representation(v87, v140);
    uint64_t v114 = TetraRatchetOuterMessage.serializedData(signedBy:)(v141);
    uint64_t v141 = v115;
    outlined destroy of TetraRatchetOuterMessage(v97, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    uint64_t v116 = v125;
    outlined init with copy of TetraRatchetOuterMessage((uint64_t)v133, v125, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    uint64_t v117 = v136;
    *(unsigned char *)(v116 + *(int *)(v136 + 20)) = 0;
    *(void *)(v116 + *(int *)(v117 + 24)) = v78;
    specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v146, v116);
    unint64_t v118 = v142;
    outlined destroy of TetraRatchetOuterMessage(v116, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
    static os_log_type_t.debug.getter();
    Class result = (Class)MessageProtectionLog();
    if (!result) {
      goto LABEL_44;
    }
    Class v121 = result;
    os_log(_:dso:log:_:_:)();

    id v122 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    unint64_t v123 = (unint64_t)v141;
    Class v81 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v145, v118);
    outlined consume of Data?(v144, v143);
    outlined consume of Data._Representation(v114, v123);

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v133, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
LABEL_38:
    swift_release();
    return v81;
  }
  unint64_t v92 = v134;
  outlined init with take of TetraRatchetState(v72, (uint64_t)v134, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  uint64_t v93 = *(int *)(v82 + 20);
  uint64_t v94 = (char *)v146;
  if (*((unsigned char *)v92 + v93) & 1) != 0 || *((unsigned char *)v92 + *(int *)(v130 + 36)) == 1 && (a13)
  {
    unint64_t v95 = v146;
    uint64_t v96 = v129;
    TetraSessionState.init(remoteTetraRegistration:sessionDST:)(v95, v139, (uint64_t)v51, v129);
    if (specialized static TetraSessionState.== infix(_:_:)(v92, v96))
    {
      outlined assign with copy of TetraSessionState((uint64_t)v96, (uint64_t)v92);
LABEL_33:
      TetraSessionStates.cleanupPreviousSessionStates()();
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v96, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      *((unsigned char *)v92 + v93) = 0;
      goto LABEL_34;
    }
    uint64_t v138 = v51;
    id v98 = v59;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
    uint64_t v99 = (uint64_t)v92;
    unint64_t v100 = (*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
    uint64_t v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = xmmword_2164944D0;
    outlined init with copy of TetraRatchetOuterMessage(v99, v101 + v100, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    unint64_t v102 = (uint64_t *)(v99 + *(int *)(v136 + 24));
    uint64_t v103 = *v102;
    uint64_t v148 = v101;
    specialized Array.append<A>(contentsOf:)(v103);
    uint64_t *v102 = v148;
    uint64_t v104 = outlined assign with copy of TetraSessionState((uint64_t)v96, v99);
    MEMORY[0x270FA5388](v104);
    Class result = (Class)specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))closure #1 in TetraSessionStates.makeDefault(_:)partial apply);
    int64_t v105 = *(void *)(*v102 + 16);
    if (v105 >= (uint64_t)result)
    {
      specialized Array.replaceSubrange<A>(_:with:)((uint64_t)result, v105);
      uint64_t v59 = v98;
      uint64_t v51 = v138;
      unint64_t v92 = v134;
      uint64_t v94 = (char *)v146;
      goto LABEL_33;
    }
    __break(1u);
    goto LABEL_40;
  }
LABEL_34:
  uint64_t v106 = TetraRegistration.computeKeysHash()();
  uint64_t v107 = v94;
  unint64_t v109 = v108;
  uint64_t v110 = v128;
  TetraSessionStates.sealMessage(message:authenticatedData:prekeyHash:remoteRegistration:sessionDST:)(v145, v74, v144, v143, v131, v132, v106, v108, v128, v107, v139, (uint64_t)v51);
  outlined consume of Data._Representation(v106, v109);
  uint64_t v111 = TetraRatchetOuterMessage.serializedData(signedBy:)(v141);
  unint64_t v113 = v112;
  outlined destroy of TetraRatchetOuterMessage(v110, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v59, (uint64_t)v134);
  static os_log_type_t.debug.getter();
  Class result = (Class)MessageProtectionLog();
  if (result)
  {
    Class v119 = result;
    os_log(_:dso:log:_:_:)();

    id v120 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    Class v81 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v111, v113);
    outlined consume of Data._Representation(v145, v74);
    outlined consume of Data?(v144, v143);

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v134, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
    goto LABEL_38;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE;
  if (!lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE;
  if (!lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v9 = *v3;
    goto LABEL_15;
  }
  if (*v3 >> 62) {
    goto LABEL_36;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v3 = v9;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v7 = 1;
  }
  if (v9 >> 62) {
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v8) {
    uint64_t v12 = v8;
  }
  swift_bridgeObjectRetain();
  unint64_t *v3 = MEMORY[0x2166CCBE0](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for ReceivingKeyTetraRatchet(0);
  swift_arrayDestroy();
  if (v5)
  {
    if (*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_21:
        if (v16 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        os_log_type_t v17 = (char *)(v13 + 8 * v2);
        if (v4 != v2 || v14 >= &v17[8 * v16]) {
          memmove(v14, v17, 8 * v16);
        }
        if (!(*v3 >> 62))
        {
          uint64_t v18 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v19 = v18 + v5;
          if (!__OFADD__(v18, v5))
          {
LABEL_27:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v19 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v16 = v15 - v2;
      if (!__OFSUB__(v15, v2)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  return specialized Array._endMutation()();
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v6 = (id)MEMORY[0x2166CCBD0](v5, a1);
LABEL_9:
        uint64_t v7 = v6;
        unint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_16;
        }
        id v9 = objc_msgSend(v6, sel_tetraRegistration);
        if (v9
          && (uint64_t v10 = v9,
              uint64_t v11 = TetraRegistration.computeKeysHash()(),
              unint64_t v13 = v12,
              char v14 = specialized static Data.== infix(_:_:)(v11, v12, a2, a3),
              outlined consume of Data._Representation(v11, v13),
              v10,
              (v14 & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v5;
        if (v8 == v4) {
          return v18;
        }
      }
      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return MEMORY[0x263F8EE78];
      }
    }
    id v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x263F8EE78];
}

unint64_t lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError;
  if (!lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError;
  if (!lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError);
  }
  return result;
}

uint64_t outlined destroy of TetraSessionStates?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with take of P256.KeyAgreement.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraRatchetOuterMessage(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with copy of TetraSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in TetraSessionStates.makeDefault(_:)(_DWORD *a1)
{
  return closure #1 in TetraSessionStates.makeDefault(_:)(a1, *(_DWORD **)(v1 + 16)) & 1;
}

uint64_t outlined init with take of TetraRatchetState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for TetraAPI()
{
  return self;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

NSObject *specialized static TetraAPI.open(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:signedBy:tetraVersion:ourPrekeys:ourSigningPublicKeyCompactRepresentation:decryptionBlock:)(uint64_t a1, unint64_t a2, objc_class *a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, void *a9, unint64_t a10, unint64_t a11, void *a12, void *a13, int a14, uint64_t a15, uint64_t a16, void *a17, uint8_t *a18)
{
  unint64_t v306 = a6;
  uint64_t v305 = a5;
  v311 = a3;
  unint64_t v312 = a4;
  uint64_t v309 = a1;
  unint64_t v310 = a2;
  uint64_t v20 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v278 = (uint64_t)&v271 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v279 = *(void *)(v280 - 8);
  MEMORY[0x270FA5388](v280);
  uint64_t v283 = (char *)&v271 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v282 = type metadata accessor for TetraSessionState();
  uint64_t v274 = *(void *)(v282 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v282);
  uint64_t v275 = (_DWORD *)((char *)&v271 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v23);
  uint64_t v281 = (int *)((char *)&v271 - v25);
  uint64_t v293 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v291 = *(void *)(v293 - 8);
  MEMORY[0x270FA5388](v293);
  uint64_t v285 = v26;
  uint64_t v286 = (char *)&v271 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  v289 = (char *)&v271 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v290 = (uint64_t)&v271 - v30;
  uint64_t v302 = type metadata accessor for TetraSessionStates();
  uint64_t v301 = *(void *)(v302 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v302);
  uint64_t v288 = (char *)&v271 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v287 = (uint64_t)&v271 - v34;
  MEMORY[0x270FA5388](v33);
  unint64_t v303 = (unint64_t)&v271 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  v276 = (char *)&v271 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v277 = (uint64_t)&v271 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  v295 = (char *)&v271 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  v300 = (char *)&v271 - v44;
  MEMORY[0x270FA5388](v43);
  uint64_t v307 = (_DWORD *)((char *)&v271 - v45);
  v304 = (int *)type metadata accessor for TetraRatchetOuterMessage();
  uint64_t v46 = MEMORY[0x270FA5388](v304);
  unint64_t v298 = (uint64_t *)((char *)&v271 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  uint64_t v294 = (char *)&v271 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  uint64_t v292 = (uint64_t)&v271 - v51;
  uint64_t v52 = MEMORY[0x270FA5388](v50);
  uint64_t v299 = (uint64_t)&v271 - v53;
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v297 = (uint64_t)&v271 - v55;
  MEMORY[0x270FA5388](v54);
  uint64_t v314 = (uint64_t)&v271 - v56;
  id v308 = a13;
  id v57 = objc_msgSend(a13, sel_compactRepresentation);
  uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v60 = v59;

  uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v63 = v62;
  uint64_t v64 = specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a7, a8, a9, v58, v60, a10, a11, a12, v61, v62);
  uint64_t v66 = v65;
  outlined consume of Data._Representation(v61, v63);
  outlined consume of Data._Representation(v58, v60);
  uint64_t v67 = v64(0);
  unint64_t v69 = v68;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v67, v69);
  os_log_type_t v71 = static os_log_type_t.info.getter();
  uint64_t v72 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
  unint64_t v73 = isa;
  unint64_t v74 = static OS_os_log.default.getter();
  BOOL v75 = os_log_type_enabled(v74, v71);
  v296 = (uint64_t (*)(uint64_t))v64;
  uint64_t v284 = v72;
  if (v75)
  {
    id v76 = (uint8_t *)swift_slowAlloc();
    Class v77 = (void *)swift_slowAlloc();
    id aBlock = v77;
    *(_DWORD *)id v76 = 136315138;
    v273 = v76 + 4;
    uint64_t v78 = v73;
    id v79 = [(objc_class *)v73 base64EncodedStringWithOptions:0];
    uint64_t v80 = v66;
    uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v83 = v82;

    unint64_t v73 = v78;
    uint64_t v84 = v81;
    uint64_t v66 = v80;
    uint64_t v322 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v83, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2163F2000, v74, v71, "Decrypting for conversationID: %s", v76, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2166CDD30](v77, -1, -1);
    MEMORY[0x2166CDD30](v76, -1, -1);
  }
  else
  {
  }
  static os_log_type_t.debug.getter();
  uint64_t result = MessageProtectionLog();
  uint64_t v86 = v314;
  if (!result) {
    goto LABEL_84;
  }
  uint64_t v87 = result;
  uint64_t v313 = v66;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for conversationLock != -1) {
    swift_once();
  }
  id v88 = (id)conversationLock;
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.debug.getter();
  uint64_t result = MessageProtectionLog();
  if (!result) {
    goto LABEL_85;
  }
  char v89 = result;
  uint64_t v90 = a18;
  os_log(_:dso:log:_:_:)();

  unint64_t v92 = (unsigned char *)v309;
  unint64_t v91 = v310;
  outlined copy of Data._Representation(v309, v310);
  uint64_t v94 = (uint64_t)v311;
  unint64_t v93 = v312;
  outlined copy of Data._Representation((uint64_t)v311, v312);
  id v95 = v308;
  TetraRatchetOuterMessage.init(serializedData:authenticatedData:signedBy:)(v92, v91, v94, v93, v95, v86);
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v96 = (uint64_t)v307;
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v73, (uint64_t)v307);
  LODWORD(v312) = a14;
  id v97 = a17;
  uint64_t v98 = (uint64_t)v300;
  outlined init with copy of TetraSessionStates?(v96, (uint64_t)v300, &demangling cache variable for type metadata for TetraSessionStates?);
  uint64_t v99 = *(objc_class **)(v301 + 48);
  unint64_t v310 = v301 + 48;
  v311 = v99;
  int v100 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v99)(v98, 1, v302);
  uint64_t v272 = v73;
  if (v100 == 1)
  {
    outlined destroy of TetraSessionStates?(v98, &demangling cache variable for type metadata for TetraSessionStates?);
    goto LABEL_12;
  }
  id v308 = a17;
  outlined init with take of TetraRatchetState(v98, v303, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  LOBYTE(v322) = 0;
  uint64_t v107 = v304;
  unint64_t v108 = *(void *)(v86 + v304[9] + 8);
  uint64_t v109 = v297;
  outlined init with copy of TetraRatchetOuterMessage(v86, v297, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v108 >> 60 == 15)
  {
    outlined destroy of TetraRatchetOuterMessage(v109, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    uint64_t v110 = v299;
LABEL_19:
    outlined init with copy of TetraRatchetOuterMessage(v86, v110, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v110, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
LABEL_20:
    uint64_t v116 = (uint64_t *)(v86 + v304[10]);
    uint64_t v117 = *v116;
    unint64_t v118 = v116[1];
    outlined copy of Data?(*v116, v118);
    Class v119 = TetraSessionStates.openMessage(_:prekeysHash:sessionDST:theirTetraVersion:didRatchet:)(v86, v117, v118, v296, v313, v312, &v322);
    uint64_t v127 = v126;
    unint64_t v129 = v128;
    uint64_t v309 = (uint64_t)v119;
    unint64_t v312 = v130;
    outlined consume of Data?(v117, v118);
    id v131 = (id)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    if (v129 >> 60 != 15)
    {
      uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v134 = v133;
      outlined copy of Data._Representation(v127, v129);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id aBlock = v131;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v127, v129, v132, v134, isUniquelyReferenced_nonNull_native);
      id v131 = aBlock;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v272, v303);
    v273 = a18;
    static os_log_type_t.debug.getter();
    uint64_t result = MessageProtectionLog();
    if (!result) {
      goto LABEL_90;
    }
    v156 = result;
    os_log(_:dso:log:_:_:)();

    id v157 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    unint64_t v310 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v131);
    swift_bridgeObjectRelease();
    uint64_t v158 = *(unsigned int *)(v314 + 24);
    uint64_t v159 = v291;
    uint64_t v160 = v286;
    uint64_t v161 = v293;
    (*(void (**)(char *, uint64_t, uint64_t))(v291 + 16))(v286, v314 + v304[7], v293);
    unint64_t v162 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
    unint64_t v163 = (v285 + v162 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v164 = swift_allocObject();
    v165 = v272;
    *(void *)(v164 + 16) = v308;
    *(void *)(v164 + 24) = v165;
    (*(void (**)(unint64_t, char *, uint64_t))(v159 + 32))(v164 + v162, v160, v161);
    *(void *)(v164 + v163) = v158;
    v311 = v165;
    uint64_t v166 = v309;
    unint64_t v167 = v312;
    Class v168 = Data._bridgeToObjectiveC()().super.isa;
    Class v169 = Dictionary._bridgeToObjectiveC()().super.isa;
    v319 = partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:);
    uint64_t v320 = v164;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v316 = 1107296256;
    v317 = thunk for @escaping @callee_guaranteed (@unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v318 = &block_descriptor_17;
    uint64_t v170 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    (*((void (**)(uint8_t *, Class, Class, void, void *))v273 + 2))(v273, v168, v169, 0, v170);
    _Block_release(v170);
    swift_bridgeObjectRelease();
    swift_release();

    outlined consume of Data._Representation(v166, v167);
    outlined consume of Data?(v127, v129);

    v171 = type metadata accessor for TetraSessionStates;
    id v172 = &v323;
LABEL_42:
    outlined destroy of TetraRatchetOuterMessage(*(v172 - 32), (uint64_t (*)(void))v171);
    outlined destroy of TetraRatchetOuterMessage(v314, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?((uint64_t)v307, &demangling cache variable for type metadata for TetraSessionStates?);
    return swift_release();
  }
  unint64_t v113 = (uint64_t *)(v109 + v107[10]);
  uint64_t v114 = *v113;
  unint64_t v115 = v113[1];
  outlined copy of Data?(*v113, v115);
  outlined destroy of TetraRatchetOuterMessage(v109, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  uint64_t v110 = v299;
  if (v115 >> 60 == 15) {
    goto LABEL_19;
  }
  outlined consume of Data?(v114, v115);
  outlined init with copy of TetraRatchetOuterMessage(v86, v110, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  uint64_t v136 = v110;
  uint64_t v137 = v304;
  unint64_t v138 = *(void *)(v136 + v304[9] + 8);
  uint64_t v139 = v292;
  outlined init with copy of TetraRatchetOuterMessage(v136, v292, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v138 >> 60 == 15)
  {
    outlined destroy of TetraRatchetOuterMessage(v139, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
LABEL_38:
    uint64_t v154 = v299;
    uint64_t v155 = (void (*)(void, void, void))v294;
    outlined init with copy of TetraRatchetOuterMessage(v299, (uint64_t)v294, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v155, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v154, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    goto LABEL_39;
  }
  uint64_t v151 = (uint64_t *)(v139 + v137[10]);
  uint64_t v152 = *v151;
  unint64_t v153 = v151[1];
  outlined copy of Data?(*v151, v153);
  outlined destroy of TetraRatchetOuterMessage(v139, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v153 >> 60 == 15) {
    goto LABEL_38;
  }
  outlined consume of Data?(v152, v153);
  uint64_t v173 = v294;
  outlined init with copy of TetraRatchetOuterMessage(v299, (uint64_t)v294, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  outlined init with copy of TetraRatchetOuterMessage(v303, v287, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  uint64_t v174 = v291;
  uint64_t v175 = v290;
  (*(void (**)(uint64_t, char *, uint64_t))(v291 + 16))(v290, &v173[v304[7]], v293);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v175, 0, 1, v293);
  uint64_t v176 = &v173[v304[10]];
  unint64_t v177 = *((void *)v176 + 1);
  if (v177 >> 60 == 15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v178 = *(void *)v176;
  outlined copy of Data._Representation(*(void *)v176, *((void *)v176 + 1));
  uint64_t v179 = v287;
  LODWORD(v309) = TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(v290, v178, v177);
  outlined consume of Data?(v178, v177);
  outlined destroy of TetraSessionStates?(v290, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  outlined destroy of TetraRatchetOuterMessage(v179, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v294, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  outlined destroy of TetraRatchetOuterMessage(v299, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v309) {
    goto LABEL_20;
  }
LABEL_39:
  outlined destroy of TetraRatchetOuterMessage(v303, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  uint64_t v96 = (uint64_t)v307;
  id v97 = v308;
LABEL_12:
  uint64_t v101 = v304;
  unint64_t v102 = (uint64_t *)(v86 + v304[10]);
  uint64_t v103 = (uint64_t)v298;
  if ((unint64_t)v102[1] >> 60 == 15)
  {
    lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
    uint64_t v104 = (void *)swift_allocError();
    *int64_t v105 = 0;
    swift_willThrow();
    outlined destroy of TetraRatchetOuterMessage(v86, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    uint64_t v106 = v96;
LABEL_24:
    outlined destroy of TetraSessionStates?(v106, &demangling cache variable for type metadata for TetraSessionStates?);
    uint64_t v125 = v272;
    id aBlock = v104;
    id v180 = v104;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast() && v322 == 3)
    {
      id v181 = objc_allocWithZone(MEMORY[0x263F087E8]);
      unint64_t v182 = (void *)MEMORY[0x2166CC8B0](0xD00000000000001BLL, 0x800000021649B250);
      id v183 = objc_msgSend(v181, sel_initWithDomain_code_userInfo_, v182, 5, 0);

      static os_log_type_t.debug.getter();
      uint64_t result = MessageProtectionLog();
      if (result)
      {
        uint64_t v184 = result;
        os_log(_:dso:log:_:_:)();

        id v185 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        id v186 = v183;
        uint64_t v187 = (void *)_convertErrorToNSError(_:)();
        (*((void (**)(uint8_t *, void, void, void *, void))a18 + 2))(a18, 0, 0, v187, 0);

        id v188 = aBlock;
LABEL_55:

        return swift_release();
      }
      goto LABEL_88;
    }

    id v189 = v104;
    os_log_type_t v190 = static os_log_type_t.error.getter();
    uint64_t result = MessageProtectionLog();
    if (result)
    {
      unint64_t v191 = result;
      if (os_log_type_enabled(result, v190))
      {
        id v192 = v104;
        unint64_t v193 = v306;
        swift_bridgeObjectRetain();
        id v194 = v104;
        swift_bridgeObjectRetain();
        uint64_t v195 = swift_slowAlloc();
        id v196 = (void *)swift_slowAlloc();
        id aBlock = v196;
        *(_DWORD *)uint64_t v195 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v322 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v305, v193, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v195 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v197 = Error.localizedDescription.getter();
        uint64_t v322 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v198, (uint64_t *)&aBlock);
        uint64_t v90 = a18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2163F2000, v191, v190, "Tetra failed decrypting %s with error: %s", (uint8_t *)v195, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2166CDD30](v196, -1, -1);
        MEMORY[0x2166CDD30](v195, -1, -1);
      }

      static os_log_type_t.debug.getter();
      uint64_t result = MessageProtectionLog();
      if (result)
      {
        v199 = result;
        os_log(_:dso:log:_:_:)();

        id v200 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        id v201 = v104;
        id v202 = (void *)_convertErrorToNSError(_:)();
        (*((void (**)(uint8_t *, void, void, void *, void))v90 + 2))(v90, 0, 0, v202, 0);

        id v188 = v104;
        goto LABEL_55;
      }
      goto LABEL_87;
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  unint64_t v303 = v102[1];
  uint64_t v309 = *v102;
  unint64_t v111 = *(void *)(v86 + v304[9] + 8);
  outlined init with copy of TetraRatchetOuterMessage(v86, (uint64_t)v298, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v111 >> 60 == 15)
  {
    unint64_t v112 = v303;
    outlined copy of Data._Representation(v309, v303);
    outlined destroy of TetraRatchetOuterMessage(v103, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
LABEL_22:
    lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
    uint64_t v104 = (void *)swift_allocError();
    unsigned char *v123 = 1;
    swift_willThrow();
    outlined consume of Data?(v309, v112);
    uint64_t v124 = v86;
LABEL_23:
    outlined destroy of TetraRatchetOuterMessage(v124, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    uint64_t v106 = (uint64_t)v307;
    goto LABEL_24;
  }
  uint64_t v120 = v103 + v101[10];
  Class v121 = *(char **)v120;
  unint64_t v122 = *(void *)(v120 + 8);
  unint64_t v112 = v303;
  outlined copy of Data?(v309, v303);
  v300 = v121;
  outlined copy of Data?((uint64_t)v121, v122);
  outlined destroy of TetraRatchetOuterMessage(v103, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  if (v122 >> 60 == 15) {
    goto LABEL_22;
  }
  id v308 = v97;
  outlined consume of Data?((uint64_t)v300, v122);
  uint64_t v140 = v309;
  outlined copy of Data?(v309, v112);
  unint64_t v141 = swift_bridgeObjectRetain();
  unint64_t v142 = specialized _ArrayProtocol.filter(_:)(v141, v140, v112);
  outlined consume of Data?(v140, v112);
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v142 >> 62))
  {
    uint64_t v143 = *(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v144 = (uint64_t)v289;
    if (v143)
    {
      if (v143 == 1) {
        goto LABEL_33;
      }
      goto LABEL_79;
    }
LABEL_80:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    uint64_t v104 = (void *)swift_allocError();
    char v270 = 4;
    goto LABEL_81;
  }
  swift_bridgeObjectRetain();
  uint64_t v267 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v144 = (uint64_t)v289;
  if (!v267) {
    goto LABEL_80;
  }
  swift_bridgeObjectRetain();
  uint64_t v268 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v268 != 1)
  {
LABEL_79:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    uint64_t v104 = (void *)swift_allocError();
    char v270 = 5;
LABEL_81:
    *uint64_t v269 = v270;
    swift_willThrow();
    outlined consume of Data?(v140, v303);
    uint64_t v124 = v314;
    goto LABEL_23;
  }
LABEL_33:
  if ((v142 & 0xC000000000000001) != 0)
  {
    v146 = (char *)MEMORY[0x2166CCBD0](0, v142);
    unint64_t v145 = (int *)v282;
    goto LABEL_36;
  }
  unint64_t v145 = (int *)v282;
  if (!*(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v146 = (char *)*(id *)(v142 + 32);
LABEL_36:
  swift_bridgeObjectRelease();
  id v147 = objc_msgSend(v95, sel_compactRepresentation);
  uint64_t v148 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v150 = v149;

  id aBlock = v148;
  uint64_t v316 = v150;
  P256.Signing.PublicKey.init<A>(compactRepresentation:)();
  id v203 = (char *)(v314 + v304[7]);
  uint64_t v204 = v291;
  v300 = v146;
  uint64_t v206 = v291 + 16;
  v205 = *(char **)(v291 + 16);
  v295 = v203;
  uint64_t v207 = v293;
  uint64_t v294 = v205;
  ((void (*)(uint64_t))v205)(v144);
  id v208 = *(void (**)(void))(v204 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v208)(v144, 0, 1, v207);
  uint64_t v209 = v281;
  v304 = (int *)((char *)v281 + v145[7]);
  v208();
  v210 = (void *)((char *)v209 + v145[8]);
  uint64_t v211 = v309;
  unint64_t v212 = v303;
  unint64_t v298 = v210;
  void *v210 = v309;
  v210[1] = v212;
  uint64_t v213 = v279;
  v214 = *(void (**)(void))(v279 + 16);
  uint64_t v299 = (uint64_t)v209 + v145[6];
  uint64_t v215 = v280;
  v214();
  uint64_t v297 = v145[9];
  *((unsigned char *)v209 + v297) = 1;
  outlined copy of Data?(v211, v212);
  id v216 = v300;
  uint64_t v217 = v278;
  v300 = v216;
  TetraRatchetState.init(asReceiverWithFullPrekey:)(v216, v278);
  uint64_t v299 = v206;
  (*(void (**)(char *, uint64_t))(v213 + 8))(v283, v215);
  outlined init with take of TetraRatchetState(v217, (uint64_t)v209 + *(int *)(v282 + 20), type metadata accessor for TetraRatchetState);
  if (v312 >= 0xD) {
    int v218 = 13;
  }
  else {
    int v218 = v312;
  }
  *uint64_t v209 = v218;
  outlined assign with take of P256.KeyAgreement.PublicKey?(v144, (uint64_t)v304);
  char v321 = 0;
  *uint64_t v209 = v218;
  *((unsigned char *)v209 + v297) = 1;
  int v219 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v314, v296, v313, &v321);
  unint64_t v312 = v220;
  uint64_t v297 = (uint64_t)v219;
  unint64_t v298 = (void *)v221;
  v304 = v222;
  uint64_t v223 = v307;
  uint64_t v224 = v277;
  outlined init with copy of TetraSessionStates?((uint64_t)v307, v277, &demangling cache variable for type metadata for TetraSessionStates?);
  uint64_t v225 = v302;
  int v226 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v311)(v224, 1, v302);
  outlined destroy of TetraSessionStates?(v224, &demangling cache variable for type metadata for TetraSessionStates?);
  v273 = a18;
  if (v226 == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v223, &demangling cache variable for type metadata for TetraSessionStates?);
    outlined init with copy of TetraRatchetOuterMessage((uint64_t)v209, (uint64_t)v223, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    *((unsigned char *)v223 + *(int *)(v225 + 20)) = 0;
    *(void *)((char *)v223 + *(int *)(v225 + 24)) = MEMORY[0x263F8EE78];
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v301 + 56))(v223, 0, 1, v225);
  }
  else
  {
    uint64_t v227 = (uint64_t)v209;
    unsigned int v228 = v275;
    outlined init with copy of TetraRatchetOuterMessage(v227, (uint64_t)v275, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    uint64_t result = ((uint64_t (*)(_DWORD *, uint64_t, uint64_t))v311)(v223, 1, v225);
    if (result == 1)
    {
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    uint64_t v229 = (uint64_t)v223;
    if (specialized static TetraSessionState.== infix(_:_:)(v223, v228))
    {
      outlined assign with copy of TetraSessionState((uint64_t)v228, (uint64_t)v223);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
      unint64_t v230 = (*(unsigned __int8 *)(v274 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v274 + 80);
      v231 = (_OWORD *)swift_allocObject();
      v231[1] = xmmword_2164944D0;
      outlined init with copy of TetraRatchetOuterMessage(v229, (uint64_t)v231 + v230, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      v232 = (uint64_t *)(v229 + *(int *)(v302 + 24));
      uint64_t v233 = *v232;
      id aBlock = v231;
      specialized Array.append<A>(contentsOf:)(v233);
      uint64_t *v232 = (uint64_t)aBlock;
      uint64_t v234 = outlined assign with copy of TetraSessionState((uint64_t)v228, v229);
      MEMORY[0x270FA5388](v234);
      uint64_t result = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))closure #1 in TetraSessionStates.makeDefault(_:)partial apply);
      int64_t v235 = *(void *)(*v232 + 16);
      if (v235 < (uint64_t)result)
      {
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      specialized Array.replaceSubrange<A>(_:with:)((uint64_t)result, v235);
      unsigned int v228 = v275;
    }
    uint64_t v223 = v307;
    TetraSessionStates.cleanupPreviousSessionStates()();
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v228, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  }
  unint64_t v236 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v237 = (void *)v236;
  unint64_t v238 = v312;
  uint64_t v239 = (uint64_t)v276;
  if (v312 >> 60 == 15)
  {
    int64_t v240 = v236;
  }
  else
  {
    uint64_t v241 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v243 = v242;
    id v244 = v304;
    outlined copy of Data._Representation((uint64_t)v304, v238);
    char v245 = swift_isUniquelyReferenced_nonNull_native();
    id aBlock = v237;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v244, v238, v241, v243, v245);
    int64_t v240 = (int64_t)aBlock;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined init with copy of TetraSessionStates?((uint64_t)v223, v239, &demangling cache variable for type metadata for TetraSessionStates?);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v311)(v239, 1, v302);
  if (result == 1) {
    goto LABEL_92;
  }
  specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v272, v239);
  outlined destroy of TetraRatchetOuterMessage(v239, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  static os_log_type_t.debug.getter();
  uint64_t result = MessageProtectionLog();
  if (!result)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v246 = result;
  os_log(_:dso:log:_:_:)();

  id v247 = (id)conversationLock;
  OS_dispatch_semaphore.signal()();

  os_log_type_t v248 = static os_log_type_t.info.getter();
  uint64_t result = MessageProtectionLog();
  if (result)
  {
    v249 = result;
    if (os_log_type_enabled(result, v248))
    {
      unint64_t v250 = v306;
      swift_bridgeObjectRetain_n();
      uint64_t v251 = (uint8_t *)swift_slowAlloc();
      v252 = (void *)swift_slowAlloc();
      id aBlock = v252;
      *(_DWORD *)uint64_t v251 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v322 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v305, v250, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2163F2000, v249, v248, "Successfully decrypted %s", v251, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v252, -1, -1);
      MEMORY[0x2166CDD30](v251, -1, -1);
    }

    specialized _dictionaryUpCast<A, B, C, D>(_:)(v240);
    swift_bridgeObjectRelease();
    uint64_t v253 = *(unsigned int *)(v314 + 24);
    uint64_t v254 = v286;
    uint64_t v255 = v293;
    ((void (*)(char *, char *, uint64_t))v294)(v286, v295, v293);
    uint64_t v256 = v291;
    unint64_t v257 = (*(unsigned __int8 *)(v291 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v291 + 80);
    unint64_t v258 = (v285 + v257 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v259 = swift_allocObject();
    uint64_t v260 = v272;
    *(void *)(v259 + 16) = v308;
    *(void *)(v259 + 24) = v260;
    (*(void (**)(unint64_t, char *, uint64_t))(v256 + 32))(v259 + v257, v254, v255);
    *(void *)(v259 + v258) = v253;
    unint64_t v261 = v260;
    uint64_t v262 = v297;
    unint64_t v263 = (unint64_t)v298;
    Class v264 = Data._bridgeToObjectiveC()().super.isa;
    Class v265 = Dictionary._bridgeToObjectiveC()().super.isa;
    v319 = partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:);
    uint64_t v320 = v259;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v316 = 1107296256;
    v317 = thunk for @escaping @callee_guaranteed (@unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v318 = &block_descriptor;
    uint64_t v266 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    (*((void (**)(uint8_t *, Class, Class, void, void *))v273 + 2))(v273, v264, v265, 0, v266);
    _Block_release(v266);
    swift_bridgeObjectRelease();
    swift_release();

    outlined consume of Data._Representation(v262, v263);
    outlined consume of Data?((uint64_t)v304, v312);

    outlined consume of Data?(v309, v303);
    v171 = type metadata accessor for TetraSessionState;
    id v172 = &v313;
    goto LABEL_42;
  }
LABEL_95:
  __break(1u);
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

NSObject *partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for P256.KeyAgreement.PublicKey() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  unint64_t v6 = *(void **)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:)(a1, v5, v6, v1 + v4, v7);
}

uint64_t outlined assign with take of TetraSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TetraCommitmentError and conformance TetraCommitmentError()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError;
  if (!lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError;
  if (!lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError);
  }
  return result;
}

uint64_t outlined init with copy of TetraSessionStates?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21641CAC4()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(char a1)
{
  return closure #1 in static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in TetraSessionStates.makeDefault(_:)partial apply(_DWORD *a1)
{
  return partial apply for closure #1 in TetraSessionStates.makeDefault(_:)(a1) & 1;
}

id Kyber1024ObjC.__deallocating_deinit(uint64_t a1)
{
  return Kyber1024ObjC.__deallocating_deinit(a1, type metadata accessor for Kyber1024ObjC);
}

uint64_t type metadata accessor for Kyber1024ObjC()
{
  return self;
}

id Kyber1024ObjCPublicKey.init(publicKeyBytes:)(void *a1)
{
  uint64_t v4 = type metadata accessor for Kyber1024.PublicKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = v1;
  id v9 = a1;
  uint64_t v14 = specialized Data.init<A>(_:)(v9);
  uint64_t v15 = v10;
  Kyber1024.PublicKey.init<A>(dataRepresentation:)();
  if (v2)
  {

    type metadata accessor for Kyber1024ObjCPublicKey(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v8 + OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey, v7, v4);

    uint64_t v11 = (objc_class *)type metadata accessor for Kyber1024ObjCPublicKey(0);
    v13.receiver = v8;
    v13.super_class = v11;
    id v8 = objc_msgSendSuper2(&v13, sel_init);
  }
  return v8;
}

id Kyber1024ObjCPublicKey.__deallocating_deinit()
{
  return Kyber1024ObjC.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for Kyber1024ObjCPublicKey);
}

id Kyber1024ObjC.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t ObjC metadata update function for Kyber1024ObjCPublicKey()
{
  return type metadata accessor for Kyber1024ObjCPublicKey(0);
}

uint64_t type metadata accessor for Kyber1024ObjCPublicKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for Kyber1024ObjCPublicKey);
}

uint64_t type metadata completion function for Kyber1024ObjCPublicKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Kyber1024ObjCPublicKey(a1, a2, a3, MEMORY[0x263F048B8]);
}

uint64_t Kyber1024ObjCPrivateKey.init(sepKeyBytes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TetraKEM1024Key(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Data._Representation(a1, a2);
  SecureEnclave.Kyber1024.PrivateKey.init(dataRepresentation:)(a1, a2, (uint64_t)v8);
  if (!v2)
  {
    uint64_t v12 = type metadata accessor for Kyber1024.PrivateKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = (uint64_t)&v11[*(int *)(v9 + 20)];
    outlined init with take of SecureEnclave.Kyber1024.PrivateKey((uint64_t)v8, v13, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
    uint64_t v14 = (objc_class *)type metadata accessor for Kyber1024ObjCPrivateKey(0);
    id v15 = objc_allocWithZone(v14);
    outlined init with copy of TetraKEM1024Key((uint64_t)v11, (uint64_t)v15 + OBJC_IVAR____TtC17MessageProtection23Kyber1024ObjCPrivateKey_privKey);
    v17.receiver = v15;
    v17.super_class = v14;
    uint64_t v5 = (uint64_t)objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of TetraKEM1024Key((uint64_t)v11);
  }
  outlined consume of Data._Representation(a1, a2);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t Kyber1024ObjCPrivateKey.init(apKeyBytes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TetraKEM1024Key(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1;
  unint64_t v19 = a2;
  outlined copy of Data._Representation(a1, a2);
  Kyber1024.PrivateKey.init<A>(bytes:)();
  if (!v2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v8, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    uint64_t v12 = &v11[*(int *)(v9 + 20)];
    uint64_t v13 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = (objc_class *)type metadata accessor for Kyber1024ObjCPrivateKey(0);
    id v15 = objc_allocWithZone(v14);
    outlined init with copy of TetraKEM1024Key((uint64_t)v11, (uint64_t)v15 + OBJC_IVAR____TtC17MessageProtection23Kyber1024ObjCPrivateKey_privKey);
    v17.receiver = v15;
    v17.super_class = v14;
    uint64_t v5 = (uint64_t)objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of TetraKEM1024Key((uint64_t)v11);
  }
  outlined consume of Data._Representation(a1, a2);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t @objc Kyber1024ObjCPrivateKey.init(sepKeyBytes:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  id v6 = a3;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  return a5(v7, v9);
}

id Kyber1024ObjCPrivateKey.__deallocating_deinit()
{
  return Kyber1024ObjC.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for Kyber1024ObjCPrivateKey);
}

uint64_t ObjC metadata update function for Kyber1024ObjCPrivateKey()
{
  return type metadata accessor for Kyber1024ObjCPrivateKey(0);
}

uint64_t type metadata accessor for Kyber1024ObjCPrivateKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for Kyber1024ObjCPrivateKey);
}

uint64_t type metadata accessor for Kyber1024ObjCPublicKey(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for Kyber1024ObjCPrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Kyber1024ObjCPublicKey(a1, a2, a3, type metadata accessor for TetraKEM1024Key);
}

uint64_t type metadata completion function for Kyber1024ObjCPublicKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined init with copy of TetraKEM1024Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraKEM1024Key(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraKEM1024Key(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TetraKEM1024Key(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata instantiation function for StructWrapper()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for StructWrapper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TetraDBErrors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraDBErrors()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TetraDBErrors()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraDBErrors()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance TetraDBErrors()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance TetraDBErrors()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance TetraDBErrors()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance TetraDBErrors()
{
  return MEMORY[0x270F9FB30]();
}

void @objc StructWrapper.init()()
{
}

id StructWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StructWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc StructWrapper.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x50)
                                                       - 8)
                                           + 8))(&a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x58)]);
}

uint64_t type metadata accessor for StructWrapper()
{
  return __swift_instantiateGenericMetadata();
}

id one-time initialization function for sharedInstance()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TetraDBManager()), sel_init);
  static TetraDBManager.sharedInstance = (uint64_t)result;
  return result;
}

char *TetraDBManager.().init()()
{
  *(void *)&v0[OBJC_IVAR____TtC17MessageProtection14TetraDBManager__persistentContainer] = 0;
  uint64_t v1 = OBJC_IVAR____TtC17MessageProtection14TetraDBManager_cache;
  id v2 = objc_allocWithZone(MEMORY[0x263EFF8E0]);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  *(void *)&v3[OBJC_IVAR____TtC17MessageProtection14TetraDBManager____lazy_storage___persistentContainer] = 0;

  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for TetraDBManager();
  uint64_t v4 = (char *)objc_msgSendSuper2(&v9, sel_init);
  uint64_t v5 = *(void **)&v4[OBJC_IVAR____TtC17MessageProtection14TetraDBManager_cache];
  id v6 = v4;
  objc_msgSend(v5, sel_setCountLimit_, 3);
  id v7 = v5;
  objc_msgSend(v7, sel_setDelegate_, v6);

  return v6;
}

id TetraDBManager.persistentContainer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC17MessageProtection14TetraDBManager____lazy_storage___persistentContainer;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC17MessageProtection14TetraDBManager____lazy_storage___persistentContainer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC17MessageProtection14TetraDBManager____lazy_storage___persistentContainer);
  }
  else
  {
    uint64_t v4 = (void *)specialized closure #1 in TetraDBManager.persistentContainer.getter();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void closure #1 in closure #1 in TetraDBManager.persistentContainer.getter(int a1, id a2)
{
  if (a2) {
    goto LABEL_7;
  }
  static os_log_type_t.info.getter();
  id v2 = MessageProtectionLog();
  if (!v2)
  {
    __break(1u);
LABEL_7:
    id v3 = a2;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v4._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  id v5 = v2;
  os_log(_:dso:log:_:_:)();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSPersistentStoreDescription, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

void TetraDBManager.getSessionForNGMIdentity(conversationID:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v5 = type metadata accessor for TetraSessionStates();
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v55 = (uint64_t)&v53 - v9;
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF288]), sel_initWithConcurrencyType_, 1);
  id v11 = TetraDBManager.persistentContainer.getter();
  id v12 = objc_msgSend(v11, sel_persistentStoreCoordinator);

  objc_msgSend(v10, sel_setPersistentStoreCoordinator_, v12);
  objc_msgSend(v10, sel_setMergePolicy_, *MEMORY[0x263EFF060]);
  objc_msgSend(v10, sel_setShouldPerformSecureOperation_, 1);
  uint64_t v13 = *(void **)(v2 + OBJC_IVAR____TtC17MessageProtection14TetraDBManager_cache);
  uint64_t v14 = objc_msgSend(v13, sel_objectForKey_, a1);
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = (char *)v14 + *(void *)((*MEMORY[0x263F8EED0] & *v14) + 0x58);
    swift_beginAccess();
    Swift::Bool v17 = TetraSessionStates.hasSessionWithCompatibleVersion()();
    swift_endAccess();
    if (v17)
    {

      uint64_t v18 = (uint64_t)v16;
      uint64_t v19 = v57;
      outlined init with copy of TetraSessionStates(v18, v57);

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v19, 0, 1, v5);
      return;
    }
    objc_msgSend(v13, sel_removeObjectForKey_, a1);
  }
  uint64_t v56 = v5;
  id v20 = objc_allocWithZone(MEMORY[0x263EFF260]);
  uint64_t v21 = (void *)MEMORY[0x2166CC8B0](0xD000000000000016, 0x800000021649BA50);
  id v22 = objc_msgSend(v20, sel_initWithEntityName_, v21);

  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSPredicate);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_2164944D0;
  id v24 = objc_msgSend(a1, sel_base64EncodedStringWithOptions_, 0);
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  *(void *)(v23 + 56) = MEMORY[0x263F8D310];
  *(void *)(v23 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v23 + 32) = v25;
  *(void *)(v23 + 40) = v27;
  uint64_t v28 = NSPredicate.init(format:_:)();
  objc_msgSend(v22, sel_setPredicate_, v28);

  id v29 = objc_msgSend(v22, sel_setFetchLimit_, 1);
  id v60 = 0;
  MEMORY[0x270FA5388](v29);
  *(&v53 - 4) = (uint64_t)v10;
  *(&v53 - 3) = (uint64_t)v22;
  *(&v53 - 2) = (uint64_t)&v60;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v3)
  {

    return;
  }
  id v30 = v60;
  if (!v60)
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v57, 1, 1, v56);
    return;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  id v31 = v30;
  uint64_t v32 = PropertyListDecoder.init()();
  id v54 = v31;
  id v33 = objc_msgSend(v31, sel_serializedSession);
  uint64_t v34 = v56;
  if (v33)
  {
    uint64_t v35 = v33;
    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type TetraSessionStates and conformance TetraSessionStates, (void (*)(uint64_t))type metadata accessor for TetraSessionStates);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v36, v38);
    uint64_t v39 = v55;
    outlined init with take of TetraSessionStates((uint64_t)v8, v55);
    if (TetraSessionStates.hasSessionWithCompatibleVersion()())
    {
      id v40 = v54;

      swift_release();
      uint64_t v41 = v57;
      outlined init with take of TetraSessionStates(v39, v57);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v41, 0, 1, v34);

      return;
    }
    os_log_type_t v42 = static os_log_type_t.error.getter();
    uint64_t v43 = MessageProtectionLog();
    if (!v43) {
      goto LABEL_20;
    }
    uint64_t v44 = v43;
    uint64_t v53 = v32;
    if (os_log_type_enabled(v43, v42))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 67109120;
      LODWORD(aBlock[0]) = 13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2163F2000, v44, v42, "Deleting session states due to not having a valid session version (expected: %u.", v45, 8u);
      MEMORY[0x2166CDD30](v45, -1, -1);
    }

    uint64_t v46 = swift_allocObject();
    id v47 = v54;
    *(void *)(v46 + 16) = v10;
    *(void *)(v46 + 24) = v47;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = partial apply for closure #3 in TetraDBManager.getSessionForNGMIdentity(conversationID:);
    *(void *)(v48 + 24) = v46;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v48;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_24;
    uint64_t v49 = _Block_copy(aBlock);
    id v50 = v47;
    id v51 = v10;
    swift_retain();
    swift_release();
    objc_msgSend(v51, sel_performBlockAndWait_, v49);
    swift_release();

    _Block_release(v49);
    outlined destroy of TetraSessionStates(v39);
    LOBYTE(v49) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v49 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v57, 1, 1, v56);
      id v52 = v60;
      swift_release();

      return;
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

void closure #1 in TetraDBManager.getSessionForNGMIdentity(conversationID:)(uint64_t a1, uint64_t a2, void **a3)
{
  type metadata accessor for TetraSessionSerialized();
  unint64_t v5 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {

    char v6 = 2;
LABEL_6:
    lazy protocol witness table accessor for type TetraDBErrors and conformance TetraDBErrors();
    swift_allocError();
    char *v11 = v6;
    swift_willThrow();
    return;
  }
  unint64_t v7 = v5;
  unint64_t v8 = v5 >> 62;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    BOOL v10 = v9 == 1;
    if (v9 > 1) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v10 = v9 == 1;
    if (v9 > 1)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      char v6 = 3;
      goto LABEL_6;
    }
  }
  if (!v10)
  {
    if (!v9)
    {
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_23;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      id v13 = (id)MEMORY[0x2166CCBD0](0, v7);
      goto LABEL_19;
    }
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v13 = *(id *)(v7 + 32);
LABEL_19:
      id v14 = v13;
      swift_bridgeObjectRelease();
      id v15 = *a3;
      *a3 = v14;

      return;
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_23:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

NSObject *closure #2 in TetraDBManager.getSessionForNGMIdentity(conversationID:)(void *a1, void *a2, uint64_t a3)
{
  os_log_type_t v6 = static os_log_type_t.error.getter();
  id result = MessageProtectionLog();
  if (result)
  {
    unint64_t v8 = result;
    os_log_type_t v9 = v6;
    if (os_log_type_enabled(result, v6))
    {
      id v10 = a1;
      id v11 = a1;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      id v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      id v14 = a1;
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v13 = v15;

      _os_log_impl(&dword_2163F2000, v8, v9, "Failed to decode the Tetra session: %@. Deleting the saved session state.", v12, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v13, -1, -1);
      MEMORY[0x2166CDD30](v12, -1, -1);
    }

    return objc_msgSend(a2, sel_deleteObject_, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id TetraDBManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraDBManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TetraDBManager()
{
  return self;
}

uint64_t specialized static TetraDBManager.isBATS()()
{
  id v0 = objc_msgSend(self, sel_processInfo);
  id v1 = objc_msgSend(v0, sel_environment);

  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v2 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(1398030658, 0xE400000000000000), (v3 & 1) != 0)
    && *(void *)(v2 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(4478800, 0xE300000000000000), (v5 & 1) != 0))
  {
    os_log_type_t v6 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v8 == 0xD000000000000032 && v7 == 0x800000021649B9E0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v10 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

id specialized static TetraDBManager.persistentStoreDescription()()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  char v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_216494560;
  os_log_type_t v6 = NSHomeDirectory();
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  *(void *)(v5 + 48) = 0xD000000000000019;
  *(void *)(v5 + 56) = 0x800000021649B9A0;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v4, sel_pathWithComponents_, isa);

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  uint64_t v15 = self;
  id v16 = objc_msgSend(v15, sel_processInfo);
  id v17 = objc_msgSend(v16, sel_environment);

  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v18 + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x800000021649B9C0), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if ((specialized static TetraDBManager.isBATS()() & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x747365746378;
  v20._object = (void *)0xE600000000000000;
  Swift::Bool v21 = String.hasSuffix(_:)(v20);
  swift_bridgeObjectRelease();
  if (v21 || (specialized static TetraDBManager.isBATS()() & 1) != 0)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    id v22 = NSTemporaryDirectory();
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v23;
  }
LABEL_6:
  uint64_t v42 = 0x424461727465542FLL;
  unint64_t v43 = 0xE90000000000002DLL;
  id v24 = objc_msgSend(v15, sel_processInfo);
  id v25 = objc_msgSend(v24, sel_processName);

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 6448174;
  v30._object = (void *)0xE300000000000000;
  String.append(_:)(v30);
  uint64_t v40 = v12;
  uint64_t v41 = v14;
  swift_bridgeObjectRetain();
  uint64_t v40 = String.init<A>(_:)();
  uint64_t v41 = v31;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  id v32 = objc_allocWithZone(MEMORY[0x263EFF328]);
  URL._bridgeToObjectiveC()(v33);
  uint64_t v35 = v34;
  id v36 = objc_msgSend(v32, sel_initWithURL_, v34);

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v38 = (void *)MEMORY[0x2166CC8B0](v37);
  swift_bridgeObjectRelease();
  objc_msgSend(v36, sel_setOption_forKey_, v38, *MEMORY[0x263EFF0E0]);

  objc_msgSend(v36, sel_setShouldAddStoreAsynchronously_, 0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v36;
}

uint64_t specialized closure #1 in TetraDBManager.persistentContainer.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&aBlock - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&aBlock - v8;
  char v10 = (void *)MEMORY[0x2166CC8B0](0xD00000000000001BLL, 0x800000021649B860);
  id v11 = objc_msgSend(self, sel_bundleWithIdentifier_, v10);

  if (!v11)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v12 = (void *)MEMORY[0x2166CC8B0](0x42446172746554, 0xE700000000000000);
  uint64_t v13 = (void *)MEMORY[0x2166CC8B0](1684893549, 0xE400000000000000);
  id v14 = objc_msgSend(v11, sel_URLForResource_withExtension_, v12, v13);

  if (!v14)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_8;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v15(v2, v7, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_8:
    outlined destroy of URL?((uint64_t)v2);
    goto LABEL_10;
  }
  v15(v9, v2, v3);
  id v16 = objc_allocWithZone(MEMORY[0x263EFF298]);
  URL._bridgeToObjectiveC()(v17);
  char v19 = v18;
  id v20 = objc_msgSend(v16, sel_initWithContentsOfURL_, v18);

  if (v20)
  {
    id v21 = specialized static TetraDBManager.persistentStoreDescription()();
    id v22 = objc_allocWithZone(MEMORY[0x263EFF2E8]);
    id v23 = v20;
    id v24 = (void *)MEMORY[0x2166CC8B0](0x42446172746554, 0xE700000000000000);
    id v25 = objc_msgSend(v22, sel_initWithName_managedObjectModel_, v24, v23);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_216494570;
    *(void *)(v26 + 32) = v21;
    unint64_t aBlock = v26;
    specialized Array._endMutation()();
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSPersistentStoreDescription);
    id v27 = v21;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v25, sel_setPersistentStoreDescriptions_, isa);

    id v36 = closure #1 in closure #1 in TetraDBManager.persistentContainer.getter;
    uint64_t v37 = 0;
    unint64_t aBlock = MEMORY[0x263EF8330];
    unint64_t v33 = 1107296256;
    uint64_t v34 = thunk for @escaping @callee_guaranteed (@guaranteed NSPersistentStoreDescription, @guaranteed Error?) -> ();
    uint64_t v35 = &block_descriptor_0;
    Swift::String v29 = _Block_copy(&aBlock);
    objc_msgSend(v25, sel_loadPersistentStoresWithCompletionHandler_, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return (uint64_t)v25;
  }
  unint64_t aBlock = 0;
  unint64_t v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  unint64_t aBlock = 0xD000000000000022;
  unint64_t v33 = 0x800000021649B8D0;
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(void *a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for TetraSessionStates();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR____TtC17MessageProtection14TetraDBManager_cache);
  outlined init with copy of TetraSessionStates(a2, (uint64_t)v8);
  char v10 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructWrapper<TetraSessionStates>);
  id v11 = objc_allocWithZone(v10);
  outlined init with copy of TetraSessionStates((uint64_t)v8, (uint64_t)v11 + *(void *)((*MEMORY[0x263F8EED0] & *v11) + 0x58));
  v41.receiver = v11;
  v41.super_class = v10;
  id v12 = objc_msgSendSuper2(&v41, sel_init);
  outlined destroy of TetraSessionStates((uint64_t)v8);
  objc_msgSend(v9, sel_setObject_forKey_, v12, a1);

  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF288]), sel_initWithConcurrencyType_, 1);
  id v14 = TetraDBManager.persistentContainer.getter();
  id v15 = objc_msgSend(v14, sel_persistentStoreCoordinator);

  objc_msgSend(v13, sel_setPersistentStoreCoordinator_, v15);
  objc_msgSend(v13, sel_setMergePolicy_, *MEMORY[0x263EFF060]);
  objc_msgSend(v13, sel_setShouldPerformSecureOperation_, 1);
  type metadata accessor for TetraSessionSerialized();
  id v16 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithContext_, v13);
  id v17 = objc_msgSend(a1, sel_base64EncodedStringWithOptions_, 0);
  if (!v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v17 = (id)MEMORY[0x2166CC8B0](v18);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v16, sel_setRemoteIdentifier_, v17);

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type TetraSessionStates and conformance TetraSessionStates, (void (*)(uint64_t))type metadata accessor for TetraSessionStates);
  uint64_t v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v3)
  {
    uint64_t v33 = v19;
    unint64_t v34 = v20;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v33, v34);
    objc_msgSend(v16, sel_setSerializedSession_, isa);
    swift_release();

    id v40 = 0;
    if (objc_msgSend(v13, sel_save_, &v40))
    {
      id v36 = v40;

      return;
    }
    id v37 = v40;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v32 = v16;
    id v16 = v13;
    goto LABEL_11;
  }
  swift_release();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  id v22 = MessageProtectionLog();
  if (v22)
  {
    id v23 = v22;
    os_log_type_t v24 = v21;
    if (os_log_type_enabled(v22, v21))
    {
      id v25 = v3;
      id v26 = v3;
      id v39 = v16;
      id v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)id v27 = 138412290;
      id v29 = v3;
      Swift::String v30 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v40 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v30;
      id v16 = v39;

      _os_log_impl(&dword_2163F2000, v23, v24, "Failed to encode the session: %@", v27, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v28, -1, -1);
      MEMORY[0x2166CDD30](v27, -1, -1);
    }

    lazy protocol witness table accessor for type TetraDBErrors and conformance TetraDBErrors();
    swift_allocError();
    unsigned char *v31 = 0;
    swift_willThrow();

    id v32 = v13;
LABEL_11:

    return;
  }
  __break(1u);
}

void specialized StructWrapper.init()()
{
}

void specialized TetraDBManager.cache(_:willEvictObject:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v6 = static os_log_type_t.info.getter();
  uint64_t v7 = MessageProtectionLog();
  if (v7)
  {
    uint64_t v8 = v7;
    outlined init with copy of Any(a1, (uint64_t)v23);
    if (os_log_type_enabled(v8, v6))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v22 = v19;
      *(_DWORD *)uint64_t v9 = 136315138;
      v18[0] = v9 + 4;
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v21);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructWrapper<TetraSessionStates>);
      v18[1] = MEMORY[0x263F8EE58] + 8;
      swift_dynamicCast();
      char v10 = v20;
      id v11 = (char *)v20 + *(void *)((*MEMORY[0x263F8EED0] & *v20) + 0x58);
      swift_beginAccess();
      uint64_t v12 = type metadata accessor for TetraSessionState();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, &v11[*(int *)(v12 + 24)], v2);
      uint64_t v13 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      Swift::String v16 = Data.base64EncodedString(options:)(0);
      outlined consume of Data._Representation(v13, v15);

      v21[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16._countAndFlagsBits, (unint64_t)v16._object, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
      _os_log_impl(&dword_2163F2000, v8, v6, "TetraCache: Removing object %s from cache.", v9, 0xCu);
      uint64_t v17 = v19;
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v17, -1, -1);
      MEMORY[0x2166CDD30](v9, -1, -1);
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t outlined init with copy of TetraSessionStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraSessionStates();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraSessionStates(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TetraSessionStates();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TetraDBErrors and conformance TetraDBErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors;
  if (!lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors;
  if (!lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void partial apply for closure #1 in TetraDBManager.getSessionForNGMIdentity(conversationID:)()
{
  closure #1 in TetraDBManager.getSessionForNGMIdentity(conversationID:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_216420504()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

NSObject *partial apply for closure #2 in TetraDBManager.getSessionForNGMIdentity(conversationID:)()
{
  return closure #2 in TetraDBManager.getSessionForNGMIdentity(conversationID:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_216420558()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t outlined init with take of TetraSessionStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraSessionStates();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2164205CC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #3 in TetraDBManager.getSessionForNGMIdentity(conversationID:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_deleteObject_, *(void *)(v0 + 24));
}

uint64_t sub_21642061C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t getEnumTagSinglePayload for TetraDBErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TetraDBErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216420788);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for TetraDBErrors(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for TetraDBErrors(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TetraDBErrors()
{
  return &type metadata for TetraDBErrors;
}

uint64_t one-time initialization function for GLT_SEED_EXTRACTION_LABEL()
{
  uint64_t result = specialized Data.init<A>(_:)(0xD000000000000017, 0x800000021649BD30);
  GLT_SEED_EXTRACTION_LABEL = result;
  unk_267980180 = v1;
  return result;
}

id GLTDiversifiedKey.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void GLTDiversifiedKey.init()()
{
}

id GLTDiversifiedKey.__deallocating_deinit()
{
  return GLTDiversifiedKey.__deallocating_deinit(type metadata accessor for GLTDiversifiedKey);
}

uint64_t type metadata accessor for GLTDiversifiedKey()
{
  return self;
}

void static GLTKeyDiversificationSwift.diversify(publicKey:trackingPreventionSalt:docId:)(__SecKey *a1, uint64_t a2, unint64_t a3, unint64_t a4, const __CFData *a5)
{
}

SecKeyRef static GLTKeyDiversificationSwift.diversify(privateKey:docId:trackingPreventionSalt:)(__SecKey *a1, unint64_t a2, __SecKey *a3, uint64_t a4, const __CFData *a5)
{
  return specialized static GLTKeyDiversificationSwift.diversify(privateKey:docId:trackingPreventionSalt:)(a1, a2, a3, a4, a5);
}

id GLTKeyDiversificationSwift.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GLTKeyDiversificationSwift();
  return objc_msgSendSuper2(&v2, sel_init);
}

id GLTKeyDiversificationSwift.__deallocating_deinit()
{
  return GLTDiversifiedKey.__deallocating_deinit(type metadata accessor for GLTKeyDiversificationSwift);
}

id GLTDiversifiedKey.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, size_t count)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_216494380;
      uint64_t v9 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      if (v9 < (int)v3) {
        goto LABEL_22;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v3, __DataStorage._offset.getter())) {
        goto LABEL_23;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v16 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v8 = v16;
LABEL_13:
      if (v9 < (int)v3) {
        goto LABEL_20;
      }
      uint64_t v17 = __DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_25;
      }
      uint64_t v18 = v17;
      uint64_t v19 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v3, v19)) {
        goto LABEL_21;
      }
      unint64_t v20 = (void *)(v18 + (int)v3 - v19);
      __DataStorage._length.getter();
      uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, v20);
      unint64_t v15 = v8 | 0x4000000000000000;
      *a1 = v3;
      break;
    case 2uLL:
      *(void *)&long long bytes = *a1;
      *((void *)&bytes + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v10 = *(void *)(bytes + 16);
      uint64_t v11 = __DataStorage._bytes.getter();
      if (!v11)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x216420FC0);
      }
      uint64_t v12 = v11;
      uint64_t v13 = __DataStorage._offset.getter();
      if (__OFSUB__(v10, v13))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      unint64_t v14 = (void *)(v12 + v10 - v13);
      __DataStorage._length.getter();
      uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, v14);
      unint64_t v15 = *((void *)&bytes + 1) | 0x8000000000000000;
      *a1 = bytes;
      break;
    case 3uLL:
      *(void *)((char *)&bytes + 7) = 0;
      *(void *)&long long bytes = 0;
      return SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, &bytes);
    default:
      LOWORD(bytes) = *a1;
      BYTE2(bytes) = BYTE2(v3);
      BYTE3(bytes) = BYTE3(v3);
      BYTE4(bytes) = BYTE4(v3);
      BYTE5(bytes) = BYTE5(v3);
      BYTE6(bytes) = BYTE6(v3);
      BYTE7(bytes) = HIBYTE(v3);
      WORD4(bytes) = v2;
      BYTE10(bytes) = BYTE2(v2);
      BYTE11(bytes) = BYTE3(v2);
      BYTE12(bytes) = BYTE4(v2);
      BYTE13(bytes) = BYTE5(v2);
      BYTE14(bytes) = BYTE6(v2);
      uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, &bytes);
      unint64_t v7 = DWORD2(bytes) | ((unint64_t)BYTE12(bytes) << 32) | ((unint64_t)BYTE13(bytes) << 40) | ((unint64_t)BYTE14(bytes) << 48);
      *a1 = bytes;
      a1[1] = v7;
      return result;
  }
  a1[1] = v15;
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  long long bytes;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_216494380;
      uint64_t v9 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      if (v9 < (int)v3) {
        goto LABEL_22;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v3, __DataStorage._offset.getter())) {
        goto LABEL_23;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v16 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v8 = v16;
LABEL_13:
      if (v9 < (int)v3) {
        goto LABEL_20;
      }
      uint64_t v17 = __DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_25;
      }
      uint64_t v18 = v17;
      uint64_t v19 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v3, v19)) {
        goto LABEL_21;
      }
      unint64_t v20 = (void *)(v18 + (int)v3 - v19);
      __DataStorage._length.getter();
      uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, v20);
      unint64_t v15 = v8 | 0x4000000000000000;
      *a1 = v3;
      break;
    case 2uLL:
      *(void *)&long long bytes = *a1;
      *((void *)&bytes + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v10 = *(void *)(bytes + 16);
      uint64_t v11 = __DataStorage._bytes.getter();
      if (!v11)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x216423C18);
      }
      uint64_t v12 = v11;
      uint64_t v13 = __DataStorage._offset.getter();
      if (__OFSUB__(v10, v13))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      unint64_t v14 = (void *)(v12 + v10 - v13);
      __DataStorage._length.getter();
      uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, v14);
      unint64_t v15 = *((void *)&bytes + 1) | 0x8000000000000000;
      *a1 = bytes;
      break;
    case 3uLL:
      *(void *)((char *)&bytes + 7) = 0;
      *(void *)&long long bytes = 0;
      return SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, &bytes);
    default:
      LOWORD(bytes) = *a1;
      BYTE2(bytes) = BYTE2(v3);
      BYTE3(bytes) = BYTE3(v3);
      BYTE4(bytes) = BYTE4(v3);
      BYTE5(bytes) = BYTE5(v3);
      BYTE6(bytes) = BYTE6(v3);
      BYTE7(bytes) = HIBYTE(v3);
      WORD4(bytes) = v2;
      BYTE10(bytes) = BYTE2(v2);
      BYTE11(bytes) = BYTE3(v2);
      BYTE12(bytes) = BYTE4(v2);
      BYTE13(bytes) = BYTE5(v2);
      BYTE14(bytes) = BYTE6(v2);
      uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, &bytes);
      unint64_t v7 = DWORD2(bytes) | ((unint64_t)BYTE12(bytes) << 32) | ((unint64_t)BYTE13(bytes) << 40) | ((unint64_t)BYTE14(bytes) << 48);
      *a1 = bytes;
      a1[1] = v7;
      return result;
  }
  a1[1] = v15;
  return result;
}

void specialized static GLTKeyDiversificationSwift.validateKeyType(_:isPublicKey:)(__SecKey *a1)
{
  CFDictionaryRef v1 = SecKeyCopyAttributes(a1);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    uint64_t v4 = 0;
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError();
  swift_allocError();
  void *v3 = 2;
  swift_willThrow();
}

void specialized static GLTKeyDiversificationSwift.diversify(publicKey:trackingPreventionSalt:docId:)(__SecKey *a1, uint64_t a2, unint64_t a3, unint64_t a4, const __CFData *a5)
{
  CFDataRef isa = a5;
  error[1] = *(CFErrorRef *)MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v61 - v15;
  error[0] = 0;
  specialized static GLTKeyDiversificationSwift.validateKeyType(_:isPublicKey:)(a1);
  if (!v5)
  {
    uint64_t v65 = v10;
    CFDataRef v17 = isa;
    uint64_t v67 = v14;
    unint64_t v66 = a4;
    uint64_t v64 = v11;
    CFDataRef v18 = SecKeyCopyExternalRepresentation(a1, error);
    if (v18)
    {
      CFDataRef v19 = v18;
      uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v73 = v20;
      os_log_type_t v21 = v16;
      P256.Signing.PublicKey.init<A>(x963Representation:)();
      unint64_t v24 = a3;
      CFDataRef v63 = v19;
      if (a3 >> 60 == 15)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v25 = __DataStorage.init(length:)();
        uint64_t v72 = 0x2000000000;
        unint64_t v73 = v25;
        specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v72, 0);
        v73 |= 0x4000000000000000uLL;
        if (specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(&v72, 0x20uLL)) {
          __break(1u);
        }
        uint64_t v26 = v72;
        a3 = v73;
      }
      else
      {
        uint64_t v72 = a2;
        unint64_t v73 = a3;
        uint64_t v26 = a2;
      }
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v26, a3);
      outlined copy of Data?(a2, v24);
      uint64_t v27 = specialized Data.init<A>(_:)(v66, (unint64_t)v17);
      uint64_t v28 = v26;
      unint64_t v30 = v29;
      uint64_t v70 = v28;
      unint64_t v71 = a3;
      outlined copy of Data._Representation(v28, a3);
      specialized Data.append<A>(contentsOf:)(v27, v30);
      outlined consume of Data._Representation(v27, v30);
      uint64_t v62 = v28;
      unint64_t v66 = a3;
      outlined consume of Data._Representation(v28, a3);
      uint64_t v31 = v70;
      unint64_t v32 = v71;
      if (one-time initialization token for GLT_SEED_EXTRACTION_LABEL != -1) {
        swift_once();
      }
      P256.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)();
      uint64_t v33 = outlined consume of Data._Representation(v31, v32);
      uint64_t v34 = MEMORY[0x2166CC6B0](v33);
      unint64_t v36 = v35;
      CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v34, v36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
      uint64_t inited = swift_initStackObject();
      uint64_t v38 = (void **)MEMORY[0x263F16FA8];
      *(_OWORD *)(inited + 16) = xmmword_2164946A0;
      id v39 = *v38;
      *(void *)(inited + 32) = *v38;
      id v40 = (void *)*MEMORY[0x263F16FB8];
      type metadata accessor for CFStringRef(0);
      objc_super v41 = (void **)MEMORY[0x263F16F68];
      *(void *)(inited + 40) = v40;
      uint64_t v42 = *v41;
      *(void *)(inited + 64) = v43;
      *(void *)(inited + 72) = v42;
      uint64_t v44 = (void *)*MEMORY[0x263F16F80];
      *(void *)(inited + 80) = *MEMORY[0x263F16F80];
      uint64_t v45 = (void *)*MEMORY[0x263F16F98];
      *(void *)(inited + 104) = v43;
      *(void *)(inited + 112) = v45;
      *(void *)(inited + 144) = MEMORY[0x263F8D6C8];
      *(void *)(inited + 120) = 256;
      id v46 = v39;
      id v47 = v40;
      id v48 = v42;
      id v49 = v44;
      id v50 = v45;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
      CFDictionaryRef v51 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CFDataRef v52 = isa;
      SecKeyRef v53 = SecKeyCreateWithData(isa, v51, error);

      if (v53)
      {
        uint64_t v54 = v62;
        unint64_t v55 = v66;
        outlined copy of Data._Representation(v62, v66);
        Class v56 = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v54, v55);
        uint64_t v57 = (objc_class *)type metadata accessor for GLTDiversifiedKey();
        uint64_t v58 = (char *)objc_allocWithZone(v57);
        *(void *)&v58[OBJC_IVAR____TtC17MessageProtection17GLTDiversifiedKey_diversifiedKey] = v53;
        *(void *)&v58[OBJC_IVAR____TtC17MessageProtection17GLTDiversifiedKey_trackingPreventionSalt] = v56;
        v69.receiver = v58;
        v69.super_class = v57;
        [(__SecKey *)&v69 init];

        unint64_t v59 = *(void (**)(char *, uint64_t))(v64 + 8);
        uint64_t v60 = v65;
        v59(v67, v65);
        outlined consume of Data._Representation(v72, v73);
        v59(v21, v60);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      CFErrorRef v22 = error[0];
      lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError();
      swift_allocError();
      CFErrorRef *v23 = v22;
      swift_willThrow();
    }
  }
}

SecKeyRef specialized static GLTKeyDiversificationSwift.diversify(privateKey:docId:trackingPreventionSalt:)(__SecKey *a1, unint64_t a2, SecKeyRef a3, uint64_t a4, const __CFData *a5)
{
  CFDataRef isa = a5;
  error[1] = *(CFErrorRef *)MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v56 - v15;
  error[0] = 0;
  specialized static GLTKeyDiversificationSwift.validateKeyType(_:isPublicKey:)(a1);
  if (!v5)
  {
    unint64_t v59 = v14;
    uint64_t v60 = v11;
    CFDataRef v18 = SecKeyCopyExternalRepresentation(a1, error);
    if (v18)
    {
      CFDataRef v19 = v18;
      uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      CFDataRef v63 = v20;
      os_log_type_t v21 = v16;
      P256.Signing.PrivateKey.init<A>(x963Representation:)();
      switch((unint64_t)isa >> 62)
      {
        case 1uLL:
          LODWORD(v24) = HIDWORD(a4) - a4;
          if (__OFSUB__(HIDWORD(a4), a4))
          {
            __break(1u);
LABEL_18:
            __break(1u);
          }
          uint64_t v24 = (int)v24;
LABEL_11:
          if (v24 == 32)
          {
            uint64_t v28 = a4;
            CFDataRef v29 = isa;
            swift_bridgeObjectRetain();
            uint64_t v30 = specialized Data.init<A>(_:)(a2, (unint64_t)a3);
            unint64_t v32 = v31;
            uint64_t v62 = v28;
            CFDataRef v63 = v29;
            outlined copy of Data._Representation(v28, (unint64_t)v29);
            specialized Data.append<A>(contentsOf:)(v30, v32);
            outlined consume of Data._Representation(v30, v32);
            uint64_t v33 = v62;
            unint64_t v34 = (unint64_t)v63;
            if (one-time initialization token for GLT_SEED_EXTRACTION_LABEL != -1) {
              swift_once();
            }
            MEMORY[0x2166CC620](v33, v34, GLT_SEED_EXTRACTION_LABEL, unk_267980180);
            uint64_t v35 = outlined consume of Data._Representation(v33, v34);
            uint64_t v36 = MEMORY[0x2166CC5F0](v35);
            unint64_t v38 = v37;
            CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
            outlined consume of Data._Representation(v36, v38);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
            uint64_t inited = swift_initStackObject();
            id v40 = (id *)MEMORY[0x263F16FA8];
            *(_OWORD *)(inited + 16) = xmmword_2164946A0;
            id v57 = *v40;
            *(void *)(inited + 32) = v57;
            objc_super v41 = (void *)*MEMORY[0x263F16FB8];
            type metadata accessor for CFStringRef(0);
            uint64_t v58 = v42;
            uint64_t v43 = (void **)MEMORY[0x263F16F68];
            *(void *)(inited + 40) = v41;
            uint64_t v44 = *v43;
            *(void *)(inited + 64) = v42;
            *(void *)(inited + 72) = v44;
            uint64_t v45 = (void *)*MEMORY[0x263F16F70];
            *(void *)(inited + 80) = *MEMORY[0x263F16F70];
            id v46 = (void *)*MEMORY[0x263F16F98];
            *(void *)(inited + 104) = v42;
            *(void *)(inited + 112) = v46;
            *(void *)(inited + 144) = MEMORY[0x263F8D6C8];
            *(void *)(inited + 120) = 256;
            id v47 = v57;
            id v48 = v41;
            id v49 = v44;
            id v50 = v45;
            id v51 = v46;
            specialized Dictionary.init(dictionaryLiteral:)(inited);
            lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
            CFDictionaryRef v52 = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            CFDataRef v53 = isa;
            a3 = SecKeyCreateWithData(isa, v52, error);

            if (!a3)
            {
              __break(1u);
              JUMPOUT(0x216421E54);
            }

            uint64_t v54 = *(void (**)(char *, uint64_t))(v60 + 8);
            v54(v59, v10);
            v54(v21, v10);
          }
          else
          {
LABEL_16:
            lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError();
            swift_allocError();
            void *v55 = 1;
            swift_willThrow();

            (*(void (**)(char *, uint64_t))(v60 + 8))(v16, v10);
          }
          break;
        case 2uLL:
          uint64_t v26 = *(void *)(a4 + 16);
          uint64_t v25 = *(void *)(a4 + 24);
          BOOL v27 = __OFSUB__(v25, v26);
          uint64_t v24 = v25 - v26;
          if (!v27) {
            goto LABEL_11;
          }
          goto LABEL_18;
        case 3uLL:
          goto LABEL_16;
        default:
          uint64_t v24 = BYTE6(isa);
          goto LABEL_11;
      }
    }
    else
    {
      CFErrorRef v22 = error[0];
      lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError();
      swift_allocError();
      CFErrorRef *v23 = v22;
      swift_willThrow();
    }
  }
  return a3;
}

uint64_t type metadata accessor for GLTKeyDiversificationSwift()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError()
{
  unint64_t result = lazy protocol witness table cache variable for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError;
  if (!lazy protocol witness table cache variable for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFStringRef(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GLTKeyDiversificationError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 3;
  if (v5 >= 5) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GLTKeyDiversificationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 4;
    }
  }
  return result;
}

uint64_t getEnumTag for GLTKeyDiversificationError(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *destructiveInjectEnumTag for GLTKeyDiversificationError(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2) {
LABEL_5:
  }
    *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GLTKeyDiversificationError()
{
  return &type metadata for GLTKeyDiversificationError;
}

unint64_t MPPB_SKPaddedStatus.paddedData()()
{
  uint64_t v2 = type metadata accessor for MPPB_SKPaddedStatus(0);
  lazy protocol witness table accessor for type MPPB_RatchetState and conformance MPPB_RatchetState(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
  unint64_t result = Message.serializedData(partial:)();
  if (!v1)
  {
    unint64_t v5 = v4;
    unint64_t v6 = result;
    switch(v4 >> 62)
    {
      case 1uLL:
        unint64_t v9 = HIDWORD(result);
        outlined consume of Data._Representation(result, v4);
        if (__OFSUB__(v9, v6)) {
          goto LABEL_29;
        }
        unint64_t v6 = (int)v9 - (int)v6;
LABEL_10:
        if ((v6 & 0x8000000000000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_32;
      case 2uLL:
        uint64_t v8 = *(void *)(result + 16);
        uint64_t v7 = *(void *)(result + 24);
        outlined consume of Data._Representation(result, v4);
        unint64_t v6 = v7 - v8;
        if (!__OFSUB__(v7, v8)) {
          goto LABEL_10;
        }
        __break(1u);
LABEL_7:
        outlined consume of Data._Representation(v6, v5);
        unint64_t v6 = 0;
LABEL_11:
        unint64_t v10 = static Padme.paddedMessageByteCount(_:)();
        if ((v11 & 1) == 0)
        {
          unint64_t v12 = v10;
          BOOL v13 = v10 >= v6;
          size_t v14 = v10 - v6;
          if (v13)
          {
            if ((v14 & 0x8000000000000000) != 0)
            {
LABEL_27:
              __break(1u);
LABEL_28:
              __break(1u);
LABEL_29:
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
LABEL_32:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x2164222CCLL);
            }
            uint64_t v25 = specialized Data.init(count:)(v14);
            uint64_t v26 = v15;
            if (specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(&v25, v14)) {
              goto LABEL_28;
            }
            uint64_t v16 = v25;
            uint64_t v17 = v26;
            uint64_t v18 = v0 + *(int *)(v2 + 24);
            outlined consume of Data?(*(void *)v18, *(void *)(v18 + 8));
            *(void *)uint64_t v18 = v16;
            *(void *)(v18 + 8) = v17;
            unint64_t result = Message.serializedData(partial:)();
            uint64_t v20 = 0;
            switch(v19 >> 62)
            {
              case 1uLL:
                LODWORD(v20) = HIDWORD(result) - result;
                if (__OFSUB__(HIDWORD(result), result)) {
                  goto LABEL_30;
                }
                uint64_t v20 = (int)v20;
LABEL_23:
                if ((v20 & 0x8000000000000000) == 0 && v20 == v12) {
                  return result;
                }
                __break(1u);
                break;
              case 2uLL:
                uint64_t v23 = *(void *)(result + 16);
                uint64_t v22 = *(void *)(result + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v20 = v22 - v23;
                if (!v24) {
                  goto LABEL_23;
                }
                goto LABEL_31;
              case 3uLL:
                goto LABEL_23;
              default:
                uint64_t v20 = BYTE6(v19);
                goto LABEL_23;
            }
          }
          __break(1u);
          goto LABEL_27;
        }
        lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
        swift_allocError();
        *os_log_type_t v21 = 6;
        unint64_t result = swift_willThrow();
        break;
      case 3uLL:
        goto LABEL_7;
      default:
        outlined consume of Data._Representation(result, v4);
        unint64_t v6 = BYTE6(v5);
        goto LABEL_11;
    }
  }
  return result;
}

id closure #1 in SymmetricKey.toZeroizingNSData()@<X0>(id result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (result)
  {
    unint64_t result = objc_msgSend(self, sel__newZeroingDataWithBytes_length_, result, a2 - (void)result);
    if (result)
    {
      *a3 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SymmetricRatchet.init(data:step:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  uint64_t v90 = a1;
  uint64_t v91 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  unint64_t v92 = (char *)v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v101 = (char *)v86 - v9;
  uint64_t v102 = type metadata accessor for SymmetricKey();
  uint64_t v95 = *(void *)(v102 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v102);
  int v100 = (char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v99 = (char *)v86 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v98 = (void *)((char *)v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v103 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v97 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v96 = (uint64_t)v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_RatchetState?);
  MEMORY[0x270FA5388](v17 - 8);
  unint64_t v19 = (char *)v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for MPPB_RatchetState(0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for SymmetricRatchet();
  uint64_t v25 = *(int *)(v24 + 20);
  unint64_t v93 = a4;
  *(void *)(a4 + v25) = MEMORY[0x263F8EE80];
  uint64_t v26 = v90;
  uint64_t v106 = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  outlined copy of Data._Representation(v90, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type MPPB_RatchetState and conformance MPPB_RatchetState(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
  BOOL v27 = v107;
  Message.init(serializedData:extensions:partial:options:)();
  if (v27)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for MPPB_RatchetState?);
    lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
    swift_allocError();
    *uint64_t v28 = 2;
    swift_willThrow();
    outlined consume of Data._Representation(v26, a2);
    __swift_destroy_boxed_opaque_existential_0(v91);
    return swift_bridgeObjectRelease();
  }
  uint64_t v30 = v96;
  v86[2] = 0;
  uint64_t v94 = v25;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
  outlined init with take of MPPB_KeyAndIndex((uint64_t)v19, (uint64_t)v23, type metadata accessor for MPPB_RatchetState);
  unint64_t v31 = v93;
  outlined init with copy of SymmetricRatchetStep(v91, v93 + *(int *)(v24 + 24));
  uint64_t v32 = (uint64_t)&v23[*(int *)(v20 + 24)];
  uint64_t v33 = (void (*)(void, void, void))v98;
  outlined init with copy of MPPB_KeyAndIndex?(v32, (uint64_t)v98);
  uint64_t v34 = v103;
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v97 + 48))(v33, 1, v103) == 1)
  {
    UnknownStorage.init()();
    *(_OWORD *)(v30 + *(int *)(v34 + 20)) = xmmword_216494780;
    uint64_t v35 = v30 + *(int *)(v34 + 24);
    *(void *)uint64_t v35 = 0;
    *(unsigned char *)(v35 + 8) = 1;
    outlined destroy of TetraSessionStates?((uint64_t)v33, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  }
  else
  {
    outlined init with take of MPPB_KeyAndIndex((uint64_t)v33, v30, type metadata accessor for MPPB_KeyAndIndex);
  }
  uint64_t v36 = v95;
  unint64_t v37 = v99;
  unint64_t v88 = a2;
  unint64_t v38 = (uint64_t *)(v30 + *(int *)(v34 + 20));
  uint64_t v39 = *v38;
  unint64_t v40 = v38[1];
  if (v40 >> 60 == 15) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = *v38;
  }
  unint64_t v42 = 0xC000000000000000;
  if (v40 >> 60 != 15) {
    unint64_t v42 = v40;
  }
  *(void *)&long long v104 = v41;
  *((void *)&v104 + 1) = v42;
  outlined copy of Data?(v39, v40);
  SymmetricKey.init<A>(data:)();
  uint64_t v43 = v30 + *(int *)(v34 + 24);
  if (*(unsigned char *)(v43 + 8)) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = *(void *)v43;
  }
  outlined destroy of MPPB_RatchetState(v30, type metadata accessor for MPPB_KeyAndIndex);
  uint64_t v45 = v102;
  uint64_t v98 = *(void **)(v36 + 32);
  uint64_t v99 = (char *)(v36 + 32);
  ((void (*)(unint64_t, char *, uint64_t))v98)(v31, v37, v102);
  *(void *)(v31
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                     + 48)) = v44;
  uint64_t v87 = v23;
  uint64_t v46 = *(void *)v23;
  id v47 = *(char **)(*(void *)v23 + 16);
  v86[1] = *(void *)v23;
  if (!v47)
  {
    swift_bridgeObjectRetain();
LABEL_45:
    outlined consume of Data._Representation(v90, v88);
    __swift_destroy_boxed_opaque_existential_0(v91);
    swift_bridgeObjectRelease();
    return outlined destroy of MPPB_RatchetState((uint64_t)v87, type metadata accessor for MPPB_RatchetState);
  }
  uint64_t v48 = v46 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
  id v49 = *(char **)(v97 + 72);
  uint64_t v107 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56);
  uint64_t v96 = (uint64_t)v49;
  uint64_t v97 = v36 + 48;
  uint64_t v89 = v36 + 40;
  swift_bridgeObjectRetain();
  uint64_t v50 = (uint64_t)v101;
  uint64_t v51 = v94;
  uint64_t v52 = (uint64_t)v92;
  while (1)
  {
    uint64_t v54 = *(int *)(v34 + 20);
    uint64_t v55 = v48 + *(int *)(v34 + 24);
    if (*(unsigned char *)(v55 + 8)) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(void *)v55;
    }
    uint64_t v57 = *(void *)(v48 + v54);
    unint64_t v58 = *(void *)(v48 + v54 + 8);
    if (v58 >> 60 == 15) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *(void *)(v48 + v54);
    }
    unint64_t v60 = 0xC000000000000000;
    if (v58 >> 60 != 15) {
      unint64_t v60 = v58;
    }
    *(void *)&long long v104 = v59;
    *((void *)&v104 + 1) = v60;
    outlined copy of Data?(v57, v58);
    SymmetricKey.init<A>(data:)();
    uint64_t v61 = *v107;
    (*v107)(v50, 0, 1, v45);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v97)(v50, 1, v45) == 1)
    {
      outlined destroy of TetraSessionStates?(v50, &demangling cache variable for type metadata for SymmetricKey?);
      uint64_t v62 = v51;
      unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
      if (v64)
      {
        unint64_t v92 = v47;
        unint64_t v93 = v63;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v66 = *(void *)(v31 + v51);
        *(void *)&long long v104 = *(void *)(v31 + v62);
        *(void *)(v31 + v62) = 0x8000000000000000;
        uint64_t v34 = v103;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v66 = v104;
        }
        unint64_t v67 = v93;
        ((void (*)(uint64_t, unint64_t, uint64_t))v98)(v52, *(void *)(v66 + 56) + *(void *)(v95 + 72) * v93, v45);
        specialized _NativeDictionary._delete(at:)(v67, v66);
        *(void *)(v31 + v62) = v66;
        swift_bridgeObjectRelease();
        uint64_t v53 = 0;
        uint64_t v51 = v62;
        id v47 = v92;
      }
      else
      {
        uint64_t v53 = 1;
        uint64_t v34 = v103;
      }
      v61(v52, v53, 1, v45);
      outlined destroy of TetraSessionStates?(v52, &demangling cache variable for type metadata for SymmetricKey?);
      uint64_t v50 = (uint64_t)v101;
      goto LABEL_18;
    }
    uint64_t v68 = v45;
    uint64_t v69 = v52;
    ((void (*)(char *, uint64_t, uint64_t))v98)(v100, v50, v68);
    int v70 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v71 = v51;
    uint64_t v72 = *(void *)(v31 + v51);
    *(void *)&long long v104 = v72;
    unint64_t v73 = v31;
    *(void *)(v31 + v71) = 0x8000000000000000;
    unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
    uint64_t v76 = *(void *)(v72 + 16);
    BOOL v77 = (v74 & 1) == 0;
    uint64_t v78 = v76 + v77;
    if (__OFADD__(v76, v77)) {
      break;
    }
    char v79 = v74;
    if (*(void *)(v72 + 24) >= v78)
    {
      if (v70)
      {
        unint64_t v82 = (void *)v104;
        if ((v74 & 1) == 0) {
          goto LABEL_41;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v82 = (void *)v104;
        if ((v79 & 1) == 0) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, v70);
      unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
      if ((v79 & 1) != (v81 & 1)) {
        goto LABEL_48;
      }
      unint64_t v75 = v80;
      unint64_t v82 = (void *)v104;
      if ((v79 & 1) == 0)
      {
LABEL_41:
        v82[(v75 >> 6) + 8] |= 1 << v75;
        *(void *)(v82[6] + 8 * v75) = v56;
        ((void (*)(unint64_t, char *, uint64_t))v98)(v82[7] + *(void *)(v95 + 72) * v75, v100, v102);
        uint64_t v83 = v82[2];
        BOOL v84 = __OFADD__(v83, 1);
        uint64_t v85 = v83 + 1;
        if (v84) {
          goto LABEL_47;
        }
        v82[2] = v85;
        goto LABEL_43;
      }
    }
    (*(void (**)(unint64_t, char *, uint64_t))(v95 + 40))(v82[7] + *(void *)(v95 + 72) * v75, v100, v102);
LABEL_43:
    unint64_t v31 = v73;
    uint64_t v51 = v94;
    *(void *)(v73 + v94) = v104;
    swift_bridgeObjectRelease();
    uint64_t v52 = v69;
    uint64_t v50 = (uint64_t)v101;
    uint64_t v45 = v102;
    uint64_t v34 = v103;
LABEL_18:
    v48 += v96;
    if (!--v47) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t SymmetricRatchet.serializedData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v3 = v2 - 8;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v41 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v9 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v42 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MPPB_RatchetState(0);
  uint64_t v40 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  UnknownStorage.init()();
  uint64_t v14 = (uint64_t)v13 + *(int *)(v11 + 24);
  uint64_t v36 = v13;
  uint64_t v37 = v14;
  uint64_t v15 = *(void (**)(void))(v9 + 56);
  uint64_t v38 = v9 + 56;
  uint64_t v39 = v15;
  v15();
  type metadata accessor for SymmetricRatchet();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = specialized Sequence.compactMap<A>(_:)(v16);
  swift_bridgeObjectRelease();
  *uint64_t v13 = v17;
  uint64_t v18 = *(int *)(v3 + 56);
  uint64_t v19 = type metadata accessor for SymmetricKey();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v8, v1, v19);
  uint64_t v22 = *(void *)(v1 + v18);
  uint64_t v35 = v8;
  *(void *)&v8[v18] = v22;
  v21(v6, (uint64_t)v8, v19);
  *(void *)&v6[*(int *)(v3 + 56)] = v22;
  uint64_t v23 = v42;
  UnknownStorage.init()();
  uint64_t v24 = v41;
  uint64_t v25 = v23 + *(int *)(v41 + 20);
  *(_OWORD *)uint64_t v25 = xmmword_216494780;
  uint64_t v26 = v23 + *(int *)(v24 + 24);
  *(void *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 8) = 1;
  type metadata accessor for NSData();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  BOOL v27 = v43;
  uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  *(void *)uint64_t v25 = v28;
  *(void *)(v25 + 8) = v30;
  outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)uint64_t v26 = v22;
  *(unsigned char *)(v26 + 8) = 0;
  uint64_t v31 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v35, v19);
  uint64_t v32 = v37;
  outlined destroy of TetraSessionStates?(v37, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined init with take of MPPB_KeyAndIndex(v42, v32, type metadata accessor for MPPB_KeyAndIndex);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v39)(v32, 0, 1, v41);
  lazy protocol witness table accessor for type MPPB_RatchetState and conformance MPPB_RatchetState(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
  uint64_t v33 = Message.serializedData(partial:)();
  outlined destroy of MPPB_RatchetState(v31, type metadata accessor for MPPB_RatchetState);
  return v33;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v7 = *(void *)(v67 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v67);
  uint64_t v58 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v56 = (uint64_t)&v56 - v10;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: SymmetricKey));
  uint64_t v11 = MEMORY[0x270FA5388](v77);
  uint64_t v66 = (uint64_t *)((char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v76 = (char *)&v56 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unint64_t v75 = (uint64_t *)((char *)&v56 - v16);
  MEMORY[0x270FA5388](v15);
  uint64_t v65 = (char *)&v56 - v17;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v60 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v61 = (unint64_t)(v19 + 63) >> 6;
  char v64 = (void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  uint64_t v57 = v7;
  unint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v68 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  unint64_t v59 = MEMORY[0x263F8EE78];
  long long v62 = xmmword_216494780;
  uint64_t v78 = v6;
  if (!v21) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v69 = (v21 - 1) & v21;
  int64_t v70 = v23;
  for (unint64_t i = __clz(__rbit64(v21)) | (v23 << 6); ; unint64_t i = __clz(__rbit64(v50)) + (v49 << 6))
  {
    uint64_t v25 = *(void *)(v68 + 56);
    uint64_t v26 = *(void *)(*(void *)(v68 + 48) + 8 * i);
    uint64_t v27 = type metadata accessor for SymmetricKey();
    uint64_t v74 = *(void *)(v27 - 8);
    uint64_t v28 = v25 + *(void *)(v74 + 72) * i;
    uint64_t v29 = v77;
    uint64_t v30 = v65;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    v31(&v65[*(int *)(v77 + 48)], v28, v27);
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v31;
    unint64_t v73 = v31;
    *uint64_t v30 = v26;
    uint64_t v33 = (uint64_t)v30;
    uint64_t v34 = v75;
    outlined init with take of (key: UInt64, value: SymmetricKey)(v33, (uint64_t)v75);
    uint64_t v72 = *v34;
    uint64_t v35 = *(int *)(v29 + 48);
    uint64_t v36 = v76;
    uint64_t v37 = &v76[v35];
    *(void *)uint64_t v76 = v72;
    v32(&v36[v35], (char *)v34 + v35, v27);
    UnknownStorage.init()();
    uint64_t v38 = v67;
    uint64_t v39 = &v6[*(int *)(v67 + 20)];
    *(_OWORD *)uint64_t v39 = v62;
    uint64_t v40 = &v78[*(int *)(v38 + 24)];
    *(void *)uint64_t v40 = 0;
    v40[8] = 1;
    type metadata accessor for NSData();
    SymmetricKey.withUnsafeBytes<A>(_:)();
    uint64_t v71 = v2;
    uint64_t v41 = v79;
    uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    *(void *)uint64_t v39 = v42;
    *((void *)v39 + 1) = v44;
    uint64_t v45 = (char *)v66 + *(int *)(v77 + 48);
    uint64_t v47 = v72;
    uint64_t v46 = (void (*)(char *, char *, uint64_t))v73;
    void *v66 = v72;
    v46(v45, v37, v27);
    outlined destroy of TetraSessionStates?((uint64_t)v76, &demangling cache variable for type metadata for (key: UInt64, value: SymmetricKey));
    (*(void (**)(char *, uint64_t))(v74 + 8))(v45, v27);
    *(void *)uint64_t v40 = v47;
    v40[8] = 0;
    uint64_t v6 = v78;
    (*v64)(v78, 0, 1, v38);
    outlined destroy of TetraSessionStates?((uint64_t)v75, &demangling cache variable for type metadata for (key: UInt64, value: SymmetricKey));
    if ((*v63)(v6, 1, v38) == 1)
    {
      uint64_t result = outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      int64_t v23 = v70;
      uint64_t v2 = v71;
      unint64_t v21 = v69;
      if (v69) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v52 = v56;
      outlined init with take of MPPB_KeyAndIndex((uint64_t)v6, v56, type metadata accessor for MPPB_KeyAndIndex);
      outlined init with take of MPPB_KeyAndIndex(v52, v58, type metadata accessor for MPPB_KeyAndIndex);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1, v59);
      }
      int64_t v23 = v70;
      uint64_t v2 = v71;
      unint64_t v21 = v69;
      unint64_t v54 = *(void *)(v59 + 16);
      unint64_t v53 = *(void *)(v59 + 24);
      if (v54 >= v53 >> 1) {
        unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v59);
      }
      unint64_t v55 = v59;
      *(void *)(v59 + 16) = v54 + 1;
      uint64_t result = outlined init with take of MPPB_KeyAndIndex(v58, v55+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(void *)(v57 + 72) * v54, type metadata accessor for MPPB_KeyAndIndex);
      if (v21) {
        goto LABEL_4;
      }
    }
LABEL_7:
    BOOL v48 = __OFADD__(v23, 1);
    int64_t v49 = v23 + 1;
    if (v48)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v49 >= v61) {
      goto LABEL_30;
    }
    unint64_t v50 = *(void *)(v60 + 8 * v49);
    if (!v50) {
      break;
    }
LABEL_19:
    uint64_t v69 = (v50 - 1) & v50;
    int64_t v70 = v49;
  }
  int64_t v51 = v49 + 1;
  if (v49 + 1 >= v61) {
    goto LABEL_30;
  }
  unint64_t v50 = *(void *)(v60 + 8 * v51);
  if (v50) {
    goto LABEL_18;
  }
  int64_t v51 = v49 + 2;
  if (v49 + 2 >= v61) {
    goto LABEL_30;
  }
  unint64_t v50 = *(void *)(v60 + 8 * v51);
  if (v50) {
    goto LABEL_18;
  }
  int64_t v51 = v49 + 3;
  if (v49 + 3 >= v61) {
    goto LABEL_30;
  }
  unint64_t v50 = *(void *)(v60 + 8 * v51);
  if (v50) {
    goto LABEL_18;
  }
  int64_t v51 = v49 + 4;
  if (v49 + 4 >= v61)
  {
LABEL_30:
    swift_release();
    return v59;
  }
  unint64_t v50 = *(void *)(v60 + 8 * v51);
  if (v50)
  {
LABEL_18:
    int64_t v49 = v51;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v49 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    if (v49 >= v61) {
      goto LABEL_30;
    }
    unint64_t v50 = *(void *)(v60 + 8 * v49);
    ++v51;
    if (v50) {
      goto LABEL_19;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MPPB_RatchetState and conformance MPPB_RatchetState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors;
  if (!lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors;
  if (!lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors);
  }
  return result;
}

uint64_t specialized Data.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        unint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors);
  }
  return result;
}

uint64_t outlined init with take of MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of SymmetricRatchetStep(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of MPPB_KeyAndIndex?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MPPB_RatchetState(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of (key: UInt64, value: SymmetricKey)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: SymmetricKey));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_RatchetState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for MPPB_KeyAndIndex(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      uint64_t v19 = *(int *)(v16 + 20);
      uint64_t v20 = &v14[v19];
      unint64_t v21 = &v15[v19];
      unint64_t v22 = *((void *)v21 + 1);
      if (v22 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      }
      else
      {
        uint64_t v23 = *(void *)v21;
        outlined copy of Data._Representation(*(void *)v21, *((void *)v21 + 1));
        *(void *)uint64_t v20 = v23;
        *((void *)v20 + 1) = v22;
      }
      uint64_t v24 = *(int *)(v16 + 24);
      uint64_t v25 = &v14[v24];
      uint64_t v26 = &v15[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t type metadata accessor for MPPB_KeyAndIndex(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_KeyAndIndex);
}

uint64_t destroy for MPPB_RatchetState(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v7, v5);
    uint64_t v10 = (uint64_t *)(v7 + *(int *)(v8 + 20));
    unint64_t v11 = v10[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v10;
      return outlined consume of Data._Representation(v12, v11);
    }
  }
  return result;
}

void *initializeWithCopy for MPPB_RatchetState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = *(int *)(v14 + 20);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v21 = *(void *)v19;
      outlined copy of Data._Representation(*(void *)v19, *((void *)v19 + 1));
      *(void *)uint64_t v18 = v21;
      *((void *)v18 + 1) = v20;
    }
    uint64_t v22 = *(int *)(v14 + 24);
    uint64_t v23 = &v12[v22];
    uint64_t v24 = &v13[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithCopy for MPPB_RatchetState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v44 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v43 = *(void *)(v15 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  uint64_t v17 = v13;
  LODWORD(v13) = v16(v13, 1, v15);
  int v18 = v16(v14, 1, v15);
  if (!v13)
  {
    if (v18)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v17);
      goto LABEL_7;
    }
    v11(v17, v14, v9);
    uint64_t v25 = *(int *)(v15 + 20);
    uint64_t v26 = (uint64_t *)&v17[v25];
    uint64_t v27 = (uint64_t *)&v14[v25];
    unint64_t v28 = *(void *)&v14[v25 + 8];
    if (*(void *)&v17[v25 + 8] >> 60 == 15)
    {
      uint64_t v24 = v44;
      if (v28 >> 60 != 15)
      {
        uint64_t v29 = *v27;
        outlined copy of Data._Representation(v29, v28);
        *uint64_t v26 = v29;
        v26[1] = v28;
LABEL_17:
        uint64_t v38 = *(int *)(v15 + 24);
        uint64_t v39 = &v17[v38];
        uint64_t v40 = &v14[v38];
        uint64_t v41 = *(void *)v40;
        v39[8] = v40[8];
        *(void *)uint64_t v39 = v41;
        return v24;
      }
    }
    else
    {
      uint64_t v24 = v44;
      if (v28 >> 60 != 15)
      {
        uint64_t v35 = *v27;
        outlined copy of Data._Representation(v35, v28);
        uint64_t v36 = *v26;
        unint64_t v37 = v26[1];
        *uint64_t v26 = v35;
        v26[1] = v28;
        outlined consume of Data._Representation(v36, v37);
        goto LABEL_17;
      }
      outlined destroy of Data((uint64_t)v26);
    }
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    goto LABEL_17;
  }
  if (v18)
  {
LABEL_7:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v17, v14, *(void *)(*(void *)(v23 - 8) + 64));
    return v44;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v17, v14, v9);
  uint64_t v19 = *(int *)(v15 + 20);
  unint64_t v20 = &v17[v19];
  uint64_t v21 = &v14[v19];
  unint64_t v22 = *((void *)v21 + 1);
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
  }
  else
  {
    uint64_t v30 = *(void *)v21;
    outlined copy of Data._Representation(*(void *)v21, *((void *)v21 + 1));
    *(void *)unint64_t v20 = v30;
    *((void *)v20 + 1) = v22;
  }
  uint64_t v24 = v44;
  uint64_t v31 = *(int *)(v15 + 24);
  uint64_t v32 = &v17[v31];
  uint64_t v33 = &v14[v31];
  uint64_t v34 = *(void *)v33;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = v34;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v17, 0, 1, v15);
  return v24;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of MPPB_KeyAndIndex(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MPPB_KeyAndIndex(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for MPPB_RatchetState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    *(_OWORD *)&v12[*(int *)(v14 + 20)] = *(_OWORD *)&v13[*(int *)(v14 + 20)];
    uint64_t v17 = *(int *)(v14 + 24);
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    v18[8] = v19[8];
    *(void *)int v18 = *(void *)v19;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for MPPB_RatchetState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v35 + 40);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v36 = a1;
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v17 = v12;
  LODWORD(v12) = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v12)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v17, v13, v9);
      *(_OWORD *)&v17[*(int *)(v14 + 20)] = *(_OWORD *)&v13[*(int *)(v14 + 20)];
      uint64_t v19 = *(int *)(v14 + 24);
      unint64_t v20 = &v17[v19];
      uint64_t v21 = &v13[v19];
      v20[8] = v21[8];
      *(void *)unint64_t v20 = *(void *)v21;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v14);
      return v36;
    }
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v17, v13, *(void *)(*(void *)(v22 - 8) + 64));
    return v36;
  }
  if (v18)
  {
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v17);
    goto LABEL_6;
  }
  uint64_t v25 = v17;
  v10(v17, v13, v9);
  uint64_t v26 = *(int *)(v14 + 20);
  uint64_t v27 = (uint64_t)&v17[v26];
  unint64_t v28 = &v13[v26];
  unint64_t v29 = *(void *)&v17[v26 + 8];
  if (v29 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    uint64_t v23 = v36;
  }
  else
  {
    unint64_t v30 = *((void *)v28 + 1);
    uint64_t v23 = v36;
    if (v30 >> 60 == 15)
    {
      outlined destroy of Data(v27);
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    }
    else
    {
      uint64_t v31 = *(void *)v27;
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v30;
      outlined consume of Data._Representation(v31, v29);
    }
  }
  uint64_t v32 = *(int *)(v14 + 24);
  uint64_t v33 = &v25[v32];
  uint64_t v34 = &v13[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v34[8];
  return v23;
}

uint64_t getEnumTagSinglePayload for MPPB_RatchetState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216424C4C);
}

uint64_t sub_216424C4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for MPPB_RatchetState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_216424D90);
}

void *sub_216424D90(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for MPPB_RatchetState(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_RatchetState);
}

void type metadata completion function for MPPB_RatchetState()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MPPB_KeyAndIndex?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for MPPB_KeyAndIndex?()
{
  if (!lazy cache variable for type metadata for MPPB_KeyAndIndex?)
  {
    type metadata accessor for MPPB_KeyAndIndex(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MPPB_KeyAndIndex?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_KeyAndIndex(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t destroy for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    return outlined consume of Data._Representation(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  return a1;
}

uint64_t assignWithCopy for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
LABEL_8:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(unsigned char *)(v16 + 8) = *((unsigned char *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  return a1;
}

uint64_t initializeWithTake for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  return a1;
}

uint64_t assignWithTake for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm);
}

uint64_t storeEnumTagSinglePayload for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm);
}

uint64_t type metadata completion function for MPPB_KeyAndIndex()
{
  return type metadata completion function for MPPB_KeyAndIndex();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_SKPaddedStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_SKPaddedStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494560;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "payload";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "padding";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_KeyAndIndex._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_KeyAndIndex._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494560;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "key";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "index";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_RatchetState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_RatchetState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494560;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "chainKey";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "messageKeys";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_SKIncomingRatchet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_SKIncomingRatchet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2164946A0;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "ratchetState";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "messageKeys";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  unint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)unint64_t v11 = "publicSigningKey";
  *(void *)(v11 + 8) = 16;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_SKOutgoingRatchet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_SKOutgoingRatchet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494790;
  int v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ratchetState";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "privateSigningKey";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  unint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  char *v11 = 3;
  *(void *)uint64_t v12 = "currentMessageKey";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "subscriptionKey";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_LiteRatchet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_LiteRatchet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2164946A0;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "ratchetState";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "senderKeyID";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  unint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)unint64_t v11 = "conversationDST";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_KyberSecurityLevel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_KyberSecurityLevel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494560;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 0;
  *(void *)unint64_t v6 = "securityLevel768";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "securityLevel1024";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_PrivateKeyBackingStore._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_PrivateKeyBackingStore._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494560;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 0;
  *(void *)unint64_t v6 = "AP";
  *(void *)(v6 + 8) = 2;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "SEP";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_KyberPrivateKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_KyberPrivateKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2164946A0;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "keyData";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "securityLevel";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  unint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)unint64_t v11 = "backingStore";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_TetraPublicPrekey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_TetraPublicPrekey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494560;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "pqPrekey";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "pqPrekeySignature";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_TetraInitiationMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_TetraInitiationMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494560;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "registeredKeyBundle";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "TetraMessage";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_TetraMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_TetraMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2164972F0;
  uint64_t v4 = v24 + v3;
  int v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)int v5 = "messageVersion";
  *(void *)(v5 + 8) = 14;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  uint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)uint64_t v9 = "ciphertext";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  unint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)unint64_t v11 = "signature";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "ecdhPublicKey";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "kemPublicKey";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "kemEncap";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "messageIndex";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "usedRegisteredKeys";
  *((void *)v21 + 1) = 18;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "messageKeyIndicator";
  *(void *)(v22 + 8) = 19;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_TetraInnerMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_TetraInnerMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_216494560;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "plaintext";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "ktGossipData";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_PaddyKeyDistributionMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_PaddyKeyDistributionMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2164946A0;
  int v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *int v5 = 1;
  *(void *)unint64_t v6 = "ciphertext";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "messageIndex";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  unint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)unint64_t v11 = "ecdhPublicKeyPrefix";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MPPB_SKPaddedStatus.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2 || result == 1)
    {
      type metadata accessor for MPPB_SKPaddedStatus(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t MPPB_SKPaddedStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKPaddedStatus);
  if (!v4)
  {
    closure #2 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKPaddedStatus);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

double protocol witness for Message.init() in conformance MPPB_SKPaddedStatus@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_216494780;
  *(_OWORD *)(a2 + v5) = xmmword_216494780;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_SKPaddedStatus()
{
  return 0xD000000000000013;
}

BOOL protocol witness for Message.isInitialized.getter in conformance MPPB_SKPaddedStatus(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 20) + 8) >> 60 != 15;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance MPPB_SKPaddedStatus())()
{
  return destructiveProjectEnumData for TetraDBErrors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_SKPaddedStatus()
{
  return MPPB_SKPaddedStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MPPB_SKPaddedStatus.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance MPPB_SKPaddedStatus()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance MPPB_SKPaddedStatus()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_SKPaddedStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_SKPaddedStatus(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t MPPB_KeyAndIndex.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for MPPB_KeyAndIndex(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for MPPB_KeyAndIndex(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t MPPB_KeyAndIndex.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_KeyAndIndex);
  if (!v4)
  {
    closure #2 in MPPB_KeyAndIndex.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v7 = a1 + *(int *)(result + 20);
  unint64_t v8 = *(void *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *(void *)v7;
    outlined copy of Data._Representation(*(void *)v7, *(void *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

uint64_t closure #2 in MPPB_KeyAndIndex.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for MPPB_KeyAndIndex(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 24) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  return result;
}

double protocol witness for Message.init() in conformance MPPB_KeyAndIndex@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_216494780;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_KeyAndIndex()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance MPPB_KeyAndIndex(uint64_t a1)
{
  if (*(void *)(v1 + *(int *)(a1 + 20) + 8) >> 60 == 15) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 24) + 8) ^ 1) & 1;
  }
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_KeyAndIndex()
{
  return MPPB_KeyAndIndex.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MPPB_KeyAndIndex.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_KeyAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_KeyAndIndex@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_KeyAndIndex._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_KeyAndIndex(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_KeyAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t MPPB_RatchetState.isInitialized.getter()
{
  uint64_t v1 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = (uint64_t)v0 + *(int *)(type metadata accessor for MPPB_RatchetState(0) + 24);
  outlined init with copy of MPPB_KeyAndIndex?(v11, (uint64_t)v10);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48);
  int v13 = v12(v10, 1, v1);
  outlined destroy of TetraSessionStates?((uint64_t)v10, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if (v13 != 1)
  {
    outlined init with copy of MPPB_KeyAndIndex?(v11, (uint64_t)v8);
    if (v12(v8, 1, v1) == 1)
    {
      outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
LABEL_8:
      specialized _arrayForceCast<A, B>(_:)(*v0);
      char v15 = static Internal.areAllInitialized(_:)();
      swift_bridgeObjectRelease();
      return v15 & 1;
    }
    outlined init with take of MPPB_KeyAndIndex((uint64_t)v8, (uint64_t)v4);
    if (*(void *)&v4[*(int *)(v1 + 20) + 8] >> 60 == 15)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v4);
    }
    else
    {
      char v14 = v4[*(int *)(v1 + 24) + 8];
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v4);
      if ((v14 & 1) == 0) {
        goto LABEL_8;
      }
    }
  }
  char v15 = 0;
  return v15 & 1;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      outlined init with copy of MPPB_KeyAndIndex(v8, (uint64_t)v5);
      uint64_t v17 = v7;
      unint64_t v11 = *(void *)(v7 + 16);
      unint64_t v10 = *(void *)(v7 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      uint64_t v16 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
      outlined init with copy of MPPB_KeyAndIndex((uint64_t)v5, (uint64_t)boxed_opaque_existential_1);
      *(void *)(v7 + 16) = v11 + 1;
      outlined init with take of Message(&v14, v7 + 40 * v11 + 32);
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v5);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t MPPB_RatchetState.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for MPPB_KeyAndIndex(0);
        lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        closure #1 in MPPB_RatchetState.decodeMessage<A>(decoder:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in MPPB_RatchetState.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t MPPB_RatchetState.traverse<A>(visitor:)()
{
  uint64_t result = closure #1 in MPPB_RatchetState.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    if (*(void *)(*(void *)v0 + 16))
    {
      type metadata accessor for MPPB_KeyAndIndex(0);
      lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for MPPB_RatchetState(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in MPPB_RatchetState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MPPB_RatchetState(0);
  outlined init with copy of MPPB_KeyAndIndex?(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return outlined destroy of TetraSessionStates?((uint64_t)v4, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  }
  outlined init with take of MPPB_KeyAndIndex((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of MPPB_KeyAndIndex((uint64_t)v8);
}

uint64_t protocol witness for Message.init() in conformance MPPB_RatchetState@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_RatchetState()
{
  return 0xD000000000000011;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance MPPB_RatchetState())()
{
  return destructiveProjectEnumData for TetraDBErrors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_RatchetState()
{
  return MPPB_RatchetState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_RatchetState()
{
  return MPPB_RatchetState.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_RatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_RatchetState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_RatchetState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_RatchetState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_RatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t MPPB_SKIncomingRatchet.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for MPPB_KeyAndIndex(0);
        lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for MPPB_SKIncomingRatchet(0);
    dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t MPPB_SKIncomingRatchet.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #2 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKIncomingRatchet);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for MPPB_KeyAndIndex(0);
      lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    closure #2 in MPPB_SKIncomingRatchet.traverse<A>(visitor:)(v3);
    type metadata accessor for MPPB_SKIncomingRatchet(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v7 = a1 + *(int *)(result + 24);
  unint64_t v8 = *(void *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *(void *)v7;
    outlined copy of Data._Representation(*(void *)v7, *(void *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

uint64_t closure #2 in MPPB_SKIncomingRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for MPPB_SKIncomingRatchet(0);
  uint64_t v3 = a1 + *(int *)(result + 28);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

double protocol witness for Message.init() in conformance MPPB_SKIncomingRatchet@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = *(int *)(a1 + 28);
  *(_OWORD *)((char *)a2 + *(int *)(a1 + 24)) = xmmword_216494780;
  *(_OWORD *)((char *)a2 + v5) = xmmword_216494780;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_SKIncomingRatchet()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance MPPB_SKIncomingRatchet(uint64_t a1)
{
  if (*(unint64_t *)((char *)v1 + *(int *)(a1 + 24) + 8) >> 60 == 15
    || *(unint64_t *)((char *)v1 + *(int *)(a1 + 28) + 8) >> 60 == 15)
  {
    return 0;
  }
  specialized _arrayForceCast<A, B>(_:)(*v1);
  char v3 = static Internal.areAllInitialized(_:)();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance MPPB_RatchetState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance MPPB_RatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_SKIncomingRatchet()
{
  return MPPB_SKIncomingRatchet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_SKIncomingRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MPPB_SKIncomingRatchet.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_SKIncomingRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKIncomingRatchet@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_SKIncomingRatchet._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_SKIncomingRatchet(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_SKIncomingRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t MPPB_SKOutgoingRatchet.isInitialized.getter()
{
  uint64_t v1 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  unint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  long long v14 = (char *)&v34 - v13;
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v34 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v34 - v18;
  unint64_t v20 = (int *)type metadata accessor for MPPB_SKOutgoingRatchet(0);
  if (*(void *)(v0 + v20[5] + 8) >> 60 == 15) {
    return 0;
  }
  uint64_t v21 = v20;
  if (*(void *)(v0 + v20[6] + 8) >> 60 == 15) {
    return 0;
  }
  uint64_t v35 = v11;
  uint64_t v36 = v5;
  uint64_t v22 = v0 + v20[7];
  outlined init with copy of MPPB_KeyAndIndex?(v22, (uint64_t)v19);
  uint64_t v23 = v1;
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t))(v2 + 48);
  uint64_t v37 = v23;
  int v25 = v24(v19, 1);
  outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if (v25 == 1) {
    return 0;
  }
  uint64_t v26 = v0 + v21[8];
  outlined init with copy of MPPB_KeyAndIndex?(v26, (uint64_t)v17);
  uint64_t v27 = v37;
  int v28 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v17, 1, v37);
  outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if (v28 == 1) {
    return 0;
  }
  outlined init with copy of MPPB_KeyAndIndex?(v22, (uint64_t)v14);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v24)(v14, 1, v27) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    uint64_t v30 = (uint64_t)v35;
    uint64_t v31 = (uint64_t)v36;
  }
  else
  {
    outlined init with take of MPPB_KeyAndIndex((uint64_t)v14, (uint64_t)v7);
    uint64_t v30 = (uint64_t)v35;
    uint64_t v31 = (uint64_t)v36;
    if (*(void *)&v7[*(int *)(v27 + 20) + 8] >> 60 == 15)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v7);
      return 0;
    }
    char v32 = v7[*(int *)(v27 + 24) + 8];
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v7);
    if (v32) {
      return 0;
    }
  }
  outlined init with copy of MPPB_KeyAndIndex?(v26, v30);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v30, 1, v27) != 1)
  {
    outlined init with take of MPPB_KeyAndIndex(v30, v31);
    if (*(void *)(v31 + *(int *)(v27 + 20) + 8) >> 60 == 15)
    {
      outlined destroy of MPPB_KeyAndIndex(v31);
    }
    else
    {
      char v33 = *(unsigned char *)(v31 + *(int *)(v27 + 24) + 8);
      outlined destroy of MPPB_KeyAndIndex(v31);
      if ((v33 & 1) == 0) {
        return 1;
      }
    }
    return 0;
  }
  outlined destroy of TetraSessionStates?(v30, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  return 1;
}

uint64_t MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for MPPB_SKOutgoingRatchet(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        break;
      case 3:
        closure #3 in MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #3 in MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #4 in MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKOutgoingRatchet);
  if (!v4)
  {
    closure #2 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKOutgoingRatchet);
    closure #3 in MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(v3);
    closure #4 in MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #3 in MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MPPB_SKOutgoingRatchet(0);
  outlined init with copy of MPPB_KeyAndIndex?(a1 + *(int *)(v9 + 28), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return outlined destroy of TetraSessionStates?((uint64_t)v4, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  }
  outlined init with take of MPPB_KeyAndIndex((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of MPPB_KeyAndIndex((uint64_t)v8);
}

uint64_t closure #4 in MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MPPB_SKOutgoingRatchet(0);
  outlined init with copy of MPPB_KeyAndIndex?(a1 + *(int *)(v9 + 32), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return outlined destroy of TetraSessionStates?((uint64_t)v4, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  }
  outlined init with take of MPPB_KeyAndIndex((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of MPPB_KeyAndIndex((uint64_t)v8);
}

uint64_t protocol witness for Message.init() in conformance MPPB_SKOutgoingRatchet@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_216494780;
  *(_OWORD *)(a2 + v4) = xmmword_216494780;
  uint64_t v5 = a2 + a1[7];
  uint64_t v6 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v9)((void *)(v6 - 8), v5, 1, 1, v6);
  uint64_t v7 = a2 + a1[8];
  return v9(v7, 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_SKOutgoingRatchet()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance MPPB_SKPaddedStatus@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance MPPB_SKPaddedStatus(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_SKOutgoingRatchet()
{
  return MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKOutgoingRatchet@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_SKOutgoingRatchet._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_SKOutgoingRatchet(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MPPB_SKPaddedStatus()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MPPB_SKPaddedStatus()
{
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in MPPB_SKOutgoingRatchet()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
}

uint64_t type metadata accessor for MPPB_SKOutgoingRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_SKOutgoingRatchet);
}

uint64_t base witness table accessor for Message in MPPB_SKOutgoingRatchet()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
}

uint64_t lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in MPPB_SKOutgoingRatchet()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_SKOutgoingRatchet()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
}

uint64_t base witness table accessor for Equatable in MPPB_SKIncomingRatchet()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
}

uint64_t type metadata accessor for MPPB_SKIncomingRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_SKIncomingRatchet);
}

uint64_t base witness table accessor for Message in MPPB_SKIncomingRatchet()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
}

uint64_t base witness table accessor for Hashable in MPPB_SKIncomingRatchet()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_SKIncomingRatchet()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
}

uint64_t base witness table accessor for Equatable in MPPB_RatchetState()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
}

uint64_t base witness table accessor for Message in MPPB_RatchetState()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
}

uint64_t base witness table accessor for Hashable in MPPB_RatchetState()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
}

uint64_t base witness table accessor for Equatable in MPPB_KeyAndIndex()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
}

uint64_t base witness table accessor for Message in MPPB_KeyAndIndex()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
}

uint64_t base witness table accessor for Hashable in MPPB_KeyAndIndex()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_KeyAndIndex()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, (void (*)(uint64_t))type metadata accessor for MPPB_KeyAndIndex);
}

uint64_t base witness table accessor for Equatable in MPPB_SKPaddedStatus()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
}

uint64_t type metadata accessor for MPPB_SKPaddedStatus(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_SKPaddedStatus);
}

uint64_t base witness table accessor for Message in MPPB_SKPaddedStatus()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
}

uint64_t base witness table accessor for Hashable in MPPB_SKPaddedStatus()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_SKPaddedStatus()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_RatchetState()
{
  return lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, (void (*)(uint64_t))type metadata accessor for MPPB_RatchetState);
}

uint64_t outlined init with take of MPPB_KeyAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MPPB_KeyAndIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v59 = a1;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16)) {
    goto LABEL_59;
  }
  if (!v11 || v59 == a2)
  {
    char v45 = 1;
    return v45 & 1;
  }
  uint64_t v55 = 0;
  uint64_t v56 = a2;
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v57 = *(void *)(v8 + 72);
  uint64_t v58 = v4;
  uint64_t v13 = v11 - 1;
  while (1)
  {
    outlined init with copy of MPPB_KeyAndIndex(v59 + v12, (uint64_t)v10);
    outlined init with copy of MPPB_KeyAndIndex(a2 + v12, (uint64_t)v7);
    uint64_t v14 = *(int *)(v4 + 20);
    uint64_t v16 = *(void *)&v10[v14];
    unint64_t v15 = *(void *)&v10[v14 + 8];
    uint64_t v17 = (uint64_t *)&v7[v14];
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    if (v15 >> 60 == 15)
    {
      if (v19 >> 60 != 15) {
        break;
      }
      goto LABEL_42;
    }
    if (v19 >> 60 == 15) {
      break;
    }
    uint64_t v20 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v16), v16))
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
        }
        uint64_t v20 = HIDWORD(v16) - (int)v16;
LABEL_14:
        outlined copy of Data?(v16, v15);
        outlined copy of Data._Representation(v16, v15);
        break;
      case 2uLL:
        uint64_t v22 = *(void *)(v16 + 16);
        uint64_t v21 = *(void *)(v16 + 24);
        uint64_t v20 = v21 - v22;
        if (!__OFSUB__(v21, v22)) {
          goto LABEL_14;
        }
        goto LABEL_62;
      case 3uLL:
        break;
      default:
        uint64_t v20 = BYTE6(v15);
        break;
    }
    switch(v19 >> 62)
    {
      case 1uLL:
        LODWORD(v23) = HIDWORD(v18) - v18;
        if (__OFSUB__(HIDWORD(v18), v18)) {
          goto LABEL_63;
        }
        uint64_t v23 = (int)v23;
LABEL_20:
        if (v20 != v23)
        {
LABEL_56:
          outlined consume of Data?(v16, v15);
          uint64_t v48 = v16;
          unint64_t v49 = v15;
          goto LABEL_57;
        }
        if (v20 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              uint64_t v54 = (v16 >> 32) - (int)v16;
              if (v16 >> 32 < (int)v16) {
                goto LABEL_65;
              }
              outlined copy of Data?(v16, v15);
              outlined copy of Data?(v18, v19);
              uint64_t v27 = __DataStorage._bytes.getter();
              if (v27)
              {
                uint64_t v53 = v27;
                uint64_t v28 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v16, v28)) {
                  goto LABEL_67;
                }
                uint64_t v29 = v53 + (int)v16 - v28;
              }
              else
              {
                uint64_t v29 = 0;
              }
              __DataStorage._length.getter();
              uint64_t v38 = v29;
              uint64_t v39 = v55;
              closure #1 in static Data.== infix(_:_:)(v38, v18, v19, (char *)__s1);
              uint64_t v55 = v39;
              outlined consume of Data?(v16, v15);
              goto LABEL_40;
            case 2uLL:
              uint64_t v30 = *(void *)(v16 + 16);
              uint64_t v53 = *(void *)(v16 + 24);
              uint64_t v54 = v30;
              outlined copy of Data?(v18, v19);
              swift_retain();
              swift_retain();
              uint64_t v31 = __DataStorage._bytes.getter();
              if (v31)
              {
                uint64_t v32 = v31;
                uint64_t v33 = __DataStorage._offset.getter();
                uint64_t v34 = v54;
                if (__OFSUB__(v54, v33)) {
                  goto LABEL_68;
                }
                uint64_t v52 = v32 + v54 - v33;
              }
              else
              {
                uint64_t v52 = 0;
                uint64_t v34 = v54;
              }
              if (__OFSUB__(v53, v34)) {
                goto LABEL_66;
              }
              __DataStorage._length.getter();
              uint64_t v37 = v55;
              closure #1 in static Data.== infix(_:_:)(v52, v18, v19, (char *)__s1);
              uint64_t v55 = v37;
              swift_release();
              swift_release();
LABEL_40:
              outlined consume of Data?(v18, v19);
              outlined consume of Data?(v16, v15);
              outlined consume of Data?(v16, v15);
              char v36 = __s1[0];
LABEL_41:
              a2 = v56;
              if (v36) {
                goto LABEL_42;
              }
              goto LABEL_58;
            case 3uLL:
              memset(__s1, 0, 14);
              outlined copy of Data._Representation(v18, v19);
              goto LABEL_34;
            default:
              __s1[0] = v16;
              LOWORD(__s1[1]) = v15;
              BYTE2(__s1[1]) = BYTE2(v15);
              BYTE3(__s1[1]) = BYTE3(v15);
              BYTE4(__s1[1]) = BYTE4(v15);
              BYTE5(__s1[1]) = BYTE5(v15);
              outlined copy of Data._Representation(v18, v19);
LABEL_34:
              uint64_t v35 = v55;
              closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v18, v19, &v60);
              uint64_t v55 = v35;
              outlined consume of Data?(v18, v19);
              outlined consume of Data?(v16, v15);
              outlined consume of Data?(v16, v15);
              char v36 = v60;
              goto LABEL_41;
          }
        }
LABEL_25:
        outlined consume of Data?(v16, v15);
        outlined consume of Data?(v16, v15);
        a2 = v56;
        break;
      case 2uLL:
        uint64_t v25 = *(void *)(v18 + 16);
        uint64_t v24 = *(void *)(v18 + 24);
        BOOL v26 = __OFSUB__(v24, v25);
        uint64_t v23 = v24 - v25;
        if (!v26) {
          goto LABEL_20;
        }
        goto LABEL_64;
      case 3uLL:
        if (!v20) {
          goto LABEL_25;
        }
        goto LABEL_56;
      default:
        uint64_t v23 = BYTE6(v19);
        goto LABEL_20;
    }
LABEL_42:
    uint64_t v4 = v58;
    uint64_t v40 = *(int *)(v58 + 24);
    uint64_t v41 = &v10[v40];
    char v42 = v10[v40 + 8];
    uint64_t v43 = &v7[v40];
    int v44 = v7[v40 + 8];
    if (v42)
    {
      if (!v44) {
        goto LABEL_58;
      }
    }
    else
    {
      if (*(void *)v41 != *(void *)v43) {
        LOBYTE(v44) = 1;
      }
      if (v44) {
        goto LABEL_58;
      }
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v7);
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v10);
    BOOL v47 = v13-- != 0;
    if (v45)
    {
      v12 += v57;
      if (v47) {
        continue;
      }
    }
    return v45 & 1;
  }
  outlined copy of Data?(v16, v15);
  outlined copy of Data?(v18, v19);
  outlined consume of Data?(v16, v15);
  uint64_t v48 = v18;
  unint64_t v49 = v19;
LABEL_57:
  outlined consume of Data?(v48, v49);
LABEL_58:
  outlined destroy of MPPB_KeyAndIndex((uint64_t)v7);
  outlined destroy of MPPB_KeyAndIndex((uint64_t)v10);
LABEL_59:
  char v45 = 0;
  return v45 & 1;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MPPB_KeyAndIndex>, type metadata accessor for MPPB_KeyAndIndex);
  uint64_t *v3 = result;
  return result;
}

uint64_t outlined init with copy of MPPB_KeyAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MPPB_KeyAndIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Message(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Message>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static MPPB_SKOutgoingRatchet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v68 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v67 = (char *)&v67 - v7;
  uint64_t v8 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v76 = *(void *)(v8 - 8);
  uint64_t v77 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v72 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MPPB_KeyAndIndex?, MPPB_KeyAndIndex?));
  uint64_t v10 = MEMORY[0x270FA5388](v78);
  unint64_t v75 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v67 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v71 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v73 = (uint64_t)&v67 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v74 = (char *)&v67 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v67 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  BOOL v26 = (char *)&v67 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v67 - v27;
  uint64_t v29 = (int *)type metadata accessor for MPPB_SKOutgoingRatchet(0);
  uint64_t v30 = v29[5];
  uint64_t v79 = a1;
  uint64_t v80 = a2;
  uint64_t v32 = *(void *)(a1 + v30);
  unint64_t v31 = *(void *)(a1 + v30 + 8);
  uint64_t v33 = (uint64_t *)(a2 + v30);
  uint64_t v35 = *v33;
  unint64_t v34 = v33[1];
  uint64_t v70 = v4;
  if (v31 >> 60 == 15)
  {
    if (v34 >> 60 == 15) {
      goto LABEL_7;
    }
LABEL_5:
    outlined copy of Data?(v32, v31);
    outlined copy of Data?(v35, v34);
    outlined consume of Data?(v32, v31);
    uint64_t v36 = v35;
    unint64_t v37 = v34;
LABEL_12:
    outlined consume of Data?(v36, v37);
    goto LABEL_13;
  }
  if (v34 >> 60 == 15) {
    goto LABEL_5;
  }
  outlined copy of Data?(v32, v31);
  outlined copy of Data?(v35, v34);
  char v38 = specialized static Data.== infix(_:_:)(v32, v31, v35, v34);
  outlined consume of Data?(v35, v34);
  outlined consume of Data?(v32, v31);
  if ((v38 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v39 = v29[6];
  uint64_t v40 = v79 + v39;
  uint64_t v41 = *(void *)(v79 + v39);
  unint64_t v42 = *(void *)(v79 + v39 + 8);
  uint64_t v43 = (uint64_t *)(v80 + v39);
  uint64_t v44 = *v43;
  unint64_t v45 = v43[1];
  if (v42 >> 60 == 15)
  {
    if (v45 >> 60 == 15) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  if (v45 >> 60 == 15)
  {
LABEL_11:
    outlined copy of Data?(*(void *)v40, *(void *)(v40 + 8));
    outlined copy of Data?(v44, v45);
    outlined consume of Data?(v41, v42);
    uint64_t v36 = v44;
    unint64_t v37 = v45;
    goto LABEL_12;
  }
  outlined copy of Data?(*(void *)v40, *(void *)(v40 + 8));
  outlined copy of Data?(v44, v45);
  char v48 = specialized static Data.== infix(_:_:)(v41, v42, v44, v45);
  outlined consume of Data?(v44, v45);
  outlined consume of Data?(v41, v42);
  if ((v48 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_16:
  outlined init with copy of MPPB_KeyAndIndex?(v79 + v29[7], (uint64_t)v28);
  outlined init with copy of MPPB_KeyAndIndex?(v80 + v29[7], (uint64_t)v26);
  uint64_t v49 = (uint64_t)&v13[*(int *)(v78 + 48)];
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v28, (uint64_t)v13);
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v26, v49);
  uint64_t v50 = v77;
  uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  if (v51((uint64_t)v13, 1, v77) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v26, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?((uint64_t)v28, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    if (v51(v49, 1, v50) != 1)
    {
LABEL_28:
      outlined destroy of TetraSessionStates?((uint64_t)v13, &demangling cache variable for type metadata for (MPPB_KeyAndIndex?, MPPB_KeyAndIndex?));
      goto LABEL_13;
    }
    outlined destroy of TetraSessionStates?((uint64_t)v13, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
LABEL_22:
    uint64_t v28 = v74;
    outlined init with copy of MPPB_KeyAndIndex?(v79 + v29[8], (uint64_t)v74);
    uint64_t v56 = v80 + v29[8];
    uint64_t v57 = v73;
    outlined init with copy of MPPB_KeyAndIndex?(v56, v73);
    uint64_t v13 = v75;
    uint64_t v58 = (uint64_t)&v75[*(int *)(v78 + 48)];
    outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v28, (uint64_t)v75);
    outlined init with copy of MPPB_KeyAndIndex?(v57, v58);
    if (v51((uint64_t)v13, 1, v50) == 1)
    {
      outlined destroy of TetraSessionStates?(v57, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      outlined destroy of TetraSessionStates?((uint64_t)v28, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      if (v51(v58, 1, v50) == 1)
      {
        outlined destroy of TetraSessionStates?((uint64_t)v13, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
LABEL_30:
        uint64_t v62 = v69;
        uint64_t v61 = v70;
        unint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
        char v64 = v67;
        v63(v67, v79, v70);
        uint64_t v65 = v68;
        v63(v68, v80, v61);
        lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v66 = *(void (**)(char *, uint64_t))(v62 + 8);
        v66(v65, v61);
        v66(v64, v61);
        return v46 & 1;
      }
      goto LABEL_28;
    }
    uint64_t v23 = v71;
    outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v13, (uint64_t)v71);
    if (v51(v58, 1, v50) == 1)
    {
      uint64_t v52 = v57;
      goto LABEL_27;
    }
    uint64_t v59 = v72;
    outlined init with take of MPPB_KeyAndIndex(v58, v72);
    char v60 = specialized static MPPB_KeyAndIndex.== infix(_:_:)((uint64_t)v23, v59);
    outlined destroy of MPPB_KeyAndIndex(v59);
    outlined destroy of TetraSessionStates?(v57, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?((uint64_t)v28, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v23);
    outlined destroy of TetraSessionStates?((uint64_t)v13, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    if (v60) {
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v13, (uint64_t)v23);
  if (v51(v49, 1, v50) == 1)
  {
    uint64_t v52 = (uint64_t)v26;
LABEL_27:
    outlined destroy of TetraSessionStates?(v52, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?((uint64_t)v28, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v23);
    goto LABEL_28;
  }
  uint64_t v53 = v49;
  uint64_t v54 = v72;
  outlined init with take of MPPB_KeyAndIndex(v53, v72);
  char v55 = specialized static MPPB_KeyAndIndex.== infix(_:_:)((uint64_t)v23, v54);
  outlined destroy of MPPB_KeyAndIndex(v54);
  outlined destroy of TetraSessionStates?((uint64_t)v26, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of TetraSessionStates?((uint64_t)v28, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of MPPB_KeyAndIndex((uint64_t)v23);
  outlined destroy of TetraSessionStates?((uint64_t)v13, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if (v55) {
    goto LABEL_22;
  }
LABEL_13:
  char v46 = 0;
  return v46 & 1;
}

uint64_t specialized static MPPB_SKIncomingRatchet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = (int *)type metadata accessor for MPPB_SKIncomingRatchet(0);
  uint64_t v11 = v10[6];
  uint64_t v12 = *(uint64_t *)((char *)a1 + v11);
  unint64_t v13 = *(uint64_t *)((char *)a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)((char *)a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  uint64_t v29 = v4;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 != 15) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v16 >> 60 == 15) {
      goto LABEL_5;
    }
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    char v17 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
    outlined consume of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    if ((v17 & 1) == 0) {
      goto LABEL_14;
    }
  }
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v18 = v10[7];
  uint64_t v12 = *(uint64_t *)((char *)a1 + v18);
  unint64_t v13 = *(uint64_t *)((char *)a1 + v18 + 8);
  uint64_t v19 = (uint64_t *)((char *)a2 + v18);
  uint64_t v15 = *v19;
  unint64_t v16 = v19[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15) {
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
LABEL_14:
    char v25 = 0;
    return v25 & 1;
  }
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  char v20 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v20 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v21 = (char *)a1 + v10[5];
  uint64_t v23 = v28;
  uint64_t v22 = v29;
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v24(v9, v21, v29);
  v24(v7, (char *)a2 + v10[5], v22);
  lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  BOOL v26 = *(void (**)(char *, uint64_t))(v23 + 8);
  v26(v7, v22);
  v26(v9, v22);
  return v25 & 1;
}

uint64_t specialized static MPPB_SKPaddedStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v32 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = type metadata accessor for MPPB_SKPaddedStatus(0);
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  unint64_t v13 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  if (v12 >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      outlined copy of Data?(v11, v12);
      outlined copy of Data?(v14, v15);
      char v18 = specialized static Data.== infix(_:_:)(v11, v12, v14, v15);
      outlined consume of Data?(v14, v15);
      outlined consume of Data?(v11, v12);
      if ((v18 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
LABEL_5:
    outlined copy of Data?(v11, v12);
    outlined copy of Data?(v14, v15);
    outlined consume of Data?(v11, v12);
    uint64_t v16 = v14;
    unint64_t v17 = v15;
LABEL_12:
    outlined consume of Data?(v16, v17);
    goto LABEL_13;
  }
  if (v15 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v19 = *(int *)(v9 + 24);
  uint64_t v20 = *(void *)(a1 + v19);
  unint64_t v21 = *(void *)(a1 + v19 + 8);
  uint64_t v22 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  if (v21 >> 60 == 15)
  {
    if (v24 >> 60 == 15) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  if (v24 >> 60 == 15)
  {
LABEL_11:
    outlined copy of Data?(v20, v21);
    outlined copy of Data?(v23, v24);
    outlined consume of Data?(v20, v21);
    uint64_t v16 = v23;
    unint64_t v17 = v24;
    goto LABEL_12;
  }
  outlined copy of Data?(v20, v21);
  outlined copy of Data?(v23, v24);
  char v27 = specialized static Data.== infix(_:_:)(v20, v21, v23, v24);
  outlined consume of Data?(v23, v24);
  outlined consume of Data?(v20, v21);
  if (v27)
  {
LABEL_16:
    uint64_t v28 = v33;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    v29(v8, a1, v4);
    uint64_t v30 = v32;
    v29(v32, a2, v4);
    lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v31 = *(void (**)(char *, uint64_t))(v28 + 8);
    v31(v30, v4);
    v31(v8, v4);
    return v25 & 1;
  }
LABEL_13:
  char v25 = 0;
  return v25 & 1;
}

uint64_t specialized static MPPB_RatchetState.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v44 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v43 = (char *)&v42 - v7;
  uint64_t v8 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v47 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MPPB_KeyAndIndex?, MPPB_KeyAndIndex?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  char v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  unint64_t v21 = (char *)&v42 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v42 - v22;
  uint64_t v24 = type metadata accessor for MPPB_RatchetState(0);
  uint64_t v25 = *(int *)(v24 + 24);
  char v48 = a1;
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)a1 + v25, (uint64_t)v23);
  uint64_t v26 = *(int *)(v24 + 24);
  uint64_t v49 = a2;
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)a2 + v26, (uint64_t)v21);
  uint64_t v27 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v23, (uint64_t)v14);
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v21, v27);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v28((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v21, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?((uint64_t)v23, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    if (v28(v27, 1, v8) == 1)
    {
      outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v14, (uint64_t)v18);
  if (v28(v27, 1, v8) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v21, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?((uint64_t)v23, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v18);
LABEL_6:
    outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for (MPPB_KeyAndIndex?, MPPB_KeyAndIndex?));
LABEL_10:
    char v39 = 0;
    return v39 & 1;
  }
  uint64_t v29 = v47;
  outlined init with take of MPPB_KeyAndIndex(v27, v47);
  char v30 = specialized static MPPB_KeyAndIndex.== infix(_:_:)((uint64_t)v18, v29);
  outlined destroy of MPPB_KeyAndIndex(v29);
  outlined destroy of TetraSessionStates?((uint64_t)v21, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of TetraSessionStates?((uint64_t)v23, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of MPPB_KeyAndIndex((uint64_t)v18);
  outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if ((v30 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  unint64_t v31 = v48;
  uint64_t v32 = v49;
  if ((specialized static Array<A>.== infix(_:_:)(*v48, *v49) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v34 = v45;
  uint64_t v33 = v46;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  uint64_t v36 = v43;
  v35(v43, (char *)v31 + *(int *)(v24 + 20), v46);
  unint64_t v37 = (char *)v32 + *(int *)(v24 + 20);
  char v38 = v44;
  v35(v44, v37, v33);
  lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t specialized static MPPB_KeyAndIndex.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v27[-v8];
  uint64_t v10 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      outlined copy of Data?(v12, v13);
      outlined copy of Data?(v15, v16);
      int v28 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
      outlined consume of Data?(v15, v16);
      outlined consume of Data?(v12, v13);
      if ((v28 & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_9:
  uint64_t v19 = *(int *)(v10 + 24);
  uint64_t v20 = (void *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  uint64_t v22 = (void *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if (v21)
  {
    if (v23)
    {
LABEL_15:
      uint64_t v24 = v29;
      uint64_t v25 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v29 + 16);
      v25(v9, a1, v4);
      v25(v7, a2, v4);
      lazy protocol witness table accessor for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v24 + 8);
      v26(v7, v4);
      v26(v9, v4);
      return v17 & 1;
    }
  }
  else
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
  }
LABEL_6:
  char v17 = 0;
  return v17 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_SKPaddedStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }
    else
    {
      uint64_t v18 = *(void *)v16;
      outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
    }
  }
  return a1;
}

uint64_t destroy for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = *v8;
    return outlined consume of Data._Representation(v10, v9);
  }
  return result;
}

uint64_t initializeWithCopy for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    outlined copy of Data._Representation(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }
  return a1;
}

uint64_t assignWithCopy for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t *)(a1 + v15);
  unint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      outlined copy of Data._Representation(v20, v18);
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      *uint64_t v16 = v20;
      v16[1] = v18;
      outlined consume of Data._Representation(v21, v22);
      return a1;
    }
    outlined destroy of Data((uint64_t)v16);
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    return a1;
  }
  uint64_t v19 = *v17;
  outlined copy of Data._Representation(v19, v18);
  *uint64_t v16 = v19;
  v16[1] = v18;
  return a1;
}

uint64_t initializeWithTake for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  uint64_t v13 = *(int *)(a3 + 24);
  unint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v14;
      *unint64_t v14 = *v15;
      v14[1] = v17;
      outlined consume of Data._Representation(v18, v16);
      return a1;
    }
    outlined destroy of Data((uint64_t)v14);
  }
  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm_0);
}

uint64_t storeEnumTagSinglePayload for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm_0);
}

uint64_t type metadata completion function for MPPB_SKPaddedStatus()
{
  return type metadata completion function for MPPB_KeyAndIndex();
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_SKIncomingRatchet(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    unint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v17 = *(void *)v15;
      outlined copy of Data._Representation(*(void *)v15, *((void *)v15 + 1));
      *(void *)unint64_t v14 = v17;
      *((void *)v14 + 1) = v16;
    }
    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)v7 + v18;
    uint64_t v20 = (char *)a2 + v18;
    unint64_t v21 = *((void *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v22 = *(void *)v20;
      outlined copy of Data._Representation(*(void *)v20, *((void *)v20 + 1));
      *(void *)uint64_t v19 = v22;
      *((void *)v19 + 1) = v21;
    }
  }
  return v7;
}

uint64_t destroy for MPPB_SKIncomingRatchet(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v7 = (uint64_t *)(a1 + a2[6]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v7, v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15)
  {
    uint64_t v11 = *v9;
    return outlined consume of Data._Representation(v11, v10);
  }
  return result;
}

void *initializeWithCopy for MPPB_SKIncomingRatchet(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  unint64_t v14 = *((void *)v13 + 1);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v15 = *(void *)v13;
    outlined copy of Data._Representation(*(void *)v13, *((void *)v13 + 1));
    *(void *)uint64_t v12 = v15;
    *((void *)v12 + 1) = v14;
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  unint64_t v19 = *((void *)v18 + 1);
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v20 = *(void *)v18;
    outlined copy of Data._Representation(*(void *)v18, *((void *)v18 + 1));
    *(void *)uint64_t v17 = v20;
    *((void *)v17 + 1) = v19;
  }
  return a1;
}

void *assignWithCopy for MPPB_SKIncomingRatchet(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (*(void *)((char *)a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      outlined copy of Data._Representation(v14, v13);
      uint64_t *v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v11);
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  outlined copy of Data._Representation(v15, v13);
  uint64_t v16 = *v11;
  unint64_t v17 = v11[1];
  uint64_t *v11 = v15;
  v11[1] = v13;
  outlined consume of Data._Representation(v16, v17);
LABEL_8:
  uint64_t v18 = a3[7];
  unint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  unint64_t v21 = *(void *)((char *)a2 + v18 + 8);
  if (*(void *)((char *)a1 + v18 + 8) >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v23 = *v20;
      outlined copy of Data._Representation(v23, v21);
      uint64_t v24 = *v19;
      unint64_t v25 = v19[1];
      *unint64_t v19 = v23;
      v19[1] = v21;
      outlined consume of Data._Representation(v24, v25);
      return a1;
    }
    outlined destroy of Data((uint64_t)v19);
    goto LABEL_13;
  }
  if (v21 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    return a1;
  }
  uint64_t v22 = *v20;
  outlined copy of Data._Representation(v22, v21);
  *unint64_t v19 = v22;
  v19[1] = v21;
  return a1;
}

void *initializeWithTake for MPPB_SKIncomingRatchet(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

void *assignWithTake for MPPB_SKIncomingRatchet(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  unint64_t v13 = *(void *)((char *)a1 + v10 + 8);
  if (v13 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v14 = *((void *)v12 + 1);
  if (v14 >> 60 == 15)
  {
    outlined destroy of Data(v11);
LABEL_4:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)v11;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = v14;
  outlined consume of Data._Representation(v15, v13);
LABEL_6:
  uint64_t v16 = a3[7];
  unint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  unint64_t v19 = *(void *)((char *)a1 + v16 + 8);
  if (v19 >> 60 != 15)
  {
    unint64_t v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v17;
      *unint64_t v17 = *v18;
      v17[1] = v20;
      outlined consume of Data._Representation(v21, v19);
      return a1;
    }
    outlined destroy of Data((uint64_t)v17);
  }
  *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_SKIncomingRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21642BEB4);
}

uint64_t sub_21642BEB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MPPB_SKIncomingRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21642BF78);
}

void *sub_21642BF78(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for MPPB_SKIncomingRatchet()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_SKOutgoingRatchet(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    unint64_t v12 = *((void *)v11 + 1);
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    }
    else
    {
      uint64_t v14 = *(void *)v11;
      outlined copy of Data._Representation(*(void *)v11, *((void *)v11 + 1));
      *(void *)uint64_t v10 = v14;
      *((void *)v10 + 1) = v12;
    }
    uint64_t v15 = a3[6];
    uint64_t v16 = (char *)a1 + v15;
    unint64_t v17 = (char *)a2 + v15;
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }
    else
    {
      uint64_t v19 = *(void *)v17;
      outlined copy of Data._Representation(*(void *)v17, *((void *)v17 + 1));
      *(void *)uint64_t v16 = v19;
      *((void *)v16 + 1) = v18;
    }
    uint64_t v20 = a3[7];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for MPPB_KeyAndIndex(0);
    uint64_t v49 = *(void *)(v23 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    if (v24(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v47 = v8;
      uint64_t v48 = v7;
      v8((uint64_t *)v21, (uint64_t *)v22, v7);
      uint64_t v26 = *(int *)(v23 + 20);
      uint64_t v27 = &v21[v26];
      int v28 = (uint64_t *)&v22[v26];
      unint64_t v29 = v28[1];
      if (v29 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      }
      else
      {
        uint64_t v46 = *v28;
        outlined copy of Data._Representation(*v28, v29);
        *(void *)uint64_t v27 = v46;
        *((void *)v27 + 1) = v29;
      }
      uint64_t v30 = *(int *)(v23 + 24);
      unint64_t v31 = &v21[v30];
      uint64_t v32 = &v22[v30];
      *(void *)unint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v21, 0, 1, v23);
      uint64_t v8 = v47;
      uint64_t v7 = v48;
    }
    uint64_t v33 = a3[8];
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    if (v24(v35, 1, v23))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v34, (uint64_t *)v35, v7);
      uint64_t v37 = *(int *)(v23 + 20);
      char v38 = &v34[v37];
      char v39 = &v35[v37];
      unint64_t v40 = *((void *)v39 + 1);
      if (v40 >> 60 == 15)
      {
        *(_OWORD *)char v38 = *(_OWORD *)v39;
      }
      else
      {
        uint64_t v41 = *(void *)v39;
        outlined copy of Data._Representation(*(void *)v39, *((void *)v39 + 1));
        *(void *)char v38 = v41;
        *((void *)v38 + 1) = v40;
      }
      uint64_t v42 = *(int *)(v23 + 24);
      uint64_t v43 = &v34[v42];
      uint64_t v44 = &v35[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v34, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for MPPB_SKOutgoingRatchet(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + a2[5]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    outlined consume of Data._Representation(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[6]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    outlined consume of Data._Representation(*v8, v9);
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = type metadata accessor for MPPB_KeyAndIndex(0);
  unint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
  if (!v12(v10, 1, v11))
  {
    v5(v10, v4);
    uint64_t v13 = (uint64_t *)(v10 + *(int *)(v11 + 20));
    unint64_t v14 = v13[1];
    if (v14 >> 60 != 15) {
      outlined consume of Data._Representation(*v13, v14);
    }
  }
  uint64_t v15 = a1 + a2[8];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v15, 1, v11);
  if (!result)
  {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v5)(v15, v4);
    unint64_t v17 = (uint64_t *)(v15 + *(int *)(v11 + 20));
    unint64_t v18 = v17[1];
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      return outlined consume of Data._Representation(v19, v18);
    }
  }
  return result;
}

uint64_t initializeWithCopy for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t *)(a2 + v8);
  unint64_t v11 = v10[1];
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v12 = *v10;
    outlined copy of Data._Representation(*v10, v10[1]);
    *(void *)uint64_t v9 = v12;
    *(void *)(v9 + 8) = v11;
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    outlined copy of Data._Representation(*v15, v15[1]);
    *(void *)uint64_t v14 = v17;
    *(void *)(v14 + 8) = v16;
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v47 = *(void *)(v21 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  if (v22(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v45 = v7;
    uint64_t v46 = v6;
    v7((uint64_t)v19, (uint64_t)v20, v6);
    uint64_t v24 = *(int *)(v21 + 20);
    uint64_t v25 = &v19[v24];
    uint64_t v26 = (uint64_t *)&v20[v24];
    unint64_t v27 = v26[1];
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v44 = *v26;
      outlined copy of Data._Representation(*v26, v27);
      *(void *)uint64_t v25 = v44;
      *((void *)v25 + 1) = v27;
    }
    uint64_t v28 = *(int *)(v21 + 24);
    unint64_t v29 = &v19[v28];
    uint64_t v30 = &v20[v28];
    *(void *)unint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v19, 0, 1, v21);
    unint64_t v7 = v45;
    uint64_t v6 = v46;
  }
  uint64_t v31 = a3[8];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  if (v22(v33, 1, v21))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v32, (uint64_t)v33, v6);
    uint64_t v35 = *(int *)(v21 + 20);
    uint64_t v36 = &v32[v35];
    uint64_t v37 = &v33[v35];
    unint64_t v38 = *((void *)v37 + 1);
    if (v38 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    }
    else
    {
      uint64_t v39 = *(void *)v37;
      outlined copy of Data._Representation(*(void *)v37, *((void *)v37 + 1));
      *(void *)uint64_t v36 = v39;
      *((void *)v36 + 1) = v38;
    }
    uint64_t v40 = *(int *)(v21 + 24);
    uint64_t v41 = &v32[v40];
    uint64_t v42 = &v33[v40];
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v32, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithCopy for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v88 = *(void *)(v6 - 8);
  uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 24);
  v86(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      outlined copy of Data._Representation(*v9, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  outlined copy of Data._Representation(*v9, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  unint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      outlined copy of Data._Representation(*v17, v18);
      *unint64_t v16 = v19;
      v16[1] = v18;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v16);
LABEL_13:
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }
  uint64_t v20 = *v17;
  outlined copy of Data._Representation(*v17, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  *unint64_t v16 = v20;
  v16[1] = v18;
  outlined consume of Data._Representation(v21, v22);
LABEL_15:
  uint64_t v23 = a3[7];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v87 = *(void *)(v26 - 8);
  unint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 48);
  int v28 = v27(v24, 1, v26);
  int v29 = v27(v25, 1, v26);
  if (!v28)
  {
    if (v29)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v24);
      goto LABEL_21;
    }
    uint64_t v85 = v6;
    v86((uint64_t)v24, (uint64_t)v25, v6);
    uint64_t v35 = *(int *)(v26 + 20);
    uint64_t v36 = (uint64_t *)&v24[v35];
    uint64_t v37 = (uint64_t *)&v25[v35];
    unint64_t v38 = *(void *)&v25[v35 + 8];
    if (*(void *)&v24[v35 + 8] >> 60 == 15)
    {
      if (v38 >> 60 != 15)
      {
        uint64_t v39 = *v37;
        uint64_t v81 = *v37;
        uint64_t v40 = *(void *)&v25[v35 + 8];
        outlined copy of Data._Representation(v39, v38);
        *uint64_t v36 = v81;
        v36[1] = v40;
LABEL_31:
        uint64_t v49 = *(int *)(v26 + 24);
        uint64_t v50 = &v24[v49];
        uint64_t v51 = &v25[v49];
        uint64_t v52 = *(void *)v51;
        v50[8] = v51[8];
        *(void *)uint64_t v50 = v52;
        uint64_t v6 = v85;
        goto LABEL_32;
      }
    }
    else
    {
      if (v38 >> 60 != 15)
      {
        uint64_t v45 = *v37;
        uint64_t v83 = *v37;
        uint64_t v46 = *(void *)&v25[v35 + 8];
        outlined copy of Data._Representation(v45, v38);
        uint64_t v47 = *v36;
        unint64_t v48 = v36[1];
        *uint64_t v36 = v83;
        v36[1] = v46;
        outlined consume of Data._Representation(v47, v48);
        goto LABEL_31;
      }
      outlined destroy of Data((uint64_t)v36);
    }
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    goto LABEL_31;
  }
  if (v29)
  {
LABEL_21:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v24, v25, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_32;
  }
  uint64_t v84 = v6;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v24, v25, v6);
  uint64_t v30 = *(int *)(v26 + 20);
  uint64_t v31 = &v24[v30];
  uint64_t v32 = (uint64_t *)&v25[v30];
  unint64_t v33 = v32[1];
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v82 = *v32;
    outlined copy of Data._Representation(*v32, v33);
    *(void *)uint64_t v31 = v82;
    *((void *)v31 + 1) = v33;
  }
  uint64_t v6 = v84;
  uint64_t v41 = *(int *)(v26 + 24);
  uint64_t v42 = &v24[v41];
  uint64_t v43 = &v25[v41];
  uint64_t v44 = *(void *)v43;
  v42[8] = v43[8];
  *(void *)uint64_t v42 = v44;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v24, 0, 1, v26);
LABEL_32:
  uint64_t v53 = a3[8];
  uint64_t v54 = (char *)(a1 + v53);
  char v55 = (char *)(a2 + v53);
  int v56 = v27((char *)(a1 + v53), 1, v26);
  int v57 = v27(v55, 1, v26);
  if (!v56)
  {
    if (v57)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v54);
      goto LABEL_38;
    }
    v86((uint64_t)v54, (uint64_t)v55, v6);
    uint64_t v63 = *(int *)(v26 + 20);
    char v64 = (uint64_t *)&v54[v63];
    uint64_t v65 = (uint64_t *)&v55[v63];
    unint64_t v66 = *(void *)&v55[v63 + 8];
    if (*(void *)&v54[v63 + 8] >> 60 == 15)
    {
      if (v66 >> 60 != 15)
      {
        uint64_t v67 = *v65;
        outlined copy of Data._Representation(v67, v66);
        uint64_t *v64 = v67;
        v64[1] = v66;
LABEL_48:
        uint64_t v76 = *(int *)(v26 + 24);
        uint64_t v77 = &v54[v76];
        uint64_t v78 = &v55[v76];
        uint64_t v79 = *(void *)v78;
        v77[8] = v78[8];
        *(void *)uint64_t v77 = v79;
        return a1;
      }
    }
    else
    {
      if (v66 >> 60 != 15)
      {
        uint64_t v73 = *v65;
        outlined copy of Data._Representation(v73, v66);
        uint64_t v74 = *v64;
        unint64_t v75 = v64[1];
        uint64_t *v64 = v73;
        v64[1] = v66;
        outlined consume of Data._Representation(v74, v75);
        goto LABEL_48;
      }
      outlined destroy of Data((uint64_t)v64);
    }
    *(_OWORD *)char v64 = *(_OWORD *)v65;
    goto LABEL_48;
  }
  if (v57)
  {
LABEL_38:
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v54, v55, *(void *)(*(void *)(v62 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v54, v55, v6);
  uint64_t v58 = *(int *)(v26 + 20);
  uint64_t v59 = &v54[v58];
  char v60 = &v55[v58];
  unint64_t v61 = *((void *)v60 + 1);
  if (v61 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
  }
  else
  {
    uint64_t v68 = *(void *)v60;
    outlined copy of Data._Representation(*(void *)v60, *((void *)v60 + 1));
    *(void *)uint64_t v59 = v68;
    *((void *)v59 + 1) = v61;
  }
  uint64_t v69 = *(int *)(v26 + 24);
  uint64_t v70 = &v54[v69];
  uint64_t v71 = &v55[v69];
  uint64_t v72 = *(void *)v71;
  v70[8] = v71[8];
  *(void *)uint64_t v70 = v72;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v54, 0, 1, v26);
  return a1;
}

uint64_t initializeWithTake for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[7];
  unint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v26(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    uint64_t v15 = *(int *)(v12 + 24);
    unint64_t v16 = &v10[v15];
    uint64_t v17 = &v11[v15];
    v16[8] = v17[8];
    *(void *)unint64_t v16 = *(void *)v17;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  if (v26(v20, 1, v12))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v19, (uint64_t)v20, v6);
    *(_OWORD *)&v19[*(int *)(v12 + 20)] = *(_OWORD *)&v20[*(int *)(v12 + 20)];
    uint64_t v22 = *(int *)(v12 + 24);
    uint64_t v23 = &v19[v22];
    uint64_t v24 = &v20[v22];
    v23[8] = v24[8];
    *(void *)uint64_t v23 = *(void *)v24;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithTake for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v62 = *(void *)(v6 - 8);
  char v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 40);
  v60(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }
  unint64_t v17 = *(void *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    outlined destroy of Data(v14);
    goto LABEL_9;
  }
  uint64_t v18 = *(void *)v14;
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = v17;
  outlined consume of Data._Representation(v18, v16);
LABEL_11:
  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v61 = *(void *)(v22 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  int v24 = v23(v20, 1, v22);
  int v25 = v23(v21, 1, v22);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v20, v21, v6);
      *(_OWORD *)&v20[*(int *)(v22 + 20)] = *(_OWORD *)&v21[*(int *)(v22 + 20)];
      uint64_t v26 = *(int *)(v22 + 24);
      unint64_t v27 = &v20[v26];
      int v28 = &v21[v26];
      v27[8] = v28[8];
      *(void *)unint64_t v27 = *(void *)v28;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v20, 0, 1, v22);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v25)
  {
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v20);
LABEL_16:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v20, v21, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_17;
  }
  v60((uint64_t)v20, (uint64_t)v21, v6);
  uint64_t v40 = *(int *)(v22 + 20);
  uint64_t v41 = (uint64_t *)&v20[v40];
  uint64_t v42 = (uint64_t *)&v21[v40];
  unint64_t v43 = *(void *)&v20[v40 + 8];
  if (v43 >> 60 == 15)
  {
    long long v44 = *(_OWORD *)v42;
  }
  else
  {
    unint64_t v50 = v42[1];
    if (v50 >> 60 != 15)
    {
      uint64_t v55 = *v41;
      uint64_t *v41 = *v42;
      v41[1] = v50;
      outlined consume of Data._Representation(v55, v43);
      goto LABEL_36;
    }
    uint64_t v59 = v42;
    outlined destroy of Data((uint64_t)v41);
    long long v44 = *(_OWORD *)v59;
  }
  *(_OWORD *)uint64_t v41 = v44;
LABEL_36:
  uint64_t v56 = *(int *)(v22 + 24);
  int v57 = &v20[v56];
  uint64_t v58 = &v21[v56];
  *(void *)int v57 = *(void *)v58;
  v57[8] = v58[8];
LABEL_17:
  uint64_t v30 = a3[8];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  int v33 = v23((char *)(a1 + v30), 1, v22);
  int v34 = v23(v32, 1, v22);
  if (!v33)
  {
    if (v34)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v31);
      goto LABEL_22;
    }
    v60((uint64_t)v31, (uint64_t)v32, v6);
    uint64_t v45 = *(int *)(v22 + 20);
    uint64_t v46 = (uint64_t *)&v31[v45];
    uint64_t v47 = (uint64_t *)&v32[v45];
    unint64_t v48 = *(void *)&v31[v45 + 8];
    if (v48 >> 60 != 15)
    {
      unint64_t v49 = v47[1];
      if (v49 >> 60 != 15)
      {
        uint64_t v51 = *v46;
        *uint64_t v46 = *v47;
        v46[1] = v49;
        outlined consume of Data._Representation(v51, v48);
        goto LABEL_34;
      }
      outlined destroy of Data((uint64_t)v46);
    }
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
LABEL_34:
    uint64_t v52 = *(int *)(v22 + 24);
    uint64_t v53 = &v31[v52];
    uint64_t v54 = &v32[v52];
    *(void *)uint64_t v53 = *(void *)v54;
    v53[8] = v54[8];
    return a1;
  }
  if (v34)
  {
LABEL_22:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v31, v32, v6);
  *(_OWORD *)&v31[*(int *)(v22 + 20)] = *(_OWORD *)&v32[*(int *)(v22 + 20)];
  uint64_t v35 = *(int *)(v22 + 24);
  uint64_t v36 = &v31[v35];
  uint64_t v37 = &v32[v35];
  v36[8] = v37[8];
  *(void *)uint64_t v36 = *(void *)v37;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v31, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21642D6B8);
}

uint64_t sub_21642D6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 11)
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + *(int *)(a3 + 28);
    return v14(v16, a2, v15);
  }
}

uint64_t storeEnumTagSinglePayload for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21642D804);
}

uint64_t sub_21642D804(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 11)
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 28);
    return v13(v15, a2, a2, v14);
  }
  return result;
}

void type metadata completion function for MPPB_SKOutgoingRatchet()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MPPB_KeyAndIndex?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

_DWORD *initializeBufferWithCopyOfBuffer for TetraRatchetOuterMessage(_DWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_DWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v8;
    v4[6] = *((_DWORD *)a2 + 6);
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for P256.KeyAgreement.PublicKey();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[8];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Kyber768.PublicKey();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    unint64_t v23 = v22[1];
    if (v23 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    }
    else
    {
      uint64_t v24 = *v22;
      outlined copy of Data._Representation(*v22, v22[1]);
      *(void *)uint64_t v21 = v24;
      *((void *)v21 + 1) = v23;
    }
    uint64_t v25 = a3[10];
    uint64_t v26 = (char *)v4 + v25;
    unint64_t v27 = (uint64_t *)((char *)a2 + v25);
    unint64_t v28 = v27[1];
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    }
    else
    {
      uint64_t v29 = *v27;
      outlined copy of Data._Representation(*v27, v27[1]);
      *(void *)uint64_t v26 = v29;
      *((void *)v26 + 1) = v28;
    }
    uint64_t v30 = a3[11];
    uint64_t v31 = (uint64_t *)((char *)v4 + v30);
    uint64_t v32 = (uint64_t *)((char *)a2 + v30);
    uint64_t v33 = *v32;
    unint64_t v34 = v32[1];
    outlined copy of Data._Representation(*v32, v34);
    uint64_t *v31 = v33;
    v31[1] = v34;
    uint64_t v35 = a3[12];
    uint64_t v36 = (uint64_t *)((char *)v4 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v38 = *v37;
    unint64_t v39 = v37[1];
    outlined copy of Data._Representation(*v37, v39);
    *uint64_t v36 = v38;
    v36[1] = v39;
  }
  return v4;
}

uint64_t destroy for TetraRatchetOuterMessage(uint64_t a1, int *a2)
{
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[9]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    outlined consume of Data._Representation(*v9, v10);
  }
  uint64_t v11 = (uint64_t *)(a1 + a2[10]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    outlined consume of Data._Representation(*v11, v12);
  }
  outlined consume of Data._Representation(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
  uint64_t v13 = (uint64_t *)(a1 + a2[12]);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  return outlined consume of Data._Representation(v14, v15);
}

uint64_t initializeWithCopy for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = (uint64_t *)(a2 + v18);
  unint64_t v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v22 = *v20;
    outlined copy of Data._Representation(*v20, v20[1]);
    *(void *)uint64_t v19 = v22;
    *(void *)(v19 + 8) = v21;
  }
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = v25[1];
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  }
  else
  {
    uint64_t v27 = *v25;
    outlined copy of Data._Representation(*v25, v25[1]);
    *(void *)uint64_t v24 = v27;
    *(void *)(v24 + 8) = v26;
  }
  uint64_t v28 = a3[11];
  uint64_t v29 = (uint64_t *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  outlined copy of Data._Representation(*v30, v32);
  *uint64_t v29 = v31;
  v29[1] = v32;
  uint64_t v33 = a3[12];
  unint64_t v34 = (uint64_t *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v36 = *v35;
  unint64_t v37 = v35[1];
  outlined copy of Data._Representation(*v35, v37);
  *unint64_t v34 = v36;
  v34[1] = v37;
  return a1;
}

uint64_t assignWithCopy for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  outlined consume of Data._Representation(v8, v9);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = a3[9];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a2 + v23 + 8);
  if (*(void *)(a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v25;
      outlined copy of Data._Representation(v27, v26);
      *uint64_t v24 = v27;
      v24[1] = v26;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v26 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v24);
LABEL_12:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_14;
  }
  uint64_t v28 = *v25;
  outlined copy of Data._Representation(v28, v26);
  uint64_t v29 = *v24;
  unint64_t v30 = v24[1];
  *uint64_t v24 = v28;
  v24[1] = v26;
  outlined consume of Data._Representation(v29, v30);
LABEL_14:
  uint64_t v31 = a3[10];
  unint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  unint64_t v34 = *(void *)(a2 + v31 + 8);
  if (*(void *)(a1 + v31 + 8) >> 60 != 15)
  {
    if (v34 >> 60 != 15)
    {
      uint64_t v36 = *v33;
      outlined copy of Data._Representation(v36, v34);
      uint64_t v37 = *v32;
      unint64_t v38 = v32[1];
      *unint64_t v32 = v36;
      v32[1] = v34;
      outlined consume of Data._Representation(v37, v38);
      goto LABEL_21;
    }
    outlined destroy of Data((uint64_t)v32);
    goto LABEL_19;
  }
  if (v34 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
    goto LABEL_21;
  }
  uint64_t v35 = *v33;
  outlined copy of Data._Representation(v35, v34);
  *unint64_t v32 = v35;
  v32[1] = v34;
LABEL_21:
  uint64_t v39 = a3[11];
  uint64_t v40 = (uint64_t *)(a1 + v39);
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  unint64_t v43 = v41[1];
  outlined copy of Data._Representation(*v41, v43);
  uint64_t v44 = *v40;
  unint64_t v45 = v40[1];
  *uint64_t v40 = v42;
  v40[1] = v43;
  outlined consume of Data._Representation(v44, v45);
  uint64_t v46 = a3[12];
  uint64_t v47 = (uint64_t *)(a1 + v46);
  unint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v49 = *v48;
  unint64_t v50 = v48[1];
  outlined copy of Data._Representation(*v48, v50);
  uint64_t v51 = *v47;
  unint64_t v52 = v47[1];
  uint64_t *v47 = v49;
  v47[1] = v50;
  outlined consume of Data._Representation(v51, v52);
  return a1;
}

uint64_t initializeWithTake for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  return a1;
}

uint64_t assignWithTake for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  unint64_t v24 = *(void *)(a1 + v21 + 8);
  if (v24 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    goto LABEL_12;
  }
  unint64_t v25 = *(void *)(v23 + 8);
  if (v25 >> 60 == 15)
  {
    outlined destroy of Data(v22);
    goto LABEL_10;
  }
  uint64_t v26 = *(void *)v22;
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8) = v25;
  outlined consume of Data._Representation(v26, v24);
LABEL_12:
  uint64_t v27 = a3[10];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = *(void *)(a1 + v27 + 8);
  if (v30 >> 60 != 15)
  {
    unint64_t v31 = v29[1];
    if (v31 >> 60 != 15)
    {
      uint64_t v32 = *v28;
      *uint64_t v28 = *v29;
      v28[1] = v31;
      outlined consume of Data._Representation(v32, v30);
      goto LABEL_17;
    }
    outlined destroy of Data((uint64_t)v28);
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
LABEL_17:
  uint64_t v33 = a3[11];
  uint64_t v34 = *(void *)(a1 + v33);
  unint64_t v35 = *(void *)(a1 + v33 + 8);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  outlined consume of Data._Representation(v34, v35);
  uint64_t v36 = a3[12];
  uint64_t v37 = *(void *)(a1 + v36);
  unint64_t v38 = *(void *)(a1 + v36 + 8);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  outlined consume of Data._Representation(v37, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21642E804);
}

uint64_t sub_21642E804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21642E954);
}

uint64_t sub_21642E954(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for TetraRatchetOuterMessage()
{
  uint64_t result = type metadata singleton initialization cache for TetraRatchetOuterMessage;
  if (!type metadata singleton initialization cache for TetraRatchetOuterMessage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TetraRatchetOuterMessage()
{
  type metadata accessor for P256.KeyAgreement.PublicKey();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Kyber768.PublicKey?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Kyber768.PublicKey?()
{
  if (!lazy cache variable for type metadata for Kyber768.PublicKey?)
  {
    type metadata accessor for Kyber768.PublicKey();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Kyber768.PublicKey?);
    }
  }
}

uint64_t TetraRatchetOuterMessage.serializedData(signedBy:)(void *a1)
{
  uint64_t v2 = v1;
  id v66 = a1;
  v67[1] = *(id *)MEMORY[0x263EF8340];
  int v3 = (int *)type metadata accessor for TetraRatchetOuterMessage();
  MEMORY[0x270FA5388](v3);
  uint64_t v65 = (unsigned int *)((char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v62 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v63 = *(void *)(v7 - 8);
  uint64_t v64 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v56 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for TetraPB_TetraMessage(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  uint64_t v12 = &v11[v9[5]];
  *(_DWORD *)uint64_t v12 = 0;
  v12[4] = 1;
  uint64_t v13 = &v11[v9[6]];
  *(_OWORD *)uint64_t v13 = xmmword_216494780;
  int v57 = &v11[v9[7]];
  *(_OWORD *)int v57 = xmmword_216494780;
  uint64_t v14 = &v11[v9[8]];
  *(_OWORD *)uint64_t v14 = xmmword_216494780;
  uint64_t v55 = &v11[v9[9]];
  *(_OWORD *)uint64_t v55 = xmmword_216494780;
  uint64_t v59 = &v11[v9[10]];
  *(_OWORD *)uint64_t v59 = xmmword_216494780;
  uint64_t v15 = &v11[v9[11]];
  *(_DWORD *)uint64_t v15 = 0;
  v15[4] = 1;
  uint64_t v16 = &v11[v9[12]];
  *(_OWORD *)uint64_t v16 = xmmword_216494780;
  uint64_t v17 = &v11[v9[13]];
  *(_OWORD *)uint64_t v17 = xmmword_216494780;
  uint64_t v18 = *(void *)(v1 + 8);
  unint64_t v19 = *(void *)(v1 + 16);
  *(void *)uint64_t v13 = v18;
  *((void *)v13 + 1) = v19;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)(v1 + 24);
  v15[4] = 0;
  outlined copy of Data._Representation(v18, v19);
  uint64_t v20 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v21 >> 60 == 15) {
    __break(1u);
  }
  *(void *)uint64_t v14 = v20;
  *((void *)v14 + 1) = v21;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v1;
  v12[4] = 0;
  uint64_t v22 = (uint64_t *)(v1 + v3[11]);
  uint64_t v24 = *v22;
  unint64_t v23 = v22[1];
  uint64_t v60 = v24;
  unint64_t v61 = v23;
  *(void *)uint64_t v17 = v24;
  *((void *)v17 + 1) = v23;
  unint64_t v25 = (uint64_t *)(v1 + v3[10]);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  if (v27 >> 60 != 15)
  {
    *(void *)uint64_t v16 = v26;
    *((void *)v16 + 1) = v27;
  }
  uint64_t v28 = (char **)(v2 + v3[9]);
  uint64_t v29 = *v28;
  unint64_t v30 = (unint64_t)v28[1];
  uint64_t v31 = (uint64_t)v62;
  uint64_t v32 = v63;
  if (v30 >> 60 != 15)
  {
    uint64_t v33 = v59;
    *(void *)uint64_t v59 = v29;
    *((void *)v33 + 1) = v30;
  }
  uint64_t v59 = v29;
  outlined init with copy of Kyber768.PublicKey?(v2 + v3[8], v31);
  uint64_t v34 = v64;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v64) == 1)
  {
    outlined copy of Data._Representation(v60, v61);
    outlined copy of Data?(v26, v27);
    outlined copy of Data?((uint64_t)v59, v30);
    outlined destroy of Kyber768.PublicKey?(v31);
  }
  else
  {
    unint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
    uint64_t v54 = v26;
    uint64_t v36 = v56;
    v35(v56, v31, v34);
    outlined copy of Data._Representation(v60, v61);
    outlined copy of Data?(v54, v27);
    outlined copy of Data?((uint64_t)v59, v30);
    uint64_t v37 = Kyber768.PublicKey.dataRepresentation.getter();
    unint64_t v38 = v55;
    *(void *)uint64_t v55 = v37;
    *((void *)v38 + 1) = v39;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v34);
  }
  uint64_t v40 = v65;
  outlined init with copy of TetraRatchetOuterMessage(v2, (uint64_t)v65);
  id v41 = objc_allocWithZone((Class)type metadata accessor for TetraMessageSignerFormatter());
  id v42 = TetraMessageSignerFormatter.init(message:)(v40);
  v67[0] = 0;
  id v43 = objc_msgSend(v66, sel_signDataWithMessageFormatter_error_, v42, v67);

  id v44 = v67[0];
  if (!v43)
  {
    uint64_t v51 = v44;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined destroy of TetraPB_TetraMessage((uint64_t)v11, type metadata accessor for TetraPB_TetraMessage);
    return (uint64_t)v51;
  }
  uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

  unint64_t v48 = (uint64_t *)v57;
  outlined consume of Data?(*(void *)v57, *((void *)v57 + 1));
  uint64_t *v48 = v45;
  v48[1] = v47;
  lazy protocol witness table accessor for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage();
  uint64_t v49 = v58;
  uint64_t v50 = Message.serializedData(partial:)();
  if (!v49)
  {
    uint64_t v51 = (void *)v50;
    outlined destroy of TetraPB_TetraMessage((uint64_t)v11, type metadata accessor for TetraPB_TetraMessage);
    return (uint64_t)v51;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t TetraRatchetOuterMessage.init(serializedData:authenticatedData:signedBy:)@<X0>(unsigned char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  id v134 = a5;
  unint64_t v136 = a4;
  uint64_t v140 = a3;
  uint64_t v129 = a6;
  uint64_t v128 = type metadata accessor for TetraRatchetOuterMessage();
  MEMORY[0x270FA5388](v128);
  uint64_t v132 = &v102[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  id v131 = &v102[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  unint64_t v130 = &v102[-v13];
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v102[-v14];
  uint64_t v16 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v133 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  unint64_t v19 = &v102[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  unint64_t v21 = &v102[-v20];
  uint64_t v22 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v22 - 8);
  unint64_t v23 = (int *)type metadata accessor for TetraPB_TetraMessage(0);
  MEMORY[0x270FA5388](v23);
  unint64_t v25 = &v102[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v139 = 0;
  long long v137 = 0u;
  long long v138 = 0u;
  outlined copy of Data._Representation((uint64_t)a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage();
  uint64_t v26 = (uint64_t)v135;
  Message.init(serializedData:extensions:partial:options:)();
  if (v26)
  {

    outlined consume of Data._Representation(v140, v136);
    return outlined consume of Data._Representation((uint64_t)a1, a2);
  }
  uint64_t v126 = v19;
  uint64_t v127 = v16;
  uint64_t v28 = v133;
  uint64_t v29 = (uint64_t *)&v25[v23[8]];
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  if (v31 >> 60 == 15) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = *v29;
  }
  unint64_t v33 = 0xC000000000000000;
  if (v31 >> 60 != 15) {
    unint64_t v33 = v31;
  }
  *(void *)&long long v137 = v32;
  *((void *)&v137 + 1) = v33;
  outlined copy of Data?(v30, v31);
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)();
  uint64_t v34 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(unsigned char **)(v35 + 56);
  uint64_t v135 = (unsigned char *)v34;
  uint64_t v124 = v35 + 56;
  uint64_t v125 = v36;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v36)(v15, 1, 1);
  uint64_t v37 = &v25[v23[9]];
  unint64_t v38 = v37[1];
  if (v38 >> 60 != 15)
  {
    *(void *)&long long v137 = *v37;
    *((void *)&v137 + 1) = v38;
    outlined copy of Data._Representation(v137, v38);
    uint64_t v39 = v130;
    Kyber768.PublicKey.init<A>(dataRepresentation:)();
    outlined destroy of Kyber768.PublicKey?((uint64_t)v15);
    ((void (*)(unsigned char *, void, uint64_t, unsigned char *))v125)(v39, 0, 1, v135);
    outlined init with take of Kyber768.PublicKey?((uint64_t)v39, (uint64_t)v15);
  }
  unint64_t v123 = a2;
  unint64_t v130 = a1;
  uint64_t v40 = v132;
  id v41 = (uint64_t *)&v25[v23[10]];
  uint64_t v42 = *v41;
  unint64_t v43 = v41[1];
  id v44 = (uint64_t *)&v25[v23[12]];
  uint64_t v46 = *v44;
  unint64_t v45 = v44[1];
  uint64_t v47 = &v25[v23[5]];
  if ((v47[4] & 1) != 0 || (int v48 = *(_DWORD *)v47, (*(_DWORD *)v47 - 32) < 0xFFFFFFED))
  {
    uint64_t v96 = v42;
    unint64_t v97 = v45;
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    swift_allocError();
    unsigned char *v98 = 1;
    outlined copy of Data?(v46, v97);
    outlined copy of Data?(v96, v43);
    swift_willThrow();

    outlined consume of Data._Representation(v140, v136);
    outlined consume of Data._Representation((uint64_t)v130, v123);
    outlined consume of Data?(v96, v43);
    outlined consume of Data?(v46, v97);
    outlined destroy of Kyber768.PublicKey?((uint64_t)v15);
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v21, v127);
  }
  else
  {
    unint64_t v49 = 0xF000000000000000;
    if (v45 >> 60 == 15) {
      unint64_t v50 = 0xF000000000000000;
    }
    else {
      unint64_t v50 = v45;
    }
    unint64_t v116 = v50;
    if (v45 >> 60 == 15) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = v46;
    }
    uint64_t v115 = v51;
    int v117 = v48;
    if (v43 >> 60 != 15) {
      unint64_t v49 = v43;
    }
    unint64_t v114 = v49;
    if (v43 >> 60 == 15) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v42;
    }
    uint64_t v113 = v52;
    uint64_t v53 = (uint64_t *)&v25[v23[6]];
    uint64_t v54 = *v53;
    unint64_t v55 = v53[1];
    uint64_t v110 = *v53;
    unint64_t v109 = v55;
    if (v55 >> 60 == 15) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = v54;
    }
    uint64_t v105 = v56;
    unint64_t v57 = 0xC000000000000000;
    if (v55 >> 60 != 15) {
      unint64_t v57 = v55;
    }
    unint64_t v104 = v57;
    uint64_t v58 = &v25[v23[11]];
    if (v58[4]) {
      int v59 = 0;
    }
    else {
      int v59 = *(_DWORD *)v58;
    }
    int v103 = v59;
    uint64_t v60 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16);
    uint64_t v120 = v42;
    Class v119 = v25;
    uint64_t v122 = v46;
    uint64_t v132 = (unsigned char *)v45;
    unint64_t v118 = v21;
    uint64_t v61 = v127;
    v60(v126, v21, v127);
    unint64_t v62 = v43;
    unint64_t v121 = v43;
    outlined init with copy of Kyber768.PublicKey?((uint64_t)v15, (uint64_t)v131);
    uint64_t v63 = (uint64_t *)&v119[v23[13]];
    uint64_t v64 = *v63;
    uint64_t v108 = *v63;
    unint64_t v65 = v63[1];
    unint64_t v106 = v65;
    if (v65 >> 60 == 15) {
      uint64_t v66 = 0;
    }
    else {
      uint64_t v66 = v64;
    }
    uint64_t v112 = v66;
    unint64_t v67 = 0xC000000000000000;
    if (v65 >> 60 != 15) {
      unint64_t v67 = v65;
    }
    unint64_t v111 = v67;
    uint64_t v68 = (int *)v128;
    uint64_t v107 = &v40[*(int *)(v128 + 32)];
    ((void (*)(void))v125)();
    uint64_t v69 = v68[9];
    uint64_t v135 = v15;
    uint64_t v70 = &v40[v69];
    *(_OWORD *)&v40[v69] = xmmword_216494780;
    uint64_t v125 = &v40[v68[10]];
    *(_OWORD *)uint64_t v125 = xmmword_216494780;
    unint64_t v71 = v104;
    *((void *)v40 + 1) = v105;
    *((void *)v40 + 2) = v71;
    uint64_t v72 = &v40[v68[12]];
    unint64_t v73 = v136;
    void *v72 = v140;
    v72[1] = v73;
    *((_DWORD *)v40 + 6) = v103;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(&v40[v68[7]], v126, v61);
    uint64_t v74 = v120;
    outlined copy of Data?(v120, v62);
    uint64_t v75 = v122;
    unint64_t v76 = (unint64_t)v132;
    outlined copy of Data?(v122, (unint64_t)v132);
    uint64_t v77 = v75;
    unint64_t v25 = v119;
    outlined copy of Data?(v77, v76);
    outlined copy of Data?(v74, v121);
    outlined copy of Data?(v110, v109);
    outlined copy of Data._Representation(v140, v73);
    outlined copy of Data?(v108, v106);
    outlined assign with take of Kyber768.PublicKey?((uint64_t)v131, (uint64_t)v107);
    outlined consume of Data?(*(void *)v70, *((void *)v70 + 1));
    unint64_t v78 = v114;
    *(void *)uint64_t v70 = v113;
    *((void *)v70 + 1) = v78;
    uint64_t v79 = (uint64_t *)v125;
    outlined consume of Data?(*(void *)v125, *((void *)v125 + 1));
    unint64_t v80 = v116;
    *uint64_t v79 = v115;
    v79[1] = v80;
    uint64_t v81 = (uint64_t *)&v40[v68[11]];
    unint64_t v82 = v111;
    *uint64_t v81 = v112;
    v81[1] = v82;
    *(_DWORD *)uint64_t v40 = v117;
    uint64_t v83 = v129;
    outlined init with take of TetraRatchetOuterMessage((uint64_t)v40, v129);
    uint64_t v84 = (uint64_t *)&v25[v23[7]];
    unint64_t v85 = v84[1];
    if (v85 >> 60 == 15) {
      uint64_t v86 = 0;
    }
    else {
      uint64_t v86 = *v84;
    }
    if (v85 >> 60 == 15) {
      unint64_t v87 = 0xC000000000000000;
    }
    else {
      unint64_t v87 = v84[1];
    }
    outlined copy of Data?(*v84, v85);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v86, v87);
    outlined init with copy of TetraRatchetOuterMessage(v83, (uint64_t)v40);
    id v89 = objc_allocWithZone((Class)type metadata accessor for TetraMessageSignerFormatter());
    id v90 = TetraMessageSignerFormatter.init(message:)((unsigned int *)v40);
    id v91 = v134;
    unsigned __int8 v92 = objc_msgSend(v134, sel_verifyTetraMessageSignature_formatter_, isa, v90);

    uint64_t v93 = v140;
    uint64_t v94 = v127;
    unint64_t v95 = v123;
    if ((v92 & 1) == 0)
    {
      lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
      swift_allocError();
      unsigned char *v101 = 2;
      swift_willThrow();

      outlined consume of Data._Representation(v93, v136);
      outlined consume of Data._Representation((uint64_t)v130, v95);
      outlined consume of Data?(v120, v121);
      outlined consume of Data?(v122, (unint64_t)v132);
      outlined destroy of Kyber768.PublicKey?((uint64_t)v135);
      (*(void (**)(unsigned char *, uint64_t))(v133 + 8))(v118, v94);
      outlined destroy of TetraPB_TetraMessage((uint64_t)v25, type metadata accessor for TetraPB_TetraMessage);
      uint64_t v99 = (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage;
      uint64_t v100 = v83;
      return outlined destroy of TetraPB_TetraMessage(v100, v99);
    }

    outlined consume of Data._Representation(v93, v136);
    outlined consume of Data._Representation((uint64_t)v130, v95);
    outlined consume of Data?(v122, (unint64_t)v132);
    outlined consume of Data?(v120, v121);
    outlined destroy of Kyber768.PublicKey?((uint64_t)v135);
    (*(void (**)(unsigned char *, uint64_t))(v133 + 8))(v118, v94);
  }
  uint64_t v99 = type metadata accessor for TetraPB_TetraMessage;
  uint64_t v100 = (uint64_t)v25;
  return outlined destroy of TetraPB_TetraMessage(v100, v99);
}

unint64_t lazy protocol witness table accessor for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage;
  if (!lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage)
  {
    type metadata accessor for TetraPB_TetraMessage(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage);
  }
  return result;
}

uint64_t outlined destroy of Kyber768.PublicKey?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Kyber768.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Kyber768.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TetraRatchetOuterMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraRatchetOuterMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TetraRatchetOuterMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraRatchetOuterMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraPB_TetraMessage(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of Kyber768.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v21 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v21 - v9, a2, v4);
  uint64_t v11 = SymmetricKey.bitCount.getter();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t result = v12(v10, v4);
  if (v11 == 256)
  {
    unint64_t v24 = 0xD00000000000001ALL;
    unint64_t v25 = 0x800000021649BF50;
    v14._countAndFlagsBits = 0x2D5254432D534541;
    v14._object = (void *)0xEE00676E6979654BLL;
    String.append(_:)(v14);
    unint64_t v15 = specialized Data.init<A>(_:)(v24, v25);
    unint64_t v17 = v16;
    unint64_t v24 = v15;
    unint64_t v25 = v16;
    type metadata accessor for SHA384();
    uint64_t v23 = a1;
    lazy protocol witness table accessor for type SHA384 and conformance SHA384(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x263F04808]);
    uint64_t v22 = (void (*)(char *, uint64_t))v12;
    lazy protocol witness table accessor for type SHA384 and conformance SHA384((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
    lazy protocol witness table accessor for type Data and conformance Data();
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    uint64_t v18 = outlined consume of Data._Representation(v15, v17);
    MEMORY[0x270FA5388](v18);
    uint64_t v19 = SymmetricKey.withUnsafeBytes<A>(_:)();
    unint64_t v20 = v24;
    MEMORY[0x270FA5388](v19);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    v22(v8, v4);
    return v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SHA384 and conformance SHA384(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t closure #1 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = specialized Collection.prefix(_:)(a3, a1, a2);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  v17[3] = v12;
  v17[4] = lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  uint64_t v13 = (void *)swift_allocObject();
  v17[0] = v13;
  void v13[2] = v5;
  v13[3] = v7;
  v13[4] = v9;
  v13[5] = v11;
  __swift_project_boxed_opaque_existential_1(v17, v12);
  Slice<>.withUnsafeBytes<A>(_:)();
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  *a4 = v15;
  a4[1] = v16;
  return result;
}

uint64_t partial apply for closure #1 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return closure #1 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t closure #2 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SymmetricKey.init<A>(data:)();
}

uint64_t partial apply for closure #2 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(a1, a2, *(void *)(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t sub_216430458()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t getEnumTagSinglePayload for MessageProtectionFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MessageProtectionFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2164305C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageProtectionFeatureFlags()
{
  return &type metadata for MessageProtectionFeatureFlags;
}

unint64_t lazy protocol witness table accessor for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags;
  if (!lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags;
  if (!lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance MessageProtectionFeatureFlags()
{
  return "MessageProtection";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance MessageProtectionFeatureFlags()
{
  uint64_t v1 = "KyberInTheSEPRegisteredKeys";
  if (*v0 != 1) {
    uint64_t v1 = "KyberInTheSEPRatchetingKeys";
  }
  if (*v0) {
    return v1;
  }
  else {
    return "visionOSSyncs";
  }
}

void **initializeBufferWithCopyOfBuffer for TetraECDHKey(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unsigned int v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    BOOL v7 = (char *)a1 + v6;
    int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v12 = v4;
    if (v11(v8, 1, v9))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for TetraECDHKey(id *a1, uint64_t a2)
{
  unsigned int v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    BOOL v7 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void **initializeWithCopy for TetraECDHKey(void **a1, void **a2, uint64_t a3)
{
  unsigned int v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  BOOL v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  id v11 = v4;
  if (v10(v7, 1, v8))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v6, v7, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void **assignWithCopy for TetraECDHKey(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  BOOL v7 = *a2;
  *a1 = *a2;
  id v8 = v7;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v13 = *(void *)(v12 - 8);
  Swift::String v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

void *initializeWithTake for TetraECDHKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void **assignWithTake for TetraECDHKey(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraECDHKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216430E5C);
}

uint64_t sub_216430E5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for TetraECDHKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_216430F30);
}

void *sub_216430F30(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TetraECDHKey()
{
  uint64_t result = type metadata singleton initialization cache for TetraECDHKey;
  if (!type metadata singleton initialization cache for TetraECDHKey) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TetraECDHKey()
{
  type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey?()
{
  if (!lazy cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?)
  {
    type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    }
  }
}

const __CFString *one-time initialization function for AKSTokenID()
{
  CFStringRef result = (const __CFString *)MEMORY[0x2166CC8B0](0xD000000000000015, 0x800000021649BFC0);
  AKSTokenID = result;
  return result;
}

const __CFString *one-time initialization function for TokenOID()
{
  CFStringRef result = (const __CFString *)MEMORY[0x2166CC8B0](1684631412, 0xE400000000000000);
  TokenOID = result;
  return result;
}

void TetraECDHSecKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1, __SecKey *a2)
{
  uint64_t v2 = MEMORY[0x2166CC510]();
  unint64_t v4 = v3;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v2, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  uint64_t inited = swift_initStackObject();
  uint64_t v7 = (void **)MEMORY[0x263F16FA8];
  *(_OWORD *)(inited + 16) = xmmword_2164946A0;
  uint64_t v8 = *v7;
  *(void *)(inited + 32) = *v7;
  uint64_t v9 = (void *)*MEMORY[0x263F16FB8];
  type metadata accessor for CFStringRef(0);
  uint64_t v10 = (void **)MEMORY[0x263F16F68];
  *(void *)(inited + 40) = v9;
  uint64_t v11 = *v10;
  *(void *)(inited + 64) = v12;
  *(void *)(inited + 72) = v11;
  int v13 = (void *)*MEMORY[0x263F16F80];
  *(void *)(inited + 80) = *MEMORY[0x263F16F80];
  int v14 = (void *)*MEMORY[0x263F16F98];
  *(void *)(inited + 104) = v12;
  *(void *)(inited + 112) = v14;
  *(void *)(inited + 144) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 120) = 256;
  id v15 = v8;
  id v16 = v9;
  id v17 = v11;
  id v18 = v13;
  id v19 = v14;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  _sSo11CFStringRefaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  CFDictionaryRef v20 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SecKeyRef v21 = SecKeyCreateWithData(isa, v20, 0);

  if (v21)
  {
    CFStringRef v22 = (const __CFString *)*MEMORY[0x263F17278];
    uint64_t v23 = v21;
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    CFDictionaryRef v24 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CFDataRef v25 = SecKeyCopyKeyExchangeResult(a2, v22, v23, v24, 0);

    if (v25)
    {
      CFDataRef v26 = v25;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      SymmetricKey.init<A>(data:)();
    }
    else
    {
      lazy protocol witness table accessor for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors();
      swift_allocError();
      *uint64_t v28 = 1;
      swift_willThrow();
    }
  }
  else
  {
    lazy protocol witness table accessor for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors();
    swift_allocError();
    *unint64_t v27 = 0;
    swift_willThrow();
  }
}

void TetraECDHKey.publicKey.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x270FA5388](v1 - 8);
  unint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TetraECDHKey();
  outlined init with copy of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v3);
    if (*v0)
    {
      uint64_t v9 = SecKeyCopyPublicKey(*v0);
      if (v9)
      {
        uint64_t v10 = v9;
        CFDataRef v11 = SecKeyCopyExternalRepresentation(v9, 0);

        if (v11)
        {
          CFDataRef v12 = v11;
          v14[2] = specialized Data.init<A>(_:)(v12);
          v14[3] = v13;
          P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();

          return;
        }
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_10:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  SecureEnclave.P256.KeyAgreement.PrivateKey.publicKey.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void TetraECDHKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v14[1] = a2;
  uint64_t v5 = type metadata accessor for SharedSecret();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  CFDataRef v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TetraECDHKey();
  outlined init with copy of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v2 + *(int *)(v13 + 20), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v8);
    if (*v2) {
      TetraECDHSecKey.sharedSecretFromKeyAgreement(with:)(a1, *v2);
    }
    else {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    SecureEnclave.P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
    if (!v3)
    {
      _sSo11CFStringRefaABSHSCWlTm_0(&lazy protocol witness table cache variable for type SharedSecret and conformance SharedSecret, MEMORY[0x263F04608]);
      SymmetricKey.init<A>(data:)();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TetraECDHKey.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraECDHKey.CodingKeys()
{
  if (*v0) {
    return 0x79654B706573;
  }
  else {
    return 0x79654B736B61;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraECDHKey.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TetraECDHKey.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TetraECDHKey.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance TetraECDHKey.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraECDHKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraECDHKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TetraECDHKey.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraECDHKey.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  lazy protocol witness table accessor for type TetraECDHSecKey and conformance TetraECDHSecKey();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for TetraECDHKey();
    v10[6] = 1;
    type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    _sSo11CFStringRefaABSHSCWlTm_0(&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey, MEMORY[0x263F04680]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

void TetraECDHKey.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraECDHKey.CodingKeys>);
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TetraECDHKey();
  MEMORY[0x270FA5388](v10);
  CFDataRef v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    uint64_t v17 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = v19;
    char v22 = 0;
    lazy protocol witness table accessor for type TetraECDHSecKey and conformance TetraECDHSecKey();
    uint64_t v15 = v20;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *uint64_t v13 = v23;
    type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    char v21 = 1;
    _sSo11CFStringRefaABSHSCWlTm_0(&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey, MEMORY[0x263F04680]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
    outlined init with take of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v6, (uint64_t)v13 + *(int *)(v17 + 20));
    outlined init with copy of TetraECDHKey((uint64_t)v13, v18);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    outlined destroy of TetraECDHKey((uint64_t)v13);
  }
}

void protocol witness for Decodable.init(from:) in conformance TetraECDHKey(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraECDHKey(void *a1)
{
  return TetraECDHKey.encode(to:)(a1);
}

SecKeyRef specialized TetraECDHSecKey.init(aksBlob:)(uint64_t a1, unint64_t a2)
{
  v4.super.CFDictionaryRef isa = Data._bridgeToObjectiveC()().super.isa;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_216494560;
  uint64_t v6 = (void *)*MEMORY[0x263F170D0];
  *(void *)(inited + 32) = *MEMORY[0x263F170D0];
  uint64_t v7 = one-time initialization token for AKSTokenID;
  id v8 = v6;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = (__CFString *)AKSTokenID;
  *(void *)(inited + 40) = AKSTokenID;
  uint64_t v10 = one-time initialization token for TokenOID;
  uint64_t v11 = v9;
  if (v10 != -1) {
    swift_once();
  }
  CFDataRef v12 = (__CFString *)TokenOID;
  *(void *)(inited + 48) = TokenOID;
  uint64_t v13 = v12;
  outlined copy of Data._Representation(a1, a2);
  *(void *)(inited + 56) = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();

  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  _sSo11CFStringRefaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SecKeyRef v15 = SecKeyCreateWithData(v4.super.isa, isa, 0);

  if (!v15)
  {
    lazy protocol witness table accessor for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors();
    swift_allocError();
    *uint64_t v16 = 3;
    swift_willThrow();
  }
  return v15;
}

unint64_t lazy protocol witness table accessor for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraECDHSecKey and conformance TetraECDHSecKey()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey);
  }
  return result;
}

uint64_t outlined init with take of SecureEnclave.P256.KeyAgreement.PrivateKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TetraECDHKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraECDHKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraECDHKey(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TetraECDHKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of SecureEnclave.P256.KeyAgreement.PrivateKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SecureEnclave.P256.KeyAgreement.PrivateKey?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSo11CFStringRefaABSHSCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TetraECDHKey.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TetraECDHKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216432584);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for TetraECDHKey.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for TetraECDHKey.CodingKeys()
{
  return &unk_26C702C48;
}

unsigned char *storeEnumTagSinglePayload for TetraECDHSecKeyErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216432694);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraECDHSecKeyErrors()
{
  return &type metadata for TetraECDHSecKeyErrors;
}

ValueMetadata *type metadata accessor for TetraECDHSecKey()
{
  return &type metadata for TetraECDHSecKey;
}

uint64_t specialized TetraECDHKey.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79654B736B61 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79654B706573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2) {
      uint64_t v3 = a3 - a2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(0, result, v3, a2, a3);
    if (v4) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = result;
    }
    if ((v5 & 0x8000000000000000) == 0) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x216432B00);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = outlined consume of Data._Representation(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t one-time initialization function for ciphersuite()
{
  uint64_t v14 = type metadata accessor for HPKE.AEAD();
  uint64_t v0 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  BOOL v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for HPKE.KDF();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HPKE.KEM();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for HPKE.Ciphersuite();
  __swift_allocate_value_buffer(v11, static GFTKeyWrapper.ciphersuite);
  __swift_project_value_buffer(v11, (uint64_t)static GFTKeyWrapper.ciphersuite);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F04720], v7);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F04710], v3);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, *MEMORY[0x263F04728], v14);
  return HPKE.Ciphersuite.init(kem:kdf:aead:)();
}

id @objc static GFTKeyWrapper.encrypt(_:to:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, id))
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  uint64_t v13 = (void *)a6(v10, v12, v9);
  outlined consume of Data._Representation(v10, v12);
  return v13;
}

id GFTKeyWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GFTKeyWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GFTKeyWrapper()
{
  return self;
}

uint64_t closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char **a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v9 = a4;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      int v18 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a3, a3 >> 32, v9 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, a5);
      if (v6) {
        goto LABEL_13;
      }
      int v16 = v18;
      uint64_t result = outlined consume of Data._Representation(a3, v9);
      break;
    case 2uLL:
      uint64_t v9 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v13 = *(void *)(a3 + 16);
      uint64_t v14 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      int v15 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v14, v9, a1, a2, a5);
      if (v6)
      {
        swift_release();
        swift_release();
        __break(1u);
LABEL_13:
        outlined consume of Data._Representation(a3, v9);
        __break(1u);
        JUMPOUT(0x216433348);
      }
      int v16 = v15;
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(&v19[1], 0, 14);
      goto LABEL_6;
    default:
      *(void *)&v19[1] = a3;
      LOWORD(v19[3]) = a4;
      BYTE2(v19[3]) = BYTE2(a4);
      HIBYTE(v19[3]) = BYTE3(a4);
      LOBYTE(v19[4]) = BYTE4(a4);
      BYTE1(v19[4]) = BYTE5(a4);
LABEL_6:
      uint64_t result = closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(a5, v19);
      int v16 = v19[0];
      break;
  }
  *a6 = v16;
  return result;
}

uint64_t closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)@<X0>(char **a1@<X4>, _DWORD *a2@<X8>)
{
  ccaes_siv_encrypt_mode();
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2), 0, v4);
  }
  *a1 = v4;
  uint64_t result = ccsiv_one_shot();
  *a2 = result;
  return result;
}

uint64_t closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)@<X0>(uint64_t *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = a3;
  void v14[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
      }
      else
      {
        unint64_t v12 = a3;
        swift_retain();
        outlined copy of Data._Representation(v5, v6);
        if (!__DataStorage._bytes.getter() || !__OFSUB__((int)v5, __DataStorage._offset.getter()))
        {
          __DataStorage._length.getter();
          closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(a2, v14);
          if (!v3)
          {
            outlined consume of Data._Representation(v5, v6);
            goto LABEL_15;
          }
LABEL_22:
          outlined consume of Data._Representation(v5, v6);
          __break(1u);
          JUMPOUT(0x21643372CLL);
        }
      }
      __break(1u);
      return result;
    case 2uLL:
      unint64_t v12 = a3;
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v11 = *(void *)(v5 + 24);
      outlined copy of Data._Representation(v5, v6);
      swift_retain();
      swift_retain();
      if (__DataStorage._bytes.getter() && __OFSUB__(v8, __DataStorage._offset.getter())) {
        goto LABEL_19;
      }
      if (__OFSUB__(v11, v8)) {
        goto LABEL_18;
      }
      __DataStorage._length.getter();
      closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(a2, v14);
      if (v3)
      {
        swift_release();
        swift_release();
        __break(1u);
        goto LABEL_22;
      }
      swift_release();
      swift_release();
LABEL_15:
      uint64_t result = outlined consume of Data._Representation(v5, v6);
      uint64_t v10 = v14[0];
      uint64_t v4 = v12;
LABEL_16:
      *uint64_t v4 = v10;
      return result;
    case 3uLL:
      memset(v14, 0, 14);
      goto LABEL_9;
    default:
      v14[0] = *a1;
      LOWORD(v14[1]) = v6;
      BYTE2(v14[1]) = BYTE2(v6);
      BYTE3(v14[1]) = BYTE3(v6);
      BYTE4(v14[1]) = BYTE4(v6);
      BYTE5(v14[1]) = BYTE5(v6);
LABEL_9:
      closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(a2, &v13);
      uint64_t result = outlined consume of Data._Representation(v5, v6);
      uint64_t v10 = v13;
      goto LABEL_16;
  }
}

uint64_t closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)@<X0>(void *a1@<X4>, void *a2@<X8>)
{
  ccaes_siv_decrypt_mode();
  objc_msgSend(a1, sel_mutableBytes);
  uint64_t result = ccsiv_one_shot();
  *a2 = (int)result;
  return result;
}

id closure #1 in static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)@<X0>(id a1@<X2>, const void *a2@<X0>, uint64_t a3@<X1>, void *a4@<X8>)
{
  id result = objc_msgSend(a1, sel_mutableBytes);
  if (a2)
  {
    id v8 = result;
    id result = memcpy(result, a2, a3 - (void)a2);
    *a4 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>, (uint64_t (*)(void))type metadata accessor for TetraSessionState, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MPPB_KeyAndIndex>, type metadata accessor for MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      unint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      unint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    int v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  int v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_8;
    }
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  __DataStorage._length.getter();
  uint64_t result = closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(a6, &v11);
  if (!v6) {
    return v11;
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x216433DB0);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x216433E3CLL);
  }
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SHA256();
  long long v25 = xmmword_216494380;
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
  lazy protocol witness table accessor for type Data and conformance Data();
  SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)();
  *(void *)&long long v25 = a1;
  *((void *)&v25 + 1) = a2;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSMutableData);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  outlined copy of Data._Representation(a1, a2);
  id v8 = objc_msgSend(ObjCClassFromMetadata, sel__newZeroingDataWithBytes_length_, 0, 0);
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v9 = v8;
  id v10 = objc_msgSend(v8, sel_increaseLengthBy_, 32);
  MEMORY[0x270FA5388](v10);
  *(&v23 - 2) = (uint64_t)&v25;
  *(&v23 - 1) = (uint64_t)v9;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  if (v26)
  {
    while (1)
    {
      unint64_t v12 = *((void *)&v25 + 1);
      uint64_t v11 = v25;
      switch(*((void *)&v25 + 1) >> 62)
      {
        case 1:
          LODWORD(v13) = DWORD1(v25) - v25;
          if (__OFSUB__(DWORD1(v25), v25))
          {
            __break(1u);
LABEL_14:
            __break(1u);
LABEL_15:
            __break(1u);
            JUMPOUT(0x216434408);
          }
          uint64_t v13 = (int)v13;
LABEL_8:
          if (v13 <= 48)
          {
LABEL_11:
            lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
            swift_allocError();
            *uint64_t v21 = 6;
            swift_willThrow();

            goto LABEL_12;
          }
          outlined copy of Data._Representation(v25, *((unint64_t *)&v25 + 1));
          uint64_t v17 = Data.advanced(by:)();
          uint64_t v19 = v18;
          outlined consume of Data._Representation(v11, v12);
          uint64_t v20 = outlined consume of Data._Representation(v11, v12);
          *(void *)&long long v25 = v17;
          *((void *)&v25 + 1) = v19;
          MEMORY[0x270FA5388](v20);
          *(&v23 - 2) = (uint64_t)&v25;
          *(&v23 - 1) = (uint64_t)v9;
          SymmetricKey.withUnsafeBytes<A>(_:)();
          if (!v26) {
            goto LABEL_12;
          }
          break;
        case 2:
          uint64_t v15 = *(void *)(v25 + 16);
          uint64_t v14 = *(void *)(v25 + 24);
          BOOL v16 = __OFSUB__(v14, v15);
          uint64_t v13 = v14 - v15;
          if (!v16) {
            goto LABEL_8;
          }
          goto LABEL_14;
        case 3:
          goto LABEL_11;
        default:
          uint64_t v13 = BYTE14(v25);
          goto LABEL_8;
      }
    }
  }
LABEL_12:
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v24);
  outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
  return v9;
}

void (**specialized static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)(uint64_t a1, unint64_t a2, unsigned int (**a3)(char *, uint64_t, uint64_t), uint64_t a4, unint64_t a5))(char *, char *, uint64_t)
{
  uint64_t v6 = v5;
  unint64_t v64 = a5;
  unint64_t v62 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = (void *)type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v12 = *(v61 - 1);
  MEMORY[0x270FA5388](v61);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for SymmetricKey();
  uint64_t v60 = *(void *)(v63 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v63);
  int v59 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v65 = (char *)&v58 - v17;
  uint64_t v68 = specialized Data.init<A>(_:)(0xD000000000000010, 0x800000021649C140);
  unint64_t v69 = v18;
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v19 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v21 = v20;
  (*(void (**)(char *, void *))(v12 + 8))(v14, v61);
  Data.append(_:)();
  outlined consume of Data._Representation(v19, v21);
  uint64_t v22 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v24 = v23;
  Data.append(_:)();
  outlined consume of Data._Representation(v22, v24);
  type metadata accessor for SHA256();
  uint64_t v70 = MEMORY[0x263F8EE78];
  uint64_t v25 = v68;
  unint64_t v26 = v69;
  uint64_t v66 = v68;
  unint64_t v67 = v69;
  uint64_t v61 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  unint64_t v64 = lazy protocol witness table accessor for type Data and conformance Data();
  SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)();
  outlined consume of Data._Representation(v25, v26);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSMutableData);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v28 = objc_msgSend(ObjCClassFromMetadata, sel__newZeroingDataWithBytes_length_, 0, 0);
  if (!v28)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  id v58 = ObjCClassFromMetadata;
  uint64_t v61 = v28;
  objc_msgSend(v28, sel_increaseLengthBy_, 32);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v29 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56);
  uint64_t v30 = (void (**)(char *, char *, uint64_t))v60;
  unint64_t v62 = (unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  while (2)
  {
    unint64_t v31 = a2 >> 62;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        uint64_t v33 = (int)a1;
        uint64_t v32 = a1 >> 32;
        outlined copy of Data._Representation(a1, a2);
        if (a1 >> 32 < (int)a1) {
          goto LABEL_41;
        }
        uint64_t v34 = a1 >> 32;
        uint64_t v35 = (int)a1;
        goto LABEL_9;
      case 2uLL:
        uint64_t v33 = *(void *)(a1 + 16);
        uint64_t v32 = *(void *)(a1 + 24);
        outlined copy of Data._Representation(a1, a2);
        if (v32 < v33)
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v35 = *(void *)(a1 + 16);
        uint64_t v34 = *(void *)(a1 + 24);
LABEL_9:
        if (v34 < v32 || v32 < v35) {
          goto LABEL_42;
        }
        if (__OFSUB__(v32, v33)) {
          goto LABEL_43;
        }
        if ((unint64_t)(v32 - v33) < 0x28)
        {
          switch((int)v31)
          {
            case 1:
              uint64_t v36 = a1 >> 32;
              goto LABEL_24;
            case 2:
              uint64_t v36 = *(void *)(a1 + 24);
              goto LABEL_25;
            default:
              goto LABEL_27;
          }
        }
        uint64_t v36 = v33 + 40;
        if (__OFADD__(v33, 40)) {
          goto LABEL_45;
        }
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        switch((int)v31)
        {
          case 1:
            uint64_t v38 = (int)a1;
            uint64_t v37 = a1 >> 32;
            break;
          case 2:
            uint64_t v38 = *(void *)(a1 + 16);
            uint64_t v37 = *(void *)(a1 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v38 = 0;
            uint64_t v37 = BYTE6(a2);
            break;
        }
        if (v37 < v36 || v36 < v38) {
          goto LABEL_46;
        }
        uint64_t v39 = 0;
        switch((int)v31)
        {
          case 1:
LABEL_24:
            uint64_t v39 = (int)a1;
            break;
          case 2:
LABEL_25:
            uint64_t v39 = *(void *)(a1 + 16);
            break;
          default:
            break;
        }
        if (v36 < v39) {
          goto LABEL_44;
        }
LABEL_27:
        uint64_t v40 = Data._Representation.subscript.getter();
        unint64_t v42 = v41;
        outlined consume of Data._Representation(a1, a2);
        uint64_t v68 = v40;
        unint64_t v69 = v42;
        static AES.KeyWrap.unwrap<A>(_:using:)();
        if (v6)
        {

          outlined consume of Data._Representation(v40, v42);
          uint64_t v43 = v63;
          (*v29)(v11, 1, 1, v63);
          uint64_t v6 = 0;
          break;
        }
        outlined consume of Data._Representation(v40, v42);
        uint64_t v43 = v63;
        (*v29)(v11, 0, 1, v63);
        if ((*v62)(v11, 1, v43) != 1)
        {
          uint64_t v52 = v30;
          uint64_t v53 = v59;
          v30[4](v59, v11, v43);
          uint64_t v54 = (void (**)(char *, char *, uint64_t))objc_msgSend(v58, sel__newZeroingDataWithBytes_length_, 0, 0);
          if (v54)
          {
            uint64_t v30 = v54;
            id v55 = objc_msgSend(v54, sel_increaseLengthBy_, 32);
            MEMORY[0x270FA5388](v55);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeMutableRawPointer?);
            SymmetricKey.withUnsafeBytes<A>(_:)();

            outlined consume of Data._Representation(a1, a2);
            uint64_t v56 = v52[1];
            ((void (*)(char *, uint64_t))v56)(v53, v43);
            ((void (*)(char *, uint64_t))v56)(v65, v43);
            return v30;
          }
LABEL_50:
          __break(1u);
          JUMPOUT(0x216434C2CLL);
        }
        return result;
      case 3uLL:
        goto LABEL_9;
      default:
        uint64_t v33 = 0;
        uint64_t v35 = 0;
        uint64_t v32 = BYTE6(a2);
        uint64_t v34 = BYTE6(a2);
        goto LABEL_9;
    }
    outlined destroy of TetraSessionStates?((uint64_t)v11, &demangling cache variable for type metadata for SymmetricKey?);
    switch((int)v31)
    {
      case 0:
        uint64_t v44 = BYTE6(a2);
        goto LABEL_35;
      case 1:
        LODWORD(v44) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_47;
        }
        uint64_t v44 = (int)v44;
LABEL_35:
        if (v44 > 40)
        {
          uint64_t v48 = Data.advanced(by:)();
          unint64_t v50 = v49;
          outlined consume of Data._Representation(a1, a2);
          a1 = v48;
          a2 = v50;
          continue;
        }
LABEL_37:
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        *uint64_t v51 = 6;
        swift_willThrow();

        outlined consume of Data._Representation(a1, a2);
        ((void (*)(char *, uint64_t))v30[1])(v65, v43);
        return v30;
      case 2:
        uint64_t v46 = *(void *)(a1 + 16);
        uint64_t v45 = *(void *)(a1 + 24);
        BOOL v47 = __OFSUB__(v45, v46);
        uint64_t v44 = v45 - v46;
        if (!v47) {
          goto LABEL_35;
        }
        goto LABEL_48;
      case 3:
        goto LABEL_37;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t specialized static GFTKeyWrapper.unwrapWrappedSeed(_:legacy:using:)(uint64_t a1, unint64_t a2, int a3, __SecKey *a4)
{
  uint64_t v5 = (uint64_t)v4;
  unint64_t v95 = a4;
  int v96 = a3;
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedSecret?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v83 - v12;
  uint64_t v14 = type metadata accessor for SharedSecret();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v90 = v14;
  uint64_t v91 = v15;
  MEMORY[0x270FA5388](v14);
  id v89 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PrivateKey?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v93 = *(void *)(v20 - 8);
  uint64_t v94 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v92 = (uint64_t)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x270FA5388](v22 - 8);
  unint64_t v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for P256.KeyAgreement.PublicKey();
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v30) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v30 = (int)v30;
LABEL_6:
      if (v30 >= 66)
      {
        if (v29)
        {
          char v34 = v96;
          if (v29 == 1)
          {
            LODWORD(v35) = HIDWORD(a1) - a1;
            if (!__OFSUB__(HIDWORD(a1), a1))
            {
              uint64_t v35 = (int)v35;
              goto LABEL_14;
            }
            goto LABEL_49;
          }
          uint64_t v39 = *(void *)(a1 + 16);
          uint64_t v38 = *(void *)(a1 + 24);
          BOOL v33 = __OFSUB__(v38, v39);
          uint64_t v35 = v38 - v39;
          if (v33)
          {
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v35 = BYTE6(a2);
          char v34 = v96;
        }
LABEL_14:
        BOOL v33 = __OFSUB__(v35, 65);
        uint64_t v40 = v35 - 65;
        if (v33)
        {
          __break(1u);
        }
        else
        {
          uint64_t v41 = 40;
          if (v34) {
            uint64_t v41 = 48;
          }
          if (v40 % v41)
          {
            lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
            swift_allocError();
            char v37 = 2;
            goto LABEL_19;
          }
          unint64_t v87 = v28;
          uint64_t v88 = v26;
          outlined copy of Data._Representation(a1, a2);
          specialized Collection.prefix(_:)(65, a1, a2, (uint64_t *)&v98);
          *(_OWORD *)error = v98;
          P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
          if (v4)
          {

            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v24, 1, 1, v25);
LABEL_25:
            outlined destroy of TetraSessionStates?((uint64_t)v24, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
            lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
            swift_allocError();
            unsigned char *v45 = 0;
            goto LABEL_20;
          }
          unint64_t v85 = 0;
          uint64_t v43 = v88;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v24, 0, 1, v25);
          uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
          uint64_t v5 = v43 + 48;
          uint64_t v86 = v25;
          if (v44(v24, 1, v25) == 1) {
            goto LABEL_25;
          }
          uint64_t v46 = v24;
          uint64_t v47 = v86;
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v87, v46, v86);
          error[0] = 0;
          CFDataRef v48 = SecKeyCopyExternalRepresentation(v95, error);
          if (!v48)
          {
            static os_log_type_t.error.getter();
            id v51 = MessageProtectionLog();
            if (v51)
            {
              uint64_t v52 = v51;
              uint64_t v53 = v47;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
              uint64_t v54 = swift_allocObject();
              *(_OWORD *)(v54 + 16) = xmmword_2164944D0;
              if (error[0])
              {
                id v55 = (void *)v54;
                uint64_t v56 = error[0];
                *(void *)&long long v98 = v56;
                type metadata accessor for CFErrorRef(0);
                lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
                uint64_t v5 = Error.localizedDescription.getter();
                uint64_t v58 = v57;

                v55[7] = MEMORY[0x263F8D310];
                v55[8] = lazy protocol witness table accessor for type String and conformance String();
                v55[4] = v5;
                v55[5] = v58;
                os_log(_:dso:log:_:_:)();

                swift_bridgeObjectRelease();
                lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
                swift_allocError();
                *int v59 = 3;
                swift_willThrow();
                (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v53);
                return v5;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
LABEL_68:
            __break(1u);
            goto LABEL_69;
          }
          unint64_t v95 = v48;
          *(void *)&long long v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          *((void *)&v98 + 1) = v49;
          unint64_t v50 = v85;
          P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)();
          if (v50)
          {

            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v19, 1, 1, v94);
LABEL_33:
            outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for P256.KeyAgreement.PrivateKey?);
            lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
            swift_allocError();
            *uint64_t v61 = 3;
            swift_willThrow();

LABEL_34:
            (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v86);
            return v5;
          }
          uint64_t v60 = v93;
          uint64_t v5 = v94;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v19, 0, 1, v94);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v19, 1, v5) == 1) {
            goto LABEL_33;
          }
          (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v92, v19, v5);
          P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
          uint64_t v84 = 0;
          uint64_t v63 = v90;
          uint64_t v62 = v91;
          unint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56);
          v64(v11, 0, 1, v90);
          unint64_t v85 = *(unsigned int (**)(void, void, void))(v62 + 48);
          if (v85(v11, 1, v63) == 1)
          {
            outlined destroy of TetraSessionStates?((uint64_t)v11, &demangling cache variable for type metadata for SharedSecret?);
            v64(v13, 1, 1, v63);
            uint64_t v5 = v94;
LABEL_37:
            outlined destroy of TetraSessionStates?((uint64_t)v13, &demangling cache variable for type metadata for SharedSecret?);
            lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
            swift_allocError();
            *unint64_t v65 = 4;
            swift_willThrow();

            (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v5);
            goto LABEL_34;
          }
          uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
          v83(v13, v11, v63);
          v64(v13, 0, 1, v63);
          unsigned int v66 = v85(v13, 1, v63);
          uint64_t v5 = v94;
          if (v66 == 1) {
            goto LABEL_37;
          }
          unint64_t v24 = v89;
          v83(v89, v13, v63);
          if (v96)
          {
            uint64_t v25 = v86;
            if (v29)
            {
              if (v29 == 1) {
                uint64_t v67 = a1 >> 32;
              }
              else {
                uint64_t v67 = *(void *)(a1 + 24);
              }
              outlined copy of Data._Representation(a1, a2);
LABEL_55:
              if (v67 >= 65)
              {
                uint64_t v69 = Data._Representation.subscript.getter();
                unint64_t v71 = v70;
                outlined consume of Data._Representation(a1, a2);
                uint64_t v72 = v84;
                unint64_t v73 = specialized static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(v69, v71);
                if (v72)
                {
                  outlined consume of Data._Representation(v69, v71);

                  (*(void (**)(char *, uint64_t))(v91 + 8))(v24, v90);
                  (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
                  (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v25);
                  return v5;
                }
                uint64_t v5 = (uint64_t)v73;
                outlined consume of Data._Representation(v69, v71);
                uint64_t v74 = v92;
LABEL_65:

                (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v90);
                (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v74, v94);
                (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v25);
                return v5;
              }
              goto LABEL_68;
            }
LABEL_51:
            uint64_t v67 = BYTE6(a2);
            goto LABEL_55;
          }
        }
        uint64_t v25 = v86;
        if (v29)
        {
          if (v29 == 1) {
            uint64_t v68 = a1 >> 32;
          }
          else {
            uint64_t v68 = *(void *)(a1 + 24);
          }
          outlined copy of Data._Representation(a1, a2);
        }
        else
        {
          uint64_t v68 = BYTE6(a2);
        }
        if (v68 >= 65)
        {
          uint64_t v75 = Data._Representation.subscript.getter();
          unint64_t v77 = v76;
          outlined consume of Data._Representation(a1, a2);
          unint64_t v78 = (unsigned int (**)(char *, uint64_t, uint64_t))v24;
          uint64_t v74 = v92;
          uint64_t v79 = v24;
          unint64_t v80 = (unint64_t)v87;
          uint64_t v81 = v84;
          unint64_t v82 = specialized static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)(v75, v77, v78, v92, (unint64_t)v87);
          if (v81)
          {
            outlined consume of Data._Representation(v75, v77);

            (*(void (**)(char *, uint64_t))(v91 + 8))(v79, v90);
            (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v74, v94);
            (*(void (**)(unint64_t, uint64_t))(v88 + 8))(v80, v25);
            return v5;
          }
          uint64_t v5 = (uint64_t)v82;
          outlined consume of Data._Representation(v75, v77);
          goto LABEL_65;
        }
LABEL_69:
        __break(1u);
        JUMPOUT(0x21643586CLL);
      }
LABEL_11:
      lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
      swift_allocError();
      char v37 = 1;
LABEL_19:
      *uint64_t v36 = v37;
LABEL_20:
      swift_willThrow();
      return v5;
    case 2uLL:
      uint64_t v32 = *(void *)(a1 + 16);
      uint64_t v31 = *(void *)(a1 + 24);
      BOOL v33 = __OFSUB__(v31, v32);
      uint64_t v30 = v31 - v32;
      if (!v33) {
        goto LABEL_6;
      }
      goto LABEL_48;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v30 = BYTE6(a2);
      goto LABEL_6;
  }
}

objc_class *specialized static GFTKeyWrapper.encrypt(_:to:)(uint64_t a1, uint64_t a2, __SecKey *a3)
{
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  error[1] = *(CFErrorRef *)MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for HPKE.Ciphersuite();
  unint64_t v47 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HPKE.Sender();
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  MEMORY[0x270FA5388](v8);
  CFDataRef v48 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x270FA5388](v10 - 8);
  Class isa = (Class)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v41 - v18;
  error[0] = 0;
  CFDataRef v20 = SecKeyCopyExternalRepresentation(a3, error);
  if (v20)
  {
    CFDataRef v21 = v20;
    uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v53 = v22;
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
    if (v3)
    {

      (*(void (**)(Class, uint64_t, uint64_t, uint64_t))(v14 + 56))(isa, 1, 1, v13);
    }
    else
    {
      (*(void (**)(Class, void, uint64_t, uint64_t))(v14 + 56))(isa, 0, 1, v13);
      if ((*(unsigned int (**)(Class, uint64_t, uint64_t))(v14 + 48))(isa, 1, v13) != 1)
      {
        (*(void (**)(char *, Class, uint64_t))(v14 + 32))(v19, isa, v13);
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
        if (one-time initialization token for ciphersuite != -1) {
          swift_once();
        }
        uint64_t v31 = __swift_project_value_buffer(v5, (uint64_t)static GFTKeyWrapper.ciphersuite);
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v7, v31, v5);
        HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
        uint64_t v32 = HPKE.Sender.encapsulatedKey.getter();
        unint64_t v47 = v33;
        uint64_t v50 = v43;
        uint64_t v51 = v44;
        long long v49 = xmmword_216494380;
        lazy protocol witness table accessor for type Data and conformance Data();
        uint64_t v34 = HPKE.Sender.seal<A, B>(_:authenticating:)();
        unint64_t v36 = v35;
        uint64_t v37 = v32;
        uint64_t v42 = v32;
        uint64_t v52 = v32;
        unint64_t v38 = v47;
        unint64_t v53 = v47;
        outlined copy of Data._Representation(v37, v47);
        outlined copy of Data._Representation(v34, v36);
        specialized Data.append<A>(contentsOf:)(v34, v36);
        outlined consume of Data._Representation(v34, v36);
        outlined consume of Data._Representation(v34, v36);
        outlined consume of Data._Representation(v42, v38);
        uint64_t v39 = v52;
        unint64_t v40 = v53;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v39, v40);

        (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v46);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
        return isa;
      }
    }
    outlined destroy of TetraSessionStates?((uint64_t)isa, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
    swift_allocError();
    *uint64_t v30 = 3;
    swift_willThrow();

    return isa;
  }
  static os_log_type_t.error.getter();
  uint64_t result = (objc_class *)MessageProtectionLog();
  if (result)
  {
    Class isa = result;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t result = (objc_class *)swift_allocObject();
    *((_OWORD *)result + 1) = xmmword_2164944D0;
    if (error[0])
    {
      unint64_t v24 = result;
      uint64_t v25 = error[0];
      uint64_t v52 = (uint64_t)v25;
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v26 = Error.localizedDescription.getter();
      uint64_t v28 = v27;

      *((void *)v24 + 7) = MEMORY[0x263F8D310];
      *((void *)v24 + 8) = lazy protocol witness table accessor for type String and conformance String();
      *((void *)v24 + 4) = v26;
      *((void *)v24 + 5) = v28;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
      swift_allocError();
      *unint64_t v29 = 3;
      swift_willThrow();
      return isa;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized static GFTKeyWrapper.decrypt(_:using:)(uint64_t a1, unint64_t isa, __SecKey *a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v52 = type metadata accessor for HPKE.Ciphersuite();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HPKE.Recipient();
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v53 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PrivateKey?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v54 = (char *)&v47 - v17;
  outlined copy of Data._Representation(a1, isa);
  specialized Collection.prefix(_:)(65, a1, isa, &v61);
  uint64_t v18 = v61;
  unint64_t v57 = v62;
  switch(isa >> 62)
  {
    case 1uLL:
      uint64_t v19 = a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v19 = *(void *)(a1 + 24);
LABEL_5:
      outlined copy of Data._Representation(a1, isa);
      goto LABEL_6;
    case 3uLL:
      goto LABEL_19;
    default:
      uint64_t v19 = BYTE6(isa);
LABEL_6:
      if (v19 < 65)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      uint64_t v58 = Data._Representation.subscript.getter();
      unint64_t v21 = v20;
      outlined consume of Data._Representation(a1, isa);
      CFErrorRef error = 0;
      CFDataRef v22 = SecKeyCopyExternalRepresentation(a3, &error);
      if (!v22)
      {
        static os_log_type_t.error.getter();
        id v28 = MessageProtectionLog();
        if (v28)
        {
          unint64_t v29 = v28;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v30 = swift_allocObject();
          *(_OWORD *)(v30 + 16) = xmmword_2164944D0;
          if (error)
          {
            uint64_t v31 = (void *)v30;
            uint64_t v32 = error;
            uint64_t v61 = (uint64_t)v32;
            type metadata accessor for CFErrorRef(0);
            lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
            Class isa = Error.localizedDescription.getter();
            uint64_t v34 = v33;

            v31[7] = MEMORY[0x263F8D310];
            v31[8] = lazy protocol witness table accessor for type String and conformance String();
            v31[4] = isa;
            v31[5] = v34;
            os_log(_:dso:log:_:_:)();

            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
            swift_allocError();
            unsigned char *v35 = 3;
            swift_willThrow();
            outlined consume of Data._Representation(v18, v57);
            outlined consume of Data._Representation(v58, v21);
            return isa;
          }
LABEL_21:
          __break(1u);
          JUMPOUT(0x216436704);
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      CFDataRef v23 = v22;
      unint64_t v55 = v21;
      uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v62 = v24;
      uint64_t v25 = v56;
      P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)();
      uint64_t v26 = v18;
      if (v25)
      {

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
        uint64_t v27 = v58;
LABEL_14:
        outlined destroy of TetraSessionStates?((uint64_t)v11, &demangling cache variable for type metadata for P256.KeyAgreement.PrivateKey?);
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        unsigned char *v37 = 3;
        swift_willThrow();
        outlined consume of Data._Representation(v26, v57);
        outlined consume of Data._Representation(v27, v55);

        return isa;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
      uint64_t v27 = v58;
      if (v36 == 1) {
        goto LABEL_14;
      }
      unint64_t v38 = v54;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v54, v11, v12);
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v38, v12);
      if (one-time initialization token for ciphersuite != -1) {
        swift_once();
      }
      uint64_t v39 = v52;
      uint64_t v40 = __swift_project_value_buffer(v52, (uint64_t)static GFTKeyWrapper.ciphersuite);
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v51, v40, v39);
      unint64_t v41 = v57;
      outlined copy of Data._Representation(v26, v57);
      HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)();
      unint64_t v42 = v41;
      uint64_t v61 = v27;
      unint64_t v62 = v55;
      long long v59 = xmmword_216494380;
      lazy protocol witness table accessor for type Data and conformance Data();
      uint64_t v44 = HPKE.Recipient.open<A, B>(_:authenticating:)();
      unint64_t v46 = v45;
      Class isa = (unint64_t)Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v44, v46);
      outlined consume of Data._Representation(v58, v55);
      outlined consume of Data._Representation(v26, v42);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v53, v49);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v54, v12);
      return isa;
  }
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized static GondolaWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v26 = a2;
  unint64_t v27 = a3;
  uint64_t v25 = a1;
  uint64_t v3 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for SymmetricKey();
  uint64_t v28 = *(void *)(v29 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v29);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v32 = specialized Data.init<A>(_:)(0xD000000000000010, 0x800000021649C140);
  unint64_t v33 = v12;
  uint64_t v13 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v15 = v14;
  Data.append(_:)();
  outlined consume of Data._Representation(v13, v15);
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v16 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  Data.append(_:)();
  outlined consume of Data._Representation(v16, v18);
  type metadata accessor for SHA256();
  uint64_t v34 = MEMORY[0x263F8EE78];
  uint64_t v19 = v32;
  unint64_t v20 = v33;
  uint64_t v30 = v32;
  unint64_t v31 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  lazy protocol witness table accessor for type Data and conformance Data();
  SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)();
  outlined consume of Data._Representation(v19, v20);
  uint64_t v32 = v26;
  unint64_t v33 = v27;
  outlined copy of Data._Representation(v26, v27);
  SymmetricKey.init<A>(data:)();
  uint64_t v21 = static AES.KeyWrap.wrap(_:using:)();
  CFDataRef v22 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v23 = v29;
  v22(v9, v29);
  v22(v11, v23);
  return v21;
}

void *specialized static GFTKeyWrapper.wrapSeed(_:to:legacy:)(uint64_t a1, unint64_t a2, void *a3, int a4)
{
  int v90 = a4;
  unint64_t v70 = a2;
  uint64_t v84 = a1;
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v72 = type metadata accessor for SymmetricKey();
  uint64_t v85 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedSecret?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for SharedSecret();
  unint64_t v78 = *(void (***)(char *, uint64_t))(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v91 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x270FA5388](v11 - 8);
  id v89 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v67 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v76 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v93 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v20 = (char *)&v63 - v19;
  uint64_t v66 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  CFDataRef v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  P256.KeyAgreement.PrivateKey.init(compactRepresentable:)();
  uint64_t v23 = (uint64_t)objc_msgSend(a3, sel_count);
  uint64_t v24 = 48;
  if ((v90 & 1) == 0) {
    uint64_t v24 = 40;
  }
  uint64_t v25 = v23 * v24;
  if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  if (__OFADD__(v25, 65)) {
    goto LABEL_40;
  }
  uint64_t v64 = v13;
  unint64_t v71 = v6;
  uint64_t v101 = specialized Data.init(capacity:)(v25 + 65);
  unint64_t v102 = v26;
  unint64_t v77 = v22;
  uint64_t v27 = P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v28 = MEMORY[0x2166CC510](v27);
  uint64_t v29 = v15;
  uint64_t v30 = v28;
  unint64_t v32 = v31;
  unint64_t v33 = *(void (**)(char *, void *))(v16 + 8);
  uint64_t v92 = (void *)v29;
  uint64_t v88 = v16 + 8;
  unint64_t v87 = v33;
  v33(v20, (void *)v29);
  Data.append(_:)();
  outlined consume of Data._Representation(v30, v32);
  uint64_t v34 = v76;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (!v100)
  {
    unint64_t v35 = v77;
LABEL_31:
    (*(void (**)(char *, uint64_t))(v67 + 8))(v34, v64);
    uint64_t v55 = v101;
    unint64_t v56 = v102;
    outlined copy of Data._Representation(v101, v102);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v55, v56);
    outlined consume of Data._Representation(v55, v56);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v66);
    return isa;
  }
  uint64_t v86 = (void (**)(uint64_t, uint64_t, uint64_t, void *))(v16 + 56);
  uint64_t v83 = (unsigned int (**)(uint64_t, uint64_t, void *))(v16 + 48);
  unint64_t v82 = (void (**)(char *, uint64_t, void *))(v16 + 32);
  uint64_t v81 = (void (**)(char *, void, uint64_t, uint64_t))(v78 + 7);
  unint64_t v80 = (unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 6);
  uint64_t v79 = (void (**)(char *, char *, uint64_t))(v78 + 4);
  ++v78;
  uint64_t v68 = (void (**)(char *, uint64_t))(v85 + 8);
  uint64_t v85 = MEMORY[0x263F8EE58] + 8;
  long long v69 = xmmword_216494380;
  unint64_t v35 = v77;
  uint64_t v36 = v75;
  unint64_t v37 = v70;
  unint64_t v38 = v73;
  uint64_t v74 = v9;
  while (1)
  {
    outlined init with take of Any(&v99, &v95);
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
    swift_dynamicCast();
    Class isa = v94;
    uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    *(void *)&long long v98 = v40;
    *((void *)&v98 + 1) = v42;
    uint64_t v43 = (uint64_t)v89;
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
    if (v38)
    {

      (*v86)(v43, 1, 1, v92);
LABEL_33:
      outlined destroy of TetraSessionStates?(v43, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
      swift_allocError();
      *unint64_t v57 = 3;
      swift_willThrow();
      goto LABEL_36;
    }
    Class isa = v92;
    (*v86)(v43, 0, 1, v92);
    if ((*v83)(v43, 1, isa) == 1) {
      goto LABEL_33;
    }
    (*v82)(v93, v43, isa);
    P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
    (*v81)(v9, 0, 1, v36);
    if ((*v80)(v9, 1, v36) == 1)
    {
      outlined destroy of TetraSessionStates?((uint64_t)v9, &demangling cache variable for type metadata for SharedSecret?);
      lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
      swift_allocError();
      *uint64_t v58 = 4;
      swift_willThrow();
      long long v59 = v93;
      uint64_t v60 = isa;
      goto LABEL_35;
    }
    uint64_t v44 = (uint64_t)v91;
    (*v79)(v91, v9, v36);
    if ((v90 & 1) == 0)
    {
      unint64_t v38 = 0;
      uint64_t v47 = specialized static GondolaWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(v44, v84, v37);
      unint64_t v49 = v48;
      uint64_t v96 = MEMORY[0x263F06F78];
      uint64_t v97 = MEMORY[0x263F06F68];
      *(void *)&long long v95 = v47;
      *((void *)&v95 + 1) = v48;
      uint64_t v50 = __swift_project_boxed_opaque_existential_1(&v95, MEMORY[0x263F06F78]);
      uint64_t v52 = *v50;
      unint64_t v51 = v50[1];
      switch(v51 >> 62)
      {
        case 1uLL:
          if (v52 >> 32 < (int)v52) {
            goto LABEL_41;
          }
          outlined copy of Data._Representation(v47, v49);
          outlined copy of Data._Representation(v52, v51);
          if (__DataStorage._bytes.getter() && __OFSUB__((int)v52, __DataStorage._offset.getter())) {
            goto LABEL_43;
          }
          unint64_t v38 = 0;
          __DataStorage._length.getter();
          Data._Representation.append(contentsOf:)();
          outlined consume of Data._Representation(v52, v51);
          uint64_t v34 = v76;
          Class isa = v92;
          unint64_t v37 = v70;
          break;
        case 2uLL:
          uint64_t v53 = *(void *)(v52 + 16);
          uint64_t v63 = *(void *)(v52 + 24);
          outlined copy of Data._Representation(v47, v49);
          swift_retain();
          swift_retain();
          uint64_t v54 = __DataStorage._bytes.getter();
          unint64_t v73 = 0;
          if (v54 && __OFSUB__(v53, __DataStorage._offset.getter())) {
            goto LABEL_44;
          }
          if (__OFSUB__(v63, v53)) {
            goto LABEL_42;
          }
          __DataStorage._length.getter();
          Data._Representation.append(contentsOf:)();
          swift_release();
          swift_release();
          uint64_t v34 = v76;
          Class isa = v92;
          unint64_t v37 = v70;
          unint64_t v38 = v73;
          break;
        case 3uLL:
          *(void *)((char *)&v98 + 6) = 0;
          *(void *)&long long v98 = 0;
          outlined copy of Data._Representation(v47, v49);
          goto LABEL_8;
        default:
          *(void *)&long long v98 = *v50;
          WORD4(v98) = v51;
          BYTE10(v98) = BYTE2(v51);
          BYTE11(v98) = BYTE3(v51);
          BYTE12(v98) = BYTE4(v51);
          BYTE13(v98) = BYTE5(v51);
          outlined copy of Data._Representation(v47, v49);
          Class isa = v92;
LABEL_8:
          Data._Representation.append(contentsOf:)();
          uint64_t v34 = v76;
          goto LABEL_9;
      }
      uint64_t v9 = v74;
LABEL_9:
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v95);
      uint64_t v36 = v75;
      (*v78)(v91, v75);
      v87(v93, isa);
      outlined consume of Data._Representation(v47, v49);
      unint64_t v35 = v77;
      goto LABEL_10;
    }
    type metadata accessor for SHA256();
    long long v95 = v69;
    lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
    lazy protocol witness table accessor for type Data and conformance Data();
    unint64_t v45 = v71;
    SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)();
    uint64_t v46 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v46 + 16) = 48;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(_OWORD *)(v46 + 64) = 0u;
    *(void *)&long long v95 = v46;
    MEMORY[0x270FA5388](v46);
    *(&v63 - 4) = v84;
    *(&v63 - 3) = v37;
    *(&v63 - 2) = (uint64_t)&v95;
    SymmetricKey.withUnsafeBytes<A>(_:)();
    if (v98) {
      break;
    }
    (*v68)(v45, v72);
    if (*(void *)(v95 + 16)) {
      Data._Representation.append(contentsOf:)();
    }
    swift_bridgeObjectRelease();
    (*v78)(v91, v36);
    v87(v93, v92);
    unint64_t v38 = 0;
    uint64_t v9 = v74;
LABEL_10:
    NSFastEnumerationIterator.next()();
    if (!v100) {
      goto LABEL_31;
    }
  }
  lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
  Class isa = (void *)swift_allocError();
  *unint64_t v62 = 5;
  swift_willThrow();
  (*v68)(v45, v72);
  swift_bridgeObjectRelease();
  (*v78)(v91, v36);
  uint64_t v60 = v92;
  long long v59 = v93;
LABEL_35:
  v87(v59, v60);
LABEL_36:
  (*(void (**)(char *, uint64_t))(v67 + 8))(v34, v64);
  outlined consume of Data._Representation(v101, v102);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v66);
  return isa;
}

unint64_t lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors;
  if (!lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors;
  if (!lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors);
  }
  return result;
}

uint64_t partial apply for closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(char ***)(v3 + 32), a3);
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)@<X0>(void *a1@<X8>)
{
  return closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(*(uint64_t **)(v1 + 16), *(void **)(v1 + 24), a1);
}

id partial apply for closure #1 in static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return closure #1 in static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)(*(id *)(v3 + 16), a1, a2, a3);
}

uint64_t getEnumTagSinglePayload for KeyWrappingErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KeyWrappingErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216437C88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyWrappingErrors()
{
  return &type metadata for KeyWrappingErrors;
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_LiteRatchet(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }
    else
    {
      uint64_t v18 = *(void *)v16;
      outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
    }
    uint64_t v19 = a3[7];
    unint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    unint64_t v22 = *((void *)v21 + 1);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *(void *)v21;
      outlined copy of Data._Representation(*(void *)v21, *((void *)v21 + 1));
      *(void *)unint64_t v20 = v23;
      *((void *)v20 + 1) = v22;
    }
  }
  return a1;
}

uint64_t destroy for MPPB_LiteRatchet(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  unsigned int v6 = (uint64_t *)(a1 + a2[5]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[6]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v8, v9);
  }
  uint64_t v10 = (uint64_t *)(a1 + a2[7]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    uint64_t v12 = *v10;
    return outlined consume of Data._Representation(v12, v11);
  }
  return result;
}

uint64_t initializeWithCopy for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    outlined copy of Data._Representation(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *v19;
    outlined copy of Data._Representation(*v19, v19[1]);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8) = v20;
  }
  return a1;
}

uint64_t assignWithCopy for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      outlined copy of Data._Representation(v19, v18);
      *uint64_t v16 = v19;
      v16[1] = v18;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v16);
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }
  uint64_t v20 = *v17;
  outlined copy of Data._Representation(v20, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  *uint64_t v16 = v20;
  v16[1] = v18;
  outlined consume of Data._Representation(v21, v22);
LABEL_15:
  uint64_t v23 = a3[7];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a2 + v23 + 8);
  if (*(void *)(a1 + v23 + 8) >> 60 != 15)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v28 = *v25;
      outlined copy of Data._Representation(v28, v26);
      uint64_t v29 = *v24;
      unint64_t v30 = v24[1];
      *uint64_t v24 = v28;
      v24[1] = v26;
      outlined consume of Data._Representation(v29, v30);
      return a1;
    }
    outlined destroy of Data((uint64_t)v24);
    goto LABEL_20;
  }
  if (v26 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    return a1;
  }
  uint64_t v27 = *v25;
  outlined copy of Data._Representation(v27, v26);
  *uint64_t v24 = v27;
  v24[1] = v26;
  return a1;
}

uint64_t initializeWithTake for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }
  unint64_t v17 = *(void *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    outlined destroy of Data(v14);
    goto LABEL_9;
  }
  uint64_t v18 = *(void *)v14;
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = v17;
  outlined consume of Data._Representation(v18, v16);
LABEL_11:
  uint64_t v19 = a3[7];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a1 + v19 + 8);
  if (v22 >> 60 != 15)
  {
    unint64_t v23 = v21[1];
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *v20;
      *uint64_t v20 = *v21;
      v20[1] = v23;
      outlined consume of Data._Representation(v24, v22);
      return a1;
    }
    outlined destroy of Data((uint64_t)v20);
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216438498);
}

uint64_t sub_216438498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t storeEnumTagSinglePayload for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_216438578);
}

uint64_t sub_216438578(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t type metadata accessor for MPPB_LiteRatchet()
{
  uint64_t result = type metadata singleton initialization cache for MPPB_LiteRatchet;
  if (!type metadata singleton initialization cache for MPPB_LiteRatchet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MPPB_LiteRatchet()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t MPPB_LiteRatchet.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for MPPB_LiteRatchet();
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t MPPB_LiteRatchet.traverse<A>(visitor:)()
{
  uint64_t result = closure #1 in MPPB_LiteRatchet.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in MPPB_LiteRatchet.traverse<A>(visitor:)(v0);
    closure #3 in MPPB_LiteRatchet.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in MPPB_LiteRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for MPPB_LiteRatchet();
  uint64_t v3 = a1 + *(int *)(result + 20);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #2 in MPPB_LiteRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for MPPB_LiteRatchet();
  uint64_t v3 = a1 + *(int *)(result + 24);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #3 in MPPB_LiteRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for MPPB_LiteRatchet();
  uint64_t v3 = a1 + *(int *)(result + 28);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

double protocol witness for Message.init() in conformance MPPB_LiteRatchet@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_216494780;
  *(_OWORD *)(a2 + v5) = xmmword_216494780;
  *(_OWORD *)(a2 + a1[7]) = xmmword_216494780;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_LiteRatchet()
{
  return 0xD000000000000010;
}

BOOL protocol witness for Message.isInitialized.getter in conformance MPPB_LiteRatchet(int *a1)
{
  return *(void *)(v1 + a1[5] + 8) >> 60 != 15
      && *(void *)(v1 + a1[6] + 8) >> 60 != 15
      && *(void *)(v1 + a1[7] + 8) >> 60 != 15;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_LiteRatchet()
{
  return MPPB_LiteRatchet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_LiteRatchet()
{
  return MPPB_LiteRatchet.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_LiteRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_LiteRatchet@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _protobuf_nameMap != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for _NameMap();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MPPB_LiteRatchet._protobuf_nameMap);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_LiteRatchet(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_LiteRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t base witness table accessor for Equatable in MPPB_LiteRatchet()
{
  return lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
}

uint64_t base witness table accessor for Message in MPPB_LiteRatchet()
{
  return lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
}

uint64_t base witness table accessor for Hashable in MPPB_LiteRatchet()
{
  return lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_LiteRatchet()
{
  return lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
}

uint64_t specialized static MPPB_LiteRatchet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v10 = (int *)type metadata accessor for MPPB_LiteRatchet();
  uint64_t v11 = v10[5];
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  uint64_t v38 = v4;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 != 15) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  if (v16 >> 60 == 15) {
    goto LABEL_10;
  }
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  char v17 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if (v17)
  {
LABEL_6:
    uint64_t v18 = v10[6];
    uint64_t v12 = *(void *)(a1 + v18);
    unint64_t v13 = *(void *)(a1 + v18 + 8);
    uint64_t v19 = (uint64_t *)(a2 + v18);
    uint64_t v15 = *v19;
    unint64_t v16 = v19[1];
    if (v13 >> 60 == 15)
    {
      if (v16 >> 60 == 15) {
        goto LABEL_15;
      }
    }
    else if (v16 >> 60 != 15)
    {
      outlined copy of Data?(v12, v13);
      outlined copy of Data?(v15, v16);
      char v24 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
      outlined consume of Data?(v15, v16);
      outlined consume of Data?(v12, v13);
      if ((v24 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_15:
      uint64_t v25 = v10[7];
      uint64_t v26 = *(void *)(a1 + v25);
      unint64_t v27 = *(void *)(a1 + v25 + 8);
      uint64_t v28 = (uint64_t *)(a2 + v25);
      uint64_t v29 = *v28;
      unint64_t v30 = v28[1];
      if (v27 >> 60 == 15)
      {
        if (v30 >> 60 == 15) {
          goto LABEL_21;
        }
      }
      else if (v30 >> 60 != 15)
      {
        outlined copy of Data?(v26, v27);
        outlined copy of Data?(v29, v30);
        char v31 = specialized static Data.== infix(_:_:)(v26, v27, v29, v30);
        outlined consume of Data?(v29, v30);
        outlined consume of Data?(v26, v27);
        if ((v31 & 1) == 0) {
          goto LABEL_12;
        }
LABEL_21:
        uint64_t v32 = v37;
        unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
        uint64_t v34 = a1;
        uint64_t v35 = v38;
        v33(v9, v34, v38);
        v33(v7, a2, v35);
        lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
        v36(v7, v35);
        v36(v9, v35);
        return v22 & 1;
      }
      outlined copy of Data?(v26, v27);
      outlined copy of Data?(v29, v30);
      outlined consume of Data?(v26, v27);
      uint64_t v20 = v29;
      unint64_t v21 = v30;
      goto LABEL_11;
    }
LABEL_10:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    uint64_t v20 = v15;
    unint64_t v21 = v16;
LABEL_11:
    outlined consume of Data?(v20, v21);
  }
LABEL_12:
  char v22 = 0;
  return v22 & 1;
}

uint64_t lazy protocol witness table accessor for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x263EF8340];
  v28[3] = MEMORY[0x263F06F78];
  v28[4] = MEMORY[0x263F06F68];
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x263F06F78]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = 0;
      }
      closure #1 in Data.init<A>(_:)(v8, v13, &v27);
      outlined consume of Data._Representation(v5, v6);
LABEL_27:
      outlined consume of Data._Representation(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      unint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      char v22 = &v16[v21];
      if (v16) {
        unint64_t v23 = v22;
      }
      else {
        unint64_t v23 = 0;
      }
      closure #1 in Data.init<A>(_:)(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      closure #1 in Data.init<A>(_:)(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t specialized Data.init<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of Message(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  outlined destroy of TetraSessionStates?((uint64_t)v38, &demangling cache variable for type metadata for ContiguousBytes?);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        unint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        unint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = specialized Data._Representation.init(_:)(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = specialized Data.init(count:)(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x270FA5388](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.init<A>(_:));
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    outlined consume of Data?(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  outlined consume of Data?((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v3);
  outlined init with copy of PrefixSequence<SHA384Digest>(a1, (uint64_t)&v15[-v6]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
    outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for ContiguousBytes?);
    v17[0] = xmmword_216494380;
    *(void *)((char *)&v16 + 7) = 0;
    *(void *)&long long v16 = 0;
    outlined init with copy of PrefixSequence<SHA384Digest>(a1, (uint64_t)v5);
    uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)(&v19, &v16, 0);
    uint64_t v8 = v19;
    if (v7)
    {
      if (v7 <= 0)
      {
        Data._Representation.replaceSubrange(_:with:count:)();
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v10 = *((void *)&v19 + 1);
      *(void *)((char *)&v19 + 7) = 0;
      *(void *)&long long v19 = 0;
      if (!v20 || (uint64_t v11 = *(void *)(v8 + 16), v10 == v11))
      {
LABEL_6:
        swift_bridgeObjectRelease();
        outlined destroy of TetraSessionStates?(a1, &demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
        return *(void *)&v17[0];
      }
      if ((v10 & 0x8000000000000000) != 0) {
LABEL_26:
      }
        __break(1u);
      if (v10 < *(void *)(v8 + 16))
      {
        LOBYTE(v12) = 0;
        uint64_t v13 = v20 - 1;
        uint64_t v14 = v11 - 1;
        do
        {
          *((unsigned char *)&v19 + v12) = *(unsigned char *)(v8 + v10 + 32);
          __int16 v12 = v12 + 1;
          if ((v12 & 0x100) != 0) {
            goto LABEL_24;
          }
          if (v12 == 14)
          {
            *(void *)&long long v16 = v19;
            DWORD2(v16) = DWORD2(v19);
            WORD6(v16) = WORD6(v19);
            Data._Representation.append(contentsOf:)();
            if (!v13 || v14 == v10) {
              goto LABEL_6;
            }
            LOBYTE(v12) = 0;
          }
          else if (v14 == v10 || !v13)
          {
            *(void *)&long long v16 = v19;
            DWORD2(v16) = DWORD2(v19);
            WORD6(v16) = WORD6(v19);
            Data._Representation.append(contentsOf:)();
            goto LABEL_6;
          }
          ++v10;
          --v13;
        }
        while (v10 < *(void *)(v8 + 16));
      }
      __break(1u);
LABEL_24:
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  outlined init with take of Message(v17, (uint64_t)&v19);
  __swift_project_boxed_opaque_existential_1(&v19, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  outlined destroy of TetraSessionStates?(a1, &demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  v17[0] = v16;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v19);
  return *(void *)&v17[0];
}

{
  void *v2;
  unsigned char *v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v7;
  void v8[3];
  uint64_t v9;
  unint64_t v10;

  unint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  unint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  return v5;
}

uint64_t specialized Data.init<A>(_:)(void *a1)
{
  v36[5] = *MEMORY[0x263EF8340];
  *(void *)&long long v33 = a1;
  type metadata accessor for NSData();
  id v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of Message(v34, (uint64_t)v36);
    __swift_project_boxed_opaque_existential_1(v36, v36[3]);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();

    v34[0] = v33;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
    return *(void *)&v34[0];
  }
  uint64_t v35 = 0;
  memset(v34, 0, sizeof(v34));
  outlined destroy of TetraSessionStates?((uint64_t)v34, &demangling cache variable for type metadata for ContiguousBytes?);
  uint64_t v3 = NSData.startIndex.getter();
  uint64_t v4 = NSData.endIndex.getter();
  uint64_t v5 = NSData.startIndex.getter();
  uint64_t v6 = NSData.endIndex.getter();
  if (v3 < v5 || v6 < v3) {
    goto LABEL_39;
  }
  uint64_t v7 = NSData.startIndex.getter();
  uint64_t v8 = NSData.endIndex.getter();
  if (v4 < v7 || v8 < v4) {
    goto LABEL_40;
  }
  if (__OFSUB__(v4, v3))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  *(void *)&v34[0] = specialized Data.init(count:)(v4 - v3);
  *((void *)&v34[0] + 1) = v9;
  MEMORY[0x270FA5388](*(void *)&v34[0]);
  unint64_t v10 = specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.init<A>(_:));
  unsigned __int8 v13 = BYTE14(v34[0]);
  uint64_t v14 = *((void *)&v34[0] + 1) >> 62;
  uint64_t v15 = v10;
  uint64_t v16 = v11;
  switch(*((void *)&v34[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v17) = DWORD1(v34[0]) - LODWORD(v34[0]);
      if (__OFSUB__(DWORD1(v34[0]), v34[0])) {
        goto LABEL_43;
      }
      uint64_t v17 = (int)v17;
LABEL_13:
      if (v12 != v17)
      {
        if (v14)
        {
          if (v14 == 1) {
            uint64_t v21 = *(uint64_t *)&v34[0] >> 32;
          }
          else {
            uint64_t v21 = *(void *)(*(void *)&v34[0] + 24);
          }
LABEL_33:
          if (v21 >= v12)
          {
            Data._Representation.replaceSubrange(_:with:count:)();
            goto LABEL_35;
          }
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
        }
LABEL_31:
        uint64_t v21 = v13;
        goto LABEL_33;
      }
LABEL_19:
      memset(v36, 0, 15);
      if (v11 == NSData.endIndex.getter()) {
        goto LABEL_35;
      }
      char v22 = NSData.subscript.getter();
      uint64_t v15 = v15;
      uint64_t v23 = NSData.startIndex.getter();
      uint64_t v24 = NSData.endIndex.getter();

      if (v16 < v23 || v16 >= v24)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      LOBYTE(v25) = 0;
      uint64_t v26 = v16 + 1;
      break;
    case 2:
      uint64_t v19 = *(void *)(*(void *)&v34[0] + 16);
      uint64_t v18 = *(void *)(*(void *)&v34[0] + 24);
      BOOL v20 = __OFSUB__(v18, v19);
      uint64_t v17 = v18 - v19;
      if (!v20) {
        goto LABEL_13;
      }
      goto LABEL_44;
    case 3:
      if (!v12) {
        goto LABEL_19;
      }
      uint64_t v21 = 0;
      goto LABEL_33;
    default:
      uint64_t v17 = BYTE14(v34[0]);
      goto LABEL_13;
  }
  while (1)
  {
    *((unsigned char *)v36 + v25) = v22;
    unsigned int v25 = v25 + 1;
    if ((v25 >> 8))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v25 == 14)
    {
      Data._Representation.append(contentsOf:)();
      if (v26 == NSData.endIndex.getter()) {
        goto LABEL_35;
      }
      LOBYTE(v25) = 0;
      goto LABEL_28;
    }
    if (v26 == NSData.endIndex.getter()) {
      break;
    }
LABEL_28:
    char v22 = NSData.subscript.getter();
    uint64_t v27 = v15;
    uint64_t v28 = NSData.startIndex.getter();
    uint64_t v29 = NSData.endIndex.getter();

    if (v26 >= v28 && v26++ < v29) {
      continue;
    }
    goto LABEL_30;
  }
  Data._Representation.append(contentsOf:)();
LABEL_35:

  return *(void *)&v34[0];
}

uint64_t AES.IV.init(IV:)(uint64_t a1, unint64_t a2)
{
  uint64_t result = specialized AES.IV.init(IV:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t static AES.CTR.decrypt(key:ciphertext:IV:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return static AES.CTR.decrypt(key:ciphertext:IV:)(a1, a2, a3);
}

{
  return specialized static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(a1, a2, a3);
}

uint64_t static AES.CTR.encrypt(key:message:IV:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return static AES.CTR.decrypt(key:ciphertext:IV:)(a1, a2, a3);
}

uint64_t AES.IV.data()(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return specialized Data.init<A>(_:)(a1, a2);
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x2166CC930](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

char *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_216494380;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char *result;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void v16[3];

  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_216494380;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySo6NSDataCG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for SHA384Digest();
  MEMORY[0x270FA5388](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v7);
  lazy protocol witness table accessor for type SHA384Digest and conformance SHA384Digest(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, MEMORY[0x263F045D8]);
  dispatch thunk of Sequence.makeIterator()();
  unint64_t v10 = *(void *)(v3
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrefixSequence<SHA384Digest>)
                           + 36));
  uint64_t result = outlined destroy of TetraSessionStates?(v3, &demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  uint64_t v12 = v31;
  unint64_t v13 = v32;
  if (!a2) {
    goto LABEL_6;
  }
  if (!a3)
  {
LABEL_7:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v10;
    return a3;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (!v10 || (--v10, unint64_t v14 = *(void *)(v31 + 16), v32 == v14))
    {
LABEL_6:
      a3 = 0;
      goto LABEL_7;
    }
    if (v32 < v14)
    {
      unint64_t v15 = v32 + 1;
      *a2 = *(unsigned char *)(v31 + 32 + v32);
      if (a3 == 1)
      {
        ++v13;
      }
      else
      {
        unint64_t v16 = a3 - 2;
        if (a3 - 2 >= v14 + ~v13) {
          unint64_t v16 = v14 + ~v13;
        }
        if (v16 >= v10) {
          unint64_t v16 = v10;
        }
        unint64_t v17 = v16 + 1;
        if (v17 <= 0x10 || (uint64_t v18 = v13 + v12, ((unint64_t)&a2[-v13 - v12] & 0xFFFFFFFFFFFFFFF0) == 0x20))
        {
          uint64_t v19 = 1;
          BOOL v20 = a2;
        }
        else
        {
          uint64_t v21 = v17 & 0xF;
          if ((v17 & 0xF) == 0) {
            uint64_t v21 = 16;
          }
          unint64_t v22 = v17 - v21;
          v15 += v17 - v21;
          BOOL v20 = &a2[v17 - v21];
          uint64_t v19 = v22 + 1;
          v10 -= v22;
          uint64_t v23 = a2 + 1;
          uint64_t v24 = (long long *)(v18 + 33);
          do
          {
            long long v25 = *v24++;
            *v23++ = v25;
            v22 -= 16;
          }
          while (v22);
        }
        uint64_t v26 = 0;
        uint64_t v27 = v20 + 1;
        unint64_t v28 = v10 - 1;
        uint64_t v29 = v19;
        while (1)
        {
          if (v10 == v26)
          {
            unint64_t v10 = 0;
            unint64_t v13 = v15 + v26;
            a3 = v19 + v26;
            goto LABEL_7;
          }
          unint64_t v30 = v28;
          if (!(v15 - v14 + v26)) {
            break;
          }
          ++v29;
          v27[v26] = *(unsigned char *)(v15 + v12 + 32 + v26);
          ++v26;
          --v28;
          if (!(v19 - a3 + v26))
          {
            unint64_t v13 = v15 + v26;
            unint64_t v10 = v30;
            goto LABEL_7;
          }
        }
        unint64_t v13 = v14;
        unint64_t v10 = v28;
        a3 = v29;
      }
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(void *a1, unsigned char *a2, uint64_t a3)
{
  id v7 = v3;
  uint64_t v8 = NSData.startIndex.getter();

  uint64_t v21 = a2;
  if (!a2 || !a3) {
    goto LABEL_5;
  }
  if (a3 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v8 == NSData.endIndex.getter())
  {
LABEL_5:
    *a1 = v7;
    a1[1] = v8;
    return;
  }
  char v9 = NSData.subscript.getter();
  id v10 = v7;
  uint64_t v11 = NSData.startIndex.getter();
  uint64_t v12 = NSData.endIndex.getter();

  if (v8 >= v11 && v8 < v12)
  {
    *a2 = v9;
    if (a3 == 1)
    {
      ++v8;
      goto LABEL_5;
    }
    BOOL v20 = a1;
    uint64_t v13 = 1;
    while (a3 != v13)
    {
      uint64_t v14 = v8 + v13;
      if (v8 + v13 == NSData.endIndex.getter())
      {
        v8 += v13;
        goto LABEL_18;
      }
      char v15 = NSData.subscript.getter();
      id v16 = v10;
      uint64_t v17 = NSData.startIndex.getter();
      uint64_t v18 = NSData.endIndex.getter();

      if (v14 < v17 || v14 >= v18) {
        goto LABEL_20;
      }
      uint64_t v19 = v13 + 1;
      v21[v13] = v15;
      uint64_t v13 = v19;
      if (a3 == v19)
      {
        v8 += v19;
LABEL_18:
        a1 = v20;
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized AES.IV.init(IV:)(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x21643B4A4);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 16)
      {
LABEL_7:
        uint64_t v8 = type metadata accessor for CryptoKitError();
        lazy protocol witness table accessor for type SHA384Digest and conformance SHA384Digest((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, *MEMORY[0x263F04538], v8);
        swift_willThrow();
        outlined consume of Data._Representation(a1, a2);
      }
      return a1;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t destroy for AES.IV(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *initializeBufferWithCopyOfBuffer for AES.IV(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for AES.IV(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for AES.IV(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AES.IV(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AES.IV(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.IV()
{
  return &type metadata for AES.IV;
}

ValueMetadata *type metadata accessor for AES.CTR()
{
  return &type metadata for AES.CTR;
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

{
  uint64_t v3;
  void *result;
  uint64_t v6;
  uint64_t v7;
  void v8[3];
  uint64_t v9;

  uint64_t v9 = **(void **)(v3 + 16);
  v8[2] = &v9;
  uint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySo6NSDataCG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v8, a1, a2);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t outlined init with copy of PrefixSequence<SHA384Digest>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)(unsigned char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v7 = **(id **)(v3 + 16);
  specialized Sequence._copySequenceContents(initializing:)(v10, a1, a2);
  uint64_t v8 = v10[1];
  *a3 = v10[0];
  a3[1] = v8;
  a3[2] = v9;
}

uint64_t lazy protocol witness table accessor for type SHA384Digest and conformance SHA384Digest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SymmetricRatchetErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21643B9B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymmetricRatchetErrors()
{
  return &type metadata for SymmetricRatchetErrors;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, __int16 a2)
{
  int v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of TetraSessionStates?(a1, &demangling cache variable for type metadata for SymmetricKey?);
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v17 = v21;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, v9);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for SymmetricKey?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v18);
    uint64_t *v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

uint64_t one-time initialization function for statusKeyRatchetPrefix()
{
  uint64_t result = specialized Data.init<A>(_:)(0xD000000000000013, 0x800000021649C4C0);
  statusKeyRatchetPrefix = result;
  unk_26AC05280 = v1;
  return result;
}

double one-time initialization function for statusKitRatchetStep()
{
  if (one-time initialization token for statusKeyRatchetPrefix != -1) {
    swift_once();
  }
  uint64_t v0 = statusKeyRatchetPrefix;
  unint64_t v1 = qword_26AC05280;
  outlined copy of Data._Representation(statusKeyRatchetPrefix, qword_26AC05280);
  outlined copy of Data._Representation(v0, v1);
  uint64_t v2 = specialized Data.init<A>(_:)(0x6567617373654D2DuLL, 0xEC0000007379654BLL);
  unint64_t v4 = v3;
  *(void *)&long long v6 = v0;
  *((void *)&v6 + 1) = v1;
  outlined copy of Data._Representation(v0, v1);
  specialized Data.append<A>(contentsOf:)(v2, v4);
  outlined consume of Data._Representation(v2, v4);
  outlined consume of Data._Representation(v0, v1);
  double result = *(double *)&v0;
  statusKitRatchetStep = v0;
  unk_26AC05250 = v1;
  xmmword_26AC05258 = v6;
  qword_26AC05268 = 0;
  byte_26AC05270 = 1;
  return result;
}

id SKRatchet.__deallocating_deinit(uint64_t a1)
{
  return SKRatchet.__deallocating_deinit(a1, type metadata accessor for SKRatchet);
}

uint64_t type metadata accessor for SKRatchet()
{
  return self;
}

uint64_t SKOutgoingRatchet.init(data:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v103 = *(void *)(v6 - 8);
  uint64_t v104 = v6;
  MEMORY[0x270FA5388](v6);
  unint64_t v109 = (char *)v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for SymmetricKey();
  uint64_t v107 = *(void *)(v111 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v111);
  uint64_t v101 = (char *)v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v106 = (char *)v95 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v102 = (uint64_t)v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v108 = (void (*)(char *, char *, uint64_t))((char *)v95 - v14);
  uint64_t v110 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v112 = *(void *)(v110 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v110);
  uint64_t v100 = (uint64_t)v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v105 = (uint64_t)v95 - v17;
  uint64_t v18 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v113 = (void *)((char *)v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_SKOutgoingRatchet?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for MPPB_SKOutgoingRatchet(0);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v117 = 0;
  long long v115 = 0u;
  long long v116 = 0u;
  unint64_t v28 = v3;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
  uint64_t v29 = a1;
  unint64_t v30 = v118;
  Message.init(serializedData:extensions:partial:options:)();
  if (v30)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
    outlined destroy of TetraSessionStates?((uint64_t)v23, &demangling cache variable for type metadata for MPPB_SKOutgoingRatchet?);
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    swift_allocError();
    unsigned char *v31 = 5;
    swift_willThrow();

    outlined consume of Data._Representation(a1, a2);
    type metadata accessor for SKOutgoingRatchet(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    long long v99 = v28;
    uint64_t v97 = a1;
    unint64_t v98 = a2;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v24);
    _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0((uint64_t)v23, (uint64_t)v27, type metadata accessor for MPPB_SKOutgoingRatchet);
    uint64_t v96 = v24;
    uint64_t v32 = *(int *)(v24 + 20);
    unint64_t v118 = v27;
    long long v33 = (uint64_t *)&v27[v32];
    unint64_t v34 = v33[1];
    if (v34 >> 60 == 15) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = *v33;
    }
    if (v34 >> 60 == 15) {
      unint64_t v36 = 0xC000000000000000;
    }
    else {
      unint64_t v36 = v33[1];
    }
    outlined copy of Data?(*v33, v34);
    if (one-time initialization token for statusKitRatchetStep != -1) {
      swift_once();
    }
    uint64_t v37 = statusKitRatchetStep;
    unint64_t v38 = unk_26AC05250;
    long long v39 = xmmword_26AC05258;
    uint64_t v40 = qword_26AC05268;
    char v41 = byte_26AC05270;
    *((void *)&v116 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA256>);
    int v117 = &protocol witness table for HKDFRatchet<A>;
    uint64_t v42 = swift_allocObject();
    *(void *)&long long v115 = v42;
    *(void *)(v42 + 16) = v37;
    *(void *)(v42 + 24) = v38;
    *(_OWORD *)(v42 + 32) = v39;
    *(void *)(v42 + 48) = v40;
    *(unsigned char *)(v42 + 56) = v41;
    outlined copy of Data._Representation(v37, v38);
    outlined copy of Data._Representation(v39, *((unint64_t *)&v39 + 1));
    uint64_t v43 = (uint64_t (*)(void, void, void))v113;
    SymmetricRatchet.init(data:step:)(v35, v36, (uint64_t)&v115, (unint64_t)v113);
    uint64_t v44 = v99;
    unint64_t v45 = &v99[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet];
    _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0((uint64_t)v43, (uint64_t)&v99[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet], (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
    uint64_t v46 = v108;
    outlined init with copy of MPPB_KeyAndIndex?((uint64_t)&v118[*(int *)(v96 + 32)], (uint64_t)v108);
    uint64_t v47 = v112 + 48;
    unint64_t v48 = *(void **)(v112 + 48);
    uint64_t v49 = v110;
    int v50 = ((uint64_t (*)(void, uint64_t, uint64_t))v48)(v46, 1, v110);
    uint64_t v112 = v47;
    v95[1] = v45;
    uint64_t v113 = v48;
    if (v50 == 1)
    {
      uint64_t v51 = v105;
      UnknownStorage.init()();
      *(_OWORD *)(v51 + *(int *)(v49 + 20)) = xmmword_216494780;
      uint64_t v52 = v51 + *(int *)(v49 + 24);
      *(void *)uint64_t v52 = 0;
      *(unsigned char *)(v52 + 8) = 1;
      uint64_t v53 = v51;
      outlined destroy of TetraSessionStates?((uint64_t)v46, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    }
    else
    {
      uint64_t v53 = v105;
      _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0((uint64_t)v46, v105, type metadata accessor for MPPB_KeyAndIndex);
    }
    uint64_t v54 = v106;
    uint64_t v55 = v107;
    unint64_t v56 = (uint64_t *)(v53 + *(int *)(v49 + 20));
    uint64_t v57 = *v56;
    unint64_t v58 = v56[1];
    if (v58 >> 60 == 15) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = *v56;
    }
    if (v58 >> 60 == 15) {
      unint64_t v60 = 0xC000000000000000;
    }
    else {
      unint64_t v60 = v58;
    }
    *(void *)&long long v115 = v59;
    *((void *)&v115 + 1) = v60;
    outlined copy of Data?(v57, v58);
    SymmetricKey.init<A>(data:)();
    uint64_t v61 = v53 + *(int *)(v49 + 24);
    if (*(unsigned char *)(v61 + 8)) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)v61;
    }
    outlined destroy of SymmetricRatchet(v53, type metadata accessor for MPPB_KeyAndIndex);
    uint64_t v63 = &v44[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey];
    uint64_t v64 = v54;
    uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v65(&v44[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey], v64, v111);
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v63[*(int *)(v66 + 48)] = v62;
    uint64_t v67 = v96;
    uint64_t v68 = (uint64_t)v118;
    long long v69 = (uint64_t *)&v118[*(int *)(v96 + 24)];
    uint64_t v70 = *v69;
    unint64_t v71 = v69[1];
    if (v71 >> 60 == 15) {
      uint64_t v72 = 0;
    }
    else {
      uint64_t v72 = *v69;
    }
    if (v71 >> 60 == 15) {
      unint64_t v73 = 0xC000000000000000;
    }
    else {
      unint64_t v73 = v71;
    }
    *(void *)&long long v115 = v72;
    *((void *)&v115 + 1) = v73;
    outlined copy of Data?(v70, v71);
    uint64_t v74 = v109;
    P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
    uint64_t v107 = v66;
    uint64_t v108 = v65;
    (*(void (**)(char *, char *, uint64_t))(v103 + 32))(&v99[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_signingKey], v74, v104);
    uint64_t v76 = v102;
    outlined init with copy of MPPB_KeyAndIndex?(v68 + *(int *)(v67 + 28), v102);
    uint64_t v77 = v110;
    int v78 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v113)(v76, 1, v110);
    unint64_t v79 = v98;
    uint64_t v80 = v97;
    uint64_t v81 = v100;
    if (v78 == 1)
    {
      UnknownStorage.init()();
      *(_OWORD *)(v81 + *(int *)(v77 + 20)) = xmmword_216494780;
      uint64_t v82 = v81 + *(int *)(v77 + 24);
      *(void *)uint64_t v82 = 0;
      *(unsigned char *)(v82 + 8) = 1;
      outlined destroy of TetraSessionStates?(v76, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    }
    else
    {
      _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0(v76, v100, type metadata accessor for MPPB_KeyAndIndex);
    }
    uint64_t v83 = v111;
    uint64_t v84 = v101;
    uint64_t v85 = (uint64_t *)(v81 + *(int *)(v77 + 20));
    uint64_t v86 = *v85;
    unint64_t v87 = v85[1];
    if (v87 >> 60 == 15) {
      uint64_t v88 = 0;
    }
    else {
      uint64_t v88 = *v85;
    }
    unint64_t v89 = 0xC000000000000000;
    if (v87 >> 60 != 15) {
      unint64_t v89 = v87;
    }
    *(void *)&long long v115 = v88;
    *((void *)&v115 + 1) = v89;
    outlined copy of Data?(v86, v87);
    SymmetricKey.init<A>(data:)();
    uint64_t v90 = v81 + *(int *)(v77 + 24);
    if (*(unsigned char *)(v90 + 8)) {
      uint64_t v91 = 0;
    }
    else {
      uint64_t v91 = *(void *)v90;
    }
    outlined destroy of SymmetricRatchet(v81, type metadata accessor for MPPB_KeyAndIndex);
    outlined destroy of SymmetricRatchet((uint64_t)v118, type metadata accessor for MPPB_SKOutgoingRatchet);
    uint64_t v92 = v99;
    uint64_t v93 = &v99[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey];
    v108(&v99[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey], v84, v83);
    *(void *)&v93[*(int *)(v107 + 48)] = v91;

    uint64_t v94 = (objc_class *)type metadata accessor for SKOutgoingRatchet(0);
    v114.receiver = v92;
    v114.super_class = v94;
    uint64_t v29 = (uint64_t)objc_msgSendSuper2(&v114, sel_init);
    outlined consume of Data._Representation(v80, v79);
  }
  return v29;
}

id SKOutgoingRatchet.init()()
{
  uint64_t v1 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v62 = *(void *)(v1 - 8);
  uint64_t v63 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v61 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  MEMORY[0x270FA5388](v64);
  unint64_t v58 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v55);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SymmetricKeySize();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for SymmetricKey();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v59 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unint64_t v60 = (char *)&v50 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v54 = (char *)&v50 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v50 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v50 - v18;
  uint64_t v65 = v0;
  static SymmetricKeySize.bits256.getter();
  SymmetricKey.init(size:)();
  uint64_t v56 = v8;
  uint64_t v57 = v19;
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v52 = v8 + 16;
  v53(v17, v19, v7);
  if (one-time initialization token for statusKitRatchetStep != -1) {
    swift_once();
  }
  uint64_t v20 = statusKitRatchetStep;
  unint64_t v21 = unk_26AC05250;
  long long v22 = xmmword_26AC05258;
  uint64_t v23 = qword_26AC05268;
  char v24 = byte_26AC05270;
  v67[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA256>);
  v67[4] = &protocol witness table for HKDFRatchet<A>;
  uint64_t v25 = swift_allocObject();
  v67[0] = v25;
  *(void *)(v25 + 16) = v20;
  *(void *)(v25 + 24) = v21;
  *(_OWORD *)(v25 + 32) = v22;
  *(void *)(v25 + 48) = v23;
  *(unsigned char *)(v25 + 56) = v24;
  uint64_t v26 = v55;
  *(void *)&v5[*(int *)(v55 + 20)] = MEMORY[0x263F8EE80];
  outlined copy of Data._Representation(v20, v21);
  outlined copy of Data._Representation(v22, *((unint64_t *)&v22 + 1));
  if (SymmetricKey.bitCount.getter() <= 255)
  {
    uint64_t v47 = type metadata accessor for CryptoKitError();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v47 - 8) + 104))(v48, *MEMORY[0x263F04530], v47);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v7);
    swift_bridgeObjectRelease();
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)v67, (uint64_t)&v5[*(int *)(v26 + 24)]);
    uint64_t v27 = v54;
    unint64_t v28 = v53;
    v53(v54, v17, v7);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
    uint64_t v29 = v56;
    unint64_t v30 = *(void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v55 = v56 + 8;
    uint64_t v51 = v30;
    v30(v17, v7);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v31(v5, v27, v7);
    uint64_t v33 = v64;
    uint64_t v32 = v65;
    *(void *)&v5[*(int *)(v64 + 48)] = 0;
    unint64_t v34 = &v32[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet];
    _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0((uint64_t)v5, (uint64_t)&v32[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet], (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
    swift_beginAccess();
    uint64_t v35 = *(int *)(v33 + 48);
    unint64_t v36 = v58;
    v28(v58, v34, v7);
    uint64_t v37 = *(void *)&v34[v35];
    unint64_t v38 = &v32[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey];
    v31(&v32[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey], v36, v7);
    *(void *)&v38[*(int *)(v33 + 48)] = v37;
    long long v39 = v61;
    P256.Signing.PrivateKey.init(compactRepresentable:)();
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(&v32[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_signingKey], v39, v63);
    swift_beginAccess();
    unint64_t v40 = *(void *)&v34[*(int *)(v33 + 48)];
    if (v40 != -1)
    {
      uint64_t v41 = v59;
      SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v40, 1, v59);
      uint64_t v42 = v60;
      v31(v60, (char *)v41, v7);
      swift_endAccess();
      v51(v57, v7);
      id v43 = v65;
      uint64_t v44 = &v65[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey];
      v31(&v65[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey], v42, v7);
      *(void *)&v44[*(int *)(v33 + 48)] = v40;

      unint64_t v45 = (objc_class *)type metadata accessor for SKOutgoingRatchet(0);
      v66.receiver = v43;
      v66.super_class = v45;
      return objc_msgSendSuper2(&v66, sel_init);
    }
  }
  lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
  swift_allocError();
  unsigned char *v49 = 0;
  swift_willThrow();
  swift_endAccess();

  id result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

id static SKOutgoingRatchet.generate()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

Swift::Bool __swiftcall SKOutgoingRatchet.ratchetForward()()
{
  uint64_t v56 = type metadata accessor for SymmetricKey();
  id v1 = *(void **)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v55 = (uint64_t)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v53 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v43 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v17 = v0 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet;
  swift_beginAccess();
  uint64_t v18 = *(int *)(v3 + 48);
  unint64_t v19 = *(void *)(v17 + v18);
  if (v19 <= 0xFFFE)
  {
    uint64_t v49 = v8;
    uint64_t v51 = v11;
    uint64_t v20 = v56;
    uint64_t v44 = (void (*)(char *, uint64_t, uint64_t))v1[2];
    unint64_t v45 = v1 + 2;
    v44(v16, v17, v56);
    *(void *)&v16[v18] = v19;
    uint64_t v54 = v0;
    uint64_t v52 = v3;
    unint64_t v21 = (void (*)(char *, char *, uint64_t))v1[4];
    uint64_t v47 = v16;
    v21(v14, v16, v20);
    uint64_t v22 = *(int *)(v3 + 48);
    *(void *)&v14[v22] = v19;
    uint64_t v23 = v51;
    uint64_t v48 = v14;
    uint64_t v46 = v21;
    v21(v51, v14, v20);
    *(void *)&v23[v22] = v19;
    uint64_t v24 = v54 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey;
    swift_beginAccess();
    uint64_t v25 = (void (*)(uint64_t, char *, uint64_t))v1[5];
    uint64_t v50 = v1 + 5;
    v25(v24, v23, v20);
    uint64_t v26 = v52;
    *(void *)(v24 + *(int *)(v52 + 48)) = v19;
    swift_endAccess();
    swift_beginAccess();
    unint64_t v27 = *(void *)(v17 + *(int *)(v26 + 48));
    if (v27 != -1)
    {
      id v43 = v25;
      unint64_t v28 = v23;
      uint64_t v29 = v55;
      SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v27, 1, v55);
      uint64_t v30 = *(int *)(v26 + 48);
      uint64_t v31 = v53;
      uint64_t v32 = v29;
      uint64_t v33 = v46;
      v46(v53, (char *)v32, v20);
      swift_endAccess();
      *(void *)&v31[v30] = v27;
      uint64_t v34 = *(int *)(v26 + 48);
      uint64_t v35 = (uint64_t)v49;
      v33(v49, v31, v20);
      uint64_t v36 = *(void *)&v31[v34];
      *(void *)(v35 + v30) = v36;
      uint64_t v37 = *(int *)(v26 + 48);
      unint64_t v38 = v47;
      v44(v47, v35, v20);
      *(void *)&v38[v37] = v36;
      long long v39 = v48;
      v33(v48, v38, v20);
      uint64_t v40 = *(int *)(v26 + 48);
      *(void *)&v39[v40] = v36;
      v33(v28, v39, v20);
      *(void *)&v28[v40] = v36;
      uint64_t v41 = v54 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey;
      swift_beginAccess();
      v43(v41, v28, v20);
      *(void *)(v41 + *(int *)(v26 + 48)) = v36;
      swift_endAccess();
      outlined destroy of TetraSessionStates?(v35, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      return 1;
    }
    swift_endAccess();
  }
  return 0;
}

uint64_t SKOutgoingRatchet.sealMessage(_:authenticating:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v78 = a3;
  unint64_t v79 = a4;
  unint64_t v89 = a1;
  unint64_t v90 = a2;
  uint64_t v71 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v80 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v85 = *(void *)(v6 - 8);
  uint64_t v86 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v84 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v87 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v81 = *(void *)(v10 - 8);
  uint64_t v82 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v83 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MPPB_SKPaddedStatus(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v77 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v69 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v69 - v22;
  uint64_t v24 = *(int *)(v21 + 48);
  uint64_t v88 = v4;
  uint64_t v25 = (char *)(v4 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey);
  swift_beginAccess();
  uint64_t v76 = v15;
  id v26 = (id)*(int *)(v15 + 48);
  uint64_t v27 = type metadata accessor for SymmetricKey();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  uint64_t v73 = v28 + 16;
  uint64_t v72 = v29;
  v29(v20, v25, v27);
  unint64_t v30 = *(void *)((char *)v26 + (void)v25);
  uint64_t v74 = v28;
  uint64_t v31 = v28;
  uint64_t v32 = v27;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v23, v20, v27);
  uint64_t v75 = v24;
  *(void *)&v23[v24] = v30;
  if (v30 >= 0xFFFF)
  {
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    swift_allocError();
    *uint64_t v40 = 0;
    swift_willThrow();
    goto LABEL_5;
  }
  uint64_t v34 = v89;
  unint64_t v33 = v90;
  outlined copy of Data._Representation(v89, v90);
  UnknownStorage.init()();
  uint64_t v35 = &v14[*(int *)(v12 + 20)];
  *(_OWORD *)uint64_t v35 = xmmword_216494780;
  uint64_t v36 = *(int *)(v12 + 24);
  *(void *)uint64_t v35 = v34;
  *((void *)v35 + 1) = v33;
  *(_OWORD *)&v14[v36] = xmmword_216494380;
  id v26 = v14;
  uint64_t v37 = (uint64_t)v95;
  unint64_t v38 = MPPB_SKPaddedStatus.paddedData()();
  if (v37)
  {
    outlined destroy of SymmetricRatchet((uint64_t)v14, type metadata accessor for MPPB_SKPaddedStatus);
LABEL_5:
    outlined destroy of TetraSessionStates?((uint64_t)v23, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    return (uint64_t)v26;
  }
  long long v95 = v23;
  unint64_t v90 = (unint64_t)v14;
  unint64_t v93 = v38;
  unint64_t v94 = v39;
  uint64_t v42 = type metadata accessor for AES.GCM.Nonce();
  uint64_t v43 = (uint64_t)v87;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v87, 1, 1, v42);
  uint64_t v44 = v88 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_signingKey;
  unint64_t v45 = v84;
  P256.Signing.PrivateKey.publicKey.getter();
  uint64_t v46 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  unint64_t v48 = v47;
  (*(void (**)(char *, uint64_t))(v85 + 8))(v45, v86);
  if (v48 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v91 = v46;
  unint64_t v92 = v48;
  lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v49 = v83;
  static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)();
  outlined consume of Data?(v46, v48);
  outlined destroy of TetraSessionStates?(v43, &demangling cache variable for type metadata for AES.GCM.Nonce?);
  outlined consume of Data._Representation(v93, v94);
  unint64_t v89 = AES.GCM.SealedBox.combined.getter();
  if (v50 >> 60 == 15)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v51 = v50;
  uint64_t v88 = v44;
  uint64_t v52 = *(int *)(v76 + 48);
  uint64_t v53 = v77;
  uint64_t v54 = (uint64_t)v95;
  v72(v77, v95, v32);
  unint64_t v55 = *(void *)(v54 + v75);
  *(void *)&v53[v52] = v55;
  unint64_t v87 = (char *)v55;
  if (v55 < 0x10000)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v53, v32);
    uint64_t v56 = v89;
    unint64_t v93 = v89;
    unint64_t v94 = v51;
    outlined copy of Data?(v89, v51);
    uint64_t v58 = v78;
    unint64_t v57 = v79;
    outlined copy of Data._Representation(v78, v79);
    specialized Data.append<A>(contentsOf:)(v58, v57);
    outlined consume of Data._Representation(v58, v57);
    uint64_t v59 = v93;
    unint64_t v60 = v94;
    uint64_t v91 = v93;
    unint64_t v92 = v94;
    uint64_t v61 = v80;
    P256.Signing.PrivateKey.signature<A>(for:)();
    outlined consume of Data._Representation(v59, v60);
    uint64_t v62 = P256.Signing.ECDSASignature.rawRepresentation.getter();
    unint64_t v64 = v63;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v61, v71);
    id v65 = objc_allocWithZone((Class)MPStatusKitMessage);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v67 = v62;
    Class v68 = Data._bridgeToObjectiveC()().super.isa;
    id v26 = objc_msgSend(v65, sel_initWithIndex_encryptedMessage_signature_, (unsigned __int16)v87, isa, v68);
    outlined consume of Data._Representation(v67, v64);
    outlined consume of Data?(v56, v51);

    (*(void (**)(char *, uint64_t))(v81 + 8))(v49, v82);
    outlined destroy of SymmetricRatchet(v90, type metadata accessor for MPPB_SKPaddedStatus);
    outlined destroy of TetraSessionStates?((uint64_t)v95, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    return (uint64_t)v26;
  }
LABEL_13:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

MPStatusKitSubscriptionKeys __swiftcall SKOutgoingRatchet.currentSubscriptionKeys()()
{
  uint64_t v1 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v39 = *(void *)(v1 - 8);
  uint64_t v40 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v37 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v4 = v3 - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v36 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v36 = *(int *)(v4 + 56);
  uint64_t v38 = v0;
  uint64_t v13 = v0 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey;
  swift_beginAccess();
  uint64_t v14 = *(int *)(v4 + 56);
  uint64_t v15 = type metadata accessor for SymmetricKey();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v10, v13, v15);
  unint64_t v18 = *(void *)(v13 + v14);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v12, v10, v15);
  *(void *)&v12[v36] = v18;
  uint64_t v19 = *(int *)(v4 + 56);
  v17(v7, (uint64_t)v12, v15);
  *(void *)&v7[v19] = v18;
  if (v18 >= 0x10000) {
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v15);
  type metadata accessor for NSData();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v20 = v41;
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  uint64_t v24 = v37;
  P256.Signing.PrivateKey.publicKey.getter();
  uint64_t v25 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  unint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v40);
  if (v27 >> 60 == 15)
  {
    __break(1u);
LABEL_5:
    uint64_t v35 = (objc_class *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_6;
  }
  id v28 = objc_allocWithZone((Class)MPStatusKitSubscriptionKeys);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v30 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v31 = (objc_class *)objc_msgSend(v28, sel_initWithIndex_chainKey_signingKey_, (unsigned __int16)v18, isa, v30);
  outlined consume of Data?(v25, v27);
  outlined consume of Data._Representation(v21, v23);

  outlined destroy of TetraSessionStates?((uint64_t)v12, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v35 = v31;
LABEL_6:
  result._signingKey = v34;
  result._chainKey = v33;
  result.super.Class isa = v35;
  result._index = v32;
  return result;
}

uint64_t SKOutgoingRatchet.serializedData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v83 = (uint64_t)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
     - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v91 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for MPPB_SKOutgoingRatchet(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  uint64_t v80 = &v15[v13[5]];
  long long v86 = xmmword_216494780;
  *(_OWORD *)uint64_t v80 = xmmword_216494780;
  uint64_t v81 = &v15[v13[6]];
  *(_OWORD *)uint64_t v81 = xmmword_216494780;
  uint64_t v16 = v13[7];
  uint64_t v82 = v13;
  uint64_t v75 = &v15[v16];
  unint64_t v79 = v15;
  uint64_t v17 = *(void (**)(void))(v11 + 56);
  uint64_t v88 = v11 + 56;
  unint64_t v89 = v17;
  v17();
  uint64_t v78 = &v15[v13[8]];
  v17();
  uint64_t v18 = v1 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey;
  swift_beginAccess();
  uint64_t v19 = v4;
  uint64_t v68 = v4;
  uint64_t v20 = *(int *)(v4 + 56);
  uint64_t v21 = v7;
  uint64_t v90 = v7;
  unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v23 = v92;
  v22(v6, v18, v92);
  uint64_t v69 = v22;
  uint64_t v24 = *(void *)(v18 + v20);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v76 = v21 + 32;
  uint64_t v77 = v25;
  uint64_t v84 = v9;
  v25(v9, v6, v23);
  v22(v6, (uint64_t)v9, v23);
  *(void *)&v6[*(int *)(v19 + 56)] = v24;
  uint64_t v26 = v91;
  UnknownStorage.init()();
  uint64_t v27 = v10;
  uint64_t v85 = v10;
  uint64_t v28 = v26 + *(int *)(v10 + 20);
  *(_OWORD *)uint64_t v28 = v86;
  uint64_t v29 = v26 + *(int *)(v27 + 24);
  *(void *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 8) = 1;
  unint64_t v74 = type metadata accessor for NSData();
  uint64_t v73 = closure #1 in SymmetricKey.toZeroizingNSData();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v72 = 0;
  Class v30 = v94;
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  *(void *)uint64_t v28 = v31;
  *(void *)(v28 + 8) = v33;
  outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)uint64_t v29 = v24;
  *(unsigned char *)(v29 + 8) = 0;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v90 + 8);
  v90 += 8;
  uint64_t v71 = v34;
  uint64_t v35 = v84;
  uint64_t v36 = v92;
  v34(v84, v92);
  uint64_t v37 = (uint64_t)v75;
  outlined destroy of TetraSessionStates?((uint64_t)v75, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  uint64_t v70 = type metadata accessor for MPPB_KeyAndIndex;
  _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0(v91, v37, type metadata accessor for MPPB_KeyAndIndex);
  uint64_t v38 = v85;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v89)(v37, 0, 1, v85);
  uint64_t v39 = v87 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey;
  swift_beginAccess();
  uint64_t v40 = v68;
  uint64_t v41 = *(int *)(v68 + 56);
  uint64_t v42 = (void (*)(char *, char *, uint64_t))v69;
  v69(v6, v39, v36);
  uint64_t v43 = *(void *)(v39 + v41);
  v77(v35, v6, v36);
  v42(v6, v35, v36);
  *(void *)&v6[*(int *)(v40 + 56)] = v43;
  uint64_t v44 = v91;
  UnknownStorage.init()();
  uint64_t v45 = v44 + *(int *)(v38 + 20);
  *(_OWORD *)uint64_t v45 = v86;
  uint64_t v46 = v44 + *(int *)(v38 + 24);
  *(void *)uint64_t v46 = 0;
  *(unsigned char *)(v46 + 8) = 1;
  uint64_t v47 = v72;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  unint64_t v48 = v93;
  uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;

  *(void *)uint64_t v45 = v49;
  *(void *)(v45 + 8) = v51;
  outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)uint64_t v46 = v43;
  *(unsigned char *)(v46 + 8) = 0;
  v71(v84, v92);
  uint64_t v52 = (uint64_t)v78;
  outlined destroy of TetraSessionStates?((uint64_t)v78, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0(v44, v52, v70);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v89)(v52, 0, 1, v85);
  uint64_t v53 = v87 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet;
  swift_beginAccess();
  uint64_t v54 = v83;
  outlined init with copy of SymmetricRatchet(v53, v83);
  uint64_t v55 = SymmetricRatchet.serializedData()();
  uint64_t v57 = v56;
  outlined destroy of SymmetricRatchet(v54, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
  uint64_t v58 = (uint64_t *)v80;
  uint64_t v59 = outlined consume of Data?(*(void *)v80, *((void *)v80 + 1));
  *uint64_t v58 = v55;
  v58[1] = v57;
  uint64_t v60 = (uint64_t)v79;
  uint64_t v61 = MEMORY[0x2166CC5D0](v59);
  uint64_t v63 = v62;
  unint64_t v64 = (uint64_t *)v81;
  outlined consume of Data?(*(void *)v81, *((void *)v81 + 1));
  uint64_t *v64 = v61;
  v64[1] = v63;
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKOutgoingRatchet);
  uint64_t v65 = Message.serializedData(partial:)();
  if (v47)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v66 = v65;
    outlined destroy of SymmetricRatchet(v60, type metadata accessor for MPPB_SKOutgoingRatchet);
    return v66;
  }
  return result;
}

uint64_t SKOutgoingRatchet.signingKeyIdentifier()()
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v0 = type metadata accessor for SHA256();
  uint64_t v20 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SHA256Digest();
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  P256.Signing.PrivateKey.publicKey.getter();
  uint64_t v10 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v12 >> 60 == 15) {
LABEL_12:
  }
    __break(1u);
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
  dispatch thunk of HashFunction.init()();
  switch(v12 >> 62)
  {
    case 1uLL:
      if (v10 >> 32 < (int)v10)
      {
        __break(1u);
        goto LABEL_12;
      }
      outlined copy of Data._Representation(v10, v12);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v10, v10 >> 32);
LABEL_7:
      outlined consume of Data?(v10, v12);
LABEL_10:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v2, v0);
      outlined consume of Data?(v10, v12);
      uint64_t v24 = v7;
      uint64_t v25 = _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
      uint64_t v16 = v21;
      (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(boxed_opaque_existential_1, v9, v7);
      __swift_project_boxed_opaque_existential_1(v23, v24);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
      uint64_t v17 = v22;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
      return v17;
    case 2uLL:
      uint64_t v13 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      outlined copy of Data?(v10, v12);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v14);
      swift_release();
      swift_release();
      goto LABEL_7;
    case 3uLL:
      memset(v23, 0, 14);
      goto LABEL_9;
    default:
      v23[0] = v10;
      LOWORD(v23[1]) = v12;
      BYTE2(v23[1]) = BYTE2(v12);
      BYTE3(v23[1]) = BYTE3(v12);
      BYTE4(v23[1]) = BYTE4(v12);
      BYTE5(v23[1]) = BYTE5(v12);
LABEL_9:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      outlined consume of Data?(v10, v12);
      goto LABEL_10;
  }
}

id SKOutgoingRatchet.__deallocating_deinit()
{
  return SKRatchet.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for SKOutgoingRatchet);
}

id SKRatchet.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t ObjC metadata update function for SKOutgoingRatchet()
{
  return type metadata accessor for SKOutgoingRatchet(0);
}

uint64_t type metadata accessor for SKOutgoingRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for SKOutgoingRatchet);
}

uint64_t type metadata completion function for SKOutgoingRatchet()
{
  uint64_t result = type metadata accessor for SymmetricRatchet();
  if (v1 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for P256.Signing.PrivateKey();
    if (v2 <= 0x3F)
    {
      uint64_t v7 = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for SymmetricKey();
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        uint64_t v8 = &v5;
        swift_getTupleTypeLayout2();
        uint64_t v9 = &v4;
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t SKIncomingRatchet.init(data:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v104 = *(void *)(v6 - 8);
  uint64_t v105 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v107 = (char *)v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v103 = (char *)v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v112 = (char *)v93 - v11;
  uint64_t v12 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v99 = *(void *)(v12 - 8);
  uint64_t v100 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v101 = (char *)v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v102 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_SKIncomingRatchet?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v22 = type metadata accessor for MPPB_SKIncomingRatchet(0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = 0;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v26 = v3;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  uint64_t v29 = v106;
  Message.init(serializedData:extensions:partial:options:)();
  Class v30 = v29;
  if (v29)
  {

    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v23 + 56))(v21, 1, 1, v22);
    outlined destroy of TetraSessionStates?((uint64_t)v21, &demangling cache variable for type metadata for MPPB_SKIncomingRatchet?);
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    swift_allocError();
    unsigned char *v31 = 5;
    swift_willThrow();
    outlined consume of Data._Representation(v27, v28);
LABEL_17:

    type metadata accessor for SKIncomingRatchet(0);
    swift_deallocPartialClassInstance();
    return (uint64_t)v18;
  }
  uint64_t v97 = v26;
  unint64_t v98 = v28;
  uint64_t v94 = v27;
  (*(void (**)(char *, void, uint64_t, unint64_t))(v23 + 56))(v21, 0, 1, v22);
  _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0((uint64_t)v21, (uint64_t)v25, type metadata accessor for MPPB_SKIncomingRatchet);
  uint64_t v32 = (uint64_t *)&v25[*(int *)(v22 + 24)];
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  if (v34 >> 60 == 15) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = (void *)*v32;
  }
  unint64_t v106 = v35;
  unint64_t v36 = 0xC000000000000000;
  if (v34 >> 60 != 15) {
    unint64_t v36 = v34;
  }
  unint64_t v95 = v36;
  uint64_t v96 = v25;
  outlined copy of Data?(v33, v34);
  if (one-time initialization token for statusKitRatchetStep != -1) {
LABEL_52:
  }
    swift_once();
  uint64_t v38 = statusKitRatchetStep;
  unint64_t v37 = unk_26AC05250;
  unint64_t v39 = *((void *)&xmmword_26AC05258 + 1);
  uint64_t v18 = (char *)xmmword_26AC05258;
  uint64_t v40 = qword_26AC05268;
  char v41 = byte_26AC05270;
  *((void *)&v110 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA256>);
  uint64_t v111 = &protocol witness table for HKDFRatchet<A>;
  uint64_t v42 = swift_allocObject();
  *(void *)&long long v109 = v42;
  *(void *)(v42 + 16) = v38;
  *(void *)(v42 + 24) = v37;
  *(void *)(v42 + 32) = v18;
  *(void *)(v42 + 40) = v39;
  *(void *)(v42 + 48) = v40;
  *(unsigned char *)(v42 + 56) = v41;
  outlined copy of Data._Representation(v38, v37);
  outlined copy of Data._Representation((uint64_t)v18, v39);
  uint64_t v43 = v102;
  SymmetricRatchet.init(data:step:)((uint64_t)v106, v95, (uint64_t)&v109, (unint64_t)v102);
  if (v30)
  {
    outlined consume of Data._Representation(v94, v98);
    outlined destroy of SymmetricRatchet((uint64_t)v96, type metadata accessor for MPPB_SKIncomingRatchet);
    uint64_t v26 = v97;
    goto LABEL_17;
  }
  uint64_t v44 = v97;
  _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0((uint64_t)v43, (uint64_t)&v97[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet], (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
  uint64_t v45 = (uint64_t)v96;
  uint64_t v46 = (uint64_t *)&v96[*(int *)(v22 + 28)];
  uint64_t v47 = *v46;
  unint64_t v48 = v46[1];
  if (v48 >> 60 == 15) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = *v46;
  }
  unint64_t v50 = 0xC000000000000000;
  if (v48 >> 60 != 15) {
    unint64_t v50 = v48;
  }
  *(void *)&long long v109 = v49;
  *((void *)&v109 + 1) = v50;
  outlined copy of Data?(v47, v48);
  uint64_t v51 = v101;
  P256.Signing.PublicKey.init<A>(compactRepresentation:)();
  unint64_t v52 = v98;
  (*(void (**)(char *, char *, uint64_t))(v99 + 32))(&v44[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_signingPublicKey], v51, v100);
  uint64_t v54 = *(void *)v45;
  uint64_t v55 = *(void *)(*(void *)v45 + 16);
  if (!v55)
  {
    Class v30 = (void *)MEMORY[0x263F8EE80];
LABEL_50:
    outlined destroy of SymmetricRatchet(v45, type metadata accessor for MPPB_SKIncomingRatchet);
    *(void *)&v44[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_messageKeys] = v30;

    uint64_t v92 = (objc_class *)type metadata accessor for SKIncomingRatchet(0);
    v108.receiver = v44;
    v108.super_class = v92;
    uint64_t v18 = (char *)objc_msgSendSuper2(&v108, sel_init);
    outlined consume of Data._Representation(v94, v52);
    return (uint64_t)v18;
  }
  unint64_t v95 = 0;
  uint64_t v56 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v57 = v54
      + ((*(unsigned __int8 *)(*(void *)(v56 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v56 - 8) + 80));
  uint64_t v100 = *(void *)(*(void *)(v56 - 8) + 72);
  uint64_t v58 = v104;
  unint64_t v106 = (void *)(v104 + 56);
  uint64_t v101 = (char *)(v104 + 32);
  uint64_t v102 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
  uint64_t v99 = v104 + 40;
  v93[1] = v54;
  swift_bridgeObjectRetain();
  Class v30 = (void *)MEMORY[0x263F8EE80];
  uint64_t v59 = v105;
  uint64_t v60 = (uint64_t)v112;
  while (1)
  {
    uint64_t v63 = *(int *)(v56 + 24);
    if (*(unsigned char *)(v57 + v63 + 8))
    {
      LOWORD(v64) = 0;
    }
    else
    {
      unint64_t v64 = *(void *)(v57 + v63);
      if (v64 >= 0x10000) {
        goto LABEL_54;
      }
    }
    uint64_t v65 = (uint64_t *)(v57 + *(int *)(v56 + 20));
    uint64_t v66 = *v65;
    unint64_t v67 = v65[1];
    if (v67 >> 60 == 15) {
      uint64_t v68 = 0;
    }
    else {
      uint64_t v68 = *v65;
    }
    unint64_t v69 = 0xC000000000000000;
    if (v67 >> 60 != 15) {
      unint64_t v69 = v67;
    }
    *(void *)&long long v109 = v68;
    *((void *)&v109 + 1) = v69;
    outlined copy of Data?(v66, v67);
    SymmetricKey.init<A>(data:)();
    uint64_t v70 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v106;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))*v106)(v60, 0, 1, v59);
    if ((*v102)(v60, 1, v59) == 1)
    {
      outlined destroy of TetraSessionStates?(v60, &demangling cache variable for type metadata for SymmetricKey?);
      unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v64);
      if (v72)
      {
        unint64_t v73 = v71;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v109 = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          Class v30 = (void *)v109;
        }
        uint64_t v75 = v103;
        (*(void (**)(char *, unint64_t, uint64_t))(v58 + 32))(v103, v30[7] + *(void *)(v58 + 72) * v73, v59);
        specialized _NativeDictionary._delete(at:)(v73, (uint64_t)v30);
        swift_bridgeObjectRelease();
        uint64_t v62 = (uint64_t)v75;
        uint64_t v61 = 0;
      }
      else
      {
        uint64_t v61 = 1;
        uint64_t v62 = (uint64_t)v103;
      }
      v70(v62, v61, 1, v59);
      outlined destroy of TetraSessionStates?(v62, &demangling cache variable for type metadata for SymmetricKey?);
      goto LABEL_23;
    }
    uint64_t v76 = *(void (**)(unint64_t, char *, uint64_t))v101;
    (*(void (**)(char *, uint64_t, uint64_t))v101)(v107, v60, v59);
    int v77 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v109 = v30;
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v64);
    uint64_t v79 = v30[2];
    BOOL v80 = (v78 & 1) == 0;
    uint64_t v81 = v79 + v80;
    if (__OFADD__(v79, v80))
    {
      __break(1u);
      goto LABEL_52;
    }
    char v82 = v78;
    if (v30[3] >= v81)
    {
      uint64_t v85 = v107;
      if ((v77 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v85 = v107;
      }
      uint64_t v58 = v104;
      long long v86 = (void *)v109;
      if (v82) {
        goto LABEL_46;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, v77);
      unint64_t v83 = specialized __RawDictionaryStorage.find<A>(_:)(v64);
      if ((v82 & 1) != (v84 & 1)) {
        goto LABEL_55;
      }
      unint64_t v22 = v83;
      uint64_t v58 = v104;
      uint64_t v85 = v107;
      long long v86 = (void *)v109;
      if (v82)
      {
LABEL_46:
        unint64_t v91 = v86[7] + *(void *)(v58 + 72) * v22;
        uint64_t v59 = v105;
        (*(void (**)(unint64_t, char *, uint64_t))(v58 + 40))(v91, v85, v105);
        goto LABEL_47;
      }
    }
    v86[(v22 >> 6) + 8] |= 1 << v22;
    *(_WORD *)(v86[6] + 2 * v22) = v64;
    unint64_t v87 = v86[7] + *(void *)(v58 + 72) * v22;
    uint64_t v59 = v105;
    v76(v87, v85, v105);
    uint64_t v88 = v86[2];
    BOOL v89 = __OFADD__(v88, 1);
    uint64_t v90 = v88 + 1;
    if (v89) {
      break;
    }
    v86[2] = v90;
LABEL_47:
    Class v30 = (void *)v109;
    swift_bridgeObjectRelease();
LABEL_23:
    uint64_t v60 = (uint64_t)v112;
    v57 += v100;
    if (!--v55)
    {
      swift_bridgeObjectRelease();
      uint64_t v45 = (uint64_t)v96;
      uint64_t v44 = v97;
      unint64_t v52 = v98;
      goto LABEL_50;
    }
  }
  __break(1u);
LABEL_54:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_55:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t @objc SKOutgoingRatchet.init(data:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  id v6 = a3;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  return a5(v7, v9);
}

char *SKIncomingRatchet.init(key:index:signingKey:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v65 = a5;
  uint64_t v59 = a4;
  uint64_t v49 = a3;
  uint64_t v46 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v45 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  unint64_t v50 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v55);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SymmetricKey();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v48 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v44 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v61 = a1;
  unint64_t v62 = a2;
  uint64_t v58 = v5;
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  outlined copy of Data._Representation(a1, a2);
  SymmetricKey.init<A>(data:)();
  uint64_t v56 = v12;
  uint64_t v57 = v11;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  unint64_t v52 = v19;
  uint64_t v47 = v20;
  v20(v17, v19, v11);
  if (one-time initialization token for statusKitRatchetStep != -1) {
    swift_once();
  }
  uint64_t v21 = statusKitRatchetStep;
  unint64_t v22 = unk_26AC05250;
  long long v23 = xmmword_26AC05258;
  uint64_t v24 = qword_26AC05268;
  char v25 = byte_26AC05270;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA256>);
  unint64_t v64 = &protocol witness table for HKDFRatchet<A>;
  uint64_t v26 = swift_allocObject();
  uint64_t v61 = v26;
  *(void *)(v26 + 16) = v21;
  *(void *)(v26 + 24) = v22;
  *(_OWORD *)(v26 + 32) = v23;
  *(void *)(v26 + 48) = v24;
  *(unsigned char *)(v26 + 56) = v25;
  uint64_t v27 = v55;
  *(void *)&v10[*(int *)(v55 + 20)] = MEMORY[0x263F8EE80];
  outlined copy of Data._Representation(v21, v22);
  outlined copy of Data._Representation(v23, *((unint64_t *)&v23 + 1));
  if (SymmetricKey.bitCount.getter() > 255)
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)&v61, (uint64_t)&v10[*(int *)(v27 + 24)]);
    uint64_t v33 = v48;
    uint64_t v34 = v57;
    v47(v48, v17, v57);
    uint64_t v35 = (unsigned __int16)v49;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v61);
    uint64_t v36 = v56;
    uint64_t v55 = *(void *)(v56 + 8);
    ((void (*)(char *, uint64_t))v55)(v17, v34);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v10, v33, v34);
    *(void *)&v10[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48)] = v35;
    unint64_t v37 = v58;
    Class v30 = &v58[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet];
    _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0((uint64_t)v10, (uint64_t)&v58[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet], (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
    uint64_t v38 = v59;
    unint64_t v39 = v65;
    uint64_t v61 = v59;
    unint64_t v62 = v65;
    outlined copy of Data._Representation(v59, v65);
    char v41 = v50;
    uint64_t v40 = v51;
    P256.Signing.PublicKey.init<A>(compactRepresentation:)();
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v37[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_signingPublicKey], v41, v46);
      ((void (*)(char *, uint64_t))v55)(v52, v34);
      *(void *)&v37[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_messageKeys] = MEMORY[0x263F8EE80];

      uint64_t v43 = (objc_class *)type metadata accessor for SKIncomingRatchet(0);
      v60.receiver = v37;
      v60.super_class = v43;
      Class v30 = (char *)objc_msgSendSuper2(&v60, sel_init);
      outlined consume of Data._Representation(v38, v39);
      outlined consume of Data._Representation(v53, v54);
      return v30;
    }
    outlined consume of Data._Representation(v38, v39);
    outlined consume of Data._Representation(v53, v54);
    ((void (*)(char *, uint64_t))v55)(v52, v34);
    outlined destroy of SymmetricRatchet((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
  }
  else
  {
    uint64_t v28 = type metadata accessor for CryptoKitError();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v29, *MEMORY[0x263F04530], v28);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v61);
    Class v30 = *(char **)(v56 + 8);
    uint64_t v31 = v17;
    uint64_t v32 = v57;
    ((void (*)(char *, uint64_t))v30)(v31, v57);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v59, v65);
    outlined consume of Data._Representation(v53, v54);

    ((void (*)(char *, uint64_t))v30)(v52, v32);
  }
  type metadata accessor for SKIncomingRatchet(0);
  swift_deallocPartialClassInstance();
  return v30;
}

uint64_t SKIncomingRatchet.openStatus(index:encryptedMessage:authenticating:signature:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t, uint64_t, uint64_t), uint64_t a6, unint64_t a7)
{
  uint64_t v131 = a6;
  uint64_t v128 = a5;
  uint64_t v127 = a4;
  *(void *)&long long v130 = a2;
  *((void *)&v130 + 1) = a3;
  unint64_t v125 = a1;
  uint64_t v8 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v8 - 8);
  long long v116 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_SKPaddedStatus?);
  MEMORY[0x270FA5388](v10 - 8);
  Class v119 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for MPPB_SKPaddedStatus(0);
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  uint64_t v114 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v120 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  long long v115 = (char *)&v108 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v122 = (char *)&v108 - v18;
  uint64_t v19 = type metadata accessor for SymmetricKey();
  uint64_t v20 = *(void **)(v19 - 8);
  uint64_t v123 = v19;
  uint64_t v124 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unint64_t v121 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  char v25 = (char *)&v108 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v108 - v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.SealedBox?);
  MEMORY[0x270FA5388](v28 - 8);
  Class v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v126 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v108 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  unint64_t v37 = (char *)&v108 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v133 = v131;
  *((void *)&v133 + 1) = a7;
  outlined copy of Data._Representation(v131, a7);
  unint64_t v38 = lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v39 = v132;
  P256.Signing.ECDSASignature.init<A>(rawRepresentation:)();
  if (v39) {
    return (uint64_t)v30;
  }
  uint64_t v111 = v30;
  objc_super v108 = v25;
  uint64_t v113 = 0;
  long long v109 = v27;
  long long v110 = v33;
  uint64_t v112 = v31;
  uint64_t v131 = v34;
  uint64_t v132 = v35;
  uint64_t v40 = v129;
  uint64_t v41 = v130;
  uint64_t v42 = (uint64_t)v129 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_signingPublicKey;
  unint64_t v43 = *((void *)&v130 + 1);
  long long v133 = v130;
  outlined copy of Data._Representation(v130, *((unint64_t *)&v130 + 1));
  uint64_t v45 = v127;
  unint64_t v44 = (unint64_t)v128;
  outlined copy of Data._Representation(v127, (unint64_t)v128);
  specialized Data.append<A>(contentsOf:)(v45, v44);
  outlined consume of Data._Representation(v45, v44);
  long long v46 = v133;
  long long v136 = v133;
  char v47 = P256.Signing.PublicKey.isValidSignature<A>(_:for:)();
  outlined consume of Data._Representation(v46, *((unint64_t *)&v46 + 1));
  if ((v47 & 1) == 0)
  {
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    Class v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_allocError();
    char v51 = 1;
LABEL_8:
    *unint64_t v50 = v51;
    swift_willThrow();
LABEL_9:
    (*(void (**)(char *, uint64_t))(v132 + 8))(v37, v131);
    return (uint64_t)v30;
  }
  outlined copy of Data._Representation(v41, v43);
  uint64_t v48 = (uint64_t)v111;
  uint64_t v49 = v113;
  specialized AES.GCM.SealedBox.init<A>(combined:)(v41, v43);
  if (v49)
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v126 + 56))(v48, 1, 1, v112);
LABEL_7:
    outlined destroy of TetraSessionStates?(v48, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    Class v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_allocError();
    char v51 = 3;
    goto LABEL_8;
  }
  uint64_t v113 = 0;
  uint64_t v52 = v126;
  uint64_t v53 = v112;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v48, 0, 1, v112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v48, 1, v53) == 1) {
    goto LABEL_7;
  }
  *(void *)&long long v130 = v38;
  *((void *)&v130 + 1) = v42;
  uint64_t v55 = v110;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v110, v48, v53);
  unsigned __int16 v56 = v125;
  if (v125 > 0xFFFE)
  {
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    Class v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_allocError();
    *unint64_t v67 = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v53);
    goto LABEL_9;
  }
  uint64_t v57 = (uint64_t *)((char *)v40 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_messageKeys);
  swift_beginAccess();
  uint64_t v58 = *v57;
  if (!*(void *)(*v57 + 16) || (unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v56), (v60 & 1) == 0))
  {
    uint64_t v65 = (uint64_t)v122;
    uint64_t v128 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v124[7];
    v128(v122, 1, 1, v123);
    goto LABEL_18;
  }
  uint64_t v62 = v123;
  uint64_t v61 = v124;
  unint64_t v63 = *(void *)(v58 + 56) + v124[9] * v59;
  unint64_t v64 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v124[2];
  uint64_t v65 = (uint64_t)v122;
  uint64_t v127 = v124[9];
  uint64_t v128 = v64;
  ((void (*)(char *, unint64_t, uint64_t))v64)(v122, v63, v123);
  uint64_t v66 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v61[7];
  v66((char *)v65, 0, 1, v62);
  uint64_t v111 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v61[6];
  if (v111(v65, 1, v62) == 1)
  {
    uint64_t v128 = v66;
    uint64_t v52 = v126;
    uint64_t v53 = v112;
    uint64_t v55 = v110;
LABEL_18:
    outlined destroy of TetraSessionStates?(v65, &demangling cache variable for type metadata for SymmetricKey?);
    swift_beginAccess();
    uint64_t v68 = (uint64_t)v108;
    __int16 v69 = v125;
    uint64_t v70 = v113;
    SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v125, 1, (uint64_t)v108);
    swift_endAccess();
    if (v70)
    {
      *(void *)&long long v133 = v70;
      id v71 = v70;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {
        uint64_t v73 = v131;
        uint64_t v72 = v132;
        if (v137 == 3)
        {

          lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
          swift_allocError();
          *uint64_t v103 = 2;
          goto LABEL_35;
        }
        if (v137 == 1)
        {

          lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
          swift_allocError();
          *unint64_t v74 = 0;
LABEL_35:
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v53);
          uint64_t v104 = *(void (**)(char *, uint64_t))(v72 + 8);
          Class v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v72 + 8);
          v104(v37, v73);

          return (uint64_t)v30;
        }
      }
      else
      {
        uint64_t v73 = v131;
        uint64_t v72 = v132;
      }

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v53);
      uint64_t v79 = *(void (**)(char *, uint64_t))(v72 + 8);
      Class v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v72 + 8);
      v79(v37, v73);
      return (uint64_t)v30;
    }
    uint64_t v113 = 0;
    uint64_t v62 = v123;
    uint64_t v129 = v57;
    uint64_t v75 = (void (*)(char *, uint64_t, uint64_t))v124[2];
    uint64_t v76 = (uint64_t)v120;
    v75(v120, v68, v123);
    v128((char *)v76, 0, 1, v62);
    swift_beginAccess();
    specialized Dictionary.subscript.setter(v76, v69);
    swift_endAccess();
    int v77 = v124;
    char v78 = (char *)v68;
    goto LABEL_30;
  }
  BOOL v80 = (char *)v66;
  outlined destroy of TetraSessionStates?(v65, &demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v81 = *v57;
  if (!*(void *)(*v57 + 16) || (unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v125), (v83 & 1) == 0))
  {
LABEL_41:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v80)(v115, 1, 1, v62);
    goto LABEL_42;
  }
  uint64_t v75 = (void (*)(char *, uint64_t, uint64_t))v128;
  char v78 = v115;
  ((void (*)(char *, unint64_t, uint64_t))v128)(v115, *(void *)(v81 + 56) + v82 * v127, v62);
  ((void (*)(char *, void, uint64_t, uint64_t))v80)(v78, 0, 1, v62);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v111)(v78, 1, v62);
  if (result != 1)
  {
    uint64_t v52 = v126;
    int v77 = v124;
LABEL_30:
    BOOL v80 = v109;
    char v84 = v121;
    ((void (*)(char *, char *, uint64_t))v77[4])(v109, v78, v62);
    v75(v84, (uint64_t)v80, v62);
    uint64_t v85 = v84;
    uint64_t v86 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
    if (v87 >> 60 != 15)
    {
      uint64_t v88 = v86;
      unint64_t v89 = v87;
      *(void *)&long long v133 = v86;
      *((void *)&v133 + 1) = v87;
      uint64_t v90 = v110;
      unint64_t v91 = v113;
      uint64_t v92 = static AES.GCM.open<A>(_:using:authenticating:)();
      if (v91)
      {

        outlined consume of Data?(v88, v89);
        uint64_t v94 = v123;
        Class v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v124[1];
        ((void (*)(char *, uint64_t))v30)(v85, v123);
        lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
        swift_allocError();
        *unint64_t v95 = 4;
        swift_willThrow();
        ((void (*)(char *, uint64_t))v30)(v109, v94);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v90, v112);
        (*(void (**)(char *, uint64_t))(v132 + 8))(v37, v131);
      }
      else
      {
        uint64_t v96 = v92;
        unint64_t v97 = v93;
        outlined consume of Data?(v88, v89);
        uint64_t v98 = v123;
        *((void *)&v130 + 1) = v124[1];
        (*((void (**)(char *, uint64_t))&v130 + 1))(v85, v123);
        uint64_t v135 = 0;
        long long v133 = 0u;
        long long v134 = 0u;
        outlined copy of Data._Representation(v96, v97);
        BinaryDecodingOptions.init()();
        _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, (void (*)(uint64_t))type metadata accessor for MPPB_SKPaddedStatus);
        uint64_t v99 = v96;
        uint64_t v100 = (uint64_t)v119;
        uint64_t v101 = v99;
        uint64_t v102 = v118;
        Message.init(serializedData:extensions:partial:options:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v117 + 56))(v100, 0, 1, v102);
        outlined consume of Data._Representation(v101, v97);
        (*((void (**)(char *, uint64_t))&v130 + 1))(v109, v98);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v110, v112);
        (*(void (**)(char *, uint64_t))(v132 + 8))(v37, v131);
        uint64_t v105 = v114;
        _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0(v100, v114, type metadata accessor for MPPB_SKPaddedStatus);
        unint64_t v106 = (uint64_t *)(v105 + *(int *)(v102 + 20));
        unint64_t v107 = v106[1];
        if (v107 >> 60 == 15) {
          Class v30 = 0;
        }
        else {
          Class v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*v106;
        }
        outlined copy of Data?(*v106, v107);
        outlined destroy of SymmetricRatchet(v105, type metadata accessor for MPPB_SKPaddedStatus);
      }
      return (uint64_t)v30;
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized AES.GCM.SealedBox.init<A>(combined:)(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x216441698);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 > 27)
      {
        outlined copy of Data._Representation(a1, a2);
        specialized Data.init<A>(_:)(a1, a2);
        AES.GCM.SealedBox.init(combined:)();
        return outlined consume of Data._Representation(a1, a2);
      }
      else
      {
LABEL_7:
        uint64_t v8 = type metadata accessor for CryptoKitError();
        _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, *MEMORY[0x263F04538], v8);
        swift_willThrow();
        return outlined consume of Data._Representation(a1, a2);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t SKIncomingRatchet.serializedData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = 0;
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt16, value: SymmetricKey));
  uint64_t v3 = MEMORY[0x270FA5388](v87);
  uint64_t v86 = (_WORD *)((char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v92 = (unsigned __int16 *)((char *)&v70 - v6);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v85 = (_WORD *)((char *)&v70 - v8);
  MEMORY[0x270FA5388](v7);
  char v84 = (char *)&v70 - v9;
  uint64_t v10 = type metadata accessor for MPPB_KeyAndIndex(0);
  uint64_t v82 = *(void *)(v10 - 8);
  uint64_t v83 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v81 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v70 - v13;
  uint64_t v15 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v76 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MPPB_SKIncomingRatchet(0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (uint64_t *)((char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = MEMORY[0x263F8EE78];
  *uint64_t v19 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v21 = (void *)((char *)v19 + *(int *)(v17 + 24));
  *(_OWORD *)uint64_t v21 = xmmword_216494780;
  uint64_t v22 = (char *)v19 + *(int *)(v17 + 28);
  long long v80 = xmmword_216494780;
  *(_OWORD *)uint64_t v22 = xmmword_216494780;
  uint64_t v23 = (uint64_t *)(v1 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_messageKeys);
  swift_beginAccess();
  uint64_t v24 = *v23;
  int64_t v25 = *(void *)(*v23 + 16);
  uint64_t v75 = v21;
  if (v25)
  {
    uint64_t v79 = v14;
    uint64_t v91 = 0;
    id v71 = v22;
    uint64_t v72 = v17;
    uint64_t v73 = v19;
    uint64_t v74 = v1;
    uint64_t v93 = v20;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
    uint64_t v26 = specialized Dictionary.startIndex.getter(v24);
    uint64_t v28 = v27;
    char v30 = v29 & 1;
    uint64_t v77 = v24 + 64;
    int64_t v88 = v25 - 1;
    uint64_t v78 = v24;
    uint64_t v31 = (uint64_t)v81;
    while (1)
    {
      uint64_t v32 = v87;
      uint64_t v33 = v84;
      uint64_t v34 = (uint64_t)&v84[*(int *)(v87 + 48)];
      uint64_t v89 = v28;
      uint64_t v90 = v26;
      __int16 v35 = specialized Dictionary.subscript.getter(v34, v26, v28, v30 & 1, v24);
      _WORD *v33 = v35;
      uint64_t v36 = (uint64_t)v85;
      *uint64_t v85 = v35;
      uint64_t v37 = v36 + *(int *)(v32 + 48);
      uint64_t v38 = type metadata accessor for SymmetricKey();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
      v40(v37, v34, v38);
      uint64_t v41 = v92;
      outlined init with take of (key: UInt16, value: SymmetricKey)(v36, (uint64_t)v92);
      outlined destroy of TetraSessionStates?((uint64_t)v33, &demangling cache variable for type metadata for (key: UInt16, value: SymmetricKey));
      UnknownStorage.init()();
      uint64_t v42 = v83;
      uint64_t v43 = v31 + *(int *)(v83 + 20);
      *(_OWORD *)uint64_t v43 = v80;
      uint64_t v44 = v31 + *(int *)(v42 + 24);
      *(void *)uint64_t v44 = 0;
      *(unsigned char *)(v44 + 8) = 1;
      uint64_t v45 = *(int *)(v32 + 48);
      long long v46 = v86;
      char v47 = (char *)v86 + v45;
      uint64_t v48 = *v41;
      _WORD *v86 = v48;
      v40((uint64_t)v46 + v45, (uint64_t)v41 + v45, v38);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v47, v38);
      *(void *)uint64_t v44 = v48;
      *(unsigned char *)(v44 + 8) = 0;
      type metadata accessor for NSData();
      uint64_t v2 = v91;
      SymmetricKey.withUnsafeBytes<A>(_:)();
      uint64_t v49 = v94;
      uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v52 = v51;

      outlined consume of Data?(*(void *)v43, *(void *)(v43 + 8));
      *(void *)uint64_t v43 = v50;
      *(void *)(v43 + 8) = v52;
      uint64_t v53 = (uint64_t)v79;
      _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0(v31, (uint64_t)v79, type metadata accessor for MPPB_KeyAndIndex);
      outlined destroy of TetraSessionStates?((uint64_t)v92, &demangling cache variable for type metadata for (key: UInt16, value: SymmetricKey));
      uint64_t v20 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = v93;
      }
      unint64_t v55 = *(void *)(v20 + 16);
      unint64_t v54 = *(void *)(v20 + 24);
      uint64_t v24 = v78;
      if (v55 >= v54 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
        uint64_t v20 = v93;
      }
      *(void *)(v20 + 16) = v55 + 1;
      _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0(v53, v20+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(void *)(v82 + 72) * v55, type metadata accessor for MPPB_KeyAndIndex);
      if (v90 < 0 || v90 >= -(-1 << *(unsigned char *)(v24 + 32))) {
        break;
      }
      if (((*(void *)(v77 + (((unint64_t)v90 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v90) & 1) == 0) {
        goto LABEL_18;
      }
      if (*(_DWORD *)(v24 + 36) != v89) {
        goto LABEL_19;
      }
      uint64_t v56 = _HashTable.occupiedBucket(after:)();
      if (!v88)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v74;
        uint64_t v19 = v73;
        uint64_t v22 = v71;
        goto LABEL_14;
      }
      uint64_t v26 = v56;
      uint64_t v91 = v2;
      char v30 = 0;
      uint64_t v28 = *(unsigned int *)(v24 + 36);
      --v88;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  *uint64_t v19 = v20;
  uint64_t v57 = v1 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet;
  swift_beginAccess();
  uint64_t v58 = v76;
  outlined init with copy of SymmetricRatchet(v57, v76);
  uint64_t v59 = SymmetricRatchet.serializedData()();
  uint64_t v61 = v60;
  outlined destroy of SymmetricRatchet(v58, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
  uint64_t v62 = v75;
  outlined consume of Data?(*v75, v75[1]);
  *uint64_t v62 = v59;
  v62[1] = v61;
  uint64_t v63 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v64 >> 60 == 15)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v65 = v63;
  unint64_t v66 = v64;
  outlined consume of Data?(*(void *)v22, *((void *)v22 + 1));
  *(void *)uint64_t v22 = v65;
  *((void *)v22 + 1) = v66;
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_SKIncomingRatchet);
  uint64_t v67 = Message.serializedData(partial:)();
  if (!v2)
  {
    uint64_t v68 = v67;
    outlined destroy of SymmetricRatchet((uint64_t)v19, type metadata accessor for MPPB_SKIncomingRatchet);
    return v68;
  }
LABEL_21:
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t SKIncomingRatchet.signingKeyIdentifier()()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v0 = type metadata accessor for SHA256();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v9 >> 60 == 15) {
LABEL_12:
  }
    __break(1u);
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
  dispatch thunk of HashFunction.init()();
  uint64_t v18 = v1;
  switch(v11 >> 62)
  {
    case 1uLL:
      if (v10 >> 32 < (int)v10)
      {
        __break(1u);
        goto LABEL_12;
      }
      unint64_t v17 = v11 & 0x3FFFFFFFFFFFFFFFLL;
      outlined copy of Data._Representation(v10, v11);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v10, v10 >> 32);
LABEL_7:
      outlined consume of Data?(v10, v11);
LABEL_10:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v0);
      outlined consume of Data?(v10, v11);
      uint64_t v21 = v4;
      uint64_t v22 = _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
      (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(boxed_opaque_existential_1, v7, v4);
      __swift_project_boxed_opaque_existential_1(v20, v21);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v14 = v19;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
      return v14;
    case 2uLL:
      uint64_t v12 = *(void *)(v10 + 16);
      unint64_t v17 = *(void *)(v10 + 24);
      outlined copy of Data?(v10, v11);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v12, v17);
      swift_release();
      swift_release();
      goto LABEL_7;
    case 3uLL:
      memset(v20, 0, 14);
      goto LABEL_9;
    default:
      v20[0] = v10;
      LOWORD(v20[1]) = v11;
      BYTE2(v20[1]) = BYTE2(v11);
      BYTE3(v20[1]) = BYTE3(v11);
      BYTE4(v20[1]) = BYTE4(v11);
      BYTE5(v20[1]) = BYTE5(v11);
LABEL_9:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      outlined consume of Data?(v10, v11);
      goto LABEL_10;
  }
}

Class @objc SKOutgoingRatchet.serializedData()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  unint64_t v7 = v6;

  v8.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v5, v7);
  return v8.super.isa;
}

uint64_t SKIncomingRatchet.__ivar_destroyer()
{
  outlined destroy of SymmetricRatchet(v0 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
  uint64_t v1 = v0 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_signingPublicKey;
  uint64_t v2 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_bridgeObjectRelease();
}

id SKIncomingRatchet.__deallocating_deinit()
{
  return SKRatchet.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for SKIncomingRatchet);
}

uint64_t ObjC metadata update function for SKIncomingRatchet()
{
  return type metadata accessor for SKIncomingRatchet(0);
}

uint64_t type metadata accessor for SKIncomingRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for SKIncomingRatchet);
}

uint64_t type metadata completion function for SKIncomingRatchet()
{
  uint64_t result = type metadata accessor for SymmetricRatchet();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for P256.Signing.PublicKey();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA384();
      lazy protocol witness table accessor for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x263F04808]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        uint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          *uint64_t v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for SymmetricKey() - 8) + 72);
        int64_t v17 = v16 * v3;
        uint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unint64_t v11;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (_WORD *)(v9 + 2 * v6);
        uint64_t result = MEMORY[0x2166CCE20](*(void *)(a2 + 40), (unsigned __int16)*v10, 2);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        uint64_t v14 = (_WORD *)(v9 + 2 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          *uint64_t v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for SymmetricKey() - 8) + 72);
        int64_t v17 = v16 * v3;
        uint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = type metadata accessor for SymmetricKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, SymmetricKey>);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  long long v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      unint64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    int64_t v19 = *v17;
    unint64_t v18 = v17[1];
    uint64_t v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    unint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)outlined copy of Data._Representation(v24, *((unint64_t *)&v24 + 1));
  }
  uint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    unint64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for SymmetricKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt16, SymmetricKey>);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 2 * v15;
    uint64_t v17 = *(_WORD *)(*(void *)(v5 + 48) + 2 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(_WORD *)(*(void *)(v7 + 48) + v16) = v17;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a5 + 56);
    uint64_t v8 = *(unsigned __int16 *)(*(void *)(a5 + 48) + 2 * a2);
    uint64_t v9 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v7 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v9);
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t outlined init with take of (key: UInt16, value: SymmetricKey)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt16, value: SymmetricKey));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricRatchet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2164434F8()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s17MessageProtection16MPPB_KeyAndIndexVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of SymmetricRatchet(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for StatusKitErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StatusKitErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2164437A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StatusKitErrors()
{
  return &type metadata for StatusKitErrors;
}

id FilesystemUtils.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FilesystemUtils();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FilesystemUtils()
{
  return self;
}

uint64_t SecureEnclave.Kyber768.PrivateKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v4 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  MEMORY[0x270FA5388](v4 - 8);
  unsigned int v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SecureEnclave.Kyber768.PrivateKey.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v11 = v14;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    SecureEnclave.Kyber768.PrivateKey.init(dataRepresentation:)(v13[0], v13[1], (uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    outlined init with take of SecureEnclave.Kyber768.PrivateKey((uint64_t)v6, v11, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t SecureEnclave.Kyber768.PrivateKey.encode(to:)(void *a1)
{
  return SecureEnclave.Kyber768.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<SecureEnclave.Kyber768.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys, (uint64_t)&type metadata for SecureEnclave.Kyber768.PrivateKey.CodingKeys, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(void *a1@<X8>)
{
  *a1 = 0x4264657070617277;
  a1[1] = 0xEB00000000626F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return 0x4264657070617277;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

void protocol witness for CodingKey.init(intValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SecureEnclave.Kyber768.PrivateKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SecureEnclave.Kyber768.PrivateKey.init(from:)(a1, a2);
}

uint64_t SecureEnclave.Kyber1024.PrivateKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v4 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  MEMORY[0x270FA5388](v4 - 8);
  unsigned int v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SecureEnclave.Kyber1024.PrivateKey.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v11 = v14;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    SecureEnclave.Kyber1024.PrivateKey.init(dataRepresentation:)(v13[0], v13[1], (uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    outlined init with take of SecureEnclave.Kyber768.PrivateKey((uint64_t)v6, v11, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t SecureEnclave.Kyber1024.PrivateKey.encode(to:)(void *a1)
{
  return SecureEnclave.Kyber768.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<SecureEnclave.Kyber1024.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys, (uint64_t)&type metadata for SecureEnclave.Kyber1024.PrivateKey.CodingKeys, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
}

uint64_t SecureEnclave.Kyber768.PrivateKey.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t (*a5)(void))
{
  unint64_t v15 = a5;
  uint64_t v7 = v5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v16 = *(_OWORD *)(v7 + *(int *)(v15(0) + 20));
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SecureEnclave.Kyber1024.PrivateKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SecureEnclave.Kyber1024.PrivateKey.init(from:)(a1, a2);
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v13 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys>);
  uint64_t v14 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v11, v6, v4);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
  }
  return result;
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(void *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys, (uint64_t)&type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys, MEMORY[0x263F04668]);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey(void *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1);
}

uint64_t P256.KeyAgreement.PublicKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<P256.KeyAgreement.PublicKey.CodingKeys>);
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v10 = v18;
    uint64_t v16 = v4;
    uint64_t v11 = v21;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v19;
    unint64_t v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v11, v6, v16);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys);
  }
  return result;
}

uint64_t P256.KeyAgreement.PublicKey.encode(to:)(void *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<P256.KeyAgreement.PublicKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys, (uint64_t)&type metadata for P256.KeyAgreement.PublicKey.CodingKeys, MEMORY[0x263F04750]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance P256.KeyAgreement.PublicKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance P256.KeyAgreement.PublicKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys(char *a1@<X8>)
{
  a1[15] = -18;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  return 0x654B63696C627570;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance P256.KeyAgreement.PublicKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance P256.KeyAgreement.PublicKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance P256.KeyAgreement.PublicKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.KeyAgreement.PublicKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance P256.KeyAgreement.PublicKey(void *a1)
{
  return P256.KeyAgreement.PublicKey.encode(to:)(a1);
}

uint64_t P256.Signing.PublicKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<P256.Signing.PublicKey.CodingKeys>);
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v10 = v18;
    uint64_t v16 = v4;
    uint64_t v11 = v21;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v19;
    unint64_t v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    P256.Signing.PublicKey.init<A>(rawRepresentation:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v11, v6, v16);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys);
  }
  return result;
}

uint64_t P256.Signing.PublicKey.encode(to:)(void *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<P256.Signing.PublicKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys, (uint64_t)&type metadata for P256.Signing.PublicKey.CodingKeys, MEMORY[0x263F047D0]);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance P256.Signing.PublicKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance P256.Signing.PublicKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance P256.Signing.PublicKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance P256.Signing.PublicKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance P256.Signing.PublicKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance P256.Signing.PublicKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance P256.Signing.PublicKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.PublicKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance P256.Signing.PublicKey(void *a1)
{
  return P256.Signing.PublicKey.encode(to:)(a1);
}

uint64_t Kyber768.PrivateKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Kyber768.PrivateKey.CodingKeys>);
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v10 = v18;
    uint64_t v16 = v4;
    uint64_t v11 = v21;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v19;
    unint64_t v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    Kyber768.PrivateKey.init<A>(bytes:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v11, v6, v16);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

uint64_t Kyber768.PrivateKey.encode(to:)(void *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Kyber768.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys, (uint64_t)&type metadata for Kyber768.PrivateKey.CodingKeys, MEMORY[0x263F04878]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Kyber768.PrivateKey.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Kyber768.PrivateKey.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Kyber768.PrivateKey.CodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber768.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Kyber768.PrivateKey.CodingKeys()
{
  return 0x4B65746176697270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance Kyber768.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Kyber768.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Kyber768.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Kyber768.PrivateKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Kyber768.PrivateKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Kyber768.PrivateKey(void *a1)
{
  return Kyber768.PrivateKey.encode(to:)(a1);
}

uint64_t Kyber1024.PrivateKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Kyber1024.PrivateKey.CodingKeys>);
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v10 = v18;
    uint64_t v16 = v4;
    uint64_t v11 = v21;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v19;
    unint64_t v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    Kyber1024.PrivateKey.init<A>(bytes:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v11, v6, v16);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

uint64_t Kyber1024.PrivateKey.encode(to:)(void *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Kyber1024.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys, (uint64_t)&type metadata for Kyber1024.PrivateKey.CodingKeys, MEMORY[0x263F048A0]);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber1024.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber1024.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Kyber1024.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance Kyber1024.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Kyber1024.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Kyber1024.PrivateKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Kyber1024.PrivateKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Kyber1024.PrivateKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Kyber1024.PrivateKey(void *a1)
{
  return Kyber1024.PrivateKey.encode(to:)(a1);
}

uint64_t Kyber768.PublicKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Kyber768.PublicKey.CodingKeys>);
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v10 = v18;
    uint64_t v16 = v4;
    uint64_t v11 = v21;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v19;
    unint64_t v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    Kyber768.PublicKey.init<A>(dataRepresentation:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v11, v6, v16);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys);
  }
  return result;
}

uint64_t Kyber768.PublicKey.encode(to:)(void *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Kyber768.PublicKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys, (uint64_t)&type metadata for Kyber768.PublicKey.CodingKeys, MEMORY[0x263F04888]);
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v17 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  uint64_t v11 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = v17(v11);
  unint64_t v14 = v13;
  uint64_t v18 = v12;
  unint64_t v19 = v13;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation(v12, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber768.PublicKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber768.PublicKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Kyber768.PublicKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance Kyber768.PublicKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Kyber768.PublicKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Kyber768.PublicKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Kyber768.PublicKey@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Kyber768.PublicKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Kyber768.PublicKey(void *a1)
{
  return Kyber768.PublicKey.encode(to:)(a1);
}

uint64_t SymmetricKey.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SymmetricKey.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    SymmetricKey.init<A>(data:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys);
  }
  return result;
}

uint64_t SymmetricKey.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SymmetricKey.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  unsigned int v6 = (void *)specialized Data.init<A>(_:)(v10[0]);
  unint64_t v8 = (unint64_t)v7;
  v10[0] = v6;
  v10[1] = v7;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation((uint64_t)v6, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SymmetricKey.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SymmetricKey.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SymmetricKey.CodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SymmetricKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SymmetricKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SymmetricKey.CodingKeys(void *a1@<X8>)
{
  *a1 = 0x736574794279656BLL;
  a1[1] = 0xE800000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SymmetricKey.CodingKeys()
{
  return 0x736574794279656BLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SymmetricKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance SymmetricKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymmetricKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymmetricKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SymmetricKey(void *a1)
{
  return SymmetricKey.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SymmetricKey(void *a1)
{
  return SymmetricKey.encode(to:)(a1);
}

uint64_t getEnumTag for SymmetricKey.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for SymmetricKey.CodingKeys()
{
  return &type metadata for SymmetricKey.CodingKeys;
}

ValueMetadata *type metadata accessor for Kyber768.PublicKey.CodingKeys()
{
  return &type metadata for Kyber768.PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for Kyber1024.PrivateKey.CodingKeys()
{
  return &type metadata for Kyber1024.PrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for Kyber768.PrivateKey.CodingKeys()
{
  return &type metadata for Kyber768.PrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for P256.Signing.PublicKey.CodingKeys()
{
  return &type metadata for P256.Signing.PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement.PublicKey.CodingKeys()
{
  return &type metadata for P256.KeyAgreement.PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys()
{
  return &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraOutgoingKeyContent.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraOutgoingKeyContent.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraOutgoingKeyContent.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraOutgoingKeyContent.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TetraOutgoingKeyContent.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TetraOutgoingKeyContent.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraOutgoingKeyContent.CodingKeys(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x79654B68646365;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE900000000000079;
      uint64_t v3 = 0x654B3836376D656BLL;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x4B343230316D656BLL;
      *(void *)(a1 + 8) = 0xEA00000000007965;
      return;
    case 3:
      strcpy((char *)a1, "tetraEcdhKey");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      return;
    case 4:
      unint64_t v4 = 0xEE0079654B383637;
      goto LABEL_8;
    case 5:
      unint64_t v4 = 0xEF79654B34323031;
LABEL_8:
      *(void *)a1 = 0x6D654B6172746574;
      *(void *)(a1 + 8) = v4;
      break;
    case 6:
      *(void *)a1 = 0x7061636E65;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraOutgoingKeyContent.CodingKeys()
{
  uint64_t result = 0x79654B68646365;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x654B3836376D656BLL;
      break;
    case 2:
      uint64_t result = 0x4B343230316D656BLL;
      break;
    case 3:
      uint64_t result = 0x6463456172746574;
      break;
    case 4:
    case 5:
      uint64_t result = 0x6D654B6172746574;
      break;
    case 6:
      uint64_t result = 0x7061636E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraOutgoingKeyContent.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TetraOutgoingKeyContent.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TetraOutgoingKeyContent.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraOutgoingKeyContent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraOutgoingKeyContent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TetraOutgoingKeyContent.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraOutgoingKeyContent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 3;
  type metadata accessor for TetraECDHKey();
  lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type TetraECDHKey and conformance TetraECDHKey, (void (*)(uint64_t))type metadata accessor for TetraECDHKey);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for TetraOutgoingKeyContent(0);
    LOBYTE(v12) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    lazy protocol witness table accessor for type TetraKEM768Key? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    lazy protocol witness table accessor for type TetraKEM1024Key? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 28));
    v11[15] = 6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TetraOutgoingKeyContent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v111 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v114 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v109 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v118 = *(void *)(v122 - 8);
  MEMORY[0x270FA5388](v122);
  uint64_t v113 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v117 = (uint64_t)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v123 = (uint64_t)&v104 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v120 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v112 = (uint64_t)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v125 = *(void *)(v129 - 8);
  MEMORY[0x270FA5388](v129);
  Class v119 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v124 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v130 = (uint64_t)&v104 - v22;
  uint64_t v131 = type metadata accessor for TetraECDHKey();
  MEMORY[0x270FA5388](v131);
  uint64_t v128 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v133 = *(void *)(v24 - 8);
  uint64_t v134 = v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v127 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v132 = (char *)&v104 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v136 = (uint64_t)&v104 - v29;
  uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraOutgoingKeyContent.CodingKeys>);
  uint64_t v137 = *(void *)(v135 - 8);
  MEMORY[0x270FA5388](v135);
  uint64_t v31 = (char *)&v104 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v33 = (int *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  __int16 v35 = (char *)&v104 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = &v35[v33[7]];
  uint64_t v115 = v16;
  uint64_t v38 = *(void (**)(void))(v16 + 56);
  uint64_t v37 = v16 + 56;
  uint64_t v141 = (uint64_t)v36;
  uint64_t v126 = v15;
  unint64_t v121 = v38;
  v38();
  uint64_t v39 = &v35[v33[8]];
  uint64_t v110 = v6;
  uint64_t v42 = *(void (**)(void))(v6 + 56);
  uint64_t v41 = v6 + 56;
  uint64_t v40 = v42;
  uint64_t v140 = (uint64_t)v39;
  uint64_t v116 = v5;
  v42();
  uint64_t v139 = &v35[v33[9]];
  *(_OWORD *)uint64_t v139 = xmmword_216494780;
  uint64_t v43 = (uint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys();
  long long v138 = v31;
  uint64_t v44 = v142;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v44)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    uint64_t v52 = v139;
    uint64_t v53 = v140;
    uint64_t v54 = v141;
LABEL_4:
    outlined destroy of TetraSessionStates?(v54, &demangling cache variable for type metadata for TetraKEM768Key?);
    outlined destroy of TetraSessionStates?(v53, &demangling cache variable for type metadata for TetraKEM1024Key?);
    return outlined consume of Data?(*(void *)v52, *((void *)v52 + 1));
  }
  uint64_t v45 = (uint64_t)v132;
  uint64_t v46 = v133;
  uint64_t v107 = v37;
  uint64_t v105 = v40;
  uint64_t v106 = v41;
  uint64_t v47 = v137;
  objc_super v108 = v35;
  uint64_t v142 = v43;
  LOBYTE(v143) = 0;
  lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey, MEMORY[0x263F04680]);
  uint64_t v48 = v135;
  uint64_t v49 = v136;
  uint64_t v50 = v134;
  uint64_t v51 = v138;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v104 = 0;
  outlined init with copy of TetraSessionStates?(v49, v45, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v45, 1, v50) == 1)
  {
    outlined destroy of TetraSessionStates?(v45, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    LOBYTE(v143) = 3;
    lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type TetraECDHKey and conformance TetraECDHKey, (void (*)(uint64_t))type metadata accessor for TetraECDHKey);
    uint64_t v56 = (uint64_t)v128;
    uint64_t v57 = v104;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v54 = v141;
    if (v57)
    {
      outlined destroy of TetraSessionStates?(v49, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v48);
      __swift_destroy_boxed_opaque_existential_0(v142);
      uint64_t v52 = v139;
      uint64_t v53 = v140;
      goto LABEL_4;
    }
    uint64_t v104 = 0;
    outlined init with take of SecureEnclave.Kyber768.PrivateKey(v56, (uint64_t)v108, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
  }
  else
  {
    uint64_t v58 = v46;
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 32);
    uint64_t v60 = v127;
    v59(v127, v45, v50);
    uint64_t v61 = v50;
    uint64_t v62 = v108;
    uint64_t v63 = (char *)v108 + *(int *)(v131 + 20);
    v59(v63, (uint64_t)v60, v61);
    uint64_t v48 = v135;
    unint64_t v64 = v63;
    uint64_t v51 = v138;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v64, 0, 1, v61);
    *uint64_t v62 = 0;
    uint64_t v54 = v141;
  }
  uint64_t v53 = v140;
  uint64_t v66 = v129;
  uint64_t v65 = v130;
  LOBYTE(v143) = 1;
  lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey, MEMORY[0x263F04880]);
  uint64_t v67 = v104;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if (v67)
  {
    outlined destroy of TetraSessionStates?(v136, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v51, v48);
    uint64_t v52 = v139;
    uint64_t v82 = (uint64_t)v108;
    __swift_destroy_boxed_opaque_existential_0(v142);
    outlined destroy of TetraECDHKey(v82, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
    goto LABEL_4;
  }
  uint64_t v68 = v124;
  outlined init with copy of TetraSessionStates?(v65, v124, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
  uint64_t v69 = v125;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v68, 1, v66) == 1)
  {
    outlined destroy of TetraSessionStates?(v68, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    LOBYTE(v143) = 4;
    lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type TetraKEM768Key and conformance TetraKEM768Key, (void (*)(uint64_t))type metadata accessor for TetraKEM768Key);
    uint64_t v70 = (uint64_t)v120;
    uint64_t v71 = v126;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v75 = v71;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v70, 1, v71) == 1)
    {
      outlined destroy of TetraSessionStates?(v70, &demangling cache variable for type metadata for TetraKEM768Key?);
      outlined destroy of TetraSessionStates?(v54, &demangling cache variable for type metadata for TetraKEM768Key?);
      uint64_t v78 = 1;
      goto LABEL_16;
    }
    uint64_t v96 = v112;
    outlined init with take of SecureEnclave.Kyber768.PrivateKey(v70, v112, type metadata accessor for TetraKEM768Key);
    outlined destroy of TetraSessionStates?(v54, &demangling cache variable for type metadata for TetraKEM768Key?);
    outlined init with take of SecureEnclave.Kyber768.PrivateKey(v96, v54, type metadata accessor for TetraKEM768Key);
  }
  else
  {
    uint64_t v72 = v119;
    uint64_t v73 = v68;
    uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
    v74(v119, v73, v66);
    outlined destroy of TetraSessionStates?(v54, &demangling cache variable for type metadata for TetraKEM768Key?);
    v74((char *)v54, (uint64_t)v72, v66);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v54, 0, 1, v66);
    uint64_t v75 = v126;
    uint64_t v76 = v54 + *(int *)(v126 + 20);
    uint64_t v77 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
  }
  uint64_t v78 = 0;
LABEL_16:
  uint64_t v79 = v137;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v121)(v54, v78, 1, v75);
  LOBYTE(v143) = 2;
  lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type Kyber1024.PrivateKey and conformance Kyber1024.PrivateKey, MEMORY[0x263F048A8]);
  uint64_t v80 = v123;
  uint64_t v81 = v122;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v83 = v80;
  uint64_t v84 = v117;
  outlined init with copy of TetraSessionStates?(v83, v117, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  uint64_t v85 = v118;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v84, 1, v81) == 1)
  {
    outlined destroy of TetraSessionStates?(v84, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    LOBYTE(v143) = 5;
    lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type TetraKEM1024Key and conformance TetraKEM1024Key, (void (*)(uint64_t))type metadata accessor for TetraKEM1024Key);
    uint64_t v86 = v114;
    uint64_t v87 = v116;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    BOOL v101 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v86, 1, v87) == 1;
    uint64_t v102 = (uint64_t)v86;
    uint64_t v93 = v105;
    if (v101)
    {
      outlined destroy of TetraSessionStates?(v102, &demangling cache variable for type metadata for TetraKEM1024Key?);
      outlined destroy of TetraSessionStates?(v53, &demangling cache variable for type metadata for TetraKEM1024Key?);
      uint64_t v92 = 1;
    }
    else
    {
      uint64_t v103 = v109;
      outlined init with take of SecureEnclave.Kyber768.PrivateKey(v102, v109, type metadata accessor for TetraKEM1024Key);
      outlined destroy of TetraSessionStates?(v53, &demangling cache variable for type metadata for TetraKEM1024Key?);
      outlined init with take of SecureEnclave.Kyber768.PrivateKey(v103, v53, type metadata accessor for TetraKEM1024Key);
      uint64_t v92 = 0;
    }
  }
  else
  {
    int64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 32);
    uint64_t v89 = v113;
    v88(v113, v84, v81);
    outlined destroy of TetraSessionStates?(v53, &demangling cache variable for type metadata for TetraKEM1024Key?);
    v88((char *)v53, (uint64_t)v89, v81);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v85 + 56))(v53, 0, 1, v81);
    uint64_t v87 = v116;
    uint64_t v90 = v53 + *(int *)(v116 + 20);
    uint64_t v91 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 1, 1, v91);
    uint64_t v92 = 0;
    uint64_t v93 = v105;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v93)(v53, v92, 1, v87);
  char v145 = 6;
  lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v94 = v135;
  unint64_t v95 = v138;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  outlined destroy of TetraSessionStates?(v123, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  outlined destroy of TetraSessionStates?(v130, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
  outlined destroy of TetraSessionStates?(v136, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v95, v94);
  uint64_t v97 = v143;
  uint64_t v98 = v144;
  uint64_t v99 = v139;
  outlined consume of Data?(*(void *)v139, *((void *)v139 + 1));
  *(void *)uint64_t v99 = v97;
  *((void *)v99 + 1) = v98;
  uint64_t v100 = (uint64_t)v108;
  outlined init with copy of TetraOutgoingKeyContent((uint64_t)v108, v111);
  __swift_destroy_boxed_opaque_existential_0(v142);
  return outlined destroy of TetraECDHKey(v100, type metadata accessor for TetraOutgoingKeyContent);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraOutgoingKeyContent@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraOutgoingKeyContent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraOutgoingKeyContent(void *a1)
{
  return TetraOutgoingKeyContent.encode(to:)(a1);
}

uint64_t TetraECDHSecKey.encode(to:)(void *a1, __SecKey *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraECDHSecKey.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (__CFString *)a1[3];
  __swift_project_boxed_opaque_existential_1(a1, (uint64_t)v8);
  lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  CFDictionaryRef v9 = SecKeyCopyAttributes(a2);
  if (!v9)
  {
    __break(1u);
LABEL_12:

    goto LABEL_13;
  }
  CFDictionaryRef v10 = v9;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSObject);
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (one-time initialization token for TokenOID != -1) {
    swift_once();
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = (id)TokenOID;
    uint64_t v13 = __CocoaDictionary.lookup(_:)();

    uint64_t result = swift_bridgeObjectRelease();
    if (!v13) {
      goto LABEL_14;
    }
LABEL_10:
    v19[3] = v13;
    swift_dynamicCast();
    uint64_t v17 = v19[1];
    unint64_t v18 = v19[2];
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return outlined consume of Data._Representation(v17, v18);
  }
  if (*(void *)(v11 + 16))
  {
    uint64_t v8 = (id)TokenOID;
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
    if (v16)
    {
      uint64_t v13 = *(void *)(*(void *)(v11 + 56) + 8 * v15);
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
  __break(1u);
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TetraECDHSecKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance TetraECDHSecKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraECDHSecKey.CodingKeys(void *a1@<X8>)
{
  *a1 = 0x4B65746176697270;
  a1[1] = 0xEF73657479427965;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraECDHSecKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawCFStringRef Value = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance TetraECDHSecKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraECDHSecKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraECDHSecKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

SecKeyRef protocol witness for Decodable.init(from:) in conformance TetraECDHSecKey@<X0>(void *a1@<X0>, SecKeyRef *a2@<X8>)
{
  SecKeyRef result = specialized TetraECDHSecKey.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraECDHSecKey(void *a1)
{
  return TetraECDHSecKey.encode(to:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of TetraOutgoingKeyContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraOutgoingKeyContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraECDHKey(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TetraKEM768Key? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraKEM768Key? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TetraKEM768Key?);
    lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type TetraKEM768Key and conformance TetraKEM768Key, (void (*)(uint64_t))type metadata accessor for TetraKEM768Key);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraKEM1024Key? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraKEM1024Key? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TetraKEM1024Key?);
    lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey(&lazy protocol witness table cache variable for type TetraKEM1024Key and conformance TetraKEM1024Key, (void (*)(uint64_t))type metadata accessor for TetraKEM1024Key);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Data? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Data? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data and conformance Data();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?);
  }
  return result;
}

unint64_t specialized TetraOutgoingKeyContent.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TetraOutgoingKeyContent.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

SecKeyRef specialized TetraECDHSecKey.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraECDHSecKey.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v10;
  unint64_t v7 = v11;
  SecKeyRef v8 = specialized TetraECDHSecKey.init(aksBlob:)(v10, v11);
  outlined consume of Data._Representation(v6, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v8;
}

unint64_t lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSObject and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSObject and conformance NSObject)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for NSObject);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject);
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraECDHSecKey.CodingKeys()
{
  return &type metadata for TetraECDHSecKey.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for TetraOutgoingKeyContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216448D44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraOutgoingKeyContent.CodingKeys()
{
  return &type metadata for TetraOutgoingKeyContent.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureEnclave.Kyber1024.PrivateKey.CodingKeys()
{
  return &type metadata for SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SymmetricKey.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SymmetricKey.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x216448E78);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return &type metadata for SecureEnclave.Kyber768.PrivateKey.CodingKeys;
}

void *initializeBufferWithCopyOfBuffer for TetraSessionState(_DWORD *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    uint64_t v7 = a3[5];
    SecKeyRef v8 = (char *)a1 + v7;
    CFDictionaryRef v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SymmetricKey();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v130 = a3;
    uint64_t v131 = a2;
    uint64_t v125 = v11;
    uint64_t v126 = v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = type metadata accessor for TetraRatchetState(0);
    *(void *)&v8[*(int *)(v14 + 20)] = *(void *)&v9[*(int *)(v14 + 20)];
    uint64_t v127 = v14;
    uint64_t v128 = v9;
    uint64_t v15 = *(int *)(v14 + 24);
    uint64_t v129 = v8;
    char v16 = &v8[v15];
    uint64_t v17 = &v9[v15];
    unint64_t v18 = *(void **)&v9[v15];
    *(void *)&v8[v15] = v18;
    uint64_t v19 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    uint64_t v20 = &v16[v19];
    uint64_t v132 = v17;
    uint64_t v21 = &v17[v19];
    uint64_t v22 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    id v25 = v18;
    if (v24(v21, 1, v22))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v27 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
    uint64_t v28 = v27[5];
    uint64_t v29 = &v16[v28];
    uint64_t v30 = v132;
    uint64_t v31 = &v132[v28];
    uint64_t v32 = type metadata accessor for TetraKEM768Key(0);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v29, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v35 = type metadata accessor for Kyber768.PrivateKey();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v31, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v29, v31, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v29, v31, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v29, 0, 1, v35);
      }
      uint64_t v38 = *(int *)(v32 + 20);
      uint64_t v39 = &v29[v38];
      uint64_t v40 = &v31[v38];
      uint64_t v41 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      uint64_t v123 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v40, 1, v41))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        uint64_t v43 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v39, v40, v43);
        uint64_t v44 = *(int *)(v41 + 20);
        uint64_t v45 = (uint64_t *)&v39[v44];
        uint64_t v46 = (uint64_t *)&v40[v44];
        Class v119 = v39;
        unint64_t v121 = v27;
        uint64_t v48 = *v46;
        unint64_t v47 = v46[1];
        outlined copy of Data._Representation(*v46, v47);
        uint64_t *v45 = v48;
        v45[1] = v47;
        uint64_t v49 = *(int *)(v41 + 24);
        uint64_t v50 = *(void **)&v40[v49];
        uint64_t v27 = v121;
        *(void *)&v119[v49] = v50;
        uint64_t v51 = *(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56);
        id v52 = v50;
        v51(v119, 0, 1, v41);
        uint64_t v30 = v132;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
    }
    uint64_t v53 = v27[6];
    uint64_t v54 = &v16[v53];
    unint64_t v55 = &v30[v53];
    uint64_t v56 = type metadata accessor for TetraKEM1024Key(0);
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      uint64_t v124 = v57;
      uint64_t v59 = type metadata accessor for Kyber1024.PrivateKey();
      uint64_t v60 = *(void *)(v59 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v55, 1, v59))
      {
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v54, v55, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v54, v55, v59);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v54, 0, 1, v59);
      }
      uint64_t v62 = *(int *)(v56 + 20);
      uint64_t v63 = &v54[v62];
      unint64_t v64 = &v55[v62];
      uint64_t v65 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      uint64_t v66 = *(void *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
      }
      else
      {
        uint64_t v68 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(v63, v64, v68);
        uint64_t v69 = *(int *)(v65 + 20);
        uint64_t v70 = (uint64_t *)&v63[v69];
        uint64_t v71 = (uint64_t *)&v64[v69];
        uint64_t v120 = v63;
        uint64_t v122 = v27;
        uint64_t v72 = v66;
        uint64_t v73 = *v71;
        unint64_t v74 = v71[1];
        outlined copy of Data._Representation(*v71, v74);
        *uint64_t v70 = v73;
        v70[1] = v74;
        uint64_t v27 = v122;
        uint64_t v75 = *(int *)(v65 + 24);
        uint64_t v76 = *(void **)&v64[v75];
        *(void *)&v120[v75] = v76;
        uint64_t v77 = *(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56);
        id v78 = v76;
        v77(v120, 0, 1, v65);
        uint64_t v30 = v132;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v54, 0, 1, v56);
    }
    uint64_t v79 = v27[7];
    uint64_t v80 = &v16[v79];
    uint64_t v81 = (uint64_t *)&v30[v79];
    unint64_t v82 = v81[1];
    if (v82 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
    }
    else
    {
      uint64_t v83 = *v81;
      outlined copy of Data._Representation(*v81, v81[1]);
      *(void *)uint64_t v80 = v83;
      *((void *)v80 + 1) = v82;
    }
    uint64_t v84 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
    uint64_t v85 = &v16[v84];
    uint64_t v86 = &v30[v84];
    uint64_t v87 = type metadata accessor for SymmetricRatchet();
    uint64_t v88 = *(void *)(v87 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
    {
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
      memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v85, v86, v126);
      uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v85[*(int *)(v90 + 48)] = *(void *)&v86[*(int *)(v90 + 48)];
      *(void *)&v85[*(int *)(v87 + 20)] = *(void *)&v86[*(int *)(v87 + 20)];
      uint64_t v91 = *(int *)(v87 + 24);
      uint64_t v92 = &v85[v91];
      uint64_t v93 = &v86[v91];
      long long v94 = *(_OWORD *)(v93 + 24);
      *(_OWORD *)&v85[v91 + 24] = v94;
      uint64_t v95 = v94;
      uint64_t v96 = **(void (***)(char *, char *, uint64_t))(v94 - 8);
      swift_bridgeObjectRetain();
      v96(v92, v93, v95);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
    }
    *(_DWORD *)&v129[*(int *)(v127 + 28)] = *(_DWORD *)&v128[*(int *)(v127 + 28)];
    uint64_t v97 = *(int *)(v127 + 32);
    uint64_t v98 = &v129[v97];
    uint64_t v99 = &v128[v97];
    uint64_t v100 = type metadata accessor for Date();
    uint64_t v101 = *(void *)(v100 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
    {
      uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v98, v99, v100);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
    }
    uint64_t v103 = v130[6];
    uint64_t v104 = (char *)v4 + v103;
    uint64_t v105 = (char *)v131 + v103;
    uint64_t v106 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v105, v106);
    uint64_t v107 = v130[7];
    objc_super v108 = (char *)v4 + v107;
    uint64_t v109 = (char *)v131 + v107;
    uint64_t v110 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v111 = *(void *)(v110 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
    {
      uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      memcpy(v108, v109, *(void *)(*(void *)(v112 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v108, v109, v110);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
    }
    uint64_t v113 = v130[8];
    uint64_t v114 = (void *)((char *)v4 + v113);
    uint64_t v115 = (void *)((char *)v131 + v113);
    uint64_t v116 = *v115;
    unint64_t v117 = v115[1];
    outlined copy of Data._Representation(*v115, v117);
    *uint64_t v114 = v116;
    v114[1] = v117;
    *((unsigned char *)v4 + v130[9]) = *((unsigned char *)v131 + v130[9]);
  }
  return v4;
}

uint64_t destroy for TetraSessionState(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for SymmetricKey();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v43 = v6;
  uint64_t v44 = v5;
  uint64_t v7 = type metadata accessor for TetraRatchetState(0);
  swift_bridgeObjectRelease();
  SecKeyRef v8 = (id *)(v4 + *(int *)(v7 + 24));

  CFDictionaryRef v9 = (char *)v8 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v12 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v13 = (char *)v8 + v12[5];
  uint64_t v14 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15)) {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    }
    uint64_t v17 = &v13[*(int *)(v14 + 20)];
    uint64_t v18 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
    {
      uint64_t v19 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
      outlined consume of Data._Representation(*(void *)&v17[*(int *)(v18 + 20)], *(void *)&v17[*(int *)(v18 + 20) + 8]);
    }
  }
  uint64_t v20 = (char *)v8 + v12[6];
  uint64_t v21 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
  {
    uint64_t v22 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v23 = *(void *)(v22 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22)) {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    }
    uint64_t v24 = &v20[*(int *)(v21 + 20)];
    uint64_t v25 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25))
    {
      uint64_t v26 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v24, v26);
      outlined consume of Data._Representation(*(void *)&v24[*(int *)(v25 + 20)], *(void *)&v24[*(int *)(v25 + 20) + 8]);
    }
  }
  uint64_t v27 = (uint64_t *)((char *)v8 + v12[7]);
  unint64_t v28 = v27[1];
  if (v28 >> 60 != 15) {
    outlined consume of Data._Representation(*v27, v28);
  }
  uint64_t v29 = (char *)v8 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v30 = type metadata accessor for SymmetricRatchet();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30))
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v44);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29[*(int *)(v30 + 24)]);
  }
  uint64_t v31 = v4 + *(int *)(v7 + 32);
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v32 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32)) {
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  }
  uint64_t v34 = a1 + a2[6];
  uint64_t v35 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v34, v35);
  uint64_t v36 = a1 + a2[7];
  uint64_t v37 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v38 = *(void *)(v37 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37)) {
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  }
  uint64_t v39 = (uint64_t *)(a1 + a2[8]);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  return outlined consume of Data._Representation(v40, v41);
}

_DWORD *initializeWithCopy for TetraSessionState(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  SecKeyRef v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v129 = a2;
  uint64_t v130 = a1;
  uint64_t v128 = a3;
  uint64_t v123 = v10;
  uint64_t v124 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = type metadata accessor for TetraRatchetState(0);
  *(void *)&v7[*(int *)(v12 + 20)] = *(void *)&v8[*(int *)(v12 + 20)];
  uint64_t v125 = v12;
  uint64_t v126 = v8;
  uint64_t v13 = *(int *)(v12 + 24);
  uint64_t v127 = v7;
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  uint64_t v16 = *(void **)&v8[v13];
  *(void *)uint64_t v14 = v16;
  uint64_t v17 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v18 = &v14[v17];
  uint64_t v19 = &v15[v17];
  uint64_t v20 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  id v23 = v16;
  if (v22(v19, 1, v20))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v25 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v26 = v25[5];
  uint64_t v27 = &v14[v26];
  unint64_t v28 = &v15[v26];
  uint64_t v29 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v32 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v27, v28, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v27, 0, 1, v32);
    }
    uint64_t v35 = *(int *)(v29 + 20);
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    uint64_t v38 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v41 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v36, v37, v41);
      uint64_t v42 = *(int *)(v38 + 20);
      unint64_t v117 = v36;
      uint64_t v119 = v39;
      uint64_t v43 = (uint64_t *)&v36[v42];
      uint64_t v44 = (uint64_t *)&v37[v42];
      unint64_t v121 = v25;
      uint64_t v45 = *v44;
      unint64_t v46 = v44[1];
      outlined copy of Data._Representation(*v44, v46);
      *uint64_t v43 = v45;
      v43[1] = v46;
      uint64_t v25 = v121;
      uint64_t v47 = *(int *)(v38 + 24);
      uint64_t v48 = *(void **)&v37[v47];
      *(void *)&v117[v47] = v48;
      uint64_t v49 = *(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56);
      id v50 = v48;
      v49(v117, 0, 1, v38);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t v51 = v25[6];
  id v52 = &v14[v51];
  uint64_t v53 = &v15[v51];
  uint64_t v54 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    uint64_t v57 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v53, 1, v57))
    {
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v52, v53, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v52, v53, v57);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v52, 0, 1, v57);
    }
    uint64_t v60 = *(int *)(v54 + 20);
    uint64_t v61 = &v52[v60];
    uint64_t v62 = &v53[v60];
    uint64_t v63 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v64 = *(void *)(v63 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
    {
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      uint64_t v66 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v61, v62, v66);
      uint64_t v67 = *(int *)(v63 + 20);
      uint64_t v118 = v61;
      uint64_t v120 = v55;
      uint64_t v68 = (uint64_t *)&v61[v67];
      uint64_t v69 = (uint64_t *)&v62[v67];
      uint64_t v70 = v64;
      uint64_t v122 = v25;
      uint64_t v71 = *v69;
      unint64_t v72 = v69[1];
      outlined copy of Data._Representation(*v69, v72);
      *uint64_t v68 = v71;
      v68[1] = v72;
      uint64_t v55 = v120;
      uint64_t v25 = v122;
      uint64_t v73 = *(int *)(v63 + 24);
      unint64_t v74 = *(void **)&v62[v73];
      *(void *)&v118[v73] = v74;
      uint64_t v75 = *(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56);
      id v76 = v74;
      v75(v118, 0, 1, v63);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  uint64_t v77 = v25[7];
  id v78 = &v14[v77];
  uint64_t v79 = &v15[v77];
  unint64_t v80 = *((void *)v79 + 1);
  if (v80 >> 60 == 15)
  {
    *(_OWORD *)id v78 = *(_OWORD *)v79;
  }
  else
  {
    uint64_t v81 = *(void *)v79;
    outlined copy of Data._Representation(*(void *)v79, *((void *)v79 + 1));
    *(void *)id v78 = v81;
    *((void *)v78 + 1) = v80;
  }
  uint64_t v82 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v83 = &v14[v82];
  uint64_t v84 = &v15[v82];
  uint64_t v85 = type metadata accessor for SymmetricRatchet();
  uint64_t v86 = *(void *)(v85 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
  {
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v83, v84, v124);
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v83[*(int *)(v88 + 48)] = *(void *)&v84[*(int *)(v88 + 48)];
    *(void *)&v83[*(int *)(v85 + 20)] = *(void *)&v84[*(int *)(v85 + 20)];
    uint64_t v89 = *(int *)(v85 + 24);
    uint64_t v90 = &v83[v89];
    uint64_t v91 = &v84[v89];
    long long v92 = *(_OWORD *)&v84[v89 + 24];
    *(_OWORD *)&v83[v89 + 24] = v92;
    uint64_t v93 = v92;
    long long v94 = **(void (***)(char *, char *, uint64_t))(v92 - 8);
    swift_bridgeObjectRetain();
    v94(v90, v91, v93);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
  }
  *(_DWORD *)&v127[*(int *)(v125 + 28)] = *(_DWORD *)&v126[*(int *)(v125 + 28)];
  uint64_t v95 = *(int *)(v125 + 32);
  uint64_t v96 = &v127[v95];
  uint64_t v97 = &v126[v95];
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v98 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
  {
    uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v96, v97, v98);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
  }
  uint64_t v101 = v128[6];
  uint64_t v102 = (char *)v130 + v101;
  uint64_t v103 = (char *)v129 + v101;
  uint64_t v104 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
  uint64_t v105 = v128[7];
  uint64_t v106 = (char *)v130 + v105;
  uint64_t v107 = (char *)v129 + v105;
  uint64_t v108 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v109 = *(void *)(v108 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
  {
    uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v106, v107, v108);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
  }
  uint64_t v111 = v128[8];
  uint64_t v112 = (uint64_t *)((char *)v130 + v111);
  uint64_t v113 = (uint64_t *)((char *)v129 + v111);
  uint64_t v114 = *v113;
  unint64_t v115 = v113[1];
  outlined copy of Data._Representation(*v113, v115);
  *uint64_t v112 = v114;
  v112[1] = v115;
  *((unsigned char *)v130 + v128[9]) = *((unsigned char *)v129 + v128[9]);
  return v130;
}

_DWORD *assignWithCopy for TetraSessionState(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  SecKeyRef v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v221 = a1;
  uint64_t v212 = v10;
  uint64_t v213 = v9;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = type metadata accessor for TetraRatchetState(0);
  *(void *)&v7[*(int *)(v15 + 20)] = *(void *)&v8[*(int *)(v15 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v218 = v15;
  int v219 = v7;
  uint64_t v16 = *(int *)(v15 + 24);
  uint64_t v17 = &v7[v16];
  unint64_t v222 = v8;
  uint64_t v18 = &v8[v16];
  uint64_t v19 = *(void **)&v7[v16];
  uint64_t v20 = *(void **)&v8[v16];
  *(void *)uint64_t v17 = v20;
  id v21 = v20;

  uint64_t v22 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v223 = v18;
  uint64_t v224 = v17;
  id v23 = &v17[v22];
  uint64_t v24 = &v18[v22];
  uint64_t v25 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  unint64_t v220 = a2;
  uint64_t v217 = a3;
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
LABEL_13:
  uint64_t v31 = v18;
  uint64_t v32 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v33 = v32[5];
  uint64_t v34 = (char *)v224 + v33;
  uint64_t v35 = &v18[v33];
  uint64_t v36 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (v40)
    {
      outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v34, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    uint64_t v215 = v32;
    uint64_t v46 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v47 = *(void *)(v46 - 8);
    uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
    int v49 = v48(v34, 1, v46);
    int v50 = v48(v35, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v34, v35, v46);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v34, 0, 1, v46);
LABEL_79:
        uint64_t v32 = v215;
        uint64_t v155 = *(int *)(v36 + 20);
        v34 += v155;
        v35 += v155;
        uint64_t v156 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v157 = *(void *)(v156 - 8);
        uint64_t v158 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v157 + 48);
        int v159 = v158(v34, 1, v156);
        int v160 = v158(v35, 1, v156);
        if (v159)
        {
          if (!v160)
          {
            uint64_t v161 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v161 - 8) + 16))(v34, v35, v161);
            uint64_t v162 = *(int *)(v156 + 20);
            unint64_t v163 = (uint64_t *)&v34[v162];
            uint64_t v164 = (uint64_t *)&v35[v162];
            uint64_t v165 = *v164;
            unint64_t v166 = v164[1];
            outlined copy of Data._Representation(*v164, v166);
            uint64_t *v163 = v165;
            v163[1] = v166;
            uint64_t v32 = v215;
            uint64_t v167 = *(int *)(v156 + 24);
            Class v168 = *(void **)&v35[v167];
            *(void *)&v34[v167] = v168;
            Class v169 = *(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56);
            id v170 = v168;
            v169(v34, 0, 1, v156);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v160)
          {
            uint64_t v188 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 24))(v34, v35, v188);
            uint64_t v189 = *(int *)(v156 + 20);
            os_log_type_t v190 = (uint64_t *)&v34[v189];
            unint64_t v191 = (uint64_t *)&v35[v189];
            uint64_t v192 = *v191;
            unint64_t v193 = v191[1];
            outlined copy of Data._Representation(*v191, v193);
            uint64_t v194 = *v190;
            unint64_t v195 = v190[1];
            *os_log_type_t v190 = v192;
            v190[1] = v193;
            uint64_t v32 = v215;
            outlined consume of Data._Representation(v194, v195);
            uint64_t v196 = *(int *)(v156 + 24);
            uint64_t v197 = *(void **)&v35[v196];
            unint64_t v198 = *(void **)&v34[v196];
            *(void *)&v34[v196] = v197;
            id v199 = v197;

            goto LABEL_31;
          }
          outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v34, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        uint64_t v44 = &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?;
LABEL_20:
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(v44);
        memcpy(v34, v35, *(void *)(*(void *)(v45 - 8) + 64));
        goto LABEL_31;
      }
    }
    else
    {
      if (!v50)
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v34, v35, v46);
        goto LABEL_79;
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v46);
    }
    uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v34, v35, *(void *)(*(void *)(v154 - 8) + 64));
    goto LABEL_79;
  }
  if (v40)
  {
LABEL_19:
    uint64_t v44 = &demangling cache variable for type metadata for TetraKEM768Key?;
    goto LABEL_20;
  }
  uint64_t v41 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v42 = *(void *)(v41 - 8);
  v214 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v35, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v34, v35, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v34, v35, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v34, 0, 1, v41);
  }
  uint64_t v51 = *(int *)(v36 + 20);
  id v52 = &v34[v51];
  uint64_t v53 = &v35[v51];
  uint64_t v54 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    uint64_t v57 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v52, v53, v57);
    uint64_t v58 = *(int *)(v54 + 20);
    uint64_t v59 = (uint64_t *)&v52[v58];
    uint64_t v60 = (uint64_t *)&v53[v58];
    uint64_t v62 = *v60;
    unint64_t v61 = v60[1];
    outlined copy of Data._Representation(*v60, v61);
    *uint64_t v59 = v62;
    v59[1] = v61;
    uint64_t v31 = v223;
    uint64_t v63 = *(int *)(v54 + 24);
    uint64_t v64 = *(void **)&v53[v63];
    *(void *)&v52[v63] = v64;
    uint64_t v65 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
    id v66 = v64;
    v65(v52, 0, 1, v54);
  }
  uint64_t v32 = v214;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
LABEL_31:
  uint64_t v67 = v32[6];
  uint64_t v68 = (char *)v224 + v67;
  uint64_t v69 = &v31[v67];
  uint64_t v70 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v71 = *(void *)(v70 - 8);
  unint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  int v73 = v72(v68, 1, v70);
  int v74 = v72(v69, 1, v70);
  if (!v73)
  {
    if (v74)
    {
      outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v68, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    uint64_t v80 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v81 = *(void *)(v80 - 8);
    uint64_t v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
    int v83 = v82(v68, 1, v80);
    int v84 = v82(v69, 1, v80);
    if (v83)
    {
      if (!v84)
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v68, v69, v80);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v68, 0, 1, v80);
LABEL_85:
        uint64_t v172 = *(int *)(v70 + 20);
        v68 += v172;
        v69 += v172;
        uint64_t v173 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v174 = *(void *)(v173 - 8);
        uint64_t v175 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v174 + 48);
        int v176 = v175(v68, 1, v173);
        int v177 = v175(v69, 1, v173);
        if (v176)
        {
          if (!v177)
          {
            uint64_t v178 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v178 - 8) + 16))(v68, v69, v178);
            uint64_t v179 = *(int *)(v173 + 20);
            id v180 = (uint64_t *)&v68[v179];
            id v181 = (uint64_t *)&v69[v179];
            uint64_t v182 = *v181;
            unint64_t v183 = v181[1];
            outlined copy of Data._Representation(*v181, v183);
            uint64_t *v180 = v182;
            v180[1] = v183;
            uint64_t v184 = *(int *)(v173 + 24);
            id v185 = *(void **)&v69[v184];
            *(void *)&v68[v184] = v185;
            id v186 = *(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56);
            id v187 = v185;
            v186(v68, 0, 1, v173);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v177)
          {
            uint64_t v200 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v200 - 8) + 24))(v68, v69, v200);
            uint64_t v201 = *(int *)(v173 + 20);
            id v202 = (uint64_t *)&v68[v201];
            id v203 = (uint64_t *)&v69[v201];
            uint64_t v204 = *v203;
            unint64_t v205 = v203[1];
            outlined copy of Data._Representation(*v203, v205);
            uint64_t v206 = *v202;
            unint64_t v207 = v202[1];
            *id v202 = v204;
            v202[1] = v205;
            outlined consume of Data._Representation(v206, v207);
            uint64_t v208 = *(int *)(v173 + 24);
            uint64_t v209 = *(void **)&v69[v208];
            v210 = *(void **)&v68[v208];
            *(void *)&v68[v208] = v209;
            id v211 = v209;

            goto LABEL_47;
          }
          outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v68, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        id v78 = &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?;
LABEL_38:
        uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(v78);
        memcpy(v68, v69, *(void *)(*(void *)(v79 - 8) + 64));
        goto LABEL_47;
      }
    }
    else
    {
      if (!v84)
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 24))(v68, v69, v80);
        goto LABEL_85;
      }
      (*(void (**)(char *, uint64_t))(v81 + 8))(v68, v80);
    }
    uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v68, v69, *(void *)(*(void *)(v171 - 8) + 64));
    goto LABEL_85;
  }
  if (v74)
  {
LABEL_37:
    id v78 = &demangling cache variable for type metadata for TetraKEM1024Key?;
    goto LABEL_38;
  }
  uint64_t v75 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v76 = *(void *)(v75 - 8);
  id v216 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v69, 1, v75))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v68, v69, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v68, v69, v75);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v68, 0, 1, v75);
  }
  uint64_t v85 = *(int *)(v70 + 20);
  uint64_t v86 = &v68[v85];
  uint64_t v87 = &v69[v85];
  uint64_t v88 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v89 = *(void *)(v88 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
  {
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
  }
  else
  {
    uint64_t v91 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 16))(v86, v87, v91);
    uint64_t v92 = *(int *)(v88 + 20);
    uint64_t v93 = (uint64_t *)&v86[v92];
    long long v94 = (uint64_t *)&v87[v92];
    uint64_t v95 = *v94;
    unint64_t v96 = v94[1];
    outlined copy of Data._Representation(*v94, v96);
    *uint64_t v93 = v95;
    v93[1] = v96;
    uint64_t v31 = v223;
    uint64_t v97 = *(int *)(v88 + 24);
    uint64_t v98 = *(void **)&v87[v97];
    *(void *)&v86[v97] = v98;
    uint64_t v99 = *(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56);
    id v100 = v98;
    v99(v86, 0, 1, v88);
  }
  uint64_t v32 = v216;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
LABEL_47:
  uint64_t v101 = v32[7];
  uint64_t v102 = (void *)((char *)v224 + v101);
  uint64_t v103 = (uint64_t *)&v31[v101];
  unint64_t v104 = *(void *)&v31[v101 + 8];
  if (*(void *)((char *)v224 + v101 + 8) >> 60 == 15)
  {
    if (v104 >> 60 != 15)
    {
      uint64_t v105 = *v103;
      outlined copy of Data._Representation(*v103, v104);
      uint64_t *v102 = v105;
      v102[1] = v104;
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  if (v104 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v102);
LABEL_52:
    *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
    goto LABEL_54;
  }
  uint64_t v106 = *v103;
  outlined copy of Data._Representation(*v103, v104);
  uint64_t v107 = *v102;
  unint64_t v108 = v102[1];
  uint64_t *v102 = v106;
  v102[1] = v104;
  outlined consume of Data._Representation(v107, v108);
LABEL_54:
  uint64_t v109 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v110 = (char *)v224 + v109;
  uint64_t v111 = &v31[v109];
  uint64_t v112 = type metadata accessor for SymmetricRatchet();
  uint64_t v113 = *(void *)(v112 - 8);
  uint64_t v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v113 + 48);
  int v115 = v114(v110, 1, v112);
  int v116 = v114(v111, 1, v112);
  if (v115)
  {
    if (!v116)
    {
      (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v110, v111, v213);
      uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v110[*(int *)(v117 + 48)] = *(void *)&v111[*(int *)(v117 + 48)];
      *(void *)&v110[*(int *)(v112 + 20)] = *(void *)&v111[*(int *)(v112 + 20)];
      uint64_t v118 = *(int *)(v112 + 24);
      uint64_t v119 = &v110[v118];
      uint64_t v120 = &v111[v118];
      uint64_t v121 = *(void *)&v111[v118 + 24];
      *((void *)v119 + 3) = v121;
      *((void *)v119 + 4) = *(void *)&v111[v118 + 32];
      uint64_t v122 = **(void (***)(char *, char *, uint64_t))(v121 - 8);
      swift_bridgeObjectRetain();
      v122(v119, v120, v121);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (v116)
  {
    outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
LABEL_59:
    uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v110, v111, *(void *)(*(void *)(v123 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(char *, char *, uint64_t))(v212 + 24))(v110, v111, v213);
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)&v110[*(int *)(v153 + 48)] = *(void *)&v111[*(int *)(v153 + 48)];
  *(void *)&v110[*(int *)(v112 + 20)] = *(void *)&v111[*(int *)(v112 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)&v110[*(int *)(v112 + 24)], (uint64_t *)&v111[*(int *)(v112 + 24)]);
LABEL_60:
  *(_DWORD *)&v219[*(int *)(v218 + 28)] = *(_DWORD *)&v222[*(int *)(v218 + 28)];
  uint64_t v124 = *(int *)(v218 + 32);
  uint64_t v125 = &v219[v124];
  uint64_t v126 = &v222[v124];
  uint64_t v127 = type metadata accessor for Date();
  uint64_t v128 = *(void *)(v127 - 8);
  uint64_t v129 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 48);
  int v130 = v129(v125, 1, v127);
  int v131 = v129(v126, 1, v127);
  if (v130)
  {
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v125, v126, v127);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v128 + 8))(v125, v127);
LABEL_65:
    uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v125, v126, *(void *)(*(void *)(v132 - 8) + 64));
    goto LABEL_66;
  }
  (*(void (**)(char *, char *, uint64_t))(v128 + 24))(v125, v126, v127);
LABEL_66:
  uint64_t v133 = v217[6];
  uint64_t v134 = (char *)v221 + v133;
  uint64_t v135 = (char *)v220 + v133;
  uint64_t v136 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v136 - 8) + 24))(v134, v135, v136);
  uint64_t v137 = v217[7];
  long long v138 = (char *)v221 + v137;
  uint64_t v139 = (char *)v220 + v137;
  uint64_t v140 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v141 = *(void *)(v140 - 8);
  uint64_t v142 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 48);
  LODWORD(v134) = v142(v138, 1, v140);
  int v143 = v142(v139, 1, v140);
  if (!v134)
  {
    if (!v143)
    {
      (*(void (**)(char *, char *, uint64_t))(v141 + 24))(v138, v139, v140);
      goto LABEL_72;
    }
    (*(void (**)(char *, uint64_t))(v141 + 8))(v138, v140);
    goto LABEL_71;
  }
  if (v143)
  {
LABEL_71:
    uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v138, v139, *(void *)(*(void *)(v144 - 8) + 64));
    goto LABEL_72;
  }
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v138, v139, v140);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
LABEL_72:
  uint64_t v145 = v217[8];
  v146 = (uint64_t *)((char *)v221 + v145);
  id v147 = (uint64_t *)((char *)v220 + v145);
  uint64_t v148 = *v147;
  unint64_t v149 = v147[1];
  outlined copy of Data._Representation(*v147, v149);
  uint64_t v150 = *v146;
  unint64_t v151 = v146[1];
  uint64_t *v146 = v148;
  v146[1] = v149;
  outlined consume of Data._Representation(v150, v151);
  *((unsigned char *)v221 + v217[9]) = *((unsigned char *)v220 + v217[9]);
  return v221;
}

_DWORD *initializeWithTake for TetraSessionState(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  SecKeyRef v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v91 = a2;
  uint64_t v92 = a1;
  uint64_t v90 = a3;
  uint64_t v84 = v10;
  uint64_t v85 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = type metadata accessor for TetraRatchetState(0);
  *(void *)&v7[*(int *)(v12 + 20)] = *(void *)&v8[*(int *)(v12 + 20)];
  uint64_t v88 = v12;
  uint64_t v13 = *(int *)(v12 + 24);
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  *(void *)&v7[v13] = *(void *)&v8[v13];
  uint64_t v16 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v17 = &v14[v16];
  uint64_t v18 = &v15[v16];
  uint64_t v19 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v89 = v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = &v14[v23];
  uint64_t v25 = &v15[v23];
  uint64_t v26 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v86 = v22;
    uint64_t v29 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v24, v25, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
    }
    uint64_t v32 = *(int *)(v26 + 20);
    uint64_t v33 = &v24[v32];
    uint64_t v34 = &v25[v32];
    uint64_t v35 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v38 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v33, v34, v38);
      *(_OWORD *)&v33[*(int *)(v35 + 20)] = *(_OWORD *)&v34[*(int *)(v35 + 20)];
      *(void *)&v33[*(int *)(v35 + 24)] = *(void *)&v34[*(int *)(v35 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    uint64_t v22 = v86;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v39 = v22[6];
  int v40 = &v14[v39];
  uint64_t v41 = &v15[v39];
  uint64_t v42 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v43 = *(void *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    uint64_t v87 = v22;
    uint64_t v45 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v41, 1, v45))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v40, v41, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
    }
    uint64_t v48 = *(int *)(v42 + 20);
    int v49 = &v40[v48];
    int v50 = &v41[v48];
    uint64_t v51 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      uint64_t v54 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v49, v50, v54);
      *(_OWORD *)&v49[*(int *)(v51 + 20)] = *(_OWORD *)&v50[*(int *)(v51 + 20)];
      *(void *)&v49[*(int *)(v51 + 24)] = *(void *)&v50[*(int *)(v51 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    uint64_t v22 = v87;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  *(_OWORD *)&v14[v22[7]] = *(_OWORD *)&v15[v22[7]];
  uint64_t v55 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v56 = &v14[v55];
  uint64_t v57 = &v15[v55];
  uint64_t v58 = type metadata accessor for SymmetricRatchet();
  uint64_t v59 = *(void *)(v58 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
  {
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v56, v57, v85);
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v56[*(int *)(v61 + 48)] = *(void *)&v57[*(int *)(v61 + 48)];
    *(void *)&v56[*(int *)(v58 + 20)] = *(void *)&v57[*(int *)(v58 + 20)];
    uint64_t v62 = *(int *)(v58 + 24);
    uint64_t v63 = &v56[v62];
    uint64_t v64 = &v57[v62];
    long long v65 = *((_OWORD *)v64 + 1);
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v65;
    *((void *)v63 + 4) = *((void *)v64 + 4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  }
  *(_DWORD *)&v89[*(int *)(v88 + 28)] = *(_DWORD *)&v8[*(int *)(v88 + 28)];
  uint64_t v66 = *(int *)(v88 + 32);
  uint64_t v67 = &v89[v66];
  uint64_t v68 = &v8[v66];
  uint64_t v69 = type metadata accessor for Date();
  uint64_t v70 = *(void *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
  {
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  }
  uint64_t v72 = v90[6];
  int v73 = (char *)v92 + v72;
  int v74 = (char *)v91 + v72;
  uint64_t v75 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v73, v74, v75);
  uint64_t v76 = v90[7];
  uint64_t v77 = (char *)v92 + v76;
  id v78 = (char *)v91 + v76;
  uint64_t v79 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v80 = *(void *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  uint64_t v82 = v90[9];
  *(_OWORD *)((char *)v92 + v90[8]) = *(_OWORD *)((char *)v91 + v90[8]);
  *((unsigned char *)v92 + v82) = *((unsigned char *)v91 + v82);
  return v92;
}

_DWORD *assignWithTake for TetraSessionState(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  SecKeyRef v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v162 = a2;
  unint64_t v163 = a1;
  uint64_t v159 = v9;
  int v160 = a3;
  uint64_t v158 = v10;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = type metadata accessor for TetraRatchetState(0);
  *(void *)&v7[*(int *)(v15 + 20)] = *(void *)&v8[*(int *)(v15 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v161 = v15;
  uint64_t v16 = *(int *)(v15 + 24);
  uint64_t v17 = &v7[v16];
  uint64_t v164 = v8;
  uint64_t v18 = &v8[v16];
  uint64_t v19 = *(void **)&v7[v16];
  *(void *)uint64_t v17 = *(void *)v18;

  uint64_t v20 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v21 = &v17[v20];
  uint64_t v22 = &v18[v20];
  uint64_t v23 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
LABEL_13:
  uint64_t v165 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v29 = v165[5];
  uint64_t v30 = &v17[v29];
  uint64_t v31 = &v18[v29];
  uint64_t v32 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (v36)
    {
      outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v30, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    uint64_t v42 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v156 = *(void *)(v42 - 8);
    uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 48);
    int v44 = v43(v30, 1, v42);
    int v45 = v43(v31, 1, v42);
    if (v44)
    {
      if (!v45)
      {
        (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v30, v31, v42);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v30, 0, 1, v42);
LABEL_77:
        uint64_t v129 = *(int *)(v32 + 20);
        v30 += v129;
        v31 += v129;
        uint64_t v130 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v131 = *(void *)(v130 - 8);
        uint64_t v132 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v131 + 48);
        int v133 = v132(v30, 1, v130);
        int v134 = v132(v31, 1, v130);
        if (v133)
        {
          if (!v134)
          {
            uint64_t v135 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 32))(v30, v31, v135);
            *(_OWORD *)&v30[*(int *)(v130 + 20)] = *(_OWORD *)&v31[*(int *)(v130 + 20)];
            *(void *)&v30[*(int *)(v130 + 24)] = *(void *)&v31[*(int *)(v130 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v30, 0, 1, v130);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v134)
          {
            uint64_t v144 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v144 - 8) + 40))(v30, v31, v144);
            uint64_t v145 = *(int *)(v130 + 20);
            uint64_t v146 = *(void *)&v30[v145];
            unint64_t v147 = *(void *)&v30[v145 + 8];
            *(_OWORD *)&v30[v145] = *(_OWORD *)&v31[v145];
            outlined consume of Data._Representation(v146, v147);
            uint64_t v148 = *(int *)(v130 + 24);
            unint64_t v149 = *(void **)&v30[v148];
            *(void *)&v30[v148] = *(void *)&v31[v148];

            goto LABEL_31;
          }
          outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v30, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        int v40 = &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?;
LABEL_20:
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v40);
        memcpy(v30, v31, *(void *)(*(void *)(v41 - 8) + 64));
        goto LABEL_31;
      }
    }
    else
    {
      if (!v45)
      {
        (*(void (**)(char *, char *, uint64_t))(v156 + 40))(v30, v31, v42);
        goto LABEL_77;
      }
      (*(void (**)(char *, uint64_t))(v156 + 8))(v30, v42);
    }
    uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v30, v31, *(void *)(*(void *)(v128 - 8) + 64));
    goto LABEL_77;
  }
  if (v36)
  {
LABEL_19:
    int v40 = &demangling cache variable for type metadata for TetraKEM768Key?;
    goto LABEL_20;
  }
  uint64_t v37 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v31, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v30, v31, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v30, v31, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v30, 0, 1, v37);
  }
  uint64_t v46 = *(int *)(v32 + 20);
  uint64_t v47 = &v30[v46];
  uint64_t v48 = &v31[v46];
  uint64_t v49 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    uint64_t v52 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v47, v48, v52);
    *(_OWORD *)&v47[*(int *)(v49 + 20)] = *(_OWORD *)&v48[*(int *)(v49 + 20)];
    *(void *)&v47[*(int *)(v49 + 24)] = *(void *)&v48[*(int *)(v49 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_31:
  uint64_t v53 = v165[6];
  uint64_t v54 = &v17[v53];
  uint64_t v55 = &v18[v53];
  uint64_t v56 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (v60)
    {
      outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v54, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    uint64_t v66 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v157 = *(void *)(v66 - 8);
    uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v157 + 48);
    int v68 = v67(v54, 1, v66);
    int v69 = v67(v55, 1, v66);
    if (v68)
    {
      if (!v69)
      {
        (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v54, v55, v66);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(v54, 0, 1, v66);
LABEL_83:
        uint64_t v137 = *(int *)(v56 + 20);
        v54 += v137;
        v55 += v137;
        uint64_t v138 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v139 = *(void *)(v138 - 8);
        uint64_t v140 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v139 + 48);
        int v141 = v140(v54, 1, v138);
        int v142 = v140(v55, 1, v138);
        if (v141)
        {
          if (!v142)
          {
            uint64_t v143 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 32))(v54, v55, v143);
            *(_OWORD *)&v54[*(int *)(v138 + 20)] = *(_OWORD *)&v55[*(int *)(v138 + 20)];
            *(void *)&v54[*(int *)(v138 + 24)] = *(void *)&v55[*(int *)(v138 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(v54, 0, 1, v138);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v142)
          {
            uint64_t v150 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v150 - 8) + 40))(v54, v55, v150);
            uint64_t v151 = *(int *)(v138 + 20);
            uint64_t v152 = *(void *)&v54[v151];
            unint64_t v153 = *(void *)&v54[v151 + 8];
            *(_OWORD *)&v54[v151] = *(_OWORD *)&v55[v151];
            outlined consume of Data._Representation(v152, v153);
            uint64_t v154 = *(int *)(v138 + 24);
            uint64_t v155 = *(void **)&v54[v154];
            *(void *)&v54[v154] = *(void *)&v55[v154];

            goto LABEL_47;
          }
          outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v54, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        uint64_t v64 = &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?;
LABEL_38:
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(v64);
        memcpy(v54, v55, *(void *)(*(void *)(v65 - 8) + 64));
        goto LABEL_47;
      }
    }
    else
    {
      if (!v69)
      {
        (*(void (**)(char *, char *, uint64_t))(v157 + 40))(v54, v55, v66);
        goto LABEL_83;
      }
      (*(void (**)(char *, uint64_t))(v157 + 8))(v54, v66);
    }
    uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v54, v55, *(void *)(*(void *)(v136 - 8) + 64));
    goto LABEL_83;
  }
  if (v60)
  {
LABEL_37:
    uint64_t v64 = &demangling cache variable for type metadata for TetraKEM1024Key?;
    goto LABEL_38;
  }
  uint64_t v61 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v55, 1, v61))
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v54, v55, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v54, v55, v61);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v54, 0, 1, v61);
  }
  uint64_t v70 = *(int *)(v56 + 20);
  uint64_t v71 = &v54[v70];
  uint64_t v72 = &v55[v70];
  uint64_t v73 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v74 = *(void *)(v73 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
  {
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    uint64_t v76 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32))(v71, v72, v76);
    *(_OWORD *)&v71[*(int *)(v73 + 20)] = *(_OWORD *)&v72[*(int *)(v73 + 20)];
    *(void *)&v71[*(int *)(v73 + 24)] = *(void *)&v72[*(int *)(v73 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_47:
  uint64_t v77 = v165[7];
  uint64_t v78 = (uint64_t)&v17[v77];
  uint64_t v79 = &v18[v77];
  unint64_t v80 = *(void *)&v17[v77 + 8];
  if (v80 >> 60 == 15)
  {
LABEL_50:
    *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
    goto LABEL_52;
  }
  unint64_t v81 = *((void *)v79 + 1);
  if (v81 >> 60 == 15)
  {
    outlined destroy of Data(v78);
    goto LABEL_50;
  }
  uint64_t v82 = *(void *)v78;
  *(void *)uint64_t v78 = *(void *)v79;
  *(void *)(v78 + 8) = v81;
  outlined consume of Data._Representation(v82, v80);
LABEL_52:
  uint64_t v83 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v84 = &v17[v83];
  uint64_t v85 = &v18[v83];
  uint64_t v86 = type metadata accessor for SymmetricRatchet();
  uint64_t v87 = *(void *)(v86 - 8);
  uint64_t v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 48);
  int v89 = v88(v84, 1, v86);
  int v90 = v88(v85, 1, v86);
  if (v89)
  {
    if (!v90)
    {
      (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v84, v85, v159);
      uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v84[*(int *)(v91 + 48)] = *(void *)&v85[*(int *)(v91 + 48)];
      *(void *)&v84[*(int *)(v86 + 20)] = *(void *)&v85[*(int *)(v86 + 20)];
      uint64_t v92 = *(int *)(v86 + 24);
      uint64_t v93 = &v84[v92];
      long long v94 = &v85[v92];
      long long v95 = *((_OWORD *)v94 + 1);
      *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
      *((_OWORD *)v93 + 1) = v95;
      *((void *)v93 + 4) = *((void *)v94 + 4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v90)
  {
    outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
LABEL_57:
    uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v84, v85, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(char *, char *, uint64_t))(v158 + 40))(v84, v85, v159);
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)&v84[*(int *)(v123 + 48)] = *(void *)&v85[*(int *)(v123 + 48)];
  *(void *)&v84[*(int *)(v86 + 20)] = *(void *)&v85[*(int *)(v86 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v124 = *(int *)(v86 + 24);
  uint64_t v125 = (uint64_t)&v84[v124];
  uint64_t v126 = &v85[v124];
  __swift_destroy_boxed_opaque_existential_0(v125);
  long long v127 = *((_OWORD *)v126 + 1);
  *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
  *(_OWORD *)(v125 + 16) = v127;
  *(void *)(v125 + 32) = *((void *)v126 + 4);
LABEL_58:
  *(_DWORD *)&v7[*(int *)(v161 + 28)] = *(_DWORD *)&v164[*(int *)(v161 + 28)];
  uint64_t v97 = *(int *)(v161 + 32);
  uint64_t v98 = &v7[v97];
  uint64_t v99 = &v164[v97];
  uint64_t v100 = type metadata accessor for Date();
  uint64_t v101 = *(void *)(v100 - 8);
  uint64_t v102 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 48);
  int v103 = v102(v98, 1, v100);
  int v104 = v102(v99, 1, v100);
  if (v103)
  {
    if (!v104)
    {
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v98, v99, v100);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v104)
  {
    (*(void (**)(char *, uint64_t))(v101 + 8))(v98, v100);
LABEL_63:
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v98, v99, *(void *)(*(void *)(v105 - 8) + 64));
    goto LABEL_64;
  }
  (*(void (**)(char *, char *, uint64_t))(v101 + 40))(v98, v99, v100);
LABEL_64:
  uint64_t v106 = v160[6];
  uint64_t v107 = (char *)v163 + v106;
  unint64_t v108 = (char *)v162 + v106;
  uint64_t v109 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 40))(v107, v108, v109);
  uint64_t v110 = v160[7];
  uint64_t v111 = (char *)v163 + v110;
  uint64_t v112 = (char *)v162 + v110;
  uint64_t v113 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v114 = *(void *)(v113 - 8);
  int v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
  int v116 = v115(v111, 1, v113);
  int v117 = v115(v112, 1, v113);
  if (!v116)
  {
    if (!v117)
    {
      (*(void (**)(char *, char *, uint64_t))(v114 + 40))(v111, v112, v113);
      goto LABEL_70;
    }
    (*(void (**)(char *, uint64_t))(v114 + 8))(v111, v113);
    goto LABEL_69;
  }
  if (v117)
  {
LABEL_69:
    uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v111, v112, *(void *)(*(void *)(v118 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v111, v112, v113);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
LABEL_70:
  uint64_t v119 = v160[8];
  uint64_t v120 = *(void *)((char *)v163 + v119);
  unint64_t v121 = *(void *)((char *)v163 + v119 + 8);
  *(_OWORD *)((char *)v163 + v119) = *(_OWORD *)((char *)v162 + v119);
  outlined consume of Data._Representation(v120, v121);
  *((unsigned char *)v163 + v160[9]) = *((unsigned char *)v162 + v160[9]);
  return v163;
}

uint64_t getEnumTagSinglePayload for TetraSessionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21644E704);
}

uint64_t sub_21644E704(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TetraRatchetState(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
  }
  else
  {
    uint64_t v10 = type metadata accessor for P256.Signing.PublicKey();
    if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
    {
      uint64_t v7 = v10;
      uint64_t v8 = *(void *)(v10 - 8);
      uint64_t v9 = a3[6];
    }
    else
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      if (*(_DWORD *)(*(void *)(v11 - 8) + 84) != a2)
      {
        unsigned int v14 = *(unsigned __int8 *)(a1 + a3[9]);
        if (v14 >= 2) {
          return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
        }
        else {
          return 0;
        }
      }
      uint64_t v7 = v11;
      uint64_t v8 = *(void *)(v11 - 8);
      uint64_t v9 = a3[7];
    }
  }
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  return v12(a1 + v9, a2, v7);
}

uint64_t storeEnumTagSinglePayload for TetraSessionState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21644E888);
}

uint64_t sub_21644E888(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for TetraRatchetState(0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t v12 = type metadata accessor for P256.Signing.PublicKey();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = *(void *)(v12 - 8);
      uint64_t v11 = a4[6];
    }
    else
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(unsigned char *)(a1 + a4[9]) = a2 + 1;
        return result;
      }
      uint64_t v9 = result;
      uint64_t v10 = *(void *)(result - 8);
      uint64_t v11 = a4[7];
    }
  }
  unsigned int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  return v14(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for TetraSessionState()
{
  uint64_t result = type metadata singleton initialization cache for TetraSessionState;
  if (!type metadata singleton initialization cache for TetraSessionState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TetraSessionState()
{
  type metadata accessor for TetraRatchetState(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for P256.Signing.PublicKey();
    if (v1 <= 0x3F)
    {
      type metadata accessor for P256.KeyAgreement.PublicKey?();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for P256.KeyAgreement.PublicKey?()
{
  if (!lazy cache variable for type metadata for P256.KeyAgreement.PublicKey?)
  {
    type metadata accessor for P256.KeyAgreement.PublicKey();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    }
  }
}

void TetraSessionState.init(remoteTetraRegistration:sessionDST:)(char *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, int *a4@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v6 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v27 = (uint64_t)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v30 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for TetraSessionState();
  uint64_t v11 = (uint64_t)a4 + v10[7];
  uint64_t v12 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = TetraRegistration.computeKeysHash()();
  unsigned int v14 = (char *)a4 + v10[8];
  *(void *)unsigned int v14 = v13;
  *((void *)v14 + 1) = v15;
  id v16 = objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey], sel_compactRepresentation);
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  uint64_t v31 = v17;
  uint64_t v32 = v19;
  uint64_t v20 = v33;
  P256.Signing.PublicKey.init<A>(compactRepresentation:)();
  if (v20)
  {

    outlined destroy of TetraSessionStates?(v11, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    outlined consume of Data._Representation(*(void *)v14, *((void *)v14 + 1));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))((char *)a4 + v10[6], v9, v26);
    *((unsigned char *)a4 + v10[9]) = 0;
    uint64_t v21 = a1;
    uint64_t v22 = v27;
    TetraRatchetState.init(asSenderWithRemoteTetraRegistration:sessionDST:)(v21, v28, v29, v27);
    outlined init with take of TetraRatchetState(v22, (uint64_t)a4 + v10[5]);
    unsigned int v23 = *(_DWORD *)&v21[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];

    if (v23 >= 0xD) {
      int v24 = 13;
    }
    else {
      int v24 = v23;
    }
    *a4 = v24;
  }
}

unint64_t TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v2 + *(int *)(type metadata accessor for TetraSessionState() + 20);
  unint64_t v9 = *(void *)(v8 + *(int *)(type metadata accessor for TetraRatchetState(0) + 20));
  uint64_t v13[2] = a1;
  swift_bridgeObjectRetain();
  unint64_t result = (unint64_t)specialized _ArrayProtocol.filter(_:)(partial apply for closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:), v13, v9);
  unint64_t v11 = result;
  if (!(result >> 62))
  {
    unint64_t v12 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return v12 != 0;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  unint64_t v12 = result;
  if (!result) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v11 & 0xC000000000000001) != 0)
  {
    MEMORY[0x2166CCBD0](0, v11);
    goto LABEL_6;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    type metadata accessor for SymmetricRatchet();
    specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)v7);
    outlined destroy of TetraSessionStates?((uint64_t)v7, &demangling cache variable for type metadata for SymmetricKey?);
    swift_endAccess();
    swift_release();
    return v12 != 0;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(void *a1)
{
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, *a1 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey, v2);
  uint64_t v6 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v8 = v7;
  uint64_t v9 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v11 = v10;
  char v12 = specialized static Data.== infix(_:_:)(v6, v8, v9, v10);
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(v6, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v12 & 1;
}

unint64_t TetraSessionState.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x566E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x5374656863746172;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TetraSessionState.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraSessionState.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for TetraSessionState();
    LOBYTE(v12) = 1;
    type metadata accessor for TetraRatchetState(0);
    lazy protocol witness table accessor for type TetraRatchetState and conformance TetraRatchetState(&lazy protocol witness table cache variable for type TetraRatchetState and conformance TetraRatchetState, (void (*)(uint64_t))type metadata accessor for TetraRatchetState);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    type metadata accessor for P256.Signing.PublicKey();
    lazy protocol witness table accessor for type TetraRatchetState and conformance TetraRatchetState(&lazy protocol witness table cache variable for type P256.Signing.PublicKey and conformance P256.Signing.PublicKey, MEMORY[0x263F047E0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    type metadata accessor for P256.KeyAgreement.PublicKey();
    lazy protocol witness table accessor for type TetraRatchetState and conformance TetraRatchetState(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, MEMORY[0x263F04770]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TetraSessionState.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v31 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraSessionState.CodingKeys>);
  uint64_t v32 = *(void *)(v11 - 8);
  uint64_t v33 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TetraSessionState();
  uint64_t v39 = MEMORY[0x270FA5388](v14);
  id v16 = (_DWORD *)((char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = (uint64_t)v16 + *(int *)(v39 + 28);
  uint64_t v18 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v37 = v17;
  v19(v17, 1, 1, v18);
  uint64_t v20 = a1[3];
  uint64_t v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys();
  uint64_t v34 = v13;
  uint64_t v21 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    uint64_t v22 = v37;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
    return outlined destroy of TetraSessionStates?(v22, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  }
  else
  {
    int v40 = v7;
    LOBYTE(v41) = 0;
    uint64_t v23 = (uint64_t)v16;
    *id v16 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v41) = 1;
    lazy protocol witness table accessor for type TetraRatchetState and conformance TetraRatchetState(&lazy protocol witness table cache variable for type TetraRatchetState and conformance TetraRatchetState, (void (*)(uint64_t))type metadata accessor for TetraRatchetState);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v24 = (int *)v39;
    outlined init with take of TetraRatchetState((uint64_t)v10, v23 + *(int *)(v39 + 20));
    LOBYTE(v41) = 2;
    lazy protocol witness table accessor for type TetraRatchetState and conformance TetraRatchetState(&lazy protocol witness table cache variable for type P256.Signing.PublicKey and conformance P256.Signing.PublicKey, MEMORY[0x263F047E0]);
    uint64_t v25 = v40;
    uint64_t v26 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v23 + v24[6], v25, v26);
    LOBYTE(v41) = 3;
    lazy protocol witness table accessor for type TetraRatchetState and conformance TetraRatchetState(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, MEMORY[0x263F04770]);
    uint64_t v27 = (uint64_t)v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of P256.KeyAgreement.PublicKey?(v27, v37);
    char v42 = 4;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v23 + v24[8]) = v41;
    LOBYTE(v41) = 5;
    LOBYTE(v27) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v33);
    *(unsigned char *)(v23 + v24[9]) = v27 & 1;
    outlined init with copy of TetraSessionState(v23, v30);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
    return outlined destroy of SecureEnclave.Kyber768.PrivateKey(v23, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraSessionState.CodingKeys()
{
  return TetraSessionState.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraSessionState.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TetraSessionState.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TetraSessionState.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraSessionState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraSessionState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraSessionState@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraSessionState.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraSessionState(void *a1)
{
  return TetraSessionState.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of TetraRatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraRatchetState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TetraSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type TetraRatchetState and conformance TetraRatchetState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static TetraSessionState.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v61 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v62 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (P256.KeyAgreement.PublicKey?, P256.KeyAgreement.PublicKey?));
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for TetraSessionState();
  uint64_t v11 = MEMORY[0x270FA5388](v65);
  uint64_t v69 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v68 = (uint64_t)&v58 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v58 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v58 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v58 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v58 - v24;
  int v26 = *a1;
  int v27 = *a2;
  uint64_t v66 = a1;
  outlined init with copy of TetraSessionState((uint64_t)a1, (uint64_t)&v58 - v24);
  uint64_t v67 = a2;
  outlined init with copy of TetraSessionState((uint64_t)a2, (uint64_t)v23);
  if (v26 != v27)
  {
    outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    uint64_t v35 = (uint64_t)v66;
    outlined init with copy of TetraSessionState((uint64_t)v66, (uint64_t)v20);
    uint64_t v36 = (uint64_t)v67;
    outlined init with copy of TetraSessionState((uint64_t)v67, (uint64_t)v17);
    goto LABEL_8;
  }
  uint64_t v59 = v8;
  int v60 = v10;
  uint64_t v28 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v30 = v29;
  uint64_t v31 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v33 = v32;
  char v34 = specialized static Data.== infix(_:_:)(v28, v30, v31, v32);
  outlined consume of Data._Representation(v31, v33);
  outlined consume of Data._Representation(v28, v30);
  outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  uint64_t v35 = (uint64_t)v66;
  outlined init with copy of TetraSessionState((uint64_t)v66, (uint64_t)v20);
  uint64_t v36 = (uint64_t)v67;
  outlined init with copy of TetraSessionState((uint64_t)v67, (uint64_t)v17);
  if ((v34 & 1) == 0)
  {
LABEL_8:
    outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    uint64_t v38 = v68;
    outlined init with copy of TetraSessionState(v35, v68);
    uint64_t v39 = v69;
    outlined init with copy of TetraSessionState(v36, v69);
    goto LABEL_9;
  }
  char v37 = specialized static Data.== infix(_:_:)(*(void *)&v20[*(int *)(v65 + 32)], *(void *)&v20[*(int *)(v65 + 32) + 8], *(void *)&v17[*(int *)(v65 + 32)], *(void *)&v17[*(int *)(v65 + 32) + 8]);
  outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  outlined destroy of SecureEnclave.Kyber768.PrivateKey((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  uint64_t v38 = v68;
  outlined init with copy of TetraSessionState(v35, v68);
  uint64_t v39 = v69;
  outlined init with copy of TetraSessionState(v36, v69);
  if ((v37 & 1) == 0)
  {
LABEL_9:
    outlined destroy of SecureEnclave.Kyber768.PrivateKey(v39, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    outlined destroy of SecureEnclave.Kyber768.PrivateKey(v38, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
LABEL_10:
    char v47 = 0;
    return v47 & 1;
  }
  uint64_t v40 = *(int *)(v65 + 28);
  uint64_t v41 = v39 + v40;
  uint64_t v42 = (uint64_t)v60;
  uint64_t v43 = (uint64_t)&v60[*(int *)(v59 + 48)];
  outlined init with copy of P256.KeyAgreement.PublicKey?(v38 + v40, (uint64_t)v60);
  outlined init with copy of P256.KeyAgreement.PublicKey?(v41, v43);
  uint64_t v45 = v63;
  uint64_t v44 = v64;
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  if (v46(v42, 1, v64) != 1)
  {
    uint64_t v49 = (uint64_t)v62;
    outlined init with copy of P256.KeyAgreement.PublicKey?(v42, (uint64_t)v62);
    if (v46(v43, 1, v44) != 1)
    {
      uint64_t v50 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v61, v43, v44);
      uint64_t v51 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v53 = v52;
      uint64_t v54 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v56 = v55;
      char v47 = specialized static Data.== infix(_:_:)(v51, v53, v54, v55);
      outlined consume of Data._Representation(v54, v56);
      outlined consume of Data._Representation(v51, v53);
      uint64_t v57 = *(void (**)(char *, uint64_t))(v45 + 8);
      v57(v50, v44);
      outlined destroy of SecureEnclave.Kyber768.PrivateKey(v69, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      outlined destroy of SecureEnclave.Kyber768.PrivateKey(v38, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      v57(v62, v44);
      outlined destroy of TetraSessionStates?(v42, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      return v47 & 1;
    }
    outlined destroy of SecureEnclave.Kyber768.PrivateKey(v39, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    outlined destroy of SecureEnclave.Kyber768.PrivateKey(v38, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v49, v44);
    goto LABEL_14;
  }
  outlined destroy of SecureEnclave.Kyber768.PrivateKey(v39, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  outlined destroy of SecureEnclave.Kyber768.PrivateKey(v38, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  if (v46(v43, 1, v44) != 1)
  {
LABEL_14:
    outlined destroy of TetraSessionStates?(v42, &demangling cache variable for type metadata for (P256.KeyAgreement.PublicKey?, P256.KeyAgreement.PublicKey?));
    goto LABEL_10;
  }
  outlined destroy of TetraSessionStates?(v42, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  char v47 = 1;
  return v47 & 1;
}

uint64_t outlined init with copy of P256.KeyAgreement.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(void *a1)
{
  return closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(a1) & 1;
}

uint64_t getEnumTagSinglePayload for TetraSessionState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TetraSessionState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216450780);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TetraSessionState.CodingKeys()
{
  return &unk_26C7042E8;
}

uint64_t specialized TetraSessionState.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x566E6F6973736573 && a2 == 0xEE006E6F69737265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5374656863746172 && a2 == 0xEC00000065746174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000021649C510 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021649C530 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021649C550 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000021649C570)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t type metadata instantiation function for HKDFRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t initializeBufferWithCopyOfBuffer for HKDFRatchet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for HKDFRatchet(uint64_t *a1)
{
  outlined consume of Data._Representation(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  return outlined consume of Data._Representation(v2, v3);
}

uint64_t initializeWithCopy for HKDFRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  outlined copy of Data._Representation(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for HKDFRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  outlined copy of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  outlined consume of Data._Representation(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v12;
  return a1;
}

uint64_t assignWithTake for HKDFRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKDFRatchet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for HKDFRatchet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t type metadata accessor for HKDFRatchet()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for SymmetricRatchetStep.ratchet(_:) in conformance HKDFRatchet<A>(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a5;
  uint64_t v66 = a4;
  uint64_t v54 = a1;
  unint64_t v55 = a2;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SymmetricKey, UInt64));
  uint64_t v7 = MEMORY[0x270FA5388](v64);
  unint64_t v53 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v52 = (char *)&v48 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v65 = (char *)&v48 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v67 = (char *)&v48 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v48 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = *v5;
  uint64_t v60 = v5[1];
  uint64_t v61 = v24;
  uint64_t v25 = v5[2];
  uint64_t v57 = v5[3];
  uint64_t v58 = v25;
  uint64_t v59 = v5[4];
  int v56 = *((unsigned __int8 *)v5 + 40);
  uint64_t v26 = *(int *)(v21 + 48);
  uint64_t v27 = type metadata accessor for SymmetricKey();
  uint64_t v28 = *(void *)(v27 - 8);
  unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v29(v23, a3, v27);
  uint64_t v62 = v26;
  uint64_t v30 = v66;
  *(void *)&v23[v26] = v66;
  uint64_t v68 = v14;
  uint64_t v31 = *(int *)(v14 + 48);
  v29(v20, (uint64_t)v23, v27);
  *(void *)&v20[v31] = v30;
  uint64_t result = outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v20);
  if (v30 == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v33 = *(int *)(v68 + 48);
    uint64_t v51 = (void (*)(char *, char *, uint64_t))v29;
    v29(v17, (uint64_t)v23, v27);
    *(void *)&v17[v33] = v30;
    uint64_t v34 = SymmetricKey.bitCount.getter();
    uint64_t v49 = v28;
    uint64_t v50 = *(void (**)(char *, uint64_t))(v28 + 8);
    v50(v17, v27);
    uint64_t v66 = v34 / 8;
    uint64_t v69 = v58;
    uint64_t v70 = v57;
    if (v56) {
      uint64_t v35 = v34 / 8;
    }
    else {
      uint64_t v35 = v59;
    }
    uint64_t v36 = *(int *)(v64 + 48);
    uint64_t v37 = *(void *)(v63 + 16);
    uint64_t v38 = *(void *)(v63 + 24);
    uint64_t v58 = v35;
    uint64_t v59 = v37;
    uint64_t v63 = v38;
    uint64_t v64 = v36;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v39 = v67;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    uint64_t v40 = *(int *)(v68 + 48);
    v51(v17, v23, v27);
    uint64_t v41 = v62;
    uint64_t v42 = *(void *)&v23[v62];
    *(void *)&v17[v40] = v42;
    *(void *)&v39[v64] = v42;
    v50(v17, v27);
    uint64_t v69 = v61;
    uint64_t v70 = v60;
    uint64_t v43 = v65;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    uint64_t v44 = *(void *)&v23[v41];
    uint64_t result = outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v23);
    if (v44 != -1)
    {
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      uint64_t v46 = v52;
      v45(v52, v67, v27);
      v45(v54, v46, v27);
      char v47 = v53;
      v45(v53, v43, v27);
      v45(v55, v47, v27);
      return v42;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of (key: SymmetricKey, index: UInt64)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey()
{
  unint64_t result = lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey;
  if (!lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey)
  {
    type metadata accessor for SymmetricKey();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureEnclave.Kyber1024()
{
  return &type metadata for SecureEnclave.Kyber1024;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber1024.PrivateKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F048B8]);
}

void destroy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2)
{
}

uint64_t initializeWithCopy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F048B8]);
}

uint64_t assignWithCopy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F048B8]);
}

uint64_t initializeWithTake for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F048B8]);
}

uint64_t assignWithTake for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F048B8]);
}

uint64_t getEnumTagSinglePayload for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2164513C4);
}

uint64_t sub_2164513C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F048B8]);
}

uint64_t storeEnumTagSinglePayload for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2164513F0);
}

uint64_t sub_2164513F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F048B8]);
}

uint64_t type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for SecureEnclave.Kyber1024.PrivateKey);
}

uint64_t type metadata completion function for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F048B8]);
}

ValueMetadata *type metadata accessor for SecureEnclave.Kyber768()
{
  return &type metadata for SecureEnclave.Kyber768;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber768.PrivateKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F04898]);
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber1024.PrivateKey(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  int v6 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a4(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    outlined copy of Data._Representation(*v11, v13);
    *uint64_t v10 = v12;
    v10[1] = v13;
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
    id v16 = v15;
  }
  return a1;
}

void destroy for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2)
{
}

void destroy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  outlined consume of Data._Representation(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  int v6 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t initializeWithCopy for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F04898]);
}

uint64_t initializeWithCopy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (uint64_t *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  outlined copy of Data._Representation(*v10, v12);
  *uint64_t v9 = v11;
  v9[1] = v12;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = *(void **)(a2 + v13);
  *(void *)(a1 + v13) = v14;
  id v15 = v14;
  return a1;
}

uint64_t assignWithCopy for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F04898]);
}

uint64_t assignWithCopy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (uint64_t *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  outlined copy of Data._Representation(*v10, v12);
  uint64_t v13 = *v9;
  unint64_t v14 = v9[1];
  *uint64_t v9 = v11;
  v9[1] = v12;
  outlined consume of Data._Representation(v13, v14);
  uint64_t v15 = *(int *)(a3 + 24);
  id v16 = *(void **)(a2 + v15);
  uint64_t v17 = *(void **)(a1 + v15);
  *(void *)(a1 + v15) = v16;
  id v18 = v16;

  return a1;
}

uint64_t initializeWithTake for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F04898]);
}

uint64_t initializeWithTake for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F04898]);
}

uint64_t assignWithTake for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(void *)(a1 + v8);
  unint64_t v10 = *(void *)(a1 + v8 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  outlined consume of Data._Representation(v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  unint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  return a1;
}

uint64_t getEnumTagSinglePayload for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216451908);
}

uint64_t sub_216451908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F04898]);
}

uint64_t storeEnumTagSinglePayload for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_216451934);
}

uint64_t sub_216451934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F04898]);
}

uint64_t type metadata accessor for SecureEnclave.Kyber768.PrivateKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for SecureEnclave.Kyber768.PrivateKey);
}

uint64_t type metadata completion function for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, MEMORY[0x263F04898]);
}

uint64_t type metadata completion function for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SecureEnclave.Kyber1024.PrivateKey.init(dataRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenObject: TKClientTokenObject, dataRepresentation: Data, publicKey: Kyber1024.PublicKey));
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  unint64_t v12 = (uint64_t *)((char *)&v30 - v11);
  uint64_t v37 = (uint64_t)&v30 + *(int *)(v10 + 64) - v11;
  uint64_t v13 = static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(v37, a1, a2, 0, 0, MEMORY[0x263F048B8], MEMORY[0x263F048B0], 127);
  if (v3) {
    return outlined consume of Data._Representation(a1, a2);
  }
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  unint64_t v19 = v15;
  outlined consume of Data._Representation(a1, a2);
  *unint64_t v12 = v17;
  v12[1] = v18;
  v12[2] = v19;
  uint64_t v36 = (char *)v9 + *(int *)(v6 + 64);
  *uint64_t v9 = v17;
  v9[1] = v18;
  v9[2] = v19;
  uint64_t v20 = type metadata accessor for Kyber1024.PublicKey();
  uint64_t v21 = *(void **)(v20 - 8);
  uint64_t v35 = 0;
  unint64_t v32 = (void (*)(char *, uint64_t, uint64_t))v21[2];
  v32(v36, v37, v20);
  uint64_t v34 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v22 = (uint64_t *)(v38 + *(int *)(v34 + 20));
  *uint64_t v22 = v18;
  v22[1] = v19;
  outlined copy of Data._Representation(v18, v19);
  uint64_t v33 = (void (*)(char *, uint64_t))v21[1];
  v33(v36, v20);
  uint64_t v23 = (char *)v9 + *(int *)(v6 + 64);
  uint64_t v36 = (char *)*v12;
  unint64_t v24 = v12[2];
  uint64_t v31 = v12[1];
  v32(v23, v37, v20);
  uint64_t v25 = (void (*)(uint64_t, char *, uint64_t))v21[4];
  v25(v38, v23, v20);
  uint64_t v26 = (char *)v9 + *(int *)(v6 + 64);
  uint64_t v28 = v36;
  uint64_t v27 = v37;
  uint64_t v29 = v31;
  *uint64_t v9 = (uint64_t)v36;
  v9[1] = v29;
  v9[2] = v24;
  v25((uint64_t)v26, (char *)v27, v20);
  outlined consume of Data._Representation(v29, v24);
  *(void *)(v38 + *(int *)(v34 + 24)) = v28;
  return ((uint64_t (*)(char *, uint64_t))v33)(v26, v20);
}

uint64_t SecureEnclave.Kyber768.PrivateKey.init(dataRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenObject: TKClientTokenObject, dataRepresentation: Data, publicKey: Kyber768.PublicKey));
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  unint64_t v12 = (uint64_t *)((char *)&v30 - v11);
  uint64_t v37 = (uint64_t)&v30 + *(int *)(v10 + 64) - v11;
  uint64_t v13 = static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(v37, a1, a2, 0, 0, MEMORY[0x263F04898], MEMORY[0x263F04890], 62);
  if (v3) {
    return outlined consume of Data._Representation(a1, a2);
  }
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  unint64_t v19 = v15;
  outlined consume of Data._Representation(a1, a2);
  *unint64_t v12 = v17;
  v12[1] = v18;
  v12[2] = v19;
  uint64_t v36 = (char *)v9 + *(int *)(v6 + 64);
  *uint64_t v9 = v17;
  v9[1] = v18;
  v9[2] = v19;
  uint64_t v20 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v21 = *(void **)(v20 - 8);
  uint64_t v35 = 0;
  unint64_t v32 = (void (*)(char *, uint64_t, uint64_t))v21[2];
  v32(v36, v37, v20);
  uint64_t v34 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v22 = (uint64_t *)(v38 + *(int *)(v34 + 20));
  *uint64_t v22 = v18;
  v22[1] = v19;
  outlined copy of Data._Representation(v18, v19);
  uint64_t v33 = (void (*)(char *, uint64_t))v21[1];
  v33(v36, v20);
  uint64_t v23 = (char *)v9 + *(int *)(v6 + 64);
  uint64_t v36 = (char *)*v12;
  unint64_t v24 = v12[2];
  uint64_t v31 = v12[1];
  v32(v23, v37, v20);
  uint64_t v25 = (void (*)(uint64_t, char *, uint64_t))v21[4];
  v25(v38, v23, v20);
  uint64_t v26 = (char *)v9 + *(int *)(v6 + 64);
  uint64_t v28 = v36;
  uint64_t v27 = v37;
  uint64_t v29 = v31;
  *uint64_t v9 = (uint64_t)v36;
  v9[1] = v29;
  v9[2] = v24;
  v25((uint64_t)v26, (char *)v27, v20);
  outlined consume of Data._Representation(v29, v24);
  *(void *)(v38 + *(int *)(v34 + 24)) = v28;
  return ((uint64_t (*)(char *, uint64_t))v33)(v26, v20);
}

uint64_t one-time initialization function for SEPisAvailable()
{
  uint64_t result = static SecureEnclave.isAvailable.getter();
  static MPStaticProperties.SEPisAvailable = result & 1;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CryptoTokenKitError()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CryptoTokenKitError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CryptoTokenKitError()
{
  return Hasher._finalize()();
}

void one-time initialization function for token()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  id v3 = objc_allocWithZone(MEMORY[0x263F048D0]);
  uint64_t v4 = (void *)MEMORY[0x2166CC8B0](v0, v2);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithTokenID_, v4);

  static SecureEnclave.token = (uint64_t)v5;
}

uint64_t SecureEnclave.Kyber768.PrivateKey.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenObject: TKClientTokenObject, dataRepresentation: Data, publicKey: Kyber768.PublicKey));
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (uint64_t *)((char *)&v29 - v8);
  uint64_t v10 = (char *)&v29 + *(int *)(v7 + 64) - v8;
  uint64_t result = static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)((uint64_t)v10, 0, (id)0x300, MEMORY[0x263F04890]);
  if (!v1)
  {
    uint64_t v14 = v12;
    unint64_t v15 = v13;
    *uint64_t v9 = result;
    v9[1] = v12;
    v9[2] = v13;
    uint64_t v37 = (char *)v6 + *(int *)(v3 + 64);
    *uint64_t v6 = result;
    v6[1] = v12;
    v6[2] = v13;
    uint64_t v35 = 0;
    uint64_t v16 = type metadata accessor for Kyber768.PublicKey();
    uint64_t v17 = v10;
    uint64_t v36 = v10;
    uint64_t v18 = a1;
    uint64_t v19 = v16;
    uint64_t v20 = *(void **)(v16 - 8);
    unint64_t v32 = (void (*)(char *, char *, uint64_t))v20[2];
    v32(v37, v17, v16);
    uint64_t v34 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v21 = (uint64_t *)(v18 + *(int *)(v34 + 20));
    *uint64_t v21 = v14;
    v21[1] = v15;
    outlined copy of Data._Representation(v14, v15);
    uint64_t v22 = (uint64_t (*)(char *, uint64_t))v20[1];
    uint64_t v31 = v20 + 1;
    uint64_t v33 = v22;
    v22(v37, v19);
    uint64_t v23 = (char *)v6 + *(int *)(v3 + 64);
    uint64_t v37 = (char *)*v9;
    unint64_t v24 = v9[2];
    uint64_t v30 = v9[1];
    v32(v23, v36, v19);
    uint64_t v25 = (void (*)(uint64_t, char *, uint64_t))v20[4];
    v25(v18, v23, v19);
    uint64_t v26 = (char *)v6 + *(int *)(v3 + 64);
    uint64_t v27 = v37;
    uint64_t v28 = v30;
    *uint64_t v6 = (uint64_t)v37;
    v6[1] = v28;
    v6[2] = v24;
    v25((uint64_t)v26, v36, v19);
    outlined consume of Data._Representation(v28, v24);
    *(void *)(v18 + *(int *)(v34 + 24)) = v27;
    return v33(v26, v19);
  }
  return result;
}

uint64_t static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)(uint64_t a1, void *a2)
{
  return static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)(a1, a2, (id)0x300, MEMORY[0x263F04890]);
}

uint64_t static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(a1, a2, a3, a4, a5, MEMORY[0x263F04898], MEMORY[0x263F04890], 62);
}

unint64_t lazy protocol witness table accessor for type CryptoTokenKitError and conformance CryptoTokenKitError()
{
  unint64_t result = lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError;
  if (!lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError;
  if (!lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError);
  }
  return result;
}

void *closure #1 in SecureEnclave.Kyber768.PrivateKey.decapsulate(_:)(void *a1)
{
  return closure #1 in SecureEnclave.Kyber768.PrivateKey.decapsulate(_:)(a1);
}

{
  NSData v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  Class v6;
  id v7;
  id v8;
  void *v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x263EF8340];
  v2.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2164944D0;
  if (!*MEMORY[0x263F17338]) {
    __break(1u);
  }
  *(void *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v3 + 40) = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11[0] = 0;
  uint64_t v7 = objc_msgSend(a1, sel_decapsulate_algorithms_parameters_error_, v2.super.isa, isa, v6, v11);

  uint64_t v8 = v11[0];
  if (v7)
  {
    uint64_t v9 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v9 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v9;
}

uint64_t SecureEnclave.Kyber1024.PrivateKey.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenObject: TKClientTokenObject, dataRepresentation: Data, publicKey: Kyber1024.PublicKey));
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (uint64_t *)((char *)&v29 - v8);
  uint64_t v10 = (char *)&v29 + *(int *)(v7 + 64) - v8;
  uint64_t result = static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)((uint64_t)v10, 0, (id)0x400, MEMORY[0x263F048B0]);
  if (!v1)
  {
    uint64_t v14 = v12;
    unint64_t v15 = v13;
    *uint64_t v9 = result;
    v9[1] = v12;
    v9[2] = v13;
    uint64_t v37 = (char *)v6 + *(int *)(v3 + 64);
    *uint64_t v6 = result;
    v6[1] = v12;
    v6[2] = v13;
    uint64_t v35 = 0;
    uint64_t v16 = type metadata accessor for Kyber1024.PublicKey();
    uint64_t v17 = v10;
    uint64_t v36 = v10;
    uint64_t v18 = a1;
    uint64_t v19 = v16;
    uint64_t v20 = *(void **)(v16 - 8);
    unint64_t v32 = (void (*)(char *, char *, uint64_t))v20[2];
    v32(v37, v17, v16);
    uint64_t v34 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v21 = (uint64_t *)(v18 + *(int *)(v34 + 20));
    *uint64_t v21 = v14;
    v21[1] = v15;
    outlined copy of Data._Representation(v14, v15);
    uint64_t v22 = (uint64_t (*)(char *, uint64_t))v20[1];
    uint64_t v31 = v20 + 1;
    uint64_t v33 = v22;
    v22(v37, v19);
    uint64_t v23 = (char *)v6 + *(int *)(v3 + 64);
    uint64_t v37 = (char *)*v9;
    unint64_t v24 = v9[2];
    uint64_t v30 = v9[1];
    v32(v23, v36, v19);
    uint64_t v25 = (void (*)(uint64_t, char *, uint64_t))v20[4];
    v25(v18, v23, v19);
    uint64_t v26 = (char *)v6 + *(int *)(v3 + 64);
    uint64_t v27 = v37;
    uint64_t v28 = v30;
    *uint64_t v6 = (uint64_t)v37;
    v6[1] = v28;
    v6[2] = v24;
    v25((uint64_t)v26, v36, v19);
    outlined consume of Data._Representation(v28, v24);
    *(void *)(v18 + *(int *)(v34 + 24)) = v27;
    return v33(v26, v19);
  }
  return result;
}

uint64_t static SecureEnclave.Kyber1024.PrivateKey.generateKey(authContext:)(uint64_t a1, void *a2)
{
  return static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)(a1, a2, (id)0x400, MEMORY[0x263F048B0]);
}

uint64_t static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)(uint64_t a1, void *a2, id a3, void (*a4)(id *, void, void))
{
  v32[24] = *(id *)MEMORY[0x263EF8340];
  if (one-time initialization token for token != -1) {
    swift_once();
  }
  id v6 = (id)static SecureEnclave.token;
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v7);
  swift_bridgeObjectRelease();
  v32[0] = 0;
  id v8 = objc_allocWithZone(MEMORY[0x263F048D8]);
  id v9 = a2;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v8, sel_initWithToken_LAContext_parameters_error_, v6, v9, isa, v32);

  if (v32[0])
  {
    id v12 = v32[0];
    swift_willThrow();

LABEL_9:
    return (uint64_t)a3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_216494560;
  v32[0] = *(id *)MEMORY[0x263F16F98];
  id v14 = v32[0];
  type metadata accessor for CFStringRef(0);
  uint64_t v16 = v15;
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v17 = v14;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 72) = a3;
  v32[0] = *(id *)MEMORY[0x263F16FA8];
  id v18 = v32[0];
  AnyHashable.init<A>(_:)();
  if (!*MEMORY[0x263F16FD8])
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v19 = (id)*MEMORY[0x263F16FD8];

  *(void *)(inited + 168) = v16;
  *(void *)(inited + 144) = v19;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32[0] = 0;
  a3 = objc_msgSend(v11, sel_createObjectWithAttributes_error_, v20, v32);

  if (!a3)
  {
    id v29 = v32[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_9;
  }
  id v21 = v32[0];
  id v22 = objc_msgSend(a3, sel_objectID);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  id v23 = objc_msgSend(a3, sel_publicKey);
  if (!v23) {
    goto LABEL_12;
  }
  unint64_t v24 = v23;
  uint64_t v25 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  v32[0] = v25;
  v32[1] = v27;
  a4(v32, MEMORY[0x263F06F78], MEMORY[0x263F06F68]);
  if (!v30) {
    goto LABEL_9;
  }
LABEL_13:
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static SecureEnclave.Kyber1024.PrivateKey.tokenObject(with:authenticationContext:parameters:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(a1, a2, a3, a4, a5, MEMORY[0x263F048B8], MEMORY[0x263F048B0], 127);
}

uint64_t static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5, uint64_t (*a6)(void), void (*a7)(id *, void, void), uint64_t a8)
{
  v33[1] = a8;
  uint64_t v34 = a7;
  uint64_t v37 = a1;
  long long v38[2] = *(id *)MEMORY[0x263EF8340];
  uint64_t v12 = a6(0);
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  MEMORY[0x270FA5388](v12);
  id v14 = (char *)v33 - v13;
  if (one-time initialization token for token != -1) {
    swift_once();
  }
  id v15 = (id)static SecureEnclave.token;
  id v16 = (id)static SecureEnclave.token;
  if (a5) {
    unint64_t v17 = a5;
  }
  else {
    unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v17);
  swift_bridgeObjectRelease();
  v38[0] = 0;
  id v18 = objc_allocWithZone(MEMORY[0x263F048D8]);
  id v19 = a4;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v18, sel_initWithToken_LAContext_parameters_error_, v15, v19, isa, v38);

  if (v38[0])
  {
    id v22 = v38[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v15;
  }
  Class v24 = Data._bridgeToObjectiveC()().super.isa;
  v38[0] = 0;
  id v15 = objc_msgSend(v21, sel_objectForObjectID_error_, v24, v38);

  if (!v15)
  {
    id v32 = v38[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_8;
  }
  id v25 = v38[0];
  id v26 = objc_msgSend(v15, sel_publicKey);
  if (!v26)
  {
    lazy protocol witness table accessor for type CryptoTokenKitError and conformance CryptoTokenKitError();
    swift_allocError();
    swift_willThrow();

    id v21 = v15;
    goto LABEL_8;
  }
  uint64_t v27 = v26;
  uint64_t v28 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  v38[0] = v28;
  v38[1] = v30;
  outlined copy of Data._Representation((uint64_t)v28, (unint64_t)v30);
  uint64_t v31 = v33[2];
  v34(v38, MEMORY[0x263F06F78], MEMORY[0x263F06F68]);
  if (!v31)
  {
    outlined consume of Data._Representation((uint64_t)v28, (unint64_t)v30);

    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v37, v14, v36);
    outlined copy of Data._Representation(a2, a3);
    return (uint64_t)v15;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CryptoTokenKitError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x21645322CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoTokenKitError()
{
  return &type metadata for CryptoTokenKitError;
}

SecAccessControlRef TetraRatchetState.init(asSenderWithRemoteTetraRegistration:sessionDST:)@<X0>(char *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v125 = a3;
  uint64_t v126 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v114 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v121 = (uint64_t)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v119 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
  uint64_t v12 = MEMORY[0x270FA5388](v130);
  uint64_t v120 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v127 = (char *)&v104 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v129 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for TetraECDHKey();
  uint64_t v17 = MEMORY[0x270FA5388](v135);
  uint64_t v123 = (SecKeyRef *)((char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  int v133 = (char *)&v104 - v19;
  unint64_t v132 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v20 = MEMORY[0x270FA5388](v132);
  uint64_t v118 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v136 = (uint64_t)&v104 - v22;
  uint64_t v143 = (void (*)(char *, uint64_t))type metadata accessor for Kyber1024.PublicKey();
  uint64_t v23 = *((void *)v143 - 1);
  uint64_t v24 = MEMORY[0x270FA5388](v143);
  uint64_t v124 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v104 - v26;
  uint64_t v131 = type metadata accessor for KEM.EncapsulationResult();
  uint64_t v134 = *(void *)(v131 - 8);
  MEMORY[0x270FA5388](v131);
  id v29 = (char *)&v104 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for SymmetricKey();
  uint64_t v128 = *(void *)(v30 - 8);
  uint64_t v32 = v128 + 56;
  uint64_t v31 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v128 + 56);
  uint64_t v117 = v30;
  uint64_t v122 = v31;
  ((void (*)(uint64_t, uint64_t, uint64_t))v31)(a4, 1, 1);
  uint64_t v33 = type metadata accessor for TetraRatchetState(0);
  *(_DWORD *)(a4 + *(int *)(v33 + 28)) = 0;
  uint64_t v34 = *(int *)(v33 + 32);
  uint64_t v140 = a4;
  uint64_t v35 = a4 + v34;
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56);
  uint64_t v138 = v35;
  int v116 = v38;
  uint64_t v115 = v37 + 56;
  v38(v35, 1, 1, v36);
  uint64_t v39 = OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey;
  int v141 = a1;
  uint64_t v40 = *(char **)&a1[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey];
  uint64_t v142 = v23;
  uint64_t v41 = v23 + 16;
  uint64_t v42 = *(void (**)(char *, char *, void (*)(char *, uint64_t)))(v23 + 16);
  v42(v27, &v40[OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey], v143);
  uint64_t v43 = v40;
  uint64_t v137 = v29;
  uint64_t v44 = v139;
  Kyber1024.PublicKey.encapsulate()();
  uint64_t v139 = v44;
  if (v44)
  {
    (*(void (**)(char *, void *))(v142 + 8))(v27, v143);

    uint64_t v45 = v140;
LABEL_14:
    uint64_t v88 = v138;
    outlined destroy of TetraSessionStates?(v45, &demangling cache variable for type metadata for SymmetricKey?);
    return (SecAccessControlRef)outlined destroy of TetraSessionStates?(v88, &demangling cache variable for type metadata for Date?);
  }
  uint64_t v108 = v39;
  uint64_t v109 = (void (*)(char *, uint64_t, void (*)(char *, uint64_t)))v42;
  uint64_t v113 = v41;
  uint64_t v105 = v36;
  uint64_t v106 = v32;
  uint64_t v107 = v33;
  uint64_t v46 = v142 + 8;
  uint64_t v110 = *(void (**)(char *, void *))(v142 + 8);
  v110(v27, v143);

  uint64_t v47 = (uint64_t)v137;
  uint64_t v48 = KEM.EncapsulationResult.encapsulated.getter();
  unint64_t v50 = v49;
  unint64_t v51 = v132;
  uint64_t v52 = v136;
  uint64_t v53 = v136 + *(int *)(v132 + 20);
  uint64_t v54 = type metadata accessor for TetraKEM768Key(0);
  unint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56);
  uint64_t v142 = v53;
  v55(v53, 1, 1, v54);
  uint64_t v56 = v52 + *(int *)(v51 + 24);
  uint64_t v57 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56);
  uint64_t v111 = v56;
  v58(v56, 1, 1, v57);
  uint64_t v59 = v52 + *(int *)(v51 + 28);
  *(void *)uint64_t v59 = v48;
  *(void *)(v59 + 8) = v50;
  uint64_t v112 = v48;
  unint64_t v132 = v50;
  outlined copy of Data._Representation(v48, v50);
  uint64_t v60 = v46;
  if (one-time initialization token for SEPisAvailable != -1) {
    swift_once();
  }
  uint64_t v61 = v139;
  uint64_t v62 = (uint64_t)v133;
  uint64_t v63 = v135;
  if (static MPStaticProperties.SEPisAvailable != 1)
  {
    id v71 = objc_msgSend(self, sel_newCompactPrivateKey);
    uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v74 = v73;

    SecKeyRef v75 = specialized TetraECDHSecKey.init(aksBlob:)(v72, v74);
    if (!v61)
    {
      SecKeyRef v76 = v75;
      uint64_t v142 = v60;
      outlined consume of Data._Representation(v72, v74);
      uint64_t v70 = v123;
      SecKeyRef *v123 = v76;
      uint64_t v77 = (char *)v70 + *(int *)(v63 + 20);
      uint64_t v78 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 1, 1, v78);
      uint64_t v66 = v130;
      goto LABEL_13;
    }
    outlined consume of Data._Representation(v72, v74);
    id v65 = v141;
    uint64_t v68 = v134;
    uint64_t v47 = (uint64_t)v137;
LABEL_11:
    outlined consume of Data._Representation(v112, v132);
    outlined destroy of TetraSessionStates?(v142, &demangling cache variable for type metadata for TetraKEM768Key?);
    outlined destroy of TetraSessionStates?(v111, &demangling cache variable for type metadata for TetraKEM1024Key?);
    outlined consume of Data?(*(void *)v59, *(void *)(v59 + 8));

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v47, v131);
    uint64_t v45 = v140;
    goto LABEL_14;
  }
  SecAccessControlRef result = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x263F16EA0], 0, 0);
  id v65 = v141;
  uint64_t v66 = v130;
  if (result)
  {
    uint64_t v67 = (uint64_t)v129;
    SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)();
    uint64_t v68 = v134;
    if (!v61)
    {
      uint64_t v142 = v60;
      uint64_t v69 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v67, 0, 1, v69);
      uint64_t v70 = v123;
      outlined init with take of KEM.EncapsulationResult?(v67, (uint64_t)v123 + *(int *)(v135 + 20), &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      *uint64_t v70 = 0;
LABEL_13:
      outlined init with take of TetraOutgoingSymmetricRatchet((uint64_t)v70, v62, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
      uint64_t v79 = v62;
      uint64_t v80 = v136;
      outlined init with take of TetraOutgoingSymmetricRatchet(v79, v136, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
      outlined consume of Data._Representation(v112, v132);
      uint64_t v81 = (uint64_t)v127;
      uint64_t v82 = (uint64_t)&v127[*(int *)(v66 + 48)];
      uint64_t v83 = &v141[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_ecdhPublicKey];
      uint64_t v84 = (uint64_t)v124;
      v109(v124, *(void *)&v141[v108] + OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey, v143);
      uint64_t v85 = v126(1);
      unint64_t v87 = v86;
      uint64_t v135 = v82;
      static TetraRatchetState.deriveRootAndChainKeyAsSender(theirECDHPublicKey:theirKyber1024Key:encapResult:ourOutgoingKeys:conversationDST:)(v81, v82, (uint64_t)v83, v84, (uint64_t)v137, v80, v85, v86);
      outlined consume of Data._Representation(v85, v87);
      v110((char *)v84, v143);
      outlined destroy of TetraSessionStates?(v140, &demangling cache variable for type metadata for SymmetricKey?);
      int v89 = v120;
      int v90 = &v120[*(int *)(v130 + 48)];
      uint64_t v91 = v128;
      uint64_t v139 = 0;
      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
      uint64_t v93 = v117;
      v92(v120, v81, v117);
      v92(v90, v135, v93);
      uint64_t v94 = v81;
      uint64_t v142 = *(void *)(v91 + 32);
      uint64_t v95 = v140;
      ((void (*)(uint64_t, char *, uint64_t))v142)(v140, v89, v93);
      v122(v95, 0, 1, v93);
      uint64_t v96 = *(void (**)(char *, uint64_t))(v91 + 8);
      uint64_t v128 = v91 + 8;
      uint64_t v143 = v96;
      v96(v90, v93);
      uint64_t v97 = (uint64_t)v119;
      Date.init()();
      v116(v97, 0, 1, v105);
      outlined assign with take of SymmetricKey?(v97, v138, &demangling cache variable for type metadata for Date?);
      *(void *)(v95 + *(int *)(v107 + 20)) = MEMORY[0x263F8EE78];
      uint64_t v98 = &v89[*(int *)(v130 + 48)];
      uint64_t v99 = v89;
      v92(v89, v94, v93);
      v92(v98, v135, v93);
      uint64_t v100 = (uint64_t)v114;
      ((void (*)(char *, char *, uint64_t))v142)(v114, v98, v93);
      v122(v100, 0, 1, v93);
      uint64_t v101 = v136;
      uint64_t v102 = v118;
      outlined init with copy of TetraRatchetState(v136, v118, type metadata accessor for TetraOutgoingKeyContent);
      uint64_t v103 = v121;
      TetraOutgoingSymmetricRatchet.init(symmetricRatchetHead:outgoingPublicKeys:)(v100, v102, v121);

      outlined destroy of TetraSessionStates?(v94, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
      outlined destroy of TetraOutgoingSymmetricRatchet(v101, type metadata accessor for TetraOutgoingKeyContent);
      (*(void (**)(char *, uint64_t))(v134 + 8))(v137, v131);
      v143(v99, v93);
      return (SecAccessControlRef)outlined init with take of TetraOutgoingSymmetricRatchet(v103, v140 + *(int *)(v107 + 24), type metadata accessor for TetraOutgoingSymmetricRatchet);
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id TetraRatchetState.init(asReceiverWithFullPrekey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v78 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v79 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v8 = MEMORY[0x270FA5388](v75);
  SecKeyRef v76 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v77 = (uint64_t)&v67 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v11 - 8);
  unint64_t v73 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v74 = *(void *)(v87 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v87);
  uint64_t v86 = (uint64_t)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v88 = (uint64_t)&v67 - v15;
  uint64_t v16 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v80 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for TetraECDHKey();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v81 = (uint64_t)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (SecKeyRef *)((char *)&v67 - v23);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v69 = (uint64_t)&v67 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v91 = (uint64_t *)((char *)&v67 - v27);
  uint64_t v28 = type metadata accessor for SymmetricKey();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v84 = v28;
  uint64_t v82 = v29 + 56;
  v83(a2, 1, 1);
  uint64_t v30 = type metadata accessor for TetraRatchetState(0);
  *(_DWORD *)(a2 + *(int *)(v30 + 28)) = 0;
  uint64_t v85 = v30;
  uint64_t v31 = *(int *)(v30 + 32);
  uint64_t v92 = a2;
  uint64_t v32 = a2 + v31;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56);
  *(void *)&long long v89 = v32;
  uint64_t v72 = v33;
  id v71 = v35;
  uint64_t v70 = v34 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v35)(v32, 1, 1);
  unsigned int v36 = objc_msgSend(a1, sel_isSEPKey);
  uint64_t v37 = a1;
  id v38 = objc_msgSend(a1, sel_keychainData);
  uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v41 = v40;

  if (v36)
  {
    uint64_t v42 = v80;
    uint64_t v43 = v90;
    SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)();
    if (!v43)
    {
      uint64_t v90 = 0;
      uint64_t v44 = v91;
      uint64_t v45 = (char *)v91 + *(int *)(v19 + 20);
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v45, v42, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v45, 0, 1, v16);
      *uint64_t v44 = 0;
      goto LABEL_8;
    }
LABEL_6:

    outlined destroy of TetraSessionStates?(v92, &demangling cache variable for type metadata for SymmetricKey?);
    return (id)outlined destroy of TetraSessionStates?(v89, &demangling cache variable for type metadata for Date?);
  }
  uint64_t v46 = (uint64_t)v24 + *(int *)(v19 + 20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v46, 1, 1, v16);
  uint64_t v47 = v90;
  SecKeyRef v48 = specialized TetraECDHSecKey.init(aksBlob:)(v39, v41);
  outlined consume of Data._Representation(v39, v41);
  if (v47)
  {
    outlined destroy of TetraSessionStates?(v46, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    goto LABEL_6;
  }
  uint64_t v90 = 0;
  *uint64_t v24 = v48;
  uint64_t v50 = v69;
  outlined init with take of TetraOutgoingSymmetricRatchet((uint64_t)v24, v69, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
  outlined init with take of TetraOutgoingSymmetricRatchet(v50, (uint64_t)v91, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
LABEL_8:
  id v68 = v37;
  id result = objc_msgSend(v37, sel_tetraPrivateKey);
  if (result)
  {
    unint64_t v51 = result;
    uint64_t v52 = v88;
    outlined init with copy of TetraRatchetState((uint64_t)result + OBJC_IVAR____TtC17MessageProtection23Kyber1024ObjCPrivateKey_privKey, v88, type metadata accessor for TetraKEM1024Key);

    uint64_t v53 = v92;
    outlined destroy of TetraSessionStates?(v92, &demangling cache variable for type metadata for SymmetricKey?);
    uint64_t v54 = v53;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v83)(v53, 1, 1, v84);
    uint64_t v55 = (uint64_t)v73;
    Date.init()();
    v71(v55, 0, 1, v72);
    outlined assign with take of SymmetricKey?(v55, v89, &demangling cache variable for type metadata for Date?);
    *(void *)(v54 + *(int *)(v85 + 20)) = MEMORY[0x263F8EE78];
    outlined init with copy of TetraRatchetState((uint64_t)v91, v81, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
    outlined init with copy of TetraRatchetState(v52, v86, type metadata accessor for TetraKEM1024Key);
    uint64_t v56 = v75;
    uint64_t v57 = (uint64_t)v76;
    uint64_t v58 = (uint64_t)&v76[*(int *)(v75 + 20)];
    uint64_t v59 = type metadata accessor for TetraKEM768Key(0);
    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56);
    v60(v58, 1, 1, v59);
    uint64_t v61 = v57 + *(int *)(v56 + 24);
    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56);
    v62(v61, 1, 1, v87);
    uint64_t v63 = v57 + *(int *)(v56 + 28);
    long long v89 = xmmword_216494780;
    *(_OWORD *)uint64_t v63 = xmmword_216494780;
    outlined init with take of TetraOutgoingSymmetricRatchet(v81, v57, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
    outlined destroy of TetraSessionStates?(v58, &demangling cache variable for type metadata for TetraKEM768Key?);
    v60(v58, 1, 1, v59);
    outlined destroy of TetraSessionStates?(v61, &demangling cache variable for type metadata for TetraKEM1024Key?);
    outlined init with take of TetraOutgoingSymmetricRatchet(v86, v61, type metadata accessor for TetraKEM1024Key);
    v62(v61, 0, 1, v87);
    outlined consume of Data?(*(void *)v63, *(void *)(v63 + 8));
    *(_OWORD *)uint64_t v63 = v89;
    uint64_t v64 = v77;
    outlined init with take of TetraOutgoingSymmetricRatchet(v57, v77, type metadata accessor for TetraOutgoingKeyContent);
    uint64_t v65 = (uint64_t)v78;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v83)(v78, 1, 1, v84);
    outlined init with copy of TetraRatchetState(v64, v57, type metadata accessor for TetraOutgoingKeyContent);
    uint64_t v66 = v79;
    TetraOutgoingSymmetricRatchet.init(symmetricRatchetHead:outgoingPublicKeys:)(v65, v57, v79);

    outlined destroy of TetraOutgoingSymmetricRatchet(v64, type metadata accessor for TetraOutgoingKeyContent);
    outlined destroy of TetraOutgoingSymmetricRatchet(v88, type metadata accessor for TetraKEM1024Key);
    outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v91, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
    return (id)outlined init with take of TetraOutgoingSymmetricRatchet(v66, v92 + *(int *)(v85 + 24), type metadata accessor for TetraOutgoingSymmetricRatchet);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TetraRatchetState.sealMessage(message:authenticatedData:prekeyHash:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v66 = a7;
  unint64_t v67 = a8;
  unint64_t v62 = a6;
  uint64_t v65 = a5;
  uint64_t v72 = (char *)a3;
  unint64_t v73 = a4;
  unint64_t v70 = a1;
  unint64_t v71 = a2;
  uint64_t v68 = a9;
  uint64_t v69 = type metadata accessor for TetraRatchetOuterMessage();
  MEMORY[0x270FA5388](v69);
  uint64_t v64 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v63 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for TetraRatchetState(0);
  uint64_t v22 = v9;
  unint64_t v23 = v9 + *(int *)(v21 + 24);
  uint64_t v24 = v78;
  uint64_t result = TetraOutgoingSymmetricRatchet.sealMessage(_:)(v70, v71, (uint64_t)v72, v73, v74);
  if (!v24)
  {
    unint64_t v71 = v23;
    uint64_t v72 = v20;
    uint64_t v60 = v18;
    uint64_t v61 = v17;
    unint64_t v70 = 0;
    uint64_t v26 = (int *)v69;
    uint64_t v27 = v74[0];
    unint64_t v28 = v74[1];
    uint64_t v29 = *(int *)(v21 + 28);
    unsigned int v30 = *(_DWORD *)(v22 + v29);
    if (v30 <= 0x63) {
      *(_DWORD *)(v22 + v29) = v30 + 1;
    }
    int v57 = v75;
    uint64_t v58 = v77;
    uint64_t v59 = v76;
    uint64_t v78 = v27;
    unint64_t v73 = v28;
    outlined copy of Data._Representation(v27, v28);
    unint64_t v31 = v71;
    TetraECDHKey.publicKey.getter();
    uint64_t v32 = type metadata accessor for TetraOutgoingKeyContent(0);
    uint64_t v33 = v31 + *(int *)(v32 + 20);
    int v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v33, 1, v11);
    uint64_t v35 = v26;
    uint64_t v56 = v16;
    if (v34)
    {
      uint64_t v36 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v16, 1, 1, v36);
    }
    else
    {
      outlined init with copy of TetraRatchetState(v33, (uint64_t)v13, type metadata accessor for TetraKEM768Key);
      TetraKEM768Key.publicKey.getter((uint64_t)v16);
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v13, type metadata accessor for TetraKEM768Key);
      uint64_t v36 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v16, 0, 1, v36);
    }
    uint64_t v37 = (uint64_t)v64;
    id v38 = (uint64_t *)(v71 + *(int *)(v32 + 28));
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    unint64_t v71 = (unint64_t)&v64[v35[8]];
    unint64_t v41 = v71;
    type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v41, 1, 1, v36);
    uint64_t v42 = v37 + v35[9];
    *(_OWORD *)uint64_t v42 = xmmword_216494780;
    uint64_t v43 = v37 + v35[10];
    *(_OWORD *)uint64_t v43 = xmmword_216494780;
    uint64_t v44 = (uint64_t)v72;
    unint64_t v45 = v73;
    *(void *)(v37 + 8) = v78;
    *(void *)(v37 + 16) = v45;
    uint64_t v46 = (uint64_t *)(v37 + v35[12]);
    uint64_t v47 = v65;
    uint64_t v48 = v61;
    unint64_t v49 = v62;
    *uint64_t v46 = v65;
    v46[1] = v49;
    *(_DWORD *)(v37 + 24) = v57;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v37 + v35[7], v44, v48);
    outlined copy of Data?(v39, v40);
    unint64_t v50 = v49;
    uint64_t v52 = v66;
    unint64_t v51 = v67;
    outlined copy of Data?(v66, v67);
    outlined copy of Data._Representation(v47, v50);
    outlined assign with take of SymmetricKey?((uint64_t)v56, v71, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    outlined consume of Data?(*(void *)v42, *(void *)(v42 + 8));
    *(void *)uint64_t v42 = v39;
    *(void *)(v42 + 8) = v40;
    outlined consume of Data?(*(void *)v43, *(void *)(v43 + 8));
    *(void *)uint64_t v43 = v52;
    *(void *)(v43 + 8) = v51;
    uint64_t v53 = v68;
    uint64_t v54 = (void *)(v37 + *(int *)(v69 + 44));
    uint64_t v55 = v58;
    *uint64_t v54 = v59;
    v54[1] = v55;
    *(_DWORD *)uint64_t v37 = 13;
    outlined init with take of TetraOutgoingSymmetricRatchet(v37, v53, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    return outlined consume of Data._Representation(v78, v73);
  }
  return result;
}

NSObject *TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = v5;
  uint64_t v46 = type metadata accessor for TetraRatchetOuterMessage();
  uint64_t v11 = MEMORY[0x270FA5388](v46);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v43 - v14;
  unint64_t v16 = *(void *)(v4 + *(int *)(type metadata accessor for TetraRatchetState(0) + 20));
  v47[2] = a1;
  swift_bridgeObjectRetain();
  unint64_t v17 = v16;
  uint64_t v18 = v6;
  unint64_t v19 = (unint64_t)specialized _ArrayProtocol.filter(_:)(partial apply for closure #1 in TetraRatchetState.openMessage(_:sessionDST:didRatchet:), v47, v17);
  unint64_t v20 = v19;
  uint64_t v21 = v18;
  if (!(v19 >> 62))
  {
    uint64_t result = *(NSObject **)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    TetraRatchetState.ratchetedOpen(message:sessionDST:didRatchet:)(a1, a2, a3, a4);
    if (!v18) {
      return v42;
    }
    return v21;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t v44 = v13;
  unint64_t v45 = v15;
  if ((v20 & 0xC000000000000001) != 0)
  {
    MEMORY[0x2166CCBD0](0, v20);
  }
  else
  {
    if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a1 + 8);
  unint64_t v24 = *(void *)(a1 + 16);
  unsigned int v25 = *(_DWORD *)(a1 + 24);
  uint64_t v26 = (uint64_t *)(a1 + *(int *)(v46 + 44));
  uint64_t v28 = *v26;
  unint64_t v27 = v26[1];
  swift_beginAccess();
  uint64_t v29 = TetraIncomingSymmetricRatchet.openMessage(_:messageIndex:messageKeyIndicator:discardMessageKey:)(v23, v24, v25, v28, v27, 0);
  if (!v18)
  {
    uint64_t v21 = v29;
    swift_endAccess();
    swift_release();
    return v21;
  }
  swift_endAccess();
  unint64_t v50 = v18;
  unsigned int v30 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast() || v52 != 3)
  {
LABEL_15:
    swift_release();

    return v21;
  }

  os_log_type_t v31 = static os_log_type_t.error.getter();
  uint64_t result = MessageProtectionLog();
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v32 = (uint64_t)v45;
    outlined init with copy of TetraRatchetState(a1, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    uint64_t v33 = (uint64_t)v44;
    outlined init with copy of TetraRatchetState(a1, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    if (os_log_type_enabled(v21, v31))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v49 = v43;
      *(_DWORD *)uint64_t v34 = 136315394;
      int v51 = v31;
      uint64_t v35 = P256.KeyAgreement.PublicKey.compressedRepresentation.getter();
      unint64_t v37 = v36;
      Swift::String v38 = Data.base64EncodedString(options:)(0);
      outlined consume of Data._Representation(v35, v37);
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38._countAndFlagsBits, (unint64_t)v38._object, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
      *(_WORD *)(v34 + 12) = 1024;
      int v39 = *(_DWORD *)(v33 + 24);
      outlined destroy of TetraOutgoingSymmetricRatchet(v33, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
      LODWORD(v48) = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2163F2000, v21, (os_log_type_t)v51, "Out of sync ratchet upon unsealing receiving chain. ECDH: %s Index: %u", (uint8_t *)v34, 0x12u);
      uint64_t v40 = v43;
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v40, -1, -1);
      MEMORY[0x2166CDD30](v34, -1, -1);
    }
    else
    {
      outlined destroy of TetraOutgoingSymmetricRatchet(v33, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);

      outlined destroy of TetraOutgoingSymmetricRatchet(v32, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
    }
    lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
    swift_allocError();
    unsigned char *v41 = 3;
    swift_willThrow();
    goto LABEL_15;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t static P256.KeyAgreement.PublicKey.== infix(_:_:)()
{
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  uint64_t v3 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v5 = v4;
  char v6 = specialized static Data.== infix(_:_:)(v0, v2, v3, v4);
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v6 & 1;
}

uint64_t P256.KeyAgreement.PublicKey.hash(into:)()
{
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v0, v2);
}

Swift::Int P256.KeyAgreement.PublicKey.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance P256.KeyAgreement.PublicKey()
{
  Hasher.init(_seed:)();
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance P256.KeyAgreement.PublicKey()
{
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v0, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance P256.KeyAgreement.PublicKey()
{
  Hasher.init(_seed:)();
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance P256.KeyAgreement.PublicKey()
{
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  uint64_t v3 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v5 = v4;
  char v6 = specialized static Data.== infix(_:_:)(v0, v2, v3, v4);
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v6 & 1;
}

SecAccessControlRef TetraOutgoingKeyContent.init(includesKEMKey:encap:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for TetraECDHKey();
  uint64_t v14 = MEMORY[0x270FA5388](v47);
  unint64_t v16 = (SecKeyRef *)((char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (uint64_t)&v41 - v17;
  uint64_t v18 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v19 = a4 + v18[5];
  uint64_t v20 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
  uint64_t v50 = v19;
  unint64_t v45 = v22;
  uint64_t v46 = v20;
  uint64_t v44 = v21 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v19, 1, 1);
  uint64_t v23 = a4 + v18[6];
  uint64_t v24 = type metadata accessor for TetraKEM1024Key(0);
  unsigned int v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  uint64_t v49 = v23;
  v25(v23, 1, 1, v24);
  uint64_t v26 = (uint64_t *)(a4 + v18[7]);
  *uint64_t v26 = a2;
  v26[1] = a3;
  outlined copy of Data?(a2, a3);
  if (one-time initialization token for SEPisAvailable != -1) {
    swift_once();
  }
  if (static MPStaticProperties.SEPisAvailable != 1)
  {
    int v43 = a1;
    uint64_t v42 = v10;
    id v30 = objc_msgSend(self, sel_newCompactPrivateKey);
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    uint64_t v34 = v51;
    SecKeyRef v35 = specialized TetraECDHSecKey.init(aksBlob:)(v31, v33);
    outlined consume of Data._Representation(v31, v33);
    if (!v34)
    {
      *unint64_t v16 = v35;
      Swift::String v38 = (char *)v16 + *(int *)(v47 + 20);
      uint64_t v39 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
      uint64_t v10 = v42;
      goto LABEL_10;
    }
LABEL_8:
    outlined consume of Data?(a2, a3);
    outlined destroy of TetraSessionStates?(v50, &demangling cache variable for type metadata for TetraKEM768Key?);
    outlined destroy of TetraSessionStates?(v49, &demangling cache variable for type metadata for TetraKEM1024Key?);
    uint64_t v36 = *v26;
    unint64_t v37 = v26[1];
    return (SecAccessControlRef)outlined consume of Data?(v36, v37);
  }
  SecAccessControlRef result = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x263F16EA0], 0, 0);
  if (result)
  {
    uint64_t v28 = v51;
    SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)();
    if (!v28)
    {
      int v43 = a1;
      uint64_t v29 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v13, 0, 1, v29);
      outlined init with take of KEM.EncapsulationResult?((uint64_t)v13, (uint64_t)v16 + *(int *)(v47 + 20), &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      *unint64_t v16 = 0;
LABEL_10:
      uint64_t v40 = v48;
      outlined init with take of TetraOutgoingSymmetricRatchet((uint64_t)v16, v48, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
      outlined init with take of TetraOutgoingSymmetricRatchet(v40, a4, (uint64_t (*)(void))type metadata accessor for TetraECDHKey);
      if (v43)
      {
        TetraKEM768Key.init()((uint64_t)v10);
        outlined consume of Data?(a2, a3);
        v45(v10, 0, 1, v46);
        return (SecAccessControlRef)outlined assign with take of SymmetricKey?((uint64_t)v10, v50, &demangling cache variable for type metadata for TetraKEM768Key?);
      }
      uint64_t v36 = a2;
      unint64_t v37 = a3;
      return (SecAccessControlRef)outlined consume of Data?(v36, v37);
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t TetraOutgoingKeyContent.decapsulate(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v33 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v31 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v16 = *(int *)(v15 + 20);
  uint64_t v32 = v3;
  uint64_t v17 = v3 + v16;
  outlined init with copy of TetraSessionStates?(v3 + v16, (uint64_t)v14, &demangling cache variable for type metadata for TetraKEM768Key?);
  uint64_t v18 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  int v20 = v19(v14, 1, v18);
  outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for TetraKEM768Key?);
  if (v20 == 1)
  {
    uint64_t v21 = v32 + *(int *)(v15 + 24);
    outlined init with copy of TetraSessionStates?(v21, (uint64_t)v8, &demangling cache variable for type metadata for TetraKEM1024Key?);
    uint64_t v22 = type metadata accessor for TetraKEM1024Key(0);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48);
    int v24 = v23(v8, 1, v22);
    uint64_t result = outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for TetraKEM1024Key?);
    if (v24 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v26 = v21;
      uint64_t v27 = v31;
      outlined init with copy of TetraSessionStates?(v26, v31, &demangling cache variable for type metadata for TetraKEM1024Key?);
      uint64_t result = v23((char *)v27, 1, v22);
      if (result != 1)
      {
        TetraKEM1024Key.decapsulate(_:)(v33);
        uint64_t v28 = type metadata accessor for TetraKEM1024Key;
        uint64_t v29 = v27;
        return outlined destroy of TetraOutgoingSymmetricRatchet(v29, v28);
      }
    }
    __break(1u);
  }
  else
  {
    outlined init with copy of TetraSessionStates?(v17, (uint64_t)v12, &demangling cache variable for type metadata for TetraKEM768Key?);
    uint64_t result = v19(v12, 1, v18);
    if (result != 1)
    {
      TetraKEM768Key.decapsulate(_:)(v33);
      uint64_t v28 = type metadata accessor for TetraKEM768Key;
      uint64_t v29 = (uint64_t)v12;
      return outlined destroy of TetraOutgoingSymmetricRatchet(v29, v28);
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReceivingKeyTetraRatchet.CodingKeys()
{
  unint64_t v1 = 0xD000000000000018;
  if (*v0 == 1) {
    unint64_t v1 = 0x6E69766965636572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E69766965636572;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReceivingKeyTetraRatchet.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ReceivingKeyTetraRatchet.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ReceivingKeyTetraRatchet.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReceivingKeyTetraRatchet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReceivingKeyTetraRatchet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReceivingKeyTetraRatchet.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey;
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of TetraSessionStates?(v0 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  outlined destroy of TetraOutgoingSymmetricRatchet(v0 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet, type metadata accessor for TetraIncomingSymmetricRatchet);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t ReceivingKeyTetraRatchet.encode(to:)(void *a1)
{
  uint64_t v24 = type metadata accessor for TetraIncomingSymmetricRatchet(0);
  MEMORY[0x270FA5388](v24);
  uint64_t v23 = (uint64_t)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v25 = (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReceivingKeyTetraRatchet.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v26 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey, v5);
  char v29 = 0;
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, MEMORY[0x263F04770]);
  uint64_t v14 = v27;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    uint64_t v27 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v16 = v13;
    uint64_t v17 = v13 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey;
    swift_beginAccess();
    uint64_t v18 = v25;
    outlined init with copy of TetraSessionStates?(v17, v25, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    char v28 = 1;
    type metadata accessor for Kyber768.PublicKey();
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type Kyber768.PublicKey and conformance Kyber768.PublicKey, MEMORY[0x263F04898]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined destroy of TetraSessionStates?(v18, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    uint64_t v19 = v16 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet;
    swift_beginAccess();
    uint64_t v20 = v19;
    uint64_t v21 = v23;
    outlined init with copy of TetraRatchetState(v20, v23, type metadata accessor for TetraIncomingSymmetricRatchet);
    char v30 = 2;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet and conformance TetraIncomingSymmetricRatchet, (void (*)(uint64_t))type metadata accessor for TetraIncomingSymmetricRatchet);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined destroy of TetraOutgoingSymmetricRatchet(v21, type metadata accessor for TetraIncomingSymmetricRatchet);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v9);
  }
}

uint64_t ReceivingKeyTetraRatchet.init(from:)(void *a1)
{
  uint64_t v27 = type metadata accessor for TetraIncomingSymmetricRatchet(0);
  MEMORY[0x270FA5388](v27);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v30 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReceivingKeyTetraRatchet.CodingKeys>);
  uint64_t v28 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v1;
  uint64_t v12 = v1 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey;
  uint64_t v13 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  uint64_t v35 = v12;
  v14(v12, 1, 1, v13);
  uint64_t v15 = a1[3];
  uint64_t v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys();
  uint64_t v31 = v11;
  uint64_t v16 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    uint64_t v21 = v33;
    uint64_t v19 = (uint64_t)v34;
    outlined destroy of TetraSessionStates?(v35, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    type metadata accessor for ReceivingKeyTetraRatchet(0);
    swift_deallocPartialClassInstance();
    uint64_t v25 = v19;
  }
  else
  {
    uint64_t v17 = v28;
    uint64_t v18 = v29;
    unint64_t v37 = v4;
    char v36 = 0;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, MEMORY[0x263F04770]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v21 = v33;
    uint64_t v22 = *(void (**)(void))(v18 + 32);
    v26[1] = v33 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey;
    v22();
    char v36 = 1;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type Kyber768.PublicKey and conformance Kyber768.PublicKey, MEMORY[0x263F04898]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v23 = v35;
    swift_beginAccess();
    outlined assign with take of SymmetricKey?((uint64_t)v7, v23, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    swift_endAccess();
    char v36 = 2;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet and conformance TetraIncomingSymmetricRatchet, (void (*)(uint64_t))type metadata accessor for TetraIncomingSymmetricRatchet);
    uint64_t v24 = (uint64_t)v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v31, v32);
    outlined init with take of TetraOutgoingSymmetricRatchet(v24, v21 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet, type metadata accessor for TetraIncomingSymmetricRatchet);
    uint64_t v25 = (uint64_t)v34;
  }
  __swift_destroy_boxed_opaque_existential_0(v25);
  return v21;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReceivingKeyTetraRatchet@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ReceivingKeyTetraRatchet(0);
  uint64_t v5 = swift_allocObject();
  uint64_t result = ReceivingKeyTetraRatchet.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReceivingKeyTetraRatchet(void *a1)
{
  return ReceivingKeyTetraRatchet.encode(to:)(a1);
}

BOOL static TetraMessageTypes.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TetraMessageTypes.hash(into:)(uint64_t a1, char a2)
{
}

void *static TetraMessageTypes.allCases.getter()
{
  return &outlined read-only object #0 of static TetraMessageTypes.allCases.getter;
}

Swift::Int TetraMessageTypes.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance TetraMessageTypes(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance TetraMessageTypes;
}

uint64_t static TetraRatchetState.deriveRootAndChainKeyAsSender(theirECDHPublicKey:theirKyber1024Key:encapResult:ourOutgoingKeys:conversationDST:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v90 = a5;
  uint64_t v98 = a6;
  uint64_t v88 = a4;
  uint64_t v83 = a1;
  uint64_t v84 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v85 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SymmetricKey();
  uint64_t v86 = *(void *)(v13 - 8);
  uint64_t v87 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v80 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v82 = (char *)&v80 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v81 = (char *)&v80 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v91 = (uint64_t)&v80 - v20;
  uint64_t v21 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = specialized Data.init<A>(_:)(0x6174536172746554uLL, 0xEB000000002D7472);
  unint64_t v27 = v26;
  uint64_t v92 = a7;
  unint64_t v93 = a8;
  outlined copy of Data._Representation(a7, a8);
  specialized Data.append<A>(contentsOf:)(v25, v27);
  outlined consume of Data._Representation(v25, v27);
  uint64_t v28 = v92;
  unint64_t v29 = v93;
  uint64_t v30 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v31 >> 60 == 15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v32 = v30;
  unint64_t v33 = v31;
  uint64_t v94 = v28;
  unint64_t v95 = v29;
  outlined copy of Data._Representation(v28, v29);
  specialized Data.append<A>(contentsOf:)(v32, v33);
  outlined consume of Data?(v32, v33);
  outlined consume of Data._Representation(v28, v29);
  uint64_t v34 = v94;
  unint64_t v35 = v95;
  TetraECDHKey.publicKey.getter();
  uint64_t v36 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  unint64_t v38 = v37;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  if (v38 >> 60 == 15)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x2164571B8);
  }
  uint64_t v96 = v34;
  unint64_t v97 = v35;
  outlined copy of Data._Representation(v34, v35);
  outlined copy of Data?(v36, v38);
  specialized Data.append<A>(contentsOf:)(v36, v38);
  outlined consume of Data?(v36, v38);
  outlined consume of Data?(v36, v38);
  outlined consume of Data._Representation(v34, v35);
  uint64_t v39 = v91;
  uint64_t v40 = v89;
  TetraECDHKey.sharedSecretFromKeyAgreement(with:)(a3, v91);
  if (v40) {
    return outlined consume of Data._Representation(v96, v97);
  }
  unint64_t v42 = KEM.EncapsulationResult.encapsulated.getter();
  uint64_t v44 = v42;
  unint64_t v45 = v43;
  switch(v43 >> 62)
  {
    case 1uLL:
      unint64_t v47 = HIDWORD(v42);
      outlined consume of Data._Representation(v42, v43);
      if (__OFSUB__(v47, v44))
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v46 = (int)v47 - (int)v44;
LABEL_13:
      I2OSP(value:outputByteCount:)(v46, 4);
      uint64_t v51 = v50;
      unint64_t v53 = v52;
      uint64_t v54 = KEM.EncapsulationResult.encapsulated.getter();
      unint64_t v56 = v55;
      uint64_t v94 = v51;
      unint64_t v95 = v53;
      outlined copy of Data._Representation(v51, v53);
      specialized Data.append<A>(contentsOf:)(v54, v56);
      outlined consume of Data._Representation(v54, v56);
      outlined consume of Data._Representation(v51, v53);
      uint64_t v57 = v94;
      unint64_t v58 = v95;
      outlined copy of Data._Representation(v94, v95);
      specialized Data.append<A>(contentsOf:)(v57, v58);
      outlined consume of Data._Representation(v57, v58);
      outlined consume of Data._Representation(v57, v58);
      uint64_t v60 = Kyber1024.PublicKey.dataRepresentation.getter();
      unint64_t v61 = v59;
      uint64_t v62 = 0;
      uint64_t v98 = 0;
      switch(v59 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v60), v60)) {
            goto LABEL_21;
          }
          uint64_t v62 = HIDWORD(v60) - (int)v60;
LABEL_18:
          I2OSP(value:outputByteCount:)(v62, 4);
          uint64_t v66 = v65;
          unint64_t v68 = v67;
          uint64_t v94 = v65;
          unint64_t v95 = v67;
          outlined copy of Data._Representation(v65, v67);
          outlined copy of Data._Representation(v60, v61);
          specialized Data.append<A>(contentsOf:)(v60, v61);
          outlined consume of Data._Representation(v60, v61);
          outlined consume of Data._Representation(v66, v68);
          uint64_t v69 = v94;
          unint64_t v70 = v95;
          outlined copy of Data._Representation(v94, v95);
          specialized Data.append<A>(contentsOf:)(v69, v70);
          outlined consume of Data._Representation(v69, v70);
          outlined consume of Data._Representation(v69, v70);
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v71 = __DataStorage.init(length:)();
          uint64_t v94 = 0x2000000000;
          unint64_t v95 = v71 | 0x4000000000000000;
          uint64_t v72 = (uint64_t)v81;
          SymmetricKey.init<A>(data:)();
          uint64_t v74 = v86;
          uint64_t v73 = v87;
          (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v80, v39, v87);
          lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
          uint64_t v75 = (uint64_t)v82;
          SymmetricKey.init<A>(data:)();
          uint64_t v76 = (uint64_t)v85;
          KEM.EncapsulationResult.sharedSecret.getter();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v76, 0, 1, v73);
          uint64_t v77 = v96;
          unint64_t v78 = v97;
          outlined copy of Data._Representation(v96, v97);
          static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)(v83, v84, v72, v75, v76, v77, v78);
          outlined consume of Data._Representation(v77, v78);
          outlined consume of Data._Representation(v60, v61);
          outlined destroy of TetraSessionStates?(v76, &demangling cache variable for type metadata for SymmetricKey?);
          uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
          v79(v75, v73);
          v79(v72, v73);
          v79(v91, v73);
          uint64_t result = outlined consume of Data._Representation(v96, v97);
          break;
        case 2uLL:
          uint64_t v64 = *(void *)(v60 + 16);
          uint64_t v63 = *(void *)(v60 + 24);
          uint64_t v62 = v63 - v64;
          if (!__OFSUB__(v63, v64)) {
            goto LABEL_18;
          }
          goto LABEL_22;
        case 3uLL:
          goto LABEL_18;
        default:
          uint64_t v62 = BYTE6(v59);
          goto LABEL_18;
      }
      return result;
    case 2uLL:
      uint64_t v49 = *(void *)(v42 + 16);
      uint64_t v48 = *(void *)(v42 + 24);
      outlined consume of Data._Representation(v42, v43);
      uint64_t v46 = v48 - v49;
      if (!__OFSUB__(v48, v49)) {
        goto LABEL_13;
      }
      __break(1u);
LABEL_12:
      outlined consume of Data._Representation(v44, v45);
      uint64_t v46 = 0;
      goto LABEL_13;
    case 3uLL:
      goto LABEL_12;
    default:
      outlined consume of Data._Representation(v42, v43);
      uint64_t v46 = BYTE6(v45);
      goto LABEL_13;
  }
}

uint64_t static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v51 = a6;
  unint64_t v52 = a7;
  uint64_t v49 = a5;
  uint64_t v57 = a4;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for SymmetricKey();
  uint64_t v44 = *(void (***)(char *, uint64_t))(v56 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v56);
  unint64_t v53 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v43 = (char *)&v42 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v48 = (char *)&v42 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v42 - v20;
  type metadata accessor for NSData();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v22 = (void *)v60;
  uint64_t v23 = type metadata accessor for SHA384();
  uint64_t v24 = lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x263F04808]);
  uint64_t v25 = lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type NSData and conformance NSData, (void (*)(uint64_t))type metadata accessor for NSData);
  uint64_t v50 = v23;
  uint64_t v57 = v24;
  unint64_t v26 = v43;
  uint64_t v27 = v56;
  unint64_t v45 = (void (*)(char *, uint64_t))v25;
  static HKDF.extract<A>(inputKeyMaterial:salt:)();

  uint64_t v46 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v21, v13);
  uint64_t v28 = lazy protocol witness table accessor for type [TetraMessageTypes] and conformance [A](&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  unint64_t v29 = v44;
  uint64_t v47 = v28;
  SymmetricKey.init<A>(data:)();
  outlined init with copy of TetraSessionStates?(v49, (uint64_t)v9, &demangling cache variable for type metadata for SymmetricKey?);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v29[6])(v9, 1, v27) == 1)
  {
    uint64_t v49 = 0;
    uint64_t v30 = v21;
    outlined destroy of TetraSessionStates?((uint64_t)v9, &demangling cache variable for type metadata for SymmetricKey?);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    __DataStorage.init(length:)();
    v31.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    swift_release();
  }
  else
  {
    uint64_t v30 = v21;
    SymmetricKey.withUnsafeBytes<A>(_:)();
    uint64_t v49 = 0;
    v31.super.Class isa = (Class)v60;
    v29[1](v9, v27);
  }
  uint64_t v32 = v27;
  *(NSData *)&long long v60 = v31;
  unint64_t v33 = v48;
  static HKDF.extract<A>(inputKeyMaterial:salt:)();

  unint64_t v45 = v29[1];
  v45(v26, v32);
  uint64_t v34 = v46;
  unint64_t v35 = v30;
  uint64_t v44 = *(void (***)(char *, uint64_t))(v46 + 8);
  ((void (*)(char *, uint64_t))v44)(v30, v13);
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v30, v33, v13);
  if (one-time initialization token for tetraDHRatchetStepKDFString != -1) {
    swift_once();
  }
  long long v36 = tetraDHRatchetStepKDFString;
  long long v60 = tetraDHRatchetStepKDFString;
  outlined copy of Data._Representation(tetraDHRatchetStepKDFString, *((unint64_t *)&tetraDHRatchetStepKDFString + 1));
  outlined copy of Data._Representation(v36, *((unint64_t *)&v36 + 1));
  uint64_t v37 = v51;
  unint64_t v38 = v52;
  outlined copy of Data._Representation(v51, v52);
  specialized Data.append<A>(contentsOf:)(v37, v38);
  outlined consume of Data._Representation(v37, v38);
  outlined consume of Data._Representation(v36, *((unint64_t *)&v36 + 1));
  long long v39 = v60;
  long long v58 = v60;
  lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v40 = v53;
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  outlined consume of Data._Representation(v39, *((unint64_t *)&v39 + 1));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  long long v58 = v60;
  long long v59 = v61;
  lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  SymmetricKey.init<A>(data:)();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  long long v58 = v60;
  long long v59 = v61;
  SymmetricKey.init<A>(data:)();
  v45(v40, v56);
  return ((uint64_t (*)(char *, uint64_t))v44)(v35, v13);
}

uint64_t static TetraRatchetState.deriveRootAndChainKeyAsSender(rootKey:theirECDHPublicKey:theirKyber768Key:encapResult:ourOutgoingKeys:conversationDST:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v128 = a7;
  uint64_t v115 = a6;
  uint64_t v104 = a5;
  uint64_t v110 = a2;
  uint64_t v111 = a3;
  uint64_t v109 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v108 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v105 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KEM.EncapsulationResult?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v107 = (uint64_t)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v112 = (uint64_t)&v103 - v18;
  uint64_t v114 = type metadata accessor for KEM.EncapsulationResult();
  uint64_t v119 = *(void *)(v114 - 8);
  MEMORY[0x270FA5388](v114);
  uint64_t v113 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SymmetricKey();
  uint64_t v117 = *(void *)(v20 - 8);
  uint64_t v118 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v106 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v116 = (uint64_t)&v103 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v121 = (uint64_t)&v103 - v25;
  uint64_t v26 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  unint64_t v29 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = specialized Data.init<A>(_:)(0x7461526172746554uLL, 0xED00002D74656863);
  unint64_t v32 = v31;
  uint64_t v122 = a8;
  unint64_t v123 = a9;
  outlined copy of Data._Representation(a8, a9);
  specialized Data.append<A>(contentsOf:)(v30, v32);
  outlined consume of Data._Representation(v30, v32);
  uint64_t v33 = v122;
  unint64_t v34 = v123;
  uint64_t v35 = a4;
  uint64_t v36 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v37 >> 60 == 15)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v38 = v36;
  unint64_t v39 = v37;
  uint64_t v124 = v33;
  unint64_t v125 = v34;
  outlined copy of Data._Representation(v33, v34);
  specialized Data.append<A>(contentsOf:)(v38, v39);
  outlined consume of Data?(v38, v39);
  outlined consume of Data._Representation(v33, v34);
  uint64_t v40 = v124;
  unint64_t v41 = v125;
  TetraECDHKey.publicKey.getter();
  uint64_t v42 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  unint64_t v44 = v43;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  if (v44 >> 60 == 15)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v126 = v40;
  unint64_t v127 = v41;
  outlined copy of Data._Representation(v40, v41);
  outlined copy of Data?(v42, v44);
  specialized Data.append<A>(contentsOf:)(v42, v44);
  outlined consume of Data?(v42, v44);
  outlined consume of Data?(v42, v44);
  outlined consume of Data._Representation(v40, v41);
  uint64_t v45 = v120;
  uint64_t v46 = v121;
  TetraECDHKey.sharedSecretFromKeyAgreement(with:)(v35, v121);
  if (v45) {
    return outlined consume of Data._Representation(v126, v127);
  }
  uint64_t v47 = v115;
  uint64_t v48 = v112;
  outlined init with copy of TetraSessionStates?(v115, v112, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
  uint64_t v49 = v119;
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
  uint64_t v51 = v114;
  if (v50(v48, 1, v114) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v113, v48, v51);
    unint64_t v60 = KEM.EncapsulationResult.encapsulated.getter();
    uint64_t v62 = v60;
    unint64_t v63 = v61;
    switch(v61 >> 62)
    {
      case 1uLL:
        unint64_t v65 = HIDWORD(v60);
        outlined consume of Data._Representation(v60, v61);
        if (!__OFSUB__(v65, v62))
        {
          uint64_t v64 = (int)v65 - (int)v62;
LABEL_14:
          I2OSP(value:outputByteCount:)(v64, 4);
          uint64_t v69 = v68;
          unint64_t v71 = v70;
          uint64_t v72 = KEM.EncapsulationResult.encapsulated.getter();
          unint64_t v74 = v73;
          uint64_t v124 = v69;
          unint64_t v125 = v71;
          outlined copy of Data._Representation(v69, v71);
          specialized Data.append<A>(contentsOf:)(v72, v74);
          outlined consume of Data._Representation(v72, v74);
          outlined consume of Data._Representation(v69, v71);
          uint64_t v75 = v124;
          unint64_t v76 = v125;
          outlined copy of Data._Representation(v124, v125);
          specialized Data.append<A>(contentsOf:)(v75, v76);
          outlined consume of Data._Representation(v75, v76);
          outlined consume of Data._Representation(v75, v76);
          uint64_t v77 = v105;
          outlined init with copy of TetraSessionStates?(v104, v105, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
          uint64_t v78 = type metadata accessor for Kyber768.PublicKey();
          uint64_t v79 = *(void *)(v78 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78) != 1)
          {
            uint64_t v80 = Kyber768.PublicKey.dataRepresentation.getter();
            unint64_t v82 = v81;
            (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v77, v78);
            uint64_t v83 = 0;
            switch(v82 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v80), v80)) {
                  goto LABEL_27;
                }
                uint64_t v83 = HIDWORD(v80) - (int)v80;
LABEL_20:
                I2OSP(value:outputByteCount:)(v83, 4);
                uint64_t v87 = v86;
                unint64_t v89 = v88;
                uint64_t v124 = v86;
                unint64_t v125 = v88;
                outlined copy of Data._Representation(v86, v88);
                outlined copy of Data._Representation(v80, v82);
                specialized Data.append<A>(contentsOf:)(v80, v82);
                outlined consume of Data._Representation(v80, v82);
                outlined consume of Data._Representation(v87, v89);
                uint64_t v90 = v124;
                unint64_t v91 = v125;
                outlined copy of Data._Representation(v124, v125);
                specialized Data.append<A>(contentsOf:)(v90, v91);
                outlined consume of Data._Representation(v90, v91);
                outlined consume of Data._Representation(v80, v82);
                outlined consume of Data._Representation(v90, v91);
                uint64_t v51 = v114;
                (*(void (**)(char *, uint64_t))(v119 + 8))(v113, v114);
                uint64_t v47 = v115;
                break;
              case 2uLL:
                uint64_t v85 = *(void *)(v80 + 16);
                uint64_t v84 = *(void *)(v80 + 24);
                uint64_t v83 = v84 - v85;
                if (!__OFSUB__(v84, v85)) {
                  goto LABEL_20;
                }
                goto LABEL_28;
              case 3uLL:
                goto LABEL_20;
              default:
                uint64_t v83 = BYTE6(v82);
                goto LABEL_20;
            }
            goto LABEL_21;
          }
LABEL_31:
          __break(1u);
          JUMPOUT(0x21645824CLL);
        }
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        break;
      case 2uLL:
        uint64_t v67 = *(void *)(v60 + 16);
        uint64_t v66 = *(void *)(v60 + 24);
        outlined consume of Data._Representation(v60, v61);
        uint64_t v64 = v66 - v67;
        if (!__OFSUB__(v66, v67)) {
          goto LABEL_14;
        }
        __break(1u);
LABEL_13:
        outlined consume of Data._Representation(v62, v63);
        uint64_t v64 = 0;
        goto LABEL_14;
      case 3uLL:
        goto LABEL_13;
      default:
        outlined consume of Data._Representation(v60, v61);
        uint64_t v64 = BYTE6(v63);
        goto LABEL_14;
    }
    goto LABEL_29;
  }
  outlined destroy of TetraSessionStates?(v48, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
  I2OSP(value:outputByteCount:)(0, 4);
  uint64_t v53 = v52;
  unint64_t v55 = v54;
  specialized Data.append<A>(contentsOf:)(v52, v54);
  outlined consume of Data._Representation(v53, v55);
  I2OSP(value:outputByteCount:)(0, 4);
  uint64_t v57 = v56;
  unint64_t v59 = v58;
  specialized Data.append<A>(contentsOf:)(v56, v58);
  outlined consume of Data._Representation(v57, v59);
LABEL_21:
  (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v106, v46, v118);
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
  SymmetricKey.init<A>(data:)();
  uint64_t v92 = v107;
  outlined init with copy of TetraSessionStates?(v47, v107, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
  unsigned int v93 = v50(v92, 1, v51);
  uint64_t v94 = (uint64_t)v108;
  if (v93 == 1)
  {
    outlined destroy of TetraSessionStates?(v92, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
    uint64_t v95 = 1;
  }
  else
  {
    KEM.EncapsulationResult.sharedSecret.getter();
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v92, v51);
    uint64_t v95 = 0;
  }
  uint64_t v97 = v117;
  uint64_t v96 = v118;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v94, v95, 1, v118);
  uint64_t v98 = v126;
  unint64_t v99 = v127;
  outlined copy of Data._Representation(v126, v127);
  uint64_t v100 = v116;
  static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)(v109, v110, v111, v116, v94, v98, v99);
  outlined consume of Data._Representation(v98, v99);
  outlined destroy of TetraSessionStates?(v94, &demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
  v101(v100, v96);
  v101(v46, v96);
  return outlined consume of Data._Representation(v126, v127);
}

uint64_t static TetraRatchetState.deriveRootAndChainKeyAsReceiver(rootKey:theirPublicKey:encap:ourReceivingKeys:conversationDST:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6, void (*a7)(void, void, void), uint64_t a8, unint64_t a9)
{
  uint64_t v197 = a4;
  uint64_t v206 = a7;
  uint64_t v193 = a5;
  unint64_t v194 = a6;
  uint64_t v183 = a2;
  uint64_t v181 = a1;
  uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
  uint64_t v11 = MEMORY[0x270FA5388](v189);
  uint64_t v182 = (char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  id v180 = (char *)&v165 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v188 = (char *)&v165 - v15;
  uint64_t v172 = type metadata accessor for Kyber1024.PublicKey();
  uint64_t v171 = *(void *)(v172 - 8);
  MEMORY[0x270FA5388](v172);
  uint64_t v170 = (uint64_t)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v190 = *(void *)(v17 - 8);
  uint64_t v191 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v174 = (uint64_t)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v168 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  uint64_t v167 = (uint64_t)&v165 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v192 = *(void *)(v195 - 8);
  MEMORY[0x270FA5388](v195);
  uint64_t v173 = (uint64_t)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v177 = (uint64_t)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  unint64_t v166 = (unint64_t)&v165 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v176 = (uint64_t)&v165 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v187 = (uint64_t)&v165 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v175 = (uint64_t)&v165 - v31;
  MEMORY[0x270FA5388](v30);
  uint64_t v186 = (uint64_t)&v165 - v32;
  uint64_t v33 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v198 = *(void *)(v33 - 8);
  id v199 = (char *)v33;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v165 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  unint64_t v184 = (unint64_t)&v165 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v185 = (uint64_t)&v165 - v40;
  MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)&v165 - v41;
  uint64_t v43 = type metadata accessor for SymmetricKey();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  uint64_t v178 = (char *)&v165 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  uint64_t v179 = (char *)&v165 - v48;
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  uint64_t v201 = (char *)&v165 - v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  uint64_t v53 = (char *)&v165 - v52;
  MEMORY[0x270FA5388](v51);
  unint64_t v55 = (char *)&v165 - v54;
  uint64_t v204 = a8;
  unint64_t v205 = a9;
  uint64_t v56 = a3;
  uint64_t v58 = v57;
  outlined init with copy of TetraSessionStates?(v56, (uint64_t)v42, &demangling cache variable for type metadata for SymmetricKey?);
  int v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v58);
  uint64_t v200 = v44;
  if (v59 == 1)
  {
    outlined copy of Data._Representation(a8, a9);
    outlined destroy of TetraSessionStates?((uint64_t)v42, &demangling cache variable for type metadata for SymmetricKey?);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v60 = __DataStorage.init(length:)();
    uint64_t v202 = 0x2000000000;
    unint64_t v203 = v60 | 0x4000000000000000;
    SymmetricKey.init<A>(data:)();
    uint64_t v61 = specialized Data.init<A>(_:)(0x6174536172746554uLL, 0xEB000000002D7472);
    unint64_t v63 = v62;
    specialized Data.append<A>(contentsOf:)(v61, v62);
    outlined consume of Data._Representation(v61, v63);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v53, v42, v58);
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v55, v53, v58);
    outlined copy of Data._Representation(a8, a9);
    uint64_t v64 = specialized Data.init<A>(_:)(0x7461526172746554uLL, 0xED00002D74656863);
    unint64_t v66 = v65;
    specialized Data.append<A>(contentsOf:)(v64, v65);
    outlined consume of Data._Representation(v64, v66);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v53, v58);
  }
  uint64_t v67 = v58;
  uint64_t v68 = v206;
  TetraECDHKey.publicKey.getter();
  unint64_t v69 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  unint64_t v71 = v70;
  (*(void (**)(char *, char *))(v198 + 8))(v35, v199);
  if (v71 >> 60 == 15)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  id v199 = v55;
  uint64_t v72 = (uint64_t)v197;
  uint64_t v73 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v74 >> 60 == 15)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v75 = v73;
  unint64_t v76 = v74;
  uint64_t v202 = v69;
  unint64_t v203 = v71;
  outlined copy of Data._Representation(v69, v71);
  specialized Data.append<A>(contentsOf:)(v75, v76);
  outlined consume of Data?(v75, v76);
  outlined consume of Data?(v69, v71);
  uint64_t v77 = v202;
  unint64_t v78 = v203;
  outlined copy of Data._Representation(v202, v203);
  specialized Data.append<A>(contentsOf:)(v77, v78);
  outlined consume of Data._Representation(v77, v78);
  outlined consume of Data._Representation(v77, v78);
  uint64_t v79 = (uint64_t)v201;
  uint64_t v80 = v196;
  TetraECDHKey.sharedSecretFromKeyAgreement(with:)(v72, (uint64_t)v201);
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v200 + 8))(v199, v67);
    return outlined consume of Data._Representation(v204, v205);
  }
  uint64_t v198 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v81 = (uint64_t)v68 + *(int *)(v198 + 20);
  unint64_t v82 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v192 + 48);
  unint64_t v83 = v194;
  if (v194 >> 60 != 15)
  {
    uint64_t v99 = v186;
    outlined init with copy of TetraSessionStates?(v81, v186, &demangling cache variable for type metadata for TetraKEM768Key?);
    uint64_t v197 = (char *)*v82;
    int v100 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v197)(v99, 1, v195);
    outlined copy of Data._Representation(v193, v83);
    outlined destroy of TetraSessionStates?(v99, &demangling cache variable for type metadata for TetraKEM768Key?);
    if (v100 == 1)
    {
      uint64_t v101 = v176;
      outlined init with copy of TetraSessionStates?((uint64_t)v206 + *(int *)(v198 + 24), v176, &demangling cache variable for type metadata for TetraKEM1024Key?);
      int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v101, 1, v191);
      outlined destroy of TetraSessionStates?(v101, &demangling cache variable for type metadata for TetraKEM1024Key?);
      if (v102 == 1)
      {
        lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
        swift_allocError();
        *uint64_t v103 = 0;
        swift_willThrow();
        outlined consume of Data?(v193, v83);
LABEL_17:
        uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v200 + 8);
        v106(v79, v67);
        v106((uint64_t)v199, v67);
        return outlined consume of Data._Representation(v204, v205);
      }
    }
    unint64_t v69 = v184;
    uint64_t v105 = v193;
    TetraOutgoingKeyContent.decapsulate(_:)(v193, v83, v184);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v200 + 56))(v69, 0, 1, v67);
    outlined init with take of KEM.EncapsulationResult?(v69, v185, &demangling cache variable for type metadata for SymmetricKey?);
    uint64_t v108 = 0;
    switch(v83 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(v105), v105))
        {
          uint64_t v108 = HIDWORD(v105) - (int)v105;
LABEL_24:
          I2OSP(value:outputByteCount:)(v108, 4);
          uint64_t v112 = v111;
          unint64_t v114 = v113;
          uint64_t v202 = v111;
          unint64_t v203 = v113;
          outlined copy of Data?(v105, v83);
          outlined copy of Data._Representation(v112, v114);
          specialized Data.append<A>(contentsOf:)(v105, v83);
          outlined consume of Data?(v105, v83);
          outlined consume of Data._Representation(v112, v114);
          uint64_t v115 = v202;
          unint64_t v116 = v203;
          outlined copy of Data._Representation(v202, v203);
          specialized Data.append<A>(contentsOf:)(v115, v116);
          outlined consume of Data._Representation(v115, v116);
          outlined consume of Data._Representation(v115, v116);
          uint64_t v117 = v175;
          outlined init with copy of TetraSessionStates?(v81, v175, &demangling cache variable for type metadata for TetraKEM768Key?);
          int v118 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v197)(v117, 1, v195);
          uint64_t v196 = 0;
          if (v118 != 1)
          {
            uint64_t v119 = v173;
            outlined init with take of TetraOutgoingSymmetricRatchet(v117, v173, type metadata accessor for TetraKEM768Key);
            uint64_t v124 = v167;
            TetraKEM768Key.publicKey.getter(v167);
            uint64_t v125 = Kyber768.PublicKey.dataRepresentation.getter();
            unint64_t v69 = v126;
            (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v124, v169);
            uint64_t v127 = 0;
            uint64_t v97 = v185;
            switch(v69 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v125), v125)) {
                  goto LABEL_42;
                }
                uint64_t v127 = HIDWORD(v125) - (int)v125;
LABEL_33:
                I2OSP(value:outputByteCount:)(v127, 4);
                uint64_t v131 = v130;
                unint64_t v133 = v132;
                uint64_t v202 = v130;
                unint64_t v203 = v132;
                outlined copy of Data._Representation(v130, v132);
                outlined copy of Data._Representation(v125, v69);
                specialized Data.append<A>(contentsOf:)(v125, v69);
                outlined consume of Data._Representation(v125, v69);
                outlined consume of Data._Representation(v131, v133);
                uint64_t v134 = v202;
                unint64_t v135 = v203;
                outlined copy of Data._Representation(v202, v203);
                specialized Data.append<A>(contentsOf:)(v134, v135);
                outlined consume of Data._Representation(v134, v135);
                outlined consume of Data._Representation(v125, v69);
                outlined consume of Data?(v193, v194);
                outlined consume of Data._Representation(v134, v135);
                uint64_t v136 = type metadata accessor for TetraKEM768Key;
                break;
              case 2uLL:
                uint64_t v129 = *(void *)(v125 + 16);
                uint64_t v128 = *(void *)(v125 + 24);
                uint64_t v127 = v128 - v129;
                if (!__OFSUB__(v128, v129)) {
                  goto LABEL_33;
                }
                goto LABEL_43;
              case 3uLL:
                goto LABEL_33;
              default:
                uint64_t v127 = BYTE6(v69);
                goto LABEL_33;
            }
            goto LABEL_38;
          }
          outlined destroy of TetraSessionStates?(v117, &demangling cache variable for type metadata for TetraKEM768Key?);
          unint64_t v69 = v166;
          outlined init with copy of TetraSessionStates?((uint64_t)v206 + *(int *)(v198 + 24), v166, &demangling cache variable for type metadata for TetraKEM1024Key?);
          if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v190 + 48))(v69, 1, v191) != 1)
          {
            uint64_t v119 = v174;
            outlined init with take of TetraOutgoingSymmetricRatchet(v69, v174, type metadata accessor for TetraKEM1024Key);
            uint64_t v120 = v170;
            TetraKEM1024Key.publicKey.getter(v170);
            uint64_t v121 = Kyber1024.PublicKey.dataRepresentation.getter();
            unint64_t v69 = v122;
            (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v120, v172);
            uint64_t v97 = v185;
            uint64_t v123 = 0;
            switch(v69 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v121), v121)) {
                  goto LABEL_44;
                }
                uint64_t v123 = HIDWORD(v121) - (int)v121;
LABEL_37:
                I2OSP(value:outputByteCount:)(v123, 4);
                uint64_t v140 = v139;
                unint64_t v142 = v141;
                uint64_t v202 = v139;
                unint64_t v203 = v141;
                outlined copy of Data._Representation(v139, v141);
                outlined copy of Data._Representation(v121, v69);
                specialized Data.append<A>(contentsOf:)(v121, v69);
                outlined consume of Data._Representation(v121, v69);
                outlined consume of Data._Representation(v140, v142);
                uint64_t v143 = v202;
                unint64_t v144 = v203;
                outlined copy of Data._Representation(v202, v203);
                specialized Data.append<A>(contentsOf:)(v143, v144);
                outlined consume of Data._Representation(v143, v144);
                outlined consume of Data?(v193, v194);
                outlined consume of Data._Representation(v121, v69);
                outlined consume of Data._Representation(v143, v144);
                uint64_t v136 = type metadata accessor for TetraKEM1024Key;
                break;
              case 2uLL:
                uint64_t v138 = *(void *)(v121 + 16);
                uint64_t v137 = *(void *)(v121 + 24);
                uint64_t v123 = v137 - v138;
                if (!__OFSUB__(v137, v138)) {
                  goto LABEL_37;
                }
                goto LABEL_45;
              case 3uLL:
                goto LABEL_37;
              default:
                uint64_t v123 = BYTE6(v69);
                goto LABEL_37;
            }
LABEL_38:
            outlined destroy of TetraOutgoingSymmetricRatchet(v119, v136);
            uint64_t v98 = v67;
            uint64_t v96 = (void *)v200;
            goto LABEL_39;
          }
LABEL_48:
          outlined destroy of TetraSessionStates?(v69, &demangling cache variable for type metadata for TetraKEM1024Key?);
          __break(1u);
          JUMPOUT(0x216459574);
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        break;
      case 2uLL:
        uint64_t v110 = *(void *)(v105 + 16);
        uint64_t v109 = *(void *)(v105 + 24);
        uint64_t v108 = v109 - v110;
        if (!__OFSUB__(v109, v110)) {
          goto LABEL_24;
        }
        goto LABEL_41;
      case 3uLL:
        goto LABEL_24;
      default:
        uint64_t v108 = BYTE6(v83);
        goto LABEL_24;
    }
    goto LABEL_46;
  }
  uint64_t v84 = v187;
  outlined init with copy of TetraSessionStates?(v81, v187, &demangling cache variable for type metadata for TetraKEM768Key?);
  int v85 = (*v82)(v84, 1, v195);
  outlined destroy of TetraSessionStates?(v84, &demangling cache variable for type metadata for TetraKEM768Key?);
  if (v85 != 1
    || (uint64_t v86 = v177,
        outlined init with copy of TetraSessionStates?((uint64_t)v206 + *(int *)(v198 + 24), v177, &demangling cache variable for type metadata for TetraKEM1024Key?), int v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v86, 1, v191), outlined destroy of TetraSessionStates?(v86, &demangling cache variable for type metadata for TetraKEM1024Key?), v87 != 1))
  {
    lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
    swift_allocError();
    unsigned char *v104 = 1;
    swift_willThrow();
    goto LABEL_17;
  }
  uint64_t v196 = 0;
  I2OSP(value:outputByteCount:)(0, 4);
  uint64_t v89 = v88;
  unint64_t v91 = v90;
  specialized Data.append<A>(contentsOf:)(v88, v90);
  outlined consume of Data._Representation(v89, v91);
  I2OSP(value:outputByteCount:)(0, 4);
  uint64_t v93 = v92;
  unint64_t v95 = v94;
  specialized Data.append<A>(contentsOf:)(v92, v94);
  outlined consume of Data._Representation(v93, v95);
  uint64_t v96 = (void *)v200;
  uint64_t v97 = v185;
  (*(void (**)(void))(v200 + 56))();
  uint64_t v98 = v67;
LABEL_39:
  uint64_t v145 = v188;
  uint64_t v197 = &v188[*(int *)(v189 + 48)];
  uint64_t v146 = (uint64_t)v197;
  uint64_t v206 = (void (*)(void, void, void))v96[2];
  v206(v178, v201, v98);
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
  uint64_t v147 = (uint64_t)v179;
  SymmetricKey.init<A>(data:)();
  uint64_t v148 = v204;
  unint64_t v149 = v205;
  outlined copy of Data._Representation(v204, v205);
  uint64_t v150 = (uint64_t)v145;
  uint64_t v151 = (uint64_t)v199;
  static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)(v150, v146, (uint64_t)v199, v147, v97, v148, v149);
  outlined consume of Data._Representation(v148, v149);
  uint64_t v152 = (void (*)(uint64_t, uint64_t))v96[1];
  uint64_t v198 = (uint64_t)v152;
  v152(v147, v98);
  outlined destroy of TetraSessionStates?(v97, &demangling cache variable for type metadata for SymmetricKey?);
  v152((uint64_t)v201, v98);
  v152(v151, v98);
  outlined consume of Data._Representation(v204, v205);
  uint64_t v154 = v188;
  uint64_t v153 = v189;
  uint64_t v155 = v180;
  uint64_t v201 = &v180[*(int *)(v189 + 48)];
  uint64_t v156 = (uint64_t)v201;
  uint64_t v157 = (void (*)(uint64_t, char *, uint64_t))v206;
  v206(v180, v188, v98);
  uint64_t v158 = v156;
  uint64_t v159 = v197;
  v157(v158, v197, v98);
  int v160 = (void (*)(uint64_t, char *, uint64_t))v96[4];
  v160(v181, v155, v98);
  uint64_t v161 = *(int *)(v153 + 48);
  uint64_t v162 = v182;
  unint64_t v163 = &v182[v161];
  v160((uint64_t)v182, v154, v98);
  v160((uint64_t)v163, v159, v98);
  v160(v183, v163, v98);
  uint64_t v164 = (uint64_t (*)(char *, uint64_t))v198;
  ((void (*)(char *, uint64_t))v198)(v162, v98);
  return v164(v201, v98);
}

uint64_t closure #1 in static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (result) {
    unint64_t v3 = a2 - result;
  }
  else {
    unint64_t v3 = 0;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v3 < 0x20)
    {
LABEL_9:
      *a3 = 0;
      a3[1] = v3;
      a3[2] = result;
      a3[3] = a2;
      return result;
    }
    if (result && a2 - result >= 32)
    {
      unint64_t v3 = 32;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

unint64_t closure #2 in static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = a2 - result;
  if (!result) {
    unint64_t v3 = 0;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = v3 - 32;
    if (v3 < 0x20) {
      unint64_t v4 = 0;
    }
    *a3 = v4;
    a3[1] = v3;
    a3[2] = result;
    a3[3] = a2;
  }
  return result;
}

void TetraRatchetState.ratchetedOpen(message:sessionDST:didRatchet:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unsigned char *a4)
{
  uint64_t v5 = v4;
  uint64_t v206 = a4;
  unint64_t v236 = a2;
  uint64_t v8 = type metadata accessor for TetraRatchetOuterMessage();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v205 = (uint64_t)&v189 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v204 = (uint64_t)&v189 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v203 = (uint64_t)&v189 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v14 - 8);
  v210 = (char *)&v189 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v209 = (uint64_t)&v189 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for KEM.EncapsulationResult();
  uint64_t v225 = *(void *)(v18 - 8);
  uint64_t v226 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v215 = (char *)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v208 = (uint64_t)&v189 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v217 = (uint64_t)&v189 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  unint64_t v207 = (char *)&v189 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v220 = (uint64_t)&v189 - v27;
  uint64_t v28 = type metadata accessor for Kyber768.PublicKey();
  uint64_t v232 = *(void *)(v28 - 8);
  uint64_t v233 = v28;
  MEMORY[0x270FA5388](v28);
  v214 = (char *)&v189 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KEM.EncapsulationResult?);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  id v216 = (char *)&v189 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v213 = (uint64_t)&v189 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v224 = (uint64_t)&v189 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  uint64_t v202 = (uint64_t)&v189 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v219 = (uint64_t)&v189 - v40;
  MEMORY[0x270FA5388](v39);
  uint64_t v231 = (uint64_t)&v189 - v41;
  uint64_t v42 = type metadata accessor for TetraIncomingSymmetricRatchet(0);
  MEMORY[0x270FA5388](v42 - 8);
  unint64_t v230 = (uint64_t *)((char *)&v189 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v229 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v218 = *(void *)(v229 - 8);
  MEMORY[0x270FA5388](v229);
  unsigned int v228 = (char *)&v189 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
  uint64_t v46 = MEMORY[0x270FA5388](v45);
  uint64_t v212 = (char *)&v189 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  uint64_t v221 = (char *)&v189 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  uint64_t v52 = (char *)&v189 - v51;
  uint64_t v234 = v50;
  uint64_t v53 = (char *)&v189 + *(int *)(v50 + 48) - v51;
  uint64_t v237 = (char *)(a1 + *(int *)(v8 + 28));
  uint64_t v223 = (int *)v8;
  uint64_t v54 = *(int *)(v8 + 36);
  uint64_t v222 = a1;
  unint64_t v55 = (uint64_t *)(a1 + v54);
  uint64_t v57 = *v55;
  unint64_t v56 = v55[1];
  uint64_t v58 = type metadata accessor for TetraRatchetState(0);
  int v59 = (void (*)(void, void, void))(v4 + *(int *)(v58 + 24));
  uint64_t v211 = a3;
  uint64_t v60 = v236(1);
  unint64_t v62 = v61;
  unint64_t v188 = v61;
  int64_t v235 = v52;
  uint64_t v63 = (uint64_t)v52;
  uint64_t v64 = v53;
  uint64_t v65 = (uint64_t)v53;
  uint64_t v67 = v237;
  unint64_t v66 = v238;
  uint64_t v227 = v5;
  static TetraRatchetState.deriveRootAndChainKeyAsReceiver(rootKey:theirPublicKey:encap:ourReceivingKeys:conversationDST:)(v63, v65, v5, v237, v57, v56, v59, v60, v188);
  os_log_t v238 = v66;
  if (v66)
  {
    outlined consume of Data._Representation(v60, v62);
    return;
  }
  uint64_t v195 = v59;
  uint64_t v198 = (int *)v58;
  outlined consume of Data._Representation(v60, v62);
  uint64_t v68 = v218;
  (*(void (**)(char *, char *, uint64_t))(v218 + 16))(v228, v67, v229);
  unint64_t v69 = v221;
  unint64_t v70 = &v221[*(int *)(v234 + 48)];
  uint64_t v71 = type metadata accessor for SymmetricKey();
  uint64_t v72 = *(void **)(v71 - 8);
  uint64_t v73 = (void (*)(char *, char *, uint64_t))v72[2];
  v73(v69, v235, v71);
  id v199 = v64;
  v73(v70, v64, v71);
  TetraIncomingSymmetricRatchet.init(symmetricRatchetHead:)(v70, (uint64_t)v230);
  uint64_t v200 = (void (*)(char *, uint64_t))v72[1];
  v200(v69, v71);
  uint64_t v201 = v222 + v223[8];
  outlined init with copy of TetraSessionStates?(v201, v231, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  type metadata accessor for ReceivingKeyTetraRatchet(0);
  uint64_t v74 = swift_allocObject();
  uint64_t v75 = v74 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v232 + 56))(v74 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey, 1, 1, v233);
  (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v74 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey, v228, v229);
  uint64_t v229 = v74;
  uint64_t v192 = v74 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet;
  outlined init with take of TetraOutgoingSymmetricRatchet((uint64_t)v230, v74 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet, type metadata accessor for TetraIncomingSymmetricRatchet);
  swift_beginAccess();
  outlined assign with take of SymmetricKey?(v231, v75, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  swift_endAccess();
  uint64_t v76 = v227;
  outlined destroy of TetraSessionStates?(v227, &demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v77 = (uint64_t)v235;
  unint64_t v78 = &v69[*(int *)(v234 + 48)];
  v73(v69, v235, v71);
  unint64_t v194 = v72 + 2;
  uint64_t v193 = v73;
  v73(v78, v199, v71);
  uint64_t v79 = (void (*)(uint64_t, char *, uint64_t))v72[4];
  uint64_t v80 = v69;
  uint64_t v81 = v232;
  id v199 = (char *)(v72 + 4);
  uint64_t v197 = v79;
  v79(v76, v80, v71);
  unint64_t v82 = (void (*)(uint64_t, void, uint64_t, uint64_t))v72[7];
  unint64_t v230 = v72 + 7;
  uint64_t v196 = v82;
  v82(v76, 0, 1, v71);
  uint64_t v218 = v71;
  unsigned int v228 = (char *)(v72 + 1);
  v200(v78, v71);
  uint64_t v83 = v219;
  outlined init with copy of TetraSessionStates?(v201, v219, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  uint64_t v84 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  uint64_t v85 = v233;
  uint64_t v191 = v81 + 48;
  uint64_t v190 = v84;
  if (v84(v83, 1, v233) == 1)
  {
    outlined destroy of TetraSessionStates?(v83, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    uint64_t v86 = v224;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v225 + 56))(v224, 1, 1, v226);
    uint64_t v87 = v220;
  }
  else
  {
    uint64_t v88 = v77;
    uint64_t v89 = v214;
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v214, v83, v85);
    uint64_t v90 = v213;
    os_log_t v91 = v238;
    Kyber768.PublicKey.encapsulate()();
    uint64_t v86 = v224;
    uint64_t v87 = v220;
    if (v91)
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v89, v85);
      uint64_t v92 = &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey);
      uint64_t v93 = v88;
LABEL_18:
      outlined destroy of TetraSessionStates?(v93, v92);
      return;
    }
    os_log_t v238 = 0;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v89, v85);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v225 + 56))(v90, 0, 1, v226);
    outlined init with take of KEM.EncapsulationResult?(v90, v86, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
  }
  uint64_t v94 = v198[8];
  uint64_t v220 = v198[7];
  unsigned int v95 = *(_DWORD *)(v227 + v220);
  uint64_t v213 = v227 + v94;
  outlined init with copy of TetraSessionStates?(v227 + v94, v87, &demangling cache variable for type metadata for Date?);
  uint64_t v96 = type metadata accessor for Date();
  uint64_t v97 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v96 - 8);
  int v98 = v97[6](v87, 1, v96);
  Class isa = 0;
  int v100 = v215;
  if (v98 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    ((void (*)(uint64_t, uint64_t))v97[1])(v87, v96);
  }
  v214 = (char *)v97;
  uint64_t v219 = v96;
  unsigned int v101 = objc_msgSend(self, sel_shouldRekeyIfLastRekeyFrom_, isa);

  if (v95 > 0x63) {
    int v102 = 1;
  }
  else {
    int v102 = v101;
  }
  LODWORD(v231) = v102;
  uint64_t v104 = v225;
  uint64_t v103 = v226;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48))(v86, 1, v226))
  {
    uint64_t v105 = 0;
    unint64_t v106 = 0xF000000000000000;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v100, v86, v103);
    uint64_t v105 = KEM.EncapsulationResult.encapsulated.getter();
    unint64_t v106 = v107;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v100, v103);
  }
  uint64_t v108 = v217;
  uint64_t v109 = (uint64_t)v216;
  uint64_t v111 = v237;
  os_log_t v110 = v238;
  TetraOutgoingKeyContent.init(includesKEMKey:encap:)(v231, v105, v106, v217);
  if (v110)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v235, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
    swift_release();
    uint64_t v92 = &demangling cache variable for type metadata for KEM.EncapsulationResult?;
    uint64_t v93 = v86;
    goto LABEL_18;
  }
  uint64_t v112 = (uint64_t)v212;
  unint64_t v113 = &v212[*(int *)(v234 + 48)];
  outlined init with copy of TetraSessionStates?(v86, v109, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
  uint64_t v114 = v236(0);
  unint64_t v116 = v115;
  uint64_t v237 = v113;
  static TetraRatchetState.deriveRootAndChainKeyAsSender(rootKey:theirECDHPublicKey:theirKyber768Key:encapResult:ourOutgoingKeys:conversationDST:)(v112, (uint64_t)v113, (uint64_t)v235, (uint64_t)v111, v201, v109, v108, v114, v115);
  os_log_t v238 = 0;
  outlined destroy of TetraSessionStates?(v109, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
  outlined consume of Data._Representation(v114, v116);
  uint64_t v117 = v227;
  outlined destroy of TetraSessionStates?(v227, &demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v118 = v234;
  uint64_t v119 = v221;
  uint64_t v120 = &v221[*(int *)(v234 + 48)];
  uint64_t v121 = (uint64_t)v212;
  uint64_t v122 = v218;
  uint64_t v123 = v193;
  v193(v221, v212, v218);
  v123(v120, v237, v122);
  v197(v117, v119, v122);
  v196(v117, 0, 1, v122);
  v200(v120, v122);
  if (v231)
  {
    *(_DWORD *)(v117 + v220) = 0;
    uint64_t v124 = (uint64_t)v207;
    Date.init()();
    (*((void (**)(uint64_t, void, uint64_t, uint64_t))v214 + 7))(v124, 0, 1, v219);
    outlined assign with take of SymmetricKey?(v124, v213, &demangling cache variable for type metadata for Date?);
  }
  uint64_t v125 = &v119[*(int *)(v118 + 48)];
  uint64_t v126 = v218;
  v123(v119, (char *)v121, v218);
  v123(v125, v237, v126);
  uint64_t v127 = (uint64_t)v210;
  v197((uint64_t)v210, v125, v126);
  v196(v127, 0, 1, v126);
  uint64_t v128 = v208;
  outlined init with copy of TetraRatchetState(v217, v208, type metadata accessor for TetraOutgoingKeyContent);
  uint64_t v129 = v209;
  TetraOutgoingSymmetricRatchet.init(symmetricRatchetHead:outgoingPublicKeys:)(v127, v128, v209);
  v200(v119, v126);
  outlined assign with take of TetraOutgoingSymmetricRatchet(v129, (uint64_t)v195);
  uint64_t v130 = v222;
  uint64_t v131 = *(void *)(v222 + 8);
  unint64_t v132 = *(void *)(v222 + 16);
  LODWORD(v128) = *(_DWORD *)(v222 + 24);
  unint64_t v133 = (uint64_t *)(v222 + v223[11]);
  uint64_t v134 = *v133;
  unint64_t v135 = v133[1];
  swift_beginAccess();
  os_log_t v136 = v238;
  TetraIncomingSymmetricRatchet.openMessage(_:messageIndex:messageKeyIndicator:discardMessageKey:)(v131, v132, v128, v134, v135, 0);
  uint64_t v137 = v224;
  if (v136)
  {
    swift_endAccess();
    id v241 = v136;
    uint64_t v138 = v136;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (!swift_dynamicCast())
    {
      swift_release();
      outlined destroy of TetraSessionStates?((uint64_t)v212, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
      uint64_t v166 = v217;
      goto LABEL_53;
    }
    uint64_t v139 = v217;
    if (v242 != 3)
    {
      swift_release();
      outlined destroy of TetraSessionStates?((uint64_t)v212, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
      uint64_t v166 = v139;
LABEL_53:
      outlined destroy of TetraOutgoingSymmetricRatchet(v166, type metadata accessor for TetraOutgoingKeyContent);
      outlined destroy of TetraSessionStates?((uint64_t)v235, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));

      uint64_t v92 = &demangling cache variable for type metadata for KEM.EncapsulationResult?;
      uint64_t v93 = v137;
      goto LABEL_18;
    }

    int v140 = static os_log_type_t.error.getter();
    unint64_t v141 = MessageProtectionLog();
    if (v141)
    {
      unint64_t v142 = v141;
      uint64_t v143 = v203;
      outlined init with copy of TetraRatchetState(v130, v203, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
      uint64_t v144 = v204;
      outlined init with copy of TetraRatchetState(v130, v204, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
      uint64_t v145 = v130;
      uint64_t v146 = v205;
      outlined init with copy of TetraRatchetState(v145, v205, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
      if (os_log_type_enabled(v142, (os_log_type_t)v140))
      {
        LODWORD(v237) = v140;
        os_log_t v238 = v142;
        uint64_t v147 = swift_slowAlloc();
        uint64_t v148 = swift_slowAlloc();
        uint64_t v240 = v148;
        *(_DWORD *)uint64_t v147 = 136315650;
        uint64_t v149 = v202;
        outlined init with copy of TetraSessionStates?(v143 + v223[8], v202, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
        uint64_t v150 = v233;
        int v151 = v190(v149, 1, v233);
        unint64_t v236 = (uint64_t (*)(uint64_t))v148;
        if (v151 == 1)
        {
          uint64_t v152 = v143;
          outlined destroy of TetraSessionStates?(v149, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
          object = (void *)0xEA00000000007965;
          uint64_t countAndFlagsBits = 0x4B206D654B206F4ELL;
        }
        else
        {
          uint64_t v169 = Kyber768.PublicKey.dataRepresentation.getter();
          unint64_t v171 = v170;
          (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v149, v150);
          Swift::String v172 = Data.base64EncodedString(options:)(0);
          uint64_t countAndFlagsBits = v172._countAndFlagsBits;
          object = v172._object;
          unint64_t v173 = v171;
          uint64_t v152 = v203;
          outlined consume of Data._Representation(v169, v173);
        }
        uint64_t v174 = v205;
        uint64_t v175 = v204;
        uint64_t v239 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v240);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TetraOutgoingSymmetricRatchet(v152, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
        *(_WORD *)(v147 + 12) = 2080;
        if (*(void *)(v175 + v223[9] + 8) >> 60 == 15)
        {
          uint64_t v176 = (void *)0xE800000000000000;
          uint64_t v177 = 0x7061636E45206F4ELL;
        }
        else
        {
          Swift::String v178 = Data.base64EncodedString(options:)(0);
          uint64_t v177 = v178._countAndFlagsBits;
          uint64_t v176 = v178._object;
        }
        uint64_t v239 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v177, (unint64_t)v176, &v240);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TetraOutgoingSymmetricRatchet(v175, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
        *(_WORD *)(v147 + 22) = 2080;
        uint64_t v179 = P256.KeyAgreement.PublicKey.compressedRepresentation.getter();
        unint64_t v181 = v180;
        Swift::String v182 = Data.base64EncodedString(options:)(0);
        outlined consume of Data._Representation(v179, v181);
        uint64_t v239 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v182._countAndFlagsBits, (unint64_t)v182._object, &v240);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TetraOutgoingSymmetricRatchet(v174, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
        os_log_t v183 = v238;
        _os_log_impl(&dword_2163F2000, v238, (os_log_type_t)v237, "Out of sync ratchet upon ratcheting. KEM Key: %s. Encap: %s ECDH: %s", (uint8_t *)v147, 0x20u);
        unint64_t v184 = v236;
        swift_arrayDestroy();
        MEMORY[0x2166CDD30](v184, -1, -1);
        MEMORY[0x2166CDD30](v147, -1, -1);

        uint64_t v137 = v224;
        uint64_t v168 = v217;
        uint64_t v167 = (uint64_t)v212;
      }
      else
      {

        outlined destroy of TetraOutgoingSymmetricRatchet(v143, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
        outlined destroy of TetraOutgoingSymmetricRatchet(v144, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
        outlined destroy of TetraOutgoingSymmetricRatchet(v146, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
        uint64_t v167 = (uint64_t)v212;
        uint64_t v168 = v217;
      }
      lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
      swift_allocError();
      *uint64_t v185 = 3;
      swift_willThrow();
      swift_release();
      outlined destroy of TetraSessionStates?(v167, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
      uint64_t v166 = v168;
      goto LABEL_53;
    }
    goto LABEL_64;
  }
  os_log_t v238 = 0;
  swift_endAccess();
  uint64_t v155 = (void *)(v227 + v198[5]);
  uint64_t v156 = swift_retain();
  MEMORY[0x2166CC990](v156);
  if (*(void *)((*v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v157 = v206;
  if (*v155 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v186 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v186 < 8) {
      goto LABEL_44;
    }
  }
  else if (*(uint64_t *)((*v155 & 0xFFFFFFFFFFFFFF8) + 0x10) < 8)
  {
LABEL_44:
    swift_release();
    outlined destroy of TetraSessionStates?((uint64_t)v212, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
    outlined destroy of TetraOutgoingSymmetricRatchet(v217, type metadata accessor for TetraOutgoingKeyContent);
    outlined destroy of TetraSessionStates?((uint64_t)v235, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
    unsigned char *v157 = 1;
    outlined destroy of TetraSessionStates?(v224, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
    return;
  }
  if (!(*v155 >> 62))
  {
    uint64_t v158 = *(void *)((*v155 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v159 = v158 - 7;
    if (!__OFSUB__(v158, 7)) {
      goto LABEL_35;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  uint64_t v187 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v159 = v187 - 7;
  if (__OFSUB__(v187, 7)) {
    goto LABEL_58;
  }
LABEL_35:
  os_log_type_t v160 = static os_log_type_t.info.getter();
  uint64_t v161 = MessageProtectionLog();
  if (!v161) {
    goto LABEL_63;
  }
  uint64_t v162 = v161;
  if (os_log_type_enabled(v161, v160))
  {
    unint64_t v163 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v163 = 134217984;
    id v241 = (id)v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2163F2000, v162, v160, "Removing first %ld chains.", v163, 0xCu);
    uint64_t v164 = v163;
    uint64_t v157 = v206;
    MEMORY[0x2166CDD30](v164, -1, -1);
  }

  if (!v159) {
    goto LABEL_44;
  }
  if (v159 < 0) {
    goto LABEL_59;
  }
  if (!(*v155 >> 62))
  {
    uint64_t v165 = *(void *)((*v155 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v165 < 0)
    {
LABEL_43:
      specialized Array.replaceSubrange<A>(_:with:)(0, v159);
      goto LABEL_44;
    }
    goto LABEL_42;
  }
LABEL_60:
  swift_bridgeObjectRetain();
  uint64_t v165 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v165 < 0) {
    goto LABEL_43;
  }
LABEL_42:
  if (v165 >= v159) {
    goto LABEL_43;
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
}

uint64_t closure #1 in TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(void *a1)
{
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, *a1 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey, v2);
  type metadata accessor for TetraRatchetOuterMessage();
  uint64_t v6 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v8 = v7;
  uint64_t v9 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v11 = v10;
  char v12 = specialized static Data.== infix(_:_:)(v6, v8, v9, v10);
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(v6, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v12 & 1;
}

unint64_t TetraRatchetState.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x79654B746F6F72;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x676E696D6F636E69;
      break;
    case 2:
      unint64_t result = 0x676E696F6774756FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraRatchetState.CodingKeys()
{
  return TetraRatchetState.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraRatchetState.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TetraRatchetState.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TetraRatchetState.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraRatchetState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraRatchetState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TetraRatchetState.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraRatchetState.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  type metadata accessor for SymmetricKey();
  lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for TetraRatchetState(0) + 20));
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReceivingKeyTetraRatchet]);
    lazy protocol witness table accessor for type [ReceivingKeyTetraRatchet] and conformance <A> [A](&lazy protocol witness table cache variable for type [ReceivingKeyTetraRatchet] and conformance <A> [A], &lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet and conformance ReceivingKeyTetraRatchet);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[14] = 2;
    type metadata accessor for TetraOutgoingSymmetricRatchet(0);
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet and conformance TetraOutgoingSymmetricRatchet, (void (*)(uint64_t))type metadata accessor for TetraOutgoingSymmetricRatchet);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[13] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 4;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TetraRatchetState.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v31 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  MEMORY[0x270FA5388](v34);
  uint64_t v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v35 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraRatchetState.CodingKeys>);
  uint64_t v33 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x270FA5388](v10);
  char v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SymmetricKey();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = *(int *)(v10 + 28);
  *(_DWORD *)&v12[v14] = 0;
  uint64_t v39 = v10;
  uint64_t v15 = (uint64_t)&v12[*(int *)(v10 + 32)];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v37 = v15;
  v17(v15, 1, 1, v16);
  uint64_t v18 = a1[3];
  uint64_t v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys();
  uint64_t v19 = v9;
  uint64_t v20 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    uint64_t v23 = v37;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
    outlined destroy of TetraSessionStates?((uint64_t)v12, &demangling cache variable for type metadata for SymmetricKey?);
    return outlined destroy of TetraSessionStates?(v23, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    uint64_t v29 = v14;
    uint64_t v40 = v16;
    char v46 = 0;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
    uint64_t v21 = (uint64_t)v35;
    uint64_t v22 = v36;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of SymmetricKey?(v21, (uint64_t)v12, &demangling cache variable for type metadata for SymmetricKey?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReceivingKeyTetraRatchet]);
    char v45 = 1;
    lazy protocol witness table accessor for type [ReceivingKeyTetraRatchet] and conformance <A> [A](&lazy protocol witness table cache variable for type [ReceivingKeyTetraRatchet] and conformance <A> [A], &lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet and conformance ReceivingKeyTetraRatchet);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v24 = v39;
    *(void *)&v12[*(int *)(v39 + 20)] = v41;
    char v44 = 2;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet and conformance TetraOutgoingSymmetricRatchet, (void (*)(uint64_t))type metadata accessor for TetraOutgoingSymmetricRatchet);
    uint64_t v25 = (uint64_t)v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of TetraOutgoingSymmetricRatchet(v25, (uint64_t)&v12[*(int *)(v24 + 24)], type metadata accessor for TetraOutgoingSymmetricRatchet);
    char v43 = 3;
    *(_DWORD *)&v12[v29] = KeyedDecodingContainer.decode(_:forKey:)();
    char v42 = 4;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    uint64_t v26 = (uint64_t)v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v22);
    outlined assign with take of SymmetricKey?(v26, v37, &demangling cache variable for type metadata for Date?);
    outlined init with copy of TetraRatchetState((uint64_t)v12, v30, type metadata accessor for TetraRatchetState);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
    return outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v12, type metadata accessor for TetraRatchetState);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraRatchetState@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraRatchetState.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraRatchetState(void *a1)
{
  return TetraRatchetState.encode(to:)(a1);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5 - a4;
  if (!a4) {
    uint64_t v5 = 0;
  }
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 < 0 || v5 < a3) {
    goto LABEL_19;
  }
  uint64_t v6 = a3 - result;
  if (a2 > 0)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_14;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_14:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result) {
    goto LABEL_21;
  }
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

unint64_t lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for TetraRatchetState(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraRatchetState);
}

uint64_t lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ReceivingKeyTetraRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for ReceivingKeyTetraRatchet);
}

uint64_t lazy protocol witness table accessor for type [ReceivingKeyTetraRatchet] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ReceivingKeyTetraRatchet]);
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(a2, (void (*)(uint64_t))type metadata accessor for ReceivingKeyTetraRatchet);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of TetraOutgoingSymmetricRatchet(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t base witness table accessor for Equatable in P256.KeyAgreement.PublicKey()
{
  return lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, MEMORY[0x263F04770]);
}

unint64_t lazy protocol witness table accessor for type TetraMessageTypes and conformance TetraMessageTypes()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraMessageTypes and conformance TetraMessageTypes;
  if (!lazy protocol witness table cache variable for type TetraMessageTypes and conformance TetraMessageTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraMessageTypes and conformance TetraMessageTypes);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TetraMessageTypes()
{
  return lazy protocol witness table accessor for type [TetraMessageTypes] and conformance [A](&lazy protocol witness table cache variable for type [TetraMessageTypes] and conformance [A], &demangling cache variable for type metadata for [TetraMessageTypes]);
}

uint64_t ObjC metadata update function for ReceivingKeyTetraRatchet()
{
  return type metadata accessor for ReceivingKeyTetraRatchet(0);
}

void type metadata completion function for ReceivingKeyTetraRatchet()
{
  type metadata accessor for P256.KeyAgreement.PublicKey();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Kyber768.PublicKey?(319, (unint64_t *)&lazy cache variable for type metadata for Kyber768.PublicKey?, MEMORY[0x263F04898]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for SymmetricRatchet();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TetraMessageTypes(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21645C248);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraMessageTypes()
{
  return &type metadata for TetraMessageTypes;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraRatchetState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymmetricKey();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v106 = v8;
    uint64_t v107 = v7;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v108 = a3;
    uint64_t v109 = a2;
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    char v12 = (char *)a1 + v11;
    char v13 = (void **)((char *)a2 + v11);
    uint64_t v14 = *v13;
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)*v13;
    uint64_t v15 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    uint64_t v16 = &v12[v15];
    os_log_t v110 = v13;
    uint64_t v17 = (char *)v13 + v15;
    uint64_t v18 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    id v21 = v14;
    if (v20(v17, 1, v18))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v23 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
    uint64_t v24 = v23[5];
    uint64_t v25 = &v12[v24];
    uint64_t v26 = v110;
    uint64_t v27 = (char *)v110 + v24;
    uint64_t v28 = type metadata accessor for TetraKEM768Key(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v25, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = type metadata accessor for Kyber768.PrivateKey();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v25, v27, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v25, v27, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v25, 0, 1, v31);
      }
      uint64_t v34 = *(int *)(v28 + 20);
      uint64_t v35 = &v25[v34];
      uint64_t v36 = &v27[v34];
      uint64_t v37 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        uint64_t v40 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v35, v36, v40);
        uint64_t v41 = *(int *)(v37 + 20);
        int v100 = v35;
        uint64_t v102 = v38;
        char v42 = (uint64_t *)&v35[v41];
        char v43 = (uint64_t *)&v36[v41];
        uint64_t v104 = v23;
        uint64_t v44 = *v43;
        unint64_t v45 = v43[1];
        outlined copy of Data._Representation(*v43, v45);
        uint64_t *v42 = v44;
        v42[1] = v45;
        uint64_t v46 = *(int *)(v37 + 24);
        uint64_t v47 = *(void **)&v36[v46];
        *(void *)&v100[v46] = v47;
        uint64_t v23 = v104;
        uint64_t v48 = *(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56);
        id v49 = v47;
        v48(v100, 0, 1, v37);
      }
      uint64_t v26 = v110;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
    }
    uint64_t v50 = v23[6];
    uint64_t v51 = &v12[v50];
    uint64_t v52 = (char *)v26 + v50;
    uint64_t v53 = type metadata accessor for TetraKEM1024Key(0);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      uint64_t v56 = type metadata accessor for Kyber1024.PrivateKey();
      uint64_t v57 = *(void *)(v56 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v52, 1, v56))
      {
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v51, v52, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v51, v52, v56);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v51, 0, 1, v56);
      }
      uint64_t v59 = *(int *)(v53 + 20);
      uint64_t v60 = &v51[v59];
      unint64_t v61 = &v52[v59];
      uint64_t v62 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      uint64_t v63 = *(void *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
      {
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        uint64_t v65 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v60, v61, v65);
        uint64_t v66 = *(int *)(v62 + 20);
        uint64_t v101 = v63;
        uint64_t v103 = v54;
        uint64_t v67 = (uint64_t *)&v60[v66];
        uint64_t v68 = (uint64_t *)&v61[v66];
        uint64_t v105 = v23;
        uint64_t v69 = *v68;
        unint64_t v70 = v68[1];
        outlined copy of Data._Representation(*v68, v70);
        *uint64_t v67 = v69;
        v67[1] = v70;
        uint64_t v54 = v103;
        uint64_t v23 = v105;
        uint64_t v71 = *(int *)(v62 + 24);
        uint64_t v72 = *(void **)&v61[v71];
        *(void *)&v60[v71] = v72;
        uint64_t v73 = *(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56);
        id v74 = v72;
        v73(v60, 0, 1, v62);
      }
      uint64_t v26 = v110;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
    }
    uint64_t v75 = v23[7];
    uint64_t v76 = &v12[v75];
    uint64_t v77 = (uint64_t *)((char *)v26 + v75);
    unint64_t v78 = v77[1];
    if (v78 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
    }
    else
    {
      uint64_t v79 = *v77;
      outlined copy of Data._Representation(*v77, v77[1]);
      *(void *)uint64_t v76 = v79;
      *((void *)v76 + 1) = v78;
    }
    uint64_t v80 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
    uint64_t v81 = &v12[v80];
    unint64_t v82 = (char *)v26 + v80;
    uint64_t v83 = type metadata accessor for SymmetricRatchet();
    uint64_t v84 = *(void *)(v83 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
    {
      uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
      memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v81, v82, v107);
      uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v81[*(int *)(v86 + 48)] = *(void *)&v82[*(int *)(v86 + 48)];
      *(void *)&v81[*(int *)(v83 + 20)] = *(void *)&v82[*(int *)(v83 + 20)];
      uint64_t v87 = *(int *)(v83 + 24);
      uint64_t v88 = &v81[v87];
      uint64_t v89 = &v82[v87];
      long long v90 = *(_OWORD *)(v89 + 24);
      *(_OWORD *)&v81[v87 + 24] = v90;
      uint64_t v91 = v90;
      uint64_t v92 = **(void (***)(char *, char *, uint64_t))(v90 - 8);
      swift_bridgeObjectRetain();
      v92(v88, v89, v91);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
    uint64_t v93 = *(int *)(v108 + 32);
    *(_DWORD *)((char *)a1 + *(int *)(v108 + 28)) = *(_DWORD *)((char *)v109 + *(int *)(v108 + 28));
    uint64_t v94 = (char *)a1 + v93;
    unsigned int v95 = (char *)v109 + v93;
    uint64_t v96 = type metadata accessor for Date();
    uint64_t v97 = *(void *)(v96 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
    {
      uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v94, v95, v96);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
    }
  }
  return a1;
}

uint64_t type metadata accessor for TetraOutgoingKeyContent(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraOutgoingKeyContent);
}

uint64_t destroy for TetraRatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  unsigned int v6 = (id *)(a1 + *(int *)(a2 + 24));

  uint64_t v7 = (char *)v6 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v8 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v11 = (char *)v6 + v10[5];
  uint64_t v12 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v14 = *(void *)(v13 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13)) {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    }
    uint64_t v15 = &v11[*(int *)(v12 + 20)];
    uint64_t v16 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
    {
      uint64_t v17 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v15, v17);
      outlined consume of Data._Representation(*(void *)&v15[*(int *)(v16 + 20)], *(void *)&v15[*(int *)(v16 + 20) + 8]);
    }
  }
  uint64_t v18 = (char *)v6 + v10[6];
  uint64_t v19 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19))
  {
    uint64_t v20 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v21 = *(void *)(v20 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20)) {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    }
    uint64_t v22 = &v18[*(int *)(v19 + 20)];
    uint64_t v23 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23))
    {
      uint64_t v24 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v22, v24);
      outlined consume of Data._Representation(*(void *)&v22[*(int *)(v23 + 20)], *(void *)&v22[*(int *)(v23 + 20) + 8]);
    }
  }
  uint64_t v25 = (uint64_t *)((char *)v6 + v10[7]);
  unint64_t v26 = v25[1];
  if (v26 >> 60 != 15) {
    outlined consume of Data._Representation(*v25, v26);
  }
  uint64_t v27 = (char *)v6 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v28 = type metadata accessor for SymmetricRatchet();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v4);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v27[*(int *)(v28 + 24)]);
  }
  uint64_t v29 = a1 + *(int *)(a2 + 32);
  uint64_t v30 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v30 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v29, 1, v30);
  if (!result)
  {
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    return v32(v29, v30);
  }
  return result;
}

char *initializeWithCopy for TetraRatchetState(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v104 = v7;
  uint64_t v105 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v106 = a3;
  uint64_t v107 = a2;
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  uint64_t v108 = a1;
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(void **)&a2[v9];
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v14 = &v10[v13];
  uint64_t v15 = &v11[v13];
  uint64_t v16 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  id v19 = v12;
  if (v18(v15, 1, v16))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v21 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v22 = v21[5];
  uint64_t v23 = &v10[v22];
  uint64_t v24 = &v11[v22];
  uint64_t v25 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    uint64_t v28 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v24, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v23, v24, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v28);
    }
    uint64_t v31 = *(int *)(v25 + 20);
    uint64_t v32 = &v23[v31];
    uint64_t v33 = &v24[v31];
    uint64_t v34 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      uint64_t v37 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v32, v33, v37);
      uint64_t v38 = *(int *)(v34 + 20);
      uint64_t v100 = v35;
      uint64_t v102 = v21;
      uint64_t v39 = (uint64_t *)&v32[v38];
      uint64_t v40 = (uint64_t *)&v33[v38];
      uint64_t v98 = v32;
      uint64_t v42 = *v40;
      unint64_t v41 = v40[1];
      outlined copy of Data._Representation(*v40, v41);
      uint64_t *v39 = v42;
      v39[1] = v41;
      uint64_t v43 = *(int *)(v34 + 24);
      uint64_t v44 = *(void **)&v33[v43];
      *(void *)&v98[v43] = v44;
      uint64_t v21 = v102;
      unint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56);
      id v46 = v44;
      v45(v98, 0, 1, v34);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  uint64_t v47 = v21[6];
  uint64_t v48 = &v10[v47];
  id v49 = &v11[v47];
  uint64_t v50 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    uint64_t v53 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v49, 1, v53))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v48, v49, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v48, v49, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v48, 0, 1, v53);
    }
    uint64_t v56 = *(int *)(v50 + 20);
    uint64_t v57 = &v48[v56];
    uint64_t v58 = &v49[v56];
    uint64_t v59 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v60 = *(void *)(v59 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      uint64_t v62 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v57, v58, v62);
      uint64_t v63 = *(int *)(v59 + 20);
      uint64_t v99 = v57;
      uint64_t v101 = v51;
      uint64_t v64 = (uint64_t *)&v57[v63];
      uint64_t v65 = (uint64_t *)&v58[v63];
      uint64_t v66 = v60;
      uint64_t v103 = v21;
      uint64_t v67 = *v65;
      unint64_t v68 = v65[1];
      outlined copy of Data._Representation(*v65, v68);
      uint64_t *v64 = v67;
      v64[1] = v68;
      uint64_t v51 = v101;
      uint64_t v21 = v103;
      uint64_t v69 = *(int *)(v59 + 24);
      unint64_t v70 = *(void **)&v58[v69];
      *(void *)&v99[v69] = v70;
      uint64_t v71 = *(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56);
      id v72 = v70;
      v71(v99, 0, 1, v59);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  uint64_t v73 = v21[7];
  id v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  unint64_t v76 = *((void *)v75 + 1);
  if (v76 >> 60 == 15)
  {
    *(_OWORD *)id v74 = *(_OWORD *)v75;
  }
  else
  {
    uint64_t v77 = *(void *)v75;
    outlined copy of Data._Representation(*(void *)v75, *((void *)v75 + 1));
    *(void *)id v74 = v77;
    *((void *)v74 + 1) = v76;
  }
  uint64_t v78 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v79 = &v10[v78];
  uint64_t v80 = &v11[v78];
  uint64_t v81 = type metadata accessor for SymmetricRatchet();
  uint64_t v82 = *(void *)(v81 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
  {
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v79, v80, v105);
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v79[*(int *)(v84 + 48)] = *(void *)&v80[*(int *)(v84 + 48)];
    *(void *)&v79[*(int *)(v81 + 20)] = *(void *)&v80[*(int *)(v81 + 20)];
    uint64_t v85 = *(int *)(v81 + 24);
    uint64_t v86 = &v79[v85];
    uint64_t v87 = &v80[v85];
    long long v88 = *(_OWORD *)&v80[v85 + 24];
    *(_OWORD *)&v79[v85 + 24] = v88;
    uint64_t v89 = v88;
    long long v90 = **(void (***)(char *, char *, uint64_t))(v88 - 8);
    swift_bridgeObjectRetain();
    v90(v86, v87, v89);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  }
  uint64_t v91 = *(int *)(v106 + 32);
  *(_DWORD *)&v108[*(int *)(v106 + 28)] = *(_DWORD *)&v107[*(int *)(v106 + 28)];
  uint64_t v92 = &v108[v91];
  uint64_t v93 = &v107[v91];
  uint64_t v94 = type metadata accessor for Date();
  uint64_t v95 = *(void *)(v94 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
  {
    uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
  }
  return v108;
}

char *assignWithCopy for TetraRatchetState(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  uint64_t v198 = v7;
  uint64_t v199 = v6;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v200 = a3;
  uint64_t v201 = a2;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void **)&a1[v12];
  uint64_t v16 = *(void **)&a2[v12];
  *(void *)uint64_t v13 = v16;
  id v17 = v16;

  uint64_t v18 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v204 = v13;
  id v19 = &v13[v18];
  uint64_t v20 = &v14[v18];
  uint64_t v21 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_12:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_13:
  uint64_t v27 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v28 = *(int *)(v27 + 20);
  uint64_t v29 = &v13[v28];
  uint64_t v203 = v14;
  uint64_t v30 = &v14[v28];
  uint64_t v31 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  uint64_t v202 = v27;
  if (!v34)
  {
    if (v35)
    {
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v29, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    uint64_t v196 = a1;
    uint64_t v42 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
    int v45 = v44(v29, 1, v42);
    int v46 = v44(v30, 1, v42);
    if (v45)
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v29, v30, v42);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v29, 0, 1, v42);
LABEL_49:
        a1 = v196;
        uint64_t v99 = *(int *)(v31 + 20);
        uint64_t v100 = (uint64_t)&v29[v99];
        uint64_t v101 = &v30[v99];
        uint64_t v102 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v103 = *(void *)(v102 - 8);
        uint64_t v104 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
        int v105 = v104(v100, 1, v102);
        int v106 = v104((uint64_t)v101, 1, v102);
        if (v105)
        {
          if (!v106)
          {
            uint64_t v107 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v107 - 8) + 16))(v100, v101, v107);
            uint64_t v108 = *(int *)(v102 + 20);
            uint64_t v109 = (uint64_t *)(v100 + v108);
            os_log_t v110 = (uint64_t *)&v101[v108];
            uint64_t v111 = *v110;
            unint64_t v112 = v110[1];
            outlined copy of Data._Representation(*v110, v112);
            *uint64_t v109 = v111;
            v109[1] = v112;
            a1 = v196;
            uint64_t v113 = *(int *)(v102 + 24);
            uint64_t v114 = *(void **)&v101[v113];
            *(void *)(v100 + v113) = v114;
            unint64_t v115 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56);
            id v116 = v114;
            v115(v100, 0, 1, v102);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v106)
          {
            uint64_t v171 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v171 - 8) + 24))(v100, v101, v171);
            uint64_t v172 = *(int *)(v102 + 20);
            unint64_t v173 = (uint64_t *)(v100 + v172);
            uint64_t v174 = (uint64_t *)&v101[v172];
            uint64_t v175 = *v174;
            unint64_t v176 = v174[1];
            outlined copy of Data._Representation(*v174, v176);
            uint64_t v177 = *v173;
            unint64_t v178 = v173[1];
            *unint64_t v173 = v175;
            v173[1] = v176;
            a1 = v196;
            outlined consume of Data._Representation(v177, v178);
            uint64_t v179 = *(int *)(v102 + 24);
            unint64_t v180 = *(void **)&v101[v179];
            unint64_t v181 = *(void **)(v100 + v179);
            *(void *)(v100 + v179) = v180;
            id v182 = v180;

            goto LABEL_31;
          }
          outlined destroy of TetraOutgoingSymmetricRatchet(v100, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v40 = (void *)v100;
        unint64_t v41 = v101;
LABEL_20:
        memcpy(v40, v41, v39);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 24))(v29, v30, v42);
        goto LABEL_49;
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v42);
    }
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v29, v30, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_49;
  }
  if (v35)
  {
LABEL_19:
    size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    uint64_t v40 = v29;
    unint64_t v41 = v30;
    goto LABEL_20;
  }
  uint64_t v36 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v195 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v30, 1, v36))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v29, v30, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v29, v30, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v29, 0, 1, v36);
  }
  uint64_t v47 = *(int *)(v31 + 20);
  uint64_t v48 = &v29[v47];
  id v49 = &v30[v47];
  uint64_t v50 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    uint64_t v53 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v48, v49, v53);
    uint64_t v54 = *(int *)(v50 + 20);
    uint64_t v55 = (uint64_t *)&v48[v54];
    uint64_t v56 = (uint64_t *)&v49[v54];
    uint64_t v57 = *v56;
    unint64_t v58 = v56[1];
    outlined copy of Data._Representation(*v56, v58);
    uint64_t *v55 = v57;
    v55[1] = v58;
    uint64_t v27 = v202;
    uint64_t v59 = *(int *)(v50 + 24);
    uint64_t v60 = *(void **)&v49[v59];
    *(void *)&v48[v59] = v60;
    uint64_t v61 = *(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56);
    id v62 = v60;
    v61(v48, 0, 1, v50);
  }
  a1 = v195;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
LABEL_31:
  uint64_t v63 = v203;
  uint64_t v64 = *(int *)(v27 + 24);
  uint64_t v65 = (char *)v204 + v64;
  uint64_t v66 = &v203[v64];
  uint64_t v67 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v68 = *(void *)(v67 - 8);
  uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
  int v70 = v69(v65, 1, v67);
  int v71 = v69(v66, 1, v67);
  if (!v70)
  {
    if (v71)
    {
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v65, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    uint64_t v77 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v78 = *(void *)(v77 - 8);
    uint64_t v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
    int v80 = v79(v65, 1, v77);
    int v81 = v79(v66, 1, v77);
    if (v80)
    {
      if (!v81)
      {
        (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v65, v66, v77);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v65, 0, 1, v77);
        goto LABEL_55;
      }
    }
    else
    {
      if (!v81)
      {
        (*(void (**)(char *, char *, uint64_t))(v78 + 24))(v65, v66, v77);
LABEL_55:
        uint64_t v118 = *(int *)(v67 + 20);
        uint64_t v119 = &v65[v118];
        uint64_t v120 = &v66[v118];
        uint64_t v121 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v122 = *(void *)(v121 - 8);
        uint64_t v123 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 48);
        int v124 = v123(v119, 1, v121);
        int v125 = v123(v120, 1, v121);
        uint64_t v63 = v203;
        if (v124)
        {
          uint64_t v74 = v202;
          if (!v125)
          {
            uint64_t v126 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 16))(v119, v120, v126);
            uint64_t v127 = *(int *)(v121 + 20);
            uint64_t v128 = (uint64_t *)&v119[v127];
            uint64_t v129 = (uint64_t *)&v120[v127];
            uint64_t v130 = *v129;
            unint64_t v131 = v129[1];
            outlined copy of Data._Representation(*v129, v131);
            *uint64_t v128 = v130;
            v128[1] = v131;
            uint64_t v74 = v202;
            uint64_t v132 = *(int *)(v121 + 24);
            unint64_t v133 = *(void **)&v120[v132];
            *(void *)&v119[v132] = v133;
            uint64_t v134 = *(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56);
            id v135 = v133;
            v134(v119, 0, 1, v121);
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t v74 = v202;
          if (!v125)
          {
            uint64_t v183 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v183 - 8) + 24))(v119, v120, v183);
            uint64_t v184 = *(int *)(v121 + 20);
            uint64_t v185 = (uint64_t *)&v119[v184];
            uint64_t v186 = (uint64_t *)&v120[v184];
            uint64_t v187 = *v186;
            unint64_t v188 = v186[1];
            outlined copy of Data._Representation(*v186, v188);
            uint64_t v189 = *v185;
            unint64_t v190 = v185[1];
            *uint64_t v185 = v187;
            v185[1] = v188;
            uint64_t v74 = v202;
            outlined consume of Data._Representation(v189, v190);
            uint64_t v191 = *(int *)(v121 + 24);
            uint64_t v192 = *(void **)&v120[v191];
            uint64_t v193 = *(void **)&v119[v191];
            *(void *)&v119[v191] = v192;
            id v194 = v192;

            goto LABEL_64;
          }
          outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v119, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v119, v120, *(void *)(*(void *)(v136 - 8) + 64));
        goto LABEL_64;
      }
      (*(void (**)(char *, uint64_t))(v78 + 8))(v65, v77);
    }
    uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v65, v66, *(void *)(*(void *)(v117 - 8) + 64));
    goto LABEL_55;
  }
  if (v71)
  {
LABEL_37:
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v65, v66, *(void *)(*(void *)(v76 - 8) + 64));
    uint64_t v74 = v202;
    goto LABEL_64;
  }
  uint64_t v72 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v73 = *(void *)(v72 - 8);
  uint64_t v74 = v202;
  uint64_t v197 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v66, 1, v72))
  {
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v65, v66, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v65, v66, v72);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v65, 0, 1, v72);
  }
  uint64_t v82 = *(int *)(v67 + 20);
  uint64_t v83 = &v65[v82];
  uint64_t v84 = &v66[v82];
  uint64_t v85 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v86 = *(void *)(v85 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
  {
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
  }
  else
  {
    uint64_t v88 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16))(v83, v84, v88);
    uint64_t v89 = *(int *)(v85 + 20);
    long long v90 = (uint64_t *)&v83[v89];
    uint64_t v91 = (uint64_t *)&v84[v89];
    uint64_t v92 = *v91;
    unint64_t v93 = v91[1];
    outlined copy of Data._Representation(*v91, v93);
    *long long v90 = v92;
    v90[1] = v93;
    uint64_t v74 = v202;
    uint64_t v94 = *(int *)(v85 + 24);
    uint64_t v95 = *(void **)&v84[v94];
    *(void *)&v83[v94] = v95;
    uint64_t v96 = *(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56);
    id v97 = v95;
    v96(v83, 0, 1, v85);
  }
  a1 = v197;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  uint64_t v63 = v203;
LABEL_64:
  uint64_t v137 = *(int *)(v74 + 28);
  uint64_t v138 = (void *)((char *)v204 + v137);
  uint64_t v139 = (uint64_t *)&v63[v137];
  unint64_t v140 = *(void *)&v63[v137 + 8];
  if (*(void *)((char *)v204 + v137 + 8) >> 60 == 15)
  {
    if (v140 >> 60 != 15)
    {
      uint64_t v141 = *v139;
      outlined copy of Data._Representation(*v139, v140);
      *uint64_t v138 = v141;
      v138[1] = v140;
      goto LABEL_71;
    }
    goto LABEL_69;
  }
  if (v140 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v138);
LABEL_69:
    *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
    goto LABEL_71;
  }
  uint64_t v142 = *v139;
  outlined copy of Data._Representation(*v139, v140);
  uint64_t v143 = *v138;
  unint64_t v144 = v138[1];
  *uint64_t v138 = v142;
  v138[1] = v140;
  outlined consume of Data._Representation(v143, v144);
LABEL_71:
  uint64_t v145 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v146 = (char *)v204 + v145;
  uint64_t v147 = &v63[v145];
  uint64_t v148 = type metadata accessor for SymmetricRatchet();
  uint64_t v149 = *(void *)(v148 - 8);
  uint64_t v150 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v149 + 48);
  int v151 = v150(v146, 1, v148);
  int v152 = v150(v147, 1, v148);
  if (v151)
  {
    if (!v152)
    {
      (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v146, v147, v199);
      uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v146[*(int *)(v153 + 48)] = *(void *)&v147[*(int *)(v153 + 48)];
      *(void *)&v146[*(int *)(v148 + 20)] = *(void *)&v147[*(int *)(v148 + 20)];
      uint64_t v154 = *(int *)(v148 + 24);
      uint64_t v155 = &v146[v154];
      uint64_t v156 = &v147[v154];
      uint64_t v157 = *(void *)&v147[v154 + 24];
      *((void *)v155 + 3) = v157;
      *((void *)v155 + 4) = *((void *)v156 + 4);
      uint64_t v158 = **(void (***)(char *, char *, uint64_t))(v157 - 8);
      swift_bridgeObjectRetain();
      v158(v155, v156, v157);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v146, 0, 1, v148);
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  if (v152)
  {
    outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v146, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
LABEL_76:
    uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v146, v147, *(void *)(*(void *)(v159 - 8) + 64));
    goto LABEL_77;
  }
  (*(void (**)(char *, char *, uint64_t))(v198 + 24))(v146, v147, v199);
  uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)&v146[*(int *)(v170 + 48)] = *(void *)&v147[*(int *)(v170 + 48)];
  *(void *)&v146[*(int *)(v148 + 20)] = *(void *)&v147[*(int *)(v148 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)&v146[*(int *)(v148 + 24)], (uint64_t *)&v147[*(int *)(v148 + 24)]);
LABEL_77:
  *(_DWORD *)&a1[*(int *)(v200 + 28)] = *(_DWORD *)&v201[*(int *)(v200 + 28)];
  uint64_t v160 = *(int *)(v200 + 32);
  uint64_t v161 = &a1[v160];
  uint64_t v162 = &v201[v160];
  uint64_t v163 = type metadata accessor for Date();
  uint64_t v164 = *(void *)(v163 - 8);
  uint64_t v165 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v164 + 48);
  int v166 = v165(v161, 1, v163);
  int v167 = v165(v162, 1, v163);
  if (!v166)
  {
    if (!v167)
    {
      (*(void (**)(char *, char *, uint64_t))(v164 + 24))(v161, v162, v163);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v164 + 8))(v161, v163);
    goto LABEL_82;
  }
  if (v167)
  {
LABEL_82:
    uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v161, v162, *(void *)(*(void *)(v168 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v161, v162, v163);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
  return a1;
}

char *initializeWithTake for TetraRatchetState(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v69 = v7;
  uint64_t v70 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v12 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v13 = &v10[v12];
  uint64_t v14 = &v11[v12];
  uint64_t v15 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  uint64_t v22 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    int v71 = a1;
    uint64_t v73 = v18;
    uint64_t v25 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v75 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v20, v21, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
    }
    uint64_t v28 = *(int *)(v22 + 20);
    uint64_t v29 = &v20[v28];
    uint64_t v30 = &v21[v28];
    uint64_t v31 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      uint64_t v34 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v29, v30, v34);
      *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
      *(void *)&v29[*(int *)(v31 + 24)] = *(void *)&v30[*(int *)(v31 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    uint64_t v18 = v73;
    a3 = v75;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    a1 = v71;
  }
  uint64_t v35 = v18[6];
  uint64_t v36 = &v10[v35];
  uint64_t v37 = &v11[v35];
  uint64_t v38 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v72 = a1;
    uint64_t v74 = v18;
    uint64_t v41 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v76 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v37, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v36, v37, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v36, v37, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v36, 0, 1, v41);
    }
    uint64_t v44 = *(int *)(v38 + 20);
    int v45 = &v36[v44];
    int v46 = &v37[v44];
    uint64_t v47 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      uint64_t v50 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v45, v46, v50);
      *(_OWORD *)&v45[*(int *)(v47 + 20)] = *(_OWORD *)&v46[*(int *)(v47 + 20)];
      *(void *)&v45[*(int *)(v47 + 24)] = *(void *)&v46[*(int *)(v47 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    uint64_t v18 = v74;
    a3 = v76;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    a1 = v72;
  }
  *(_OWORD *)&v10[v18[7]] = *(_OWORD *)&v11[v18[7]];
  uint64_t v51 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v52 = &v10[v51];
  uint64_t v53 = &v11[v51];
  uint64_t v54 = type metadata accessor for SymmetricRatchet();
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v52, v53, v70);
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v52[*(int *)(v57 + 48)] = *(void *)&v53[*(int *)(v57 + 48)];
    *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
    uint64_t v58 = *(int *)(v54 + 24);
    uint64_t v59 = &v52[v58];
    uint64_t v60 = &v53[v58];
    long long v61 = *((_OWORD *)v60 + 1);
    *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
    *((_OWORD *)v59 + 1) = v61;
    *((void *)v59 + 4) = *((void *)v60 + 4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  uint64_t v62 = a3[8];
  *(_DWORD *)&a1[a3[7]] = *(_DWORD *)&a2[a3[7]];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = type metadata accessor for Date();
  uint64_t v66 = *(void *)(v65 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
  {
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v63, v64, v65);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  }
  return a1;
}

char *assignWithTake for TetraRatchetState(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  uint64_t v144 = v7;
  uint64_t v145 = v6;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v146 = a3;
  uint64_t v147 = a2;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void **)&a1[v12];
  *(void *)uint64_t v13 = *(void *)v14;

  uint64_t v16 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v17 = &v13[v16];
  uint64_t v18 = &v14[v16];
  uint64_t v19 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  uint64_t v148 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v25 = v148[5];
  uint64_t v26 = &v13[v25];
  uint64_t v27 = &v14[v25];
  uint64_t v28 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v26, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    uint64_t v39 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v142 = *(void *)(v39 - 8);
    uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v142 + 48);
    int v41 = v40(v26, 1, v39);
    int v42 = v40(v27, 1, v39);
    if (v41)
    {
      if (!v42)
      {
        (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v26, v27, v39);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v26, 0, 1, v39);
LABEL_70:
        uint64_t v111 = *(int *)(v28 + 20);
        uint64_t v112 = (uint64_t)&v26[v111];
        uint64_t v113 = &v27[v111];
        uint64_t v114 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v115 = *(void *)(v114 - 8);
        id v116 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        int v117 = v116(v112, 1, v114);
        int v118 = v116((uint64_t)v113, 1, v114);
        if (v117)
        {
          if (!v118)
          {
            uint64_t v119 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v119 - 8) + 32))(v112, v113, v119);
            *(_OWORD *)(v112 + *(int *)(v114 + 20)) = *(_OWORD *)&v113[*(int *)(v114 + 20)];
            *(void *)(v112 + *(int *)(v114 + 24)) = *(void *)&v113[*(int *)(v114 + 24)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v118)
          {
            uint64_t v130 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v130 - 8) + 40))(v112, v113, v130);
            uint64_t v131 = *(int *)(v114 + 20);
            uint64_t v132 = *(void *)(v112 + v131);
            unint64_t v133 = *(void *)(v112 + v131 + 8);
            *(_OWORD *)(v112 + v131) = *(_OWORD *)&v113[v131];
            outlined consume of Data._Representation(v132, v133);
            uint64_t v134 = *(int *)(v114 + 24);
            id v135 = *(void **)(v112 + v134);
            *(void *)(v112 + v134) = *(void *)&v113[v134];

            goto LABEL_31;
          }
          outlined destroy of TetraOutgoingSymmetricRatchet(v112, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v37 = (void *)v112;
        uint64_t v38 = v113;
LABEL_20:
        memcpy(v37, v38, v36);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v42)
      {
        (*(void (**)(char *, char *, uint64_t))(v142 + 40))(v26, v27, v39);
        goto LABEL_70;
      }
      (*(void (**)(char *, uint64_t))(v142 + 8))(v26, v39);
    }
    uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v26, v27, *(void *)(*(void *)(v110 - 8) + 64));
    goto LABEL_70;
  }
  if (v32)
  {
LABEL_19:
    size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    uint64_t v37 = v26;
    uint64_t v38 = v27;
    goto LABEL_20;
  }
  uint64_t v33 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v27, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v26, v27, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v26, v27, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v26, 0, 1, v33);
  }
  uint64_t v43 = *(int *)(v28 + 20);
  uint64_t v44 = &v26[v43];
  int v45 = &v27[v43];
  uint64_t v46 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    uint64_t v49 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v44, v45, v49);
    *(_OWORD *)&v44[*(int *)(v46 + 20)] = *(_OWORD *)&v45[*(int *)(v46 + 20)];
    *(void *)&v44[*(int *)(v46 + 24)] = *(void *)&v45[*(int *)(v46 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_31:
  uint64_t v50 = v148[6];
  uint64_t v51 = &v13[v50];
  uint64_t v52 = &v14[v50];
  uint64_t v53 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (v57)
    {
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v51, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    uint64_t v64 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v143 = *(void *)(v64 - 8);
    uint64_t v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 48);
    int v66 = v65(v51, 1, v64);
    int v67 = v65(v52, 1, v64);
    if (v66)
    {
      if (!v67)
      {
        (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v51, v52, v64);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v51, 0, 1, v64);
LABEL_76:
        uint64_t v121 = *(int *)(v53 + 20);
        uint64_t v122 = (uint64_t)&v51[v121];
        uint64_t v123 = &v52[v121];
        uint64_t v124 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v125 = *(void *)(v124 - 8);
        uint64_t v126 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
        int v127 = v126(v122, 1, v124);
        int v128 = v126((uint64_t)v123, 1, v124);
        if (v127)
        {
          if (!v128)
          {
            uint64_t v129 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v129 - 8) + 32))(v122, v123, v129);
            *(_OWORD *)(v122 + *(int *)(v124 + 20)) = *(_OWORD *)&v123[*(int *)(v124 + 20)];
            *(void *)(v122 + *(int *)(v124 + 24)) = *(void *)&v123[*(int *)(v124 + 24)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v128)
          {
            uint64_t v136 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v136 - 8) + 40))(v122, v123, v136);
            uint64_t v137 = *(int *)(v124 + 20);
            uint64_t v138 = *(void *)(v122 + v137);
            unint64_t v139 = *(void *)(v122 + v137 + 8);
            *(_OWORD *)(v122 + v137) = *(_OWORD *)&v123[v137];
            outlined consume of Data._Representation(v138, v139);
            uint64_t v140 = *(int *)(v124 + 24);
            uint64_t v141 = *(void **)(v122 + v140);
            *(void *)(v122 + v140) = *(void *)&v123[v140];

            goto LABEL_47;
          }
          outlined destroy of TetraOutgoingSymmetricRatchet(v122, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        size_t v61 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v62 = (void *)v122;
        uint64_t v63 = v123;
LABEL_38:
        memcpy(v62, v63, v61);
        goto LABEL_47;
      }
    }
    else
    {
      if (!v67)
      {
        (*(void (**)(char *, char *, uint64_t))(v143 + 40))(v51, v52, v64);
        goto LABEL_76;
      }
      (*(void (**)(char *, uint64_t))(v143 + 8))(v51, v64);
    }
    uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v51, v52, *(void *)(*(void *)(v120 - 8) + 64));
    goto LABEL_76;
  }
  if (v57)
  {
LABEL_37:
    size_t v61 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    uint64_t v62 = v51;
    uint64_t v63 = v52;
    goto LABEL_38;
  }
  uint64_t v58 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v59 = *(void *)(v58 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v52, 1, v58))
  {
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v51, v52, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v51, v52, v58);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v51, 0, 1, v58);
  }
  uint64_t v68 = *(int *)(v53 + 20);
  uint64_t v69 = &v51[v68];
  uint64_t v70 = &v52[v68];
  uint64_t v71 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v72 = *(void *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    uint64_t v74 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32))(v69, v70, v74);
    *(_OWORD *)&v69[*(int *)(v71 + 20)] = *(_OWORD *)&v70[*(int *)(v71 + 20)];
    *(void *)&v69[*(int *)(v71 + 24)] = *(void *)&v70[*(int *)(v71 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_47:
  uint64_t v75 = v148[7];
  uint64_t v76 = (uint64_t)&v13[v75];
  uint64_t v77 = &v14[v75];
  unint64_t v78 = *(void *)&v13[v75 + 8];
  if (v78 >> 60 == 15)
  {
LABEL_50:
    *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
    goto LABEL_52;
  }
  unint64_t v79 = *((void *)v77 + 1);
  if (v79 >> 60 == 15)
  {
    outlined destroy of Data(v76);
    goto LABEL_50;
  }
  uint64_t v80 = *(void *)v76;
  *(void *)uint64_t v76 = *(void *)v77;
  *(void *)(v76 + 8) = v79;
  outlined consume of Data._Representation(v80, v78);
LABEL_52:
  uint64_t v81 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v82 = &v13[v81];
  uint64_t v83 = &v14[v81];
  uint64_t v84 = type metadata accessor for SymmetricRatchet();
  uint64_t v85 = *(void *)(v84 - 8);
  uint64_t v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48);
  int v87 = v86(v82, 1, v84);
  int v88 = v86(v83, 1, v84);
  if (v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v82, v83, v145);
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v82[*(int *)(v89 + 48)] = *(void *)&v83[*(int *)(v89 + 48)];
      *(void *)&v82[*(int *)(v84 + 20)] = *(void *)&v83[*(int *)(v84 + 20)];
      uint64_t v90 = *(int *)(v84 + 24);
      uint64_t v91 = &v82[v90];
      uint64_t v92 = &v83[v90];
      long long v93 = *((_OWORD *)v92 + 1);
      *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
      *((_OWORD *)v91 + 1) = v93;
      *((void *)v91 + 4) = *((void *)v92 + 4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v88)
  {
    outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
LABEL_57:
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v82, v83, *(void *)(*(void *)(v94 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(char *, char *, uint64_t))(v144 + 40))(v82, v83, v145);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)&v82[*(int *)(v105 + 48)] = *(void *)&v83[*(int *)(v105 + 48)];
  *(void *)&v82[*(int *)(v84 + 20)] = *(void *)&v83[*(int *)(v84 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v106 = *(int *)(v84 + 24);
  uint64_t v107 = &v82[v106];
  uint64_t v108 = &v83[v106];
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v82[v106]);
  long long v109 = *((_OWORD *)v108 + 1);
  *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
  *((_OWORD *)v107 + 1) = v109;
  *((void *)v107 + 4) = *((void *)v108 + 4);
LABEL_58:
  uint64_t v95 = *(int *)(v146 + 32);
  *(_DWORD *)&a1[*(int *)(v146 + 28)] = *(_DWORD *)&v147[*(int *)(v146 + 28)];
  uint64_t v96 = &a1[v95];
  id v97 = &v147[v95];
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v98 - 8);
  uint64_t v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
  int v101 = v100(v96, 1, v98);
  int v102 = v100(v97, 1, v98);
  if (!v101)
  {
    if (!v102)
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 40))(v96, v97, v98);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v99 + 8))(v96, v98);
    goto LABEL_63;
  }
  if (v102)
  {
LABEL_63:
    uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v96, v97, *(void *)(*(void *)(v103 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v96, v97, v98);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraRatchetState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216460EC8);
}

uint64_t sub_216460EC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[6];
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[8];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for TetraRatchetState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_216461064);
}

uint64_t sub_216461064(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[6];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[8];
  return v16(v18, a2, a2, v17);
}

void type metadata completion function for TetraRatchetState()
{
  type metadata accessor for Kyber768.PublicKey?(319, &lazy cache variable for type metadata for SymmetricKey?, MEMORY[0x263F04620]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TetraOutgoingSymmetricRatchet(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Kyber768.PublicKey?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void **initializeBufferWithCopyOfBuffer for TetraOutgoingKeyContent(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    uint64_t v9 = (char *)v7 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    uint64_t v14 = v4;
    if (v13(v10, 1, v11))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[5];
    uint64_t v17 = (char *)v7 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for TetraKEM768Key(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = type metadata accessor for Kyber768.PrivateKey();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v18, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v17, 0, 1, v22);
      }
      uint64_t v25 = *(int *)(v19 + 20);
      uint64_t v26 = &v17[v25];
      uint64_t v27 = &v18[v25];
      uint64_t v28 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v31 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v26, v27, v31);
        uint64_t v32 = *(int *)(v28 + 20);
        uint64_t v72 = v26;
        uint64_t v74 = v29;
        uint64_t v33 = (uint64_t *)&v26[v32];
        uint64_t v34 = (uint64_t *)&v27[v32];
        uint64_t v76 = v20;
        uint64_t v35 = *v34;
        unint64_t v36 = v34[1];
        outlined copy of Data._Representation(*v34, v36);
        uint64_t *v33 = v35;
        v33[1] = v36;
        uint64_t v20 = v76;
        uint64_t v37 = *(int *)(v28 + 24);
        uint64_t v38 = *(void **)&v27[v37];
        *(void *)&v72[v37] = v38;
        uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56);
        id v40 = v38;
        v39(v72, 0, 1, v28);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v41 = a3[6];
    int v42 = (char *)v7 + v41;
    uint64_t v43 = (char *)a2 + v41;
    uint64_t v44 = type metadata accessor for TetraKEM1024Key(0);
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      uint64_t v47 = type metadata accessor for Kyber1024.PrivateKey();
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v43, 1, v47))
      {
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v42, v43, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v42, v43, v47);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v42, 0, 1, v47);
      }
      uint64_t v50 = *(int *)(v44 + 20);
      uint64_t v51 = &v42[v50];
      uint64_t v52 = &v43[v50];
      uint64_t v53 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      uint64_t v54 = *(void *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        uint64_t v56 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v51, v52, v56);
        uint64_t v57 = *(int *)(v53 + 20);
        uint64_t v73 = v51;
        uint64_t v75 = v54;
        uint64_t v58 = (uint64_t *)&v51[v57];
        uint64_t v59 = (uint64_t *)&v52[v57];
        uint64_t v77 = v45;
        uint64_t v60 = *v59;
        unint64_t v61 = v59[1];
        outlined copy of Data._Representation(*v59, v61);
        *uint64_t v58 = v60;
        v58[1] = v61;
        uint64_t v45 = v77;
        uint64_t v62 = *(int *)(v53 + 24);
        uint64_t v63 = *(void **)&v52[v62];
        *(void *)&v73[v62] = v63;
        uint64_t v64 = *(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56);
        id v65 = v63;
        v64(v73, 0, 1, v53);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    uint64_t v66 = a3[7];
    int v67 = (char *)v7 + v66;
    uint64_t v68 = (char *)a2 + v66;
    unint64_t v69 = *((void *)v68 + 1);
    if (v69 >> 60 == 15)
    {
      *(_OWORD *)int v67 = *(_OWORD *)v68;
    }
    else
    {
      uint64_t v70 = *(void *)v68;
      outlined copy of Data._Representation(*(void *)v68, *((void *)v68 + 1));
      *(void *)int v67 = v70;
      *((void *)v67 + 1) = v69;
    }
  }
  return v7;
}

void destroy for TetraOutgoingKeyContent(id *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v5 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = (char *)a1 + a2[5];
  uint64_t v8 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9)) {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    }
    uint64_t v11 = &v7[*(int *)(v8 + 20)];
    uint64_t v12 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
    {
      uint64_t v13 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);
      outlined consume of Data._Representation(*(void *)&v11[*(int *)(v12 + 20)], *(void *)&v11[*(int *)(v12 + 20) + 8]);
    }
  }
  uint64_t v14 = (char *)a1 + a2[6];
  uint64_t v15 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    uint64_t v16 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v17 = *(void *)(v16 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16)) {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    }
    uint64_t v18 = &v14[*(int *)(v15 + 20)];
    uint64_t v19 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19))
    {
      uint64_t v20 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v18, v20);
      outlined consume of Data._Representation(*(void *)&v18[*(int *)(v19 + 20)], *(void *)&v18[*(int *)(v19 + 20) + 8]);
    }
  }
  uint64_t v21 = (uint64_t *)((char *)a1 + a2[7]);
  unint64_t v22 = v21[1];
  if (v22 >> 60 != 15)
  {
    uint64_t v23 = *v21;
    outlined consume of Data._Representation(v23, v22);
  }
}

void **initializeWithCopy for TetraOutgoingKeyContent(void **a1, void **a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)v4 + v7;
  uint64_t v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v6;
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = a3[5];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)v4 + v15;
  uint64_t v18 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v17, 1, v21))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v16, v17, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
    }
    uint64_t v24 = *(int *)(v18 + 20);
    uint64_t v25 = &v16[v24];
    uint64_t v26 = &v17[v24];
    uint64_t v27 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v30 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v25, v26, v30);
      uint64_t v31 = *(int *)(v27 + 20);
      uint64_t v73 = v4;
      uint64_t v75 = v19;
      uint64_t v32 = (uint64_t *)&v25[v31];
      uint64_t v33 = (uint64_t *)&v26[v31];
      uint64_t v34 = v28;
      uint64_t v77 = a3;
      uint64_t v35 = *v33;
      unint64_t v36 = v33[1];
      outlined copy of Data._Representation(*v33, v36);
      *uint64_t v32 = v35;
      v32[1] = v36;
      a3 = v77;
      uint64_t v37 = *(int *)(v27 + 24);
      uint64_t v38 = *(void **)&v26[v37];
      *(void *)&v25[v37] = v38;
      uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
      id v40 = v38;
      v39(v25, 0, 1, v27);
      uint64_t v4 = v73;
      uint64_t v19 = v75;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v41 = a3[6];
  int v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)v4 + v41;
  uint64_t v44 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    uint64_t v47 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v43, 1, v47))
    {
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v42, v43, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v42, v43, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v42, 0, 1, v47);
    }
    uint64_t v50 = *(int *)(v44 + 20);
    uint64_t v51 = &v42[v50];
    uint64_t v52 = &v43[v50];
    uint64_t v53 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      uint64_t v56 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v51, v52, v56);
      uint64_t v57 = *(int *)(v53 + 20);
      uint64_t v74 = v51;
      uint64_t v76 = v45;
      uint64_t v58 = (uint64_t *)&v51[v57];
      uint64_t v59 = (uint64_t *)&v52[v57];
      uint64_t v60 = v54;
      unint64_t v78 = a3;
      uint64_t v61 = *v59;
      unint64_t v62 = v59[1];
      outlined copy of Data._Representation(*v59, v62);
      *uint64_t v58 = v61;
      v58[1] = v62;
      a3 = v78;
      uint64_t v63 = *(int *)(v53 + 24);
      uint64_t v64 = *(void **)&v52[v63];
      *(void *)&v74[v63] = v64;
      id v65 = *(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56);
      id v66 = v64;
      v65(v74, 0, 1, v53);
      uint64_t v45 = v76;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  uint64_t v67 = a3[7];
  uint64_t v68 = (char *)a1 + v67;
  unint64_t v69 = (char *)v4 + v67;
  unint64_t v70 = *((void *)v69 + 1);
  if (v70 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
  }
  else
  {
    uint64_t v71 = *(void *)v69;
    outlined copy of Data._Representation(*(void *)v69, *((void *)v69 + 1));
    *(void *)uint64_t v68 = v71;
    *((void *)v68 + 1) = v70;
  }
  return a1;
}

void **assignWithCopy for TetraOutgoingKeyContent(void **a1, void **a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  id v8 = v7;

  uint64_t v9 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v163 = a1;
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)v4 + v9;
  uint64_t v12 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = a3[5];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)v4 + v18;
  uint64_t v21 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (v25)
    {
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v19, type metadata accessor for TetraKEM768Key);
      goto LABEL_13;
    }
    uint64_t v32 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    int v35 = v34(v19, 1, v32);
    int v36 = v34(v20, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v19, v20, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v19, 0, 1, v32);
LABEL_51:
        uint64_t v98 = *(int *)(v21 + 20);
        uint64_t v99 = (uint64_t)&v19[v98];
        uint64_t v100 = &v20[v98];
        uint64_t v101 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v102 = *(void *)(v101 - 8);
        uint64_t v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
        int v104 = v103(v99, 1, v101);
        int v105 = v103((uint64_t)v100, 1, v101);
        if (v104)
        {
          if (!v105)
          {
            uint64_t v106 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v99, v100, v106);
            uint64_t v107 = *(int *)(v101 + 20);
            uint64_t v108 = (uint64_t *)(v99 + v107);
            long long v109 = (uint64_t *)&v100[v107];
            uint64_t v110 = *v109;
            unint64_t v111 = v109[1];
            outlined copy of Data._Representation(*v109, v111);
            *uint64_t v108 = v110;
            v108[1] = v111;
            uint64_t v112 = *(int *)(v101 + 24);
            uint64_t v113 = *(void **)&v100[v112];
            *(void *)(v99 + v112) = v113;
            uint64_t v114 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v102 + 56);
            id v115 = v113;
            v114(v99, 0, 1, v101);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v105)
          {
            uint64_t v135 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v135 - 8) + 24))(v99, v100, v135);
            uint64_t v136 = *(int *)(v101 + 20);
            uint64_t v137 = (uint64_t *)(v99 + v136);
            uint64_t v138 = (uint64_t *)&v100[v136];
            uint64_t v139 = *v138;
            unint64_t v140 = v138[1];
            outlined copy of Data._Representation(*v138, v140);
            uint64_t v141 = *v137;
            unint64_t v142 = v137[1];
            *uint64_t v137 = v139;
            v137[1] = v140;
            outlined consume of Data._Representation(v141, v142);
            uint64_t v143 = *(int *)(v101 + 24);
            uint64_t v144 = *(void **)&v100[v143];
            uint64_t v145 = *(void **)(v99 + v143);
            *(void *)(v99 + v143) = v144;
            id v146 = v144;

            goto LABEL_24;
          }
          outlined destroy of TetraOutgoingSymmetricRatchet(v99, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v30 = (void *)v99;
        uint64_t v31 = v100;
LABEL_14:
        memcpy(v30, v31, v29);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v19, v20, v32);
        goto LABEL_51;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v32);
    }
    uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v19, v20, *(void *)(*(void *)(v97 - 8) + 64));
    goto LABEL_51;
  }
  if (v25)
  {
LABEL_13:
    size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    uint64_t v30 = v19;
    uint64_t v31 = v20;
    goto LABEL_14;
  }
  uint64_t v26 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v20, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v19, v20, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v19, v20, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v19, 0, 1, v26);
  }
  uint64_t v37 = *(int *)(v21 + 20);
  uint64_t v38 = &v19[v37];
  uint64_t v39 = &v20[v37];
  uint64_t v40 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v43 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v38, v39, v43);
    uint64_t v44 = *(int *)(v40 + 20);
    uint64_t v45 = (uint64_t *)&v38[v44];
    uint64_t v46 = (uint64_t *)&v39[v44];
    uint64_t v159 = v4;
    uint64_t v161 = a3;
    uint64_t v47 = *v46;
    unint64_t v48 = v46[1];
    outlined copy of Data._Representation(*v46, v48);
    uint64_t *v45 = v47;
    v45[1] = v48;
    uint64_t v4 = v159;
    a3 = v161;
    uint64_t v49 = *(int *)(v40 + 24);
    uint64_t v50 = *(void **)&v39[v49];
    *(void *)&v38[v49] = v50;
    uint64_t v51 = *(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56);
    id v52 = v50;
    v51(v38, 0, 1, v40);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_24:
  uint64_t v53 = a3[6];
  uint64_t v54 = (char *)v163 + v53;
  uint64_t v55 = (char *)v4 + v53;
  uint64_t v56 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (v60)
    {
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v54, type metadata accessor for TetraKEM1024Key);
      goto LABEL_30;
    }
    uint64_t v67 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v68 = *(void *)(v67 - 8);
    unint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
    int v70 = v69(v54, 1, v67);
    int v71 = v69(v55, 1, v67);
    if (v70)
    {
      if (!v71)
      {
        (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v54, v55, v67);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v54, 0, 1, v67);
LABEL_57:
        uint64_t v117 = *(int *)(v56 + 20);
        uint64_t v118 = (uint64_t)&v54[v117];
        uint64_t v119 = &v55[v117];
        uint64_t v120 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v121 = *(void *)(v120 - 8);
        uint64_t v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
        int v123 = v122(v118, 1, v120);
        int v124 = v122((uint64_t)v119, 1, v120);
        if (v123)
        {
          if (!v124)
          {
            uint64_t v125 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v125 - 8) + 16))(v118, v119, v125);
            uint64_t v126 = *(int *)(v120 + 20);
            int v127 = (uint64_t *)(v118 + v126);
            int v128 = (uint64_t *)&v119[v126];
            uint64_t v129 = *v128;
            unint64_t v130 = v128[1];
            outlined copy of Data._Representation(*v128, v130);
            *int v127 = v129;
            v127[1] = v130;
            uint64_t v131 = *(int *)(v120 + 24);
            uint64_t v132 = *(void **)&v119[v131];
            *(void *)(v118 + v131) = v132;
            unint64_t v133 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v121 + 56);
            id v134 = v132;
            v133(v118, 0, 1, v120);
            goto LABEL_40;
          }
        }
        else
        {
          if (!v124)
          {
            uint64_t v147 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v147 - 8) + 24))(v118, v119, v147);
            uint64_t v148 = *(int *)(v120 + 20);
            uint64_t v149 = (uint64_t *)(v118 + v148);
            uint64_t v150 = (uint64_t *)&v119[v148];
            uint64_t v151 = *v150;
            unint64_t v152 = v150[1];
            outlined copy of Data._Representation(*v150, v152);
            uint64_t v153 = *v149;
            unint64_t v154 = v149[1];
            uint64_t *v149 = v151;
            v149[1] = v152;
            outlined consume of Data._Representation(v153, v154);
            uint64_t v155 = *(int *)(v120 + 24);
            uint64_t v156 = *(void **)&v119[v155];
            uint64_t v157 = *(void **)(v118 + v155);
            *(void *)(v118 + v155) = v156;
            id v158 = v156;

            goto LABEL_40;
          }
          outlined destroy of TetraOutgoingSymmetricRatchet(v118, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        size_t v64 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        id v65 = (void *)v118;
        id v66 = v119;
LABEL_31:
        memcpy(v65, v66, v64);
        goto LABEL_40;
      }
    }
    else
    {
      if (!v71)
      {
        (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v54, v55, v67);
        goto LABEL_57;
      }
      (*(void (**)(char *, uint64_t))(v68 + 8))(v54, v67);
    }
    uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v54, v55, *(void *)(*(void *)(v116 - 8) + 64));
    goto LABEL_57;
  }
  if (v60)
  {
LABEL_30:
    size_t v64 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    id v65 = v54;
    id v66 = v55;
    goto LABEL_31;
  }
  uint64_t v61 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v55, 1, v61))
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v54, v55, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v54, v55, v61);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v54, 0, 1, v61);
  }
  uint64_t v72 = *(int *)(v56 + 20);
  uint64_t v73 = &v54[v72];
  uint64_t v74 = &v55[v72];
  uint64_t v75 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    uint64_t v78 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v73, v74, v78);
    uint64_t v79 = *(int *)(v75 + 20);
    uint64_t v80 = (uint64_t *)&v73[v79];
    uint64_t v81 = (uint64_t *)&v74[v79];
    uint64_t v160 = v4;
    uint64_t v162 = a3;
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    outlined copy of Data._Representation(*v81, v83);
    *uint64_t v80 = v82;
    v80[1] = v83;
    uint64_t v4 = v160;
    a3 = v162;
    uint64_t v84 = *(int *)(v75 + 24);
    uint64_t v85 = *(void **)&v74[v84];
    *(void *)&v73[v84] = v85;
    uint64_t v86 = *(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56);
    id v87 = v85;
    v86(v73, 0, 1, v75);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_40:
  uint64_t v88 = a3[7];
  uint64_t v89 = (uint64_t *)((char *)v163 + v88);
  uint64_t v90 = (uint64_t *)((char *)v4 + v88);
  unint64_t v91 = *(unint64_t *)((char *)v4 + v88 + 8);
  if (*(unint64_t *)((char *)v163 + v88 + 8) >> 60 != 15)
  {
    if (v91 >> 60 != 15)
    {
      uint64_t v93 = *v90;
      outlined copy of Data._Representation(v93, v91);
      uint64_t v94 = *v89;
      unint64_t v95 = v89[1];
      uint64_t *v89 = v93;
      v89[1] = v91;
      outlined consume of Data._Representation(v94, v95);
      return v163;
    }
    outlined destroy of Data((uint64_t)v89);
    goto LABEL_45;
  }
  if (v91 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
    return v163;
  }
  uint64_t v92 = *v90;
  outlined copy of Data._Representation(v92, v91);
  uint64_t *v89 = v92;
  v89[1] = v91;
  return v163;
}

void *initializeWithTake for TetraOutgoingKeyContent(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[5];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v14, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
    }
    uint64_t v21 = *(int *)(v15 + 20);
    uint64_t v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    uint64_t v24 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v22, v23, v27);
      *(_OWORD *)&v22[*(int *)(v24 + 20)] = *(_OWORD *)&v23[*(int *)(v24 + 20)];
      *(void *)&v22[*(int *)(v24 + 24)] = *(void *)&v23[*(int *)(v24 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v28 = a3[6];
  size_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    uint64_t v34 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v30, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v29, v30, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v29, 0, 1, v34);
    }
    uint64_t v37 = *(int *)(v31 + 20);
    uint64_t v38 = &v29[v37];
    uint64_t v39 = &v30[v37];
    uint64_t v40 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      uint64_t v43 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v38, v39, v43);
      *(_OWORD *)&v38[*(int *)(v40 + 20)] = *(_OWORD *)&v39[*(int *)(v40 + 20)];
      *(void *)&v38[*(int *)(v40 + 24)] = *(void *)&v39[*(int *)(v40 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

void **assignWithTake for TetraOutgoingKeyContent(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  uint64_t v110 = a2;
  if (!v22)
  {
    if (v23)
    {
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v17, type metadata accessor for TetraKEM768Key);
      goto LABEL_13;
    }
    uint64_t v30 = a3;
    uint64_t v31 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
    int v34 = v33(v17, 1, v31);
    int v35 = v33(v18, 1, v31);
    if (v34)
    {
      if (!v35)
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v17, v18, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v17, 0, 1, v31);
LABEL_49:
        uint64_t v78 = *(int *)(v19 + 20);
        uint64_t v79 = (uint64_t)&v17[v78];
        uint64_t v80 = &v18[v78];
        uint64_t v81 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v82 = *(void *)(v81 - 8);
        unint64_t v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
        int v84 = v83(v79, 1, v81);
        int v85 = v83((uint64_t)v80, 1, v81);
        a3 = v30;
        if (v84)
        {
          if (!v85)
          {
            uint64_t v86 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v79, v80, v86);
            *(_OWORD *)(v79 + *(int *)(v81 + 20)) = *(_OWORD *)&v80[*(int *)(v81 + 20)];
            *(void *)(v79 + *(int *)(v81 + 24)) = *(void *)&v80[*(int *)(v81 + 24)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v85)
          {
            uint64_t v98 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v98 - 8) + 40))(v79, v80, v98);
            uint64_t v99 = *(int *)(v81 + 20);
            uint64_t v100 = *(void *)(v79 + v99);
            unint64_t v101 = *(void *)(v79 + v99 + 8);
            *(_OWORD *)(v79 + v99) = *(_OWORD *)&v80[v99];
            outlined consume of Data._Representation(v100, v101);
            uint64_t v102 = *(int *)(v81 + 24);
            uint64_t v103 = *(void **)(v79 + v102);
            *(void *)(v79 + v102) = *(void *)&v80[v102];

            goto LABEL_24;
          }
          outlined destroy of TetraOutgoingSymmetricRatchet(v79, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v28 = (void *)v79;
        size_t v29 = v80;
LABEL_14:
        memcpy(v28, v29, v27);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v35)
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v17, v18, v31);
        goto LABEL_49;
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v31);
    }
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v17, v18, *(void *)(*(void *)(v77 - 8) + 64));
    goto LABEL_49;
  }
  if (v23)
  {
LABEL_13:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    uint64_t v28 = v17;
    size_t v29 = v18;
    goto LABEL_14;
  }
  uint64_t v24 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v18, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v17, v18, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v17, v18, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v17, 0, 1, v24);
  }
  uint64_t v36 = *(int *)(v19 + 20);
  uint64_t v37 = &v17[v36];
  uint64_t v38 = &v18[v36];
  uint64_t v39 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    uint64_t v42 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v37, v38, v42);
    *(_OWORD *)&v37[*(int *)(v39 + 20)] = *(_OWORD *)&v38[*(int *)(v39 + 20)];
    *(void *)&v37[*(int *)(v39 + 24)] = *(void *)&v38[*(int *)(v39 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_24:
  uint64_t v43 = a3;
  uint64_t v44 = *(int *)(a3 + 24);
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)v110 + v44;
  uint64_t v47 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1, v47);
  int v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (v51)
    {
      outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v45, type metadata accessor for TetraKEM1024Key);
      goto LABEL_30;
    }
    uint64_t v58 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v59 = *(void *)(v58 - 8);
    int v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
    int v61 = v60(v45, 1, v58);
    int v62 = v60(v46, 1, v58);
    if (v61)
    {
      if (!v62)
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v45, v46, v58);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v45, 0, 1, v58);
        goto LABEL_55;
      }
    }
    else
    {
      if (!v62)
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v45, v46, v58);
LABEL_55:
        uint64_t v88 = *(int *)(v47 + 20);
        uint64_t v89 = &v45[v88];
        uint64_t v90 = &v46[v88];
        uint64_t v91 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v92 = *(void *)(v91 - 8);
        uint64_t v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
        int v94 = v93(v89, 1, v91);
        int v95 = v93(v90, 1, v91);
        uint64_t v54 = v43;
        if (v94)
        {
          if (!v95)
          {
            uint64_t v96 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 32))(v89, v90, v96);
            *(_OWORD *)&v89[*(int *)(v91 + 20)] = *(_OWORD *)&v90[*(int *)(v91 + 20)];
            *(void *)&v89[*(int *)(v91 + 24)] = *(void *)&v90[*(int *)(v91 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v95)
          {
            uint64_t v104 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 40))(v89, v90, v104);
            uint64_t v105 = *(int *)(v91 + 20);
            uint64_t v106 = *(void *)&v89[v105];
            unint64_t v107 = *(void *)&v89[v105 + 8];
            *(_OWORD *)&v89[v105] = *(_OWORD *)&v90[v105];
            outlined consume of Data._Representation(v106, v107);
            uint64_t v108 = *(int *)(v91 + 24);
            long long v109 = *(void **)&v89[v108];
            *(void *)&v89[v108] = *(void *)&v90[v108];

            goto LABEL_31;
          }
          outlined destroy of TetraOutgoingSymmetricRatchet((uint64_t)v89, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v89, v90, *(void *)(*(void *)(v97 - 8) + 64));
        goto LABEL_31;
      }
      (*(void (**)(char *, uint64_t))(v59 + 8))(v45, v58);
    }
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v45, v46, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_55;
  }
  if (v51)
  {
LABEL_30:
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v45, v46, *(void *)(*(void *)(v56 - 8) + 64));
    uint64_t v54 = v43;
LABEL_31:
    uint64_t v57 = v110;
    goto LABEL_40;
  }
  uint64_t v52 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = v43;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v46, 1, v52))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v45, v46, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v45, v46, v52);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v45, 0, 1, v52);
  }
  uint64_t v57 = v110;
  uint64_t v63 = *(int *)(v47 + 20);
  size_t v64 = &v45[v63];
  id v65 = &v46[v63];
  uint64_t v66 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v67 = *(void *)(v66 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
  }
  else
  {
    uint64_t v69 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v64, v65, v69);
    *(_OWORD *)&v64[*(int *)(v66 + 20)] = *(_OWORD *)&v65[*(int *)(v66 + 20)];
    *(void *)&v64[*(int *)(v66 + 24)] = *(void *)&v65[*(int *)(v66 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_40:
  uint64_t v70 = *(int *)(v54 + 28);
  int v71 = (uint64_t *)((char *)a1 + v70);
  uint64_t v72 = (uint64_t *)((char *)v57 + v70);
  unint64_t v73 = *(unint64_t *)((char *)a1 + v70 + 8);
  if (v73 >> 60 != 15)
  {
    unint64_t v74 = v72[1];
    if (v74 >> 60 != 15)
    {
      uint64_t v75 = *v71;
      *int v71 = *v72;
      v71[1] = v74;
      outlined consume of Data._Representation(v75, v73);
      return a1;
    }
    outlined destroy of Data((uint64_t)v71);
  }
  *(_OWORD *)int v71 = *(_OWORD *)v72;
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraOutgoingKeyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216464A7C);
}

uint64_t sub_216464A7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TetraECDHKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
    {
      uint64_t v8 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = a3[5];
    }
    else
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      if (*(_DWORD *)(*(void *)(v14 - 8) + 84) != a2)
      {
        uint64_t v16 = *(void *)(a1 + a3[7] + 8) >> 60;
        BOOL v17 = ((4 * v16) & 0xC) == 0;
        unsigned int v18 = ((4 * v16) & 0xC | (v16 >> 2)) ^ 0xF;
        if (v17) {
          return 0;
        }
        else {
          return v18;
        }
      }
      uint64_t v8 = v14;
      uint64_t v12 = *(void *)(v14 - 8);
      uint64_t v13 = a3[6];
    }
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TetraOutgoingKeyContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_216464C04);
}

uint64_t sub_216464C04(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for TetraECDHKey();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        BOOL v17 = (void *)(a1 + a4[7]);
        *BOOL v17 = 0;
        v17[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for TetraOutgoingKeyContent()
{
  type metadata accessor for TetraECDHKey();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Kyber768.PublicKey?(319, &lazy cache variable for type metadata for TetraKEM768Key?, (void (*)(uint64_t))type metadata accessor for TetraKEM768Key);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Kyber768.PublicKey?(319, &lazy cache variable for type metadata for TetraKEM1024Key?, (void (*)(uint64_t))type metadata accessor for TetraKEM1024Key);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Kyber768.PublicKey?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for TetraRatchetState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TetraRatchetState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21646506CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TetraRatchetState.CodingKeys()
{
  return &unk_26C704258;
}

unsigned char *storeEnumTagSinglePayload for TetraRatchetingErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216465170);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraRatchetingErrors()
{
  return &type metadata for TetraRatchetingErrors;
}

unint64_t lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors;
  if (!lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors;
  if (!lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors);
  }
  return result;
}

uint64_t specialized ReceivingKeyTetraRatchet.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E69766965636572 && a2 == 0xEC00000079654B67;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69766965636572 && a2 == 0xEF79654B4D454B67 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000021649C610)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized TetraRatchetState.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79654B746F6F72 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696D6F636E69 && a2 == 0xEE00736E69616843 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E696F6774756FLL && a2 == 0xED00006E69616843 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000021649C630 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021649C650)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of TetraOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of TetraRatchetState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(void *a1)
{
  return closure #1 in TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(a1) & 1;
}

uint64_t outlined assign with take of TetraOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [TetraMessageTypes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of SymmetricKey?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of KEM.EncapsulationResult?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for ReceivingKeyTetraRatchet.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216465AC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ReceivingKeyTetraRatchet.CodingKeys()
{
  return &unk_26C7045B8;
}

uint64_t specialized static TetraMessageEncoding.sealMessage(_:messageKey:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v37 = type metadata accessor for SymmetricKey();
  uint64_t v36 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TetraPB_TetraInnerMessage(0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  BOOL v17 = &v16[*(int *)(v14 + 28)];
  *(_OWORD *)BOOL v17 = xmmword_216494780;
  unsigned int v18 = &v16[*(int *)(v14 + 32)];
  *(_OWORD *)unsigned int v18 = xmmword_216494780;
  if (a4 >> 60 != 15)
  {
    *(void *)unsigned int v18 = a3;
    *((void *)v18 + 1) = a4;
  }
  *(void *)BOOL v17 = a1;
  *((void *)v17 + 1) = a2;
  outlined copy of Data?(a3, a4);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v19 = static TetraPBPadding.padMessage(_:)();
  if (v5)
  {
    outlined destroy of TetraPB_TetraInnerMessage((uint64_t)v16);
  }
  else
  {
    uint64_t v21 = v19;
    unint64_t v22 = v20;
    uint64_t v23 = static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)((uint64_t)v12, a5);
    uint64_t v25 = v23;
    unint64_t v26 = v24;
    switch(v24 >> 62)
    {
      case 1uLL:
        LODWORD(v27) = HIDWORD(v23) - v23;
        if (__OFSUB__(HIDWORD(v23), v23))
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x216465F74);
        }
        uint64_t v27 = (int)v27;
LABEL_10:
        if (v27 == 16)
        {
          a3 = specialized static CoreCryptoAESCTRImpl.crypt(key:data:IV:)((uint64_t)v12, v21, v22);
          (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v37);
          outlined consume of Data._Representation(v25, v26);
          outlined destroy of TetraPB_TetraInnerMessage((uint64_t)v16);
          outlined consume of Data._Representation(v21, v22);
        }
        else
        {
LABEL_12:
          unint64_t v31 = v22;
          uint64_t v32 = type metadata accessor for CryptoKitError();
          _s9CryptoKit0aB5ErrorOACs0C0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
          swift_allocError();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104))(v33, *MEMORY[0x263F04538], v32);
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v37);
          outlined consume of Data._Representation(v25, v26);
          outlined destroy of TetraPB_TetraInnerMessage((uint64_t)v16);
          outlined consume of Data._Representation(v21, v31);
        }
        break;
      case 2uLL:
        uint64_t v29 = *(void *)(v23 + 16);
        uint64_t v28 = *(void *)(v23 + 24);
        BOOL v30 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (!v30) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_12;
      default:
        uint64_t v27 = BYTE6(v24);
        goto LABEL_10;
    }
  }
  return a3;
}

uint64_t specialized static TetraMessageEncoding.openMessage(_:messageKey:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = type metadata accessor for TetraPB_TetraInnerMessage(0);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)((uint64_t)v12, a3);
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  switch(v14 >> 62)
  {
    case 1uLL:
      LODWORD(v17) = HIDWORD(v13) - v13;
      if (__OFSUB__(HIDWORD(v13), v13))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        JUMPOUT(0x216466334);
      }
      uint64_t v17 = (int)v17;
LABEL_6:
      if (v17 != 16)
      {
LABEL_12:
        uint64_t v29 = type metadata accessor for CryptoKitError();
        _s9CryptoKit0aB5ErrorOACs0C0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104))(v30, *MEMORY[0x263F04538], v29);
        swift_willThrow();
        goto LABEL_13;
      }
      uint64_t v21 = v37;
      uint64_t v22 = specialized static CoreCryptoAESCTRImpl.crypt(key:data:IV:)((uint64_t)v12, a1, v33);
      if (v21)
      {
LABEL_13:
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        outlined consume of Data._Representation(v15, v16);
        return v6;
      }
      uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v37 = v22;
      v23(v12, v9);
      outlined consume of Data._Representation(v15, v16);
      uint64_t v36 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      BinaryDecodingOptions.init()();
      _s9CryptoKit0aB5ErrorOACs0C0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInnerMessage);
      Message.init(serializedData:extensions:partial:options:)();
      uint64_t v24 = *(int *)(v6 + 24);
      uint64_t v25 = (uint64_t *)&v8[*(int *)(v6 + 20)];
      unint64_t v26 = v25[1];
      if (v26 >> 60 == 15) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = *v25;
      }
      uint64_t v27 = *(void *)&v8[v24];
      unint64_t v28 = *(void *)&v8[v24 + 8];
      outlined copy of Data?(*v25, v26);
      outlined copy of Data?(v27, v28);
      outlined destroy of TetraPB_TetraInnerMessage((uint64_t)v8);
      return v6;
    case 2uLL:
      uint64_t v19 = *(void *)(v13 + 16);
      uint64_t v18 = *(void *)(v13 + 24);
      BOOL v20 = __OFSUB__(v18, v19);
      uint64_t v17 = v18 - v19;
      if (!v20) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v17 = BYTE6(v14);
      goto LABEL_6;
  }
}

uint64_t _s9CryptoKit0aB5ErrorOACs0C0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of TetraPB_TetraInnerMessage(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TetraPB_TetraInnerMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SymmetricRatchet.init(ck:index:step:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SymmetricRatchet();
  *(void *)(a4 + *(int *)(v12 + 20)) = MEMORY[0x263F8EE80];
  if (SymmetricKey.bitCount.getter() >= 256)
  {
    outlined init with copy of SymmetricRatchetStep(a3, a4 + *(int *)(v12 + 24));
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
    __swift_destroy_boxed_opaque_existential_0(a3);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)(a4 + *(int *)(result + 48)) = a2;
  }
  else
  {
    uint64_t v13 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, *MEMORY[0x263F04530], v13);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0(a3);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *SymmetricRatchet.maxForwardRatchetDelta.unsafeMutableAddressor()
{
  return &static SymmetricRatchet.maxForwardRatchetDelta;
}

uint64_t SymmetricRatchet.messageKey(forIndex:discardMessageKey:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v29 - v11;
  if (a1 == -1)
  {
    lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
    swift_allocError();
    char v16 = 0;
    goto LABEL_18;
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  unint64_t v14 = *(void *)(v3 + *(int *)(result + 48));
  if (v14 >= 0xFFFFFFFFFFFF3CB0)
  {
    __break(1u);
  }
  else
  {
    if (v14 + 50000 < a1)
    {
      lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
      swift_allocError();
      char v16 = 1;
LABEL_18:
      *uint64_t v15 = v16;
      return swift_willThrow();
    }
    if (v14 <= a1) {
      SymmetricRatchet.deriveMessageKeysUntil(_:)(a1);
    }
    uint64_t v17 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SymmetricRatchet() + 20));
    if ((a2 & 1) == 0)
    {
      uint64_t v21 = *v17;
      if (*(void *)(v21 + 16) && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v23 & 1) != 0))
      {
        unint64_t v24 = v22;
        uint64_t v25 = *(void *)(v21 + 56);
        uint64_t v26 = type metadata accessor for SymmetricKey();
        uint64_t v27 = *(void *)(v26 - 8);
        (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v10, v25 + *(void *)(v27 + 72) * v24, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v10, 0, 1, v26);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v10, 1, v26) != 1) {
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(a3, v10, v26);
        }
      }
      else
      {
        uint64_t v28 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v10, 1, 1, v28);
      }
      uint64_t v20 = (uint64_t)v10;
      goto LABEL_17;
    }
    specialized Dictionary.removeValue(forKey:)(a1, (uint64_t)v12);
    uint64_t v18 = type metadata accessor for SymmetricKey();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18) == 1)
    {
      uint64_t v20 = (uint64_t)v12;
LABEL_17:
      outlined destroy of TetraSessionStates?(v20, &demangling cache variable for type metadata for SymmetricKey?);
      lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
      swift_allocError();
      char v16 = 3;
      goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a3, v12, v18);
  }
  return result;
}

uint64_t specialized Dictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v19 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v19;
    }
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for SymmetricKey();
    uint64_t v18 = *(void *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 32))(a2, v10 + *(void *)(v18 + 72) * v7, v11);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for SymmetricKey();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }
  return v12(v13, v14, 1, v15);
}

uint64_t static SymmetricRatchet.maxForwardRatchetDelta.getter()
{
  return 50000;
}

uint64_t *initializeBufferWithCopyOfBuffer for SymmetricRatchet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 48));
    uint64_t v9 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    long long v12 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)((char *)a1 + v9 + 24) = v12;
    uint64_t v13 = v12;
    uint64_t v14 = **(void (***)(char *, char *, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    v14(v10, v11, v13);
  }
  return a1;
}

uint64_t destroy for SymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  return __swift_destroy_boxed_opaque_existential_0(v5);
}

uint64_t initializeWithCopy for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(a1 + v8 + 24) = v11;
  uint64_t v12 = v11;
  uint64_t v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_bridgeObjectRetain();
  v13(v9, v10, v12);
  return a1;
}

uint64_t assignWithCopy for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(a3 + 24)), (uint64_t *)(a2 + *(int *)(a3 + 24)));
  return a1;
}

uint64_t initializeWithTake for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t assignWithTake for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  __swift_destroy_boxed_opaque_existential_0(a1 + v8);
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216467014);
}

uint64_t sub_216467014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2164670EC);
}

uint64_t sub_2164670EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for SymmetricRatchet()
{
  uint64_t result = type metadata singleton initialization cache for SymmetricRatchet;
  if (!type metadata singleton initialization cache for SymmetricRatchet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SymmetricRatchet()
{
  uint64_t result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v3 = &v2;
    uint64_t v4 = MEMORY[0x263F8CF50] + 64;
    uint64_t v5 = "(";
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SymmetricRatchet.deriveMessageKeysUntil(_:)(unint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)v20 - v8;
  uint64_t result = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v20 - v11;
  if (a1 == -1 || (uint64_t v13 = *(int *)(v3 + 48), v14 = *(void *)(v1 + v13), v14 > a1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = type metadata accessor for SymmetricKey();
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v9, v1, v15);
    *(void *)&v9[v13] = v14;
    v20[0] = v13;
    uint64_t v17 = a1;
    uint64_t v18 = *(int *)(v3 + 48);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v6, v9, v15);
    *(void *)&v6[v18] = v14;
    specialized Sequence.reduce<A>(_:_:)((uint64_t)v6, v14, v17, v1, (uint64_t)v12);
    outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    uint64_t v19 = *(void *)&v12[*(int *)(v3 + 48)];
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(v1, v12, v15);
    *(void *)(v1 + v20[0]) = v19;
  }
  return result;
}

uint64_t specialized Sequence.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v96 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v92 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v107 = (char *)v91 - v12;
  uint64_t v13 = type metadata accessor for SymmetricKey();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v97 = (char *)v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v106 = (char *)v91 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v105 = (char *)v91 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v104 = (char *)v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v103 = (char *)v91 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v102 = (char *)v91 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  id v115 = (char *)v91 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v114 = (char *)v91 - v30;
  MEMORY[0x270FA5388](v29);
  int v94 = (char *)v91 - v31;
  outlined init with copy of (key: SymmetricKey, index: UInt64)(a1, a5);
  uint64_t v32 = type metadata accessor for SymmetricRatchet();
  uint64_t v33 = *(int *)(v32 + 24);
  uint64_t v108 = *(int *)(v32 + 20);
  uint64_t v101 = a4 + v33;
  uint64_t v116 = (void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v100 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v110 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v117 = v20;
  uint64_t v99 = *(int *)(v20 + 48);
  uint64_t v98 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  uint64_t v93 = v14;
  v91[1] = v14 + 40;
  uint64_t v109 = a4;
  uint64_t v95 = a5;
  uint64_t v119 = (void (**)(char *, char *, uint64_t))(v14 + 32);
  while (1)
  {
    uint64_t v112 = a2;
    outlined init with copy of SymmetricRatchetStep(v101, (uint64_t)v118);
    uint64_t v34 = v118[4];
    __swift_project_boxed_opaque_existential_1(v118, v118[3]);
    uint64_t v35 = *(int *)(v117 + 48);
    uint64_t v113 = *v116;
    uint64_t v36 = v13;
    uint64_t v37 = v102;
    v113(v102, a5, v36);
    *(void *)&v37[v35] = *(void *)(a5 + v99);
    uint64_t v39 = v105;
    uint64_t v38 = v106;
    uint64_t v40 = (*(uint64_t (**)(char *, char *, char *))(v34 + 8))(v105, v106, v37);
    uint64_t v42 = v41;
    (*v100)(v37, v36);
    uint64_t v43 = *v119;
    uint64_t v44 = v39;
    uint64_t v45 = v117;
    (*v119)(v37, v44, v36);
    uint64_t v46 = v103;
    v43(v103, v38, v36);
    uint64_t v47 = *(int *)(v45 + 48);
    uint64_t v48 = (uint64_t)v114;
    uint64_t v49 = v37;
    uint64_t v13 = v36;
    v43(v114, v49, v36);
    uint64_t v50 = v40;
    *(void *)(v48 + v47) = v40;
    uint64_t v51 = *(int *)(v45 + 48);
    uint64_t v52 = v115;
    v43(v115, v46, v13);
    uint64_t v111 = v42;
    *(void *)&v52[v51] = v42;
    uint64_t v53 = v50;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v118);
    uint64_t v54 = *(int *)(v45 + 48);
    uint64_t v55 = v104;
    v113(v104, v48, v13);
    *(void *)&v55[v54] = v50;
    uint64_t v56 = (uint64_t)v107;
    v43(v107, v55, v13);
    uint64_t v57 = *v110;
    (*v110)(v56, 0, 1, v13);
    if ((*v98)(v56, 1, v13) == 1)
    {
      uint64_t v58 = v43;
      outlined destroy of TetraSessionStates?(v56, &demangling cache variable for type metadata for SymmetricKey?);
      uint64_t v59 = v53;
      uint64_t v60 = v108;
      uint64_t v61 = v109;
      unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v59);
      if (v63)
      {
        unint64_t v64 = v62;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v66 = *(void *)(v61 + v60);
        v118[0] = v66;
        *(void *)(v61 + v60) = 0x8000000000000000;
        a5 = v95;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v66 = v118[0];
        }
        uint64_t v67 = v92;
        v58(v92, (char *)(*(void *)(v66 + 56) + *(void *)(v93 + 72) * v64), v13);
        specialized _NativeDictionary._delete(at:)(v64, v66);
        *(void *)(v61 + v108) = v66;
        swift_bridgeObjectRelease();
        uint64_t v68 = (uint64_t)v67;
        uint64_t v69 = 0;
      }
      else
      {
        uint64_t v69 = 1;
        a5 = v95;
        uint64_t v68 = (uint64_t)v92;
      }
      uint64_t v82 = v112;
      v57(v68, v69, 1, v13);
      outlined destroy of TetraSessionStates?(v68, &demangling cache variable for type metadata for SymmetricKey?);
      goto LABEL_21;
    }
    v43(v97, (char *)v56, v13);
    uint64_t v71 = v108;
    uint64_t v70 = v109;
    int v72 = swift_isUniquelyReferenced_nonNull_native();
    v118[0] = *(void *)(v70 + v71);
    uint64_t v73 = v118[0];
    *(void *)(v70 + v71) = 0x8000000000000000;
    unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
    uint64_t v76 = *(void *)(v73 + 16);
    BOOL v77 = (v74 & 1) == 0;
    uint64_t v78 = v76 + v77;
    if (__OFADD__(v76, v77)) {
      break;
    }
    char v79 = v74;
    if (*(void *)(v73 + 24) >= v78)
    {
      uint64_t v82 = v112;
      if (v72)
      {
        unint64_t v83 = (void *)v118[0];
        if ((v74 & 1) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v83 = (void *)v118[0];
        if ((v79 & 1) == 0) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, v72);
      unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
      uint64_t v82 = v112;
      if ((v79 & 1) != (v81 & 1)) {
        goto LABEL_28;
      }
      unint64_t v75 = v80;
      unint64_t v83 = (void *)v118[0];
      if ((v79 & 1) == 0)
      {
LABEL_18:
        v83[(v75 >> 6) + 8] |= 1 << v75;
        *(void *)(v83[6] + 8 * v75) = v53;
        v43((char *)(v83[7] + *(void *)(v93 + 72) * v75), v97, v13);
        uint64_t v84 = v83[2];
        BOOL v85 = __OFADD__(v84, 1);
        uint64_t v86 = v84 + 1;
        if (v85) {
          goto LABEL_27;
        }
        uint64_t v58 = v43;
        v83[2] = v86;
        goto LABEL_20;
      }
    }
    uint64_t v58 = v43;
    (*(void (**)(unint64_t, char *, uint64_t))(v93 + 40))(v83[7] + *(void *)(v93 + 72) * v75, v97, v13);
LABEL_20:
    *(void *)(v109 + v71) = v118[0];
    swift_bridgeObjectRelease();
    a5 = v95;
LABEL_21:
    outlined destroy of TetraSessionStates?((uint64_t)v114, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    uint64_t v87 = *(int *)(v117 + 48);
    uint64_t v88 = (uint64_t)v94;
    v58(v94, v115, v13);
    *(void *)(v88 + v87) = v111;
    outlined destroy of TetraSessionStates?(a5, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    uint64_t result = outlined init with take of (key: SymmetricKey, index: UInt64)(v88, a5);
    if (v96 == v82) {
      return result;
    }
    BOOL v90 = __CFADD__(v82, 1);
    a2 = v82 + 1;
    if (v90)
    {
      __break(1u);
      return result;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of (key: SymmetricKey, index: UInt64)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: SymmetricKey, index: UInt64)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError()
{
  unint64_t result = lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError;
  if (!lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError)
  {
    type metadata accessor for CryptoKitError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TetraPB_TetraPublicPrekey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm_1);
}

uint64_t storeEnumTagSinglePayload for TetraPB_TetraPublicPrekey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm_1);
}

uint64_t type metadata accessor for TetraPB_TetraPublicPrekey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_TetraPublicPrekey);
}

void protocol witness for Enum.init() in conformance TetraPB_KyberSecurityLevel(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance TetraPB_KyberSecurityLevel@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance TetraPB_KyberSecurityLevel()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance TetraPB_KyberSecurityLevel@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraPB_KyberSecurityLevel(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_KyberSecurityLevel(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void one-time initialization function for allCases()
{
  static TetraPB_KyberSecurityLevel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static TetraPB_PrivateKeyBackingStore.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_KyberSecurityLevel@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_KyberSecurityLevel(&one-time initialization token for allCases, &static TetraPB_KyberSecurityLevel.allCases, a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraPB_KyberSecurityLevel()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_PrivateKeyBackingStore(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraPB_KyberSecurityLevel()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TetraPB_KyberSecurityLevel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_PrivateKeyBackingStore@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_KyberSecurityLevel(&one-time initialization token for allCases, &static TetraPB_PrivateKeyBackingStore.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_KyberSecurityLevel@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_KyberSecurityLevel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_KyberSecurityLevel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_PrivateKeyBackingStore@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_PrivateKeyBackingStore._protobuf_nameMap, a1);
}

uint64_t TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v1 = v0;
    if (v0 || (v3 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 3:
        closure #3 in TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)();
LABEL_3:
        uint64_t v1 = 0;
        break;
      case 2:
        closure #2 in TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)();
        goto LABEL_3;
      case 1:
        type metadata accessor for TetraPB_KyberPrivateKey(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        goto LABEL_3;
    }
    uint64_t v0 = v1;
  }
}

uint64_t closure #2 in TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #3 in TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t TetraPB_KyberPrivateKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_KyberPrivateKey);
  if (!v4)
  {
    closure #2 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(v3);
    closure #3 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_KyberPrivateKey(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 24) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #3 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_KyberPrivateKey(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 28) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

double protocol witness for Message.init() in conformance TetraPB_KyberPrivateKey@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_216494780;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(_WORD *)(v6 + 8) = 256;
  uint64_t v7 = a2 + a1[7];
  *(void *)uint64_t v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_KyberPrivateKey()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance TetraPB_KyberPrivateKey()
{
  return MEMORY[0x270F44C98]();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TetraPB_KyberPrivateKey()
{
  return TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_KyberPrivateKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, (void (*)(uint64_t))type metadata accessor for TetraPB_KyberPrivateKey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_KyberPrivateKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_KyberPrivateKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_KyberPrivateKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, (void (*)(uint64_t))type metadata accessor for TetraPB_KyberPrivateKey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, (void (*)(uint64_t))type metadata accessor for TetraPB_KyberPrivateKey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for TetraPB_TetraPublicPrekey);
}

uint64_t TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey);
}

uint64_t closure #1 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v7 = a1 + *(int *)(result + 20);
  unint64_t v8 = *(void *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *(void *)v7;
    outlined copy of Data._Representation(*(void *)v7, *(void *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_TetraPublicPrekey()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_TetraPublicPrekey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_TetraPublicPrekey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_TetraPublicPrekey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_TetraPublicPrekey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_TetraPublicPrekey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraPB_TetraPublicPrekey(uint64_t a1, uint64_t a2)
{
  return specialized static TetraPB_TetraInnerMessage.== infix(_:_:)(a1, a2, type metadata accessor for TetraPB_TetraPublicPrekey) & 1;
}

uint64_t TetraPB_TetraInitiationMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for TetraPB_TetraInitiationMessage);
}

uint64_t TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t TetraPB_TetraInitiationMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for TetraPB_TetraInitiationMessage, type metadata accessor for TetraPB_TetraInitiationMessage);
}

uint64_t closure #2 in TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v7 = a1 + *(int *)(result + 24);
  unint64_t v8 = *(void *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *(void *)v7;
    outlined copy of Data._Representation(*(void *)v7, *(void *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_TetraInitiationMessage()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_TetraInitiationMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInitiationMessage);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_TetraInitiationMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_TetraInitiationMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_TetraInitiationMessage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInitiationMessage);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_TetraInitiationMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInitiationMessage);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraPB_TetraInitiationMessage(uint64_t a1, uint64_t a2)
{
  return specialized static TetraPB_TetraInnerMessage.== infix(_:_:)(a1, a2, type metadata accessor for TetraPB_TetraInitiationMessage) & 1;
}

uint64_t TetraPB_TetraMessage.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 7:
        type metadata accessor for TetraPB_TetraMessage(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
        type metadata accessor for TetraPB_TetraMessage(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
  if (!v4)
  {
    closure #2 in TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_TetraMessage);
    closure #3 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_TetraMessage);
    closure #4 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #5 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #6 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #7 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #8 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #9 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_TetraMessage(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 20) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_TetraMessage(0);
  uint64_t v3 = a1 + *(int *)(result + 32);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #5 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_TetraMessage(0);
  uint64_t v3 = a1 + *(int *)(result + 36);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #6 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_TetraMessage(0);
  uint64_t v3 = a1 + *(int *)(result + 40);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #7 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_TetraMessage(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #8 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_TetraMessage(0);
  uint64_t v3 = a1 + *(int *)(result + 48);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #9 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_TetraMessage(0);
  uint64_t v3 = a1 + *(int *)(result + 52);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

double protocol witness for Message.init() in conformance TetraPB_TetraMessage@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  double result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_216494780;
  uint64_t v7 = a1[8];
  *(_OWORD *)(a2 + a1[7]) = xmmword_216494780;
  *(_OWORD *)(a2 + v7) = xmmword_216494780;
  uint64_t v8 = a1[10];
  *(_OWORD *)(a2 + a1[9]) = xmmword_216494780;
  *(_OWORD *)(a2 + v8) = xmmword_216494780;
  uint64_t v9 = a1[12];
  uint64_t v10 = a2 + a1[11];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(_OWORD *)(a2 + v9) = xmmword_216494780;
  *(_OWORD *)(a2 + a1[13]) = xmmword_216494780;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_TetraMessage()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TetraPB_TetraMessage()
{
  return TetraPB_TetraMessage.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TetraPB_TetraMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraMessage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_TetraMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraMessage);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_TetraMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_TetraMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_TetraMessage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraMessage);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_TetraMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraMessage);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t TetraPB_TetraInnerMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for TetraPB_TetraInnerMessage);
}

uint64_t TetraPB_TetraInnerMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage);
}

uint64_t TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result = closure #1 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(v5, a1, a2, a3, a4);
  if (!v6)
  {
    closure #2 in TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(v5, a1, a2, a3, a5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_TetraInnerMessage()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_TetraInnerMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInnerMessage);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_TetraInnerMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_TetraInnerMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_TetraInnerMessage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInnerMessage);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_TetraInnerMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInnerMessage);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraPB_TetraInnerMessage(uint64_t a1, uint64_t a2)
{
  return specialized static TetraPB_TetraInnerMessage.== infix(_:_:)(a1, a2, type metadata accessor for TetraPB_TetraInnerMessage) & 1;
}

uint64_t TetraPB_PaddyKeyDistributionMessage.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 3:
        goto LABEL_2;
      case 2:
        type metadata accessor for TetraPB_PaddyKeyDistributionMessage(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        break;
      case 1:
LABEL_2:
        type metadata accessor for TetraPB_PaddyKeyDistributionMessage(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        break;
    }
    uint64_t v0 = 0;
  }
}

uint64_t TetraPB_PaddyKeyDistributionMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
  if (!v4)
  {
    closure #2 in TetraPB_PaddyKeyDistributionMessage.traverse<A>(visitor:)(v3);
    closure #3 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in TetraPB_PaddyKeyDistributionMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for TetraPB_PaddyKeyDistributionMessage(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 24) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #3 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v7 = a1 + *(int *)(result + 28);
  unint64_t v8 = *(void *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *(void *)v7;
    outlined copy of Data._Representation(*(void *)v7, *(void *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

double protocol witness for Message.init() in conformance TetraPB_PaddyKeyDistributionMessage@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_216494780;
  uint64_t v6 = a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  *(_OWORD *)(a2 + a1[7]) = xmmword_216494780;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_PaddyKeyDistributionMessage()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TetraPB_PaddyKeyDistributionMessage()
{
  return TetraPB_PaddyKeyDistributionMessage.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_PaddyKeyDistributionMessage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_PaddyKeyDistributionMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_PaddyKeyDistributionMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_PaddyKeyDistributionMessage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t base witness table accessor for Equatable in TetraPB_PaddyKeyDistributionMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t type metadata accessor for TetraPB_PaddyKeyDistributionMessage(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t base witness table accessor for Message in TetraPB_PaddyKeyDistributionMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in TetraPB_PaddyKeyDistributionMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_PaddyKeyDistributionMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t base witness table accessor for Equatable in TetraPB_TetraInnerMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInnerMessage);
}

uint64_t type metadata accessor for TetraPB_TetraInnerMessage(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_TetraInnerMessage);
}

uint64_t base witness table accessor for Message in TetraPB_TetraInnerMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInnerMessage);
}

uint64_t base witness table accessor for Hashable in TetraPB_TetraInnerMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInnerMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_TetraInnerMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInnerMessage);
}

uint64_t base witness table accessor for Equatable in TetraPB_TetraMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraMessage);
}

uint64_t type metadata accessor for TetraPB_TetraMessage(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_TetraMessage);
}

uint64_t base witness table accessor for Message in TetraPB_TetraMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraMessage);
}

uint64_t base witness table accessor for Hashable in TetraPB_TetraMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_TetraMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraMessage);
}

uint64_t base witness table accessor for Equatable in TetraPB_TetraInitiationMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInitiationMessage);
}

uint64_t type metadata accessor for TetraPB_TetraInitiationMessage(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_TetraInitiationMessage);
}

uint64_t base witness table accessor for Message in TetraPB_TetraInitiationMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInitiationMessage);
}

uint64_t base witness table accessor for Hashable in TetraPB_TetraInitiationMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInitiationMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_TetraInitiationMessage()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraInitiationMessage);
}

uint64_t base witness table accessor for Equatable in TetraPB_TetraPublicPrekey()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
}

uint64_t base witness table accessor for Message in TetraPB_TetraPublicPrekey()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
}

uint64_t base witness table accessor for Hashable in TetraPB_TetraPublicPrekey()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
}

uint64_t base witness table accessor for Equatable in TetraPB_KyberPrivateKey()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, (void (*)(uint64_t))type metadata accessor for TetraPB_KyberPrivateKey);
}

uint64_t type metadata accessor for TetraPB_KyberPrivateKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_KyberPrivateKey);
}

uint64_t base witness table accessor for Message in TetraPB_KyberPrivateKey()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, (void (*)(uint64_t))type metadata accessor for TetraPB_KyberPrivateKey);
}

uint64_t base witness table accessor for Hashable in TetraPB_KyberPrivateKey()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, (void (*)(uint64_t))type metadata accessor for TetraPB_KyberPrivateKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_KyberPrivateKey()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, (void (*)(uint64_t))type metadata accessor for TetraPB_KyberPrivateKey);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TetraPB_PrivateKeyBackingStore()
{
  return lazy protocol witness table accessor for type [TetraPB_PrivateKeyBackingStore] and conformance [A](&lazy protocol witness table cache variable for type [TetraPB_PrivateKeyBackingStore] and conformance [A], &demangling cache variable for type metadata for [TetraPB_PrivateKeyBackingStore]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TetraPB_KyberSecurityLevel()
{
  return lazy protocol witness table accessor for type [TetraPB_PrivateKeyBackingStore] and conformance [A](&lazy protocol witness table cache variable for type [TetraPB_KyberSecurityLevel] and conformance [A], &demangling cache variable for type metadata for [TetraPB_KyberSecurityLevel]);
}

uint64_t lazy protocol witness table accessor for type [TetraPB_PrivateKeyBackingStore] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_TetraPublicPrekey()
{
  return lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
}

unint64_t lazy protocol witness table accessor for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore;
  if (!lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore;
  if (!lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore;
  if (!lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore;
  if (!lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel);
  }
  return result;
}

uint64_t specialized static TetraPB_KyberPrivateKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = (int *)type metadata accessor for TetraPB_KyberPrivateKey(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      outlined copy of Data?(v12, v13);
      outlined copy of Data?(v15, v16);
      char v19 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
      outlined consume of Data?(v15, v16);
      outlined consume of Data?(v12, v13);
      if ((v19 & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_9:
  uint64_t v20 = v10[6];
  uint64_t v21 = (uint64_t *)(a1 + v20);
  char v22 = *(unsigned char *)(a1 + v20 + 9);
  uint64_t v23 = (uint64_t *)(a2 + v20);
  if (v22)
  {
    if ((*((unsigned char *)v23 + 9) & 1) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if (*((unsigned char *)v23 + 9)) {
      goto LABEL_6;
    }
    uint64_t v24 = *v21;
    char v25 = *((unsigned char *)v21 + 8);
    uint64_t v26 = *v23;
    char v27 = *((unsigned char *)v23 + 8);
    uint64_t v28 = v24 != 0;
    if ((v25 & 1) == 0) {
      uint64_t v28 = v24;
    }
    if (v27)
    {
      if (v26)
      {
        if (v28 != 1) {
          goto LABEL_6;
        }
      }
      else if (v28)
      {
        goto LABEL_6;
      }
    }
    else if (v28 != v26)
    {
      goto LABEL_6;
    }
  }
  uint64_t v29 = v10[7];
  uint64_t v30 = (uint64_t *)(a1 + v29);
  char v31 = *(unsigned char *)(a1 + v29 + 9);
  uint64_t v32 = (uint64_t *)(a2 + v29);
  if (v31)
  {
    if (*((unsigned char *)v32 + 9)) {
      goto LABEL_35;
    }
  }
  else if ((*((unsigned char *)v32 + 9) & 1) == 0)
  {
    uint64_t v33 = *v30;
    char v34 = *((unsigned char *)v30 + 8);
    uint64_t v35 = *v32;
    char v36 = *((unsigned char *)v32 + 8);
    uint64_t v37 = v33 != 0;
    if ((v34 & 1) == 0) {
      uint64_t v37 = v33;
    }
    if (v36)
    {
      if (v35)
      {
        if (v37 == 1) {
          goto LABEL_35;
        }
      }
      else if (!v37)
      {
LABEL_35:
        uint64_t v38 = v43;
        uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
        uint64_t v40 = a1;
        uint64_t v41 = v44;
        v39(v9, v40, v44);
        v39(v7, a2, v41);
        lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v42 = *(void (**)(char *, uint64_t))(v38 + 8);
        v42(v7, v41);
        v42(v9, v41);
        return v17 & 1;
      }
    }
    else if (v37 == v35)
    {
      goto LABEL_35;
    }
  }
LABEL_6:
  char v17 = 0;
  return v17 & 1;
}

uint64_t specialized static TetraPB_TetraMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v61 - v9;
  uint64_t v11 = type metadata accessor for TetraPB_TetraMessage(0);
  uint64_t v12 = (int *)v11;
  uint64_t v13 = *(int *)(v11 + 20);
  uint64_t v14 = (_DWORD *)(a1 + v13);
  char v15 = *(unsigned char *)(a1 + v13 + 4);
  unint64_t v16 = (_DWORD *)(a2 + v13);
  int v17 = *(unsigned __int8 *)(a2 + v13 + 4);
  if (v15)
  {
    if (!v17) {
      goto LABEL_33;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_33;
    }
  }
  uint64_t v61 = v5;
  uint64_t v62 = v4;
  uint64_t v18 = *(int *)(v11 + 24);
  uint64_t v19 = *(void *)(a1 + v18);
  unint64_t v20 = *(void *)(a1 + v18 + 8);
  uint64_t v21 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15) {
      goto LABEL_31;
    }
  }
  else
  {
    if (v23 >> 60 == 15) {
      goto LABEL_31;
    }
    outlined copy of Data?(v19, v20);
    outlined copy of Data?(v22, v23);
    char v24 = specialized static Data.== infix(_:_:)(v19, v20, v22, v23);
    outlined consume of Data?(v22, v23);
    outlined consume of Data?(v19, v20);
    if ((v24 & 1) == 0) {
      goto LABEL_33;
    }
  }
  uint64_t v25 = v12[7];
  uint64_t v19 = *(void *)(a1 + v25);
  unint64_t v20 = *(void *)(a1 + v25 + 8);
  uint64_t v26 = (uint64_t *)(a2 + v25);
  uint64_t v22 = *v26;
  unint64_t v23 = v26[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15) {
      goto LABEL_31;
    }
  }
  else
  {
    if (v23 >> 60 == 15) {
      goto LABEL_31;
    }
    outlined copy of Data?(v19, v20);
    outlined copy of Data?(v22, v23);
    char v27 = specialized static Data.== infix(_:_:)(v19, v20, v22, v23);
    outlined consume of Data?(v22, v23);
    outlined consume of Data?(v19, v20);
    if ((v27 & 1) == 0) {
      goto LABEL_33;
    }
  }
  uint64_t v28 = v12[8];
  uint64_t v19 = *(void *)(a1 + v28);
  unint64_t v20 = *(void *)(a1 + v28 + 8);
  uint64_t v29 = (uint64_t *)(a2 + v28);
  uint64_t v22 = *v29;
  unint64_t v23 = v29[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15) {
      goto LABEL_31;
    }
  }
  else
  {
    if (v23 >> 60 == 15) {
      goto LABEL_31;
    }
    outlined copy of Data?(v19, v20);
    outlined copy of Data?(v22, v23);
    char v30 = specialized static Data.== infix(_:_:)(v19, v20, v22, v23);
    outlined consume of Data?(v22, v23);
    outlined consume of Data?(v19, v20);
    if ((v30 & 1) == 0) {
      goto LABEL_33;
    }
  }
  uint64_t v31 = v12[9];
  uint64_t v19 = *(void *)(a1 + v31);
  unint64_t v20 = *(void *)(a1 + v31 + 8);
  uint64_t v32 = (uint64_t *)(a2 + v31);
  uint64_t v22 = *v32;
  unint64_t v23 = v32[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15) {
      goto LABEL_31;
    }
LABEL_27:
    uint64_t v34 = v12[10];
    uint64_t v19 = *(void *)(a1 + v34);
    unint64_t v20 = *(void *)(a1 + v34 + 8);
    uint64_t v35 = (uint64_t *)(a2 + v34);
    uint64_t v22 = *v35;
    unint64_t v23 = v35[1];
    if (v20 >> 60 == 15)
    {
      if (v23 >> 60 != 15) {
        goto LABEL_31;
      }
    }
    else
    {
      if (v23 >> 60 == 15) {
        goto LABEL_31;
      }
      outlined copy of Data?(v19, v20);
      outlined copy of Data?(v22, v23);
      char v40 = specialized static Data.== infix(_:_:)(v19, v20, v22, v23);
      outlined consume of Data?(v22, v23);
      outlined consume of Data?(v19, v20);
      if ((v40 & 1) == 0) {
        goto LABEL_33;
      }
    }
    uint64_t v41 = v12[11];
    uint64_t v42 = (_DWORD *)(a1 + v41);
    char v43 = *(unsigned char *)(a1 + v41 + 4);
    uint64_t v44 = (_DWORD *)(a2 + v41);
    int v45 = *(unsigned __int8 *)(a2 + v41 + 4);
    if (v43)
    {
      if (!v45) {
        goto LABEL_33;
      }
    }
    else
    {
      if (*v42 != *v44) {
        LOBYTE(v45) = 1;
      }
      if (v45) {
        goto LABEL_33;
      }
    }
    uint64_t v46 = v12[12];
    uint64_t v19 = *(void *)(a1 + v46);
    unint64_t v20 = *(void *)(a1 + v46 + 8);
    uint64_t v47 = (uint64_t *)(a2 + v46);
    uint64_t v22 = *v47;
    unint64_t v23 = v47[1];
    if (v20 >> 60 == 15)
    {
      if (v23 >> 60 == 15) {
        goto LABEL_47;
      }
    }
    else if (v23 >> 60 != 15)
    {
      outlined copy of Data?(v19, v20);
      outlined copy of Data?(v22, v23);
      char v48 = specialized static Data.== infix(_:_:)(v19, v20, v22, v23);
      outlined consume of Data?(v22, v23);
      outlined consume of Data?(v19, v20);
      if ((v48 & 1) == 0) {
        goto LABEL_33;
      }
LABEL_47:
      uint64_t v49 = v12[13];
      uint64_t v50 = *(void *)(a1 + v49);
      unint64_t v51 = *(void *)(a1 + v49 + 8);
      uint64_t v52 = (uint64_t *)(a2 + v49);
      uint64_t v53 = *v52;
      unint64_t v54 = v52[1];
      if (v51 >> 60 == 15)
      {
        if (v54 >> 60 == 15) {
          goto LABEL_53;
        }
      }
      else if (v54 >> 60 != 15)
      {
        outlined copy of Data?(v50, v51);
        outlined copy of Data?(v53, v54);
        char v55 = specialized static Data.== infix(_:_:)(v50, v51, v53, v54);
        outlined consume of Data?(v53, v54);
        outlined consume of Data?(v50, v51);
        if ((v55 & 1) == 0) {
          goto LABEL_33;
        }
LABEL_53:
        uint64_t v56 = v61;
        uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
        uint64_t v58 = a1;
        uint64_t v59 = v62;
        v57(v10, v58, v62);
        v57(v8, a2, v59);
        lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v60 = *(void (**)(char *, uint64_t))(v56 + 8);
        v60(v8, v59);
        v60(v10, v59);
        return v38 & 1;
      }
      outlined copy of Data?(v50, v51);
      outlined copy of Data?(v53, v54);
      outlined consume of Data?(v50, v51);
      uint64_t v36 = v53;
      unint64_t v37 = v54;
      goto LABEL_32;
    }
LABEL_31:
    outlined copy of Data?(v19, v20);
    outlined copy of Data?(v22, v23);
    outlined consume of Data?(v19, v20);
    uint64_t v36 = v22;
    unint64_t v37 = v23;
LABEL_32:
    outlined consume of Data?(v36, v37);
    goto LABEL_33;
  }
  if (v23 >> 60 == 15) {
    goto LABEL_31;
  }
  outlined copy of Data?(v19, v20);
  outlined copy of Data?(v22, v23);
  char v33 = specialized static Data.== infix(_:_:)(v19, v20, v22, v23);
  outlined consume of Data?(v22, v23);
  outlined consume of Data?(v19, v20);
  if (v33) {
    goto LABEL_27;
  }
LABEL_33:
  char v38 = 0;
  return v38 & 1;
}

uint64_t specialized static TetraPB_TetraInnerMessage.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v34 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = a3(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  char v15 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  if (v14 >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      outlined copy of Data?(v13, v14);
      outlined copy of Data?(v16, v17);
      char v20 = specialized static Data.== infix(_:_:)(v13, v14, v16, v17);
      outlined consume of Data?(v16, v17);
      outlined consume of Data?(v13, v14);
      if ((v20 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
LABEL_5:
    outlined copy of Data?(v13, v14);
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v13, v14);
    uint64_t v18 = v16;
    unint64_t v19 = v17;
LABEL_12:
    outlined consume of Data?(v18, v19);
    goto LABEL_13;
  }
  if (v17 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v21 = *(int *)(v11 + 24);
  uint64_t v22 = *(void *)(a1 + v21);
  unint64_t v23 = *(void *)(a1 + v21 + 8);
  char v24 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  if (v23 >> 60 == 15)
  {
    if (v26 >> 60 == 15) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  if (v26 >> 60 == 15)
  {
LABEL_11:
    outlined copy of Data?(v22, v23);
    outlined copy of Data?(v25, v26);
    outlined consume of Data?(v22, v23);
    uint64_t v18 = v25;
    unint64_t v19 = v26;
    goto LABEL_12;
  }
  outlined copy of Data?(v22, v23);
  outlined copy of Data?(v25, v26);
  char v29 = specialized static Data.== infix(_:_:)(v22, v23, v25, v26);
  outlined consume of Data?(v25, v26);
  outlined consume of Data?(v22, v23);
  if (v29)
  {
LABEL_16:
    uint64_t v30 = v35;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
    v31(v10, a1, v6);
    uint64_t v32 = v34;
    v31(v34, a2, v6);
    lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v33 = *(void (**)(char *, uint64_t))(v30 + 8);
    v33(v32, v6);
    v33(v10, v6);
    return v27 & 1;
  }
LABEL_13:
  char v27 = 0;
  return v27 & 1;
}

uint64_t specialized static TetraPB_PaddyKeyDistributionMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = (int *)type metadata accessor for TetraPB_PaddyKeyDistributionMessage(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  unint64_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  uint64_t v40 = v4;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15) {
      goto LABEL_10;
    }
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    uint64_t v17 = v15;
    unint64_t v18 = v16;
LABEL_6:
    outlined consume of Data?(v17, v18);
    goto LABEL_7;
  }
  if (v16 >> 60 == 15) {
    goto LABEL_5;
  }
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  char v21 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v21 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_10:
  uint64_t v22 = v10[6];
  unint64_t v23 = (_DWORD *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 4);
  uint64_t v25 = (_DWORD *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if (v24)
  {
    if (!v26) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_7;
    }
  }
  uint64_t v27 = v10[7];
  uint64_t v28 = *(void *)(a1 + v27);
  unint64_t v29 = *(void *)(a1 + v27 + 8);
  uint64_t v30 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  if (v29 >> 60 == 15)
  {
    if (v32 >> 60 == 15) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v32 >> 60 == 15)
  {
LABEL_20:
    outlined copy of Data?(v28, v29);
    outlined copy of Data?(v31, v32);
    outlined consume of Data?(v28, v29);
    uint64_t v17 = v31;
    unint64_t v18 = v32;
    goto LABEL_6;
  }
  outlined copy of Data?(v28, v29);
  outlined copy of Data?(v31, v32);
  char v33 = specialized static Data.== infix(_:_:)(v28, v29, v31, v32);
  outlined consume of Data?(v31, v32);
  outlined consume of Data?(v28, v29);
  if (v33)
  {
LABEL_22:
    uint64_t v34 = v39;
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
    uint64_t v36 = a1;
    uint64_t v37 = v40;
    v35(v9, v36, v40);
    v35(v7, a2, v37);
    lazy protocol witness table accessor for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v38 = *(void (**)(char *, uint64_t))(v34 + 8);
    v38(v7, v37);
    v38(v9, v37);
    return v19 & 1;
  }
LABEL_7:
  char v19 = 0;
  return v19 & 1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TetraPB_KyberSecurityLevel(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TetraPB_KyberSecurityLevel(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for TetraPB_KyberSecurityLevel(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for TetraPB_KyberSecurityLevel(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraPB_KyberSecurityLevel()
{
  return &type metadata for TetraPB_KyberSecurityLevel;
}

ValueMetadata *type metadata accessor for TetraPB_PrivateKeyBackingStore()
{
  return &type metadata for TetraPB_PrivateKeyBackingStore;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraPB_KyberPrivateKey(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    unint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)unint64_t v16 = *(void *)v17;
    *((_WORD *)v16 + 4) = *((_WORD *)v17 + 4);
    unint64_t v18 = (char *)a1 + v15;
    char v19 = (char *)a2 + v15;
    *(void *)unint64_t v18 = *(void *)v19;
    *((_WORD *)v18 + 4) = *((_WORD *)v19 + 4);
  }
  return a1;
}

uint64_t initializeWithCopy for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_WORD *)(v14 + 8) = *(_WORD *)(v15 + 8);
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_WORD *)(v16 + 8) = *(_WORD *)(v17 + 8);
  return a1;
}

uint64_t assignWithCopy for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(_WORD *)(v16 + 8) = *((_WORD *)v17 + 4);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = a1 + v19;
  char v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(_WORD *)(v20 + 8) = *((_WORD *)v21 + 4);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t initializeWithTake for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_WORD *)(v11 + 8) = *(_WORD *)(v12 + 8);
  return a1;
}

uint64_t assignWithTake for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_WORD *)(v15 + 8) = *(_WORD *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_WORD *)(v17 + 8) = *(_WORD *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm_2);
}

uint64_t storeEnumTagSinglePayload for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm_2);
}

uint64_t type metadata completion function for TetraPB_KyberPrivateKey()
{
  return type metadata completion function for TetraPB_KyberPrivateKey();
}

{
  uint64_t result;
  unint64_t v1;

  unint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TetraPB_TetraInitiationMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm_3);
}

uint64_t storeEnumTagSinglePayload for TetraPB_TetraInitiationMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm_3);
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraPB_TetraMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (char *)a1 + v8;
    unint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)unint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (uint64_t *)((char *)a2 + v9);
    unint64_t v14 = *(uint64_t *)((char *)a2 + v9 + 8);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    }
    else
    {
      uint64_t v16 = *v13;
      outlined copy of Data._Representation(*v13, v14);
      *(void *)uint64_t v12 = v16;
      *((void *)v12 + 1) = v14;
    }
    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v21 = *(void *)v19;
      outlined copy of Data._Representation(*(void *)v19, *((void *)v19 + 1));
      *(void *)uint64_t v18 = v21;
      *((void *)v18 + 1) = v20;
    }
    uint64_t v22 = a3[8];
    unint64_t v23 = (char *)a1 + v22;
    char v24 = (char *)a2 + v22;
    unint64_t v25 = *((void *)v24 + 1);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v26 = *(void *)v24;
      outlined copy of Data._Representation(*(void *)v24, *((void *)v24 + 1));
      *(void *)unint64_t v23 = v26;
      *((void *)v23 + 1) = v25;
    }
    uint64_t v27 = a3[9];
    uint64_t v28 = (char *)a1 + v27;
    unint64_t v29 = (char *)a2 + v27;
    unint64_t v30 = *((void *)v29 + 1);
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    }
    else
    {
      uint64_t v31 = *(void *)v29;
      outlined copy of Data._Representation(*(void *)v29, *((void *)v29 + 1));
      *(void *)uint64_t v28 = v31;
      *((void *)v28 + 1) = v30;
    }
    uint64_t v32 = a3[10];
    char v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    unint64_t v35 = *((void *)v34 + 1);
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)char v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *(void *)v34;
      outlined copy of Data._Representation(*(void *)v34, *((void *)v34 + 1));
      *(void *)char v33 = v36;
      *((void *)v33 + 1) = v35;
    }
    uint64_t v37 = a3[11];
    uint64_t v38 = a3[12];
    uint64_t v39 = (char *)a1 + v37;
    uint64_t v40 = (char *)a2 + v37;
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    uint64_t v41 = (char *)a1 + v38;
    uint64_t v42 = (uint64_t *)((char *)a2 + v38);
    unint64_t v43 = *(uint64_t *)((char *)a2 + v38 + 8);
    if (v43 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    }
    else
    {
      uint64_t v44 = *v42;
      outlined copy of Data._Representation(*v42, v43);
      *(void *)uint64_t v41 = v44;
      *((void *)v41 + 1) = v43;
    }
    uint64_t v45 = a3[13];
    uint64_t v46 = (char *)a1 + v45;
    uint64_t v47 = (char *)a2 + v45;
    unint64_t v48 = *((void *)v47 + 1);
    if (v48 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    }
    else
    {
      uint64_t v49 = *(void *)v47;
      outlined copy of Data._Representation(*(void *)v47, *((void *)v47 + 1));
      *(void *)uint64_t v46 = v49;
      *((void *)v46 + 1) = v48;
    }
  }
  return a1;
}

uint64_t destroy for TetraPB_TetraMessage(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + a2[6]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[7]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v8, v9);
  }
  unint64_t v10 = (uint64_t *)(a1 + a2[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v10, v11);
  }
  uint64_t v12 = (uint64_t *)(a1 + a2[9]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v12, v13);
  }
  unint64_t v14 = (uint64_t *)(a1 + a2[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(a1 + a2[12]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(a1 + a2[13]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15)
  {
    uint64_t v20 = *v18;
    return outlined consume of Data._Representation(v20, v19);
  }
  return result;
}

uint64_t initializeWithCopy for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = (uint64_t *)(a2 + v8);
  unint64_t v13 = *(void *)(a2 + v8 + 8);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    outlined copy of Data._Representation(*v12, v13);
    *(void *)uint64_t v11 = v14;
    *(void *)(v11 + 8) = v13;
  }
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  unint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *v17;
    outlined copy of Data._Representation(*v17, v17[1]);
    *(void *)uint64_t v16 = v19;
    *(void *)(v16 + 8) = v18;
  }
  uint64_t v20 = a3[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (uint64_t *)(a2 + v20);
  unint64_t v23 = v22[1];
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v24 = *v22;
    outlined copy of Data._Representation(*v22, v22[1]);
    *(void *)uint64_t v21 = v24;
    *(void *)(v21 + 8) = v23;
  }
  uint64_t v25 = a3[9];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (uint64_t *)(a2 + v25);
  unint64_t v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  }
  else
  {
    uint64_t v29 = *v27;
    outlined copy of Data._Representation(*v27, v27[1]);
    *(void *)uint64_t v26 = v29;
    *(void *)(v26 + 8) = v28;
  }
  uint64_t v30 = a3[10];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (uint64_t *)(a2 + v30);
  unint64_t v33 = v32[1];
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v34 = *v32;
    outlined copy of Data._Representation(*v32, v32[1]);
    *(void *)uint64_t v31 = v34;
    *(void *)(v31 + 8) = v33;
  }
  uint64_t v35 = a3[11];
  uint64_t v36 = a3[12];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = (uint64_t *)(a2 + v36);
  unint64_t v41 = *(void *)(a2 + v36 + 8);
  if (v41 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
  }
  else
  {
    uint64_t v42 = *v40;
    outlined copy of Data._Representation(*v40, v41);
    *(void *)uint64_t v39 = v42;
    *(void *)(v39 + 8) = v41;
  }
  uint64_t v43 = a3[13];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (uint64_t *)(a2 + v43);
  unint64_t v46 = v45[1];
  if (v46 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  }
  else
  {
    uint64_t v47 = *v45;
    outlined copy of Data._Representation(*v45, v45[1]);
    *(void *)uint64_t v44 = v47;
    *(void *)(v44 + 8) = v46;
  }
  return a1;
}

uint64_t assignWithCopy for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  unint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 == 15)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      outlined copy of Data._Representation(v15, v14);
      *uint64_t v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v12);
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  uint64_t v16 = *v13;
  outlined copy of Data._Representation(v16, v14);
  uint64_t v17 = *v12;
  unint64_t v18 = v12[1];
  *uint64_t v12 = v16;
  v12[1] = v14;
  outlined consume of Data._Representation(v17, v18);
LABEL_8:
  uint64_t v19 = a3[7];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a2 + v19 + 8);
  if (*(void *)(a1 + v19 + 8) >> 60 == 15)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      outlined copy of Data._Representation(v23, v22);
      *uint64_t v20 = v23;
      v20[1] = v22;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v22 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v20);
LABEL_13:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_15;
  }
  uint64_t v24 = *v21;
  outlined copy of Data._Representation(v24, v22);
  uint64_t v25 = *v20;
  unint64_t v26 = v20[1];
  *uint64_t v20 = v24;
  v20[1] = v22;
  outlined consume of Data._Representation(v25, v26);
LABEL_15:
  uint64_t v27 = a3[8];
  unint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = *(void *)(a2 + v27 + 8);
  if (*(void *)(a1 + v27 + 8) >> 60 == 15)
  {
    if (v30 >> 60 != 15)
    {
      uint64_t v31 = *v29;
      outlined copy of Data._Representation(v31, v30);
      *unint64_t v28 = v31;
      v28[1] = v30;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v30 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v28);
LABEL_20:
    *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
    goto LABEL_22;
  }
  uint64_t v32 = *v29;
  outlined copy of Data._Representation(v32, v30);
  uint64_t v33 = *v28;
  unint64_t v34 = v28[1];
  *unint64_t v28 = v32;
  v28[1] = v30;
  outlined consume of Data._Representation(v33, v34);
LABEL_22:
  uint64_t v35 = a3[9];
  uint64_t v36 = (uint64_t *)(a1 + v35);
  uint64_t v37 = (uint64_t *)(a2 + v35);
  unint64_t v38 = *(void *)(a2 + v35 + 8);
  if (*(void *)(a1 + v35 + 8) >> 60 == 15)
  {
    if (v38 >> 60 != 15)
    {
      uint64_t v39 = *v37;
      outlined copy of Data._Representation(v39, v38);
      *uint64_t v36 = v39;
      v36[1] = v38;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v38 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v36);
LABEL_27:
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    goto LABEL_29;
  }
  uint64_t v40 = *v37;
  outlined copy of Data._Representation(v40, v38);
  uint64_t v41 = *v36;
  unint64_t v42 = v36[1];
  *uint64_t v36 = v40;
  v36[1] = v38;
  outlined consume of Data._Representation(v41, v42);
LABEL_29:
  uint64_t v43 = a3[10];
  uint64_t v44 = (uint64_t *)(a1 + v43);
  uint64_t v45 = (uint64_t *)(a2 + v43);
  unint64_t v46 = *(void *)(a2 + v43 + 8);
  if (*(void *)(a1 + v43 + 8) >> 60 == 15)
  {
    if (v46 >> 60 != 15)
    {
      uint64_t v47 = *v45;
      outlined copy of Data._Representation(v47, v46);
      *uint64_t v44 = v47;
      v44[1] = v46;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v46 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v44);
LABEL_34:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_36;
  }
  uint64_t v48 = *v45;
  outlined copy of Data._Representation(v48, v46);
  uint64_t v49 = *v44;
  unint64_t v50 = v44[1];
  *uint64_t v44 = v48;
  v44[1] = v46;
  outlined consume of Data._Representation(v49, v50);
LABEL_36:
  uint64_t v51 = a3[11];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = (int *)(a2 + v51);
  int v54 = *v53;
  *(unsigned char *)(v52 + 4) = *((unsigned char *)v53 + 4);
  *(_DWORD *)uint64_t v52 = v54;
  uint64_t v55 = a3[12];
  uint64_t v56 = (uint64_t *)(a1 + v55);
  uint64_t v57 = (uint64_t *)(a2 + v55);
  unint64_t v58 = *(void *)(a2 + v55 + 8);
  if (*(void *)(a1 + v55 + 8) >> 60 == 15)
  {
    if (v58 >> 60 != 15)
    {
      uint64_t v59 = *v57;
      outlined copy of Data._Representation(v59, v58);
      *uint64_t v56 = v59;
      v56[1] = v58;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v58 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v56);
LABEL_41:
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    goto LABEL_43;
  }
  uint64_t v60 = *v57;
  outlined copy of Data._Representation(v60, v58);
  uint64_t v61 = *v56;
  unint64_t v62 = v56[1];
  *uint64_t v56 = v60;
  v56[1] = v58;
  outlined consume of Data._Representation(v61, v62);
LABEL_43:
  uint64_t v63 = a3[13];
  unint64_t v64 = (uint64_t *)(a1 + v63);
  id v65 = (uint64_t *)(a2 + v63);
  unint64_t v66 = *(void *)(a2 + v63 + 8);
  if (*(void *)(a1 + v63 + 8) >> 60 != 15)
  {
    if (v66 >> 60 != 15)
    {
      uint64_t v68 = *v65;
      outlined copy of Data._Representation(v68, v66);
      uint64_t v69 = *v64;
      unint64_t v70 = v64[1];
      uint64_t *v64 = v68;
      v64[1] = v66;
      outlined consume of Data._Representation(v69, v70);
      return a1;
    }
    outlined destroy of Data((uint64_t)v64);
    goto LABEL_48;
  }
  if (v66 >> 60 == 15)
  {
LABEL_48:
    *(_OWORD *)unint64_t v64 = *(_OWORD *)v65;
    return a1;
  }
  uint64_t v67 = *v65;
  outlined copy of Data._Representation(v67, v66);
  uint64_t *v64 = v67;
  v64[1] = v66;
  return a1;
}

uint64_t initializeWithTake for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[11];
  uint64_t v14 = a3[12];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  unint64_t v13 = *(void *)(a1 + v8 + 8);
  if (v13 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v14 = *(void *)(v12 + 8);
  if (v14 >> 60 == 15)
  {
    outlined destroy of Data(v11);
LABEL_4:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)v11;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = v14;
  outlined consume of Data._Representation(v15, v13);
LABEL_6:
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  unint64_t v19 = *(void *)(a1 + v16 + 8);
  if (v19 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_11;
  }
  unint64_t v20 = *(void *)(v18 + 8);
  if (v20 >> 60 == 15)
  {
    outlined destroy of Data(v17);
    goto LABEL_9;
  }
  uint64_t v21 = *(void *)v17;
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = v20;
  outlined consume of Data._Representation(v21, v19);
LABEL_11:
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  unint64_t v25 = *(void *)(a1 + v22 + 8);
  if (v25 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    goto LABEL_16;
  }
  unint64_t v26 = *(void *)(v24 + 8);
  if (v26 >> 60 == 15)
  {
    outlined destroy of Data(v23);
    goto LABEL_14;
  }
  uint64_t v27 = *(void *)v23;
  *(void *)uint64_t v23 = *(void *)v24;
  *(void *)(v23 + 8) = v26;
  outlined consume of Data._Representation(v27, v25);
LABEL_16:
  uint64_t v28 = a3[9];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  unint64_t v31 = *(void *)(a1 + v28 + 8);
  if (v31 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    goto LABEL_21;
  }
  unint64_t v32 = *(void *)(v30 + 8);
  if (v32 >> 60 == 15)
  {
    outlined destroy of Data(v29);
    goto LABEL_19;
  }
  uint64_t v33 = *(void *)v29;
  *(void *)uint64_t v29 = *(void *)v30;
  *(void *)(v29 + 8) = v32;
  outlined consume of Data._Representation(v33, v31);
LABEL_21:
  uint64_t v34 = a3[10];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  unint64_t v37 = *(void *)(a1 + v34 + 8);
  if (v37 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    goto LABEL_26;
  }
  unint64_t v38 = *(void *)(v36 + 8);
  if (v38 >> 60 == 15)
  {
    outlined destroy of Data(v35);
    goto LABEL_24;
  }
  uint64_t v39 = *(void *)v35;
  *(void *)uint64_t v35 = *(void *)v36;
  *(void *)(v35 + 8) = v38;
  outlined consume of Data._Representation(v39, v37);
LABEL_26:
  uint64_t v40 = a3[11];
  uint64_t v41 = a3[12];
  uint64_t v42 = a1 + v40;
  uint64_t v43 = a2 + v40;
  *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  *(unsigned char *)(v42 + 4) = *(unsigned char *)(v43 + 4);
  uint64_t v44 = a1 + v41;
  uint64_t v45 = a2 + v41;
  unint64_t v46 = *(void *)(a1 + v41 + 8);
  if (v46 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_31;
  }
  unint64_t v47 = *(void *)(v45 + 8);
  if (v47 >> 60 == 15)
  {
    outlined destroy of Data(v44);
    goto LABEL_29;
  }
  uint64_t v48 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v47;
  outlined consume of Data._Representation(v48, v46);
LABEL_31:
  uint64_t v49 = a3[13];
  unint64_t v50 = (uint64_t *)(a1 + v49);
  uint64_t v51 = (uint64_t *)(a2 + v49);
  unint64_t v52 = *(void *)(a1 + v49 + 8);
  if (v52 >> 60 != 15)
  {
    unint64_t v53 = v51[1];
    if (v53 >> 60 != 15)
    {
      uint64_t v54 = *v50;
      *unint64_t v50 = *v51;
      v50[1] = v53;
      outlined consume of Data._Representation(v54, v52);
      return a1;
    }
    outlined destroy of Data((uint64_t)v50);
  }
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v51;
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21646DC7C);
}

uint64_t sub_21646DC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t storeEnumTagSinglePayload for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21646DD5C);
}

uint64_t sub_21646DD5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 24));
    void *v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t type metadata completion function for TetraPB_TetraMessage()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TetraPB_TetraInnerMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm_4);
}

uint64_t storeEnumTagSinglePayload for TetraPB_TetraInnerMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm_4);
}

uint64_t type metadata completion function for TetraPB_TetraPublicPrekey()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraPB_PaddyKeyDistributionMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    unint64_t v19 = (uint64_t *)((char *)a2 + v15);
    unint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 8);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v21 = *v19;
      outlined copy of Data._Representation(*v19, v20);
      *(void *)uint64_t v18 = v21;
      *((void *)v18 + 1) = v20;
    }
  }
  return a1;
}

uint64_t destroy for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = *v8;
    return outlined consume of Data._Representation(v10, v9);
  }
  return result;
}

uint64_t initializeWithCopy for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  uint64_t v16 = a1 + v13;
  uint64_t v17 = (uint64_t *)(a2 + v13);
  unint64_t v18 = *(void *)(a2 + v13 + 8);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *v17;
    outlined copy of Data._Representation(*v17, v18);
    *(void *)uint64_t v16 = v19;
    *(void *)(v16 + 8) = v18;
  }
  return a1;
}

uint64_t assignWithCopy for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (int *)(a2 + v15);
  int v18 = *v17;
  *(unsigned char *)(v16 + 4) = *((unsigned char *)v17 + 4);
  *(_DWORD *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  unint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a2 + v19 + 8);
  if (*(void *)(a1 + v19 + 8) >> 60 != 15)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v24 = *v21;
      outlined copy of Data._Representation(v24, v22);
      uint64_t v25 = *v20;
      unint64_t v26 = v20[1];
      *unint64_t v20 = v24;
      v20[1] = v22;
      outlined consume of Data._Representation(v25, v26);
      return a1;
    }
    outlined destroy of Data((uint64_t)v20);
    goto LABEL_13;
  }
  if (v22 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    return a1;
  }
  uint64_t v23 = *v21;
  outlined copy of Data._Representation(v23, v22);
  *unint64_t v20 = v23;
  v20[1] = v22;
  return a1;
}

uint64_t initializeWithTake for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = (uint64_t *)(a1 + v14);
  int v18 = (uint64_t *)(a2 + v14);
  unint64_t v19 = *(void *)(a1 + v14 + 8);
  if (v19 >> 60 != 15)
  {
    unint64_t v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v17;
      *uint64_t v17 = *v18;
      v17[1] = v20;
      outlined consume of Data._Representation(v21, v19);
      return a1;
    }
    outlined destroy of Data((uint64_t)v17);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm_5);
}

uint64_t storeEnumTagSinglePayload for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm_5);
}

uint64_t type metadata completion function for TetraPB_PaddyKeyDistributionMessage()
{
  return type metadata completion function for TetraPB_KyberPrivateKey();
}

uint64_t one-time initialization function for paddySenderKeyIDPrefix()
{
  uint64_t result = specialized Data.init<A>(_:)(0xD00000000000001ELL, 0x800000021649C960);
  *(void *)&paddySenderKeyIDPrefix = result;
  *((void *)&paddySenderKeyIDPrefix + 1) = v1;
  return result;
}

uint64_t one-time initialization function for paddyRatchetMsgKeyPrefix()
{
  uint64_t result = specialized Data.init<A>(_:)(0xD00000000000002ELL, 0x800000021649C930);
  paddyRatchetMsgKeyPrefix = result;
  *(void *)algn_267980318 = v1;
  return result;
}

uint64_t one-time initialization function for paddyRatchetSenderKeyPrefix()
{
  uint64_t result = specialized Data.init<A>(_:)(0xD00000000000002DLL, 0x800000021649C900);
  paddyRatchetSenderKeyPrefix = result;
  *(void *)algn_267980328 = v1;
  return result;
}

unint64_t protocol witness for SymmetricRatchetStep.ratchet(_:) in conformance PaddyHKDFRatchet(char *a1, char *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v64 = a1;
  id v65 = a2;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SymmetricKey, UInt64));
  uint64_t v7 = MEMORY[0x270FA5388](v67);
  uint64_t v63 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v62 = (char *)v56 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v61 = (char *)v56 - v12;
  MEMORY[0x270FA5388](v11);
  unint64_t v70 = (char *)v56 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  unint64_t v17 = (unint64_t)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v19 = (char *)v56 - v18;
  unint64_t v20 = v4[1];
  uint64_t v68 = *v4;
  uint64_t v21 = type metadata accessor for SymmetricKey();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v23(v19, a3, v21);
  uint64_t v24 = *(int *)(v14 + 48);
  *(void *)&v19[v24] = a4;
  v23((char *)v17, (uint64_t)v19, v21);
  uint64_t v66 = v24;
  *(void *)(v17 + v24) = a4;
  outlined destroy of (key: SymmetricKey, index: UInt64)(v17);
  if (a4 == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v25 = *(int *)(v14 + 48);
    v23((char *)v17, (uint64_t)v19, v21);
    *(void *)(v17 + v25) = a4;
    (*(void (**)(unint64_t, uint64_t))(v22 + 8))(v17, v21);
    if (one-time initialization token for paddyRatchetMsgKeyPrefix == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v26 = v68;
  if (HIDWORD(a4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v28 = paddyRatchetMsgKeyPrefix;
    unint64_t v27 = *(void *)algn_267980318;
    __src = (void (*)(char *, uint64_t, uint64_t))a4;
    uint64_t v29 = specialized Data.InlineData.init(_:)(&__src, (unsigned char *)&__src + 4);
    unint64_t v69 = a4;
    uint64_t v30 = v29;
    unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v71 = v28;
    unint64_t v72 = v27;
    outlined copy of Data._Representation(v28, v27);
    specialized Data.append<A>(contentsOf:)(v30, v32);
    uint64_t v33 = v71;
    unint64_t v34 = v72;
    __src = (void (*)(char *, uint64_t, uint64_t))v71;
    unint64_t v74 = v72;
    outlined copy of Data._Representation(v26, v20);
    outlined copy of Data._Representation(v33, v34);
    specialized Data.append<A>(contentsOf:)(v26, v20);
    unint64_t v60 = v20;
    outlined consume of Data._Representation(v26, v20);
    outlined consume of Data._Representation(v33, v34);
    uint64_t v23 = __src;
    uint64_t v35 = *(int *)(v67 + 48);
    unint64_t v57 = v74;
    uint64_t v36 = type metadata accessor for SHA256();
    uint64_t v37 = _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
    uint64_t v38 = _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
    v56[1] = lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v39 = v70;
    uint64_t v67 = v36;
    uint64_t v58 = v38;
    uint64_t v59 = v37;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    *(void *)&v39[v35] = v69;
    uint64_t v40 = *(void *)&v19[v66];
    unint64_t v17 = v40 + 1;
    if (v40 != -1)
    {
      if (one-time initialization token for paddyRatchetSenderKeyPrefix == -1) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_12:
  swift_once();
LABEL_6:
  unint64_t v41 = v60;
  if (HIDWORD(v17)) {
    __break(1u);
  }
  uint64_t v66 = (uint64_t)v23;
  uint64_t v43 = paddyRatchetSenderKeyPrefix;
  unint64_t v42 = *(void *)algn_267980328;
  __src = (void (*)(char *, uint64_t, uint64_t))v17;
  uint64_t v44 = specialized Data.InlineData.init(_:)(&__src, (unsigned char *)&__src + 4);
  unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v71 = v43;
  unint64_t v72 = v42;
  outlined copy of Data._Representation(v43, v42);
  specialized Data.append<A>(contentsOf:)(v44, v46);
  uint64_t v47 = v71;
  unint64_t v48 = v72;
  __src = (void (*)(char *, uint64_t, uint64_t))v71;
  unint64_t v74 = v72;
  outlined copy of Data._Representation(v26, v41);
  outlined copy of Data._Representation(v47, v48);
  specialized Data.append<A>(contentsOf:)(v26, v41);
  outlined consume of Data._Representation(v26, v41);
  outlined consume of Data._Representation(v47, v48);
  uint64_t v49 = (uint64_t)__src;
  unint64_t v50 = v74;
  uint64_t v51 = v61;
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  outlined consume of Data._Representation(v66, v57);
  outlined consume of Data._Representation(v49, v50);
  outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v19);
  unint64_t v52 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  unint64_t v53 = v62;
  v52(v62, v70, v21);
  v52(v64, v53, v21);
  uint64_t v54 = v63;
  v52(v63, v51, v21);
  v52(v65, v54, v21);
  return v69;
}

uint64_t closure #1 in deriveSenderKeyID(key:info:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void v14[3] = MEMORY[0x263F8D3E8];
  void v14[4] = MEMORY[0x263F07B80];
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x263F8D3E8]);
  int v5 = (unsigned char *)*v4;
  if (*v4 && (uint64_t v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = specialized Data.InlineData.init(_:)(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = specialized Data.LargeSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = specialized Data.InlineSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t PaddyOutgoingSymmetricRatchet.init(conversationDST:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = a3;
  uint64_t v41 = a1;
  uint64_t v4 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SymmetricKeySize();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v36 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v33 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v33 - v15;
  static SymmetricKeySize.bits256.getter();
  SymmetricKey.init(size:)();
  unint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v17(v14, v16, v8);
  uint64_t v39 = &type metadata for PaddyHKDFRatchet;
  uint64_t v40 = &protocol witness table for PaddyHKDFRatchet;
  uint64_t v18 = v41;
  *(void *)&long long v38 = v41;
  *((void *)&v38 + 1) = a2;
  unint64_t v19 = (void (*)(char *, uint64_t))*(int *)(v4 + 20);
  uint64_t v35 = v6;
  uint64_t v33 = v19;
  *(void *)((char *)v19 + (void)v6) = MEMORY[0x263F8EE80];
  uint64_t v20 = v18;
  unint64_t v37 = a2;
  outlined copy of Data._Representation(v18, a2);
  if (SymmetricKey.bitCount.getter() >= 256)
  {
    uint64_t v25 = (uint64_t)v35;
    outlined init with copy of SymmetricRatchetStep((uint64_t)&v38, (uint64_t)&v35[*(int *)(v4 + 24)]);
    uint64_t v26 = v36;
    v17(v36, v14, v8);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
    uint64_t v33 = *(void (**)(char *, uint64_t))(v9 + 8);
    v33(v14, v8);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v26, v8);
    *(void *)(v25
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                       + 48)) = 0;
    uint64_t v27 = v34;
    outlined init with take of SymmetricRatchet(v25, v34);
    if (one-time initialization token for paddySenderKeyIDPrefix != -1) {
      swift_once();
    }
    long long v38 = paddySenderKeyIDPrefix;
    type metadata accessor for SHA256();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v28 = v36;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    SymmetricKey.withUnsafeBytes<A>(_:)();
    uint64_t v29 = v33;
    v33(v28, v8);
    long long v30 = v38;
    v29(v16, v8);
    uint64_t result = type metadata accessor for PaddyOutgoingSymmetricRatchet(0);
    *(_OWORD *)(v27 + *(int *)(result + 20)) = v30;
    uint64_t v31 = (uint64_t *)(v27 + *(int *)(result + 24));
    unint64_t v32 = v37;
    uint64_t *v31 = v41;
    v31[1] = v32;
  }
  else
  {
    uint64_t v21 = type metadata accessor for CryptoKitError();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104))(v22, *MEMORY[0x263F04530], v21);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v14, v8);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v20, v37);
    return ((uint64_t (*)(char *, uint64_t))v23)(v16, v8);
  }
  return result;
}

uint64_t outlined init with take of SymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricRatchet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PaddyOutgoingSymmetricRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for PaddyOutgoingSymmetricRatchet);
}

uint64_t PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)(a1, a2, a3, a4, type metadata accessor for PaddyOutgoingSymmetricRatchet, a5);
}

uint64_t _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t PaddyOutgoingSymmetricRatchet.exportSenderKey()(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(v4 + 56);
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, v1, v8);
  uint64_t v10 = *(void *)(v1 + v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v6, v8);
  return v10;
}

uint64_t PaddyOutgoingSymmetricRatchet.seal(message:authenticatedData:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  unint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v24 = a1;
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v23 - v15;
  unint64_t v17 = *(void *)(v4 + *(int *)(v14 + 48));
  if (v17 == -1)
  {
    lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
    swift_allocError();
    *uint64_t v22 = 0;
    swift_willThrow();
    goto LABEL_6;
  }
  SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v17, 1, (uint64_t)v9);
  if (v5)
  {
LABEL_6:
    swift_unexpectedError();
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v18 = *(int *)(v10 + 48);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v9, v6);
  *(void *)&v16[v18] = v17;
  uint64_t v19 = static PaddySymmetricLayer.seal(_:authenticatedData:using:)(v24, v25, v26, v27, (uint64_t)v16);
  uint64_t v20 = *(int *)(v10 + 48);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v16, v6);
  *(void *)&v13[v20] = v17;
  if (!HIDWORD(v17))
  {
    outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    return v19;
  }
LABEL_7:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PaddyOutgoingSymmetricRatchet.serializedData()()
{
  return PaddyOutgoingSymmetricRatchet.serializedData()(type metadata accessor for PaddyOutgoingSymmetricRatchet);
}

uint64_t PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()()
{
  return PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()(type metadata accessor for PaddyOutgoingSymmetricRatchet);
}

uint64_t PaddyIncomingSymmetricRatchet.init(senderKey:conversationDST:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a4;
  unint64_t v42 = a3;
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v34 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v12 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  unint64_t v37 = a1;
  uint64_t v38 = v6;
  uint64_t v16 = a1;
  unint64_t v17 = v42;
  v15(v11, (uint64_t)v16, v6);
  uint64_t v40 = &type metadata for PaddyHKDFRatchet;
  uint64_t v41 = &protocol witness table for PaddyHKDFRatchet;
  *(void *)&long long v39 = a2;
  *((void *)&v39 + 1) = v17;
  *(void *)&v14[*(int *)(v12 + 20)] = MEMORY[0x263F8EE80];
  uint64_t v36 = a2;
  outlined copy of Data._Representation(a2, v17);
  if (SymmetricKey.bitCount.getter() >= 256)
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)&v39, (uint64_t)&v14[*(int *)(v12 + 24)]);
    uint64_t v24 = v34;
    uint64_t v25 = v38;
    v15(v34, (uint64_t)v11, v38);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v39);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    v26(v11, v25);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v24, v25);
    *(void *)&v14[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48)] = 0;
    outlined init with take of SymmetricRatchet((uint64_t)v14, v35);
    if (one-time initialization token for paddySenderKeyIDPrefix != -1) {
      swift_once();
    }
    long long v39 = paddySenderKeyIDPrefix;
    type metadata accessor for SHA256();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v27 = v37;
    uint64_t v28 = v24;
    uint64_t v29 = v38;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    SymmetricKey.withUnsafeBytes<A>(_:)();
    v26(v28, v29);
    long long v30 = v39;
    v26(v27, v29);
    uint64_t result = type metadata accessor for PaddyIncomingSymmetricRatchet(0);
    uint64_t v31 = v35;
    *(_OWORD *)(v35 + *(int *)(result + 20)) = v30;
    unint64_t v32 = (void *)(v31 + *(int *)(result + 24));
    unint64_t v33 = v42;
    *unint64_t v32 = v36;
    v32[1] = v33;
  }
  else
  {
    uint64_t v18 = type metadata accessor for CryptoKitError();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, *MEMORY[0x263F04530], v18);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v39);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v21 = v11;
    uint64_t v22 = v38;
    v20(v21, v38);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v36, v17);
    return ((uint64_t (*)(char *, uint64_t))v20)(v37, v22);
  }
  return result;
}

uint64_t PaddyIncomingSymmetricRatchet.init(senderKey:index:senderKeyID:conversationDST:)@<X0>(char *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v36 = a7;
  unint64_t v43 = a4;
  uint64_t v41 = a3;
  unsigned int v35 = a2;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v34 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v11;
  uint64_t v38 = a1;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19(v15, (uint64_t)a1, v10);
  v42[3] = &type metadata for PaddyHKDFRatchet;
  v42[4] = &protocol witness table for PaddyHKDFRatchet;
  v42[0] = a5;
  v42[1] = a6;
  *(void *)&v18[*(int *)(v16 + 20)] = MEMORY[0x263F8EE80];
  uint64_t v39 = a5;
  unint64_t v40 = a6;
  outlined copy of Data._Representation(a5, a6);
  if (SymmetricKey.bitCount.getter() >= 256)
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)v42, (uint64_t)&v18[*(int *)(v16 + 24)]);
    uint64_t v24 = v34;
    v19(v34, (uint64_t)v15, v10);
    uint64_t v25 = v35;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
    uint64_t v26 = v37;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v37 + 8);
    v27(v15, v10);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v18, v24, v10);
    *(void *)&v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48)] = v25;
    v27(v38, v10);
    uint64_t v28 = (uint64_t)v18;
    uint64_t v29 = v36;
    outlined init with take of SymmetricRatchet(v28, v36);
    uint64_t result = type metadata accessor for PaddyIncomingSymmetricRatchet(0);
    long long v30 = (void *)(v29 + *(int *)(result + 24));
    unint64_t v31 = v40;
    *long long v30 = v39;
    v30[1] = v31;
    unint64_t v32 = (void *)(v29 + *(int *)(result + 20));
    unint64_t v33 = v43;
    *unint64_t v32 = v41;
    v32[1] = v33;
  }
  else
  {
    uint64_t v20 = type metadata accessor for CryptoKitError();
    _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, *MEMORY[0x263F04530], v20);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v37 + 8);
    v22(v15, v10);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v39, v40);
    outlined consume of Data._Representation(v41, v43);
    return ((uint64_t (*)(char *, uint64_t))v22)(v38, v10);
  }
  return result;
}

uint64_t PaddyIncomingSymmetricRatchet.init(data:conversationDST:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)(a1, a2, a3, a4, type metadata accessor for PaddyIncomingSymmetricRatchet, a5);
}

uint64_t PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  unint64_t v57 = a5;
  uint64_t v53 = a6;
  uint64_t v11 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v15 = (int *)type metadata accessor for MPPB_LiteRatchet();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
  Message.init(serializedData:extensions:partial:options:)();
  if (v6)
  {
    outlined consume of Data._Representation(a3, a4);
    return outlined consume of Data._Representation(a1, a2);
  }
  else
  {
    unint64_t v51 = a2;
    uint64_t v49 = v13;
    uint64_t v19 = (uint64_t *)&v17[v15[7]];
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    if (v21 >> 60 == 15) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = *v19;
    }
    if (v21 >> 60 == 15) {
      unint64_t v23 = 0xC000000000000000;
    }
    else {
      unint64_t v23 = v19[1];
    }
    uint64_t v48 = *v19;
    outlined copy of Data?(v20, v21);
    *(void *)&long long v52 = a3;
    *((void *)&v52 + 1) = a4;
    uint64_t v24 = a3;
    uint64_t v25 = v22;
    char v26 = specialized static Data.== infix(_:_:)(v24, a4, v22, v23);
    unint64_t v50 = v23;
    outlined consume of Data._Representation(v22, v23);
    if (v26)
    {
      uint64_t v27 = (uint64_t *)&v17[v15[6]];
      uint64_t v28 = *v27;
      unint64_t v29 = v27[1];
      uint64_t v30 = v53;
      if (v29 >> 60 == 15) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = *v27;
      }
      unint64_t v32 = 0xC000000000000000;
      if (v29 >> 60 != 15) {
        unint64_t v32 = v29;
      }
      unint64_t v46 = v32;
      uint64_t v47 = v28;
      uint64_t v33 = v57(0);
      uint64_t v34 = (uint64_t *)(v30 + *(int *)(v33 + 20));
      uint64_t v45 = v34;
      unint64_t v35 = v46;
      *uint64_t v34 = v31;
      v34[1] = v35;
      uint64_t v36 = (uint64_t *)(v30 + *(int *)(v33 + 24));
      unint64_t v37 = v50;
      *uint64_t v36 = v25;
      v36[1] = v37;
      uint64_t v38 = (uint64_t *)&v17[v15[5]];
      uint64_t v39 = *v38;
      unint64_t v40 = v38[1];
      if (v40 >> 60 == 15) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = (uint64_t (*)(void))*v38;
      }
      unint64_t v57 = v41;
      unint64_t v42 = 0xC000000000000000;
      if (v40 >> 60 != 15) {
        unint64_t v42 = v40;
      }
      unint64_t v46 = v42;
      *((void *)&v55 + 1) = &type metadata for PaddyHKDFRatchet;
      uint64_t v56 = &protocol witness table for PaddyHKDFRatchet;
      long long v54 = v52;
      outlined copy of Data?(v48, v21);
      outlined copy of Data?(v47, v29);
      outlined copy of Data?(v39, v40);
      uint64_t v43 = (uint64_t)v49;
      SymmetricRatchet.init(data:step:)((uint64_t)v57, v46, (uint64_t)&v54, (unint64_t)v49);
      outlined consume of Data._Representation(a1, v51);
      outlined destroy of MPPB_LiteRatchet((uint64_t)v17);
      return outlined init with take of SymmetricRatchet(v43, v30);
    }
    else
    {
      lazy protocol witness table accessor for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors();
      swift_allocError();
      *uint64_t v44 = 1;
      swift_willThrow();
      outlined consume of Data._Representation(v52, *((unint64_t *)&v52 + 1));
      outlined consume of Data._Representation(a1, v51);
      return outlined destroy of MPPB_LiteRatchet((uint64_t)v17);
    }
  }
}

uint64_t PaddyIncomingSymmetricRatchet.serializedData()()
{
  return PaddyOutgoingSymmetricRatchet.serializedData()(type metadata accessor for PaddyIncomingSymmetricRatchet);
}

uint64_t PaddyOutgoingSymmetricRatchet.serializedData()(uint64_t (*a1)(void))
{
  uint64_t v3 = (int *)type metadata accessor for MPPB_LiteRatchet();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  uint64_t v6 = &v5[v3[5]];
  *(_OWORD *)uint64_t v6 = xmmword_216494780;
  uint64_t v7 = &v5[v3[6]];
  *(_OWORD *)uint64_t v7 = xmmword_216494780;
  uint64_t v8 = &v5[v3[7]];
  *(_OWORD *)uint64_t v8 = xmmword_216494780;
  *(void *)uint64_t v6 = SymmetricRatchet.serializedData()();
  *((void *)v6 + 1) = v9;
  uint64_t v10 = a1(0);
  uint64_t v11 = (uint64_t *)(v1 + *(int *)(v10 + 20));
  uint64_t v13 = *v11;
  unint64_t v12 = v11[1];
  *(void *)uint64_t v7 = *v11;
  *((void *)v7 + 1) = v12;
  uint64_t v14 = (uint64_t *)(v1 + *(int *)(v10 + 24));
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  *(void *)uint64_t v8 = *v14;
  *((void *)v8 + 1) = v16;
  outlined copy of Data._Representation(v13, v12);
  outlined copy of Data._Representation(v15, v16);
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_1(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (void (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet);
  uint64_t v17 = Message.serializedData(partial:)();
  outlined destroy of MPPB_LiteRatchet((uint64_t)v5);
  return v17;
}

unint64_t PaddyIncomingSymmetricRatchet.open(_:authenticatedData:index:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v16 = a4;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(a5, 1, (uint64_t)v13);
  if (!v5)
  {
    a2 = static PaddySymmetricLayer.open(_:authenticatedData:using:)(a1, a2, a3, v16, (uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return a2;
}

uint64_t PaddyIncomingSymmetricRatchet.ratchetSenderKeyID()()
{
  return PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()(type metadata accessor for PaddyIncomingSymmetricRatchet);
}

uint64_t PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 20);
  uint64_t v3 = *(void *)v2;
  outlined copy of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

unint64_t lazy protocol witness table accessor for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors);
  }
  return result;
}

uint64_t outlined destroy of MPPB_LiteRatchet(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MPPB_LiteRatchet();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PaddyIncomingSymmetricRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for PaddyIncomingSymmetricRatchet);
}

uint64_t getEnumTagSinglePayload for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t *initializeBufferWithCopyOfBuffer for PaddyOutgoingSymmetricRatchet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 48));
    uint64_t v9 = type metadata accessor for SymmetricRatchet();
    *(uint64_t *)((char *)a1 + *(int *)(v9 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 20));
    uint64_t v10 = *(int *)(v9 + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    long long v13 = *(_OWORD *)((char *)a2 + v10 + 24);
    *(_OWORD *)((char *)a1 + v10 + 24) = v13;
    uint64_t v14 = v13;
    uint64_t v15 = **(void (***)(char *, char *, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    v15(v11, v12, v14);
    uint64_t v16 = *(int *)(a3 + 20);
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    outlined copy of Data._Representation(*v18, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
    uint64_t v21 = *(int *)(a3 + 24);
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    unint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    outlined copy of Data._Representation(*v23, v25);
    *uint64_t v22 = v24;
    v22[1] = v25;
  }
  return a1;
}

uint64_t destroy for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for SymmetricRatchet();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(a1 + *(int *)(v5 + 24));
  outlined consume of Data._Representation(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  return outlined consume of Data._Representation(v7, v8);
}

uint64_t initializeWithCopy for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
  uint64_t v8 = type metadata accessor for SymmetricRatchet();
  *(void *)(a1 + *(int *)(v8 + 20)) = *(void *)(a2 + *(int *)(v8 + 20));
  uint64_t v9 = *(int *)(v8 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  long long v12 = *(_OWORD *)(a2 + v9 + 24);
  *(_OWORD *)(a1 + v9 + 24) = v12;
  uint64_t v13 = v12;
  uint64_t v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  swift_bridgeObjectRetain();
  v14(v10, v11, v13);
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  outlined copy of Data._Representation(*v17, v19);
  *uint64_t v16 = v18;
  v16[1] = v19;
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = (uint64_t *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  outlined copy of Data._Representation(*v22, v24);
  *uint64_t v21 = v23;
  v21[1] = v24;
  return a1;
}

uint64_t assignWithCopy for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
  uint64_t v8 = type metadata accessor for SymmetricRatchet();
  *(void *)(a1 + *(int *)(v8 + 20)) = *(void *)(a2 + *(int *)(v8 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(v8 + 24)), (uint64_t *)(a2 + *(int *)(v8 + 24)));
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (uint64_t *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  outlined copy of Data._Representation(*v11, v13);
  uint64_t v14 = *v10;
  unint64_t v15 = v10[1];
  *uint64_t v10 = v12;
  v10[1] = v13;
  outlined consume of Data._Representation(v14, v15);
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (uint64_t *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  outlined copy of Data._Representation(*v18, v20);
  uint64_t v21 = *v17;
  unint64_t v22 = v17[1];
  *uint64_t v17 = v19;
  v17[1] = v20;
  outlined consume of Data._Representation(v21, v22);
  return a1;
}

uint64_t initializeWithTake for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
  uint64_t v8 = type metadata accessor for SymmetricRatchet();
  *(void *)(a1 + *(int *)(v8 + 20)) = *(void *)(a2 + *(int *)(v8 + 20));
  uint64_t v9 = *(int *)(v8 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  uint64_t v13 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v7 + 48)) = *(void *)(a2 + *(int *)(v7 + 48));
  uint64_t v8 = type metadata accessor for SymmetricRatchet();
  *(void *)(a1 + *(int *)(v8 + 20)) = *(void *)(a2 + *(int *)(v8 + 20));
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(v8 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  __swift_destroy_boxed_opaque_existential_0(a1 + v9);
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  outlined consume of Data._Representation(v14, v15);
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  outlined consume of Data._Representation(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaddyIncomingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

uint64_t storeEnumTagSinglePayload for PaddyIncomingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

uint64_t type metadata completion function for PaddyOutgoingSymmetricRatchet()
{
  uint64_t result = type metadata accessor for SymmetricRatchet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PaddyHKDFRatchet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithCopy for PaddyHKDFRatchet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for PaddyHKDFRatchet(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaddyHKDFRatchet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PaddyHKDFRatchet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaddyHKDFRatchet()
{
  return &type metadata for PaddyHKDFRatchet;
}

void specialized Data.append<A>(contentsOf:)(void *a1)
{
  uint64_t v2 = v1;
  v40[5] = *MEMORY[0x263EF8340];
  type metadata accessor for NSData();
  id v4 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of Message(v38, (uint64_t)v40);
    uint64_t v5 = __swift_project_boxed_opaque_existential_1(v40, v40[3]);
    MEMORY[0x270FA5388](v5);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
    return;
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  outlined destroy of ContiguousBytes?((uint64_t)v38);
  uint64_t v6 = NSData.startIndex.getter();
  uint64_t v7 = NSData.endIndex.getter();
  uint64_t v8 = NSData.startIndex.getter();
  uint64_t v9 = NSData.endIndex.getter();
  if (v6 < v8 || v9 < v6) {
    goto LABEL_44;
  }
  uint64_t v10 = NSData.startIndex.getter();
  uint64_t v11 = NSData.endIndex.getter();
  if (v7 < v10 || v11 < v7) {
    goto LABEL_45;
  }
  BOOL v12 = __OFSUB__(v7, v6);
  uint64_t v13 = v7 - v6;
  if (v12) {
    goto LABEL_46;
  }
  uint64_t v14 = *v2;
  unint64_t v15 = v2[1];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  switch(v15 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v14), v14)) {
        goto LABEL_53;
      }
      uint64_t v17 = HIDWORD(v14) - (int)v14;
      uint64_t v16 = v14 >> 32;
LABEL_13:
      if (__OFADD__(v16, v13)) {
        goto LABEL_47;
      }
      if (v16 + v13 < v16) {
        goto LABEL_48;
      }
      if (v16 < 0) {
        goto LABEL_49;
      }
      uint64_t v20 = Data._Representation.resetBytes(in:)();
      MEMORY[0x270FA5388](v20);
      uint64_t v23 = specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.append<A>(contentsOf:));
      if (v22 != v13) {
        goto LABEL_29;
      }
      uint64_t v24 = v21;
      memset(v40, 0, 15);
      if (v21 == NSData.endIndex.getter()) {
        goto LABEL_40;
      }
      uint64_t v17 = NSData.subscript.getter();
      uint64_t v23 = v23;
      uint64_t v25 = NSData.startIndex.getter();
      uint64_t v26 = NSData.endIndex.getter();

      if (v24 < v25 || v24 >= v26) {
        goto LABEL_28;
      }
      LOBYTE(v27) = 0;
      uint64_t v28 = v24 + 1;
      break;
    case 2uLL:
      uint64_t v19 = v14 + 16;
      uint64_t v18 = *(void *)(v14 + 16);
      uint64_t v16 = *(void *)(v19 + 8);
      uint64_t v17 = v16 - v18;
      if (!__OFSUB__(v16, v18)) {
        goto LABEL_13;
      }
      goto LABEL_54;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v16 = BYTE6(v15);
      uint64_t v17 = BYTE6(v15);
      goto LABEL_13;
  }
  while (1)
  {
    *((unsigned char *)v40 + v27) = v17;
    unsigned int v27 = v27 + 1;
    if ((v27 >> 8))
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v27 == 14)
    {
      *(void *)&v38[0] = v40[0];
      DWORD2(v38[0]) = v40[1];
      WORD6(v38[0]) = WORD2(v40[1]);
      Data._Representation.append(contentsOf:)();
      if (v28 == NSData.endIndex.getter()) {
        goto LABEL_40;
      }
      LOBYTE(v27) = 0;
      goto LABEL_26;
    }
    if (v28 == NSData.endIndex.getter()) {
      break;
    }
LABEL_26:
    uint64_t v17 = NSData.subscript.getter();
    unint64_t v29 = v23;
    uint64_t v30 = NSData.startIndex.getter();
    uint64_t v31 = NSData.endIndex.getter();

    if (v28 >= v30 && v28++ < v31) {
      continue;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    uint64_t v33 = *v2;
    unint64_t v34 = v2[1];
    uint64_t v35 = 0;
    switch(v34 >> 62)
    {
      case 1uLL:
        uint64_t v35 = (int)v33;
        break;
      case 2uLL:
        uint64_t v35 = *(void *)(v33 + 16);
        break;
      default:
        break;
    }
    BOOL v12 = __OFADD__(v35, v17);
    uint64_t v36 = v35 + v17;
    if (!v12)
    {
      if (!__OFADD__(v36, v22))
      {
        uint64_t v37 = 0;
        switch(v34 >> 62)
        {
          case 1uLL:
            uint64_t v37 = v33 >> 32;
            break;
          case 2uLL:
            uint64_t v37 = *(void *)(v33 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v37 = BYTE6(v34);
            break;
        }
        if (v37 >= v36 + v22)
        {
          Data._Representation.replaceSubrange(_:with:count:)();
          goto LABEL_40;
        }
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
      }
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(void *)&v38[0] = v40[0];
  DWORD2(v38[0]) = v40[1];
  WORD6(v38[0]) = WORD2(v40[1]);
  Data._Representation.append(contentsOf:)();
LABEL_40:
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  v10[5] = *MEMORY[0x263EF8340];
  v10[3] = MEMORY[0x263F06F78];
  v10[4] = MEMORY[0x263F06F68];
  v10[0] = a1;
  v10[1] = a2;
  id v4 = __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x263F06F78]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(v5, v6);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v5, v5 >> 32);
      outlined consume of Data._Representation(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      outlined copy of Data._Representation(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
}

uint64_t one-time initialization function for tetraDHRatchetStepKDFString()
{
  uint64_t result = specialized Data.init<A>(_:)(0xD00000000000001DLL, 0x800000021649C9E0);
  tetraDHRatchetStepKDFString = result;
  *(void *)algn_26AC052E8 = v1;
  return result;
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStepKDFStringBase()
{
  uint64_t result = specialized Data.init<A>(_:)(0xD00000000000001CLL, 0x800000021649C9A0);
  tetraSymmetricKeyRatchetStepKDFStringBase = result;
  unk_26AC05200 = v1;
  return result;
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel(uint64_t a1)
{
  return one-time initialization function for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel(a1, 0xD000000000000012, 0x800000021649C9C0, &tetraSymmetricKeyRatchetStepChainKeyDerivationLabel, &qword_26AC052A0);
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel(uint64_t a1)
{
  return one-time initialization function for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel(a1, 0xD000000000000014, 0x800000021649C980, &tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel, &qword_26AC05290);
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5)
{
  if (one-time initialization token for tetraSymmetricKeyRatchetStepKDFStringBase != -1) {
    swift_once();
  }
  uint64_t v9 = tetraSymmetricKeyRatchetStepKDFStringBase;
  unint64_t v10 = qword_26AC05200;
  outlined copy of Data._Representation(tetraSymmetricKeyRatchetStepKDFStringBase, qword_26AC05200);
  uint64_t v11 = specialized Data.init<A>(_:)(a2, a3);
  unint64_t v13 = v12;
  *a4 = v9;
  *a5 = v10;
  outlined copy of Data._Representation(v9, v10);
  outlined copy of Data._Representation(v11, v13);
  specialized Data.append<A>(contentsOf:)(v11, v13);
  outlined consume of Data._Representation(v11, v13);
  outlined consume of Data._Representation(v11, v13);
  return outlined consume of Data._Representation(v9, v10);
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStep()
{
  if (one-time initialization token for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel != -1) {
    swift_once();
  }
  uint64_t v0 = tetraSymmetricKeyRatchetStepChainKeyDerivationLabel;
  unint64_t v1 = qword_26AC052A0;
  outlined copy of Data._Representation(tetraSymmetricKeyRatchetStepChainKeyDerivationLabel, qword_26AC052A0);
  if (one-time initialization token for tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel != -1) {
    swift_once();
  }
  uint64_t v2 = tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel;
  unint64_t v3 = qword_26AC05290;
  tetraSymmetricKeyRatchetStep = v0;
  *(void *)algn_26AC052F8 = v1;
  qword_26AC05300 = tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel;
  unk_26AC05308 = qword_26AC05290;
  qword_26AC05310 = 32;
  byte_26AC05318 = 0;
  return outlined copy of Data._Representation(v2, v3);
}

uint64_t closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

unsigned char *partial apply for specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, *(void *)(v3 + 16), **(void ***)(v3 + 32));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
  }
  return result;
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

unsigned char *specialized closure #3 in Data.append<A>(contentsOf:)(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result)
  {
    *(void *)(swift_allocObject() + 16) = a4;
    id v9 = a4;
    NSData.startIndex.getter();
    goto LABEL_5;
  }
  unint64_t v6 = result;
  uint64_t v7 = a2 - (void)result - a3;
  if (!__OFSUB__(a2 - (void)result, a3))
  {
    *(void *)(swift_allocObject() + 16) = a4;
    id v8 = a4;
    specialized Sequence._copySequenceContents(initializing:)(&v10, &v6[a3], v7);
    id v9 = v10;
LABEL_5:
    swift_release();

    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_216471FFC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id TetraVersions.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraVersions();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TetraVersions()
{
  return self;
}

id Kyber1024ObjCPrivateKey.init(protoBufData:)(uint64_t a1, unint64_t a2)
{
  id v4 = v2;
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v7 - 8);
  id v8 = (int *)type metadata accessor for TetraPB_KyberPrivateKey(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)v32 - v12;
  uint64_t v33 = 0;
  memset(v32, 0, sizeof(v32));
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey();
  Message.init(serializedData:extensions:partial:options:)();
  if (v3)
  {
    outlined consume of Data._Representation(a1, a2);
LABEL_10:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return v4;
  }
  uint64_t v14 = (uint64_t *)&v13[v8[5]];
  if ((unint64_t)v14[1] >> 60 == 15)
  {
    lazy protocol witness table accessor for type TetraKeyStorageError and conformance TetraKeyStorageError();
    swift_allocError();
    *unint64_t v15 = 0;
LABEL_9:
    swift_willThrow();
    outlined consume of Data._Representation(a1, a2);
    outlined destroy of SecureEnclave.Kyber1024.PrivateKey((uint64_t)v13, type metadata accessor for TetraPB_KyberPrivateKey);
    goto LABEL_10;
  }
  uint64_t v16 = &v13[v8[6]];
  if (v16[9])
  {
LABEL_8:
    lazy protocol witness table accessor for type TetraKeyStorageError and conformance TetraKeyStorageError();
    swift_allocError();
    *uint64_t v18 = 1;
    goto LABEL_9;
  }
  uint64_t v17 = *(void *)v16;
  if (v16[8])
  {
    if (!v17) {
      goto LABEL_8;
    }
  }
  else if (v17 != 1)
  {
    goto LABEL_8;
  }
  char v20 = v13[v8[7] + 9];
  outlined init with copy of TetraPB_KyberPrivateKey((uint64_t)v13, (uint64_t)v11);
  if (v20) {
    goto LABEL_15;
  }
  uint64_t v21 = &v11[v8[7]];
  if (v21[9]) {
    goto LABEL_15;
  }
  uint64_t v28 = *(void *)v21;
  if ((v21[8] & 1) == 0)
  {
    outlined destroy of SecureEnclave.Kyber1024.PrivateKey((uint64_t)v11, type metadata accessor for TetraPB_KyberPrivateKey);
    if (v28 != 1) {
      goto LABEL_16;
    }
LABEL_32:
    unint64_t v29 = v14[1];
    if (v29 >> 60 == 15) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *v14;
    }
    if (v29 >> 60 == 15) {
      unint64_t v31 = 0xC000000000000000;
    }
    else {
      unint64_t v31 = v14[1];
    }
    outlined copy of Data?(*v14, v29);
    v25.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v30, v31);
    *(void *)&v32[0] = 0;
    id v26 = objc_msgSend(v2, sel_initWithSepKeyBytes_error_, v25.super.isa, v32);
    goto LABEL_23;
  }
  if (v28)
  {
    outlined destroy of SecureEnclave.Kyber1024.PrivateKey((uint64_t)v11, type metadata accessor for TetraPB_KyberPrivateKey);
    goto LABEL_32;
  }
LABEL_15:
  outlined destroy of SecureEnclave.Kyber1024.PrivateKey((uint64_t)v11, type metadata accessor for TetraPB_KyberPrivateKey);
LABEL_16:
  unint64_t v22 = v14[1];
  if (v22 >> 60 == 15) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *v14;
  }
  if (v22 >> 60 == 15) {
    unint64_t v24 = 0xC000000000000000;
  }
  else {
    unint64_t v24 = v14[1];
  }
  outlined copy of Data?(*v14, v22);
  v25.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v23, v24);
  *(void *)&v32[0] = 0;
  id v26 = objc_msgSend(v2, sel_initWithApKeyBytes_error_, v25.super.isa, v32);
LABEL_23:
  id v4 = v26;

  if (v4)
  {
    id v27 = *(id *)&v32[0];
  }
  else
  {
    id v4 = *(id *)&v32[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  outlined consume of Data._Representation(a1, a2);
  outlined destroy of SecureEnclave.Kyber1024.PrivateKey((uint64_t)v13, type metadata accessor for TetraPB_KyberPrivateKey);
  return v4;
}

uint64_t Kyber1024ObjCPrivateKey.protobufData.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v31 = (uint64_t)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v35 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for TetraPB_KyberPrivateKey(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  unint64_t v15 = &v14[v12[5]];
  *(_OWORD *)unint64_t v15 = xmmword_216494780;
  uint64_t v16 = &v14[v12[6]];
  *(void *)uint64_t v16 = 0;
  *((_WORD *)v16 + 4) = 256;
  uint64_t v34 = v12;
  uint64_t v17 = &v14[v12[7]];
  *(void *)uint64_t v17 = 0;
  *((_WORD *)v17 + 4) = 256;
  uint64_t v18 = v0 + OBJC_IVAR____TtC17MessageProtection23Kyber1024ObjCPrivateKey_privKey;
  outlined init with copy of TetraSessionStates?(v18, (uint64_t)v7, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v19 = v33(v7, 1, v8);
  uint64_t v32 = v18;
  if (v19 == 1)
  {
    outlined destroy of Kyber1024.PrivateKey?((uint64_t)v7);
    uint64_t v20 = type metadata accessor for TetraKEM1024Key(0);
    uint64_t v21 = v31;
    outlined init with copy of TetraSessionStates?(v18 + *(int *)(v20 + 20), v31, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    uint64_t v22 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22) == 1)
    {
      __break(1u);
      uint64_t result = swift_unexpectedError();
      __break(1u);
      return result;
    }
    uint64_t v23 = (uint64_t *)(v21 + *(int *)(v22 + 20));
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    outlined copy of Data._Representation(*v23, v25);
    outlined destroy of SecureEnclave.Kyber1024.PrivateKey(v21, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    uint64_t v24 = Kyber1024.PrivateKey.dataRepresentation.getter();
    unint64_t v25 = v26;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v27 = (uint64_t)v35;
  outlined consume of Data?(*(void *)v15, *((void *)v15 + 1));
  *(void *)unint64_t v15 = v24;
  *((void *)v15 + 1) = v25;
  *(void *)uint64_t v16 = 1;
  *((_WORD *)v16 + 4) = 1;
  outlined init with copy of TetraSessionStates?(v32, v27, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  int v28 = v33((char *)v27, 1, v8);
  outlined destroy of Kyber1024.PrivateKey?(v27);
  *(void *)uint64_t v17 = v28 == 1;
  *((_WORD *)v17 + 4) = 1;
  lazy protocol witness table accessor for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey();
  uint64_t v29 = Message.serializedData(partial:)();
  outlined destroy of SecureEnclave.Kyber1024.PrivateKey((uint64_t)v14, type metadata accessor for TetraPB_KyberPrivateKey);
  return v29;
}

uint64_t outlined destroy of Kyber1024.PrivateKey?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey)
  {
    type metadata accessor for TetraPB_KyberPrivateKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey);
  }
  return result;
}

uint64_t outlined destroy of SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TetraKeyStorageError and conformance TetraKeyStorageError()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError;
  if (!lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError;
  if (!lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError);
  }
  return result;
}

uint64_t outlined init with copy of TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraPB_KyberPrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for TetraSessionStates(_DWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    uint64_t v6 = type metadata accessor for TetraSessionState();
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SymmetricKey();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v136 = a2;
    id v134 = (int *)v6;
    uint64_t v127 = v11;
    uint64_t v128 = v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = type metadata accessor for TetraRatchetState(0);
    *(void *)&v8[*(int *)(v14 + 20)] = *(void *)&v9[*(int *)(v14 + 20)];
    uint64_t v131 = v14;
    uint64_t v132 = v9;
    uint64_t v15 = *(int *)(v14 + 24);
    unint64_t v133 = v8;
    uint64_t v16 = &v8[v15];
    uint64_t v17 = &v9[v15];
    uint64_t v18 = *(void **)&v9[v15];
    *(void *)uint64_t v16 = v18;
    uint64_t v19 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    uint64_t v20 = &v16[v19];
    uint64_t v137 = v17;
    uint64_t v21 = &v17[v19];
    uint64_t v22 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    id v25 = v18;
    if (v24(v21, 1, v22))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v27 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
    uint64_t v28 = v27[5];
    uint64_t v29 = &v16[v28];
    uint64_t v30 = v137;
    uint64_t v31 = &v137[v28];
    uint64_t v32 = type metadata accessor for TetraKEM768Key(0);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v29, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v35 = type metadata accessor for Kyber768.PrivateKey();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v129 = v27;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v31, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v29, v31, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v29, v31, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v29, 0, 1, v35);
      }
      uint64_t v38 = *(int *)(v32 + 20);
      uint64_t v39 = &v29[v38];
      unint64_t v40 = &v31[v38];
      uint64_t v41 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v44 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v39, v40, v44);
        uint64_t v45 = *(int *)(v41 + 20);
        uint64_t v123 = v42;
        uint64_t v125 = v16;
        unint64_t v46 = v39;
        uint64_t v47 = (uint64_t *)&v39[v45];
        uint64_t v48 = (uint64_t *)&v40[v45];
        uint64_t v49 = *v48;
        unint64_t v50 = v48[1];
        outlined copy of Data._Representation(*v48, v50);
        uint64_t *v47 = v49;
        v47[1] = v50;
        uint64_t v30 = v137;
        uint64_t v51 = *(int *)(v41 + 24);
        long long v52 = *(void **)&v40[v51];
        *(void *)&v46[v51] = v52;
        uint64_t v53 = *(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56);
        id v54 = v52;
        long long v55 = v46;
        uint64_t v16 = v125;
        v53(v55, 0, 1, v41);
      }
      uint64_t v27 = v129;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
    }
    uint64_t v56 = v27[6];
    unint64_t v57 = &v16[v56];
    uint64_t v58 = &v30[v56];
    uint64_t v59 = type metadata accessor for TetraKEM1024Key(0);
    uint64_t v60 = *(void *)(v59 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      uint64_t v62 = type metadata accessor for Kyber1024.PrivateKey();
      uint64_t v63 = *(void *)(v62 - 8);
      unint64_t v130 = v27;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v58, 1, v62))
      {
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v57, v58, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v57, v58, v62);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v57, 0, 1, v62);
      }
      uint64_t v65 = *(int *)(v59 + 20);
      uint64_t v66 = &v57[v65];
      uint64_t v67 = &v58[v65];
      uint64_t v68 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      uint64_t v69 = *(void *)(v68 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
      {
        uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
      }
      else
      {
        uint64_t v71 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v66, v67, v71);
        uint64_t v72 = *(int *)(v68 + 20);
        int v124 = v66;
        uint64_t v126 = v60;
        uint64_t v73 = (uint64_t *)&v66[v72];
        unint64_t v74 = (uint64_t *)&v67[v72];
        uint64_t v75 = v69;
        uint64_t v76 = *v74;
        unint64_t v77 = v74[1];
        outlined copy of Data._Representation(*v74, v77);
        uint64_t *v73 = v76;
        v73[1] = v77;
        uint64_t v60 = v126;
        uint64_t v30 = v137;
        uint64_t v78 = *(int *)(v68 + 24);
        char v79 = *(void **)&v67[v78];
        *(void *)&v124[v78] = v79;
        unint64_t v80 = *(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56);
        id v81 = v79;
        v80(v124, 0, 1, v68);
      }
      uint64_t v27 = v130;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
    }
    uint64_t v82 = v27[7];
    unint64_t v83 = &v16[v82];
    uint64_t v84 = (uint64_t *)&v30[v82];
    unint64_t v85 = v84[1];
    if (v85 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v83 = *(_OWORD *)v84;
    }
    else
    {
      uint64_t v86 = *v84;
      outlined copy of Data._Representation(*v84, v84[1]);
      *(void *)unint64_t v83 = v86;
      *((void *)v83 + 1) = v85;
    }
    uint64_t v87 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
    uint64_t v88 = &v16[v87];
    uint64_t v89 = &v30[v87];
    uint64_t v90 = type metadata accessor for SymmetricRatchet();
    uint64_t v91 = *(void *)(v90 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
    {
      uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
      memcpy(v88, v89, *(void *)(*(void *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v88, v89, v128);
      uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v88[*(int *)(v93 + 48)] = *(void *)&v89[*(int *)(v93 + 48)];
      *(void *)&v88[*(int *)(v90 + 20)] = *(void *)&v89[*(int *)(v90 + 20)];
      uint64_t v94 = *(int *)(v90 + 24);
      uint64_t v95 = &v88[v94];
      uint64_t v96 = &v89[v94];
      long long v97 = *(_OWORD *)(v96 + 24);
      *(_OWORD *)&v88[v94 + 24] = v97;
      uint64_t v98 = v97;
      uint64_t v99 = **(void (***)(char *, char *, uint64_t))(v97 - 8);
      swift_bridgeObjectRetain();
      v99(v95, v96, v98);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
    }
    *(_DWORD *)&v133[*(int *)(v131 + 28)] = *(_DWORD *)&v132[*(int *)(v131 + 28)];
    uint64_t v100 = *(int *)(v131 + 32);
    uint64_t v101 = &v133[v100];
    uint64_t v102 = &v132[v100];
    uint64_t v103 = type metadata accessor for Date();
    uint64_t v104 = *(void *)(v103 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
    {
      uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v101, v102, v103);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
    }
    uint64_t v106 = v134[6];
    unint64_t v107 = (char *)v4 + v106;
    uint64_t v108 = (char *)v136 + v106;
    uint64_t v109 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 16))(v107, v108, v109);
    uint64_t v110 = v134[7];
    uint64_t v111 = (char *)v4 + v110;
    uint64_t v112 = (char *)v136 + v110;
    uint64_t v113 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v114 = *(void *)(v113 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
    {
      uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      memcpy(v111, v112, *(void *)(*(void *)(v115 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v111, v112, v113);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
    }
    uint64_t v116 = v134[8];
    uint64_t v117 = (void *)((char *)v4 + v116);
    uint64_t v118 = (void *)((char *)v136 + v116);
    uint64_t v119 = *v118;
    unint64_t v120 = v118[1];
    outlined copy of Data._Representation(*v118, v120);
    *uint64_t v117 = v119;
    v117[1] = v120;
    *((unsigned char *)v4 + v134[9]) = *((unsigned char *)v136 + v134[9]);
    uint64_t v121 = *(int *)(a3 + 24);
    *((unsigned char *)v4 + *(int *)(a3 + 20)) = *((unsigned char *)v136 + *(int *)(a3 + 20));
    *(void *)((char *)v4 + v121) = *(void *)((char *)v136 + v121);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TetraSessionStates(uint64_t a1)
{
  uint64_t v2 = (int *)type metadata accessor for TetraSessionState();
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  uint64_t v39 = v5;
  uint64_t v40 = v4;
  uint64_t v6 = type metadata accessor for TetraRatchetState(0);
  swift_bridgeObjectRelease();
  uint64_t v7 = (id *)(v3 + *(int *)(v6 + 24));

  uint64_t v8 = (char *)v7 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v11 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v12 = (char *)v7 + v11[5];
  uint64_t v13 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14)) {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    }
    uint64_t v16 = &v12[*(int *)(v13 + 20)];
    uint64_t v17 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
    {
      uint64_t v18 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
      outlined consume of Data._Representation(*(void *)&v16[*(int *)(v17 + 20)], *(void *)&v16[*(int *)(v17 + 20) + 8]);
    }
  }
  uint64_t v19 = (char *)v7 + v11[6];
  uint64_t v20 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20))
  {
    uint64_t v21 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v22 = *(void *)(v21 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21)) {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    }
    uint64_t v23 = &v19[*(int *)(v20 + 20)];
    uint64_t v24 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24))
    {
      uint64_t v25 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v23, v25);
      outlined consume of Data._Representation(*(void *)&v23[*(int *)(v24 + 20)], *(void *)&v23[*(int *)(v24 + 20) + 8]);
    }
  }
  uint64_t v26 = (uint64_t *)((char *)v7 + v11[7]);
  unint64_t v27 = v26[1];
  if (v27 >> 60 != 15) {
    outlined consume of Data._Representation(*v26, v27);
  }
  uint64_t v28 = (char *)v7 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v29 = type metadata accessor for SymmetricRatchet();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29))
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28[*(int *)(v29 + 24)]);
  }
  uint64_t v30 = v3 + *(int *)(v6 + 32);
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v32 = *(void *)(v31 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31)) {
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  }
  uint64_t v33 = a1 + v2[6];
  uint64_t v34 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
  uint64_t v35 = a1 + v2[7];
  uint64_t v36 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v37 = *(void *)(v36 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36)) {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
  }
  outlined consume of Data._Representation(*(void *)(a1 + v2[8]), *(void *)(a1 + v2[8] + 8));
  return swift_bridgeObjectRelease();
}

_DWORD *initializeWithCopy for TetraSessionStates(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = type metadata accessor for TetraSessionState();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v132 = a2;
  unint64_t v133 = a1;
  unint64_t v130 = (int *)v5;
  uint64_t v125 = v10;
  uint64_t v126 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = type metadata accessor for TetraRatchetState(0);
  *(void *)&v7[*(int *)(v12 + 20)] = *(void *)&v8[*(int *)(v12 + 20)];
  uint64_t v127 = v12;
  uint64_t v128 = v8;
  uint64_t v13 = *(int *)(v12 + 24);
  uint64_t v129 = v7;
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  uint64_t v16 = *(void **)&v8[v13];
  *(void *)&v7[v13] = v16;
  uint64_t v17 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v18 = &v14[v17];
  uint64_t v19 = &v15[v17];
  uint64_t v20 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  id v23 = v16;
  if (v22(v19, 1, v20))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v25 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v26 = v25[5];
  unint64_t v27 = &v14[v26];
  uint64_t v28 = &v15[v26];
  uint64_t v29 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v32 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v27, v28, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v27, 0, 1, v32);
    }
    uint64_t v35 = *(int *)(v29 + 20);
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    uint64_t v38 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v41 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v36, v37, v41);
      uint64_t v42 = *(int *)(v38 + 20);
      uint64_t v119 = v39;
      uint64_t v121 = v15;
      uint64_t v43 = v36;
      uint64_t v44 = (uint64_t *)&v36[v42];
      uint64_t v45 = (uint64_t *)&v37[v42];
      uint64_t v123 = v25;
      uint64_t v46 = *v45;
      unint64_t v47 = v45[1];
      outlined copy of Data._Representation(*v45, v47);
      *uint64_t v44 = v46;
      v44[1] = v47;
      uint64_t v25 = v123;
      uint64_t v48 = *(int *)(v38 + 24);
      uint64_t v49 = *(void **)&v37[v48];
      *(void *)&v43[v48] = v49;
      unint64_t v50 = *(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56);
      id v51 = v49;
      long long v52 = v43;
      uint64_t v15 = v121;
      v50(v52, 0, 1, v38);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t v53 = v25[6];
  id v54 = &v14[v53];
  long long v55 = &v15[v53];
  uint64_t v56 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v57 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    uint64_t v59 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v60 = *(void *)(v59 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v55, 1, v59))
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v54, v55, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v54, v55, v59);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v54, 0, 1, v59);
    }
    uint64_t v62 = *(int *)(v56 + 20);
    uint64_t v63 = &v54[v62];
    uint64_t v64 = &v55[v62];
    uint64_t v65 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v66 = *(void *)(v65 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
    {
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      uint64_t v68 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(v63, v64, v68);
      uint64_t v69 = *(int *)(v65 + 20);
      uint64_t v120 = v66;
      uint64_t v122 = v57;
      uint64_t v70 = (uint64_t *)&v63[v69];
      uint64_t v71 = (uint64_t *)&v64[v69];
      int v124 = v25;
      uint64_t v72 = *v71;
      unint64_t v73 = v71[1];
      outlined copy of Data._Representation(*v71, v73);
      *uint64_t v70 = v72;
      v70[1] = v73;
      uint64_t v57 = v122;
      uint64_t v25 = v124;
      uint64_t v74 = *(int *)(v65 + 24);
      uint64_t v75 = *(void **)&v64[v74];
      *(void *)&v63[v74] = v75;
      uint64_t v76 = *(void (**)(char *, void, uint64_t, uint64_t))(v120 + 56);
      id v77 = v75;
      v76(v63, 0, 1, v65);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  uint64_t v78 = v25[7];
  char v79 = &v14[v78];
  unint64_t v80 = &v15[v78];
  unint64_t v81 = *((void *)v80 + 1);
  if (v81 >> 60 == 15)
  {
    *(_OWORD *)char v79 = *(_OWORD *)v80;
  }
  else
  {
    uint64_t v82 = *(void *)v80;
    outlined copy of Data._Representation(*(void *)v80, *((void *)v80 + 1));
    *(void *)char v79 = v82;
    *((void *)v79 + 1) = v81;
  }
  uint64_t v83 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v84 = &v14[v83];
  unint64_t v85 = &v15[v83];
  uint64_t v86 = type metadata accessor for SymmetricRatchet();
  uint64_t v87 = *(void *)(v86 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
  {
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v84, v85, v126);
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v84[*(int *)(v89 + 48)] = *(void *)&v85[*(int *)(v89 + 48)];
    *(void *)&v84[*(int *)(v86 + 20)] = *(void *)&v85[*(int *)(v86 + 20)];
    uint64_t v90 = *(int *)(v86 + 24);
    uint64_t v91 = &v84[v90];
    uint64_t v92 = &v85[v90];
    long long v93 = *(_OWORD *)(v92 + 24);
    *(_OWORD *)&v84[v90 + 24] = v93;
    uint64_t v94 = v93;
    uint64_t v95 = **(void (***)(char *, char *, uint64_t))(v93 - 8);
    swift_bridgeObjectRetain();
    v95(v91, v92, v94);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
  }
  *(_DWORD *)&v129[*(int *)(v127 + 28)] = *(_DWORD *)&v128[*(int *)(v127 + 28)];
  uint64_t v96 = *(int *)(v127 + 32);
  long long v97 = &v129[v96];
  uint64_t v98 = &v128[v96];
  uint64_t v99 = type metadata accessor for Date();
  uint64_t v100 = *(void *)(v99 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
  {
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v97, v98, *(void *)(*(void *)(v101 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v97, v98, v99);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
  }
  uint64_t v102 = v130[6];
  uint64_t v103 = (char *)v133 + v102;
  uint64_t v104 = (char *)v132 + v102;
  uint64_t v105 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 16))(v103, v104, v105);
  uint64_t v106 = v130[7];
  unint64_t v107 = (char *)v133 + v106;
  uint64_t v108 = (char *)v132 + v106;
  uint64_t v109 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v110 = *(void *)(v109 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
  {
    uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v107, v108, v109);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
  }
  uint64_t v112 = v130[8];
  uint64_t v113 = (uint64_t *)((char *)v133 + v112);
  uint64_t v114 = (uint64_t *)((char *)v132 + v112);
  uint64_t v115 = *v114;
  unint64_t v116 = v114[1];
  outlined copy of Data._Representation(*v114, v116);
  uint64_t *v113 = v115;
  v113[1] = v116;
  *((unsigned char *)v133 + v130[9]) = *((unsigned char *)v132 + v130[9]);
  uint64_t v117 = *(int *)(a3 + 24);
  *((unsigned char *)v133 + *(int *)(a3 + 20)) = *((unsigned char *)v132 + *(int *)(a3 + 20));
  *(void *)((char *)v133 + v117) = *(void *)((char *)v132 + v117);
  swift_bridgeObjectRetain();
  return v133;
}

_DWORD *assignWithCopy for TetraSessionStates(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v222 = (int *)type metadata accessor for TetraSessionState();
  uint64_t v6 = v222[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v223 = a3;
  uint64_t v215 = v10;
  uint64_t v216 = v9;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = type metadata accessor for TetraRatchetState(0);
  *(void *)&v7[*(int *)(v15 + 20)] = *(void *)&v8[*(int *)(v15 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v219 = v15;
  uint64_t v220 = v8;
  uint64_t v16 = *(int *)(v15 + 24);
  uint64_t v221 = v7;
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  uint64_t v19 = *(void **)&v7[v16];
  uint64_t v20 = *(void **)&v8[v16];
  *(void *)uint64_t v17 = v20;
  id v21 = v20;

  uint64_t v22 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v226 = v17;
  id v23 = &v17[v22];
  uint64_t v224 = v18;
  uint64_t v24 = &v18[v22];
  uint64_t v25 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v26 = *(void *)(v25 - 8);
  unint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  uint64_t v217 = a2;
  uint64_t v218 = a1;
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
LABEL_13:
  uint64_t v31 = v18;
  uint64_t v32 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v34 = (char *)v226 + v33;
  uint64_t v35 = &v18[v33];
  uint64_t v36 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  uint64_t v225 = v32;
  if (!v39)
  {
    if (v40)
    {
      _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v34, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    uint64_t v46 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v47 = *(void *)(v46 - 8);
    uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
    int v49 = v48(v34, 1, v46);
    int v50 = v48(v35, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v34, v35, v46);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v34, 0, 1, v46);
LABEL_79:
        uint64_t v32 = v225;
        uint64_t v156 = *(int *)(v36 + 20);
        uint64_t v157 = (uint64_t)&v34[v156];
        v35 += v156;
        uint64_t v158 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v159 = *(void *)(v158 - 8);
        uint64_t v160 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
        int v161 = v160(v157, 1, v158);
        int v162 = v160((uint64_t)v35, 1, v158);
        if (v161)
        {
          if (!v162)
          {
            uint64_t v163 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v163 - 8) + 16))(v157, v35, v163);
            uint64_t v164 = *(int *)(v158 + 20);
            uint64_t v165 = (uint64_t *)(v157 + v164);
            int v166 = (uint64_t *)&v35[v164];
            uint64_t v167 = *v166;
            unint64_t v168 = v166[1];
            outlined copy of Data._Representation(*v166, v168);
            uint64_t *v165 = v167;
            v165[1] = v168;
            uint64_t v32 = v225;
            uint64_t v169 = *(int *)(v158 + 24);
            uint64_t v170 = *(void **)&v35[v169];
            *(void *)(v157 + v169) = v170;
            uint64_t v171 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v159 + 56);
            id v172 = v170;
            v171(v157, 0, 1, v158);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v162)
          {
            uint64_t v191 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v191 - 8) + 24))(v157, v35, v191);
            uint64_t v192 = *(int *)(v158 + 20);
            uint64_t v193 = (uint64_t *)(v157 + v192);
            id v194 = (uint64_t *)&v35[v192];
            uint64_t v195 = *v194;
            unint64_t v196 = v194[1];
            outlined copy of Data._Representation(*v194, v196);
            uint64_t v197 = *v193;
            unint64_t v198 = v193[1];
            *uint64_t v193 = v195;
            v193[1] = v196;
            uint64_t v32 = v225;
            outlined consume of Data._Representation(v197, v198);
            uint64_t v199 = *(int *)(v158 + 24);
            uint64_t v200 = *(void **)&v35[v199];
            uint64_t v201 = *(void **)(v157 + v199);
            *(void *)(v157 + v199) = v200;
            id v202 = v200;

            goto LABEL_31;
          }
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0(v157, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        size_t v44 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v45 = (void *)v157;
LABEL_20:
        memcpy(v45, v35, v44);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v50)
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v34, v35, v46);
        goto LABEL_79;
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v46);
    }
    uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v34, v35, *(void *)(*(void *)(v155 - 8) + 64));
    goto LABEL_79;
  }
  if (v40)
  {
LABEL_19:
    size_t v44 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    uint64_t v45 = v34;
    goto LABEL_20;
  }
  uint64_t v41 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v35, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v34, v35, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v34, v35, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v34, 0, 1, v41);
  }
  uint64_t v51 = *(int *)(v36 + 20);
  long long v52 = &v34[v51];
  uint64_t v53 = &v35[v51];
  uint64_t v54 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    uint64_t v57 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v52, v53, v57);
    uint64_t v58 = *(int *)(v54 + 20);
    uint64_t v59 = (uint64_t *)&v52[v58];
    uint64_t v60 = (uint64_t *)&v53[v58];
    uint64_t v62 = *v60;
    unint64_t v61 = v60[1];
    outlined copy of Data._Representation(*v60, v61);
    *uint64_t v59 = v62;
    v59[1] = v61;
    uint64_t v31 = v224;
    uint64_t v63 = *(int *)(v54 + 24);
    uint64_t v64 = *(void **)&v53[v63];
    *(void *)&v52[v63] = v64;
    uint64_t v65 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
    id v66 = v64;
    v65(v52, 0, 1, v54);
  }
  uint64_t v32 = v225;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
LABEL_31:
  uint64_t v67 = *(int *)(v32 + 24);
  uint64_t v68 = (char *)v226 + v67;
  uint64_t v69 = &v31[v67];
  uint64_t v70 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v71 = *(void *)(v70 - 8);
  uint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  int v73 = v72(v68, 1, v70);
  int v74 = v72(v69, 1, v70);
  if (!v73)
  {
    if (v74)
    {
      _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v68, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    uint64_t v80 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v81 = *(void *)(v80 - 8);
    uint64_t v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
    int v83 = v82(v68, 1, v80);
    int v84 = v82(v69, 1, v80);
    if (v83)
    {
      if (!v84)
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v68, v69, v80);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v68, 0, 1, v80);
LABEL_85:
        uint64_t v174 = *(int *)(v70 + 20);
        uint64_t v175 = (uint64_t)&v68[v174];
        v69 += v174;
        uint64_t v176 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v177 = *(void *)(v176 - 8);
        unint64_t v178 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v177 + 48);
        int v179 = v178(v175, 1, v176);
        int v180 = v178((uint64_t)v69, 1, v176);
        if (v179)
        {
          if (!v180)
          {
            uint64_t v181 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v181 - 8) + 16))(v175, v69, v181);
            uint64_t v182 = *(int *)(v176 + 20);
            uint64_t v183 = (uint64_t *)(v175 + v182);
            uint64_t v184 = (uint64_t *)&v69[v182];
            uint64_t v185 = *v184;
            unint64_t v186 = v184[1];
            outlined copy of Data._Representation(*v184, v186);
            *uint64_t v183 = v185;
            v183[1] = v186;
            uint64_t v187 = *(int *)(v176 + 24);
            unint64_t v188 = *(void **)&v69[v187];
            *(void *)(v175 + v187) = v188;
            uint64_t v189 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v177 + 56);
            id v190 = v188;
            v189(v175, 0, 1, v176);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v180)
          {
            uint64_t v203 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v203 - 8) + 24))(v175, v69, v203);
            uint64_t v204 = *(int *)(v176 + 20);
            uint64_t v205 = (uint64_t *)(v175 + v204);
            uint64_t v206 = (uint64_t *)&v69[v204];
            uint64_t v207 = *v206;
            unint64_t v208 = v206[1];
            outlined copy of Data._Representation(*v206, v208);
            uint64_t v209 = *v205;
            unint64_t v210 = v205[1];
            uint64_t *v205 = v207;
            v205[1] = v208;
            outlined consume of Data._Representation(v209, v210);
            uint64_t v211 = *(int *)(v176 + 24);
            uint64_t v212 = *(void **)&v69[v211];
            uint64_t v213 = *(void **)(v175 + v211);
            *(void *)(v175 + v211) = v212;
            id v214 = v212;

            goto LABEL_47;
          }
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0(v175, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        size_t v78 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        char v79 = (void *)v175;
LABEL_38:
        memcpy(v79, v69, v78);
        goto LABEL_47;
      }
    }
    else
    {
      if (!v84)
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 24))(v68, v69, v80);
        goto LABEL_85;
      }
      (*(void (**)(char *, uint64_t))(v81 + 8))(v68, v80);
    }
    uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v68, v69, *(void *)(*(void *)(v173 - 8) + 64));
    goto LABEL_85;
  }
  if (v74)
  {
LABEL_37:
    size_t v78 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    char v79 = v68;
    goto LABEL_38;
  }
  uint64_t v75 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v69, 1, v75))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v68, v69, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v68, v69, v75);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v68, 0, 1, v75);
  }
  uint64_t v85 = *(int *)(v70 + 20);
  uint64_t v86 = &v68[v85];
  uint64_t v87 = &v69[v85];
  uint64_t v88 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v89 = *(void *)(v88 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
  {
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
  }
  else
  {
    uint64_t v91 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 16))(v86, v87, v91);
    uint64_t v92 = *(int *)(v88 + 20);
    long long v93 = (uint64_t *)&v86[v92];
    uint64_t v94 = (uint64_t *)&v87[v92];
    uint64_t v95 = *v94;
    unint64_t v96 = v94[1];
    outlined copy of Data._Representation(*v94, v96);
    *long long v93 = v95;
    v93[1] = v96;
    uint64_t v31 = v224;
    uint64_t v97 = *(int *)(v88 + 24);
    uint64_t v98 = *(void **)&v87[v97];
    *(void *)&v86[v97] = v98;
    uint64_t v99 = *(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56);
    id v100 = v98;
    v99(v86, 0, 1, v88);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
LABEL_47:
  uint64_t v101 = *(int *)(v225 + 28);
  uint64_t v102 = (void *)((char *)v226 + v101);
  uint64_t v103 = (uint64_t *)&v31[v101];
  unint64_t v104 = *(void *)&v31[v101 + 8];
  if (*(void *)((char *)v226 + v101 + 8) >> 60 == 15)
  {
    if (v104 >> 60 != 15)
    {
      uint64_t v105 = *v103;
      outlined copy of Data._Representation(*v103, v104);
      uint64_t *v102 = v105;
      v102[1] = v104;
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  if (v104 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v102);
LABEL_52:
    *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
    goto LABEL_54;
  }
  uint64_t v106 = *v103;
  outlined copy of Data._Representation(*v103, v104);
  uint64_t v107 = *v102;
  unint64_t v108 = v102[1];
  uint64_t *v102 = v106;
  v102[1] = v104;
  outlined consume of Data._Representation(v107, v108);
LABEL_54:
  uint64_t v109 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v110 = (char *)v226 + v109;
  uint64_t v111 = &v31[v109];
  uint64_t v112 = type metadata accessor for SymmetricRatchet();
  uint64_t v113 = *(void *)(v112 - 8);
  uint64_t v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v113 + 48);
  int v115 = v114(v110, 1, v112);
  int v116 = v114(v111, 1, v112);
  if (v115)
  {
    if (!v116)
    {
      (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v110, v111, v216);
      uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v110[*(int *)(v117 + 48)] = *(void *)&v111[*(int *)(v117 + 48)];
      *(void *)&v110[*(int *)(v112 + 20)] = *(void *)&v111[*(int *)(v112 + 20)];
      uint64_t v118 = *(int *)(v112 + 24);
      uint64_t v119 = &v110[v118];
      uint64_t v120 = &v111[v118];
      uint64_t v121 = *((void *)v120 + 3);
      *((void *)v119 + 3) = v121;
      *((void *)v119 + 4) = *((void *)v120 + 4);
      uint64_t v122 = **(void (***)(char *, char *, uint64_t))(v121 - 8);
      swift_bridgeObjectRetain();
      v122(v119, v120, v121);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (v116)
  {
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
LABEL_59:
    uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v110, v111, *(void *)(*(void *)(v123 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(char *, char *, uint64_t))(v215 + 24))(v110, v111, v216);
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)&v110[*(int *)(v154 + 48)] = *(void *)&v111[*(int *)(v154 + 48)];
  *(void *)&v110[*(int *)(v112 + 20)] = *(void *)&v111[*(int *)(v112 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)&v110[*(int *)(v112 + 24)], (uint64_t *)&v111[*(int *)(v112 + 24)]);
LABEL_60:
  *(_DWORD *)&v221[*(int *)(v219 + 28)] = *(_DWORD *)&v220[*(int *)(v219 + 28)];
  uint64_t v124 = *(int *)(v219 + 32);
  uint64_t v125 = &v221[v124];
  uint64_t v126 = &v220[v124];
  uint64_t v127 = type metadata accessor for Date();
  uint64_t v128 = *(void *)(v127 - 8);
  uint64_t v129 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 48);
  int v130 = v129(v125, 1, v127);
  int v131 = v129(v126, 1, v127);
  if (v130)
  {
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v125, v126, v127);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v128 + 8))(v125, v127);
LABEL_65:
    uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v125, v126, *(void *)(*(void *)(v132 - 8) + 64));
    goto LABEL_66;
  }
  (*(void (**)(char *, char *, uint64_t))(v128 + 24))(v125, v126, v127);
LABEL_66:
  uint64_t v133 = v222[6];
  id v134 = (char *)v218 + v133;
  uint64_t v135 = (char *)v217 + v133;
  uint64_t v136 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v136 - 8) + 24))(v134, v135, v136);
  uint64_t v137 = v222[7];
  uint64_t v138 = (char *)v218 + v137;
  uint64_t v139 = (char *)v217 + v137;
  uint64_t v140 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v141 = *(void *)(v140 - 8);
  unint64_t v142 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 48);
  int v143 = v142(v138, 1, v140);
  int v144 = v142(v139, 1, v140);
  if (!v143)
  {
    if (!v144)
    {
      (*(void (**)(char *, char *, uint64_t))(v141 + 24))(v138, v139, v140);
      goto LABEL_72;
    }
    (*(void (**)(char *, uint64_t))(v141 + 8))(v138, v140);
    goto LABEL_71;
  }
  if (v144)
  {
LABEL_71:
    uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v138, v139, *(void *)(*(void *)(v145 - 8) + 64));
    goto LABEL_72;
  }
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v138, v139, v140);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
LABEL_72:
  uint64_t v146 = v222[8];
  uint64_t v147 = (uint64_t *)((char *)v218 + v146);
  uint64_t v148 = (uint64_t *)((char *)v217 + v146);
  uint64_t v149 = *v148;
  unint64_t v150 = v148[1];
  outlined copy of Data._Representation(*v148, v150);
  uint64_t v151 = *v147;
  unint64_t v152 = v147[1];
  *uint64_t v147 = v149;
  v147[1] = v150;
  outlined consume of Data._Representation(v151, v152);
  *((unsigned char *)v218 + v222[9]) = *((unsigned char *)v217 + v222[9]);
  *((unsigned char *)v218 + *(int *)(v223 + 20)) = *((unsigned char *)v217 + *(int *)(v223 + 20));
  *(void *)((char *)v218 + *(int *)(v223 + 24)) = *(void *)((char *)v217 + *(int *)(v223 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v218;
}

_DWORD *initializeWithTake for TetraSessionStates(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  *a1 = *a2;
  uint64_t v5 = type metadata accessor for TetraSessionState();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)v3 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v84 = v10;
  uint64_t v85 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = type metadata accessor for TetraRatchetState(0);
  *(void *)&v7[*(int *)(v12 + 20)] = *(void *)&v8[*(int *)(v12 + 20)];
  uint64_t v90 = v12;
  uint64_t v91 = v8;
  uint64_t v13 = *(int *)(v12 + 24);
  uint64_t v92 = v7;
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  *(void *)&v7[v13] = *(void *)&v8[v13];
  uint64_t v16 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v17 = &v14[v16];
  uint64_t v18 = &v15[v16];
  uint64_t v19 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v20 = *(void *)(v19 - 8);
  long long v93 = (int *)v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = &v14[v23];
  uint64_t v25 = &v15[v23];
  uint64_t v26 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v86 = v22;
    uint64_t v29 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v88 = v3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v24, v25, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
    }
    uint64_t v32 = *(int *)(v26 + 20);
    uint64_t v33 = &v24[v32];
    uint64_t v34 = &v25[v32];
    uint64_t v35 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v38 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v33, v34, v38);
      *(_OWORD *)&v33[*(int *)(v35 + 20)] = *(_OWORD *)&v34[*(int *)(v35 + 20)];
      *(void *)&v33[*(int *)(v35 + 24)] = *(void *)&v34[*(int *)(v35 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    uint64_t v22 = v86;
    uint64_t v3 = v88;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v39 = v22[6];
  int v40 = &v14[v39];
  uint64_t v41 = &v15[v39];
  uint64_t v42 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v43 = *(void *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    uint64_t v87 = v22;
    uint64_t v45 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v46 = *(void *)(v45 - 8);
    uint64_t v89 = v3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v41, 1, v45))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v40, v41, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
    }
    uint64_t v48 = *(int *)(v42 + 20);
    int v49 = &v40[v48];
    int v50 = &v41[v48];
    uint64_t v51 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      uint64_t v54 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v49, v50, v54);
      *(_OWORD *)&v49[*(int *)(v51 + 20)] = *(_OWORD *)&v50[*(int *)(v51 + 20)];
      *(void *)&v49[*(int *)(v51 + 24)] = *(void *)&v50[*(int *)(v51 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    uint64_t v22 = v87;
    uint64_t v3 = v89;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  *(_OWORD *)&v14[v22[7]] = *(_OWORD *)&v15[v22[7]];
  uint64_t v55 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v56 = &v14[v55];
  uint64_t v57 = &v15[v55];
  uint64_t v58 = type metadata accessor for SymmetricRatchet();
  uint64_t v59 = *(void *)(v58 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
  {
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v56, v57, v85);
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v56[*(int *)(v61 + 48)] = *(void *)&v57[*(int *)(v61 + 48)];
    *(void *)&v56[*(int *)(v58 + 20)] = *(void *)&v57[*(int *)(v58 + 20)];
    uint64_t v62 = *(int *)(v58 + 24);
    uint64_t v63 = &v56[v62];
    uint64_t v64 = &v57[v62];
    long long v65 = *((_OWORD *)v64 + 1);
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v65;
    *((void *)v63 + 4) = *((void *)v64 + 4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  }
  *(_DWORD *)&v92[*(int *)(v90 + 28)] = *(_DWORD *)&v91[*(int *)(v90 + 28)];
  uint64_t v66 = *(int *)(v90 + 32);
  uint64_t v67 = &v92[v66];
  uint64_t v68 = &v91[v66];
  uint64_t v69 = type metadata accessor for Date();
  uint64_t v70 = *(void *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
  {
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  }
  uint64_t v72 = v93[6];
  int v73 = (char *)a1 + v72;
  int v74 = (char *)v3 + v72;
  uint64_t v75 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v73, v74, v75);
  uint64_t v76 = v93[7];
  uint64_t v77 = (char *)a1 + v76;
  size_t v78 = (char *)v3 + v76;
  uint64_t v79 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v80 = *(void *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)((char *)a1 + v93[8]) = *(_OWORD *)((char *)v3 + v93[8]);
  *((unsigned char *)a1 + v93[9]) = *((unsigned char *)v3 + v93[9]);
  uint64_t v82 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)v3 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v82) = *(void *)((char *)v3 + v82);
  return a1;
}

_DWORD *assignWithTake for TetraSessionStates(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for TetraSessionState();
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  uint64_t v165 = *(void *)(v10 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v165 + 48);
  int v12 = v11(v8, 1, v10);
  int v13 = v11(v9, 1, v10);
  uint64_t v168 = a3;
  uint64_t v169 = a2;
  int v166 = (int *)v6;
  uint64_t v164 = v10;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v165 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v165 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v165 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = type metadata accessor for TetraRatchetState(0);
  *(void *)&v8[*(int *)(v15 + 20)] = *(void *)&v9[*(int *)(v15 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v167 = v15;
  uint64_t v16 = *(int *)(v15 + 24);
  uint64_t v170 = v8;
  uint64_t v171 = v9;
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  uint64_t v19 = *(void **)&v8[v16];
  *(void *)uint64_t v17 = *(void *)v18;

  uint64_t v20 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v21 = &v17[v20];
  uint64_t v22 = &v18[v20];
  uint64_t v23 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
LABEL_13:
  id v172 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v29 = v172[5];
  uint64_t v30 = &v17[v29];
  uint64_t v31 = &v18[v29];
  uint64_t v32 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (v36)
    {
      _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v30, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    uint64_t v42 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v162 = *(void *)(v42 - 8);
    uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v162 + 48);
    int v44 = v43(v30, 1, v42);
    int v45 = v43(v31, 1, v42);
    if (v44)
    {
      if (!v45)
      {
        (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v30, v31, v42);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v162 + 56))(v30, 0, 1, v42);
LABEL_50:
        uint64_t v79 = *(int *)(v32 + 20);
        uint64_t v80 = (uint64_t)&v30[v79];
        v31 += v79;
        uint64_t v81 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v82 = *(void *)(v81 - 8);
        int v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
        int v84 = v83(v80, 1, v81);
        int v85 = v83((uint64_t)v31, 1, v81);
        if (v84)
        {
          if (!v85)
          {
            uint64_t v86 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v80, v31, v86);
            *(_OWORD *)(v80 + *(int *)(v81 + 20)) = *(_OWORD *)&v31[*(int *)(v81 + 20)];
            *(void *)(v80 + *(int *)(v81 + 24)) = *(void *)&v31[*(int *)(v81 + 24)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v80, 0, 1, v81);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v85)
          {
            uint64_t v150 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v150 - 8) + 40))(v80, v31, v150);
            uint64_t v151 = *(int *)(v81 + 20);
            uint64_t v152 = *(void *)(v80 + v151);
            unint64_t v153 = *(void *)(v80 + v151 + 8);
            *(_OWORD *)(v80 + v151) = *(_OWORD *)&v31[v151];
            outlined consume of Data._Representation(v152, v153);
            uint64_t v154 = *(int *)(v81 + 24);
            uint64_t v155 = *(void **)(v80 + v154);
            *(void *)(v80 + v154) = *(void *)&v31[v154];

            goto LABEL_31;
          }
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0(v80, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        size_t v40 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v41 = (void *)v80;
LABEL_20:
        memcpy(v41, v31, v40);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v45)
      {
        (*(void (**)(char *, char *, uint64_t))(v162 + 40))(v30, v31, v42);
        goto LABEL_50;
      }
      (*(void (**)(char *, uint64_t))(v162 + 8))(v30, v42);
    }
    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v30, v31, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_50;
  }
  if (v36)
  {
LABEL_19:
    size_t v40 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    uint64_t v41 = v30;
    goto LABEL_20;
  }
  uint64_t v37 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v31, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v30, v31, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v30, v31, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v30, 0, 1, v37);
  }
  uint64_t v46 = *(int *)(v32 + 20);
  uint64_t v47 = &v30[v46];
  uint64_t v48 = &v31[v46];
  uint64_t v49 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    uint64_t v52 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v47, v48, v52);
    *(_OWORD *)&v47[*(int *)(v49 + 20)] = *(_OWORD *)&v48[*(int *)(v49 + 20)];
    *(void *)&v47[*(int *)(v49 + 24)] = *(void *)&v48[*(int *)(v49 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_31:
  uint64_t v53 = v172[6];
  uint64_t v54 = &v17[v53];
  uint64_t v55 = &v18[v53];
  uint64_t v56 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      uint64_t v61 = type metadata accessor for Kyber1024.PrivateKey();
      uint64_t v62 = *(void *)(v61 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v55, 1, v61))
      {
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v54, v55, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v54, v55, v61);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v54, 0, 1, v61);
      }
      uint64_t v71 = *(int *)(v56 + 20);
      uint64_t v72 = &v54[v71];
      int v73 = &v55[v71];
      uint64_t v74 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      uint64_t v75 = *(void *)(v74 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
      {
        uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
      }
      else
      {
        uint64_t v77 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 32))(v72, v73, v77);
        *(_OWORD *)&v72[*(int *)(v74 + 20)] = *(_OWORD *)&v73[*(int *)(v74 + 20)];
        *(void *)&v72[*(int *)(v74 + 24)] = *(void *)&v73[*(int *)(v74 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
      }
      uint64_t v66 = v170;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      goto LABEL_65;
    }
LABEL_37:
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v54, v55, *(void *)(*(void *)(v64 - 8) + 64));
    long long v65 = v166;
    uint64_t v66 = v170;
    goto LABEL_66;
  }
  if (v60)
  {
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v54, type metadata accessor for TetraKEM1024Key);
    goto LABEL_37;
  }
  uint64_t v67 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v163 = *(void *)(v67 - 8);
  uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v163 + 48);
  int v69 = v68(v54, 1, v67);
  int v70 = v68(v55, 1, v67);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v54, v55, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v54, 0, 1, v67);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v163 + 8))(v54, v67);
LABEL_55:
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v54, v55, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_56;
  }
  (*(void (**)(char *, char *, uint64_t))(v163 + 40))(v54, v55, v67);
LABEL_56:
  uint64_t v88 = *(int *)(v56 + 20);
  uint64_t v89 = &v54[v88];
  uint64_t v90 = &v55[v88];
  uint64_t v91 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v92 = *(void *)(v91 - 8);
  long long v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
  int v94 = v93(v89, 1, v91);
  int v95 = v93(v90, 1, v91);
  if (!v94)
  {
    uint64_t v66 = v170;
    if (!v95)
    {
      uint64_t v156 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 40))(v89, v90, v156);
      uint64_t v157 = *(int *)(v91 + 20);
      uint64_t v158 = *(void *)&v89[v157];
      unint64_t v159 = *(void *)&v89[v157 + 8];
      *(_OWORD *)&v89[v157] = *(_OWORD *)&v90[v157];
      outlined consume of Data._Representation(v158, v159);
      uint64_t v160 = *(int *)(v91 + 24);
      int v161 = *(void **)&v89[v160];
      *(void *)&v89[v160] = *(void *)&v90[v160];

      goto LABEL_65;
    }
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v89, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    goto LABEL_64;
  }
  uint64_t v66 = v170;
  if (v95)
  {
LABEL_64:
    uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v89, v90, *(void *)(*(void *)(v97 - 8) + 64));
    goto LABEL_65;
  }
  uint64_t v96 = type metadata accessor for Kyber1024.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 32))(v89, v90, v96);
  *(_OWORD *)&v89[*(int *)(v91 + 20)] = *(_OWORD *)&v90[*(int *)(v91 + 20)];
  *(void *)&v89[*(int *)(v91 + 24)] = *(void *)&v90[*(int *)(v91 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_65:
  long long v65 = v166;
LABEL_66:
  uint64_t v98 = v172[7];
  uint64_t v99 = (uint64_t)&v17[v98];
  id v100 = &v18[v98];
  unint64_t v101 = *(void *)&v17[v98 + 8];
  if (v101 >> 60 == 15)
  {
LABEL_69:
    *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
    goto LABEL_71;
  }
  unint64_t v102 = *((void *)v100 + 1);
  if (v102 >> 60 == 15)
  {
    outlined destroy of Data(v99);
    goto LABEL_69;
  }
  uint64_t v103 = *(void *)v99;
  *(void *)uint64_t v99 = *(void *)v100;
  *(void *)(v99 + 8) = v102;
  outlined consume of Data._Representation(v103, v101);
LABEL_71:
  uint64_t v104 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v105 = &v17[v104];
  uint64_t v106 = &v18[v104];
  uint64_t v107 = type metadata accessor for SymmetricRatchet();
  uint64_t v108 = *(void *)(v107 - 8);
  uint64_t v109 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48);
  int v110 = v109(v105, 1, v107);
  int v111 = v109(v106, 1, v107);
  if (v110)
  {
    if (!v111)
    {
      (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v105, v106, v164);
      uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v105[*(int *)(v112 + 48)] = *(void *)&v106[*(int *)(v112 + 48)];
      *(void *)&v105[*(int *)(v107 + 20)] = *(void *)&v106[*(int *)(v107 + 20)];
      uint64_t v113 = *(int *)(v107 + 24);
      uint64_t v114 = &v105[v113];
      int v115 = &v106[v113];
      long long v116 = *((_OWORD *)v115 + 1);
      *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
      *((_OWORD *)v114 + 1) = v116;
      *((void *)v114 + 4) = *((void *)v115 + 4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  if (v111)
  {
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
LABEL_76:
    uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v105, v106, *(void *)(*(void *)(v117 - 8) + 64));
    goto LABEL_77;
  }
  (*(void (**)(char *, char *, uint64_t))(v165 + 40))(v105, v106, v164);
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)&v105[*(int *)(v145 + 48)] = *(void *)&v106[*(int *)(v145 + 48)];
  *(void *)&v105[*(int *)(v107 + 20)] = *(void *)&v106[*(int *)(v107 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v146 = *(int *)(v107 + 24);
  uint64_t v147 = (uint64_t)&v105[v146];
  uint64_t v148 = &v106[v146];
  __swift_destroy_boxed_opaque_existential_0(v147);
  long long v149 = *((_OWORD *)v148 + 1);
  *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
  *(_OWORD *)(v147 + 16) = v149;
  *(void *)(v147 + 32) = *((void *)v148 + 4);
LABEL_77:
  *(_DWORD *)&v66[*(int *)(v167 + 28)] = *(_DWORD *)&v171[*(int *)(v167 + 28)];
  uint64_t v118 = *(int *)(v167 + 32);
  uint64_t v119 = &v66[v118];
  uint64_t v120 = &v171[v118];
  uint64_t v121 = type metadata accessor for Date();
  uint64_t v122 = *(void *)(v121 - 8);
  uint64_t v123 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 48);
  int v124 = v123(v119, 1, v121);
  int v125 = v123(v120, 1, v121);
  if (v124)
  {
    if (!v125)
    {
      (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v119, v120, v121);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  if (v125)
  {
    (*(void (**)(char *, uint64_t))(v122 + 8))(v119, v121);
LABEL_82:
    uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v119, v120, *(void *)(*(void *)(v126 - 8) + 64));
    goto LABEL_83;
  }
  (*(void (**)(char *, char *, uint64_t))(v122 + 40))(v119, v120, v121);
LABEL_83:
  uint64_t v127 = v65[6];
  uint64_t v128 = (char *)a1 + v127;
  uint64_t v129 = (char *)v169 + v127;
  uint64_t v130 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v130 - 8) + 40))(v128, v129, v130);
  uint64_t v131 = v65[7];
  uint64_t v132 = (char *)a1 + v131;
  uint64_t v133 = (char *)v169 + v131;
  uint64_t v134 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v135 = *(void *)(v134 - 8);
  uint64_t v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 48);
  int v137 = v136(v132, 1, v134);
  int v138 = v136(v133, 1, v134);
  if (!v137)
  {
    if (!v138)
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 40))(v132, v133, v134);
      goto LABEL_89;
    }
    (*(void (**)(char *, uint64_t))(v135 + 8))(v132, v134);
    goto LABEL_88;
  }
  if (v138)
  {
LABEL_88:
    uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v132, v133, *(void *)(*(void *)(v139 - 8) + 64));
    goto LABEL_89;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v132, v133, v134);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
LABEL_89:
  uint64_t v140 = v65[8];
  uint64_t v141 = *(void *)((char *)a1 + v140);
  unint64_t v142 = *(void *)((char *)a1 + v140 + 8);
  *(_OWORD *)((char *)a1 + v140) = *(_OWORD *)((char *)v169 + v140);
  outlined consume of Data._Representation(v141, v142);
  *((unsigned char *)a1 + v65[9]) = *((unsigned char *)v169 + v65[9]);
  uint64_t v143 = *(int *)(v168 + 24);
  *((unsigned char *)a1 + *(int *)(v168 + 20)) = *((unsigned char *)v169 + *(int *)(v168 + 20));
  *(void *)((char *)a1 + v143) = *(void *)((char *)v169 + v143);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraSessionStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2164781FC);
}

uint64_t sub_2164781FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TetraSessionState();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TetraSessionStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2164782D0);
}

uint64_t sub_2164782D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TetraSessionState();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for TetraSessionStates()
{
  uint64_t result = type metadata singleton initialization cache for TetraSessionStates;
  if (!type metadata singleton initialization cache for TetraSessionStates) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TetraSessionStates()
{
  uint64_t result = type metadata accessor for TetraSessionState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t TetraSessionStates.discardMessageKeyOnSessionStates(ephemeralECDHPublicKey:messageIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v66 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TetraSessionState();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v61 - v16;
  if (TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(a1, a2))
  {
    unint64_t v10 = (char *)static os_log_type_t.info.getter();
    uint64_t v18 = MessageProtectionLog();
    if (!v18) {
      goto LABEL_29;
    }
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, a1, v11);
    if (os_log_type_enabled(v19, (os_log_type_t)v10))
    {
      uint64_t v64 = v12;
      uint64_t v65 = v11;
      uint64_t v63 = a2;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v69[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v22 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
      if (v23 >> 60 == 15) {
        goto LABEL_31;
      }
      uint64_t v24 = v22;
      unint64_t v25 = v23;
      Swift::String v26 = Data.base64EncodedString(options:)(0);
      outlined consume of Data?(v24, v25);
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26._countAndFlagsBits, (unint64_t)v26._object, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v17, v65);
      *(_WORD *)(v20 + 12) = 2048;
      uint64_t v68 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2163F2000, v19, (os_log_type_t)v10, "Discarded MessageKey associated with {publicKey:%s, index:%llu} on default session.", (uint8_t *)v20, 0x16u);
      uint64_t v27 = 1;
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v21, -1, -1);
      MEMORY[0x2166CDD30](v20, -1, -1);

      return v27;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    return 1;
  }
  uint64_t v28 = *(void *)(v2 + *(int *)(type metadata accessor for TetraSessionStates() + 24));
  uint64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
LABEL_21:
    static os_log_type_t.error.getter();
    id v58 = MessageProtectionLog();
    if (!v58) {
      goto LABEL_30;
    }
    int v59 = v58;
    os_log(_:dso:log:_:_:)();

    return 0;
  }
  uint64_t v61 = v15;
  uint64_t v62 = v28;
  uint64_t v64 = v12;
  uint64_t v65 = v11;
  uint64_t v63 = a2;
  uint64_t v30 = v28 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v31 = *(void *)(v8 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TetraSessionStates(v30, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    uint64_t v32 = &v10[*(int *)(v7 + 20)];
    uint64_t v33 = type metadata accessor for TetraRatchetState(0);
    unint64_t v34 = *(void *)&v32[*(int *)(v33 + 20)];
    MEMORY[0x270FA5388](v33);
    *(&v61 - 2) = (char *)a1;
    swift_bridgeObjectRetain();
    unint64_t v35 = (unint64_t)specialized _ArrayProtocol.filter(_:)(partial apply for closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:), &v61 - 4, v34);
    unint64_t v36 = v35;
    if (v35 >> 62) {
      break;
    }
    if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_13;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    v30 += v31;
    if (!--v29)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v37) {
    goto LABEL_10;
  }
LABEL_13:
  if ((v36 & 0xC000000000000001) != 0)
  {
    MEMORY[0x2166CCBD0](0, v36);
    uint64_t v39 = v64;
    uint64_t v38 = v65;
LABEL_16:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    type metadata accessor for SymmetricRatchet();
    uint64_t v40 = v66;
    specialized Dictionary.removeValue(forKey:)(v63, v66);
    outlined destroy of TetraSessionStates?(v40, &demangling cache variable for type metadata for SymmetricKey?);
    swift_endAccess();
    swift_release();
    int v41 = static os_log_type_t.info.getter();
    uint64_t v42 = MessageProtectionLog();
    if (!v42) {
      goto LABEL_32;
    }
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    int v44 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v61, a1, v38);
    if (os_log_type_enabled(v43, (os_log_type_t)v41))
    {
      LODWORD(v66) = v41;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v68 = v62;
      *(_DWORD *)uint64_t v45 = 136315650;
      uint64_t v46 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
      if (v47 >> 60 == 15) {
        goto LABEL_33;
      }
      uint64_t v48 = v46;
      unint64_t v49 = v47;
      Swift::String v50 = Data.base64EncodedString(options:)(0);
      outlined consume of Data?(v48, v49);
      v69[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50._countAndFlagsBits, (unint64_t)v50._object, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v44, v65);
      *(_WORD *)(v45 + 12) = 2048;
      v69[0] = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 22) = 2080;
      swift_beginAccess();
      uint64_t v51 = (uint64_t *)&v10[*(int *)(v7 + 32)];
      uint64_t v52 = *v51;
      unint64_t v53 = v51[1];
      outlined copy of Data._Representation(*v51, v53);
      uint64_t v54 = Data.description.getter();
      unint64_t v56 = v55;
      outlined consume of Data._Representation(v52, v53);
      uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2163F2000, v43, (os_log_type_t)v66, "Discarded MessageKey associated with {publicKey:%s, index:%llu} on previous session (%s).", (uint8_t *)v45, 0x20u);
      uint64_t v57 = v62;
      swift_arrayDestroy();
      MEMORY[0x2166CDD30](v57, -1, -1);
      MEMORY[0x2166CDD30](v45, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v39 + 8))(v44, v38);
    }
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    return 1;
  }
  uint64_t v39 = v64;
  uint64_t v38 = v65;
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_16;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  uint64_t result = _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  __break(1u);
  return result;
}

void TetraSessionStates.sealMessage(message:authenticatedData:prekeyHash:remoteRegistration:sessionDST:)(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, uint64_t (*a11)(uint64_t), uint64_t a12)
{
  uint64_t v14 = v12;
  unint64_t v38 = a6;
  unint64_t v36 = a4;
  uint64_t v37 = a5;
  unint64_t v34 = a2;
  uint64_t v35 = a3;
  unint64_t v33 = a1;
  uint64_t v18 = type metadata accessor for TetraRatchetOuterMessage();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for TetraSessionState();
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (int *)((char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*((unsigned char *)v14 + *(int *)(v22 + 36)))
  {
    a7 = 0;
    unsigned int v25 = *(_DWORD *)&a10[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];
    if (v25 >= 0xD) {
      unsigned int v25 = 13;
    }
    *uint64_t v14 = v25;
    a8 = 0xF000000000000000;
LABEL_9:
    TetraRatchetState.sealMessage(message:authenticatedData:prekeyHash:)(v33, v34, v35, v36, v37, v38, a7, a8, a9);
    outlined consume of Data?(a7, a8);
    return;
  }
  if (specialized static Data.== infix(_:_:)(*(void *)((char *)v14 + *(int *)(v21 + 32)), *(void *)((char *)v14 + *(int *)(v21 + 32) + 8), a7, a8))
  {
    unsigned int v26 = *(_DWORD *)&a10[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];
    if (v26 >= 0xD) {
      unsigned int v26 = 13;
    }
    *uint64_t v14 = v26;
    outlined copy of Data._Representation(a7, a8);
    goto LABEL_9;
  }
  uint64_t v31 = a9;
  uint64_t v32 = a12;
  uint64_t v27 = a10;
  TetraSessionState.init(remoteTetraRegistration:sessionDST:)(v27, a11, v32, v24);
  if (!v13)
  {
    unsigned int v28 = *(_DWORD *)&v27[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];
    if (v28 >= 0xD) {
      unsigned int v28 = 13;
    }
    *uint64_t v24 = v28;
    if (*((unsigned char *)v24 + *(int *)(v21 + 36)))
    {
      a7 = 0;
      a8 = 0xF000000000000000;
    }
    else
    {
      outlined copy of Data._Representation(a7, a8);
    }
    uint64_t v29 = v31;
    TetraRatchetState.sealMessage(message:authenticatedData:prekeyHash:)(v33, v34, v35, v36, v37, v38, a7, a8, (uint64_t)v20);
    outlined consume of Data?(a7, a8);
    TetraSessionStates.makeDefault(_:)(v24);
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    outlined init with take of TetraSessionState((uint64_t)v20, v29, (uint64_t (*)(void))type metadata accessor for TetraRatchetOuterMessage);
  }
}

NSObject *TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
  uint64_t v7 = *(void *)(type metadata accessor for TetraSessionState() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2164944D0;
  outlined init with copy of TetraSessionStates(v3, v9 + v8, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  type metadata accessor for TetraSessionStates();
  unint64_t v17 = v9;
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  v16[2] = a2;
  void v16[3] = a3;
  v16[4] = a1;
  unint64_t v11 = *(void *)(specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:), (uint64_t)v16, v9)+ 16);
  if (v11 <= 1)
  {
    swift_bridgeObjectRelease();
    return (v11 == 1);
  }
  else
  {
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    uint64_t result = MessageProtectionLog();
    if (result)
    {
      uint64_t v14 = result;
      if (os_log_type_enabled(result, v12))
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 134217984;
        swift_bridgeObjectRelease();
        unint64_t v17 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2163F2000, v14, v12, "Unexpectedly found %ld colliding prekey hashes", v15, 0xCu);
        MEMORY[0x2166CDD30](v15, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      return 0;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

NSObject *TetraSessionStates.openMessage(_:prekeysHash:sessionDST:theirTetraVersion:didRatchet:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, unsigned int a6, unsigned char *a7)
{
  uint64_t v9 = v8;
  uint64_t v10 = v7;
  uint64_t v134 = a7;
  uint64_t v140 = a4;
  uint64_t v141 = a5;
  uint64_t v139 = a1;
  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v138 = type metadata accessor for TetraSessionState();
  uint64_t v14 = *(void *)(v138 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v138);
  uint64_t v143 = (_DWORD *)((char *)v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v135 = (int *)((char *)v118 - v17);
  if (a3 >> 60 == 15)
  {
LABEL_125:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
    unint64_t v88 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v136 = *(void *)(v14 + 72);
    uint64_t v89 = swift_allocObject();
    *(_OWORD *)(v89 + 16) = xmmword_2164944D0;
    outlined init with copy of TetraSessionStates((uint64_t)v10, v89 + v88, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    type metadata accessor for TetraSessionStates();
    __s1[0] = v89;
    uint64_t v90 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v90);
    size_t v92 = *(void *)(__s1[0] + 16);
    if (a6 >= 0xD) {
      int v93 = 13;
    }
    else {
      int v93 = a6;
    }
    LODWORD(v137) = v93;
    if (v92)
    {
      uint64_t v131 = v10;
      uint64_t v130 = __s1[0];
      uint64_t v94 = __s1[0] + v88;
      *(void *)&long long v91 = 136315394;
      long long v133 = v91;
      uint64_t v132 = MEMORY[0x263F8EE58] + 8;
      uint64_t v95 = v138;
      uint64_t v96 = v134;
      do
      {
        size_t v142 = v92;
        uint64_t v107 = v143;
        outlined init with copy of TetraSessionStates(v94, (uint64_t)v143, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        swift_beginAccess();
        *uint64_t v107 = v137;
        *((unsigned char *)v107 + *(int *)(v95 + 36)) = 1;
        uint64_t v108 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v139, v140, v141, v96);
        if (!v9)
        {
          uint64_t v9 = v108;
          swift_endAccess();
          swift_bridgeObjectRelease();
          unsigned int v28 = v143;
          TetraSessionStates.makeDefault(_:)(v143);
          goto LABEL_138;
        }
        swift_endAccess();
        os_log_type_t v109 = static os_log_type_t.error.getter();
        int v110 = MessageProtectionLog();
        if (!v110) {
          goto LABEL_173;
        }
        int v111 = v110;
        if (os_log_type_enabled(v110, v109))
        {
          uint64_t v97 = v9;
          uint64_t v98 = v9;
          uint64_t v99 = swift_slowAlloc();
          uint64_t v135 = (int *)swift_slowAlloc();
          __s1[0] = (uint64_t)v135;
          *(_DWORD *)uint64_t v99 = v133;
          id v100 = (uint64_t *)((char *)v143 + *(int *)(v95 + 32));
          LODWORD(v134) = v109;
          uint64_t v101 = *v100;
          unint64_t v102 = v100[1];
          outlined copy of Data._Representation(*v100, v102);
          Swift::String v103 = Data.base64EncodedString(options:)(0);
          outlined consume of Data._Representation(v101, v102);
          uint64_t v95 = v138;
          *(void *)(v99 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103._countAndFlagsBits, (unint64_t)v103._object, __s1);
          swift_bridgeObjectRelease();
          *(_WORD *)(v99 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v104 = Error.localizedDescription.getter();
          *(void *)(v99 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, __s1);
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_2163F2000, v111, (os_log_type_t)v134, "Failed to decrypt with session: %s. Decryption error: %s", (uint8_t *)v99, 0x16u);
          uint64_t v106 = (char *)v135;
          swift_arrayDestroy();
          MEMORY[0x2166CDD30](v106, -1, -1);
          MEMORY[0x2166CDD30](v99, -1, -1);
        }
        else
        {
        }
        _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v143, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        uint64_t v9 = 0;
        v94 += v136;
        size_t v92 = v142 - 1;
      }
      while (v142 != 1);
      swift_bridgeObjectRelease();
      uint64_t v10 = v131;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v96 = v134;
    }
    *uint64_t v10 = v137;
    uint64_t v112 = v139;
    *((unsigned char *)v10 + *(int *)(v138 + 36)) = 1;
    uint64_t v113 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v112, v140, v141, v96);
    if (!v9) {
      return v113;
    }
    return v9;
  }
  uint64_t v128 = v14;
  uint64_t v18 = v138;
  uint64_t v19 = (uint64_t *)((char *)v7 + *(int *)(v138 + 32));
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  outlined copy of Data?(a2, a3);
  if (specialized static Data.== infix(_:_:)(v20, v21, a2, a3))
  {
    if (a6 >= 0xD) {
      int v22 = 13;
    }
    else {
      int v22 = a6;
    }
    *uint64_t v10 = v22;
    *((unsigned char *)v10 + *(int *)(v18 + 36)) = 1;
    uint64_t v9 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v139, v140, v141, v134);
    outlined consume of Data?(a2, a3);
    return v9;
  }
  *(void *)&long long v133 = a2;
  unsigned int v123 = a6;
  uint64_t v23 = *(void *)((char *)v10 + *(int *)(type metadata accessor for TetraSessionStates() + 24));
  uint64_t v24 = *(void *)(v23 + 16);
  if (!v24)
  {
    outlined consume of Data?(v133, a3);
LABEL_124:
    a6 = v123;
    uint64_t v14 = v128;
    goto LABEL_125;
  }
  uint64_t v131 = v10;
  uint64_t v25 = v23 + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
  uint64_t v26 = v133;
  unint64_t v122 = DWORD1(v133);
  BOOL v27 = __OFSUB__(DWORD1(v133), v133);
  BOOL v127 = v27;
  size_t v126 = DWORD1(v133) - (int)v133;
  size_t v142 = BYTE6(a3);
  uint64_t v130 = a3;
  uint64_t v132 = a3 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v125 = (int)v133;
  uint64_t v121 = (uint64_t)v133 >> 32;
  uint64_t v120 = ((uint64_t)v133 >> 32) - (int)v133;
  uint64_t v136 = *(void *)(v128 + 72);
  v118[1] = v23;
  swift_bridgeObjectRetain();
  unint64_t v129 = a3 >> 62;
  unint64_t v137 = a3 >> 62;
  unsigned int v28 = v135;
  while (2)
  {
    outlined init with copy of TetraSessionStates(v25, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    uint64_t v29 = (uint64_t *)((char *)v28 + *(int *)(v138 + 32));
    uint64_t v31 = *v29;
    unint64_t v30 = v29[1];
    uint64_t v32 = 0;
    switch(v30 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v31), v31))
        {
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
        }
        uint64_t v32 = HIDWORD(v31) - (int)v31;
LABEL_20:
        outlined copy of Data._Representation(v31, v30);
        break;
      case 2uLL:
        uint64_t v34 = *(void *)(v31 + 16);
        uint64_t v33 = *(void *)(v31 + 24);
        uint64_t v32 = v33 - v34;
        if (!__OFSUB__(v33, v34)) {
          goto LABEL_20;
        }
        goto LABEL_151;
      case 3uLL:
        break;
      default:
        uint64_t v32 = BYTE6(v30);
        break;
    }
    size_t v35 = v142;
    switch(v137)
    {
      case 1uLL:
        size_t v35 = v126;
        if (v127) {
          goto LABEL_152;
        }
        goto LABEL_25;
      case 2uLL:
        uint64_t v37 = *(void *)(v26 + 16);
        uint64_t v36 = *(void *)(v26 + 24);
        BOOL v38 = __OFSUB__(v36, v37);
        size_t v35 = v36 - v37;
        if (!v38) {
          goto LABEL_25;
        }
        goto LABEL_153;
      case 3uLL:
        if (v32) {
          goto LABEL_13;
        }
        goto LABEL_143;
      default:
LABEL_25:
        if (v32 != v35)
        {
LABEL_13:
          outlined consume of Data._Representation(v31, v30);
LABEL_14:
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
          v25 += v136;
          if (!--v24)
          {
            swift_bridgeObjectRelease();
            outlined consume of Data?(v26, v130);
            uint64_t v10 = v131;
            goto LABEL_124;
          }
          continue;
        }
        if (v32 >= 1)
        {
          switch(v30 >> 62)
          {
            case 1uLL:
              if ((int)v31 > v31 >> 32) {
                goto LABEL_154;
              }
              uint64_t v43 = __DataStorage._bytes.getter();
              if (v43)
              {
                uint64_t v44 = v43;
                uint64_t v45 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v31, v45)) {
                  goto LABEL_156;
                }
                int v124 = (uint64_t *)(v44 + (int)v31 - v45);
              }
              else
              {
                int v124 = 0;
              }
              unsigned int v28 = v135;
              __DataStorage._length.getter();
              if (!v129)
              {
                uint64_t v26 = v133;
                LODWORD(__s1[0]) = v133;
                BYTE4(__s1[0]) = v122;
                *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v133 + 5);
                HIBYTE(__s1[0]) = BYTE7(v133);
                LODWORD(__s1[1]) = v130;
                WORD2(__s1[1]) = WORD2(v130);
                unint64_t v55 = v124;
                if (!v124) {
                  goto LABEL_185;
                }
                unint64_t v56 = __s1;
LABEL_108:
                int v61 = memcmp(v55, v56, v142);
                goto LABEL_120;
              }
              if (v129 == 1)
              {
                if (v121 < v125) {
                  goto LABEL_165;
                }
                swift_retain();
                uint64_t v62 = (char *)__DataStorage._bytes.getter();
                uint64_t v26 = v133;
                if (v62)
                {
                  uint64_t v63 = __DataStorage._offset.getter();
                  if (__OFSUB__(v125, v63)) {
                    goto LABEL_172;
                  }
                  v62 += v125 - v63;
                }
                uint64_t v64 = __DataStorage._length.getter();
                size_t v65 = v120;
                if (v64 < v120) {
                  size_t v65 = v64;
                }
                if (!v124) {
                  goto LABEL_178;
                }
                if (!v62) {
                  goto LABEL_179;
                }
                int v61 = memcmp(v124, v62, v65);
                outlined consume of Data?(v26, v130);
                goto LABEL_120;
              }
              uint64_t v82 = *(void *)(v133 + 16);
              uint64_t v119 = *(char **)(v133 + 24);
              swift_retain();
              swift_retain();
              int v83 = (char *)__DataStorage._bytes.getter();
              if (v83)
              {
                uint64_t v84 = __DataStorage._offset.getter();
                if (__OFSUB__(v82, v84)) {
                  goto LABEL_171;
                }
                v83 += v82 - v84;
              }
              BOOL v38 = __OFSUB__(v119, v82);
              int v85 = &v119[-v82];
              if (v38) {
                goto LABEL_166;
              }
              uint64_t v86 = __DataStorage._length.getter();
              if (v86 >= (uint64_t)v85) {
                size_t v87 = (size_t)v85;
              }
              else {
                size_t v87 = v86;
              }
              if (!v124) {
                goto LABEL_186;
              }
              unsigned int v28 = v135;
              if (!v83) {
                goto LABEL_187;
              }
              int v61 = memcmp(v124, v83, v87);
              swift_release();
              uint64_t v26 = v133;
              goto LABEL_119;
            case 2uLL:
              uint64_t v46 = *(void *)(v31 + 16);
              swift_retain();
              swift_retain();
              uint64_t v47 = __DataStorage._bytes.getter();
              int v124 = (uint64_t *)(v30 & 0x3FFFFFFFFFFFFFFFLL);
              if (v47)
              {
                uint64_t v48 = v47;
                uint64_t v49 = __DataStorage._offset.getter();
                if (__OFSUB__(v46, v49)) {
                  goto LABEL_155;
                }
                uint64_t v119 = (char *)(v48 + v46 - v49);
              }
              else
              {
                uint64_t v119 = 0;
              }
              unsigned int v28 = v135;
              __DataStorage._length.getter();
              if (!v129)
              {
                LOWORD(__s1[0]) = v26;
                BYTE2(__s1[0]) = BYTE2(v26);
                BYTE3(__s1[0]) = BYTE3(v26);
                BYTE4(__s1[0]) = v122;
                BYTE5(__s1[0]) = BYTE5(v26);
                BYTE6(__s1[0]) = BYTE6(v26);
                HIBYTE(__s1[0]) = HIBYTE(v26);
                LODWORD(__s1[1]) = v130;
                WORD2(__s1[1]) = WORD2(v130);
                if (!v119) {
                  goto LABEL_182;
                }
                int v61 = memcmp(v119, __s1, v142);
LABEL_95:
                swift_release();
                goto LABEL_119;
              }
              if (v129 == 1)
              {
                if (v121 < v125) {
                  goto LABEL_159;
                }
                swift_retain();
                uint64_t v57 = (char *)__DataStorage._bytes.getter();
                if (v57)
                {
                  uint64_t v58 = __DataStorage._offset.getter();
                  if (__OFSUB__(v125, v58)) {
                    goto LABEL_170;
                  }
                  v57 += v125 - v58;
                }
                uint64_t v59 = __DataStorage._length.getter();
                size_t v60 = v120;
                if (v59 < v120) {
                  size_t v60 = v59;
                }
                if (!v119) {
                  goto LABEL_176;
                }
                if (!v57) {
                  goto LABEL_177;
                }
                int v61 = memcmp(v119, v57, v60);
                outlined consume of Data?(v26, v130);
                goto LABEL_95;
              }
              uint64_t v76 = *(void *)(v26 + 16);
              v118[0] = *(void *)(v26 + 24);
              swift_retain();
              swift_retain();
              uint64_t v77 = (char *)__DataStorage._bytes.getter();
              if (v77)
              {
                uint64_t v78 = __DataStorage._offset.getter();
                if (__OFSUB__(v76, v78)) {
                  goto LABEL_169;
                }
                v77 += v76 - v78;
              }
              BOOL v38 = __OFSUB__(v118[0], v76);
              int64_t v79 = v118[0] - v76;
              if (v38) {
                goto LABEL_164;
              }
              uint64_t v80 = __DataStorage._length.getter();
              if (v80 >= v79) {
                size_t v81 = v79;
              }
              else {
                size_t v81 = v80;
              }
              if (!v119) {
                goto LABEL_183;
              }
              unsigned int v28 = v135;
              if (!v77) {
                goto LABEL_184;
              }
              int v61 = memcmp(v119, v77, v81);
              swift_release();
              swift_release();
              swift_release();
LABEL_119:
              swift_release();
LABEL_120:
              outlined consume of Data._Representation(v31, v30);
              if (!v61) {
                goto LABEL_144;
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v129) {
                goto LABEL_51;
              }
              if (v129 == 1)
              {
                if (v121 < v125) {
                  goto LABEL_158;
                }
                outlined copy of Data?(v133, v130);
                uint64_t v50 = __DataStorage._bytes.getter();
                if (!v50) {
                  goto LABEL_175;
                }
                uint64_t v40 = v50;
                uint64_t v51 = __DataStorage._offset.getter();
                uint64_t v42 = v125 - v51;
                if (__OFSUB__(v125, v51)) {
                  goto LABEL_163;
                }
LABEL_47:
                uint64_t v52 = __DataStorage._length.getter();
                if (v52 >= v120) {
                  size_t v53 = v120;
                }
                else {
                  size_t v53 = v52;
                }
                int v54 = memcmp(__s1, (const void *)(v40 + v42), v53);
                uint64_t v26 = v133;
                outlined consume of Data?(v133, v130);
              }
              else
              {
                uint64_t v73 = *(void *)(v26 + 16);
                uint64_t v72 = *(void *)(v26 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = (char *)__DataStorage._bytes.getter();
                if (v68)
                {
                  uint64_t v74 = __DataStorage._offset.getter();
                  if (__OFSUB__(v73, v74)) {
                    goto LABEL_168;
                  }
                  v68 += v73 - v74;
                }
                BOOL v38 = __OFSUB__(v72, v73);
                int64_t v70 = v72 - v73;
                if (v38) {
                  goto LABEL_161;
                }
                uint64_t v71 = __DataStorage._length.getter();
                if (!v68) {
                  goto LABEL_181;
                }
LABEL_87:
                if (v71 >= v70) {
                  size_t v75 = v70;
                }
                else {
                  size_t v75 = v71;
                }
                int v54 = memcmp(__s1, v68, v75);
                swift_release();
                uint64_t v26 = v133;
                swift_release();
              }
              outlined consume of Data._Representation(v31, v30);
              unsigned int v28 = v135;
              if (!v54) {
                goto LABEL_144;
              }
              goto LABEL_14;
            default:
              __s1[0] = v31;
              LOWORD(__s1[1]) = v30;
              BYTE2(__s1[1]) = BYTE2(v30);
              BYTE3(__s1[1]) = BYTE3(v30);
              BYTE4(__s1[1]) = BYTE4(v30);
              BYTE5(__s1[1]) = BYTE5(v30);
              if (!v129)
              {
LABEL_51:
                __int16 v144 = v26;
                char v145 = BYTE2(v26);
                char v146 = BYTE3(v26);
                char v147 = v122;
                char v148 = BYTE5(v26);
                char v149 = BYTE6(v26);
                char v150 = HIBYTE(v26);
                int v151 = v130;
                __int16 v152 = WORD2(v130);
                unint64_t v55 = __s1;
                unint64_t v56 = (uint64_t *)&v144;
                goto LABEL_108;
              }
              if (v129 == 1)
              {
                if (v121 < v125) {
                  goto LABEL_157;
                }
                outlined copy of Data?(v133, v130);
                uint64_t v39 = __DataStorage._bytes.getter();
                if (!v39)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_175:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
LABEL_187:
                  __break(1u);
                  JUMPOUT(0x21647A35CLL);
                }
                uint64_t v40 = v39;
                uint64_t v41 = __DataStorage._offset.getter();
                uint64_t v42 = v125 - v41;
                if (__OFSUB__(v125, v41)) {
                  goto LABEL_162;
                }
                goto LABEL_47;
              }
              uint64_t v67 = *(void *)(v26 + 16);
              uint64_t v66 = *(void *)(v26 + 24);
              swift_retain();
              swift_retain();
              uint64_t v68 = (char *)__DataStorage._bytes.getter();
              if (v68)
              {
                uint64_t v69 = __DataStorage._offset.getter();
                if (__OFSUB__(v67, v69)) {
                  goto LABEL_167;
                }
                v68 += v67 - v69;
              }
              BOOL v38 = __OFSUB__(v66, v67);
              int64_t v70 = v66 - v67;
              if (v38) {
                goto LABEL_160;
              }
              uint64_t v71 = __DataStorage._length.getter();
              if (!v68) {
                goto LABEL_180;
              }
              goto LABEL_87;
          }
          goto LABEL_14;
        }
LABEL_143:
        outlined consume of Data._Representation(v31, v30);
LABEL_144:
        swift_bridgeObjectRelease();
        if (v123 >= 0xD) {
          int v115 = 13;
        }
        else {
          int v115 = v123;
        }
        *unsigned int v28 = v115;
        uint64_t v116 = v139;
        *((unsigned char *)v28 + *(int *)(v138 + 36)) = 1;
        uint64_t v117 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v116, v140, v141, v134);
        if (v8)
        {
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
          outlined consume of Data?(v26, v130);
        }
        else
        {
          uint64_t v9 = v117;
          TetraSessionStates.makeDefault(_:)(v28);
          outlined consume of Data?(v26, v130);
LABEL_138:
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        }
        return v9;
    }
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for TetraSessionState();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  os_log_type_t v12 = (char *)v20 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    uint64_t v15 = MEMORY[0x263F8EE78];
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void *)(v24 + 72);
      outlined init with copy of TetraSessionStates(a3 + v16 + v13 * v14, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      char v17 = a1(v12);
      if (v3)
      {
        _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if (v17)
      {
        outlined init with take of TetraSessionState((uint64_t)v12, v23, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = *(void *)(v25 + 16);
        unint64_t v18 = *(void *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }
        *(void *)(v15 + 16) = v19 + 1;
        uint64_t result = outlined init with take of TetraSessionState(v23, v15 + v16 + v19 * v13, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

void *specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v5 = a3;
  unint64_t v18 = (void *)MEMORY[0x263F8EE78];
  if (a3 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v5 & 0xC000000000000001;
      unint64_t v14 = v5;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = MEMORY[0x2166CCBD0](v9, v5);
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v17 = v10;
        uint64_t v3 = a2;
        char v12 = a1(&v17);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          uint64_t v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

void TetraSessionStates.makeDefault(_:)(_DWORD *a1)
{
  uint64_t v2 = (uint64_t)v1;
  if (specialized static TetraSessionState.== infix(_:_:)(v1, a1))
  {
    outlined assign with copy of TetraSessionState((uint64_t)a1, (uint64_t)v1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
    uint64_t v4 = *(void *)(type metadata accessor for TetraSessionState() - 8);
    unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2164944D0;
    outlined init with copy of TetraSessionStates(v2, v6 + v5, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    uint64_t v7 = (uint64_t *)(v2 + *(int *)(type metadata accessor for TetraSessionStates() + 24));
    specialized Array.append<A>(contentsOf:)(*v7);
    *uint64_t v7 = v6;
    uint64_t v8 = outlined assign with copy of TetraSessionState((uint64_t)a1, v2);
    MEMORY[0x270FA5388](v8);
    uint64_t v9 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))_s17MessageProtection18TetraSessionStatesV11makeDefaultyyAA0cD5StateVFSbAFXEfU_TA_0);
    int64_t v10 = *(void *)(*v7 + 16);
    if (v10 < v9)
    {
      __break(1u);
      goto LABEL_12;
    }
    specialized Array.replaceSubrange<A>(_:with:)(v9, v10);
  }
  unint64_t v11 = *(void *)(*(void *)(v2 + *(int *)(type metadata accessor for TetraSessionStates() + 24)) + 16);
  if (v11 < 3) {
    return;
  }
  specialized RangeReplaceableCollection<>.removeLast(_:)(v11 - 2);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  uint64_t v13 = MessageProtectionLog();
  if (!v13)
  {
LABEL_12:
    __break(1u);
    return;
  }
  unint64_t v14 = v13;
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2163F2000, v14, v12, "Removed %ld Tetra sessions.", v15, 0xCu);
    MEMORY[0x2166CDD30](v15, -1, -1);
  }
}

Swift::Bool __swiftcall TetraSessionStates.hasSessionWithCompatibleVersion()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for TetraSessionState();
  uint64_t v4 = *(void *)(v49 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v49);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  int64_t v10 = (_DWORD *)((char *)&v47 - v9);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v47 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (_DWORD *)((char *)&v47 - v14);
  unsigned int v16 = *v0 - 13;
  uint64_t v17 = *(int *)(type metadata accessor for TetraSessionStates() + 24);
  uint64_t v50 = v0;
  unint64_t v18 = (void *)((char *)v0 + v17);
  uint64_t v19 = *v18;
  if (v16 <= 0x12)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    uint64_t v52 = MEMORY[0x263F8EE78];
    uint64_t v21 = *(void *)(v19 + 16);
    Swift::Bool result = swift_bridgeObjectRetain();
    if (v21)
    {
      uint64_t v48 = v18;
      unint64_t v23 = 0;
      uint64_t v24 = MEMORY[0x263F8EE78];
      uint64_t v50 = (_DWORD *)v21;
      while (v23 < *(void *)(v19 + 16))
      {
        unint64_t v25 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
        uint64_t v26 = *(void *)(v4 + 72);
        outlined init with copy of TetraSessionStates(v19 + v25 + v26 * v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        if ((*v15 - 13) > 0x12)
        {
          Swift::Bool result = _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        }
        else
        {
          uint64_t v27 = (uint64_t)v13;
          outlined init with take of TetraSessionState((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
          }
          uint64_t v24 = v52;
          unint64_t v29 = *(void *)(v52 + 16);
          unint64_t v28 = *(void *)(v52 + 24);
          if (v29 >= v28 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
            uint64_t v24 = v52;
          }
          *(void *)(v24 + 16) = v29 + 1;
          uint64_t v30 = v24 + v25 + v29 * v26;
          uint64_t v13 = (char *)v27;
          Swift::Bool result = outlined init with take of TetraSessionState(v27, v30, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
          uint64_t v21 = (uint64_t)v50;
        }
        if (v21 == ++v23)
        {
          uint64_t v20 = v52;
          unint64_t v18 = v48;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *unint64_t v18 = v20;
    return 1;
  }
  uint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t v52 = MEMORY[0x263F8EE78];
  uint64_t v32 = *(void *)(v19 + 16);
  Swift::Bool result = swift_bridgeObjectRetain();
  if (v32)
  {
    uint64_t v47 = v3;
    uint64_t v48 = v18;
    unint64_t v33 = 0;
    uint64_t v34 = MEMORY[0x263F8EE78];
    uint64_t v51 = v4;
    while (v33 < *(void *)(v19 + 16))
    {
      unint64_t v35 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v36 = *(void *)(v4 + 72);
      outlined init with copy of TetraSessionStates(v19 + v35 + v36 * v33, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      if ((*v10 - 13) > 0x12)
      {
        Swift::Bool result = _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      }
      else
      {
        uint64_t v37 = (uint64_t)v7;
        outlined init with take of TetraSessionState((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
        }
        uint64_t v34 = v52;
        unint64_t v39 = *(void *)(v52 + 16);
        unint64_t v38 = *(void *)(v52 + 24);
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          uint64_t v34 = v52;
        }
        *(void *)(v34 + 16) = v39 + 1;
        uint64_t v40 = v34 + v35 + v39 * v36;
        uint64_t v7 = (char *)v37;
        Swift::Bool result = outlined init with take of TetraSessionState(v37, v40, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
        uint64_t v4 = v51;
      }
      if (v32 == ++v33)
      {
        uint64_t v31 = v52;
        uint64_t v3 = v47;
        unint64_t v18 = v48;
        goto LABEL_27;
      }
    }
    goto LABEL_34;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *unint64_t v18 = v31;
  if (!*(void *)(v31 + 16)) {
    return 0;
  }
  uint64_t v42 = (uint64_t)v3;
  unint64_t v43 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v44 = v18;
  uint64_t v45 = v31 + v43;
  uint64_t v46 = (uint64_t)v50;
  _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  Swift::Bool result = outlined init with copy of TetraSessionStates(v45, v46, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  if (!*(void *)(*v44 + 16))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  outlined init with copy of TetraSessionStates(*v44 + v43, v42, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v42, 0, 1, v49);
  Swift::Bool result = outlined destroy of TetraSessionStates?(v42, &demangling cache variable for type metadata for TetraSessionState?);
  if (*(void *)(*v44 + 16))
  {
    Swift::Bool v41 = 1;
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    return v41;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t closure #1 in TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v43 = a3;
  uint64_t v44 = (char *)a4;
  uint64_t v6 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (P256.KeyAgreement.PublicKey?, P256.KeyAgreement.PublicKey?));
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = type metadata accessor for TetraSessionState();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = specialized static Data.== infix(_:_:)(*(void *)(a1 + *(int *)(v19 + 32)), *(void *)(a1 + *(int *)(v19 + 32) + 8), a2, v43);
  outlined init with copy of TetraSessionStates(a1, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  outlined init with copy of P256.KeyAgreement.PublicKey?((uint64_t)v44, (uint64_t)v17);
  if ((a2 & 1) == 0)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    char v27 = 0;
    return v27 & 1;
  }
  uint64_t v22 = (uint64_t)v15;
  uint64_t v40 = v8;
  uint64_t v23 = (uint64_t)&v11[*(int *)(v9 + 48)];
  outlined init with copy of P256.KeyAgreement.PublicKey?((uint64_t)&v21[*(int *)(v18 + 28)], (uint64_t)v11);
  outlined init with copy of P256.KeyAgreement.PublicKey?((uint64_t)v17, v23);
  uint64_t v24 = v41;
  uint64_t v25 = v42;
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  if (v26((uint64_t)v11, 1, v42) != 1)
  {
    outlined init with copy of P256.KeyAgreement.PublicKey?((uint64_t)v11, v22);
    if (v26(v23, 1, v25) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v40, v23, v25);
      uint64_t v39 = v22;
      uint64_t v28 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v43 = v29;
      uint64_t v30 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      uint64_t v44 = v11;
      uint64_t v31 = v24;
      unint64_t v33 = v32;
      uint64_t v34 = v28;
      unint64_t v35 = v43;
      char v27 = specialized static Data.== infix(_:_:)(v28, v43, v30, v32);
      outlined consume of Data._Representation(v30, v33);
      outlined consume of Data._Representation(v34, v35);
      uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v37 = v42;
      v36(v40, v42);
      outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
      v36((char *)v39, v37);
      outlined destroy of TetraSessionStates?((uint64_t)v44, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      return v27 & 1;
    }
    outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v25);
    goto LABEL_8;
  }
  outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  if (v26(v23, 1, v25) != 1)
  {
LABEL_8:
    outlined destroy of TetraSessionStates?((uint64_t)v11, &demangling cache variable for type metadata for (P256.KeyAgreement.PublicKey?, P256.KeyAgreement.PublicKey?));
    char v27 = 0;
    return v27 & 1;
  }
  outlined destroy of TetraSessionStates?((uint64_t)v11, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  char v27 = 1;
  return v27 & 1;
}

Swift::Void __swiftcall TetraSessionStates.cleanupPreviousSessionStates()()
{
  unint64_t v1 = *(void *)(*(void *)(v0 + *(int *)(type metadata accessor for TetraSessionStates() + 24)) + 16);
  if (v1 >= 3)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(v1 - 2);
    os_log_type_t v2 = static os_log_type_t.error.getter();
    uint64_t v3 = MessageProtectionLog();
    if (v3)
    {
      log = v3;
      if (os_log_type_enabled(v3, v2))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v4 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2163F2000, log, v2, "Removed %ld Tetra sessions.", v4, 0xCu);
        MEMORY[0x2166CDD30](v4, -1, -1);
      }
      else
      {
      }
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      BOOL v3 = v2 >= result;
      Swift::Bool result = v2 - result;
      if (v3) {
        return specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in TetraSessionStates.makeDefault(_:)(_DWORD *a1, _DWORD *a2)
{
  return specialized static TetraSessionState.== infix(_:_:)(a1, a2) & 1;
}

uint64_t TetraSessionStates.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraSessionStates.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  type metadata accessor for TetraSessionState();
  lazy protocol witness table accessor for type TetraSessionState and conformance TetraSessionState(&lazy protocol witness table cache variable for type TetraSessionState and conformance TetraSessionState);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for TetraSessionStates();
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TetraSessionState]);
    lazy protocol witness table accessor for type [TetraSessionState] and conformance <A> [A](&lazy protocol witness table cache variable for type [TetraSessionState] and conformance <A> [A], &lazy protocol witness table cache variable for type TetraSessionState and conformance TetraSessionState);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TetraSessionStates.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v20 = type metadata accessor for TetraSessionState();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraSessionStates.CodingKeys>);
  uint64_t v19 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TetraSessionStates();
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(v8 + 20);
  v10[v11] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v17 = v11;
  uint64_t v12 = v19;
  uint64_t v13 = (uint64_t)v10;
  char v26 = 0;
  lazy protocol witness table accessor for type TetraSessionState and conformance TetraSessionState(&lazy protocol witness table cache variable for type TetraSessionState and conformance TetraSessionState);
  uint64_t v14 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of TetraSessionState(v22, v13, (uint64_t (*)(void))type metadata accessor for TetraSessionState);
  char v25 = 1;
  *(unsigned char *)(v13 + v17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TetraSessionState]);
  char v24 = 2;
  lazy protocol witness table accessor for type [TetraSessionState] and conformance <A> [A](&lazy protocol witness table cache variable for type [TetraSessionState] and conformance <A> [A], &lazy protocol witness table cache variable for type TetraSessionState and conformance TetraSessionState);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v14);
  *(void *)(v13 + *(int *)(v7 + 24)) = v23;
  outlined init with copy of TetraSessionStates(v13, v18, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0(v13, (uint64_t (*)(void))type metadata accessor for TetraSessionStates);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraSessionStates.CodingKeys()
{
  unint64_t v1 = 0xD000000000000015;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x53746C7561666564;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraSessionStates.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TetraSessionStates.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraSessionStates.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraSessionStates.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraSessionStates@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraSessionStates.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraSessionStates(void *a1)
{
  return TetraSessionStates.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys);
  }
  return result;
}

uint64_t _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type TetraSessionState and conformance TetraSessionState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TetraSessionState();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TetraSessionState] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TetraSessionState]);
    lazy protocol witness table accessor for type TetraSessionState and conformance TetraSessionState(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of TetraSessionStates(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(uint64_t a1)
{
  return closure #1 in TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32)) & 1;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt64)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t _s17MessageProtection18TetraSessionStatesV11makeDefaultyyAA0cD5StateVFSbAFXEfU_TA_0(_DWORD *a1)
{
  return specialized static TetraSessionState.== infix(_:_:)(a1, *(_DWORD **)(v1 + 16)) & 1;
}

uint64_t outlined init with take of TetraSessionState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for TetraSessionStates.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21647C16CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TetraSessionStates.CodingKeys()
{
  return &unk_26C703068;
}

uint64_t specialized TetraSessionStates.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x53746C7561666564 && a2 == 0xEE006E6F69737365;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021649CB70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021649CB90)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

id HKDF.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id HKDF.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HKDF();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HKDF.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HKDF();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static HKDF.deriveKeyWith(_:salt:outputSize:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SymmetricKey();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v14[-v8];
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v10;
  SymmetricKey.init<A>(data:)();
  uint64_t v15 = a2;
  type metadata accessor for SHA256();
  type metadata accessor for NSData();
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_2(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_2(&lazy protocol witness table cache variable for type NSData and conformance NSData, (void (*)(uint64_t))type metadata accessor for NSData);
  static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)();
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
  v11(v7, v3);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v12 = v15;
  v11(v9, v3);
  return v12;
}

uint64_t type metadata accessor for HKDF()
{
  return self;
}

uint64_t _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LiteSymmetricRatchetErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21647C8B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiteSymmetricRatchetErrors()
{
  return &type metadata for LiteSymmetricRatchetErrors;
}

id TetraErrorHelpers.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id TetraErrorHelpers.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraErrorHelpers();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TetraErrorHelpers.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraErrorHelpers();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static TetraErrorHelpers.fRStringFrom(error:)()
{
  uint64_t v0 = (void *)_convertErrorToNSError(_:)();
  id v1 = objc_msgSend(v0, sel_domain);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  v3._uint64_t countAndFlagsBits = 45;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  objc_msgSend(v0, sel_code);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);

  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized static TetraErrorHelpers.shouldMarkForStateReset(string:)(void *a1)
{
  lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
  uint64_t v2 = (void *)swift_allocError();
  unsigned char *v3 = 1;
  Swift::String v4 = (void *)_convertErrorToNSError(_:)();
  id v5 = objc_msgSend(v4, sel_domain);

  if (!v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = (id)MEMORY[0x2166CC8B0](v6);
    swift_bridgeObjectRelease();
  }

  lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
  uint64_t v7 = (void *)swift_allocError();
  *uint64_t v8 = 3;
  uint64_t v9 = (void *)_convertErrorToNSError(_:)();
  id v10 = objc_msgSend(v9, sel_domain);

  if (!v10)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v10 = (id)MEMORY[0x2166CC8B0](v11);
    swift_bridgeObjectRelease();
  }

  lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
  uint64_t v12 = (void *)swift_allocError();
  *uint64_t v13 = 4;
  uint64_t v14 = specialized static TetraErrorHelpers.fRStringFrom(error:)();
  uint64_t v16 = v15;

  LODWORD(v12) = objc_msgSend(a1, sel_containsString_, v5);
  if (v12)
  {
    swift_bridgeObjectRelease();

    return 1;
  }
  else
  {
    unsigned int v18 = objc_msgSend(a1, sel_containsString_, v10);

    if (v18)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      uint64_t v19 = (void *)MEMORY[0x2166CC8B0](v14, v16);
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend(a1, sel_isEqualToString_, v19);
    }
  }
  return (uint64_t)v17;
}

uint64_t type metadata accessor for TetraErrorHelpers()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for TetraGeneralError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21647CDF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraGeneralError()
{
  return &type metadata for TetraGeneralError;
}

ValueMetadata *type metadata accessor for TetraAKE()
{
  return &type metadata for TetraAKE;
}

unsigned char *storeEnumTagSinglePayload for TetraSymmetricRatchetErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x21647CF90);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraSymmetricRatchetErrors()
{
  return &type metadata for TetraSymmetricRatchetErrors;
}

ValueMetadata *type metadata accessor for TetraCommitmentError()
{
  return &type metadata for TetraCommitmentError;
}

unsigned char *storeEnumTagSinglePayload for TetraAKE(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21647D0A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraKeyStorageError()
{
  return &type metadata for TetraKeyStorageError;
}

void *initializeBufferWithCopyOfBuffer for TetraQueryLookupError(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for TetraQueryLookupError(id *a1)
{
}

void **assignWithCopy for TetraQueryLookupError(void **a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = v3;

  return a1;
}

void **assignWithTake for TetraQueryLookupError(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for TetraQueryLookupError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TetraQueryLookupError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TetraQueryLookupError(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for TetraQueryLookupError(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TetraQueryLookupError()
{
  return &type metadata for TetraQueryLookupError;
}

unint64_t lazy protocol witness table accessor for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors);
  }
  return result;
}

uint64_t static TetraPBPadding.padMessage(_:)()
{
  type metadata accessor for TetraPB_TetraInnerMessage(0);
  lazy protocol witness table accessor for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage();
  uint64_t v1 = Message.serializedData(partial:)();
  if (v0) {
    goto LABEL_32;
  }
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  unint64_t v5 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v1), v1)) {
        goto LABEL_28;
      }
      unint64_t v5 = HIDWORD(v1) - (int)v1;
LABEL_7:
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_33;
      }
      if (!HIDWORD(v5))
      {
LABEL_10:
        unint64_t v8 = static Padme.paddedMessageByteCount(_:)();
        if (v9)
        {
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if (v5 == v8) {
          return v4;
        }
        BOOL v10 = v8 >= v5;
        unint64_t v11 = v8 - v5;
        char v12 = !v10;
        if (v10)
        {
          if (v11 <= 1)
          {
            unint64_t v13 = static Padme.paddedMessageByteCount(_:)();
            if (v14)
            {
LABEL_31:
              __break(1u);
LABEL_32:
              swift_unexpectedError();
              __break(1u);
LABEL_33:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x21647D5A8);
            }
            BOOL v10 = v13 >= v5;
            unint64_t v11 = v13 - v5;
            char v12 = !v10;
          }
          if ((v12 & 1) == 0)
          {
            if ((v11 & 0x8000000000000000) == 0)
            {
              uint64_t v15 = static TetraPBPadding.paddingBytesToAdd(for:)(v11);
              unint64_t v17 = v16;
              outlined copy of Data._Representation(v4, v3);
              specialized Data.append<A>(contentsOf:)(v15, v17);
              outlined consume of Data._Representation(v15, v17);
              outlined consume of Data._Representation(v4, v3);
              return v4;
            }
            goto LABEL_27;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      lazy protocol witness table accessor for type TetraPBErrors and conformance TetraPBErrors();
      swift_allocError();
      swift_willThrow();
      outlined consume of Data._Representation(v4, v3);
      return v4;
    case 2uLL:
      uint64_t v7 = *(void *)(v1 + 16);
      uint64_t v6 = *(void *)(v1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_7;
      }
      goto LABEL_29;
    case 3uLL:
      goto LABEL_10;
    default:
      unint64_t v5 = BYTE6(v2);
      goto LABEL_10;
  }
}

unint64_t lazy protocol witness table accessor for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage;
  if (!lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage)
  {
    type metadata accessor for TetraPB_TetraInnerMessage(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage);
  }
  return result;
}

uint64_t static TetraPBPadding.paddingBytesToAdd(for:)(uint64_t a1)
{
  if (a1 < 2)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v2 = a1 - 1;
  if (!((unint64_t)(a1 - 1) >> 32))
  {
    uint64_t v3 = 2;
    uint64_t v4 = 3;
    uint64_t v5 = 4;
    if (v2 >> 28) {
      uint64_t v5 = 5;
    }
    if (v2 >= 0x200000) {
      uint64_t v4 = v5;
    }
    if (v2 >= 0x4000) {
      uint64_t v3 = v4;
    }
    if (v2 >= 0x80) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 1;
    }
    uint64_t v19 = specialized Data.init(count:)(v6);
    unint64_t v20 = v7;
    unint64_t v8 = v2 - v6;
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(&v19, v8);
    unint64_t v17 = (void *)specialized Data.init(count:)(v8);
    unint64_t v18 = v9;
    if (!specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t *)&v17, v8))
    {
      uint64_t v10 = (uint64_t)v17;
      unint64_t v11 = v18;
      unint64_t v17 = &outlined read-only object #0 of static TetraPBPadding.paddingBytesToAdd(for:);
      uint64_t v12 = v19;
      unint64_t v13 = v20;
      outlined copy of Data._Representation(v19, v20);
      specialized Array.append<A>(contentsOf:)(v12, v13);
      outlined copy of Data._Representation(v10, v11);
      specialized Array.append<A>(contentsOf:)(v10, v11);
      if (v17[2] == a1)
      {
        uint64_t v14 = swift_bridgeObjectRetain();
        uint64_t v15 = specialized Data.init<A>(_:)(v14);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v10, v11);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v12, v13);
        return v15;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraPBErrors and conformance TetraPBErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors;
  if (!lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors;
  if (!lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors);
  }
  return result;
}

uint64_t closure #1 in static TetraPBPadding.paddingBytesToAdd(for:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    if ((a3 & 0x8000000000000000) != 0) {
      goto LABEL_11;
    }
    unint64_t v3 = HIDWORD(a3);
    if (HIDWORD(a3)) {
      goto LABEL_11;
    }
    do
    {
      if (a3 <= 0x7F && ~result + a2 == v3)
      {
        *(unsigned char *)(result + v3) = a3;
        return result;
      }
      *(unsigned char *)(result + v3) = a3 | 0x80;
      LODWORD(a3) = a3 >> 7;
      ++v3;
    }
    while (!__OFADD__(v3, 1));
    __break(1u);
  }
  __break(1u);
LABEL_11:
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v18, a2);
      uint64_t v5 = v18;
      unint64_t v6 = *((void *)&v18 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v7 = *((void *)&v18 + 1);
      uint64_t v8 = *(void *)(v18 + 16);
      uint64_t v17 = *(void *)(v18 + 24);
      uint64_t v9 = __DataStorage._bytes.getter();
      if (!v9)
      {
        __break(1u);
        JUMPOUT(0x21647DB38);
      }
      uint64_t v10 = v9;
      uint64_t v11 = __DataStorage._offset.getter();
      uint64_t v12 = v8 - v11;
      if (__OFSUB__(v8, v11))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v13 = __OFSUB__(v17, v8);
      uint64_t v14 = v17 - v8;
      if (v13) {
        goto LABEL_15;
      }
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v15;
      }
      closure #1 in static TetraPBPadding.paddingBytesToAdd(for:)(v10 + v12, v10 + v12 + v16, a2);
      *a1 = v18;
      a1[1] = v7 | 0x8000000000000000;
      return;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      closure #1 in static TetraPBPadding.paddingBytesToAdd(for:)((uint64_t)&v18, (uint64_t)&v18, a2);
      return;
    default:
      *(void *)&long long v18 = *a1;
      WORD4(v18) = v2;
      BYTE10(v18) = BYTE2(v2);
      BYTE11(v18) = BYTE3(v2);
      BYTE12(v18) = BYTE4(v2);
      BYTE13(v18) = BYTE5(v2);
      BYTE14(v18) = BYTE6(v2);
      closure #1 in static TetraPBPadding.paddingBytesToAdd(for:)((uint64_t)&v18, (uint64_t)&v18 + BYTE6(v2), a2);
      uint64_t v5 = v18;
      unint64_t v6 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
LABEL_4:
      *a1 = v5;
      a1[1] = v6;
      return;
  }
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, unint64_t a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  closure #1 in static TetraPBPadding.paddingBytesToAdd(for:)(v7 + v9, v7 + v9 + v12, a2);
}

unsigned char *storeEnumTagSinglePayload for TetraPBErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x21647DC88);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraPBErrors()
{
  return &type metadata for TetraPBErrors;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (a2) {
    uint64_t v3 = a3 - a2;
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v3, -result, 0, a2, a3);
  if (v4) {
    unint64_t result = 0;
  }
  if (v3 < result) {
    goto LABEL_10;
  }
  return result;
}

uint64_t specialized BidirectionalCollection.suffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(v9, v8, a2, a3);
  if (v11 <= 0 && v11 > v10)
  {
    uint64_t v12 = v5;
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = (int)a2;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 16);
        goto LABEL_14;
      case 3:
        goto LABEL_16;
      default:
        goto LABEL_11;
    }
  }
  uint64_t v12 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v9, v10, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = a2 >> 32;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 24);
      break;
    case 3:
      break;
    default:
LABEL_11:
      uint64_t v13 = BYTE6(a3);
      break;
  }
  if (v13 < v12)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21647DF04);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = outlined consume of Data._Representation(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t static PaddySymmetricLayer.seal(_:authenticatedData:using:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t v38 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v39 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
  uint64_t v14 = v13 - 8;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v36 - v18;
  unint64_t v20 = (char *)&v36 + *(int *)(v14 + 56) - v18;
  static PaddySymmetricLayer.deriveSymmetricKeyingFromMessageKey(_:)((uint64_t)&v36 - v18, (uint64_t)v20, a5);
  uint64_t v44 = a1;
  unint64_t v45 = a2;
  uint64_t v21 = &v17[*(int *)(v14 + 56)];
  uint64_t v22 = type metadata accessor for SymmetricKey();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v19, v22);
  uint64_t v24 = type metadata accessor for AES.GCM.Nonce();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v21, v20, v24);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v10, v21, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v24);
  uint64_t v42 = v40;
  uint64_t v43 = v41;
  lazy protocol witness table accessor for type Data and conformance Data();
  char v26 = v39;
  uint64_t v27 = v46;
  static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)();
  outlined destroy of TetraSessionStates?((uint64_t)v10, &demangling cache variable for type metadata for AES.GCM.Nonce?);
  if (v27)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v17, v22);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v22);
    unint64_t v29 = v26;
    uint64_t v30 = AES.GCM.SealedBox.ciphertext.getter();
    unint64_t v32 = v31;
    uint64_t v33 = AES.GCM.SealedBox.tag.getter();
    unint64_t v35 = v34;
    uint64_t v44 = v30;
    unint64_t v45 = v32;
    outlined copy of Data._Representation(v30, v32);
    specialized Data.append<A>(contentsOf:)(v33, v35);
    outlined consume of Data._Representation(v33, v35);
    outlined consume of Data._Representation(v30, v32);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v38);
    outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
    return v44;
  }
}

uint64_t static PaddySymmetricLayer.open(_:authenticatedData:using:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *((void *)&v36 + 1) = a4;
  *(void *)&long long v36 = a3;
  uint64_t v8 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v41 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v33 - v15;
  unint64_t v17 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v18) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_20;
      }
      uint64_t v18 = (int)v18;
LABEL_6:
      if (v18 < 17) {
        goto LABEL_24;
      }
      uint64_t v34 = v9;
      uint64_t v35 = v8;
      uint64_t v22 = (uint64_t)&v16[*(int *)(v11 + 48)];
      static PaddySymmetricLayer.deriveSymmetricKeyingFromMessageKey(_:)((uint64_t)&v33 - v15, v22, a5);
      uint64_t v23 = &v14[*(int *)(v11 + 48)];
      uint64_t v24 = type metadata accessor for SymmetricKey();
      uint64_t v25 = *(void *)(v24 - 8);
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v14, v16, v24);
      uint64_t v26 = type metadata accessor for AES.GCM.Nonce();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v23, v22, v26);
      if (v17)
      {
        if (v17 == 1)
        {
          if (__OFSUB__(HIDWORD(a1), a1))
          {
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
          uint64_t v27 = HIDWORD(a1) - (int)a1;
        }
        else
        {
          uint64_t v29 = *(void *)(a1 + 16);
          uint64_t v28 = *(void *)(a1 + 24);
          uint64_t v27 = v28 - v29;
          if (__OFSUB__(v28, v29))
          {
LABEL_23:
            __break(1u);
LABEL_24:
            __break(1u);
            JUMPOUT(0x21647E710);
          }
        }
        outlined copy of Data._Representation(a1, a2);
      }
      else
      {
        uint64_t v27 = BYTE6(a2);
      }
      if (__OFSUB__(v27, 16))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      specialized Collection.prefix(_:)(v27 - 16, a1, a2, (uint64_t *)&v40);
      v39[1] = v40;
      outlined copy of Data._Representation(a1, a2);
      specialized BidirectionalCollection.suffix(_:)(16, a1, a2, (uint64_t *)v39);
      long long v38 = v39[0];
      lazy protocol witness table accessor for type Data and conformance Data();
      uint64_t v30 = v41;
      uint64_t v31 = v37;
      AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
      if (v31)
      {
        outlined destroy of TetraSessionStates?((uint64_t)v16, &demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
        (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v24);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v24);
        long long v40 = v36;
        uint64_t v24 = static AES.GCM.open<A>(_:using:authenticating:)();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v35);
        outlined destroy of TetraSessionStates?((uint64_t)v16, &demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
      }
      return v24;
    case 2uLL:
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v19 = *(void *)(a1 + 24);
      BOOL v21 = __OFSUB__(v19, v20);
      uint64_t v18 = v19 - v20;
      if (!v21) {
        goto LABEL_6;
      }
      goto LABEL_21;
    case 3uLL:
      goto LABEL_24;
    default:
      uint64_t v18 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t one-time initialization function for paddyKDFStringPrefix()
{
  uint64_t result = specialized Data.init<A>(_:)(0xD00000000000001ALL, 0x800000021649CC90);
  paddyKDFStringPrefix = result;
  *(void *)algn_267980338 = v1;
  return result;
}

uint64_t one-time initialization function for paddySymmetricAESKeyDST(uint64_t a1)
{
  return one-time initialization function for paddySymmetricAESKeyDST(a1, 0xEB0000000079654BLL, (uint64_t *)&paddySymmetricAESKeyDST, (unint64_t *)&paddySymmetricAESKeyDST + 1);
}

uint64_t one-time initialization function for paddySymmetricAESNonceDST(uint64_t a1)
{
  return one-time initialization function for paddySymmetricAESKeyDST(a1, 0xED000065636E6F4ELL, (uint64_t *)&paddySymmetricAESNonceDST, (unint64_t *)&paddySymmetricAESNonceDST + 1);
}

uint64_t one-time initialization function for paddySymmetricAESKeyDST(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (one-time initialization token for paddyKDFStringPrefix != -1) {
    swift_once();
  }
  uint64_t v7 = paddyKDFStringPrefix;
  unint64_t v8 = *(void *)algn_267980338;
  outlined copy of Data._Representation(paddyKDFStringPrefix, *(unint64_t *)algn_267980338);
  uint64_t v9 = specialized Data.init<A>(_:)(0x2D4D43472D534541uLL, a2);
  unint64_t v11 = v10;
  *a3 = v7;
  *a4 = v8;
  outlined copy of Data._Representation(v7, v8);
  outlined copy of Data._Representation(v9, v11);
  specialized Data.append<A>(contentsOf:)(v9, v11);
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(v9, v11);
  return outlined consume of Data._Representation(v7, v8);
}

uint64_t static PaddySymmetricLayer.deriveSymmetricKeyingFromMessageKey(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v18 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v18 - v14, a3, v6);
  uint64_t v16 = SymmetricKey.bitCount.getter();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v15, v6);
  if (v16 == 256)
  {
    uint64_t v18 = a2;
    uint64_t v19 = a1;
    if (one-time initialization token for paddySymmetricAESKeyDST == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  long long v21 = paddySymmetricAESKeyDST;
  type metadata accessor for SHA256();
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_3(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
  _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
  lazy protocol witness table accessor for type Data and conformance Data();
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  if (one-time initialization token for paddySymmetricAESNonceDST != -1) {
    swift_once();
  }
  long long v21 = paddySymmetricAESNonceDST;
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  type metadata accessor for AES.GCM.Nonce();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v20(v10, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v19, v13, v6);
}

uint64_t closure #1 in static PaddySymmetricLayer.deriveSymmetricKeyingFromMessageKey(_:)()
{
  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  uint64_t result = AES.GCM.Nonce.init<A>(data:)();
  if (v0)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t _s9CryptoKit6SHA256VAcA12HashFunctionAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

void I2OSP(value:outputByteCount:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0 || (uint64_t v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a1 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = a1;
  }
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    goto LABEL_27;
  }
  double v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14[0] = specialized Data.init(count:)(a2);
  v14[1] = v9;
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v14, 0);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a2 - v8 < a2)
  {
    uint64_t v10 = -v8;
    while (1)
    {
      uint64_t v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10)) {
        break;
      }
      if ((unint64_t)(v3 - (a2 + v10) - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_25;
      }
      BOOL v13 = __CFADD__(v10++, 1);
      Data._Representation.subscript.setter();
      if (v13) {
        return;
      }
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

id TetraMessageSignerFormatter.init(message:)(unsigned int *a1)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v111 - v7;
  unsigned int __src = a1[6];
  uint64_t v9 = v1;
  uint64_t v10 = specialized Data.InlineData.init(_:)(&__src, &v122);
  uint64_t v12 = v11;
  uint64_t v118 = (int *)type metadata accessor for TetraRatchetOuterMessage();
  BOOL v13 = (uint64_t *)((char *)a1 + v118[12]);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  uint64_t v16 = 0;
  switch(v15 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v14), v14))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
      }
      uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_6:
      uint64_t v112 = v12;
      I2OSP(value:outputByteCount:)(v16, 4);
      uint64_t v119 = a1;
      uint64_t v20 = v19;
      unint64_t v22 = v21;
      *(void *)&long long v123 = v19;
      *((void *)&v123 + 1) = v21;
      outlined copy of Data._Representation(v14, v15);
      outlined copy of Data._Representation(v20, v22);
      specialized Data.append<A>(contentsOf:)(v14, v15);
      outlined consume of Data._Representation(v14, v15);
      outlined consume of Data._Representation(v20, v22);
      unint64_t v23 = *((void *)&v123 + 1);
      uint64_t v114 = v9;
      uint64_t v115 = v123;
      uint64_t v24 = (uint64_t *)((char *)v119 + v118[10]);
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      uint64_t v113 = v10;
      if (v26 >> 60 == 15)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unint64_t v29 = 0xC000000000000000;
      }
      else
      {
        switch(v26 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v25), v25)) {
              goto LABEL_53;
            }
            uint64_t v28 = HIDWORD(v25) - (int)v25;
            break;
          case 2uLL:
            uint64_t v31 = *(void *)(v25 + 16);
            uint64_t v30 = *(void *)(v25 + 24);
            uint64_t v28 = v30 - v31;
            if (!__OFSUB__(v30, v31)) {
              break;
            }
            __break(1u);
LABEL_15:
            outlined consume of Data?(v25, v26);
            uint64_t v28 = 0;
            break;
          case 3uLL:
            goto LABEL_15;
          default:
            outlined consume of Data?(v25, v26);
            uint64_t v28 = BYTE6(v26);
            break;
        }
        unint64_t v29 = v26;
        uint64_t v27 = v25;
      }
      I2OSP(value:outputByteCount:)(v28, 2);
      uint64_t v33 = v32;
      unint64_t v35 = v34;
      *(void *)&long long v123 = v32;
      *((void *)&v123 + 1) = v34;
      outlined copy of Data?(v25, v26);
      outlined copy of Data._Representation(v33, v35);
      outlined copy of Data._Representation(v27, v29);
      specialized Data.append<A>(contentsOf:)(v27, v29);
      outlined consume of Data._Representation(v27, v29);
      outlined consume of Data._Representation(v27, v29);
      outlined consume of Data._Representation(v33, v35);
      unint64_t v116 = *((void *)&v123 + 1);
      uint64_t v117 = v123;
      uint64_t v36 = (uint64_t)v119 + v118[8];
      outlined init with copy of Kyber768.PublicKey?(v36, (uint64_t)v8);
      uint64_t v37 = type metadata accessor for Kyber768.PublicKey();
      uint64_t v38 = *(void *)(v37 - 8);
      uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
      if (v39(v8, 1, v37) != 1)
      {
        uint64_t v40 = Kyber768.PublicKey.dataRepresentation.getter();
        unint64_t v42 = v41;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v37);
        switch(v42 >> 62)
        {
          case 1uLL:
            outlined consume of Data._Representation(v40, v42);
            if (__OFSUB__(HIDWORD(v40), v40)) {
              goto LABEL_54;
            }
            uint64_t v43 = HIDWORD(v40) - (int)v40;
            goto LABEL_28;
          case 2uLL:
            uint64_t v44 = *(void *)(v40 + 16);
            uint64_t v111 = *(void *)(v40 + 24);
            outlined consume of Data._Representation(v40, v42);
            uint64_t v43 = v111 - v44;
            if (!__OFSUB__(v111, v44)) {
              goto LABEL_28;
            }
            __break(1u);
LABEL_26:
            outlined consume of Data._Representation(v40, v42);
            goto LABEL_27;
          case 3uLL:
            goto LABEL_26;
          default:
            outlined consume of Data._Representation(v40, v42);
            uint64_t v43 = BYTE6(v42);
            goto LABEL_28;
        }
      }
      outlined destroy of Kyber768.PublicKey?((uint64_t)v8);
LABEL_27:
      uint64_t v43 = 0;
LABEL_28:
      I2OSP(value:outputByteCount:)(v43, 4);
      uint64_t v46 = v45;
      unint64_t v48 = v47;
      outlined init with copy of Kyber768.PublicKey?(v36, (uint64_t)v6);
      if (v39(v6, 1, v37) == 1)
      {
        outlined destroy of Kyber768.PublicKey?((uint64_t)v6);
        uint64_t v49 = 0;
        unint64_t v50 = 0xC000000000000000;
      }
      else
      {
        uint64_t v49 = Kyber768.PublicKey.dataRepresentation.getter();
        unint64_t v50 = v51;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v37);
      }
      *(void *)&long long v122 = v46;
      *((void *)&v122 + 1) = v48;
      outlined copy of Data._Representation(v46, v48);
      outlined copy of Data._Representation(v49, v50);
      specialized Data.append<A>(contentsOf:)(v49, v50);
      outlined consume of Data._Representation(v49, v50);
      outlined consume of Data._Representation(v49, v50);
      outlined consume of Data._Representation(v46, v48);
      long long v52 = v122;
      size_t v53 = (uint64_t *)((char *)v119 + v118[9]);
      uint64_t v55 = *v53;
      unint64_t v54 = v53[1];
      if (v54 >> 60 == 15)
      {
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        unint64_t v58 = 0xC000000000000000;
      }
      else
      {
        switch(v54 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v55), v55)) {
              goto LABEL_55;
            }
            uint64_t v57 = HIDWORD(v55) - (int)v55;
            break;
          case 2uLL:
            uint64_t v60 = *(void *)(v55 + 16);
            uint64_t v59 = *(void *)(v55 + 24);
            uint64_t v57 = v59 - v60;
            if (!__OFSUB__(v59, v60)) {
              break;
            }
            __break(1u);
LABEL_40:
            outlined consume of Data?(v55, v54);
            uint64_t v57 = 0;
            break;
          case 3uLL:
            goto LABEL_40;
          default:
            outlined consume of Data?(v55, v54);
            uint64_t v57 = BYTE6(v54);
            break;
        }
        unint64_t v58 = v54;
        uint64_t v56 = v55;
      }
      I2OSP(value:outputByteCount:)(v57, 4);
      uint64_t v62 = v61;
      unint64_t v64 = v63;
      long long v123 = v52;
      outlined copy of Data._Representation(v52, *((unint64_t *)&v52 + 1));
      specialized Data.append<A>(contentsOf:)(v62, v64);
      outlined consume of Data._Representation(v62, v64);
      outlined consume of Data._Representation(v52, *((unint64_t *)&v52 + 1));
      unint64_t v66 = *((void *)&v123 + 1);
      uint64_t v65 = v123;
      long long v122 = v123;
      outlined copy of Data._Representation(v123, *((unint64_t *)&v123 + 1));
      outlined copy of Data._Representation(v56, v58);
      outlined copy of Data?(v55, v54);
      specialized Data.append<A>(contentsOf:)(v56, v58);
      outlined consume of Data._Representation(v56, v58);
      outlined consume of Data._Representation(v56, v58);
      outlined consume of Data._Representation(v65, v66);
      long long v67 = v122;
      long long v123 = v122;
      outlined copy of Data._Representation(v122, *((unint64_t *)&v122 + 1));
      unint64_t v69 = v116;
      uint64_t v68 = v117;
      outlined copy of Data._Representation(v117, v116);
      specialized Data.append<A>(contentsOf:)(v68, v69);
      outlined consume of Data._Representation(v68, v69);
      outlined consume of Data._Representation(v67, *((unint64_t *)&v67 + 1));
      long long v70 = v123;
      uint64_t v71 = specialized Data.init<A>(_:)(0xD000000000000020, 0x800000021649CD30);
      unint64_t v73 = v72;
      uint64_t v74 = v119;
      I2OSP(value:outputByteCount:)(*v119, 4);
      uint64_t v76 = v75;
      unint64_t v78 = v77;
      *(void *)&long long v122 = v71;
      *((void *)&v122 + 1) = v73;
      outlined copy of Data._Representation(v71, v73);
      specialized Data.append<A>(contentsOf:)(v76, v78);
      outlined consume of Data._Representation(v76, v78);
      outlined consume of Data._Representation(v71, v73);
      long long v79 = v122;
      uint64_t v80 = *((void *)v74 + 1);
      unint64_t v81 = *((void *)v74 + 2);
      uint64_t v82 = 0;
      switch(v81 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v80), v80)) {
            goto LABEL_51;
          }
          uint64_t v82 = HIDWORD(v80) - (int)v80;
LABEL_47:
          uint64_t v111 = v70;
          I2OSP(value:outputByteCount:)(v82, 4);
          uint64_t v86 = v85;
          unint64_t v88 = v87;
          long long v123 = v79;
          outlined copy of Data._Representation(v79, *((unint64_t *)&v79 + 1));
          specialized Data.append<A>(contentsOf:)(v86, v88);
          outlined consume of Data._Representation(v86, v88);
          outlined consume of Data._Representation(v79, *((unint64_t *)&v79 + 1));
          long long v89 = v123;
          long long v122 = v123;
          outlined copy of Data._Representation(v80, v81);
          outlined copy of Data._Representation(v89, *((unint64_t *)&v89 + 1));
          specialized Data.append<A>(contentsOf:)(v80, v81);
          outlined consume of Data._Representation(v80, v81);
          outlined consume of Data._Representation(v89, *((unint64_t *)&v89 + 1));
          long long v90 = v122;
          long long v123 = v122;
          outlined copy of Data._Representation(v122, *((unint64_t *)&v122 + 1));
          uint64_t v91 = v115;
          outlined copy of Data._Representation(v115, v23);
          specialized Data.append<A>(contentsOf:)(v91, v23);
          outlined consume of Data._Representation(v91, v23);
          outlined consume of Data._Representation(v90, *((unint64_t *)&v90 + 1));
          long long v92 = v123;
          uint64_t v93 = (uint64_t)v119;
          uint64_t v94 = (uint64_t *)((char *)v119 + v118[11]);
          uint64_t v95 = *v94;
          unint64_t v96 = v94[1];
          long long v122 = v123;
          outlined copy of Data._Representation(v95, v96);
          outlined copy of Data._Representation(v92, *((unint64_t *)&v92 + 1));
          specialized Data.append<A>(contentsOf:)(v95, v96);
          outlined consume of Data._Representation(v95, v96);
          outlined consume of Data._Representation(v92, *((unint64_t *)&v92 + 1));
          long long v97 = v122;
          uint64_t v98 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
          if (v99 >> 60 == 15) {
            goto LABEL_56;
          }
          uint64_t v100 = v98;
          unint64_t v101 = v99;
          unint64_t v102 = v112 & 0xFFFFFFFFFFFFFFLL;
          long long v123 = v97;
          outlined copy of Data._Representation(v97, *((unint64_t *)&v97 + 1));
          specialized Data.append<A>(contentsOf:)(v100, v101);
          outlined consume of Data?(v100, v101);
          outlined consume of Data._Representation(v97, *((unint64_t *)&v97 + 1));
          long long v103 = v123;
          long long v122 = v123;
          outlined copy of Data._Representation(v123, *((unint64_t *)&v123 + 1));
          uint64_t v104 = v113;
          outlined copy of Data._Representation(v113, v102);
          specialized Data.append<A>(contentsOf:)(v104, v102);
          outlined consume of Data._Representation(v104, v102);
          outlined consume of Data._Representation(v103, *((unint64_t *)&v103 + 1));
          long long v105 = v122;
          long long v123 = v122;
          outlined copy of Data._Representation(v122, *((unint64_t *)&v122 + 1));
          uint64_t v106 = v111;
          outlined copy of Data._Representation(v111, *((unint64_t *)&v70 + 1));
          specialized Data.append<A>(contentsOf:)(v106, *((unint64_t *)&v70 + 1));
          outlined consume of Data._Representation(v106, *((unint64_t *)&v70 + 1));
          outlined consume of Data._Representation(v117, v116);
          outlined consume of Data._Representation(v70, v23);
          outlined consume of Data._Representation(v104, v102);
          outlined consume of Data._Representation(v105, *((unint64_t *)&v105 + 1));
          outlined consume of Data._Representation(v106, *((unint64_t *)&v70 + 1));
          uint64_t v107 = v114;
          *(_OWORD *)&v114[OBJC_IVAR____TtC17MessageProtection27TetraMessageSignerFormatter__signedData] = v123;

          uint64_t v108 = (objc_class *)type metadata accessor for TetraMessageSignerFormatter();
          v120.receiver = v107;
          v120.super_class = v108;
          id v109 = objc_msgSendSuper2(&v120, sel_init);
          outlined destroy of TetraRatchetOuterMessage(v93);
          return v109;
        case 2uLL:
          uint64_t v84 = *(void *)(v80 + 16);
          uint64_t v83 = *(void *)(v80 + 24);
          uint64_t v82 = v83 - v84;
          if (!__OFSUB__(v83, v84)) {
            goto LABEL_47;
          }
          goto LABEL_52;
        case 3uLL:
          goto LABEL_47;
        default:
          uint64_t v82 = BYTE6(v81);
          goto LABEL_47;
      }
    case 2uLL:
      uint64_t v18 = *(void *)(v14 + 16);
      uint64_t v17 = *(void *)(v14 + 24);
      uint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_6;
      }
      goto LABEL_50;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v16 = BYTE6(v15);
      goto LABEL_6;
  }
}

uint64_t TetraMessageSignerFormatter.signedData()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17MessageProtection27TetraMessageSignerFormatter__signedData);
  outlined copy of Data._Representation(v1, *(void *)(v0 + OBJC_IVAR____TtC17MessageProtection27TetraMessageSignerFormatter__signedData + 8));
  return v1;
}

id TetraMessageSignerFormatter.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void TetraMessageSignerFormatter.init()()
{
}

id TetraMessageSignerFormatter.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraMessageSignerFormatter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TetraMessageSignerFormatter()
{
  return self;
}

uint64_t outlined destroy of TetraRatchetOuterMessage(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TetraRatchetOuterMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraKEM768Key(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = (char *)a1 + v11;
    BOOL v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v12, v13, v17);
      uint64_t v18 = *(int *)(v14 + 20);
      uint64_t v19 = (uint64_t *)&v12[v18];
      uint64_t v20 = (uint64_t *)&v13[v18];
      uint64_t v21 = *v20;
      unint64_t v22 = v20[1];
      outlined copy of Data._Representation(*v20, v22);
      *uint64_t v19 = v21;
      v19[1] = v22;
      uint64_t v23 = *(int *)(v14 + 24);
      uint64_t v24 = *(void **)&v13[v23];
      *(void *)&v12[v23] = v24;
      uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
      id v26 = v24;
      v25(v12, 0, 1, v14);
    }
  }
  return a1;
}

void destroy for TetraKEM768Key(uint64_t a1, uint64_t a2)
{
}

char *initializeWithCopy for TetraKEM768Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v10, v11, v15);
    uint64_t v16 = *(int *)(v12 + 20);
    uint64_t v17 = (uint64_t *)&v10[v16];
    uint64_t v18 = (uint64_t *)&v11[v16];
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    outlined copy of Data._Representation(*v18, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
    uint64_t v21 = *(int *)(v12 + 24);
    unint64_t v22 = *(void **)&v11[v21];
    *(void *)&v10[v21] = v22;
    uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
    id v24 = v22;
    v23(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for TetraKEM768Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v32 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 24))(v13, v14, v32);
      uint64_t v33 = *(int *)(v15 + 20);
      unint64_t v34 = (uint64_t *)&v13[v33];
      unint64_t v35 = (uint64_t *)&v14[v33];
      uint64_t v36 = *v35;
      unint64_t v37 = v35[1];
      outlined copy of Data._Representation(*v35, v37);
      uint64_t v38 = *v34;
      unint64_t v39 = v34[1];
      *unint64_t v34 = v36;
      v34[1] = v37;
      outlined consume of Data._Representation(v38, v39);
      uint64_t v40 = *(int *)(v15 + 24);
      unint64_t v41 = *(void **)&v14[v40];
      unint64_t v42 = *(void **)&v13[v40];
      *(void *)&v13[v40] = v41;
      id v43 = v41;

      return a1;
    }
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1((uint64_t)v13, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v13, v14, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  uint64_t v20 = type metadata accessor for Kyber768.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v13, v14, v20);
  uint64_t v21 = *(int *)(v15 + 20);
  unint64_t v22 = (uint64_t *)&v13[v21];
  uint64_t v23 = (uint64_t *)&v14[v21];
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  outlined copy of Data._Representation(*v23, v25);
  *unint64_t v22 = v24;
  v22[1] = v25;
  uint64_t v26 = *(int *)(v15 + 24);
  uint64_t v27 = *(void **)&v14[v26];
  *(void *)&v13[v26] = v27;
  uint64_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
  id v29 = v27;
  v28(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for TetraKEM768Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v10, v11, v15);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(void *)&v10[*(int *)(v12 + 24)] = *(void *)&v11[*(int *)(v12 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for TetraKEM768Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v23 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40))(v13, v14, v23);
      uint64_t v24 = *(int *)(v15 + 20);
      uint64_t v25 = *(void *)&v13[v24];
      unint64_t v26 = *(void *)&v13[v24 + 8];
      *(_OWORD *)&v13[v24] = *(_OWORD *)&v14[v24];
      outlined consume of Data._Representation(v25, v26);
      uint64_t v27 = *(int *)(v15 + 24);
      uint64_t v28 = *(void **)&v13[v27];
      *(void *)&v13[v27] = *(void *)&v14[v27];

      return a1;
    }
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1((uint64_t)v13, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  uint64_t v20 = type metadata accessor for Kyber768.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  *(void *)&v13[*(int *)(v15 + 24)] = *(void *)&v14[*(int *)(v15 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216480940);
}

uint64_t sub_216480940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, &demangling cache variable for type metadata for Kyber768.PrivateKey?, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
}

uint64_t storeEnumTagSinglePayload for TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_216480968);
}

uint64_t sub_216480968(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, &demangling cache variable for type metadata for Kyber768.PrivateKey?, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
}

uint64_t type metadata accessor for TetraKEM768Key(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraKEM768Key);
}

void type metadata completion function for TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraKEM1024Key(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v12, v13, v17);
      uint64_t v18 = *(int *)(v14 + 20);
      int v19 = (uint64_t *)&v12[v18];
      uint64_t v20 = (uint64_t *)&v13[v18];
      uint64_t v21 = *v20;
      unint64_t v22 = v20[1];
      outlined copy of Data._Representation(*v20, v22);
      *int v19 = v21;
      v19[1] = v22;
      uint64_t v23 = *(int *)(v14 + 24);
      uint64_t v24 = *(void **)&v13[v23];
      *(void *)&v12[v23] = v24;
      uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
      id v26 = v24;
      v25(v12, 0, 1, v14);
    }
  }
  return a1;
}

void destroy for TetraKEM1024Key(uint64_t a1, uint64_t a2)
{
}

void destroy for TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a3(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  }
  uint64_t v11 = a1 + *(int *)(a2 + 20);
  uint64_t v12 = a4(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = a5(0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);
    outlined consume of Data._Representation(*(void *)(v11 + *(int *)(v12 + 20)), *(void *)(v11 + *(int *)(v12 + 20) + 8));
    uint64_t v14 = *(void **)(v11 + *(int *)(v12 + 24));
  }
}

char *initializeWithCopy for TetraKEM1024Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v10, v11, v15);
    uint64_t v16 = *(int *)(v12 + 20);
    uint64_t v17 = (uint64_t *)&v10[v16];
    uint64_t v18 = (uint64_t *)&v11[v16];
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    outlined copy of Data._Representation(*v18, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
    uint64_t v21 = *(int *)(v12 + 24);
    unint64_t v22 = *(void **)&v11[v21];
    *(void *)&v10[v21] = v22;
    uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
    id v24 = v22;
    v23(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for TetraKEM1024Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v32 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 24))(v13, v14, v32);
      uint64_t v33 = *(int *)(v15 + 20);
      unint64_t v34 = (uint64_t *)&v13[v33];
      unint64_t v35 = (uint64_t *)&v14[v33];
      uint64_t v36 = *v35;
      unint64_t v37 = v35[1];
      outlined copy of Data._Representation(*v35, v37);
      uint64_t v38 = *v34;
      unint64_t v39 = v34[1];
      *unint64_t v34 = v36;
      v34[1] = v37;
      outlined consume of Data._Representation(v38, v39);
      uint64_t v40 = *(int *)(v15 + 24);
      unint64_t v41 = *(void **)&v14[v40];
      unint64_t v42 = *(void **)&v13[v40];
      *(void *)&v13[v40] = v41;
      id v43 = v41;

      return a1;
    }
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1((uint64_t)v13, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v13, v14, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  uint64_t v20 = type metadata accessor for Kyber1024.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v13, v14, v20);
  uint64_t v21 = *(int *)(v15 + 20);
  unint64_t v22 = (uint64_t *)&v13[v21];
  uint64_t v23 = (uint64_t *)&v14[v21];
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  outlined copy of Data._Representation(*v23, v25);
  *unint64_t v22 = v24;
  v22[1] = v25;
  uint64_t v26 = *(int *)(v15 + 24);
  uint64_t v27 = *(void **)&v14[v26];
  *(void *)&v13[v26] = v27;
  uint64_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
  id v29 = v27;
  v28(v13, 0, 1, v15);
  return a1;
}

uint64_t _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for TetraKEM1024Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v10, v11, v15);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(void *)&v10[*(int *)(v12 + 24)] = *(void *)&v11[*(int *)(v12 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for TetraKEM1024Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v23 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40))(v13, v14, v23);
      uint64_t v24 = *(int *)(v15 + 20);
      uint64_t v25 = *(void *)&v13[v24];
      unint64_t v26 = *(void *)&v13[v24 + 8];
      *(_OWORD *)&v13[v24] = *(_OWORD *)&v14[v24];
      outlined consume of Data._Representation(v25, v26);
      uint64_t v27 = *(int *)(v15 + 24);
      uint64_t v28 = *(void **)&v13[v27];
      *(void *)&v13[v27] = *(void *)&v14[v27];

      return a1;
    }
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1((uint64_t)v13, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  uint64_t v20 = type metadata accessor for Kyber1024.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  *(void *)&v13[*(int *)(v15 + 24)] = *(void *)&v14[*(int *)(v15 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraKEM1024Key(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216481A24);
}

uint64_t sub_216481A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, &demangling cache variable for type metadata for Kyber1024.PrivateKey?, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
}

uint64_t storeEnumTagSinglePayload for TetraKEM1024Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_216481A4C);
}

uint64_t sub_216481A4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, &demangling cache variable for type metadata for Kyber1024.PrivateKey?, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
}

uint64_t type metadata accessor for TetraKEM1024Key(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraKEM1024Key);
}

void type metadata completion function for TetraKEM1024Key(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t), unint64_t *a6, void (*a7)(uint64_t))
{
  type metadata accessor for Kyber768.PrivateKey?(319, a4, a5);
  if (v9 <= 0x3F)
  {
    type metadata accessor for Kyber768.PrivateKey?(319, a6, a7);
    if (v10 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Kyber768.PrivateKey?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t TetraKEM1024Key.publicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TetraKEM1024Key(0);
  outlined init with copy of TetraSessionStates?(v1 + *(int *)(v13 + 20), (uint64_t)v8, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    outlined init with copy of TetraSessionStates?(v1, (uint64_t)v5, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    uint64_t v14 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v5, 1, v14);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      Kyber1024.PrivateKey.publicKey.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v5, v14);
    }
  }
  else
  {
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE9Kyber1024O10PrivateKeyVWObTm_0((uint64_t)v8, (uint64_t)v12, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    uint64_t v17 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, v12, v17);
    return _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1((uint64_t)v12, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  }
  return result;
}

uint64_t TetraKEM1024Key.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (one-time initialization token for SEPisAvailable != -1) {
    swift_once();
  }
  if (static MPStaticProperties.SEPisAvailable == 1
    && (uint64_t v17 = &type metadata for MessageProtectionFeatureFlags,
        unint64_t v18 = lazy protocol witness table accessor for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags(),
        v16[0] = 1,
        char v9 = isFeatureEnabled(_:)(),
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16),
        (v9 & 1) != 0))
  {
    uint64_t result = SecureEnclave.Kyber1024.PrivateKey.init()((uint64_t)v8);
    if (v1) {
      return result;
    }
    uint64_t v11 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
    uint64_t v12 = type metadata accessor for TetraKEM1024Key(0);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v8, a1 + *(int *)(v12 + 20), &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    uint64_t v13 = type metadata accessor for Kyber1024.PrivateKey();
  }
  else
  {
    uint64_t result = static Kyber1024.PrivateKey.generate()();
    if (v1) {
      return result;
    }
    uint64_t v14 = type metadata accessor for Kyber1024.PrivateKey();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v5, 0, 1, v14);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v5, a1, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    a1 += *(int *)(type metadata accessor for TetraKEM1024Key(0) + 20);
    uint64_t v13 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
}

uint64_t TetraKEM1024Key.decapsulate(_:)@<X0>(uint64_t a1@<X8>)
{
  v19[1] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TetraKEM1024Key(0);
  outlined init with copy of TetraSessionStates?(v1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v7, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    outlined init with copy of TetraSessionStates?(v1, (uint64_t)v4, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    uint64_t v13 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      Kyber1024.PrivateKey.decapsulate(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v4, v13);
    }
  }
  else
  {
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE9Kyber1024O10PrivateKeyVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    uint64_t v16 = v19[5];
    uint64_t v17 = closure #1 in SecureEnclave.Kyber768.PrivateKey.decapsulate(_:)(*(void **)&v11[*(int *)(v8 + 24)]);
    if (!v16)
    {
      v19[2] = v17;
      v19[3] = v18;
      SymmetricKey.init<A>(data:)();
    }
    return _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1((uint64_t)v11, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  }
  return result;
}

uint64_t TetraKEM768Key.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (one-time initialization token for SEPisAvailable != -1) {
    swift_once();
  }
  if (static MPStaticProperties.SEPisAvailable == 1
    && (uint64_t v17 = &type metadata for MessageProtectionFeatureFlags,
        unint64_t v18 = lazy protocol witness table accessor for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags(),
        v16[0] = 2,
        char v9 = isFeatureEnabled(_:)(),
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16),
        (v9 & 1) != 0))
  {
    uint64_t result = SecureEnclave.Kyber768.PrivateKey.init()((uint64_t)v8);
    if (v1) {
      return result;
    }
    uint64_t v11 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
    uint64_t v12 = type metadata accessor for TetraKEM768Key(0);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v8, a1 + *(int *)(v12 + 20), &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    uint64_t v13 = type metadata accessor for Kyber768.PrivateKey();
  }
  else
  {
    uint64_t result = static Kyber768.PrivateKey.generate()();
    if (v1) {
      return result;
    }
    uint64_t v14 = type metadata accessor for Kyber768.PrivateKey();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v5, 0, 1, v14);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v5, a1, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    a1 += *(int *)(type metadata accessor for TetraKEM768Key(0) + 20);
    uint64_t v13 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
}

uint64_t TetraKEM768Key.decapsulate(_:)@<X0>(uint64_t a1@<X8>)
{
  v19[1] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TetraKEM768Key(0);
  outlined init with copy of TetraSessionStates?(v1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v7, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    outlined init with copy of TetraSessionStates?(v1, (uint64_t)v4, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    uint64_t v13 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      Kyber768.PrivateKey.decapsulate(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v4, v13);
    }
  }
  else
  {
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE9Kyber1024O10PrivateKeyVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    uint64_t v16 = v19[5];
    uint64_t v17 = closure #1 in SecureEnclave.Kyber768.PrivateKey.decapsulate(_:)(*(void **)&v11[*(int *)(v8 + 24)]);
    if (!v16)
    {
      v19[2] = v17;
      v19[3] = v18;
      SymmetricKey.init<A>(data:)();
    }
    return _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1((uint64_t)v11, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
  }
  return result;
}

uint64_t TetraKEM768Key.publicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TetraKEM768Key(0);
  outlined init with copy of TetraSessionStates?(v1 + *(int *)(v13 + 20), (uint64_t)v8, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    outlined init with copy of TetraSessionStates?(v1, (uint64_t)v5, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    uint64_t v14 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v5, 1, v14);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      Kyber768.PrivateKey.publicKey.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v5, v14);
    }
  }
  else
  {
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE9Kyber1024O10PrivateKeyVWObTm_0((uint64_t)v8, (uint64_t)v12, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    uint64_t v17 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, v12, v17);
    return _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1((uint64_t)v12, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
  }
  return result;
}

uint64_t TetraKEM768Key.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraKEM768Key.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Kyber768.PrivateKey();
  lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(&lazy protocol witness table cache variable for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey, MEMORY[0x263F04880]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for TetraKEM768Key(0);
    v8[14] = 1;
    type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey and conformance SecureEnclave.Kyber768.PrivateKey, (void (*)(uint64_t))type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TetraKEM768Key.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v23 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraKEM768Key.CodingKeys>);
  uint64_t v22 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TetraKEM768Key(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v20 = v11;
  uint64_t v14 = v22;
  uint64_t v15 = (uint64_t)v13;
  type metadata accessor for Kyber768.PrivateKey();
  char v26 = 0;
  lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(&lazy protocol witness table cache variable for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey, MEMORY[0x263F04880]);
  uint64_t v16 = (uint64_t)v23;
  uint64_t v17 = v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  outlined init with take of KEM.EncapsulationResult?(v16, v15, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
  type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  char v25 = 1;
  lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey and conformance SecureEnclave.Kyber768.PrivateKey, (void (*)(uint64_t))type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v17);
  outlined init with take of KEM.EncapsulationResult?((uint64_t)v6, v15 + *(int *)(v20 + 20), &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  outlined init with copy of TetraKEM768Key(v15, v21, type metadata accessor for TetraKEM768Key);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1(v15, type metadata accessor for TetraKEM768Key);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraKEM768Key.CodingKeys()
{
  if (*v0) {
    return 0x79654B706573;
  }
  else {
    return 0x79654B7061;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraKEM768Key.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TetraKEM768Key.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraKEM768Key.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraKEM768Key.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraKEM768Key@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraKEM768Key.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraKEM768Key(void *a1)
{
  return TetraKEM768Key.encode(to:)(a1);
}

uint64_t TetraKEM1024Key.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraKEM1024Key.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Kyber1024.PrivateKey();
  lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(&lazy protocol witness table cache variable for type Kyber1024.PrivateKey and conformance Kyber1024.PrivateKey, MEMORY[0x263F048A8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for TetraKEM1024Key(0);
    v8[14] = 1;
    type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey and conformance SecureEnclave.Kyber1024.PrivateKey, (void (*)(uint64_t))type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TetraKEM1024Key.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v23 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraKEM1024Key.CodingKeys>);
  uint64_t v22 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TetraKEM1024Key(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v20 = v11;
  uint64_t v14 = v22;
  uint64_t v15 = (uint64_t)v13;
  type metadata accessor for Kyber1024.PrivateKey();
  char v26 = 0;
  lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(&lazy protocol witness table cache variable for type Kyber1024.PrivateKey and conformance Kyber1024.PrivateKey, MEMORY[0x263F048A8]);
  uint64_t v16 = (uint64_t)v23;
  uint64_t v17 = v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  outlined init with take of KEM.EncapsulationResult?(v16, v15, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  char v25 = 1;
  lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey and conformance SecureEnclave.Kyber1024.PrivateKey, (void (*)(uint64_t))type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v17);
  outlined init with take of KEM.EncapsulationResult?((uint64_t)v6, v15 + *(int *)(v20 + 20), &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  outlined init with copy of TetraKEM768Key(v15, v21, type metadata accessor for TetraKEM1024Key);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_1(v15, type metadata accessor for TetraKEM1024Key);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraKEM1024Key.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraKEM1024Key.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraKEM1024Key@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraKEM1024Key.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraKEM1024Key(void *a1)
{
  return TetraKEM1024Key.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s9CryptoKit13SecureEnclaveO17MessageProtectionE9Kyber1024O10PrivateKeyVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *type metadata accessor for TetraKEM1024Key.CodingKeys()
{
  return &unk_26C702F48;
}

unsigned char *storeEnumTagSinglePayload for TetraKEM1024Key.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x216483C28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TetraKEM768Key.CodingKeys()
{
  return &unk_26C702D68;
}

uint64_t specialized TetraKEM768Key.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79654B7061 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79654B706573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

char *TetraRegistration.init(tetraRegistrationData:ecdhPublicKey:version:timestamp:signedBy:isEncrypting:)(void *a1, void *a2, int a3, void *a4, int a5, double a6)
{
  id v64 = a2;
  int v60 = a5;
  int v61 = a3;
  id v63 = a4;
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v62 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v13 = type metadata accessor for TetraPB_TetraPublicPrekey(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v6;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
  id v17 = v65;
  Message.init(serializedData:extensions:partial:options:)();
  if (v17)
  {

LABEL_19:
    type metadata accessor for TetraRegistration();
    swift_deallocPartialClassInstance();
    return v16;
  }
  uint64_t v58 = v9;
  uint64_t v59 = v11;
  id v18 = v63;
  id v65 = a1;
  *(double *)&v16[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_timestamp] = a6;
  uint64_t v19 = (uint64_t *)&v15[*(int *)(v13 + 20)];
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *v19;
  }
  if (v20 >> 60 == 15) {
    unint64_t v22 = 0xC000000000000000;
  }
  else {
    unint64_t v22 = v19[1];
  }
  outlined copy of Data?(*v19, v20);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v21, v22);
  id v24 = objc_allocWithZone((Class)type metadata accessor for Kyber1024ObjCPublicKey(0));
  id v25 = Kyber1024ObjCPublicKey.init(publicKeyBytes:)(isa);
  uint64_t v57 = OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey;
  *(void *)&v16[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey] = v25;
  char v26 = (uint64_t *)&v15[*(int *)(v13 + 24)];
  uint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  if (v28 >> 60 == 15) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = *v26;
  }
  if (v28 >> 60 == 15) {
    unint64_t v30 = 0xC000000000000000;
  }
  else {
    unint64_t v30 = v28;
  }
  uint64_t v31 = &v16[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature];
  *(void *)uint64_t v31 = v29;
  *((void *)v31 + 1) = v30;
  outlined copy of Data?(v27, v28);
  id v32 = v64;
  uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  *(void *)&long long v67 = v33;
  *((void *)&v67 + 1) = v35;
  uint64_t v36 = v59;
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)();
  v56[1] = 0;
  id v64 = v15;
  unint64_t v37 = &v16[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_ecdhPublicKey];
  uint64_t v38 = v62;
  unint64_t v39 = v36;
  uint64_t v40 = v58;
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(&v16[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_ecdhPublicKey], v39, v58);
  if ((v61 - 13) > 0x12)
  {

    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    swift_allocError();
    unsigned char *v47 = 1;
    swift_willThrow();

    outlined destroy of TetraPB_TetraPublicPrekey((uint64_t)v64);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v40);

    outlined consume of Data._Representation(*(void *)v31, *((void *)v31 + 1));
    goto LABEL_19;
  }
  *(_DWORD *)&v16[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion] = v61;
  *(void *)&v16[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey] = v18;
  id v41 = v18;

  unint64_t v42 = (objc_class *)type metadata accessor for TetraRegistration();
  v66.receiver = v16;
  v66.super_class = v42;
  id v43 = (char *)objc_msgSendSuper2(&v66, sel_init);
  uint64_t v44 = *(void *)&v43[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature];
  unint64_t v45 = *(void *)&v43[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature + 8];
  uint64_t v16 = v43;
  outlined copy of Data._Representation(v44, v45);
  char v46 = specialized TetraRegistration.isValidSignature(_:signedBy:isEncrypting:)(v41, v60 & 1);
  outlined consume of Data._Representation(v44, v45);
  if (v46)
  {

    outlined destroy of TetraPB_TetraPublicPrekey((uint64_t)v64);
  }
  else
  {

    uint64_t v50 = (uint64_t)v64;
    id v49 = v65;
    if (one-time initialization token for TetraLogger != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)TetraLogger);
    long long v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl(&dword_2163F2000, v52, v53, "The signature of the registration payload could not be verified.", v54, 2u);
      MEMORY[0x2166CDD30](v54, -1, -1);
    }

    lazy protocol witness table accessor for type TetraQueryLookupError and conformance TetraQueryLookupError();
    swift_allocError();
    void *v55 = 0;
    swift_willThrow();

    outlined destroy of TetraPB_TetraPublicPrekey(v50);
  }
  return v16;
}

uint64_t TetraRegistration.computeKeysHash()()
{
  uint64_t v1 = v0;
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for SHA384();
  uint64_t v39 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SHA384Digest();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v36 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  MEMORY[0x270FA5388](v35);
  uint64_t v34 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Kyber1024.PublicKey();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, *(void *)(v0 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey)+ OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey, v8);
  uint64_t v15 = Kyber1024.PublicKey.dataRepresentation.getter();
  unint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v15, v17);
  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  *(void *)&long long v40 = v12;
  *((void *)&v40 + 1) = v14;
  outlined copy of Data._Representation(v12, v14);
  outlined copy of Data._Representation(v19, v21);
  specialized Data.append<A>(contentsOf:)(v19, v21);
  outlined consume of Data._Representation(v19, v21);
  outlined consume of Data._Representation(v19, v21);
  outlined consume of Data._Representation(v12, v14);
  long long v22 = v40;
  uint64_t v23 = v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature;
  uint64_t v24 = *(void *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature);
  unint64_t v25 = *(void *)(v23 + 8);
  long long v41 = v40;
  outlined copy of Data._Representation(v24, v25);
  outlined copy of Data._Representation(v22, *((unint64_t *)&v22 + 1));
  specialized Data.append<A>(contentsOf:)(v24, v25);
  outlined consume of Data._Representation(v24, v25);
  outlined consume of Data._Representation(v22, *((unint64_t *)&v22 + 1));
  unint64_t v27 = *((void *)&v41 + 1);
  uint64_t v26 = v41;
  lazy protocol witness table accessor for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x263F04808]);
  dispatch thunk of HashFunction.init()();
  switch(v27 >> 62)
  {
    case 1uLL:
      if (v26 >> 32 < (int)v26) {
        __break(1u);
      }
      outlined copy of Data._Representation(v26, v27);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v26, v26 >> 32);
      break;
    case 2uLL:
      uint64_t v28 = *(void *)(v26 + 16);
      uint64_t v29 = *(void *)(v26 + 24);
      outlined copy of Data._Representation(v26, v27);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v28, v29);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      *(void *)((char *)&v41 + 6) = 0;
      *(void *)&long long v41 = 0;
      goto LABEL_7;
    default:
      *(void *)&long long v41 = v26;
      WORD4(v41) = v27;
      BYTE10(v41) = BYTE2(v27);
      BYTE11(v41) = BYTE3(v27);
      BYTE12(v41) = BYTE4(v27);
      BYTE13(v41) = BYTE5(v27);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(v26, v27);
  unint64_t v30 = v36;
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v2);
  uint64_t v31 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v30, v38);
  *(void *)(v31 + *(int *)(v35 + 36)) = 16;
  uint64_t v32 = specialized Data.init<A>(_:)(v31);
  outlined consume of Data._Representation(v26, v27);
  return v32;
}

uint64_t TetraRegistration.registrationData.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Kyber1024.PublicKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for TetraPB_TetraPublicPrekey(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  UnknownStorage.init()();
  uint64_t v9 = &v8[*(int *)(v6 + 20)];
  *(_OWORD *)uint64_t v9 = xmmword_216494780;
  uint64_t v10 = &v8[*(int *)(v6 + 24)];
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey);
  *(_OWORD *)uint64_t v10 = xmmword_216494780;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v11 + OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey, v2);
  uint64_t v12 = Kyber1024.PublicKey.dataRepresentation.getter();
  unint64_t v14 = v13;
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v12, v14);
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  outlined consume of Data?(*(void *)v9, *((void *)v9 + 1));
  *(void *)uint64_t v9 = v16;
  *((void *)v9 + 1) = v18;
  uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature);
  unint64_t v20 = *(void *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature + 8);
  uint64_t v21 = *(void *)v10;
  unint64_t v22 = *((void *)v10 + 1);
  outlined copy of Data._Representation(v19, v20);
  outlined consume of Data?(v21, v22);
  *(void *)uint64_t v10 = v19;
  *((void *)v10 + 1) = v20;
  lazy protocol witness table accessor for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, (void (*)(uint64_t))type metadata accessor for TetraPB_TetraPublicPrekey);
  uint64_t v23 = Message.serializedData(partial:)();
  outlined destroy of TetraPB_TetraPublicPrekey((uint64_t)v8);
  return v23;
}

uint64_t outlined destroy of TetraPB_TetraPublicPrekey(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TetraPB_TetraPublicPrekey(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id TetraRegistration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void TetraRegistration.init()()
{
}

id TetraRegistration.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraRegistration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TetraRegistration()
{
  uint64_t result = type metadata singleton initialization cache for TetraRegistration;
  if (!type metadata singleton initialization cache for TetraRegistration) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for TetraRegistration()
{
  return type metadata accessor for TetraRegistration();
}

uint64_t type metadata completion function for TetraRegistration()
{
  uint64_t result = type metadata accessor for P256.KeyAgreement.PublicKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized TetraRegistration.isValidSignature(_:signedBy:isEncrypting:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  id v6 = objc_msgSend(objc_allocWithZone((Class)NGMTetraRegistrationSignatureFormatter), sel_initWithTetraRegistration_, v3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  LODWORD(a1) = objc_msgSend(a1, sel_verifyTetraRegistrationSignature_formatter_, isa, v6);

  if (!a1)
  {
    if (one-time initialization token for TetraLogger != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)TetraLogger);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_19;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "Tetra signature is incorrect.";
    goto LABEL_18;
  }
  if (a2)
  {
    if ((objc_msgSend(v6, sel_isStillValidToEncrypt) & 1) == 0)
    {
      if (one-time initialization token for TetraLogger != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)TetraLogger);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v9, v10)) {
        goto LABEL_19;
      }
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      uint64_t v12 = "Tetra registration is too old to encrypt to.";
LABEL_18:
      _os_log_impl(&dword_2163F2000, v9, v10, v12, v11, 2u);
      MEMORY[0x2166CDD30](v11, -1, -1);
LABEL_19:

      uint64_t v14 = 0;
      goto LABEL_20;
    }
  }
  else if ((objc_msgSend(v6, sel_isStillValidToDecrypt) & 1) == 0)
  {
    if (one-time initialization token for TetraLogger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)TetraLogger);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_19;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "Tetra registration is too old to decrypt key exchange messages with.";
    goto LABEL_18;
  }
  uint64_t v14 = 1;
LABEL_20:

  return v14;
}

id specialized TetraRegistration.init(kyberPublicKey:ecdhPublicKey:timestamp:version:signedBy:)(void *a1, void *a2, uint64_t a3, void *a4, double a5)
{
  id v40 = a4;
  uint64_t v42[2] = *(id *)MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v5;
  id v15 = a2;
  uint64_t v16 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v42[0] = v16;
  v42[1] = v18;
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_ecdhPublicKey], v13, v10);
  *(void *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey] = a1;
  *(double *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_timestamp] = a5;
  *(_DWORD *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion] = a3;
  id v19 = a1;
  id v20 = v15;
  id v21 = v19;
  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  id v25 = objc_allocWithZone((Class)NGMTetraRegistrationSignatureFormatter);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v27 = objc_msgSend(v25, sel_initWithKyberPublicKey_ecdhPublicKey_timestamp_tetraVersion_, v21, isa, a3, a5);
  outlined consume of Data._Representation(v22, v24);

  id v28 = v40;
  id v29 = objc_msgSend(v40, sel_publicKey);
  *(void *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey] = v29;
  v42[0] = 0;
  id v30 = objc_msgSend(v28, sel_signDataWithRegistrationFormatter_error_, v27, v42);
  id v31 = v42[0];
  if (v30)
  {
    uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    uint64_t v35 = (uint64_t *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature];
    uint64_t *v35 = v32;
    v35[1] = v34;

    uint64_t v36 = (objc_class *)type metadata accessor for TetraRegistration();
    v41.receiver = v14;
    v41.super_class = v36;
    return objc_msgSendSuper2(&v41, sel_init);
  }
  else
  {
    uint64_t v38 = v31;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraQueryLookupError and conformance TetraQueryLookupError()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraQueryLookupError and conformance TetraQueryLookupError;
  if (!lazy protocol witness table cache variable for type TetraQueryLookupError and conformance TetraQueryLookupError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraQueryLookupError and conformance TetraQueryLookupError);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraIncomingSymmetricRatchet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for SymmetricRatchet();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 48));
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    uint64_t v9 = *(int *)(v6 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    long long v12 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)((char *)a1 + v9 + 24) = v12;
    uint64_t v13 = v12;
    uint64_t v14 = **(void (***)(char *, char *, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    v14(v10, v11, v13);
  }
  return a1;
}

uint64_t destroy for TetraIncomingSymmetricRatchet(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for SymmetricRatchet();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(v3 + 24);
  return __swift_destroy_boxed_opaque_existential_0(v4);
}

uint64_t initializeWithCopy for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v5 + 48)) = *(void *)(a2 + *(int *)(v5 + 48));
  uint64_t v6 = type metadata accessor for SymmetricRatchet();
  *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(v9 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v10;
  uint64_t v11 = v10;
  long long v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
  swift_bridgeObjectRetain();
  v12(v8, v9, v11);
  return a1;
}

uint64_t assignWithCopy for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v5 + 48)) = *(void *)(a2 + *(int *)(v5 + 48));
  uint64_t v6 = type metadata accessor for SymmetricRatchet();
  *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(v6 + 24)), (uint64_t *)(a2 + *(int *)(v6 + 24)));
  return a1;
}

uint64_t initializeWithTake for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v5 + 48)) = *(void *)(a2 + *(int *)(v5 + 48));
  uint64_t v6 = type metadata accessor for SymmetricRatchet();
  *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)(a1 + *(int *)(v5 + 48)) = *(void *)(a2 + *(int *)(v5 + 48));
  uint64_t v6 = type metadata accessor for SymmetricRatchet();
  *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __swift_destroy_boxed_opaque_existential_0(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_216486030);
}

uint64_t sub_216486030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricRatchet();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2164860B0);
}

uint64_t sub_2164860B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricRatchet();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TetraIncomingSymmetricRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraIncomingSymmetricRatchet);
}

uint64_t type metadata completion function for TetraIncomingSymmetricRatchet()
{
  uint64_t result = type metadata accessor for SymmetricRatchet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for TetraOutgoingSymmetricRatchet(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a3;
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    uint64_t v9 = (char *)v7 + v8;
    long long v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    uint64_t v14 = v4;
    if (v13(v10, 1, v11))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
    uint64_t v17 = v16[5];
    uint64_t v18 = (char *)v7 + v17;
    id v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for TetraKEM768Key(0);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v23 = type metadata accessor for Kyber768.PrivateKey();
      uint64_t v24 = *(void *)(v23 - 8);
      uint64_t v94 = v16;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v18, v19, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v23);
      }
      uint64_t v26 = *(int *)(v20 + 20);
      id v27 = &v18[v26];
      id v28 = &v19[v26];
      uint64_t v29 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        uint64_t v32 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v27, v28, v32);
        uint64_t v33 = *(int *)(v29 + 20);
        uint64_t v90 = v30;
        uint64_t v92 = v5;
        uint64_t v34 = (uint64_t *)&v27[v33];
        uint64_t v35 = (uint64_t *)&v28[v33];
        unint64_t v88 = v27;
        uint64_t v37 = *v35;
        unint64_t v36 = v35[1];
        outlined copy of Data._Representation(*v35, v36);
        *uint64_t v34 = v37;
        v34[1] = v36;
        uint64_t v38 = *(int *)(v29 + 24);
        uint64_t v39 = *(void **)&v28[v38];
        *(void *)&v88[v38] = v39;
        uint64_t v5 = v92;
        id v40 = *(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56);
        id v41 = v39;
        v40(v88, 0, 1, v29);
      }
      uint64_t v16 = v94;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v42 = v16[6];
    id v43 = (char *)v7 + v42;
    uint64_t v44 = (char *)a2 + v42;
    uint64_t v45 = type metadata accessor for TetraKEM1024Key(0);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      uint64_t v48 = type metadata accessor for Kyber1024.PrivateKey();
      uint64_t v49 = *(void *)(v48 - 8);
      uint64_t v95 = v16;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v44, 1, v48))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v43, v44, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v43, v44, v48);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v43, 0, 1, v48);
      }
      uint64_t v51 = *(int *)(v45 + 20);
      long long v52 = &v43[v51];
      os_log_type_t v53 = &v44[v51];
      uint64_t v54 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        uint64_t v57 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v52, v53, v57);
        uint64_t v58 = *(int *)(v54 + 20);
        long long v89 = v52;
        uint64_t v91 = v46;
        uint64_t v59 = (uint64_t *)&v52[v58];
        int v60 = (uint64_t *)&v53[v58];
        uint64_t v61 = v55;
        uint64_t v93 = v5;
        uint64_t v62 = *v60;
        unint64_t v63 = v60[1];
        outlined copy of Data._Representation(*v60, v63);
        *uint64_t v59 = v62;
        v59[1] = v63;
        uint64_t v46 = v91;
        uint64_t v5 = v93;
        uint64_t v64 = *(int *)(v54 + 24);
        id v65 = *(void **)&v53[v64];
        *(void *)&v89[v64] = v65;
        objc_super v66 = *(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56);
        id v67 = v65;
        v66(v89, 0, 1, v54);
      }
      uint64_t v16 = v95;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    uint64_t v68 = v16[7];
    uint64_t v69 = (char *)v7 + v68;
    long long v70 = (char *)a2 + v68;
    unint64_t v71 = *((void *)v70 + 1);
    if (v71 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
    }
    else
    {
      uint64_t v72 = *(void *)v70;
      outlined copy of Data._Representation(*(void *)v70, *((void *)v70 + 1));
      *(void *)uint64_t v69 = v72;
      *((void *)v69 + 1) = v71;
    }
    uint64_t v73 = *(int *)(v5 + 20);
    uint64_t v74 = (char *)v7 + v73;
    uint64_t v75 = (char *)a2 + v73;
    uint64_t v76 = type metadata accessor for SymmetricRatchet();
    uint64_t v77 = *(void *)(v76 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
    {
      uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
      memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      uint64_t v79 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v74, v75, v79);
      uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v74[*(int *)(v80 + 48)] = *(void *)&v75[*(int *)(v80 + 48)];
      *(void *)&v74[*(int *)(v76 + 20)] = *(void *)&v75[*(int *)(v76 + 20)];
      uint64_t v81 = *(int *)(v76 + 24);
      uint64_t v82 = &v74[v81];
      uint64_t v83 = &v75[v81];
      long long v84 = *(_OWORD *)(v83 + 24);
      *(_OWORD *)&v74[v81 + 24] = v84;
      uint64_t v85 = v84;
      uint64_t v86 = **(void (***)(char *, char *, uint64_t))(v84 - 8);
      swift_bridgeObjectRetain();
      v86(v82, v83, v85);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
    }
  }
  return v7;
}

uint64_t destroy for TetraOutgoingSymmetricRatchet(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v5 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v8 = (char *)a1 + v7[5];
  uint64_t v9 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10)) {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    }
    uint64_t v12 = &v8[*(int *)(v9 + 20)];
    uint64_t v13 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
    {
      uint64_t v14 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v12, v14);
      outlined consume of Data._Representation(*(void *)&v12[*(int *)(v13 + 20)], *(void *)&v12[*(int *)(v13 + 20) + 8]);
    }
  }
  uint64_t v15 = (char *)a1 + v7[6];
  uint64_t v16 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    uint64_t v17 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v18 = *(void *)(v17 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17)) {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    }
    id v19 = &v15[*(int *)(v16 + 20)];
    uint64_t v20 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20))
    {
      uint64_t v21 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v19, v21);
      outlined consume of Data._Representation(*(void *)&v19[*(int *)(v20 + 20)], *(void *)&v19[*(int *)(v20 + 20) + 8]);
    }
  }
  uint64_t v22 = (uint64_t *)((char *)a1 + v7[7]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    outlined consume of Data._Representation(*v22, v23);
  }
  uint64_t v24 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v25 = type metadata accessor for SymmetricRatchet();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25);
  if (!result)
  {
    uint64_t v27 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v24, v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = (uint64_t)&v24[*(int *)(v25 + 24)];
    return __swift_destroy_boxed_opaque_existential_0(v28);
  }
  return result;
}

void **initializeWithCopy for TetraOutgoingSymmetricRatchet(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v6;
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v93 = v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v18, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v17, 0, 1, v22);
    }
    uint64_t v25 = *(int *)(v19 + 20);
    uint64_t v26 = &v17[v25];
    uint64_t v27 = &v18[v25];
    uint64_t v28 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v26, v27, v31);
      uint64_t v32 = *(int *)(v28 + 20);
      uint64_t v89 = v29;
      uint64_t v91 = a3;
      uint64_t v33 = (uint64_t *)&v26[v32];
      uint64_t v34 = (uint64_t *)&v27[v32];
      unint64_t v87 = v26;
      uint64_t v36 = *v34;
      unint64_t v35 = v34[1];
      outlined copy of Data._Representation(*v34, v35);
      uint64_t *v33 = v36;
      v33[1] = v35;
      uint64_t v37 = *(int *)(v28 + 24);
      uint64_t v38 = *(void **)&v27[v37];
      *(void *)&v87[v37] = v38;
      a3 = v91;
      uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56);
      id v40 = v38;
      v39(v87, 0, 1, v28);
    }
    uint64_t v15 = v93;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v41 = v15[6];
  uint64_t v42 = (char *)a1 + v41;
  id v43 = (char *)a2 + v41;
  uint64_t v44 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    uint64_t v47 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v48 = *(void *)(v47 - 8);
    uint64_t v94 = v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v43, 1, v47))
    {
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v42, v43, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v42, v43, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v42, 0, 1, v47);
    }
    uint64_t v50 = *(int *)(v44 + 20);
    uint64_t v51 = &v42[v50];
    long long v52 = &v43[v50];
    uint64_t v53 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      uint64_t v56 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v51, v52, v56);
      uint64_t v57 = *(int *)(v53 + 20);
      unint64_t v88 = v51;
      uint64_t v90 = v45;
      uint64_t v58 = (uint64_t *)&v51[v57];
      uint64_t v59 = (uint64_t *)&v52[v57];
      uint64_t v60 = v54;
      uint64_t v92 = a3;
      uint64_t v61 = *v59;
      unint64_t v62 = v59[1];
      outlined copy of Data._Representation(*v59, v62);
      *uint64_t v58 = v61;
      v58[1] = v62;
      uint64_t v45 = v90;
      a3 = v92;
      uint64_t v63 = *(int *)(v53 + 24);
      uint64_t v64 = *(void **)&v52[v63];
      *(void *)&v88[v63] = v64;
      id v65 = *(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56);
      id v66 = v64;
      v65(v88, 0, 1, v53);
    }
    uint64_t v15 = v94;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  uint64_t v67 = v15[7];
  uint64_t v68 = (char *)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  unint64_t v70 = *((void *)v69 + 1);
  if (v70 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
  }
  else
  {
    uint64_t v71 = *(void *)v69;
    outlined copy of Data._Representation(*(void *)v69, *((void *)v69 + 1));
    *(void *)uint64_t v68 = v71;
    *((void *)v68 + 1) = v70;
  }
  uint64_t v72 = *(int *)(a3 + 20);
  uint64_t v73 = (char *)a1 + v72;
  uint64_t v74 = (char *)a2 + v72;
  uint64_t v75 = type metadata accessor for SymmetricRatchet();
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    uint64_t v78 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v73, v74, v78);
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v73[*(int *)(v79 + 48)] = *(void *)&v74[*(int *)(v79 + 48)];
    *(void *)&v73[*(int *)(v75 + 20)] = *(void *)&v74[*(int *)(v75 + 20)];
    uint64_t v80 = *(int *)(v75 + 24);
    uint64_t v81 = &v73[v80];
    uint64_t v82 = &v74[v80];
    long long v83 = *(_OWORD *)(v82 + 24);
    *(_OWORD *)&v73[v80 + 24] = v83;
    uint64_t v84 = v83;
    uint64_t v85 = **(void (***)(char *, char *, uint64_t))(v83 - 8);
    swift_bridgeObjectRetain();
    v85(v81, v82, v84);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
  }
  return a1;
}

void **assignWithCopy for TetraOutgoingSymmetricRatchet(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  id v8 = v7;

  uint64_t v9 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v183 = a1;
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)v4 + v9;
  uint64_t v12 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v182 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v18 = v182[5];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)v4 + v18;
  uint64_t v21 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (v25)
    {
      _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2((uint64_t)v19, type metadata accessor for TetraKEM768Key);
      goto LABEL_13;
    }
    uint64_t v180 = a3;
    uint64_t v32 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    int v35 = v34(v19, 1, v32);
    int v36 = v34(v20, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v19, v20, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v19, 0, 1, v32);
LABEL_58:
        a3 = v180;
        uint64_t v116 = *(int *)(v21 + 20);
        uint64_t v117 = (uint64_t)&v19[v116];
        uint64_t v118 = &v20[v116];
        uint64_t v119 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v120 = *(void *)(v119 - 8);
        uint64_t v121 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
        int v122 = v121(v117, 1, v119);
        int v123 = v121((uint64_t)v118, 1, v119);
        if (v122)
        {
          if (!v123)
          {
            uint64_t v124 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v124 - 8) + 16))(v117, v118, v124);
            uint64_t v125 = *(int *)(v119 + 20);
            size_t v126 = (uint64_t *)(v117 + v125);
            BOOL v127 = (uint64_t *)&v118[v125];
            uint64_t v128 = *v127;
            unint64_t v129 = v127[1];
            outlined copy of Data._Representation(*v127, v129);
            uint64_t *v126 = v128;
            v126[1] = v129;
            a3 = v180;
            uint64_t v130 = *(int *)(v119 + 24);
            uint64_t v131 = *(void **)&v118[v130];
            *(void *)(v117 + v130) = v131;
            uint64_t v132 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v120 + 56);
            id v133 = v131;
            v132(v117, 0, 1, v119);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v123)
          {
            uint64_t v153 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v153 - 8) + 24))(v117, v118, v153);
            uint64_t v154 = *(int *)(v119 + 20);
            uint64_t v155 = (uint64_t *)(v117 + v154);
            uint64_t v156 = (uint64_t *)&v118[v154];
            uint64_t v157 = *v156;
            unint64_t v158 = v156[1];
            outlined copy of Data._Representation(*v156, v158);
            uint64_t v159 = *v155;
            unint64_t v160 = v155[1];
            *uint64_t v155 = v157;
            v155[1] = v158;
            a3 = v180;
            outlined consume of Data._Representation(v159, v160);
            uint64_t v161 = *(int *)(v119 + 24);
            uint64_t v162 = *(void **)&v118[v161];
            uint64_t v163 = *(void **)(v117 + v161);
            *(void *)(v117 + v161) = v162;
            id v164 = v162;

            goto LABEL_24;
          }
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2(v117, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v30 = (void *)v117;
        uint64_t v31 = v118;
LABEL_14:
        memcpy(v30, v31, v29);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v19, v20, v32);
        goto LABEL_58;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v32);
    }
    uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v19, v20, *(void *)(*(void *)(v115 - 8) + 64));
    goto LABEL_58;
  }
  if (v25)
  {
LABEL_13:
    size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    uint64_t v30 = v19;
    uint64_t v31 = v20;
    goto LABEL_14;
  }
  uint64_t v26 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v179 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v20, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v19, v20, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v19, v20, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v19, 0, 1, v26);
  }
  uint64_t v37 = *(int *)(v21 + 20);
  uint64_t v38 = &v19[v37];
  uint64_t v39 = &v20[v37];
  uint64_t v40 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v43 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v38, v39, v43);
    uint64_t v44 = *(int *)(v40 + 20);
    uint64_t v45 = (uint64_t *)&v38[v44];
    uint64_t v46 = (uint64_t *)&v39[v44];
    uint64_t v177 = v4;
    uint64_t v48 = *v46;
    unint64_t v47 = v46[1];
    outlined copy of Data._Representation(*v46, v47);
    uint64_t *v45 = v48;
    v45[1] = v47;
    uint64_t v4 = v177;
    uint64_t v49 = *(int *)(v40 + 24);
    uint64_t v50 = *(void **)&v39[v49];
    *(void *)&v38[v49] = v50;
    uint64_t v51 = *(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56);
    id v52 = v50;
    v51(v38, 0, 1, v40);
  }
  a3 = v179;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_24:
  uint64_t v53 = v182[6];
  uint64_t v54 = (char *)v183 + v53;
  uint64_t v55 = (char *)v4 + v53;
  uint64_t v56 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (v60)
    {
      _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2((uint64_t)v54, type metadata accessor for TetraKEM1024Key);
      goto LABEL_30;
    }
    uint64_t v67 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v68 = *(void *)(v67 - 8);
    uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
    int v70 = v69(v54, 1, v67);
    int v71 = v69(v55, 1, v67);
    if (v70)
    {
      if (!v71)
      {
        (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v54, v55, v67);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v54, 0, 1, v67);
LABEL_64:
        uint64_t v135 = *(int *)(v56 + 20);
        uint64_t v136 = (uint64_t)&v54[v135];
        unint64_t v137 = &v55[v135];
        uint64_t v138 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v139 = *(void *)(v138 - 8);
        uint64_t v140 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v139 + 48);
        int v141 = v140(v136, 1, v138);
        int v142 = v140((uint64_t)v137, 1, v138);
        if (v141)
        {
          if (!v142)
          {
            uint64_t v143 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v143 - 8) + 16))(v136, v137, v143);
            uint64_t v144 = *(int *)(v138 + 20);
            char v145 = (uint64_t *)(v136 + v144);
            char v146 = (uint64_t *)&v137[v144];
            uint64_t v147 = *v146;
            unint64_t v148 = v146[1];
            outlined copy of Data._Representation(*v146, v148);
            uint64_t *v145 = v147;
            v145[1] = v148;
            uint64_t v149 = *(int *)(v138 + 24);
            char v150 = *(void **)&v137[v149];
            *(void *)(v136 + v149) = v150;
            int v151 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v139 + 56);
            id v152 = v150;
            v151(v136, 0, 1, v138);
            goto LABEL_40;
          }
        }
        else
        {
          if (!v142)
          {
            uint64_t v165 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v165 - 8) + 24))(v136, v137, v165);
            uint64_t v166 = *(int *)(v138 + 20);
            uint64_t v167 = (uint64_t *)(v136 + v166);
            uint64_t v168 = (uint64_t *)&v137[v166];
            uint64_t v169 = *v168;
            unint64_t v170 = v168[1];
            outlined copy of Data._Representation(*v168, v170);
            uint64_t v171 = *v167;
            unint64_t v172 = v167[1];
            *uint64_t v167 = v169;
            v167[1] = v170;
            outlined consume of Data._Representation(v171, v172);
            uint64_t v173 = *(int *)(v138 + 24);
            uint64_t v174 = *(void **)&v137[v173];
            uint64_t v175 = *(void **)(v136 + v173);
            *(void *)(v136 + v173) = v174;
            id v176 = v174;

            goto LABEL_40;
          }
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2(v136, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        size_t v64 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        id v65 = (void *)v136;
        id v66 = v137;
LABEL_31:
        memcpy(v65, v66, v64);
        goto LABEL_40;
      }
    }
    else
    {
      if (!v71)
      {
        (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v54, v55, v67);
        goto LABEL_64;
      }
      (*(void (**)(char *, uint64_t))(v68 + 8))(v54, v67);
    }
    uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v54, v55, *(void *)(*(void *)(v134 - 8) + 64));
    goto LABEL_64;
  }
  if (v60)
  {
LABEL_30:
    size_t v64 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    id v65 = v54;
    id v66 = v55;
    goto LABEL_31;
  }
  uint64_t v61 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v181 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v55, 1, v61))
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v54, v55, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v54, v55, v61);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v54, 0, 1, v61);
  }
  uint64_t v72 = *(int *)(v56 + 20);
  uint64_t v73 = &v54[v72];
  uint64_t v74 = &v55[v72];
  uint64_t v75 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    uint64_t v78 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v73, v74, v78);
    uint64_t v79 = *(int *)(v75 + 20);
    uint64_t v80 = (uint64_t *)&v73[v79];
    uint64_t v81 = (uint64_t *)&v74[v79];
    unint64_t v178 = v4;
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    outlined copy of Data._Representation(*v81, v83);
    *uint64_t v80 = v82;
    v80[1] = v83;
    uint64_t v4 = v178;
    uint64_t v84 = *(int *)(v75 + 24);
    uint64_t v85 = *(void **)&v74[v84];
    *(void *)&v73[v84] = v85;
    uint64_t v86 = *(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56);
    id v87 = v85;
    v86(v73, 0, 1, v75);
  }
  a3 = v181;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_40:
  uint64_t v88 = v182[7];
  uint64_t v89 = (uint64_t *)((char *)v183 + v88);
  uint64_t v90 = (uint64_t *)((char *)v4 + v88);
  unint64_t v91 = *(unint64_t *)((char *)v4 + v88 + 8);
  if (*(unint64_t *)((char *)v183 + v88 + 8) >> 60 == 15)
  {
    if (v91 >> 60 != 15)
    {
      uint64_t v92 = *v90;
      outlined copy of Data._Representation(*v90, v91);
      uint64_t *v89 = v92;
      v89[1] = v91;
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  if (v91 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v89);
LABEL_45:
    *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
    goto LABEL_47;
  }
  uint64_t v93 = *v90;
  outlined copy of Data._Representation(*v90, v91);
  uint64_t v94 = *v89;
  unint64_t v95 = v89[1];
  uint64_t *v89 = v93;
  v89[1] = v91;
  outlined consume of Data._Representation(v94, v95);
LABEL_47:
  uint64_t v96 = *(int *)(a3 + 20);
  long long v97 = (char *)v183 + v96;
  uint64_t v98 = (char *)v4 + v96;
  uint64_t v99 = type metadata accessor for SymmetricRatchet();
  uint64_t v100 = *(void *)(v99 - 8);
  unint64_t v101 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48);
  int v102 = v101(v97, 1, v99);
  int v103 = v101(v98, 1, v99);
  if (!v102)
  {
    if (!v103)
    {
      uint64_t v113 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 24))(v97, v98, v113);
      uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v97[*(int *)(v114 + 48)] = *(void *)&v98[*(int *)(v114 + 48)];
      *(void *)&v97[*(int *)(v99 + 20)] = *(void *)&v98[*(int *)(v99 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __swift_assign_boxed_opaque_existential_1((uint64_t *)&v97[*(int *)(v99 + 24)], (uint64_t *)&v98[*(int *)(v99 + 24)]);
      return v183;
    }
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2((uint64_t)v97, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
    goto LABEL_52;
  }
  if (v103)
  {
LABEL_52:
    uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v97, v98, *(void *)(*(void *)(v111 - 8) + 64));
    return v183;
  }
  uint64_t v104 = type metadata accessor for SymmetricKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 16))(v97, v98, v104);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)&v97[*(int *)(v105 + 48)] = *(void *)&v98[*(int *)(v105 + 48)];
  *(void *)&v97[*(int *)(v99 + 20)] = *(void *)&v98[*(int *)(v99 + 20)];
  uint64_t v106 = *(int *)(v99 + 24);
  uint64_t v107 = &v97[v106];
  uint64_t v108 = &v98[v106];
  uint64_t v109 = *((void *)v108 + 3);
  *((void *)v107 + 3) = v109;
  *((void *)v107 + 4) = *((void *)v108 + 4);
  int v110 = **(void (***)(char *, char *, uint64_t))(v109 - 8);
  swift_bridgeObjectRetain();
  v110(v107, v108, v109);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
  return v183;
}

uint64_t _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for TetraOutgoingSymmetricRatchet(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v13 = v12[5];
  uint64_t v14 = (char *)a1 + v13;
  int v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v58 = a3;
    uint64_t v19 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v14, v15, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v19);
    }
    uint64_t v22 = *(int *)(v16 + 20);
    uint64_t v23 = &v14[v22];
    int v24 = &v15[v22];
    uint64_t v25 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v23, v24, v28);
      *(_OWORD *)&v23[*(int *)(v25 + 20)] = *(_OWORD *)&v24[*(int *)(v25 + 20)];
      *(void *)&v23[*(int *)(v25 + 24)] = *(void *)&v24[*(int *)(v25 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    a3 = v58;
  }
  uint64_t v29 = v12[6];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    uint64_t v59 = a3;
    uint64_t v35 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v31, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v30, v31, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, v35);
    }
    uint64_t v38 = *(int *)(v32 + 20);
    uint64_t v39 = &v30[v38];
    uint64_t v40 = &v31[v38];
    uint64_t v41 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      uint64_t v44 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v39, v40, v44);
      *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
      *(void *)&v39[*(int *)(v41 + 24)] = *(void *)&v40[*(int *)(v41 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    a3 = v59;
  }
  *(_OWORD *)((char *)a1 + v12[7]) = *(_OWORD *)((char *)a2 + v12[7]);
  uint64_t v45 = *(int *)(a3 + 20);
  uint64_t v46 = (char *)a1 + v45;
  unint64_t v47 = (char *)a2 + v45;
  uint64_t v48 = type metadata accessor for SymmetricRatchet();
  uint64_t v49 = *(void *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    uint64_t v51 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v46, v47, v51);
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(void *)&v46[*(int *)(v52 + 48)] = *(void *)&v47[*(int *)(v52 + 48)];
    *(void *)&v46[*(int *)(v48 + 20)] = *(void *)&v47[*(int *)(v48 + 20)];
    uint64_t v53 = *(int *)(v48 + 24);
    uint64_t v54 = &v46[v53];
    uint64_t v55 = &v47[v53];
    long long v56 = *((_OWORD *)v55 + 1);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *((_OWORD *)v54 + 1) = v56;
    *((void *)v54 + 4) = *((void *)v55 + 4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  return a1;
}

void **assignWithTake for TetraOutgoingSymmetricRatchet(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  *a1 = *a2;

  uint64_t v6 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  int v15 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for TetraKEM768Key(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (v23)
    {
      _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2((uint64_t)v17, type metadata accessor for TetraKEM768Key);
      goto LABEL_13;
    }
    uint64_t v30 = type metadata accessor for Kyber768.PrivateKey();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    int v33 = v32(v17, 1, v30);
    int v34 = v32(v18, 1, v30);
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v17, v18, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v17, 0, 1, v30);
LABEL_55:
        uint64_t v96 = *(int *)(v19 + 20);
        uint64_t v97 = (uint64_t)&v17[v96];
        uint64_t v98 = &v18[v96];
        uint64_t v99 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        uint64_t v100 = *(void *)(v99 - 8);
        unint64_t v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
        int v102 = v101(v97, 1, v99);
        int v103 = v101((uint64_t)v98, 1, v99);
        if (v102)
        {
          if (!v103)
          {
            uint64_t v104 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v104 - 8) + 32))(v97, v98, v104);
            *(_OWORD *)(v97 + *(int *)(v99 + 20)) = *(_OWORD *)&v98[*(int *)(v99 + 20)];
            *(void *)(v97 + *(int *)(v99 + 24)) = *(void *)&v98[*(int *)(v99 + 24)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v103)
          {
            uint64_t v116 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v116 - 8) + 40))(v97, v98, v116);
            uint64_t v117 = *(int *)(v99 + 20);
            uint64_t v118 = *(void *)(v97 + v117);
            unint64_t v119 = *(void *)(v97 + v117 + 8);
            *(_OWORD *)(v97 + v117) = *(_OWORD *)&v98[v117];
            outlined consume of Data._Representation(v118, v119);
            uint64_t v120 = *(int *)(v99 + 24);
            uint64_t v121 = *(void **)(v97 + v120);
            *(void *)(v97 + v120) = *(void *)&v98[v120];

            goto LABEL_24;
          }
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2(v97, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        uint64_t v28 = (void *)v97;
        uint64_t v29 = v98;
LABEL_14:
        memcpy(v28, v29, v27);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v17, v18, v30);
        goto LABEL_55;
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v30);
    }
    uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v17, v18, *(void *)(*(void *)(v95 - 8) + 64));
    goto LABEL_55;
  }
  if (v23)
  {
LABEL_13:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    uint64_t v28 = v17;
    uint64_t v29 = v18;
    goto LABEL_14;
  }
  uint64_t v24 = type metadata accessor for Kyber768.PrivateKey();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v18, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v17, v18, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v17, v18, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v17, 0, 1, v24);
  }
  uint64_t v35 = *(int *)(v19 + 20);
  uint64_t v36 = &v17[v35];
  uint64_t v37 = &v18[v35];
  uint64_t v38 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v41 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v36, v37, v41);
    *(_OWORD *)&v36[*(int *)(v38 + 20)] = *(_OWORD *)&v37[*(int *)(v38 + 20)];
    *(void *)&v36[*(int *)(v38 + 24)] = *(void *)&v37[*(int *)(v38 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_24:
  uint64_t v42 = v15[6];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = type metadata accessor for TetraKEM1024Key(0);
  uint64_t v46 = *(void *)(v45 - 8);
  unint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (v49)
    {
      _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2((uint64_t)v43, type metadata accessor for TetraKEM1024Key);
      goto LABEL_30;
    }
    uint64_t v55 = type metadata accessor for Kyber1024.PrivateKey();
    uint64_t v56 = *(void *)(v55 - 8);
    uint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    int v58 = v57(v43, 1, v55);
    int v59 = v57(v44, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v43, v44, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v43, 0, 1, v55);
        goto LABEL_61;
      }
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 40))(v43, v44, v55);
LABEL_61:
        uint64_t v106 = *(int *)(v45 + 20);
        uint64_t v107 = &v43[v106];
        uint64_t v108 = &v44[v106];
        uint64_t v109 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        uint64_t v110 = *(void *)(v109 - 8);
        uint64_t v111 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v110 + 48);
        int v112 = v111(v107, 1, v109);
        int v113 = v111(v108, 1, v109);
        if (v112)
        {
          if (!v113)
          {
            uint64_t v114 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 32))(v107, v108, v114);
            *(_OWORD *)&v107[*(int *)(v109 + 20)] = *(_OWORD *)&v108[*(int *)(v109 + 20)];
            *(void *)&v107[*(int *)(v109 + 24)] = *(void *)&v108[*(int *)(v109 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
            uint64_t v54 = a3;
            goto LABEL_39;
          }
        }
        else
        {
          if (!v113)
          {
            uint64_t v122 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v122 - 8) + 40))(v107, v108, v122);
            uint64_t v123 = *(int *)(v109 + 20);
            uint64_t v124 = *(void *)&v107[v123];
            unint64_t v125 = *(void *)&v107[v123 + 8];
            *(_OWORD *)&v107[v123] = *(_OWORD *)&v108[v123];
            outlined consume of Data._Representation(v124, v125);
            uint64_t v126 = *(int *)(v109 + 24);
            BOOL v127 = *(void **)&v107[v126];
            *(void *)&v107[v126] = *(void *)&v108[v126];

            uint64_t v54 = a3;
            goto LABEL_39;
          }
          _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2((uint64_t)v107, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v107, v108, *(void *)(*(void *)(v115 - 8) + 64));
        uint64_t v54 = a3;
        goto LABEL_39;
      }
      (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v55);
    }
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v43, v44, *(void *)(*(void *)(v105 - 8) + 64));
    goto LABEL_61;
  }
  if (v49)
  {
LABEL_30:
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v43, v44, *(void *)(*(void *)(v53 - 8) + 64));
    uint64_t v54 = a3;
    goto LABEL_39;
  }
  uint64_t v50 = type metadata accessor for Kyber1024.PrivateKey();
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v44, 1, v50))
  {
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v43, v44, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v43, v44, v50);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v43, 0, 1, v50);
  }
  uint64_t v60 = *(int *)(v45 + 20);
  uint64_t v61 = &v43[v60];
  uint64_t v62 = &v44[v60];
  uint64_t v63 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
  {
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    uint64_t v66 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v61, v62, v66);
    *(_OWORD *)&v61[*(int *)(v63 + 20)] = *(_OWORD *)&v62[*(int *)(v63 + 20)];
    *(void *)&v61[*(int *)(v63 + 24)] = *(void *)&v62[*(int *)(v63 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  uint64_t v54 = a3;
LABEL_39:
  uint64_t v67 = v15[7];
  uint64_t v68 = (uint64_t)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  unint64_t v70 = *(unint64_t *)((char *)a1 + v67 + 8);
  if (v70 >> 60 == 15)
  {
LABEL_42:
    *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
    goto LABEL_44;
  }
  unint64_t v71 = *((void *)v69 + 1);
  if (v71 >> 60 == 15)
  {
    outlined destroy of Data(v68);
    goto LABEL_42;
  }
  uint64_t v72 = *(void *)v68;
  *(void *)uint64_t v68 = *(void *)v69;
  *(void *)(v68 + 8) = v71;
  outlined consume of Data._Representation(v72, v70);
LABEL_44:
  uint64_t v73 = *(int *)(v54 + 20);
  uint64_t v74 = (char *)a1 + v73;
  uint64_t v75 = (char *)a2 + v73;
  uint64_t v76 = type metadata accessor for SymmetricRatchet();
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v78 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
  int v79 = v78(v74, 1, v76);
  int v80 = v78(v75, 1, v76);
  if (!v79)
  {
    if (!v80)
    {
      uint64_t v89 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 40))(v74, v75, v89);
      uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(void *)&v74[*(int *)(v90 + 48)] = *(void *)&v75[*(int *)(v90 + 48)];
      *(void *)&v74[*(int *)(v76 + 20)] = *(void *)&v75[*(int *)(v76 + 20)];
      swift_bridgeObjectRelease();
      uint64_t v91 = *(int *)(v76 + 24);
      uint64_t v92 = (uint64_t)&v74[v91];
      uint64_t v93 = &v75[v91];
      __swift_destroy_boxed_opaque_existential_0(v92);
      long long v94 = *((_OWORD *)v93 + 1);
      *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
      *(_OWORD *)(v92 + 16) = v94;
      *(void *)(v92 + 32) = *((void *)v93 + 4);
      return a1;
    }
    _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2((uint64_t)v74, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
    goto LABEL_49;
  }
  if (v80)
  {
LABEL_49:
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v74, v75, *(void *)(*(void *)(v87 - 8) + 64));
    return a1;
  }
  uint64_t v81 = type metadata accessor for SymmetricKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32))(v74, v75, v81);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(void *)&v74[*(int *)(v82 + 48)] = *(void *)&v75[*(int *)(v82 + 48)];
  *(void *)&v74[*(int *)(v76 + 20)] = *(void *)&v75[*(int *)(v76 + 20)];
  uint64_t v83 = *(int *)(v76 + 24);
  uint64_t v84 = &v74[v83];
  uint64_t v85 = &v75[v83];
  long long v86 = *((_OWORD *)v85 + 1);
  *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
  *((_OWORD *)v84 + 1) = v86;
  *((void *)v84 + 4) = *((void *)v85 + 4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21648A31C);
}

uint64_t sub_21648A31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    id v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for TetraOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21648A42C);
}

uint64_t sub_21648A42C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TetraOutgoingKeyContent(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for TetraOutgoingSymmetricRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraOutgoingSymmetricRatchet);
}

void type metadata completion function for TetraOutgoingSymmetricRatchet()
{
  type metadata accessor for TetraOutgoingKeyContent(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SymmetricRatchet?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for SymmetricRatchet?()
{
  if (!lazy cache variable for type metadata for SymmetricRatchet?)
  {
    type metadata accessor for SymmetricRatchet();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SymmetricRatchet?);
    }
  }
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000012;
  }
  else {
    unint64_t v3 = 0x506465646F636E65;
  }
  if (v2) {
    unint64_t v4 = 0xEF6675626F746F72;
  }
  else {
    unint64_t v4 = 0x800000021649B1E0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000012;
  }
  else {
    unint64_t v5 = 0x506465646F636E65;
  }
  if (a2) {
    unint64_t v6 = 0x800000021649B1E0;
  }
  else {
    unint64_t v6 = 0xEF6675626F746F72;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x79654B68646365;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x79654B68646365;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x654B3836376D656BLL;
      unint64_t v3 = 0xE900000000000079;
      break;
    case 2:
      uint64_t v5 = 0x4B343230316D656BLL;
      unint64_t v3 = 0xEA00000000007965;
      break;
    case 3:
      uint64_t v5 = 0x6463456172746574;
      unint64_t v3 = 0xEC00000079654B68;
      break;
    case 4:
      uint64_t v5 = 0x6D654B6172746574;
      unint64_t v3 = 0xEE0079654B383637;
      break;
    case 5:
      uint64_t v5 = 0x6D654B6172746574;
      unint64_t v3 = 0xEF79654B34323031;
      break;
    case 6:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7061636E65;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE900000000000079;
      if (v5 == 0x654B3836376D656BLL) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xEA00000000007965;
      if (v5 != 0x4B343230316D656BLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xEC00000079654B68;
      if (v5 != 0x6463456172746574) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xEE0079654B383637;
      if (v5 != 0x6D654B6172746574) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      uint64_t v2 = 0x6D654B6172746574;
      unint64_t v6 = 0xEF79654B34323031;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x7061636E65) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t TetraOutgoingSymmetricRatchet.init(symmetricRatchetHead:outgoingPublicKeys:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SymmetricKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v37 = (uint64_t)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v18 = a3 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v19 = type metadata accessor for SymmetricRatchet();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  uint64_t v36 = v18;
  uint64_t v34 = v20 + 56;
  v35(v18, 1, 1, v19);
  outlined init with copy of TetraSessionStates?(a1, (uint64_t)v11, &demangling cache variable for type metadata for SymmetricKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of TetraSessionStates?(a1, &demangling cache variable for type metadata for SymmetricKey?);
    outlined destroy of TetraSessionStates?((uint64_t)v11, &demangling cache variable for type metadata for SymmetricKey?);
  }
  else
  {
    uint64_t v30 = v8;
    uint64_t v31 = a1;
    uint64_t v32 = a3;
    uint64_t v33 = a2;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v11, v12);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v37, v17, v12);
    if (one-time initialization token for tetraSymmetricKeyRatchetStep != -1) {
      swift_once();
    }
    uint64_t v21 = tetraSymmetricKeyRatchetStep;
    unint64_t v22 = *(void *)algn_26AC052F8;
    uint64_t v23 = qword_26AC05300;
    unint64_t v24 = unk_26AC05308;
    uint64_t v25 = qword_26AC05310;
    char v26 = byte_26AC05318;
    id v38[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA384>);
    v38[4] = &protocol witness table for HKDFRatchet<A>;
    uint64_t v27 = swift_allocObject();
    v38[0] = v27;
    *(void *)(v27 + 16) = v21;
    *(void *)(v27 + 24) = v22;
    *(void *)(v27 + 32) = v23;
    *(void *)(v27 + 40) = v24;
    *(void *)(v27 + 48) = v25;
    *(unsigned char *)(v27 + 56) = v26;
    outlined copy of Data._Representation(v21, v22);
    outlined copy of Data._Representation(v23, v24);
    uint64_t v28 = (uint64_t)v30;
    SymmetricRatchet.init(ck:index:step:)(v37, 0, (uint64_t)v38, (uint64_t)v30);
    outlined destroy of TetraSessionStates?(v31, &demangling cache variable for type metadata for SymmetricKey?);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    v35(v28, 0, 1, v19);
    outlined assign with take of SymmetricRatchet?(v28, v36);
    a3 = v32;
    a2 = v33;
  }
  return outlined init with take of SymmetricRatchet(a2, a3, type metadata accessor for TetraOutgoingKeyContent);
}

uint64_t TetraIncomingSymmetricRatchet.init(symmetricRatchetHead:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for SymmetricKey();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v28 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v4;
  uint64_t v32 = v3;
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v29 = a1;
  uint64_t v27 = v12;
  v12(v8, a1, v3);
  if (one-time initialization token for tetraSymmetricKeyRatchetStep != -1) {
    swift_once();
  }
  uint64_t v13 = tetraSymmetricKeyRatchetStep;
  unint64_t v14 = *(void *)algn_26AC052F8;
  uint64_t v16 = qword_26AC05300;
  unint64_t v15 = unk_26AC05308;
  uint64_t v17 = qword_26AC05310;
  char v18 = byte_26AC05318;
  void v33[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA384>);
  v33[4] = &protocol witness table for HKDFRatchet<A>;
  uint64_t v19 = swift_allocObject();
  v33[0] = v19;
  *(void *)(v19 + 16) = v13;
  *(void *)(v19 + 24) = v14;
  *(void *)(v19 + 32) = v16;
  *(void *)(v19 + 40) = v15;
  *(void *)(v19 + 48) = v17;
  *(unsigned char *)(v19 + 56) = v18;
  *(void *)&v11[*(int *)(v9 + 20)] = MEMORY[0x263F8EE80];
  outlined copy of Data._Representation(v13, v14);
  outlined copy of Data._Representation(v16, v15);
  if (SymmetricKey.bitCount.getter() <= 255)
  {
    uint64_t v25 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, MEMORY[0x263F04548]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v26, *MEMORY[0x263F04530], v25);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v32);
    swift_bridgeObjectRelease();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)v33, (uint64_t)&v11[*(int *)(v9 + 24)]);
    uint64_t v20 = v28;
    uint64_t v21 = v32;
    v27(v28, v8, v32);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
    uint64_t v22 = v31;
    uint64_t v23 = *(void (**)(char *, uint64_t))(v31 + 8);
    v23(v8, v21);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v11, v20, v21);
    *(void *)&v11[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48)] = 0;
    v23(v29, v21);
    return outlined init with take of SymmetricRatchet((uint64_t)v11, v30, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
  }
  return result;
}

NSObject *TetraIncomingSymmetricRatchet.openMessage(_:messageIndex:messageKeyIndicator:discardMessageKey:)(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, int a6)
{
  LODWORD(v49) = a6;
  uint64_t v43 = a4;
  unint64_t v44 = a5;
  uint64_t v41 = a1;
  uint64_t v48 = type metadata accessor for SymmetricKey();
  uint64_t v9 = *(void *)(v48 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v48);
  uint64_t v42 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v39 - v12;
  unint64_t v14 = *(void *)(v6
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48));
  uint64_t v45 = a3 - v14;
  LODWORD(v46) = a3 < v14;
  LOBYTE(v15) = static os_log_type_t.info.getter();
  uint64_t result = MessageProtectionLog();
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v15 = v15;
    BOOL v18 = os_log_type_enabled(result, (os_log_type_t)v15);
    uint64_t v47 = v9;
    unint64_t v40 = a2;
    if (v18)
    {
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 134218752;
      uint64_t v51 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 1024;
      LODWORD(v51) = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 18) = 2048;
      uint64_t v51 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 28) = 1024;
      LODWORD(v51) = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2163F2000, v17, (os_log_type_t)v15, "Tetra ratchet with current index %llu and incoming %u for delta of: %llu, and overflow %{BOOL}d ", (uint8_t *)v19, 0x22u);
      MEMORY[0x2166CDD30](v19, -1, -1);
    }

    unint64_t v20 = (unint64_t)v50;
    SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(a3, v49 & 1, (uint64_t)v13);
    if (v20) {
      return v15;
    }
    uint64_t v51 = 0xD00000000000001ALL;
    unint64_t v52 = 0x800000021649BF50;
    v21._object = (void *)0x800000021649CFA0;
    v21._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v21);
    uint64_t v22 = specialized Data.init<A>(_:)(v51, v52);
    unint64_t v24 = v23;
    uint64_t v51 = v22;
    unint64_t v52 = v23;
    type metadata accessor for SHA384();
    lazy protocol witness table accessor for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x263F04808]);
    lazy protocol witness table accessor for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v25 = (uint64_t)v13;
    uint64_t v26 = v42;
    uint64_t v27 = v48;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    outlined consume of Data._Representation(v22, v24);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    uint64_t v29 = v47 + 8;
    uint64_t v28 = *(void (**)(char *, uint64_t))(v47 + 8);
    v28(v26, v27);
    uint64_t v31 = v51;
    unint64_t v30 = v52;
    if (specialized static Data.== infix(_:_:)(v51, v52, v43, v44))
    {
      uint64_t v50 = (char *)v30;
      uint64_t v15 = specialized static TetraMessageEncoding.openMessage(_:messageKey:)(v41, v40, v25);
      v28((char *)v25, v48);
      outlined consume of Data._Representation(v31, (unint64_t)v50);
      return v15;
    }
    uint64_t v50 = (char *)v25;
    uint64_t v47 = v29;
    LOBYTE(v15) = static os_log_type_t.error.getter();
    uint64_t result = MessageProtectionLog();
    if (result)
    {
      uint64_t v32 = result;
      uint64_t v15 = v15;
      if (os_log_type_enabled(result, (os_log_type_t)v15))
      {
        outlined copy of Data._Representation(v31, v30);
        uint64_t v33 = v43;
        unint64_t v34 = v44;
        outlined copy of Data._Representation(v43, v44);
        outlined copy of Data._Representation(v31, v30);
        outlined copy of Data._Representation(v33, v34);
        uint64_t v35 = swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v51 = v46;
        *(_DWORD *)uint64_t v35 = 136315394;
        LODWORD(v45) = v15;
        Swift::String v36 = Data.base64EncodedString(options:)(0);
        uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36._countAndFlagsBits, (unint64_t)v36._object, &v51);
        int v49 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v31, v30);
        outlined consume of Data._Representation(v31, v30);
        *(_WORD *)(v35 + 12) = 2080;
        Swift::String v37 = Data.base64EncodedString(options:)(0);
        uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37._countAndFlagsBits, (unint64_t)v37._object, &v51);
        uint64_t v28 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v33, v34);
        outlined consume of Data._Representation(v33, v34);
        _os_log_impl(&dword_2163F2000, v32, (os_log_type_t)v45, "Mismatch in ratchet state, attempting to decrypt with message key with indicator: %s instead of %s.", (uint8_t *)v35, 0x16u);
        uint64_t v15 = v46;
        swift_arrayDestroy();
        MEMORY[0x2166CDD30](v15, -1, -1);
        MEMORY[0x2166CDD30](v35, -1, -1);
      }

      lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
      swift_allocError();
      *uint64_t v38 = 3;
      swift_willThrow();
      outlined consume of Data._Representation(v31, v30);
      v28(v50, v48);
      return v15;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TetraOutgoingSymmetricRatchet.sealMessage(_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v42 = a3;
  unint64_t v43 = a4;
  unint64_t v40 = a1;
  unint64_t v41 = a2;
  uint64_t v39 = a5;
  uint64_t v7 = type metadata accessor for SymmetricKey();
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  BOOL v18 = (char *)&v38 - v17;
  uint64_t v19 = v5 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  uint64_t v20 = type metadata accessor for SymmetricRatchet();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20) == 1)
  {
    __break(1u);
LABEL_12:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v21 = *(void *)(v19 + *(int *)(v13 + 48));
  if (v21 == -1)
  {
    lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
    swift_allocError();
    *unint64_t v24 = 0;
    return swift_willThrow();
  }
  uint64_t result = SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v21, 1, (uint64_t)v12);
  if (!v6)
  {
    unint64_t v23 = *(int *)(v13 + 48);
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v18, v12, v7);
    *(void *)&v18[v23] = v21;
    if (HIDWORD(v21))
    {
      lazy protocol witness table accessor for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors();
      swift_allocError();
      swift_willThrow();
      return outlined destroy of TetraSessionStates?((uint64_t)v18, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    }
    uint64_t v25 = specialized static TetraMessageEncoding.sealMessage(_:messageKey:)(v40, v41, v42, v43, (uint64_t)v18);
    uint64_t v42 = v26;
    unint64_t v43 = v25;
    unint64_t v44 = 0xD00000000000001ALL;
    unint64_t v45 = 0x800000021649BF50;
    v27._object = (void *)0x800000021649CFA0;
    unint64_t v41 = v23;
    v27._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v27);
    unint64_t v28 = specialized Data.init<A>(_:)(v44, v45);
    unint64_t v30 = v29;
    unint64_t v44 = v28;
    unint64_t v45 = v29;
    unint64_t v40 = type metadata accessor for SHA384();
    uint64_t v38 = lazy protocol witness table accessor for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, MEMORY[0x263F04808]);
    lazy protocol witness table accessor for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, MEMORY[0x263F04620]);
    lazy protocol witness table accessor for type Data and conformance Data();
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    outlined consume of Data._Representation(v28, v30);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    uint64_t v31 = v46;
    uint64_t v32 = *(void (**)(char *, uint64_t))(v46 + 8);
    v32(v10, v7);
    unint64_t v40 = v44;
    uint64_t v38 = v45;
    uint64_t v33 = *(int *)(v13 + 48);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v16, v18, v7);
    unint64_t v34 = *(void *)&v18[v41];
    *(void *)&v16[v33] = v34;
    if (!HIDWORD(v34))
    {
      outlined destroy of TetraSessionStates?((uint64_t)v18, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v16, v7);
      uint64_t v35 = v39;
      uint64_t v36 = v42;
      void *v39 = v43;
      v35[1] = v36;
      *((_DWORD *)v35 + 4) = v34;
      uint64_t v37 = v38;
      v35[3] = v40;
      v35[4] = v37;
      return result;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t TetraOutgoingSymmetricRatchet.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v55 = type metadata accessor for TetraOutgoingKeyContent(0);
  MEMORY[0x270FA5388](v55);
  uint64_t v54 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v51 = (unint64_t)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraOutgoingSymmetricRatchet.CodingKeys>);
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(int *)(v10 + 28);
  unint64_t v52 = v12;
  uint64_t v14 = (uint64_t)&v12[v13];
  uint64_t v15 = type metadata accessor for SymmetricRatchet();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v18 = v16 + 56;
  v17(v14, 1, 1, v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys();
  uint64_t v19 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    goto LABEL_2;
  }
  v45[1] = v18;
  uint64_t v46 = v17;
  uint64_t v47 = v15;
  int v49 = a1;
  uint64_t v50 = v14;
  uint64_t v21 = v57;
  uint64_t v22 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v58 = 0;
  if (v23)
  {
    uint64_t v48 = v8;
    swift_bridgeObjectRetain();
    uint64_t v24 = 0;
    while ((*(unsigned char *)(v22 + v24 + 32) & 1) != 0)
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v25) {
        goto LABEL_11;
      }
      if (v23 == ++v24)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v27 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v60 = 0;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v29 = v57;
    uint64_t v28 = v58;
    unint64_t v30 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v28)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v29);
LABEL_17:
      a1 = v49;
      uint64_t v14 = v50;
      goto LABEL_2;
    }
    uint64_t v58 = 0;
    uint64_t v31 = v59[0];
    unint64_t v32 = v59[1];
    if (one-time initialization token for tetraSymmetricKeyRatchetStep != -1) {
      swift_once();
    }
    uint64_t v33 = tetraSymmetricKeyRatchetStep;
    unint64_t v34 = *(void *)algn_26AC052F8;
    uint64_t v35 = qword_26AC05300;
    unint64_t v36 = unk_26AC05308;
    uint64_t v37 = qword_26AC05310;
    char v38 = byte_26AC05318;
    v59[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA384>);
    v59[4] = &protocol witness table for HKDFRatchet<A>;
    uint64_t v39 = swift_allocObject();
    v59[0] = v39;
    *(void *)(v39 + 16) = v33;
    *(void *)(v39 + 24) = v34;
    *(void *)(v39 + 32) = v35;
    *(void *)(v39 + 40) = v36;
    *(void *)(v39 + 48) = v37;
    *(unsigned char *)(v39 + 56) = v38;
    outlined copy of Data._Representation(v33, v34);
    outlined copy of Data._Representation(v35, v36);
    uint64_t v40 = v51;
    uint64_t v41 = v58;
    SymmetricRatchet.init(data:step:)(v31, v32, (uint64_t)v59, v51);
    if (v41)
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v57);
      goto LABEL_17;
    }
    uint64_t v58 = 0;
    v46(v40, 0, 1, v47);
    outlined assign with take of SymmetricRatchet?(v40, v50);
LABEL_19:
    uint64_t v26 = v56;
    uint64_t v21 = v57;
    uint64_t v8 = v48;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = v56;
  }
  LOBYTE(v59[0]) = 1;
  lazy protocol witness table accessor for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent(&lazy protocol witness table cache variable for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent, (void (*)(uint64_t))type metadata accessor for TetraOutgoingKeyContent);
  uint64_t v42 = (uint64_t)v54;
  uint64_t v43 = v58;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v21);
  a1 = v49;
  uint64_t v14 = v50;
  if (v43)
  {
LABEL_2:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined destroy of TetraSessionStates?(v14, &demangling cache variable for type metadata for SymmetricRatchet?);
  }
  uint64_t v44 = (uint64_t)v52;
  outlined init with take of SymmetricRatchet(v42, (uint64_t)v52, type metadata accessor for TetraOutgoingKeyContent);
  outlined init with copy of TetraOutgoingSymmetricRatchet(v44, v53);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2(v44, type metadata accessor for TetraOutgoingSymmetricRatchet);
}

uint64_t TetraOutgoingSymmetricRatchet.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SymmetricRatchet();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraOutgoingSymmetricRatchet.CodingKeys>);
  uint64_t v20 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys();
  uint64_t v12 = v19[1];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  outlined init with copy of TetraSessionStates?(v12 + *(int *)(v13 + 20), (uint64_t)v4, &demangling cache variable for type metadata for SymmetricRatchet?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v4, &demangling cache variable for type metadata for SymmetricRatchet?);
LABEL_4:
    LOBYTE(v21) = 1;
    type metadata accessor for TetraOutgoingKeyContent(0);
    lazy protocol witness table accessor for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent(&lazy protocol witness table cache variable for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent, (void (*)(uint64_t))type metadata accessor for TetraOutgoingKeyContent);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v9);
  }
  outlined init with take of SymmetricRatchet((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
  uint64_t v14 = SymmetricRatchet.serializedData()();
  unint64_t v16 = v15;
  uint64_t v21 = v14;
  unint64_t v22 = v15;
  char v23 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v17 = v19[2];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation(v14, v16);
  _s9CryptoKit13SecureEnclaveO17MessageProtectionE8Kyber768O10PrivateKeyVWOhTm_2((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
  if (!v17) {
    goto LABEL_4;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v9);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TetraOutgoingSymmetricRatchet.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x506465646F636E65;
  if (*v1) {
    unint64_t v2 = 0xD000000000000012;
  }
  unint64_t v3 = 0x800000021649B1E0;
  if (!*v1) {
    unint64_t v3 = 0xEF6675626F746F72;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x506465646F636E65;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TetraOutgoingSymmetricRatchet.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraOutgoingSymmetricRatchet@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraOutgoingSymmetricRatchet.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraOutgoingSymmetricRatchet(void *a1)
{
  return TetraOutgoingSymmetricRatchet.encode(to:)(a1);
}

uint64_t TetraIncomingSymmetricRatchet.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraIncomingSymmetricRatchet.CodingKeys>);
  uint64_t v34 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for TetraIncomingSymmetricRatchet(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    unint64_t v30 = v12;
    uint64_t v31 = v6;
    uint64_t v13 = v34;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v14 = v7;
    unint64_t v28 = v33[1];
    uint64_t v29 = v33[0];
    uint64_t v15 = v13;
    if (one-time initialization token for tetraSymmetricKeyRatchetStep != -1) {
      swift_once();
    }
    uint64_t v17 = tetraSymmetricKeyRatchetStep;
    unint64_t v16 = *(void *)algn_26AC052F8;
    uint64_t v19 = qword_26AC05300;
    unint64_t v18 = unk_26AC05308;
    uint64_t v27 = qword_26AC05310;
    int v26 = byte_26AC05318;
    void v33[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA384>);
    v33[4] = &protocol witness table for HKDFRatchet<A>;
    uint64_t v20 = swift_allocObject();
    v33[0] = v20;
    *(void *)(v20 + 16) = v17;
    *(void *)(v20 + 24) = v16;
    *(void *)(v20 + 32) = v19;
    *(void *)(v20 + 40) = v18;
    *(void *)(v20 + 48) = v27;
    *(unsigned char *)(v20 + 56) = v26;
    outlined copy of Data._Representation(v17, v16);
    outlined copy of Data._Representation(v19, v18);
    uint64_t v21 = (uint64_t)v31;
    SymmetricRatchet.init(data:step:)(v29, v28, (uint64_t)v33, (unint64_t)v31);
    (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v9, v14);
    uint64_t v22 = v32;
    uint64_t v23 = (uint64_t)v30;
    outlined init with take of SymmetricRatchet(v21, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for SymmetricRatchet);
    outlined init with take of SymmetricRatchet(v23, v22, type metadata accessor for TetraIncomingSymmetricRatchet);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t TetraIncomingSymmetricRatchet.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraIncomingSymmetricRatchet.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v6 = SymmetricRatchet.serializedData()();
  unint64_t v8 = v7;
  v10[0] = v6;
  v10[1] = v7;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation(v6, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TetraIncomingSymmetricRatchet.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance TetraIncomingSymmetricRatchet.CodingKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys(void *a1@<X8>)
{
  *a1 = 0x506465646F636E65;
  a1[1] = 0xEF6675626F746F72;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  return 0x506465646F636E65;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraIncomingSymmetricRatchet.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance TetraIncomingSymmetricRatchet.CodingKeys, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraIncomingSymmetricRatchet@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraIncomingSymmetricRatchet.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraIncomingSymmetricRatchet(void *a1)
{
  return TetraIncomingSymmetricRatchet.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of TetraOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21648D1AC()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t outlined assign with take of SymmetricRatchet?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TetraIncomingSymmetricRatchet.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x21648D3E0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraIncomingSymmetricRatchet.CodingKeys()
{
  return &type metadata for TetraIncomingSymmetricRatchet.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for TetraOutgoingSymmetricRatchet.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21648D4E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraOutgoingSymmetricRatchet.CodingKeys()
{
  return &type metadata for TetraOutgoingSymmetricRatchet.CodingKeys;
}

id TetraSessionSerialized.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id TetraSessionSerialized.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for TetraSessionSerialized();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for TetraSessionSerialized()
{
  return self;
}

id TetraSessionSerialized.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraSessionSerialized();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static TetraSessionSerialized.fetchRequest()()
{
  id v0 = objc_allocWithZone(MEMORY[0x263EFF260]);
  uint64_t v1 = (void *)MEMORY[0x2166CC8B0](0xD000000000000016, 0x800000021649BA50);
  id v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in TetraSessionSerialized()
{
  return MEMORY[0x263F8D1F8];
}

uint64_t protocol witness for Identifiable.id.getter in conformance TetraSessionSerialized@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for TetraSessionSerialized();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

void MPLogAndAssignCFError_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2163F2000, v0, v1, "%@. The error was not assigned to a CFError.", v2, v3, v4, v5, v6);
}

void MPLogAndAssignCFError_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2163F2000, v0, v1, "%@", v2, v3, v4, v5, v6);
}

void MPLogAndAssignError_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2163F2000, v0, v1, "%@. The error was not assigned to an NSError.", v2, v3, v4, v5, v6);
}

void nextMultiple_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_2163F2000, log, OS_LOG_TYPE_ERROR, "Message Encryption: nextPowerOfTwo invalid input %llx, %llx", (uint8_t *)&v3, 0x16u);
}

void SecMPPublicIdentityCreateFromBytes_cold_1(void *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v3 = [a1 description];
  int v4 = 138412290;
  __int16 v5 = v3;
  _os_log_error_impl(&dword_2163F2000, a2, OS_LOG_TYPE_ERROR, "Failed to create legacy public key from bytes: %@", (uint8_t *)&v4, 0xCu);
}

void SecMPPIAppendPKIEncryptedData_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_2163F2000, log, OS_LOG_TYPE_ERROR, "Failed to encrypt data to legacy public key.", v1, 2u);
}

void SecMPFullIdentityCreateFromData_cold_1(void *a1)
{
  uint64_t v1 = [a1 description];
  OUTLINED_FUNCTION_0(&dword_2163F2000, v2, v3, "Failed to initialize legacy key: %@", v4, v5, v6, v7, 2u);
}

void SecMPFIAppendSignature_cold_1(void *a1)
{
  uint64_t v1 = [a1 description];
  OUTLINED_FUNCTION_0(&dword_2163F2000, v2, v3, "Failed to perform legacy signature: %@", v4, v5, v6, v7, 2u);
}

void SecMPFullIdentityCreateFromRefs_cold_1()
{
}

void SecMPFullIdentityCreateFromRefs_cold_2()
{
}

void SecMPFullIdentityCreateFromRefs_cold_3()
{
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x270EEE618]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x270EEE628]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x270EEE648]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t __DataStorage.init(capacity:)()
{
  return MEMORY[0x270EEE680]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x270EEE688]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x270EEEA60]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEF238]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x270EEF250]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x270EEF268]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEF288]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x270EEF2A8]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x270EEF2B8]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x270EEF830]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return MEMORY[0x270EEFA08]();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return MEMORY[0x270EEFA18]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x270EEFCB0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
}

uint64_t Data.description.getter()
{
  return MEMORY[0x270EF0020]();
}

uint64_t Data._copyContents(initializing:)()
{
  return MEMORY[0x270EF0048]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x270EF0070]();
}

uint64_t Data._Representation.resetBytes(in:)()
{
  return MEMORY[0x270EF0078]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x270EF0090]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x270EF00B0]();
}

uint64_t Data._Representation.subscript.getter()
{
  return MEMORY[0x270EF00D0]();
}

uint64_t Data._Representation.subscript.setter()
{
  return MEMORY[0x270EF00E8]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = MEMORY[0x270EF0130](options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

uint64_t Data.hash(into:)()
{
  return MEMORY[0x270EF0190]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x270EF01E0]();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return MEMORY[0x270EF0238]();
}

uint64_t Data.advanced(by:)()
{
  return MEMORY[0x270EF0250]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x270EF0998]();
}

uint64_t Date.init()()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x270F28690]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x270FA06B8]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x270FA06C8]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x270FA06D8]();
}

uint64_t static Padme.paddedMessageByteCount(_:)()
{
  return MEMORY[0x270F24E18]();
}

uint64_t static Internal.areAllInitialized(_:)()
{
  return MEMORY[0x270F449C0]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x270F44A18]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x270F44A20]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x270F44A28]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x270F44AA8]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x270F44AB0]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x270F44B10]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x270F44B48]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x270F44B78]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return MEMORY[0x270F44C00]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return MEMORY[0x270F44C10]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x270F44C20]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x270F44C38]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x270F44CA0]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x270F44CA8]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44D68]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x270F44D88]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x270F44DE0]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x270F44DE8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44DF0]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44E00]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x270F44E10]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F44E18]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x270F44E28]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x270FA2C78]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t type metadata accessor for CryptoKitError()
{
  return MEMORY[0x270EEA9E8]();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return MEMORY[0x270EEAA78]();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return MEMORY[0x270EEAA80]();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return MEMORY[0x270EEAA98]();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return MEMORY[0x270EEAAA8]();
}

uint64_t type metadata accessor for SHA384Digest()
{
  return MEMORY[0x270EEAAB8]();
}

uint64_t SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)()
{
  return MEMORY[0x270EEAAD8]();
}

uint64_t SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)()
{
  return MEMORY[0x270EEAAE0]();
}

uint64_t type metadata accessor for SharedSecret()
{
  return MEMORY[0x270EEAAE8]();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x270EEAAF0]();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return MEMORY[0x270EEAB00]();
}

uint64_t SymmetricKey.init(size:)()
{
  return MEMORY[0x270EEAB10]();
}

uint64_t SymmetricKey.bitCount.getter()
{
  return MEMORY[0x270EEAB20]();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return MEMORY[0x270EEAB30]();
}

uint64_t static SecureEnclave.isAvailable.getter()
{
  return MEMORY[0x270EEAB60]();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)()
{
  return MEMORY[0x270EEAB68]();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.publicKey.getter()
{
  return MEMORY[0x270EEAB70]();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)()
{
  return MEMORY[0x270EEAB80]();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)()
{
  return MEMORY[0x270EEAB88]();
}

uint64_t type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey()
{
  return MEMORY[0x270EEAB98]();
}

uint64_t static SymmetricKeySize.bits256.getter()
{
  return MEMORY[0x270EEABF0]();
}

uint64_t type metadata accessor for SymmetricKeySize()
{
  return MEMORY[0x270EEAC08]();
}

uint64_t static AES.GCM.open<A>(_:using:authenticating:)()
{
  return MEMORY[0x270EEAC50]();
}

uint64_t static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)()
{
  return MEMORY[0x270EEAC58]();
}

uint64_t AES.GCM.Nonce.init<A>(data:)()
{
  return MEMORY[0x270EEAC70]();
}

uint64_t type metadata accessor for AES.GCM.Nonce()
{
  return MEMORY[0x270EEAC88]();
}

uint64_t AES.GCM.SealedBox.ciphertext.getter()
{
  return MEMORY[0x270EEAC98]();
}

uint64_t AES.GCM.SealedBox.tag.getter()
{
  return MEMORY[0x270EEACA0]();
}

uint64_t AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)()
{
  return MEMORY[0x270EEACA8]();
}

uint64_t AES.GCM.SealedBox.combined.getter()
{
  return MEMORY[0x270EEACB8]();
}

uint64_t AES.GCM.SealedBox.init(combined:)()
{
  return MEMORY[0x270EEACC8]();
}

uint64_t type metadata accessor for AES.GCM.SealedBox()
{
  return MEMORY[0x270EEACD8]();
}

uint64_t static AES.KeyWrap.wrap(_:using:)()
{
  return MEMORY[0x270EEACF0]();
}

uint64_t static AES.KeyWrap.unwrap<A>(_:using:)()
{
  return MEMORY[0x270EEACF8]();
}

uint64_t KEM.EncapsulationResult.encapsulated.getter()
{
  return MEMORY[0x270EEAD08]();
}

uint64_t KEM.EncapsulationResult.sharedSecret.getter()
{
  return MEMORY[0x270EEAD10]();
}

uint64_t type metadata accessor for KEM.EncapsulationResult()
{
  return MEMORY[0x270EEAD18]();
}

uint64_t static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)()
{
  return MEMORY[0x270EEAD20]();
}

uint64_t static HKDF.extract<A>(inputKeyMaterial:salt:)()
{
  return MEMORY[0x270EEAD28]();
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)()
{
  return MEMORY[0x270EEAD38]();
}

uint64_t HPKE.Ciphersuite.init(kem:kdf:aead:)()
{
  return MEMORY[0x270EEAD98]();
}

uint64_t type metadata accessor for HPKE.Ciphersuite()
{
  return MEMORY[0x270EEADA0]();
}

uint64_t type metadata accessor for HPKE.KDF()
{
  return MEMORY[0x270EEADB0]();
}

uint64_t type metadata accessor for HPKE.KEM()
{
  return MEMORY[0x270EEADB8]();
}

uint64_t type metadata accessor for HPKE.AEAD()
{
  return MEMORY[0x270EEADC0]();
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)()
{
  return MEMORY[0x270EEADE0]();
}

uint64_t HPKE.Sender.encapsulatedKey.getter()
{
  return MEMORY[0x270EEADF8]();
}

uint64_t HPKE.Sender.seal<A, B>(_:authenticating:)()
{
  return MEMORY[0x270EEAE00]();
}

uint64_t type metadata accessor for HPKE.Sender()
{
  return MEMORY[0x270EEAE20]();
}

uint64_t HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)()
{
  return MEMORY[0x270EEAE48]();
}

uint64_t HPKE.Recipient.open<A, B>(_:authenticating:)()
{
  return MEMORY[0x270EEAE50]();
}

uint64_t type metadata accessor for HPKE.Recipient()
{
  return MEMORY[0x270EEAE68]();
}

uint64_t P256.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  return MEMORY[0x270EEAE90]();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)()
{
  return MEMORY[0x270EEAE98]();
}

uint64_t P256.KeyAgreement.PublicKey.x963Representation.getter()
{
  return MEMORY[0x270EEAEA0]();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(x963Representation:)()
{
  return MEMORY[0x270EEAEB0]();
}

uint64_t P256.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  return MEMORY[0x270EEAEB8]();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)()
{
  return MEMORY[0x270EEAEC0]();
}

uint64_t P256.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  return MEMORY[0x270EEAEC8]();
}

uint64_t type metadata accessor for P256.KeyAgreement.PublicKey()
{
  return MEMORY[0x270EEAED8]();
}

uint64_t P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)()
{
  return MEMORY[0x270EEAEF0]();
}

uint64_t P256.KeyAgreement.PrivateKey.publicKey.getter()
{
  return MEMORY[0x270EEAEF8]();
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)()
{
  return MEMORY[0x270EEAF30]();
}

uint64_t P256.KeyAgreement.PrivateKey.init(compactRepresentable:)()
{
  return MEMORY[0x270EEAF40]();
}

uint64_t type metadata accessor for P256.KeyAgreement.PrivateKey()
{
  return MEMORY[0x270EEAF50]();
}

uint64_t P256.Signing.PrivateKey.publicKey.getter()
{
  return MEMORY[0x270EEAF60]();
}

uint64_t P256.Signing.PrivateKey.rawRepresentation.getter()
{
  return MEMORY[0x270EEAF68]();
}

uint64_t P256.Signing.PrivateKey.init<A>(rawRepresentation:)()
{
  return MEMORY[0x270EEAF70]();
}

uint64_t P256.Signing.PrivateKey.x963Representation.getter()
{
  return MEMORY[0x270EEAF78]();
}

uint64_t P256.Signing.PrivateKey.init<A>(x963Representation:)()
{
  return MEMORY[0x270EEAF80]();
}

uint64_t P256.Signing.PrivateKey.init(compactRepresentable:)()
{
  return MEMORY[0x270EEAF88]();
}

uint64_t P256.Signing.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)()
{
  return MEMORY[0x270EEAF90]();
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)()
{
  return MEMORY[0x270EEAF98]();
}

uint64_t type metadata accessor for P256.Signing.PrivateKey()
{
  return MEMORY[0x270EEAFA8]();
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.getter()
{
  return MEMORY[0x270EEAFC0]();
}

uint64_t P256.Signing.ECDSASignature.init<A>(rawRepresentation:)()
{
  return MEMORY[0x270EEAFC8]();
}

uint64_t type metadata accessor for P256.Signing.ECDSASignature()
{
  return MEMORY[0x270EEAFD0]();
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)()
{
  return MEMORY[0x270EEAFD8]();
}

uint64_t P256.Signing.PublicKey.rawRepresentation.getter()
{
  return MEMORY[0x270EEAFE0]();
}

uint64_t P256.Signing.PublicKey.init<A>(rawRepresentation:)()
{
  return MEMORY[0x270EEAFE8]();
}

uint64_t P256.Signing.PublicKey.x963Representation.getter()
{
  return MEMORY[0x270EEAFF0]();
}

uint64_t P256.Signing.PublicKey.init<A>(x963Representation:)()
{
  return MEMORY[0x270EEAFF8]();
}

uint64_t P256.Signing.PublicKey.compactRepresentation.getter()
{
  return MEMORY[0x270EEB000]();
}

uint64_t P256.Signing.PublicKey.init<A>(compactRepresentation:)()
{
  return MEMORY[0x270EEB008]();
}

uint64_t P256.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)()
{
  return MEMORY[0x270EEB010]();
}

uint64_t type metadata accessor for P256.Signing.PublicKey()
{
  return MEMORY[0x270EEB028]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x270EEB090]();
}

uint64_t type metadata accessor for SHA384()
{
  return MEMORY[0x270EEB0A8]();
}

uint64_t Kyber768.PrivateKey.publicKey.getter()
{
  return MEMORY[0x270EEB0F8]();
}

uint64_t Kyber768.PrivateKey.decapsulate(_:)()
{
  return MEMORY[0x270EEB100]();
}

uint64_t Kyber768.PrivateKey.init<A>(bytes:)()
{
  return MEMORY[0x270EEB108]();
}

uint64_t static Kyber768.PrivateKey.generate()()
{
  return MEMORY[0x270EEB110]();
}

uint64_t type metadata accessor for Kyber768.PrivateKey()
{
  return MEMORY[0x270EEB118]();
}

uint64_t Kyber768.PublicKey.encapsulate()()
{
  return MEMORY[0x270EEB120]();
}

uint64_t Kyber768.PublicKey.dataRepresentation.getter()
{
  return MEMORY[0x270EEB128]();
}

uint64_t Kyber768.PublicKey.init<A>(dataRepresentation:)()
{
  return MEMORY[0x270EEB130]();
}

uint64_t type metadata accessor for Kyber768.PublicKey()
{
  return MEMORY[0x270EEB138]();
}

uint64_t Kyber1024.PrivateKey.publicKey.getter()
{
  return MEMORY[0x270EEB140]();
}

uint64_t Kyber1024.PrivateKey.decapsulate(_:)()
{
  return MEMORY[0x270EEB148]();
}

uint64_t Kyber1024.PrivateKey.dataRepresentation.getter()
{
  return MEMORY[0x270EEB150]();
}

uint64_t Kyber1024.PrivateKey.init<A>(bytes:)()
{
  return MEMORY[0x270EEB158]();
}

uint64_t static Kyber1024.PrivateKey.generate()()
{
  return MEMORY[0x270EEB160]();
}

uint64_t type metadata accessor for Kyber1024.PrivateKey()
{
  return MEMORY[0x270EEB168]();
}

uint64_t Kyber1024.PublicKey.encapsulate()()
{
  return MEMORY[0x270EEB170]();
}

uint64_t Kyber1024.PublicKey.dataRepresentation.getter()
{
  return MEMORY[0x270EEB178]();
}

uint64_t Kyber1024.PublicKey.init<A>(dataRepresentation:)()
{
  return MEMORY[0x270EEB180]();
}

uint64_t type metadata accessor for Kyber1024.PublicKey()
{
  return MEMORY[0x270EEB188]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1830]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x270F9D320]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9D788]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x270F9D800]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x270F9D810]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x270F9D860]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D880](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t NSPredicate.init(format:_:)()
{
  return MEMORY[0x270EF1DB8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x270FA2E70]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x270FA0F28]();
}

uint64_t NSManagedObjectContext.performAndWait<A>(_:)()
{
  return MEMORY[0x270EE4218]();
}

uint64_t NSManagedObjectContext.fetch<A>(_:)()
{
  return MEMORY[0x270EE4238]();
}

uint64_t NSData.startIndex.getter()
{
  return MEMORY[0x270EF2090]();
}

uint64_t NSData.endIndex.getter()
{
  return MEMORY[0x270EF20A0]();
}

uint64_t NSData.subscript.getter()
{
  return MEMORY[0x270EF20A8]();
}

uint64_t NSArray.makeIterator()()
{
  return MEMORY[0x270EF20D8]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270FA1170](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x270FA2ED0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x270F9E518]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x270F9E7F8]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270F9E8C0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x270F9E8E8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t Identifiable<>.id.getter()
{
  return MEMORY[0x270F9E9D8]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return MEMORY[0x270F9EFB0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F278]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2F0]();
}

{
  return MEMORY[0x270F9F350]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x270F9F360]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3B8]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F430]();
}

{
  return MEMORY[0x270F9F490]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9FA88]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x270EF2680]();
}

uint64_t Slice<>.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x270EF2710]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x270F9FC30]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7AF0](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7B28](data, *(void *)&len, md);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x270EE4788](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x270EE4830](theData);
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x270EE4910](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x270EE49A0](err);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x270EE49B8](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x270EE49C8](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x270EE49D0](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x270EE49D8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x270EE4DC0](stream, buffer, bufferLength);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B8](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x270EE5590](stream, buffer, bufferLength);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2AD0]();
}

void NSLog(NSString *format, ...)
{
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x270F58540]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x270F58548]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x270F58560]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x270F58590]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x270F585A0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x270F585B0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x270F585D8]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x270F585E0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x270F585E8]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x270F585F8]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x270F58600]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x270EFD650](allocator, protection, flags, error);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x270EFD978](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x270EFD980](query);
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x270EFD998](key);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EFD9B0](key, error);
}

CFDataRef SecKeyCopyKeyExchangeResult(SecKeyRef privateKey, SecKeyAlgorithm algorithm, SecKeyRef publicKey, CFDictionaryRef parameters, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EFD9B8](privateKey, algorithm, publicKey, parameters, error);
}

uint64_t SecKeyCopyPublicBytes()
{
  return MEMORY[0x270EFD9C8]();
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x270EFD9D8](key);
}

CFDataRef SecKeyCreateDecryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef ciphertext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EFD9F8](key, algorithm, ciphertext, error);
}

CFDataRef SecKeyCreateEncryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef plaintext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EFDA10](key, algorithm, plaintext, error);
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x270EFDA40](parameters, error);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EFDA50](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x270EFDA60](keyData, attributes, error);
}

uint64_t SecKeyGetSize()
{
  return MEMORY[0x270EFDA98]();
}

CFTypeID SecKeyGetTypeID(void)
{
  return MEMORY[0x270EFDAA0]();
}

Boolean SecKeyIsAlgorithmSupported(SecKeyRef key, SecKeyOperationType operation, SecKeyAlgorithm algorithm)
{
  return MEMORY[0x270EFDAA8](key, operation, algorithm);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x270EFDAC8](key, algorithm, signedData, signature, error);
}

uint64_t SecOTRFullIdentityCreateFromSecKeyRef()
{
  return MEMORY[0x270EFDAD0]();
}

uint64_t SecOTRPublicIdentityCreateFromSecKeyRef()
{
  return MEMORY[0x270EFDAD8]();
}

uint64_t SecOTRSessionCreateFromIDAndFlags()
{
  return MEMORY[0x270EFDAE0]();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x270EFDC20](rnd, count, bytes);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x270EE56F0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x270EE5700]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

uint64_t __memset_chk()
{
  return MEMORY[0x270ED7E48]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_clear()
{
  return MEMORY[0x270ED87D0]();
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x270ED87D8]();
}

uint64_t ccaes_ctr_crypt_mode()
{
  return MEMORY[0x270ED87F0]();
}

uint64_t ccaes_siv_decrypt_mode()
{
  return MEMORY[0x270ED8810]();
}

uint64_t ccaes_siv_encrypt_mode()
{
  return MEMORY[0x270ED8818]();
}

uint64_t ccctr_one_shot()
{
  return MEMORY[0x270ED8858]();
}

uint64_t ccder_decode_sequence_tl()
{
  return MEMORY[0x270ED8920]();
}

uint64_t ccder_decode_tl()
{
  return MEMORY[0x270ED8930]();
}

uint64_t ccder_encode_constructed_tl()
{
  return MEMORY[0x270ED8950]();
}

uint64_t ccder_encode_implicit_raw_octet_string()
{
  return MEMORY[0x270ED8958]();
}

uint64_t ccder_encode_integer()
{
  return MEMORY[0x270ED8960]();
}

uint64_t ccder_sizeof()
{
  return MEMORY[0x270ED8980]();
}

uint64_t ccder_sizeof_implicit_raw_octet_string()
{
  return MEMORY[0x270ED8988]();
}

uint64_t ccec_compact_export_pub()
{
  return MEMORY[0x270ED8A58]();
}

uint64_t ccec_compact_generate_key()
{
  return MEMORY[0x270ED8A60]();
}

uint64_t ccec_compact_import_pub()
{
  return MEMORY[0x270ED8A68]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x270ED8A98]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x270ED8AB8]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x270ED8AD8]();
}

uint64_t ccec_validate_pub()
{
  return MEMORY[0x270ED8AF8]();
}

uint64_t ccec_x963_import_pub()
{
  return MEMORY[0x270ED8B20]();
}

uint64_t ccecdh_compute_shared_secret()
{
  return MEMORY[0x270ED8B38]();
}

uint64_t cchmac_final()
{
  return MEMORY[0x270ED8BC8]();
}

uint64_t cchmac_init()
{
  return MEMORY[0x270ED8BD0]();
}

uint64_t cchmac_update()
{
  return MEMORY[0x270ED8BD8]();
}

uint64_t ccn_cmp()
{
  return MEMORY[0x270ED8C38]();
}

uint64_t ccn_read_uint()
{
  return MEMORY[0x270ED8C40]();
}

uint64_t ccn_sub()
{
  return MEMORY[0x270ED8C48]();
}

uint64_t ccrng()
{
  return MEMORY[0x270ED8C90]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x270ED8D70]();
}

uint64_t ccsiv_one_shot()
{
  return MEMORY[0x270ED8D90]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x270ED8E70]();
}

uint64_t cczp_prime()
{
  return MEMORY[0x270ED8E78]();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

void free(void *a1)
{
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x270EDA4B8](__s, __smax, *(void *)&__c, __n);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

void syslog(int a1, const char *a2, ...)
{
}