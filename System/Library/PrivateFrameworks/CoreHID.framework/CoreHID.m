BOOL static HIDElementCollection.CollectionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HIDElementCollection.CollectionType.hash(into:)()
{
  return sub_24B534E70();
}

uint64_t HIDElementCollection.CollectionType.hashValue.getter()
{
  return sub_24B534EB0();
}

BOOL sub_24B4DE95C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s7CoreHID13HIDReportTypeO9hashValueSivg_0()
{
  return sub_24B534EB0();
}

uint64_t sub_24B4DE9B8()
{
  return sub_24B534E70();
}

uint64_t sub_24B4DE9E4()
{
  return sub_24B534EB0();
}

uint64_t sub_24B4DEA28@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result >= 7) {
    char v2 = 1;
  }
  else {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_24B4DEA38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_unownedRetainStrong();
  *a1 = result;
  return result;
}

uint64_t sub_24B4DEA64(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_unownedRetain();
  uint64_t result = swift_unownedRelease();
  *a2 = v3;
  return result;
}

uint64_t HIDElementCollection.client.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t HIDElementCollection.client.setter(uint64_t a1)
{
  swift_unownedRetain();
  swift_unownedRelease();
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*HIDElementCollection.client.modify(uint64_t *a1))()
{
  a1[1] = v1;
  *a1 = swift_unownedRetainStrong();
  return sub_24B4DEB40;
}

void HIDElementCollection.parentCollection.getter(void *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  v4 = IOHIDElementGetParent(*(IOHIDElementRef *)(v1 + 16));
  if (v4)
  {
    v5 = v4;
    swift_unownedRetainStrong();
    sub_24B4DEBC4(v5, v3, a1);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_24B4DEBC4(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (IOHIDElementGetType((IOHIDElementRef)a1) == kIOHIDElementTypeCollection)
  {
    v16 = a1;
    type metadata accessor for IOHIDElement();
    uint64_t v7 = v6;
    id v8 = a1;
    sub_24B51B908((uint64_t)&v16, v7, (uint64_t)&v17);
    v9 = (__IOHIDElement *)v17;
    swift_unownedRetain();
    IOHIDElementCollectionType CollectionType = IOHIDElementGetCollectionType(v9);
    if (CollectionType >= (kIOHIDElementCollectionTypeUsageModifier|kIOHIDElementCollectionTypeApplication)) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = CollectionType;
    }
    uint64_t UsagePage = IOHIDElementGetUsagePage(v9);
    if (WORD1(UsagePage))
    {
      __break(1u);
    }
    else
    {
      uint64_t v13 = UsagePage;
      uint32_t Usage = IOHIDElementGetUsage(v9);

      if (!HIWORD(Usage))
      {
        HIDUsage.init(page:usage:)(Usage, v13, (uint64_t)&v17);
        swift_release();

        unint64_t v15 = ((unint64_t)v17 << 16) | ((unint64_t)BYTE4(v17) << 48) | v11;
        *a3 = a2;
        a3[1] = v15;
        a3[2] = v9;
        return;
      }
    }
    __break(1u);
  }
  else
  {
    swift_release();

    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void HIDElementCollection.childCollections.getter()
{
  uint64_t v1 = *v0;
  CFArrayRef v2 = IOHIDElementGetChildren((IOHIDElementRef)v0[2]);
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if ((Count & 0x8000000000000000) == 0)
    {
      CFIndex v5 = Count;
      if (!Count)
      {

        return;
      }
      CFIndex v6 = 0;
      uint64_t v7 = (char *)MEMORY[0x263F8EE78];
      CFIndex v25 = Count;
      CFArrayRef v26 = v3;
      while (v5 != v6)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v6);
        if (!ValueAtIndex) {
          goto LABEL_27;
        }
        id v9 = ValueAtIndex;
        swift_unownedRetainStrong();
        v10 = (__IOHIDElement *)v9;
        if (IOHIDElementGetType(v10) == kIOHIDElementTypeCollection)
        {
          v27 = v10;
          type metadata accessor for IOHIDElement();
          uint64_t v12 = v11;
          uint64_t v13 = v10;
          sub_24B51B908((uint64_t)&v27, v12, (uint64_t)&v28);
          v14 = (__IOHIDElement *)v28;
          swift_unownedRetain();
          IOHIDElementCollectionType CollectionType = IOHIDElementGetCollectionType(v14);
          if (CollectionType >= (kIOHIDElementCollectionTypeUsageModifier|kIOHIDElementCollectionTypeApplication)) {
            char v16 = 1;
          }
          else {
            char v16 = CollectionType;
          }
          uint64_t UsagePage = IOHIDElementGetUsagePage(v14);
          if (WORD1(UsagePage)) {
            goto LABEL_24;
          }
          uint64_t v18 = UsagePage;
          uint32_t Usage = IOHIDElementGetUsage(v14);

          if (HIWORD(Usage)) {
            goto LABEL_25;
          }
          HIDUsage.init(page:usage:)(Usage, v18, (uint64_t)&v28);
          swift_release();

          uint64_t v20 = BYTE4(v28);
          uint64_t v21 = v28;
          swift_unownedRetain();
          v10 = v14;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v7 = sub_24B4E479C(0, *((void *)v7 + 2) + 1, 1, v7);
          }
          unint64_t v23 = *((void *)v7 + 2);
          unint64_t v22 = *((void *)v7 + 3);
          if (v23 >= v22 >> 1) {
            uint64_t v7 = sub_24B4E479C((char *)(v22 > 1), v23 + 1, 1, v7);
          }
          *((void *)v7 + 2) = v23 + 1;
          v24 = &v7[24 * v23];
          *((void *)v24 + 4) = v1;
          v24[40] = v16;
          v24[46] = (v21 | (unint64_t)(v20 << 32)) >> 32;
          *(_DWORD *)(v24 + 42) = v21;
          *((void *)v24 + 6) = v10;

          swift_unownedRelease();
          CFIndex v5 = v25;
          CFArrayRef v3 = v26;
        }
        else
        {
          swift_release();
        }
        ++v6;

        if (v5 == v6)
        {

          return;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

CFIndex HIDElementCollection.childElements.getter()
{
  uint64_t v1 = *(void *)v0;
  CFArrayRef v2 = IOHIDElementGetChildren(*(IOHIDElementRef *)(v0 + 16));
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex result = CFArrayGetCount(v2);
    if (result < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
      return result;
    }
    CFIndex v5 = result;
    if (result)
    {
      CFIndex result = (CFIndex)CFArrayGetValueAtIndex(v3, 0);
      if (result)
      {
        CFIndex v6 = (char *)MEMORY[0x263F8EE78];
        CFIndex v7 = 1;
        while (1)
        {
          id v8 = (id)result;
          swift_unownedRetainStrong();
          id v9 = v8;
          sub_24B4DF128(v9, v1, (uint64_t)v19);
          sub_24B4E7338((uint64_t)v19, (uint64_t)v20, &qword_2697C6720);
          sub_24B4E7338((uint64_t)v20, (uint64_t)v21, &qword_2697C6720);
          if (sub_24B4E48FC((uint64_t)v21) == 1)
          {

            if (v5 == v7) {
              goto LABEL_18;
            }
          }
          else
          {
            if ((v22[8] & 1) == 0)
            {
              sub_24B4E7338((uint64_t)v20, (uint64_t)v19, &qword_2697C6720);
              sub_24B4E4914((uint64_t)v19);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                CFIndex v6 = sub_24B4E4948(0, *((void *)v6 + 2) + 1, 1, v6);
              }
              unint64_t v11 = *((void *)v6 + 2);
              unint64_t v10 = *((void *)v6 + 3);
              if (v11 >= v10 >> 1) {
                CFIndex v6 = sub_24B4E4948((char *)(v10 > 1), v11 + 1, 1, v6);
              }
              *((void *)v6 + 2) = v11 + 1;
              uint64_t v12 = &v6[128 * v11];
              long long v13 = v21[0];
              long long v14 = v21[1];
              long long v15 = v21[3];
              *((_OWORD *)v12 + 4) = v21[2];
              *((_OWORD *)v12 + 5) = v15;
              *((_OWORD *)v12 + 2) = v13;
              *((_OWORD *)v12 + 3) = v14;
              long long v16 = v21[4];
              long long v17 = v21[5];
              long long v18 = *(_OWORD *)v22;
              *(_OWORD *)(v12 + 137) = *(_OWORD *)&v22[9];
              *((_OWORD *)v12 + 7) = v17;
              *((_OWORD *)v12 + 8) = v18;
              *((_OWORD *)v12 + 6) = v16;
            }

            sub_24B4E4A4C((uint64_t)v20);
            if (v5 == v7)
            {
LABEL_18:

              return (CFIndex)v6;
            }
          }
          CFIndex result = (CFIndex)CFArrayGetValueAtIndex(v3, v7++);
          if (!result) {
            goto LABEL_23;
          }
        }
      }
      goto LABEL_23;
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24B4DF128@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v56 = a1;
  type metadata accessor for IOHIDElement();
  uint64_t v7 = v6;
  id v8 = a1;
  sub_24B51B908((uint64_t)&v56, v7, (uint64_t)&v36);
  id v9 = (__IOHIDElement *)v36;
  swift_unownedRetain();
  uint64_t result = IOHIDElementGetReportID(v9);
  if (result > 0xFF)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  HIDReportID.init(rawValue:)(result, &v36);
  char v11 = v36;
  char v12 = BYTE1(v36);
  IOHIDElementType Type = IOHIDElementGetType(v9);
  if (Type == kIOHIDElementTypeCollection)
  {
    swift_release();

    swift_unownedRelease();
    sub_24B4E4AFC(&v36);
    uint64_t v14 = a3;
    return sub_24B4E7338((uint64_t)&v36, v14, &qword_2697C6720);
  }
  IOHIDElementType v15 = Type;
  char v16 = 2 * (Type == kIOHIDElementTypeFeature);
  if (Type == kIOHIDElementTypeOutput) {
    char v16 = 1;
  }
  if (Type - 1 >= 5) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  uint64_t UsagePage = IOHIDElementGetUsagePage(v9);
  uint64_t result = IOHIDElementGetUsage(v9);
  if (WORD1(UsagePage)) {
    goto LABEL_27;
  }
  int v19 = result;
  char v34 = v17;
  char v35 = v12;
  if (WORD1(result)) {
    int v20 = 0;
  }
  else {
    int v20 = (unsigned __int16)result;
  }
  HIDUsage.init(page:usage:)(v20, UsagePage, (uint64_t)&v36);
  uint64_t v21 = BYTE4(v36);
  uint64_t v22 = v36;
  LODWORD(UsagePage) = IOHIDElementGetReportSize(v9);
  if (IOHIDElementIsArray(v9))
  {
    uint64_t result = IOHIDElementGetReportCount(v9);
    uint64_t UsagePage = UsagePage * (unint64_t)result;
    if ((UsagePage & 0xFFFFFFFF00000000) != 0) {
      goto LABEL_29;
    }
  }
  IOHIDElementGetUnit(v9);
  uint64_t result = IOHIDElementGetUnitExponent(v9);
  if (result <= 0x7F)
  {
    char v31 = v11;
    uint64_t v23 = v22 | (v21 << 32);
    BOOL v33 = (v19 & 0xFFFF0000) != 0;
    BOOL v32 = v15 == kIOHIDElementTypeInput_NULL;
    CFIndex LogicalMin = IOHIDElementGetLogicalMin(v9);
    CFIndex LogicalMax = IOHIDElementGetLogicalMax(v9);
    CFIndex PhysicalMin = IOHIDElementGetPhysicalMin(v9);
    CFIndex PhysicalMax = IOHIDElementGetPhysicalMax(v9);
    swift_release();

    CFIndex v28 = PhysicalMin | PhysicalMax;
    LOBYTE(v56) = v35;
    if (PhysicalMax) {
      CFIndex v29 = 0;
    }
    else {
      CFIndex v29 = LogicalMin;
    }
    if (v28) {
      CFIndex v30 = PhysicalMax;
    }
    else {
      CFIndex v30 = LogicalMax;
    }
    if (PhysicalMin) {
      CFIndex v29 = PhysicalMin;
    }
    *(void *)&long long v36 = a2;
    BYTE8(v36) = v34;
    BYTE14(v36) = BYTE4(v23);
    *(_DWORD *)((char *)&v36 + 10) = v23;
    HIBYTE(v36) = v31;
    char v37 = v35;
    int v38 = UsagePage;
    int v39 = 0;
    char v40 = 1;
    char v41 = 0;
    char v42 = 1;
    CFIndex v43 = LogicalMin;
    BOOL v44 = (LogicalMin | LogicalMax) == 0;
    CFIndex v45 = LogicalMax;
    BOOL v46 = v44;
    CFIndex v47 = v29;
    BOOL v48 = (v28 | LogicalMin | LogicalMax) == 0;
    CFIndex v49 = v30;
    BOOL v50 = v48;
    v51 = v9;
    BOOL v52 = v32;
    BOOL v53 = v33;
    uint64_t v54 = 0;
    char v55 = 1;
    nullsub_1(&v36);
    uint64_t v14 = a3;
    return sub_24B4E7338((uint64_t)&v36, v14, &qword_2697C6720);
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void HIDElementCollection.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *HIDElementCollection.type.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*HIDElementCollection.type.modify())()
{
  return nullsub_1;
}

void HIDElementCollection.usage.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 10);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(v1 + 14);
  *(_DWORD *)a1 = v2;
}

int *HIDElementCollection.usage.setter(int *result)
{
  int v2 = *result;
  *(unsigned char *)(v1 + 14) = *((unsigned char *)result + 4);
  *(_DWORD *)(v1 + 10) = v2;
  return result;
}

uint64_t (*HIDElementCollection.usage.modify())()
{
  return nullsub_1;
}

id sub_24B4DF4C4()
{
  return *(id *)(v0 + 16);
}

void HIDElementCollection.hash(into:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();
}

uint64_t HIDElementCollection.hashValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  sub_24B534E60();
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();

  return sub_24B534EB0();
}

uint64_t sub_24B4DF6F4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  sub_24B534E60();
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();

  return sub_24B534EB0();
}

void sub_24B4DF808()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();
}

uint64_t sub_24B4DF914()
{
  uint64_t v1 = *(void **)(v0 + 16);
  sub_24B534E60();
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();

  return sub_24B534EB0();
}

uint64_t HIDElementCollection.description.getter()
{
  return 0;
}

uint64_t HIDElement.Value.element.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v3 = v1[5];
  long long v13 = v1[4];
  long long v2 = v13;
  long long v14 = v3;
  v15[0] = v1[6];
  long long v4 = v15[0];
  *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v1 + 105);
  long long v5 = *(_OWORD *)((char *)v15 + 9);
  long long v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  long long v8 = v1[3];
  long long v11 = v1[2];
  long long v7 = v11;
  long long v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 105) = v5;
  return sub_24B4E4914((uint64_t)v10);
}

__n128 HIDElement.Value.element.setter(uint64_t a1)
{
  long long v3 = v1[5];
  v10[4] = v1[4];
  v10[5] = v3;
  v11[0] = v1[6];
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v1 + 105);
  long long v4 = v1[1];
  v10[0] = *v1;
  v10[1] = v4;
  long long v5 = v1[3];
  _OWORD v10[2] = v1[2];
  v10[3] = v5;
  sub_24B4E54B8((uint64_t)v10);
  long long v6 = *(_OWORD *)(a1 + 80);
  v1[4] = *(_OWORD *)(a1 + 64);
  v1[5] = v6;
  v1[6] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)((char *)v1 + 105) = *(_OWORD *)(a1 + 105);
  long long v7 = *(_OWORD *)(a1 + 16);
  _OWORD *v1 = *(_OWORD *)a1;
  v1[1] = v7;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  v1[2] = result;
  v1[3] = v9;
  return result;
}

uint64_t (*HIDElement.Value.element.modify())()
{
  return nullsub_1;
}

uint64_t HIDElement.Value.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for HIDElement.Value() + 20);
  uint64_t v4 = sub_24B534C70();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t HIDElement.Value.timestamp.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for HIDElement.Value() + 20);
  uint64_t v4 = sub_24B534C70();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*HIDElement.Value.timestamp.modify())(void)
{
  return nullsub_1;
}

uint64_t HIDElement.Value.bytes.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for HIDElement.Value() + 24);
  uint64_t v2 = *(void *)v1;
  sub_24B4E5538(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t HIDElement.Value.bytes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for HIDElement.Value() + 24);
  uint64_t result = sub_24B4E5590(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*HIDElement.Value.bytes.modify())(void)
{
  return nullsub_1;
}

uint64_t HIDElement.Value.init(element:fromBytes:timestamp:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  long long v9 = a1[5];
  a5[4] = a1[4];
  a5[5] = v9;
  a5[6] = a1[6];
  *(_OWORD *)((char *)a5 + 105) = *(_OWORD *)((char *)a1 + 105);
  long long v10 = a1[1];
  *a5 = *a1;
  a5[1] = v10;
  long long v11 = a1[3];
  a5[2] = a1[2];
  a5[3] = v11;
  uint64_t v12 = type metadata accessor for HIDElement.Value();
  long long v13 = (void *)((char *)a5 + *(int *)(v12 + 24));
  *long long v13 = a2;
  v13[1] = a3;
  long long v14 = (char *)a5 + *(int *)(v12 + 20);
  uint64_t v15 = sub_24B534C70();
  char v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32);

  return v16(v14, a4, v15);
}

uint64_t HIDElement.client.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t HIDElement.client.setter(uint64_t a1)
{
  swift_unownedRetain();
  swift_unownedRelease();
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*HIDElement.client.modify(uint64_t *a1))()
{
  a1[1] = v1;
  *a1 = swift_unownedRetainStrong();
  return sub_24B4DEB40;
}

uint64_t sub_24B4E0030(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)a1[1];
  swift_unownedRetain();
  swift_unownedRelease();
  if (a2)
  {
    void *v4 = v3;
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    void *v4 = v3;
  }
  return result;
}

void HIDElement.parentCollection.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = IOHIDElementGetParent(*(IOHIDElementRef *)(v1 + 96));
  if (v4)
  {
    uint64_t v5 = v4;
    swift_unownedRetainStrong();
    sub_24B4DEBC4(v5, v3, &v9);
    uint64_t v6 = v11;
    if (v11)
    {
      unint64_t v7 = v10;
      unint64_t v8 = v10 >> 16;
      *(void *)a1 = v9;
      *(unsigned char *)(a1 + 8) = v7;
      *(unsigned char *)(a1 + 14) = BYTE6(v7);
      *(_DWORD *)(a1 + 10) = v8;
      *(void *)(a1 + 16) = v6;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void HIDElement.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *HIDElement.type.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*HIDElement.type.modify())()
{
  return nullsub_1;
}

uint64_t sub_24B4E0174@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = result == 129;
  if (result == 257) {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

void HIDElement.usage.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 10);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(v1 + 14);
  *(_DWORD *)a1 = v2;
}

int *HIDElement.usage.setter(int *result)
{
  int v2 = *result;
  *(unsigned char *)(v1 + 14) = *((unsigned char *)result + 4);
  *(_DWORD *)(v1 + 10) = v2;
  return result;
}

uint64_t (*HIDElement.usage.modify())()
{
  return nullsub_1;
}

void sub_24B4E01D8(_WORD *a1@<X8>)
{
  *a1 = 256;
}

void HIDElement.reportID.getter(unsigned char *a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *a1 = *(unsigned char *)(v1 + 15);
  a1[1] = v2;
}

unsigned char *HIDElement.reportID.setter(unsigned char *result)
{
  char v2 = result[1];
  *(unsigned char *)(v1 + 15) = *result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*HIDElement.reportID.modify())()
{
  return nullsub_1;
}

uint64_t HIDElement.reportSize.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t HIDElement.reportSize.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*HIDElement.reportSize.modify())()
{
  return nullsub_1;
}

uint64_t sub_24B4E025C()
{
  return 0x100000000;
}

unint64_t HIDElement.unit.getter()
{
  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t HIDElement.unit.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  *(unsigned char *)(v1 + 28) = BYTE4(result) & 1;
  return result;
}

uint64_t (*HIDElement.unit.modify())()
{
  return nullsub_1;
}

uint64_t sub_24B4E02C8()
{
  return 256;
}

uint64_t HIDElement.unitExponent.getter()
{
  return *(unsigned __int8 *)(v0 + 29) | (*(unsigned __int8 *)(v0 + 30) << 8);
}

uint64_t HIDElement.unitExponent.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 29) = result;
  *(unsigned char *)(v1 + 30) = BYTE1(result) & 1;
  return result;
}

uint64_t (*HIDElement.unitExponent.modify())()
{
  return nullsub_1;
}

uint64_t sub_24B4E0320()
{
  return 0;
}

uint64_t HIDElement.logicalMinimum.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t HIDElement.logicalMinimum.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*HIDElement.logicalMinimum.modify())()
{
  return nullsub_1;
}

uint64_t HIDElement.logicalMaximum.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t HIDElement.logicalMaximum.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*HIDElement.logicalMaximum.modify())()
{
  return nullsub_1;
}

uint64_t HIDElement.physicalMinimum.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t HIDElement.physicalMinimum.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*HIDElement.physicalMinimum.modify())()
{
  return nullsub_1;
}

uint64_t HIDElement.physicalMaximum.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t HIDElement.physicalMaximum.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*HIDElement.physicalMaximum.modify())()
{
  return nullsub_1;
}

id sub_24B4E041C()
{
  return *(id *)(v0 + 96);
}

uint64_t sub_24B4E0424()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t sub_24B4E042C()
{
  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t sub_24B4E0434()
{
  return *(void *)(v0 + 112);
}

void HIDElement.hash(into:)()
{
  uint64_t v1 = *(void **)(v0 + 96);
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();
}

uint64_t HIDElement.hashValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 96);
  sub_24B534E60();
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();

  return sub_24B534EB0();
}

uint64_t sub_24B4E0668()
{
  uint64_t v1 = *(void **)(v0 + 96);
  sub_24B534E60();
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();

  return sub_24B534EB0();
}

void sub_24B4E077C()
{
  uint64_t v1 = *(void **)(v0 + 96);
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();
}

uint64_t sub_24B4E0888()
{
  uint64_t v1 = *(void **)(v0 + 96);
  sub_24B534E60();
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v2 = v1;
  sub_24B534850();

  return sub_24B534EB0();
}

uint64_t HIDElement.description.getter()
{
  char v1 = *(unsigned char *)(v0 + 16);
  sub_24B534BD0();
  sub_24B534990();
  swift_unownedRetainStrong();
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6738, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B534DB0();
  sub_24B534990();
  swift_release();
  swift_bridgeObjectRelease();
  sub_24B534990();
  sub_24B534970();
  sub_24B534990();
  swift_bridgeObjectRelease();
  sub_24B534990();
  sub_24B4E5464();
  sub_24B534DB0();
  sub_24B534990();
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    sub_24B4E56E4();
    sub_24B534DB0();
    sub_24B534990();
    swift_bridgeObjectRelease();
  }
  sub_24B534990();
  swift_bridgeObjectRelease();
  sub_24B534990();
  return 0;
}

uint64_t HIDElement.Value.hash(into:)()
{
  long long v1 = v0[6];
  v12[5] = v0[5];
  v13[0] = v1;
  long long v2 = v0[4];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v0 + 105);
  long long v3 = v0[1];
  v12[0] = *v0;
  v12[1] = v3;
  long long v4 = v0[3];
  v12[2] = v0[2];
  v12[3] = v4;
  v12[4] = v2;
  uint64_t v5 = (void *)v1;
  swift_unownedRetainStrong();
  sub_24B4E4914((uint64_t)v12);
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v6 = v5;
  sub_24B534850();

  sub_24B4E54B8((uint64_t)v12);
  uint64_t v7 = type metadata accessor for HIDElement.Value();
  sub_24B534C70();
  sub_24B4E739C(&qword_2697C6750, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  unint64_t v8 = (uint64_t *)((char *)v0 + *(int *)(v7 + 24));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_24B4E5538(*v8, v10);
  sub_24B534800();
  return sub_24B4E5590(v9, v10);
}

uint64_t HIDElement.Value.hashValue.getter()
{
  sub_24B534E60();
  long long v1 = v0[6];
  v12[5] = v0[5];
  v13[0] = v1;
  long long v2 = v0[4];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v0 + 105);
  long long v3 = v0[1];
  v12[0] = *v0;
  v12[1] = v3;
  long long v4 = v0[3];
  v12[2] = v0[2];
  v12[3] = v4;
  v12[4] = v2;
  uint64_t v5 = (void *)v1;
  swift_unownedRetainStrong();
  sub_24B4E4914((uint64_t)v12);
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v6 = v5;
  sub_24B534850();

  sub_24B4E54B8((uint64_t)v12);
  uint64_t v7 = type metadata accessor for HIDElement.Value();
  sub_24B534C70();
  sub_24B4E739C(&qword_2697C6750, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  unint64_t v8 = (uint64_t *)((char *)v0 + *(int *)(v7 + 24));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_24B4E5538(*v8, v10);
  sub_24B534800();
  sub_24B4E5590(v9, v10);
  return sub_24B534EB0();
}

uint64_t sub_24B4E0FA8(uint64_t a1, uint64_t a2)
{
  sub_24B534E60();
  long long v4 = v2[6];
  v14[5] = v2[5];
  v15[0] = v4;
  long long v5 = v2[4];
  *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v2 + 105);
  long long v6 = v2[1];
  v14[0] = *v2;
  v14[1] = v6;
  long long v7 = v2[3];
  v14[2] = v2[2];
  v14[3] = v7;
  v14[4] = v5;
  unint64_t v8 = (void *)v4;
  swift_unownedRetainStrong();
  sub_24B4E4914((uint64_t)v14);
  type metadata accessor for HIDDeviceClient();
  sub_24B4E739C(&qword_2697C6728, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  sub_24B5348F0();
  swift_release();
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v9 = v8;
  sub_24B534850();

  sub_24B4E54B8((uint64_t)v14);
  sub_24B534C70();
  sub_24B4E739C(&qword_2697C6750, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  unint64_t v10 = (uint64_t *)((char *)v2 + *(int *)(a2 + 24));
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  sub_24B4E5538(*v10, v12);
  sub_24B534800();
  sub_24B4E5590(v11, v12);
  return sub_24B534EB0();
}

uint64_t HIDElement.Value.integerValue<A>(asTypeTruncatingIfNeeded:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v6 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v24 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v7);
  id v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HIDElement.Value();
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v6;
  char v13 = sub_24B534B90();
  sub_24B4E5BB8(v4, (uint64_t)v12);
  if ((v13 & 1) == 0)
  {
    sub_24B4E5C1C((uint64_t)v12);
    goto LABEL_6;
  }
  uint64_t v23 = v4;
  long long v14 = (uint64_t *)&v12[*(int *)(v10 + 24)];
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_24B4E5538(*v14, v16);
  __int16 v17 = sub_24B4E14F0(v15, v16);
  uint64_t result = sub_24B4E5590(v15, v16);
  if ((v17 & 0x100) == 0)
  {
    sub_24B4E5C1C((uint64_t)v12);
    if ((v17 & 0x80) != 0)
    {
      swift_getAssociatedConformanceWitness();
      sub_24B534DF0();
      sub_24B534DC0();
      sub_24B534B60();
      uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, a1);
LABEL_7:
      MEMORY[0x270FA5388](v19);
      *(&v23 - 4) = a1;
      *(&v23 - 3) = v20;
      uint64_t v22 = 4039;
      return sub_24B4E2EEC(v27, (uint64_t)sub_24B4E5C78, (uint64_t)(&v23 - 6), a1, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v21);
    }
LABEL_6:
    swift_getAssociatedConformanceWitness();
    sub_24B534DF0();
    uint64_t v19 = sub_24B534DC0();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B4E14F0(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v2 = 1;
  int v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (!((a1 ^ (unint64_t)(a1 << 32)) >> 32)) {
        goto LABEL_5;
      }
      goto LABEL_16;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      if (v5 != v4)
      {
        if (a2 >> 62 == 2)
        {
          uint64_t v6 = v4 - 1;
          if (__OFSUB__(v4, 1))
          {
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
          if (v6 < v5)
          {
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
          }
          if (v6 >= v4) {
            goto LABEL_25;
          }
          uint64_t v7 = sub_24B534710();
          if (!v7) {
            goto LABEL_27;
          }
          uint64_t v8 = v7;
          a1 = sub_24B534740();
          uint64_t v9 = v6 - a1;
          if (!__OFSUB__(v6, a1)) {
            goto LABEL_19;
          }
          __break(1u);
        }
LABEL_16:
        uint64_t v10 = a1 >> 32;
        if (a1 >> 32 <= (int)a1)
        {
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        uint64_t v11 = sub_24B534710();
        if (v11)
        {
          uint64_t v8 = v11;
          uint64_t v12 = v10 - 1;
          uint64_t v13 = sub_24B534740();
          uint64_t v9 = v12 - v13;
          if (!__OFSUB__(v12, v13))
          {
LABEL_19:
            int v2 = 0;
            int v3 = *(unsigned __int8 *)(v8 + v9);
            return v3 | (v2 << 8);
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_27:
        __break(1u);
        JUMPOUT(0x24B4E16C0);
      }
      int v3 = 0;
      int v2 = 1;
      return v3 | (v2 << 8);
    case 3uLL:
      return v3 | (v2 << 8);
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
        int v2 = 0;
        uint64_t v15 = a1;
        __int16 v16 = a2;
        char v17 = BYTE2(a2);
        char v18 = BYTE3(a2);
        char v19 = BYTE4(a2);
        char v20 = BYTE5(a2);
        int v3 = *((unsigned __int8 *)&v15 + BYTE6(a2) - 1);
      }
      else
      {
LABEL_5:
        int v3 = 0;
      }
      return v3 | (v2 << 8);
  }
}

uint64_t sub_24B4E16D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C67E8);
  MEMORY[0x270FA5388]();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a2 + *(int *)(type metadata accessor for HIDElement.Value() + 24);
  uint64_t v8 = *(void *)v7;
  unint64_t v9 = *(void *)(v7 + 8);
  switch(v9 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_24B4E5538(*(void *)v7, *(void *)(v7 + 8));
      sub_24B4E5538(v8, v9);
      break;
    default:
      break;
  }
  sub_24B534820();
  sub_24B4E5590(v8, v9);
  uint64_t v16 = *(int *)(v4 + 36);
  sub_24B534810();
  sub_24B4E739C(&qword_2697C67F0, MEMORY[0x263F06F40]);
  sub_24B534B40();
  uint64_t v10 = 0;
  if ((v18 & 1) == 0)
  {
    uint64_t v11 = 0;
    do
    {
      char v12 = v17;
      uint64_t v13 = sub_24B534C90();
      uint64_t v14 = v13 + 7;
      if (__OFADD__(v13, 7))
      {
        __break(1u);
        JUMPOUT(0x24B4E18D8);
      }
      uint64_t v10 = v11 + 1;
      if (v14 < 0) {
        uint64_t v14 = v13 + 14;
      }
      if (v11 >= v14 >> 3) {
        break;
      }
      *(unsigned char *)(a1 + v11) = v12;
      sub_24B534B40();
      ++v11;
    }
    while ((v18 & 1) == 0);
  }
  *(void *)&v6[v16] = v10;
  return sub_24B4E73E4((uint64_t)v6, &qword_2697C67E8);
}

uint64_t HIDElement.Value.logicalValue<A>(asTypeTruncatingIfNeeded:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v68 = a3;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v63 = *(void *)(*(void *)(v7 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = type metadata accessor for HIDElement.Value();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  v67 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  v62 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  char v17 = (char *)&v59 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  char v20 = (char *)&v59 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  v69 = (char *)&v59 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v66 = (char *)&v59 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v59 - v25;
  HIDElement.Value.integerValue<A>(asTypeTruncatingIfNeeded:)(a1, a2, (uint64_t)&v59 - v25);
  if (*(unsigned char *)(v4 + 40))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, a1);
    uint64_t v27 = 1;
    uint64_t v28 = v68;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v28, v27, 1, a1);
  }
  v65 = v26;
  uint64_t v61 = *(void *)(v4 + 32);
  char v29 = sub_24B534B90();
  uint64_t v64 = v7;
  uint64_t v30 = v4;
  if (v29)
  {
    char v31 = v65;
    if (sub_24B534B80() >= 64)
    {
      uint64_t v70 = v61;
      sub_24B4E5CA8();
      int v38 = v66;
      sub_24B534B50();
      char v32 = sub_24B534910();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v38, a1);
    }
    else
    {
      char v32 = sub_24B534B70() < v61;
    }
    uint64_t v35 = (uint64_t)v67;
    char v37 = v69;
  }
  else
  {
    uint64_t v60 = v4;
    char v33 = sub_24B534B90();
    uint64_t v34 = sub_24B534B80();
    if (v33)
    {
      uint64_t v35 = (uint64_t)v67;
      if (v34 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        sub_24B534DF0();
        BOOL v52 = v66;
        sub_24B534DC0();
        char v31 = v65;
        char v53 = sub_24B534910();
        uint64_t v54 = *(void (**)(char *, uint64_t))(v12 + 8);
        v54(v52, a1);
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v20, v31, a1);
        char v32 = (v53 & 1) != 0 || sub_24B534B70() < v61;
        char v37 = v69;
        uint64_t v30 = v60;
        v54(v20, a1);
      }
      else
      {
        uint64_t v70 = v61;
        sub_24B4E5CA8();
        long long v36 = v66;
        sub_24B534B50();
        char v31 = v65;
        char v32 = sub_24B534910();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v36, a1);
        char v37 = v69;
        uint64_t v30 = v60;
      }
    }
    else
    {
      uint64_t v35 = (uint64_t)v67;
      char v37 = v69;
      if (v34 < 64)
      {
        char v31 = v65;
        uint64_t v49 = sub_24B534B70();
        uint64_t v30 = v60;
        char v32 = v49 < v61;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v65, a1);
        uint64_t v30 = v60;
        uint64_t v70 = v61;
        if (v61 < 1)
        {
          (*(void (**)(char *, uint64_t))(v12 + 8))(v17, a1);
          char v32 = 0;
        }
        else
        {
          sub_24B4E5CA8();
          char v55 = v66;
          sub_24B534B50();
          char v32 = sub_24B534910();
          v56 = *(void (**)(char *, uint64_t))(v12 + 8);
          v56(v55, a1);
          v56(v17, a1);
        }
        char v31 = v65;
      }
    }
  }
  int v39 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v39(v37, v31, a1);
  uint64_t result = sub_24B4E5BB8(v30, v35);
  if (v32)
  {
    sub_24B4E5C1C(v35);
    char v41 = *(void (**)(char *, uint64_t))(v12 + 8);
    v41(v37, a1);
LABEL_22:
    uint64_t v28 = v68;
    v41(v31, a1);
    uint64_t v27 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v28, v27, 1, a1);
  }
  if ((*(unsigned char *)(v35 + 56) & 1) == 0)
  {
    uint64_t v42 = *(void *)(v35 + 48);
    char v43 = sub_24B534B90();
    uint64_t v44 = sub_24B534B80();
    if (v43)
    {
      if (v44 > 64)
      {
        uint64_t v70 = v42;
        sub_24B4E5CA8();
        CFIndex v45 = v66;
        sub_24B534B50();
        BOOL v46 = v69;
        char v47 = sub_24B534910();
        char v41 = *(void (**)(char *, uint64_t))(v12 + 8);
        v41(v45, a1);
        sub_24B4E5C1C(v35);
        BOOL v48 = v46;
        goto LABEL_30;
      }
    }
    else if (v44 > 63)
    {
      uint64_t v70 = v42;
      v57 = v62;
      v39(v62, v69, a1);
      if (v42 < 0)
      {
        char v41 = *(void (**)(char *, uint64_t))(v12 + 8);
        v41(v57, a1);
        sub_24B4E5C1C(v35);
        v41(v69, a1);
        goto LABEL_22;
      }
      sub_24B4E5CA8();
      v58 = v66;
      sub_24B534B50();
      char v47 = sub_24B534910();
      char v41 = *(void (**)(char *, uint64_t))(v12 + 8);
      v41(v58, a1);
      v41(v57, a1);
      sub_24B4E5C1C(v35);
      BOOL v48 = v69;
LABEL_30:
      v41(v48, a1);
      if (v47) {
        goto LABEL_22;
      }
      goto LABEL_31;
    }
    BOOL v50 = v69;
    uint64_t v51 = sub_24B534B70();
    sub_24B4E5C1C(v35);
    char v41 = *(void (**)(char *, uint64_t))(v12 + 8);
    v41(v50, a1);
    if (v42 < v51) {
      goto LABEL_22;
    }
LABEL_31:
    uint64_t v28 = v68;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v68, v31, a1);
    uint64_t v27 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v28, v27, 1, a1);
  }
  __break(1u);
  return result;
}

uint64_t HIDElement.Value.physicalValue<A, B>(fromTypeTruncatingIfNeeded:as:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  v28[1] = a4;
  uint64_t v29 = a3;
  uint64_t v10 = sub_24B534B30();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v28 - v13;
  uint64_t v15 = *(void *)(a1 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v12);
  uint64_t v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)v28 - v19;
  if (*(unsigned char *)(v6 + 120))
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
    return v21(a5, 1, 1, a2);
  }
  else
  {
    v28[0] = a5;
    HIDElement.Value.logicalValue<A>(asTypeTruncatingIfNeeded:)(a1, v29, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a1) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v28[0], 1, 1, a2);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v14, a1);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6760);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_24B5359C0;
      *(void *)(v23 + 56) = a1;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v23 + 32));
      uint64_t v25 = *(void (**)(uint64_t *, char *, uint64_t))(v15 + 16);
      v25(boxed_opaque_existential_0, v20, a1);
      sub_24B534E50();
      swift_bridgeObjectRelease();
      v25((uint64_t *)v18, v20, a1);
      if (sub_24B534B80() < 65)
      {
        sub_24B534B90();
        sub_24B534B70();
      }
      else
      {
        sub_24B4E5D60();
        sub_24B4E5DB4();
        sub_24B5348A0();
      }
      uint64_t v26 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
      uint64_t result = v26(v18, a1);
      uint64_t v27 = v28[0];
      if (*(unsigned char *)(v6 + 120))
      {
        __break(1u);
      }
      else
      {
        sub_24B5348B0();
        v26(v20, a1);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v27, 0, 1, a2);
      }
    }
  }
  return result;
}

uint64_t sub_24B4E25F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a1 + 20);
  BOOL v6 = __CFADD__(v5, 7);
  unsigned int v7 = v5 + 7;
  if (v6) {
    __break(1u);
  }
  uint64_t v11 = a2 >> 63;
  *(void *)&long long v23 = sub_24B4E5E08(v7 >> 3);
  *((void *)&v23 + 1) = v12;
  sub_24B4E4FBC(&v23, v11);
  uint64_t v21 = a2;
  sub_24B4E2E00((uint64_t)&v21, v22, (uint64_t *)&v23);
  long long v13 = v23;
  long long v14 = *(_OWORD *)(a1 + 80);
  a4[4] = *(_OWORD *)(a1 + 64);
  a4[5] = v14;
  a4[6] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)((char *)a4 + 105) = *(_OWORD *)(a1 + 105);
  long long v15 = *(_OWORD *)(a1 + 16);
  *a4 = *(_OWORD *)a1;
  a4[1] = v15;
  long long v16 = *(_OWORD *)(a1 + 48);
  a4[2] = *(_OWORD *)(a1 + 32);
  a4[3] = v16;
  uint64_t v17 = type metadata accessor for HIDElement.Value();
  *(_OWORD *)((char *)a4 + *(int *)(v17 + 24)) = v13;
  uint64_t v18 = (char *)a4 + *(int *)(v17 + 20);
  uint64_t v19 = sub_24B534C70();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a3, v19);
}

uint64_t HIDElement.Value.init<A>(element:fromIntegerTruncatingIfNeeded:timestamp:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v50 = *(void *)(*(void *)(*(void *)(a5 + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = *(void *)(a4 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v51 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v48 - v16;
  long long v53 = *a1;
  int v18 = *((_DWORD *)a1 + 4);
  int v52 = *((_DWORD *)a1 + 5);
  int v54 = v18;
  long long v19 = *(long long *)((char *)a1 + 88);
  long long v60 = *(long long *)((char *)a1 + 72);
  long long v61 = v19;
  long long v62 = *(long long *)((char *)a1 + 104);
  char v63 = *((unsigned char *)a1 + 120);
  long long v20 = *(long long *)((char *)a1 + 40);
  long long v57 = *(long long *)((char *)a1 + 24);
  long long v58 = v20;
  long long v59 = *(long long *)((char *)a1 + 56);
  if (sub_24B534B90())
  {
    uint64_t v21 = a3;
    if (sub_24B534B80() < 64)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, a2, a4);
      uint64_t v22 = sub_24B534B70();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
LABEL_4:
      unsigned int v23 = v52;
      if ((v22 & 0x8000000000000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_11;
    }
    uint64_t v55 = 0;
    sub_24B4E5ED4();
    sub_24B534B50();
    char v27 = sub_24B534910();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
  }
  else
  {
    uint64_t v49 = a3;
    char v24 = sub_24B534B90();
    uint64_t v48 = a2;
    uint64_t v25 = sub_24B534B80();
    BOOL v26 = v25 < 64;
    if ((v24 & 1) == 0) {
      goto LABEL_13;
    }
    if (v25 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_24B534DF0();
      sub_24B534DC0();
      a2 = v48;
      char v44 = sub_24B534910();
      CFIndex v45 = *(void (**)(char *, uint64_t))(v13 + 8);
      v45(v17, a4);
      BOOL v46 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v51, a2, a4);
      if (v44)
      {
        v45(v46, a4);
        int v28 = 255;
        uint64_t v21 = v49;
        unsigned int v23 = v52;
        unsigned int v29 = v52 + 7;
        BOOL v26 = v52 < -7;
        if (v52 >= 0xFFFFFFF9) {
          goto LABEL_12;
        }
        goto LABEL_17;
      }
      uint64_t v22 = sub_24B534B70();
      v45(v46, a4);
      uint64_t v21 = v49;
      goto LABEL_4;
    }
    uint64_t v55 = 0;
    sub_24B4E5ED4();
    sub_24B534B50();
    a2 = v48;
    char v27 = sub_24B534910();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
    uint64_t v21 = v49;
  }
  unsigned int v23 = v52;
  if ((v27 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_11:
  while (1)
  {
    int v28 = 255;
    unsigned int v29 = v23 + 7;
    BOOL v26 = (int)v23 < -7;
    if (v23 < 0xFFFFFFF9) {
      break;
    }
LABEL_12:
    while (1)
    {
      __break(1u);
LABEL_13:
      uint64_t v21 = v49;
      a2 = v48;
      unsigned int v23 = v52;
      if (v26)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, v48, a4);
        uint64_t v30 = sub_24B534B70();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
        if (v30 < 0) {
          break;
        }
      }
LABEL_16:
      int v28 = 0;
      unsigned int v29 = v23 + 7;
      BOOL v26 = (int)v23 < -7;
      if (v23 < 0xFFFFFFF9) {
        goto LABEL_17;
      }
    }
  }
LABEL_17:
  uint64_t v55 = sub_24B4E5E08(v29 >> 3);
  uint64_t v56 = v31;
  sub_24B4E4FBC(&v55, v28);
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, a2, a4);
  MEMORY[0x270FA5388](v32);
  uint64_t v47 = 803;
  sub_24B4E2EEC((uint64_t)v17, (uint64_t)sub_24B4E5EA8, (uint64_t)(&v48 - 4), a4, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v33);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v34(a2, a4);
  v34((uint64_t)v17, a4);
  *(_OWORD *)a6 = v53;
  long long v35 = v59;
  *(_OWORD *)(a6 + 72) = v60;
  *(_OWORD *)(a6 + 88) = v61;
  *(_OWORD *)(a6 + 104) = v62;
  long long v36 = v58;
  *(_OWORD *)(a6 + 24) = v57;
  *(_OWORD *)(a6 + 40) = v36;
  uint64_t v37 = v55;
  uint64_t v38 = v56;
  *(_DWORD *)(a6 + 16) = v54;
  *(_DWORD *)(a6 + 20) = v23;
  *(unsigned char *)(a6 + 120) = v63;
  *(_OWORD *)(a6 + 56) = v35;
  uint64_t v39 = type metadata accessor for HIDElement.Value();
  char v40 = (uint64_t *)(a6 + *(int *)(v39 + 24));
  *char v40 = v37;
  v40[1] = v38;
  uint64_t v41 = a6 + *(int *)(v39 + 20);
  uint64_t v42 = sub_24B534C70();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 32))(v41, v21, v42);
}

uint64_t sub_24B4E2E00(uint64_t result, unsigned __int8 *a2, uint64_t *a3)
{
  if (result)
  {
    int v5 = (unsigned __int8 *)result;
    uint64_t v6 = 0;
    if (!a2)
    {
LABEL_7:
      while (2)
      {
        uint64_t v7 = v6 + 1;
        if (!__OFADD__(v6, 1))
        {
          unsigned int v8 = *v5++;
          uint64_t result = v8;
          uint64_t v9 = *a3;
          unint64_t v10 = a3[1];
          switch(v10 >> 62)
          {
            case 1uLL:
              BOOL v11 = __OFSUB__(HIDWORD(v9), v9);
              LODWORD(v9) = HIDWORD(v9) - v9;
              if (v11) {
                goto LABEL_19;
              }
              uint64_t v9 = (int)v9;
LABEL_13:
              if (v6 >= v9) {
                return result;
              }
LABEL_14:
              uint64_t result = sub_24B5347E0();
              uint64_t v6 = v7;
              if (!a2) {
                continue;
              }
              goto LABEL_6;
            case 2uLL:
              uint64_t v14 = v9 + 16;
              uint64_t v12 = *(void *)(v9 + 16);
              uint64_t v13 = *(void *)(v14 + 8);
              BOOL v11 = __OFSUB__(v13, v12);
              uint64_t v9 = v13 - v12;
              if (!v11) {
                goto LABEL_13;
              }
              goto LABEL_20;
            case 3uLL:
              if ((v6 & 0x8000000000000000) == 0) {
                return result;
              }
              goto LABEL_14;
            default:
              uint64_t v9 = BYTE6(v10);
              goto LABEL_13;
          }
        }
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      JUMPOUT(0x24B4E2EDCLL);
    }
LABEL_6:
    if (v5 != a2) {
      goto LABEL_7;
    }
  }
  else if (a2)
  {
    uint64_t v6 = 0;
    int v5 = 0;
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_24B4E2EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_24B4E2FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = sub_24B534C70();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(unsigned char *)(a1 + 40) != 1 && *(void *)(a1 + 32) <= a2)
  {
    sub_24B4E7338(a1 + 48, (uint64_t)v15, &qword_2697C67E0);
    uint64_t result = sub_24B4E7338((uint64_t)v15, (uint64_t)&v16, &qword_2697C67E0);
    if (v17)
    {
      __break(1u);
      return result;
    }
    if (v16 >= a2)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
      sub_24B4E25F4(a1, a2, (uint64_t)v11, a4);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
      uint64_t v14 = type metadata accessor for HIDElement.Value();
      return (*(uint64_t (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a4, 0, 1, v14);
    }
  }
  sub_24B4E54B8(a1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
  uint64_t v13 = type metadata accessor for HIDElement.Value();
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a4, 1, 1, v13);
}

uint64_t HIDElement.Value.init<A>(element:fromLogicalValueTruncatingIfNeeded:timestamp:)@<X0>(long long *a1@<X0>, void (*a2)(void, void, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v89 = a3;
  uint64_t v90 = a6;
  v91 = a2;
  uint64_t v9 = sub_24B534C70();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  v82 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = a5;
  uint64_t v12 = *(void *)(a5 + 8);
  uint64_t v80 = *(void *)(*(void *)(v12 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  long long v19 = (char *)&v76 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  v87 = (char *)&v76 - v22;
  MEMORY[0x270FA5388](v21);
  v88 = (char *)&v76 - v26;
  long long v27 = a1[5];
  long long v98 = a1[4];
  long long v99 = v27;
  v100[0] = a1[6];
  *(_OWORD *)((char *)v100 + 9) = *(long long *)((char *)a1 + 105);
  long long v28 = a1[1];
  long long v94 = *a1;
  long long v95 = v28;
  long long v29 = a1[3];
  long long v96 = a1[2];
  long long v97 = v29;
  if ((BYTE8(v96) & 1) == 0)
  {
    v77 = v24;
    v78 = v25;
    uint64_t v84 = v23;
    uint64_t v85 = v10;
    uint64_t v79 = v15;
    uint64_t v86 = v9;
    uint64_t v31 = v96;
    char v32 = sub_24B534B90();
    uint64_t v81 = v12;
    if (v32)
    {
      uint64_t v33 = (char *)v91;
      uint64_t v34 = sub_24B534B80();
      long long v35 = v87;
      if (v34 < 64)
      {
        uint64_t v36 = v31;
        uint64_t v37 = v79;
        uint64_t v38 = v88;
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v88, v33, a4);
        uint64_t v39 = sub_24B534B70();
        char v40 = *(void (**)(char *, uint64_t))(v37 + 8);
        v40(v38, a4);
        char v41 = v39 < v36;
LABEL_11:
        uint64_t v45 = v86;
LABEL_12:
        uint64_t v46 = v85;
        goto LABEL_13;
      }
      *(void *)&v92[0] = v31;
      sub_24B4E5CA8();
      char v44 = v88;
      sub_24B534B50();
    }
    else
    {
      char v42 = sub_24B534B90();
      uint64_t v43 = sub_24B534B80();
      long long v35 = v87;
      if ((v42 & 1) == 0)
      {
        uint64_t v76 = v31;
        uint64_t v45 = v86;
        if (v43 >= 64)
        {
          uint64_t v37 = v79;
          uint64_t v33 = (char *)v91;
          (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v19, (char *)v91, a4);
          *(void *)&v92[0] = v76;
          if (v76 < 1)
          {
            char v40 = *(void (**)(char *, uint64_t))(v37 + 8);
            v40(v19, a4);
            char v41 = 0;
          }
          else
          {
            sub_24B4E5CA8();
            v65 = v88;
            sub_24B534B50();
            char v41 = sub_24B534910();
            char v40 = *(void (**)(char *, uint64_t))(v37 + 8);
            v66 = v65;
            long long v35 = v87;
            v40(v66, a4);
            v40(v19, a4);
          }
        }
        else
        {
          uint64_t v37 = v79;
          long long v57 = v88;
          uint64_t v33 = (char *)v91;
          (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v88, (char *)v91, a4);
          uint64_t v58 = sub_24B534B70();
          char v40 = *(void (**)(char *, uint64_t))(v37 + 8);
          v40(v57, a4);
          char v41 = v58 < v76;
        }
        goto LABEL_12;
      }
      if (v43 <= 64)
      {
        uint64_t v76 = v31;
        swift_getAssociatedConformanceWitness();
        sub_24B534DF0();
        long long v60 = v88;
        sub_24B534DC0();
        uint64_t v33 = (char *)v91;
        char v61 = sub_24B534910();
        uint64_t v62 = v79;
        char v40 = *(void (**)(char *, uint64_t))(v79 + 8);
        v40(v60, a4);
        char v63 = *(void (**)(uint64_t, void, uint64_t))(v62 + 16);
        uint64_t v64 = (char *)v78;
        v63(v78, v33, a4);
        char v41 = (v61 & 1) != 0 || sub_24B534B70() < v76;
        uint64_t v45 = v86;
        v40(v64, a4);
        uint64_t v46 = v85;
        uint64_t v37 = v79;
LABEL_13:
        uint64_t v47 = *(uint64_t (**)(char *, void, uint64_t))(v37 + 16);
        uint64_t result = v47(v35, v33, a4);
        if (v41)
        {
          sub_24B4E54B8((uint64_t)&v94);
          v40(v35, a4);
          uint64_t v49 = v89;
          uint64_t v30 = v90;
LABEL_37:
          (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v49, v45);
          v40(v33, a4);
          goto LABEL_38;
        }
        v91 = (void (*)(void, void, void))v47;
        if (BYTE8(v97))
        {
          __break(1u);
          return result;
        }
        uint64_t v50 = v35;
        uint64_t v51 = v97;
        char v52 = sub_24B534B90();
        uint64_t v53 = sub_24B534B80();
        if (v52)
        {
          if (v53 > 64)
          {
            *(void *)&v92[0] = v51;
            sub_24B4E5CA8();
            int v54 = v88;
            sub_24B534B50();
            char v55 = sub_24B534910();
            uint64_t v56 = v54;
LABEL_30:
            v40(v56, a4);
            v40(v50, a4);
            if ((v55 & 1) == 0) {
              goto LABEL_31;
            }
            goto LABEL_36;
          }
        }
        else if (v53 > 63)
        {
          *(void *)&v92[0] = v51;
          v67 = v77;
          v91(v77, v50, a4);
          if (v51 < 0)
          {
            v40(v67, a4);
            v40(v50, a4);
            goto LABEL_36;
          }
          sub_24B4E5CA8();
          uint64_t v68 = v88;
          sub_24B534B50();
          char v55 = sub_24B534910();
          v40(v68, a4);
          uint64_t v56 = v67;
          goto LABEL_30;
        }
        uint64_t v59 = sub_24B534B70();
        v40(v35, a4);
        if (v51 >= v59)
        {
LABEL_31:
          uint64_t v70 = (uint64_t)v88;
          uint64_t v69 = v89;
          v92[4] = v98;
          v92[5] = v99;
          v93[0] = v100[0];
          *(_OWORD *)((char *)v93 + 9) = *(_OWORD *)((char *)v100 + 9);
          v92[0] = v94;
          v92[1] = v95;
          v92[2] = v96;
          v92[3] = v97;
          v91(v88, v33, a4);
          uint64_t v72 = v85;
          uint64_t v71 = v86;
          uint64_t v73 = (uint64_t)v82;
          (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v82, v69, v86);
          HIDElement.Value.init<A>(element:fromIntegerTruncatingIfNeeded:timestamp:)(v92, v70, v73, a4, v83, v90);
          (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v69, v71);
          v40(v33, a4);
          uint64_t v74 = type metadata accessor for HIDElement.Value();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v90, 0, 1, v74);
        }
LABEL_36:
        sub_24B4E54B8((uint64_t)&v94);
        uint64_t v49 = v89;
        uint64_t v30 = v90;
        uint64_t v46 = v85;
        uint64_t v45 = v86;
        goto LABEL_37;
      }
      *(void *)&v92[0] = v31;
      sub_24B4E5CA8();
      char v44 = v88;
      sub_24B534B50();
      uint64_t v33 = (char *)v91;
    }
    char v41 = sub_24B534910();
    uint64_t v37 = v79;
    char v40 = *(void (**)(char *, uint64_t))(v79 + 8);
    v40(v44, a4);
    goto LABEL_11;
  }
  sub_24B4E54B8((uint64_t)&v94);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v89, v9);
  uint64_t v30 = v90;
  (*(void (**)(char *, uint64_t))(v15 + 8))((char *)v91, a4);
LABEL_38:
  uint64_t v75 = type metadata accessor for HIDElement.Value();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v30, 1, 1, v75);
}

uint64_t HIDElement.Value.init<A>(element:fromPhysicalValue:timestamp:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v32[1] = a5;
  uint64_t v33 = a6;
  uint64_t v10 = sub_24B534C70();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6780);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (_OWORD *)((char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v15);
  *(_OWORD *)&v36[9] = *(_OWORD *)((char *)a1 + 105);
  long long v20 = a1[5];
  v35[4] = a1[4];
  v35[5] = v20;
  *(_OWORD *)uint64_t v36 = a1[6];
  long long v21 = a1[1];
  v35[0] = *a1;
  v35[1] = v21;
  long long v22 = a1[3];
  v35[2] = a1[2];
  v35[3] = v22;
  if (v36[24])
  {
    sub_24B4E54B8((uint64_t)v35);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, v10);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, a4);
LABEL_8:
    uint64_t v30 = type metadata accessor for HIDElement.Value();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v33, 1, 1, v30);
  }
  uint64_t v23 = a3;
  double v24 = *(double *)&v36[16];
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a4);
  sub_24B4E5D60();
  uint64_t result = sub_24B534890();
  double v26 = v24 * v34;
  if ((~COERCE__INT64(v24 * v34) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v27 = (uint64_t)v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v23, v10);
  sub_24B4E2FE0((uint64_t)v35, v27, (uint64_t)v13, v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v23, v10);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, a4);
  uint64_t v28 = type metadata accessor for HIDElement.Value();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v17, 1, v28))
  {
    sub_24B4E73E4((uint64_t)v17, &qword_2697C6780);
    goto LABEL_8;
  }
  uint64_t v31 = v33;
  sub_24B4E5F28((uint64_t)v17, v33);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v28);
}

uint64_t HIDElement.Value.description.getter()
{
  *(void *)&v9[0] = 0;
  *((void *)&v9[0] + 1) = 0xE000000000000000;
  sub_24B534BD0();
  sub_24B534990();
  long long v1 = v0[5];
  v9[4] = v0[4];
  v9[5] = v1;
  v10[0] = v0[6];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v0 + 105);
  long long v2 = v0[1];
  v9[0] = *v0;
  v9[1] = v2;
  long long v3 = v0[3];
  v9[2] = v0[2];
  v9[3] = v3;
  sub_24B4E4914((uint64_t)v9);
  HIDElement.description.getter();
  sub_24B534990();
  swift_bridgeObjectRelease();
  sub_24B4E54B8((uint64_t)v9);
  sub_24B534990();
  uint64_t v4 = type metadata accessor for HIDElement.Value();
  sub_24B534C70();
  sub_24B534C80();
  sub_24B534990();
  int v5 = (uint64_t *)((char *)v0 + *(int *)(v4 + 24));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_24B4E5538(*v5, v7);
  sub_24B4E4224(v6, v7);
  sub_24B4E5590(v6, v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6788);
  sub_24B4E5F8C();
  sub_24B534900();
  swift_bridgeObjectRelease();
  sub_24B534990();
  swift_bridgeObjectRelease();
  sub_24B534990();
  return 0;
}

uint64_t sub_24B4E4224(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = MEMORY[0x263F8EE78];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      uint64_t v29 = MEMORY[0x263F8EE78];
      int64_t v7 = v4 & ~(v4 >> 63);
      sub_24B4E5244(0, v7, 0);
      uint64_t v3 = v29;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = sub_24B534710();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = sub_24B534740();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = sub_24B534710();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = sub_24B534740();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_2697C67D0);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_24B5359C0;
        *(void *)(v16 + 56) = MEMORY[0x263F8E778];
        *(void *)(v16 + 64) = MEMORY[0x263F8E7C0];
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = sub_24B534960();
        uint64_t v18 = v17;
        uint64_t v29 = v3;
        unint64_t v20 = *(void *)(v3 + 16);
        unint64_t v19 = *(void *)(v3 + 24);
        if (v20 >= v19 >> 1)
        {
          sub_24B4E5244((char *)(v19 > 1), v20 + 1, 1);
          uint64_t v3 = v29;
        }
        *(void *)(v3 + 16) = v20 + 1;
        uint64_t v21 = v3 + 16 * v20;
        *(void *)(v21 + 32) = v2;
        *(void *)(v21 + 40) = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_24B4E45CC()
{
  return sub_24B534860();
}

uint64_t sub_24B4E4618()
{
  return sub_24B534850();
}

uint64_t sub_24B4E4670()
{
  return sub_24B534EB0();
}

void type metadata accessor for IOHIDElement()
{
  if (!qword_2697C67B8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_2697C67B8);
    }
  }
}

uint64_t sub_24B4E4730()
{
  swift_getWitnessTable();

  return sub_24B534840();
}

char *sub_24B4E479C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6800);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_24B4E48FC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 96);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_24B4E4914(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 96);
  swift_unownedRetain();
  id v3 = v2;
  return a1;
}

char *sub_24B4E4948(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C67F8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8]) {
      memmove(v13, v14, v8 << 7);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_24B4E4A4C(uint64_t a1)
{
  return a1;
}

void sub_24B4E4AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a13)
  {
    swift_unownedRelease();
  }
}

double sub_24B4E4AFC(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 105) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_24B4E4B18@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_24B4E5538(a2, a3);
      uint64_t v10 = (char *)sub_24B534710();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_24B534740();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_24B534730();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x24B4E4D7CLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_24B4E5590(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)sub_24B534710();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_24B534740();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_24B534730();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_24B4E4D8C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  __s1[2] = *MEMORY[0x263EF8340];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_24B4E5538(a1, a2);
      char v5 = sub_24B4E5738((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      sub_24B4E5590(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v5 = sub_24B4E5738(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      sub_24B4E5590(a3, a4);
      return v5 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_8;
    default:
      __s1[0] = a1;
      LOWORD(__s1[1]) = a2;
      BYTE2(__s1[1]) = BYTE2(a2);
      BYTE3(__s1[1]) = BYTE3(a2);
      BYTE4(__s1[1]) = BYTE4(a2);
      BYTE5(__s1[1]) = BYTE5(a2);
LABEL_8:
      sub_24B4E4B18((uint64_t)__s1, a3, a4, &v14);
      sub_24B4E5590(a3, a4);
      if (!v4) {
        char v5 = v14;
      }
      return v5 & 1;
  }
}

void *sub_24B4E4FBC(void *result, int __c)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v2 = result[1];
  uint64_t v4 = result;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t __b = *result;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      double result = sub_24B4E51B0((int *)&__b, __c);
      uint64_t v5 = __b;
      unint64_t v6 = v19 | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      uint64_t __b = *result;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_24B534790();
      uint64_t v7 = v19;
      uint64_t v8 = *(void *)(__b + 16);
      uint64_t v9 = *(void *)(__b + 24);
      uint64_t v10 = sub_24B534710();
      if (!v10)
      {
        __break(1u);
        JUMPOUT(0x24B4E51A0);
      }
      uint64_t v11 = v10;
      uint64_t v12 = sub_24B534740();
      uint64_t v13 = v8 - v12;
      if (__OFSUB__(v8, v12))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v14 = __OFSUB__(v9, v8);
      int64_t v15 = v9 - v8;
      if (v14) {
        goto LABEL_14;
      }
      uint64_t v16 = sub_24B534730();
      if (v16 >= v15) {
        size_t v17 = v15;
      }
      else {
        size_t v17 = v16;
      }
      double result = memset((void *)(v11 + v13), __c, v17);
      void *v4 = __b;
      v4[1] = v7 | 0x8000000000000000;
      return result;
    case 3uLL:
      return result;
    default:
      uint64_t __b = *result;
      LOWORD(v19) = v2;
      BYTE2(v19) = BYTE2(v2);
      BYTE3(v19) = BYTE3(v2);
      BYTE4(v19) = BYTE4(v2);
      BYTE5(v19) = BYTE5(v2);
      BYTE6(v19) = BYTE6(v2);
      double result = memset(&__b, __c, BYTE6(v2));
      uint64_t v5 = __b;
      unint64_t v6 = v19 | ((unint64_t)BYTE4(v19) << 32) | ((unint64_t)BYTE5(v19) << 40) | ((unint64_t)BYTE6(v19) << 48);
LABEL_4:
      void *v4 = v5;
      v4[1] = v6;
      return result;
  }
}

char *sub_24B4E51B0(int *a1, int a2)
{
  double result = (char *)sub_24B5347C0();
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  double result = (char *)sub_24B534710();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v7 = result;
  double result = (char *)sub_24B534740();
  uint64_t v8 = v5 - (void)result;
  if (__OFSUB__(v5, result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v9 = v6 - v5;
  uint64_t v10 = sub_24B534730();
  if (v10 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v10;
  }

  return (char *)memset(&v7[v8], a2, v11);
}

char *sub_24B4E5244(char *a1, int64_t a2, char a3)
{
  double result = sub_24B4E5264(a1, a2, a3, *v3);
  *id v3 = result;
  return result;
}

char *sub_24B4E5264(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C67D8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t _s7CoreHID20HIDElementCollectionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 16);
  id v3 = *(void **)(a2 + 16);
  type metadata accessor for HIDDeviceClient();
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  char v4 = static HIDDeviceClient.== infix(_:_:)();
  swift_release();
  swift_release();
  if ((v4 & 1) == 0) {
    return 0;
  }
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v5 = v2;
  id v6 = v3;
  char v7 = sub_24B534840();

  return v7 & 1;
}

unint64_t sub_24B4E5464()
{
  unint64_t result = qword_2697C6740;
  if (!qword_2697C6740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6740);
  }
  return result;
}

uint64_t sub_24B4E54B8(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 96);
  swift_unownedRelease();

  return a1;
}

uint64_t type metadata accessor for HIDElement.Value()
{
  uint64_t result = qword_2697C71E0;
  if (!qword_2697C71E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24B4E5538(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_24B4E5590(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t _s7CoreHID10HIDElementV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 96);
  id v3 = *(void **)(a2 + 96);
  type metadata accessor for HIDDeviceClient();
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  char v4 = static HIDDeviceClient.== infix(_:_:)();
  swift_release();
  swift_release();
  if ((v4 & 1) == 0) {
    return 0;
  }
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v5 = v2;
  id v6 = v3;
  char v7 = sub_24B534840();

  return v7 & 1;
}

unint64_t sub_24B4E56E4()
{
  unint64_t result = qword_2697C6748;
  if (!qword_2697C6748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6748);
  }
  return result;
}

uint64_t sub_24B4E5738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_24B534710();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_24B534740();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_24B534730();
  sub_24B4E4B18(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_24B4E57F0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x24B4E592CLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_20;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v15 = 1;
            }
            else
            {
              sub_24B4E5538(a3, a4);
              char v15 = sub_24B4E4D8C(a1, a2, a3, a4);
            }
          }
          else
          {
            char v15 = 0;
          }
          return v15 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_21;
        case 3uLL:
          char v15 = v8 == 0;
          return v15 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t _s7CoreHID10HIDElementV5ValueV2eeoiySbAE_AEtFZ_0(_OWORD *a1, long long *a2)
{
  uint64_t v4 = type metadata accessor for HIDElement.Value();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v27 - v8;
  long long v10 = a1[5];
  v27[4] = a1[4];
  v27[5] = v10;
  v28[0] = a1[6];
  *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)a1 + 105);
  long long v11 = a1[1];
  v27[0] = *a1;
  v27[1] = v11;
  long long v12 = a1[3];
  v27[2] = a1[2];
  v27[3] = v12;
  long long v13 = *a2;
  long long v14 = a2[1];
  long long v15 = a2[3];
  v29[2] = a2[2];
  v29[3] = v15;
  v29[0] = v13;
  v29[1] = v14;
  long long v16 = a2[4];
  long long v17 = a2[5];
  long long v18 = a2[6];
  *(_OWORD *)((char *)v30 + 9) = *(long long *)((char *)a2 + 105);
  v29[5] = v17;
  v30[0] = v18;
  v29[4] = v16;
  type metadata accessor for HIDDeviceClient();
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  sub_24B4E4914((uint64_t)v27);
  sub_24B4E4914((uint64_t)v29);
  char v19 = static HIDDeviceClient.== infix(_:_:)();
  swift_release();
  swift_release();
  if ((v19 & 1) == 0)
  {
    sub_24B4E54B8((uint64_t)v29);
    sub_24B4E54B8((uint64_t)v27);
    sub_24B4E5BB8((uint64_t)a1, (uint64_t)v9);
    sub_24B4E5BB8((uint64_t)a2, (uint64_t)v7);
    goto LABEL_5;
  }
  uint64_t v20 = *(void **)&v28[0];
  uint64_t v21 = *(void **)&v30[0];
  type metadata accessor for IOHIDElement();
  sub_24B4E739C(&qword_2697C6730, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  id v22 = v20;
  id v23 = v21;
  char v24 = sub_24B534840();

  sub_24B4E54B8((uint64_t)v29);
  sub_24B4E54B8((uint64_t)v27);
  sub_24B4E5BB8((uint64_t)a1, (uint64_t)v9);
  sub_24B4E5BB8((uint64_t)a2, (uint64_t)v7);
  if ((v24 & 1) == 0)
  {
LABEL_5:
    char v25 = 0;
    goto LABEL_6;
  }
  char v25 = sub_24B4E57F0(*(void *)&v9[*(int *)(v4 + 24)], *(void *)&v9[*(int *)(v4 + 24) + 8], *(void *)&v7[*(int *)(v4 + 24)], *(void *)&v7[*(int *)(v4 + 24) + 8]);
LABEL_6:
  sub_24B4E5C1C((uint64_t)v9);
  sub_24B4E5C1C((uint64_t)v7);
  return v25 & 1;
}

uint64_t sub_24B4E5BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HIDElement.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24B4E5C1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HIDElement.Value();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24B4E5C78(uint64_t a1)
{
  return sub_24B4E16D0(a1, *(void *)(v1 + 32));
}

unint64_t sub_24B4E5CA8()
{
  unint64_t result = qword_2697C6758;
  if (!qword_2697C6758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6758);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t sub_24B4E5D60()
{
  unint64_t result = qword_2697C6768;
  if (!qword_2697C6768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6768);
  }
  return result;
}

unint64_t sub_24B4E5DB4()
{
  unint64_t result = qword_2697C6770;
  if (!qword_2697C6770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6770);
  }
  return result;
}

uint64_t sub_24B4E5E08(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_24B534750();
      swift_allocObject();
      sub_24B534720();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_24B5347D0();
        unint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_24B4E5EA8(uint64_t a1, unsigned __int8 *a2)
{
  return sub_24B4E2E00(a1, a2, *(uint64_t **)(v2 + 16));
}

unint64_t sub_24B4E5ED4()
{
  unint64_t result = qword_2697C6778;
  if (!qword_2697C6778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6778);
  }
  return result;
}

uint64_t sub_24B4E5F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HIDElement.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24B4E5F8C()
{
  unint64_t result = qword_2697C6790;
  if (!qword_2697C6790)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2697C6788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6790);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_24B4E6034()
{
  unint64_t result = qword_2697C6798;
  if (!qword_2697C6798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6798);
  }
  return result;
}

unint64_t sub_24B4E608C()
{
  unint64_t result = qword_2697C67A0;
  if (!qword_2697C67A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C67A0);
  }
  return result;
}

unint64_t sub_24B4E60E4()
{
  unint64_t result = qword_2697C67A8;
  if (!qword_2697C67A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C67A8);
  }
  return result;
}

uint64_t sub_24B4E6138()
{
  return sub_24B4E739C(&qword_2697C67B0, (void (*)(uint64_t))type metadata accessor for HIDElement.Value);
}

void destroy for HIDElementCollection(uint64_t a1)
{
  swift_unownedRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t _s7CoreHID20HIDElementCollectionVwCP_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = swift_unownedRetain();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for HIDElementCollection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = swift_unownedRetain();
  swift_unownedRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(_DWORD *)(a1 + 10) = v4;
  id v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  id v7 = v5;

  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HIDElementCollection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unownedRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  int v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for HIDElementCollection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDElementCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDElementCollection()
{
  return &type metadata for HIDElementCollection;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HIDElementCollection.CollectionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDElementCollection.CollectionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B4E64FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_24B4E6524(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_24B4E652C(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HIDElementCollection.CollectionType()
{
  return &type metadata for HIDElementCollection.CollectionType;
}

uint64_t initializeBufferWithCopyOfBuffer for HIDElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for HIDElement(uint64_t a1)
{
  swift_unownedRelease();
  uint64_t v2 = *(void **)(a1 + 96);
}

uint64_t initializeWithCopy for HIDElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = swift_unownedRetain();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(_WORD *)(a1 + 15) = *(_WORD *)(a2 + 15);
  int v4 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  unsigned int v6 = *(void **)(a2 + 96);
  *(void *)(a1 + 96) = v6;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  id v7 = v6;
  return a1;
}

uint64_t assignWithCopy for HIDElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = swift_unownedRetain();
  swift_unownedRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(_DWORD *)(a1 + 10) = v4;
  *(_WORD *)(a1 + 15) = *(_WORD *)(a2 + 15);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  int v5 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  long long v10 = *(void **)(a2 + 96);
  long long v11 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v10;
  id v12 = v10;

  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  uint64_t v13 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v13;
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(long long *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for HIDElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unownedRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(_WORD *)(a1 + 15) = *(_WORD *)(a2 + 15);
  int v4 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  int v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDElement(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 121)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 120) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 121) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 96) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 121) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDElement()
{
  return &type metadata for HIDElement;
}

uint64_t initializeBufferWithCopyOfBuffer for HIDElement.Value(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(void *)a1 = v5;
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(void *)a1 = swift_unownedRetain();
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(_DWORD *)(a1 + 10) = *(_DWORD *)((char *)a2 + 10);
    *(unsigned char *)(a1 + 14) = *((unsigned char *)a2 + 14);
    *(_WORD *)(a1 + 15) = *(_WORD *)((char *)a2 + 15);
    int v8 = *((_DWORD *)a2 + 6);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    *(_DWORD *)(a1 + 24) = v8;
    *(unsigned char *)(a1 + 28) = *((unsigned char *)a2 + 28);
    *(_WORD *)(a1 + 29) = *(_WORD *)((char *)a2 + 29);
    uint64_t v9 = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 48) = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    *(void *)(a1 + 64) = a2[8];
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    *(void *)(a1 + 80) = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    long long v10 = (void *)a2[12];
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    *(unsigned char *)(a1 + 105) = *((unsigned char *)a2 + 105);
    *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
    *(void *)(a1 + 112) = a2[14];
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(void *)(a1 + 96) = v10;
    uint64_t v14 = sub_24B534C70();
    long long v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    id v16 = v10;
    v15(v12, v13, v14);
    uint64_t v17 = *(int *)(a3 + 24);
    long long v18 = (uint64_t *)(a1 + v17);
    char v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    sub_24B4E5538(*v19, v21);
    *long long v18 = v20;
    v18[1] = v21;
  }
  return a1;
}

uint64_t destroy for HIDElement.Value(uint64_t a1, uint64_t a2)
{
  swift_unownedRelease();

  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  long long v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_24B4E5590(v7, v8);
}

uint64_t initializeWithCopy for HIDElement.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = swift_unownedRetain();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(_WORD *)(a1 + 15) = *(_WORD *)(a2 + 15);
  int v6 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  uint64_t v7 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  unint64_t v8 = *(void **)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 96) = v8;
  uint64_t v12 = sub_24B534C70();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  id v14 = v8;
  v13(v10, v11, v12);
  uint64_t v15 = *(int *)(a3 + 24);
  id v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_24B4E5538(*v17, v19);
  uint64_t *v16 = v18;
  v16[1] = v19;
  return a1;
}

uint64_t assignWithCopy for HIDElement.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = swift_unownedRetain();
  swift_unownedRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(_DWORD *)(a1 + 10) = v6;
  *(_WORD *)(a1 + 15) = *(_WORD *)(a2 + 15);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  int v7 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  uint64_t v8 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v11;
  uint64_t v12 = *(void **)(a2 + 96);
  uint64_t v13 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v12;
  id v14 = v12;

  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  uint64_t v15 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v15;
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = *(int *)(a3 + 24);
  unint64_t v21 = (uint64_t *)(a1 + v20);
  id v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_24B4E5538(*v22, v24);
  uint64_t v25 = *v21;
  unint64_t v26 = v21[1];
  *unint64_t v21 = v23;
  v21[1] = v24;
  sub_24B4E5590(v25, v26);
  return a1;
}

_OWORD *initializeWithTake for HIDElement.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  a1[6] = a2[6];
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)a2 + 105);
  long long v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  long long v8 = a2[3];
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  a1[2] = a2[2];
  a1[3] = v8;
  uint64_t v12 = sub_24B534C70();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for HIDElement.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_unownedRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(_WORD *)(a1 + 15) = *(_WORD *)(a2 + 15);
  int v6 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  long long v7 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_24B4E5590(v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDElement.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24B4E7098);
}

uint64_t sub_24B4E7098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 96);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24B534C70();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HIDElement.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24B4E715C);
}

uint64_t sub_24B4E715C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 96) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_24B534C70();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24B4E7204()
{
  uint64_t result = sub_24B534C70();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24B4E72A4()
{
  return sub_24B4E739C(&qword_2697C67C0, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
}

uint64_t sub_24B4E72EC()
{
  return sub_24B4E739C(&qword_2697C67C8, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
}

uint64_t sub_24B4E7338(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24B4E739C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B4E73E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t HIDVirtualDevice.Properties.descriptor.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_24B4E5538(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t HIDVirtualDevice.Properties.vendorID.getter()
{
  return *(unsigned int *)(v0 + 16);
}

unint64_t HIDVirtualDevice.Properties.productID.getter()
{
  return *(unsigned int *)(v0 + 20) | ((unint64_t)*(unsigned __int8 *)(v0 + 24) << 32);
}

uint64_t HIDVirtualDevice.Properties.transport.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t v3 = *(void *)(v1 + 40);
  *a1 = v2;
  a1[1] = v3;
  return sub_24B4E74A8(v2, v3);
}

uint64_t sub_24B4E74A8(uint64_t a1, unint64_t a2)
{
  if (a2 != 13) {
    return sub_24B4E74B8(a1, a2);
  }
  return a1;
}

uint64_t sub_24B4E74B8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t HIDVirtualDevice.Properties.product.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDVirtualDevice.Properties.manufacturer.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDVirtualDevice.Properties.modelNumber.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDVirtualDevice.Properties.versionNumber.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t HIDVirtualDevice.Properties.serialNumber.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDVirtualDevice.Properties.uniqueID.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDVirtualDevice.Properties.locationID.getter()
{
  return *(void *)(v0 + 144);
}

void HIDVirtualDevice.Properties.localizationCode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 153);
}

uint64_t sub_24B4E75E0()
{
  return 0;
}

uint64_t sub_24B4E75E8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B4E75F0(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 160) = a1;
  return result;
}

uint64_t (*sub_24B4E761C())()
{
  return nullsub_1;
}

__n128 HIDVirtualDevice.Properties.init(descriptor:vendorID:productID:transport:product:manufacturer:modelNumber:versionNumber:serialNumber:uniqueID:locationID:localizationCode:extraProperties:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, char a13, long long a14, long long a15, uint64_t a16, char a17, char *a18, uint64_t a19)
{
  uint64_t v20 = *a5;
  unint64_t v21 = a5[1];
  char v32 = *a18;
  sub_24B4E5538(a1, a2);
  sub_24B4E74A8(v20, v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a19)
  {
    uint64_t v24 = sub_24B4E7A1C(a19);
    swift_bridgeObjectRelease();
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v25 = 0;
  }
  *(void *)&long long v37 = a1;
  *((void *)&v37 + 1) = a2;
  *(void *)&long long v38 = __PAIR64__(a4, a3);
  BYTE8(v38) = BYTE4(a4) & 1;
  *(void *)&long long v39 = v20;
  *((void *)&v39 + 1) = v21;
  v40.n128_u64[0] = a6;
  v40.n128_u64[1] = a7;
  *(void *)&long long v41 = a8;
  *((void *)&v41 + 1) = a10;
  long long v42 = a11;
  *(void *)&long long v43 = a12;
  BYTE8(v43) = a13 & 1;
  long long v44 = a14;
  long long v45 = a15;
  *(void *)&long long v46 = a16;
  BYTE8(v46) = a17 & 1;
  BYTE9(v46) = v32;
  uint64_t v47 = v25;
  sub_24B4E78A8((uint64_t *)&v37);
  sub_24B4E5590(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24B4E7950(v20, v21);
  sub_24B4E7974((uint64_t *)&v37);
  long long v26 = v46;
  *(_OWORD *)(a9 + 128) = v45;
  *(_OWORD *)(a9 + 144) = v26;
  *(void *)(a9 + 160) = v47;
  long long v27 = v42;
  *(_OWORD *)(a9 + 64) = v41;
  *(_OWORD *)(a9 + 80) = v27;
  long long v28 = v44;
  *(_OWORD *)(a9 + 96) = v43;
  *(_OWORD *)(a9 + 112) = v28;
  long long v29 = v38;
  *(_OWORD *)a9 = v37;
  *(_OWORD *)(a9 + 16) = v29;
  __n128 result = v40;
  *(_OWORD *)(a9 + 32) = v39;
  *(__n128 *)(a9 + 48) = result;
  return result;
}

uint64_t *sub_24B4E78A8(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  sub_24B4E5538(*a1, a1[1]);
  sub_24B4E74A8(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24B4E7950(uint64_t a1, unint64_t a2)
{
  if (a2 != 13) {
    return sub_24B4E7960(a1, a2);
  }
  return a1;
}

uint64_t sub_24B4E7960(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_24B4E7974(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  sub_24B4E5590(*a1, a1[1]);
  sub_24B4E7950(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24B4E7A1C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8EE80];
  uint64_t v31 = a1 + 64;
  uint64_t v32 = MEMORY[0x263F8EE80];
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v30 = (unint64_t)(63 - v3) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v7 << 6);
      goto LABEL_25;
    }
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v30) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v31 + 8 * v12);
    int64_t v14 = v7 + 1;
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v30) {
        goto LABEL_37;
      }
      unint64_t v13 = *(void *)(v31 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v7 + 3;
        if (v7 + 3 >= v30) {
          goto LABEL_37;
        }
        unint64_t v13 = *(void *)(v31 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v7 + 4;
          if (v7 + 4 >= v30) {
            goto LABEL_37;
          }
          unint64_t v13 = *(void *)(v31 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v7 = v14;
LABEL_25:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    unint64_t v20 = *(void *)(v2 + 16);
    if (*(void *)(v2 + 24) <= v20)
    {
      uint64_t v21 = v20 + 1;
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_24B4EB0F8(v21, 1);
      uint64_t v2 = v32;
    }
    else
    {
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    sub_24B534E60();
    sub_24B534980();
    uint64_t result = sub_24B534EB0();
    uint64_t v22 = v2 + 64;
    uint64_t v23 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v2 + 64 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v24) & ~*(void *)(v2 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v22 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v8 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v22 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    uint64_t v9 = (void *)(*(void *)(v2 + 48) + 16 * v8);
    void *v9 = v18;
    v9[1] = v17;
    *(void *)(*(void *)(v2 + 56) + 8 * v8) = v19;
    ++*(void *)(v2 + 16);
    uint64_t result = swift_unknownObjectRelease();
  }
  int64_t v15 = v7 + 5;
  if (v7 + 5 >= v30)
  {
LABEL_37:
    sub_24B4ED97C();
    return v2;
  }
  unint64_t v13 = *(void *)(v31 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v7 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v30) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v31 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_24B4E7D38()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  unint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v53 = *(void *)(v0 + 80);
  unint64_t v51 = *(void *)(v0 + 72);
  unint64_t v52 = *(void *)(v0 + 88);
  char v54 = *(unsigned char *)(v0 + 104);
  uint64_t v55 = *(void *)(v0 + 96);
  unint64_t v56 = *(void *)(v0 + 120);
  uint64_t v59 = *(void *)(v0 + 128);
  uint64_t v57 = *(void *)(v0 + 112);
  unint64_t v58 = *(void *)(v0 + 136);
  uint64_t v61 = *(void *)(v0 + 144);
  char v60 = *(unsigned char *)(v0 + 152);
  char v62 = *(unsigned char *)(v0 + 153);
  uint64_t v63 = *(void *)(v0 + 160);
  uint64_t v6 = sub_24B5347F0();
  uint64_t v7 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v7;
  sub_24B4EB884(v6, 0xD000000000000010, 0x800000024B53CBD0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_24B534ED0();
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  sub_24B4EB884(v9, 0x4449726F646E6556, 0xE800000000000000, v10);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6808);
  uint64_t v11 = sub_24B534B20();
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_24B4EB884(v11, 0x49746375646F7250, 0xE900000000000044, v12);
  uint64_t v13 = v7;
  swift_bridgeObjectRelease();
  if (v2 == 13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v1;
  }
  if (v2 == 13) {
    unint64_t v15 = 12;
  }
  else {
    unint64_t v15 = v2;
  }
  uint64_t v64 = v14;
  unint64_t v65 = v15;
  sub_24B4E74A8(v1, v2);
  unint64_t v16 = sub_24B51AF64(&v64);
  unint64_t v18 = v17;
  sub_24B4E7950(v14, v15);
  uint64_t v64 = v16;
  unint64_t v65 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6810);
  uint64_t v19 = sub_24B534B20();
  swift_bridgeObjectRelease();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v13;
  sub_24B4EB884(v19, 0x726F70736E617254, 0xE900000000000074, v20);
  uint64_t v21 = v64;
  swift_bridgeObjectRelease();
  uint64_t v64 = v3;
  unint64_t v65 = v4;
  uint64_t v22 = sub_24B534B20();
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v21;
  sub_24B4EB884(v22, 0x746375646F7250, 0xE700000000000000, v23);
  uint64_t v24 = v64;
  swift_bridgeObjectRelease();
  uint64_t v64 = v5;
  unint64_t v65 = v51;
  uint64_t v25 = sub_24B534B20();
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v24;
  sub_24B4EB884(v25, 0x74636166756E614DLL, 0xEC00000072657275, v26);
  uint64_t v27 = v64;
  swift_bridgeObjectRelease();
  uint64_t v64 = v53;
  unint64_t v65 = v52;
  uint64_t v28 = sub_24B534B20();
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v27;
  sub_24B4EB884(v28, 0x6D754E6C65646F4DLL, 0xEB00000000726562, v29);
  uint64_t v30 = v64;
  swift_bridgeObjectRelease();
  uint64_t v64 = v55;
  LOBYTE(v65) = v54;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6818);
  uint64_t v31 = sub_24B534B20();
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v30;
  sub_24B4EB884(v31, 0x4E6E6F6973726556, 0xED00007265626D75, v32);
  uint64_t v33 = v64;
  swift_bridgeObjectRelease();
  uint64_t v64 = v57;
  unint64_t v65 = v56;
  uint64_t v34 = sub_24B534B20();
  char v35 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v33;
  sub_24B4EB884(v34, 0x754E6C6169726553, 0xEC0000007265626DLL, v35);
  uint64_t v36 = v64;
  swift_bridgeObjectRelease();
  uint64_t v64 = v59;
  unint64_t v65 = v58;
  uint64_t v37 = sub_24B534B20();
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v36;
  sub_24B4EB884(v37, 0xD000000000000016, 0x800000024B53CBF0, v38);
  uint64_t v39 = v64;
  swift_bridgeObjectRelease();
  uint64_t v64 = v61;
  LOBYTE(v65) = v60;
  uint64_t v40 = sub_24B534B20();
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v39;
  sub_24B4EB884(v40, 0x6E6F697461636F4CLL, 0xEA00000000004449, v41);
  uint64_t v42 = v64;
  swift_bridgeObjectRelease();
  LOBYTE(v64) = v62;
  uint64_t v64 = sub_24B51B12C((unsigned __int8 *)&v64);
  LOBYTE(v65) = v43 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6820);
  uint64_t v44 = sub_24B534B20();
  char v45 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v42;
  sub_24B4EB884(v44, 0x437972746E756F43, 0xEB0000000065646FLL, v45);
  uint64_t v46 = v64;
  swift_bridgeObjectRelease();
  uint64_t v47 = sub_24B5349F0();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  sub_24B4EB884(v47, 0x6E492D746C697542, 0xE800000000000000, v48);
  uint64_t v64 = v46;
  swift_bridgeObjectRelease();
  if (v63)
  {
    uint64_t v49 = MEMORY[0x270FA5388](v63);
    sub_24B4EBD08(v49, (void (*)(uint64_t, uint64_t, uint64_t))sub_24B4EB9F4);
    return v64;
  }
  return v46;
}

void HIDVirtualDevice.deviceReference.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 112);
}

id sub_24B4E830C()
{
  return *(id *)(v0 + 120);
}

double sub_24B4E8314@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_24B4E8324@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_24B4EBEA8(v1 + 128, a1);
}

uint64_t sub_24B4E8370(uint64_t a1)
{
  swift_beginAccess();
  sub_24B4EBF10(a1, v1 + 128);
  return swift_endAccess();
}

uint64_t (*sub_24B4E83C4())()
{
  return j__swift_endAccess;
}

id sub_24B4E841C()
{
  return *(id *)(v0 + 168);
}

uint64_t sub_24B4E8424()
{
  return 0;
}

uint64_t sub_24B4E842C()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 192);
}

uint64_t sub_24B4E8460(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 192) = a1;
  return result;
}

uint64_t (*sub_24B4E84A0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24B4E84F4()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 193);
}

uint64_t sub_24B4E8528(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 193) = a1;
  return result;
}

uint64_t (*sub_24B4E8568())()
{
  return j_j__swift_endAccess;
}

void HIDVirtualDevice.__allocating_init(properties:)(long long *a1)
{
}

void HIDVirtualDevice.init(properties:)(long long *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_24B534AB0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24B534AE0();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_24B534880();
  MEMORY[0x270FA5388](v9 - 8);
  long long v10 = a1[9];
  long long v63 = a1[8];
  long long v64 = v10;
  uint64_t v65 = *((void *)a1 + 20);
  long long v11 = a1[5];
  long long v59 = a1[4];
  long long v60 = v11;
  long long v12 = a1[7];
  long long v61 = a1[6];
  long long v62 = v12;
  long long v13 = a1[1];
  long long v55 = *a1;
  long long v14 = a1[2];
  long long v58 = a1[3];
  long long v56 = v13;
  long long v57 = v14;
  swift_defaultActor_initialize();
  *(_OWORD *)(v2 + 128) = 0u;
  *(_WORD *)(v2 + 192) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(void *)(v2 + 160) = 0;
  sub_24B4E7D38();
  unint64_t v15 = (void *)sub_24B5348C0();
  swift_bridgeObjectRelease();
  unint64_t v16 = (void *)MEMORY[0x24C5D3570](0, v15, 1);

  if (!v16) {
    goto LABEL_4;
  }
  io_registry_entry_t v17 = IOHIDUserDeviceCopyService();
  sub_24B51CA90(v17, (uint64_t)&v51);
  if (v52)
  {

LABEL_4:
    sub_24B4E7974((uint64_t *)&v55);
    sub_24B4E73E4(v2 + 128, &qword_2697C6828);
    type metadata accessor for HIDVirtualDevice();
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
    return;
  }
  uint64_t v49 = v4;
  CFTypeRef v18 = v51;
  CFTypeRef v54 = v16;
  type metadata accessor for IOHIDUserDevice(0);
  uint64_t v20 = v19;
  id v46 = v16;
  sub_24B51B908((uint64_t)&v54, v20, (uint64_t)&v51);
  CFTypeRef v21 = v51;
  *(void *)(v2 + 112) = v18;
  *(void *)(v2 + 120) = v21;
  unint64_t v48 = sub_24B4EBFB0();
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C67D0);
  uint64_t v22 = swift_allocObject();
  long long v47 = xmmword_24B5359C0;
  *(_OWORD *)(v22 + 16) = xmmword_24B5359C0;
  uint64_t v23 = MEMORY[0x263F8E9C0];
  *(void *)(v22 + 56) = MEMORY[0x263F8E970];
  *(void *)(v22 + 64) = v23;
  *(void *)(v22 + 32) = v18;
  sub_24B534960();
  sub_24B534870();
  CFTypeRef v51 = (CFTypeRef)MEMORY[0x263F8EE78];
  sub_24B4EC110(&qword_2697C6838, 255, MEMORY[0x263F8F198]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6840);
  sub_24B4EBFF0();
  sub_24B534BA0();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F138], v49);
  *(void *)(v2 + 168) = sub_24B534AF0();
  uint64_t v24 = (__IOHIDUserDevice *)*(id *)(v2 + 120);
  uint64_t v25 = (__CFString *)sub_24B534950();
  CFTypeRef v26 = IOHIDUserDeviceCopyProperty(v24, v25);

  if (v26)
  {
    CFTypeRef v51 = v26;
    swift_dynamicCast();
    uint64_t v27 = v53;
    uint64_t v28 = (__IOHIDUserDevice *)*(id *)(v2 + 120);
    char v29 = (__CFString *)sub_24B534950();
    CFTypeRef v30 = IOHIDUserDeviceCopyProperty(v28, v29);

    if (v30)
    {
      CFTypeRef v54 = v30;
      int v31 = swift_dynamicCast();
      int v32 = v50;
      int v33 = v31 ^ 1;
      if (!v31) {
        int v32 = 0;
      }
    }
    else
    {
      int v32 = 0;
      int v33 = 1;
    }
    uint64_t v34 = v46;
    uint64_t v35 = MEMORY[0x263F8E970];
    uint64_t v36 = MEMORY[0x263F8E9C0];
    HIDUsage.init(page:usage:)(v32 | (v33 << 16), v27, (uint64_t)&v54);
    int v37 = (int)v54;
    char v38 = BYTE4(v54);
    CFTypeRef v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    sub_24B534BD0();
    sub_24B534990();
    BYTE4(v54) = v38;
    LODWORD(v54) = v37;
    sub_24B4E5464();
    sub_24B534DB0();
    sub_24B534990();
    swift_bridgeObjectRelease();
    sub_24B534990();
    LODWORD(v54) = v56;
    sub_24B534DB0();
    sub_24B534990();
    swift_bridgeObjectRelease();
    sub_24B534990();
    sub_24B4E7974((uint64_t *)&v55);
    int v39 = DWORD1(v56);
    if (BYTE8(v56)) {
      int v39 = 0;
    }
    LODWORD(v54) = v39;
    sub_24B534DB0();
    sub_24B534990();
    swift_bridgeObjectRelease();
    sub_24B534990();
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = v47;
    uint64_t v41 = *(void *)(v2 + 112);
    *(void *)(v40 + 56) = v35;
    *(void *)(v40 + 64) = v36;
    *(void *)(v40 + 32) = v41;
    uint64_t v42 = sub_24B534960();
    uint64_t v44 = v43;

    swift_bridgeObjectRelease();
    *(void *)(v2 + 176) = v42;
    *(void *)(v2 + 184) = v44;
  }
  else
  {
    __break(1u);
  }
}

uint64_t HIDVirtualDevice.deinit()
{
  swift_beginAccess();
  *(unsigned char *)(v0 + 193) = 1;
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 192) != 1) {
    goto LABEL_3;
  }
  IOHIDUserDeviceCancel(*(IOHIDUserDeviceRef *)(v0 + 120));
  uint64_t v1 = *(NSObject **)(v0 + 168);
  v4[4] = nullsub_1;
  v4[5] = 0;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 1107296256;
  v4[2] = sub_24B4E8E84;
  v4[3] = &block_descriptor;
  uint64_t v2 = _Block_copy(v4);
  swift_release();
  dispatch_sync(v1, v2);
  _Block_release(v2);
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if (result)
  {
    __break(1u);
  }
  else
  {
LABEL_3:

    sub_24B4E73E4(v0 + 128, &qword_2697C6828);
    swift_bridgeObjectRelease();
    swift_defaultActor_destroy();
    return v0;
  }
  return result;
}

uint64_t sub_24B4E8E84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t HIDVirtualDevice.__deallocating_deinit()
{
  HIDVirtualDevice.deinit();

  return MEMORY[0x270FA2418](v0);
}

uint64_t sub_24B4E8ED8(uint64_t a1)
{
  uint64_t v3 = *(__IOHIDUserDevice **)(v1 + 120);
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  long long v14 = (uint64_t (*)(void))sub_24B4EC09C;
  uint64_t v15 = v4;
  uint64_t v10 = MEMORY[0x263EF8330];
  uint64_t v11 = 1107296256;
  long long v12 = sub_24B4E9A64;
  long long v13 = &block_descriptor_4;
  uint64_t v5 = _Block_copy(&v10);
  swift_release();
  IOHIDUserDeviceRegisterSetReportBlock(v3, v5);
  _Block_release(v5);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  long long v14 = (uint64_t (*)(void))sub_24B4EC0A4;
  uint64_t v15 = v6;
  uint64_t v10 = MEMORY[0x263EF8330];
  uint64_t v11 = 1107296256;
  long long v12 = sub_24B4EA264;
  long long v13 = &block_descriptor_8;
  uint64_t v7 = _Block_copy(&v10);
  swift_release();
  IOHIDUserDeviceRegisterGetReportBlock(v3, v7);
  _Block_release(v7);
  long long v14 = nullsub_1;
  uint64_t v15 = 0;
  uint64_t v10 = MEMORY[0x263EF8330];
  uint64_t v11 = 1107296256;
  long long v12 = sub_24B4EA2E8;
  long long v13 = &block_descriptor_11;
  uint64_t v8 = _Block_copy(&v10);
  IOHIDUserDeviceSetCancelHandler(v3, v8);
  _Block_release(v8);
  IOHIDUserDeviceSetDispatchQueue(v3, *(dispatch_queue_t *)(v1 + 168));
  IOHIDUserDeviceActivate(v3);
  (*(void (**)(uint64_t))(*(void *)v1 + 176))(1);
  sub_24B4EC0AC(a1, (uint64_t)&v10);
  return (*(uint64_t (**)(uint64_t *))(*(void *)v1 + 152))(&v10);
}

uint64_t sub_24B4E9134(int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68B0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24B5347B0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return *(unsigned int *)sub_24B51B328();
  }
  uint64_t v16 = Strong;
  int v31 = a1;
  int v32 = a2;
  dispatch_semaphore_t v30 = dispatch_semaphore_create(0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F06F00], v11);
  sub_24B5347A0();
  if (a4)
  {
    sub_24B534750();
    swift_allocObject();
    swift_retain();
    uint64_t v17 = sub_24B5346F0();
    a4 = sub_24B4ED754(v17, a4);
    unint64_t v19 = v18;
    swift_release();
  }
  else
  {
    CFTypeRef v21 = (void (*)(uint64_t, void))sub_24B5347A0();
    v21(a3, 0);
    swift_release();
    swift_release();
    unint64_t v19 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  type metadata accessor for HIDVirtualDevice.Context();
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  uint64_t v23 = sub_24B534A40();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 1, 1, v23);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 32) = v16;
  int v25 = v32;
  *(_DWORD *)(v24 + 40) = v31;
  *(_DWORD *)(v24 + 44) = v25;
  *(void *)(v24 + 48) = a4;
  *(void *)(v24 + 56) = v19;
  dispatch_semaphore_t v26 = v30;
  *(void *)(v24 + 64) = v22;
  *(void *)(v24 + 72) = v26;
  swift_retain();
  sub_24B4E5538(a4, v19);
  swift_retain();
  uint64_t v27 = v26;
  sub_24B4E98B8((uint64_t)v10, (uint64_t)&unk_2697C68E0, v24);
  swift_release();
  sub_24B534AC0();
  swift_release();
  sub_24B4E5590(a4, v19);

  uint64_t v20 = *(unsigned int *)(v22 + 16);
  swift_release();
  return v20;
}

uint64_t sub_24B4E9478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 80) = v11;
  *(void *)(v8 + 88) = v12;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  *(_DWORD *)(v8 + 128) = a5;
  *(_DWORD *)(v8 + 132) = a6;
  *(void *)(v8 + 56) = a4;
  uint64_t v9 = (*(void *)a4 + 144) & 0xFFFFFFFFFFFFLL | 0x19E000000000000;
  *(void *)(v8 + 96) = *(void *)(*(void *)a4 + 144);
  *(void *)(v8 + 104) = v9;
  return MEMORY[0x270FA2498](sub_24B4E94C8, a4, 0);
}

uint64_t sub_24B4E94C8()
{
  (*(void (**)(void))(v0 + 96))();
  return MEMORY[0x270FA2498](sub_24B4E9538, 0, 0);
}

void sub_24B4E9538()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = *(unsigned int *)(v0 + 128);
  unsigned int v3 = *(_DWORD *)(v0 + 132);
  uint64_t v4 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  sub_24B51AAD8(v2, (char *)(v0 + 140));
  if (v3 > 0xFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  HIDReportID.init(rawValue:)(*(unsigned int *)(v0 + 132), (unsigned char *)(v0 + 136));
  char v5 = *(unsigned char *)(v0 + 137);
  *(unsigned char *)(v0 + 138) = *(unsigned char *)(v0 + 136);
  *(unsigned char *)(v0 + 139) = v5;
  uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 8)
                                                                                           + **(int **)(v4 + 8));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_24B4E96AC;
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 56);
  v10(v9, v0 + 140, v0 + 138, v7, v8, v1, v4);
}

uint64_t sub_24B4E96AC()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24B4E9828;
  }
  else {
    uint64_t v2 = sub_24B4E97C0;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24B4E97C0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_24B534AD0();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24B4E9828()
{
  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = v0[10];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  int v3 = sub_24B51B5E0(v1);

  *(_DWORD *)(v2 + 16) = v3;
  sub_24B534AD0();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_24B4E98B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534A40();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_24B534A30();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_24B4E73E4(a1, &qword_2697C68B0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_24B534A00();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_24B4E9A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24B4EA26C(a1, a2, a3, a4, a5);
}

uint64_t sub_24B4E9A6C(int a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68B0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return *(unsigned int *)sub_24B51B328();
  }
  uint64_t v12 = Strong;
  dispatch_semaphore_t v13 = dispatch_semaphore_create(0);
  uint64_t v14 = *a4;
  _s7CoreHID16HIDVirtualDeviceC7ContextCMa_0();
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = v14;
  *(void *)(v15 + 32) = a3;
  uint64_t v16 = sub_24B534A40();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  *(void *)(v17 + 32) = v12;
  *(_DWORD *)(v17 + 40) = a1;
  *(_DWORD *)(v17 + 44) = a2;
  *(void *)(v17 + 48) = v15;
  *(void *)(v17 + 56) = v13;
  swift_retain();
  swift_retain();
  unint64_t v18 = v13;
  sub_24B4E98B8((uint64_t)v10, (uint64_t)&unk_2697C68C0, v17);
  swift_release();
  sub_24B534AC0();
  *a4 = *(void *)(v15 + 24);
  swift_release();

  uint64_t v19 = *(unsigned int *)(v15 + 16);
  swift_release();
  return v19;
}

uint64_t sub_24B4E9C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  *(_DWORD *)(v8 + 128) = a5;
  *(_DWORD *)(v8 + 132) = a6;
  *(void *)(v8 + 56) = a4;
  uint64_t v9 = (*(void *)a4 + 144) & 0xFFFFFFFFFFFFLL | 0x19E000000000000;
  *(void *)(v8 + 80) = *(void *)(*(void *)a4 + 144);
  *(void *)(v8 + 88) = v9;
  return MEMORY[0x270FA2498](sub_24B4E9C80, a4, 0);
}

uint64_t sub_24B4E9C80()
{
  (*(void (**)(void))(v0 + 80))();
  return MEMORY[0x270FA2498](sub_24B4E9CF0, 0, 0);
}

void sub_24B4E9CF0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = *(unsigned int *)(v0 + 128);
  unsigned int v3 = *(_DWORD *)(v0 + 132);
  uint64_t v4 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  sub_24B51AAD8(v2, (char *)(v0 + 140));
  if (v3 > 0xFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = *(void *)(v0 + 64);
  HIDReportID.init(rawValue:)(*(unsigned int *)(v0 + 132), (unsigned char *)(v0 + 136));
  *(unsigned char *)(v0 + 138) = *(unsigned char *)(v0 + 136);
  *(unsigned char *)(v0 + 139) = *(unsigned char *)(v0 + 137);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16)
                                                                                 + **(int **)(v4 + 16));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_24B4E9E6C;
  uint64_t v8 = *(void *)(v0 + 56);
  v9(v8, v0 + 140, v0 + 138, v6, v1, v4);
}

uint64_t sub_24B4E9E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_24B4EA1D4;
  }
  else {
    uint64_t v5 = sub_24B4E9F84;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_24B4E9F84()
{
  unint64_t v1 = *(void *)(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v2 = 0;
  switch(v1 >> 62)
  {
    case 1uLL:
      int v3 = *(_DWORD *)(v0 + 104);
      int v4 = *(_DWORD *)(v0 + 108);
      BOOL v5 = __OFSUB__(v4, v3);
      LODWORD(v2) = v4 - v3;
      if (v5)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        JUMPOUT(0x24B4EA1B4);
      }
      uint64_t v2 = (int)v2;
LABEL_6:
      if (*(void *)(*(void *)(v0 + 64) + 24) >= v2)
      {
        switch(v1 >> 62)
        {
          case 1uLL:
            uint64_t v15 = *(void *)(v0 + 104);
            if (__OFSUB__(HIDWORD(v15), v15)) {
              goto LABEL_25;
            }
            unint64_t v16 = *(void *)(v0 + 112);
            uint64_t v14 = HIDWORD(v15) - (int)v15;
            sub_24B534830();
            uint64_t v17 = v15;
            unint64_t v18 = v16;
            goto LABEL_18;
          case 2uLL:
            uint64_t v19 = *(void *)(v0 + 104);
            if (__OFSUB__(*(void *)(v19 + 24), *(void *)(v19 + 16))) {
              goto LABEL_26;
            }
            unint64_t v20 = *(void *)(v0 + 112);
            sub_24B534830();
            uint64_t v22 = *(void *)(v19 + 16);
            uint64_t v21 = *(void *)(v19 + 24);
            sub_24B4E5590(v19, v20);
            uint64_t v14 = v21 - v22;
            if (!__OFSUB__(v21, v22)) {
              goto LABEL_19;
            }
            __break(1u);
LABEL_16:
            uint64_t v14 = 0;
            unint64_t v13 = *(void *)(v0 + 112);
LABEL_17:
            uint64_t v23 = *(void *)(v0 + 104);
            sub_24B534830();
            uint64_t v17 = v23;
            unint64_t v18 = v13;
LABEL_18:
            sub_24B4E5590(v17, v18);
LABEL_19:
            *(void *)(*(void *)(v0 + 64) + 24) = v14;
            break;
          case 3uLL:
            goto LABEL_16;
          default:
            unint64_t v13 = *(void *)(v0 + 112);
            uint64_t v14 = BYTE6(v13);
            goto LABEL_17;
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v0 + 104);
        unint64_t v9 = *(void *)(v0 + 112);
        sub_24B4ED390();
        uint64_t v10 = (void *)swift_allocError();
        *(_DWORD *)uint64_t v11 = 9;
        *(unsigned char *)(v11 + 4) = 1;
        swift_willThrow();
        sub_24B4E5590(v8, v9);
        uint64_t v12 = *(void *)(v0 + 64);
        LODWORD(v9) = sub_24B51B5E0(v10);

        *(_DWORD *)(v12 + 16) = v9;
      }
      sub_24B534AD0();
      uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
      return v24();
    case 2uLL:
      uint64_t v6 = *(void *)(*(void *)(v0 + 104) + 16);
      uint64_t v7 = *(void *)(*(void *)(v0 + 104) + 24);
      BOOL v5 = __OFSUB__(v7, v6);
      uint64_t v2 = v7 - v6;
      if (!v5) {
        goto LABEL_6;
      }
      goto LABEL_24;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v2 = *(unsigned __int8 *)(v0 + 118);
      goto LABEL_6;
  }
}

uint64_t sub_24B4EA1D4()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  unint64_t v1 = (void *)v0[15];
  uint64_t v2 = v0[8];
  int v3 = sub_24B51B5E0(v1);

  *(_DWORD *)(v2 + 16) = v3;
  sub_24B534AD0();
  int v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_24B4EA264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24B4EA26C(a1, a2, a3, a4, a5);
}

uint64_t sub_24B4EA26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v10 = v9(a2, a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t sub_24B4EA2E8(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_24B4EA32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](sub_24B4EA350, v3, 0);
}

uint64_t sub_24B4EA350()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
  uint64_t v5 = swift_slowAlloc();
  v0[6] = v5;
  sub_24B4EC110(&qword_2697C6860, v6, (void (*)(uint64_t))type metadata accessor for HIDVirtualDevice);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  v7[2] = v5;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v1;
  v7[6] = v2;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_24B4EA500;
  return MEMORY[0x270FA2360]();
}

uint64_t sub_24B4EA500()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_24B4EA694;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_task_dealloc();
    uint64_t v4 = sub_24B4EA628;
    uint64_t v3 = v5;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_24B4EA628()
{
  MEMORY[0x24C5D3C50](*(void *)(v0 + 48), -1, -1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24B4EA694()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc();
  MEMORY[0x24C5D3C50](v1, -1, -1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_24B4EA708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    sub_24B51B3AC(a2, (uint64_t)&v13);
    if (v15)
    {
      sub_24B534A20();
    }
    else
    {
      unint64_t v9 = v13 | ((unint64_t)v14 << 32);
      sub_24B4ED390();
      uint64_t v10 = swift_allocError();
      *(_DWORD *)uint64_t v11 = v9;
      *(unsigned char *)(v11 + 4) = BYTE4(v9) & 1;
      uint64_t v12 = v10;
      sub_24B534A10();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24B4EA864(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t HIDVirtualDevice.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24B4EA88C()
{
  return v0;
}

uint64_t static HIDVirtualDevice.== infix(_:_:)()
{
  return sub_24B534840() & 1;
}

uint64_t sub_24B4EA92C()
{
  return sub_24B534840() & 1;
}

void HIDVirtualDevice.hash(into:)()
{
  uint64_t v1 = *(void **)(v0 + 120);
  type metadata accessor for IOHIDUserDevice(0);
  sub_24B4EC110(&qword_2697C6868, 255, type metadata accessor for IOHIDUserDevice);
  id v2 = v1;
  sub_24B534850();
}

uint64_t HIDVirtualDevice.hashValue.getter()
{
  sub_24B534E60();
  uint64_t v1 = *(void **)(v0 + 120);
  type metadata accessor for IOHIDUserDevice(0);
  sub_24B4EC110(&qword_2697C6868, 255, type metadata accessor for IOHIDUserDevice);
  id v2 = v1;
  sub_24B534850();

  return sub_24B534EB0();
}

uint64_t sub_24B4EAB18()
{
  uint64_t v1 = *v0;
  sub_24B534E60();
  id v2 = *(void **)(v1 + 120);
  type metadata accessor for IOHIDUserDevice(0);
  sub_24B4EC110(&qword_2697C6868, 255, type metadata accessor for IOHIDUserDevice);
  id v3 = v2;
  sub_24B534850();

  return sub_24B534EB0();
}

void sub_24B4EABC8()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 120);
  type metadata accessor for IOHIDUserDevice(0);
  sub_24B4EC110(&qword_2697C6868, 255, type metadata accessor for IOHIDUserDevice);
  id v2 = v1;
  sub_24B534850();
}

uint64_t sub_24B4EAC7C()
{
  uint64_t v1 = *v0;
  sub_24B534E60();
  id v2 = *(void **)(v1 + 120);
  type metadata accessor for IOHIDUserDevice(0);
  sub_24B4EC110(&qword_2697C6868, 255, type metadata accessor for IOHIDUserDevice);
  id v3 = v2;
  sub_24B534850();

  return sub_24B534EB0();
}

uint64_t HIDVirtualDevice.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24B4EAD58()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24B4EAD8C()
{
  return MEMORY[0x270FA0228](v0, 20, 7);
}

uint64_t sub_24B4EAD9C()
{
  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t sub_24B4EADAC()
{
  return sub_24B534860();
}

uint64_t sub_24B4EADF8()
{
  return sub_24B534850();
}

uint64_t sub_24B4EAE50()
{
  return sub_24B534EB0();
}

uint64_t sub_24B4EAEB8()
{
  swift_getWitnessTable();

  return sub_24B534840();
}

uint64_t sub_24B4EAF24(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_24B4EB000;
  return v6(a1);
}

uint64_t sub_24B4EB000()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_24B4EB0F8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68F0);
  char v36 = a2;
  uint64_t v6 = sub_24B534D80();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_24B534E60();
    sub_24B534980();
    uint64_t result = sub_24B534EB0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_24B4EB410(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68E8);
  char v36 = a2;
  uint64_t v6 = sub_24B534D80();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_24B534E60();
    sub_24B534980();
    uint64_t result = sub_24B534EB0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_24B4EB728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_24B534DD0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_24B534DD0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_24B4EB80C(uint64_t a1, uint64_t a2)
{
  sub_24B534E60();
  sub_24B534980();
  uint64_t v4 = sub_24B534EB0();

  return sub_24B4EB728(a1, a2, v4);
}

uint64_t sub_24B4EB884(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_24B4EB80C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_24B4EBAA8();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_24B4EB410(v15, a4 & 1);
  unint64_t v21 = sub_24B4EB80C(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_24B534E00();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_24B4EB9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(uint64_t **)(v3 + 16);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v7;
  *uint64_t v7 = 0x8000000000000000;
  sub_24B4EB884(a3, a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v7 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void *sub_24B4EBAA8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68E8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_24B534D70();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24B4EBC60(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = sub_24B534710();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = sub_24B534740();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = sub_24B534730();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  return a3(v7, v13);
}

uint64_t sub_24B4EBD08(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    a2(v14, v15, v16);
    swift_unknownObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_24B4EBEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6828);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24B4EBF10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6828);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for HIDVirtualDevice()
{
  return self;
}

void type metadata accessor for IOHIDUserDevice(uint64_t a1)
{
}

unint64_t sub_24B4EBFB0()
{
  unint64_t result = qword_2697C6830;
  if (!qword_2697C6830)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2697C6830);
  }
  return result;
}

unint64_t sub_24B4EBFF0()
{
  unint64_t result = qword_2697C6848;
  if (!qword_2697C6848)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2697C6840);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6848);
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_24B4EC064()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_24B4EC09C(int a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_24B4E9134(a1, a2, a3, a4);
}

uint64_t sub_24B4EC0A4(int a1, int a2, uint64_t a3, uint64_t *a4)
{
  return sub_24B4E9A6C(a1, a2, a3, a4);
}

uint64_t sub_24B4EC0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24B4EC110(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B4EC158(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  unint64_t v5 = v1[4];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(v4, a1, v6);
  switch(v5 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < (int)v3)
      {
        __break(1u);
        JUMPOUT(0x24B4EC3ECLL);
      }
      swift_retain();
      sub_24B4EBC60((int)v3, v3 >> 32, (uint64_t (*)(uint64_t, uint64_t))sub_24B4ED29C);
      uint64_t result = sub_24B4E5590(v3, v5);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v9 = *(void *)(v3 + 24);
      swift_retain();
      swift_retain();
      sub_24B4EBC60(v8, v9, (uint64_t (*)(uint64_t, uint64_t))sub_24B4ED29C);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(&v14[1], 0, 14);
      sub_24B51B714();
      goto LABEL_7;
    default:
      v14[1] = v3;
      LOWORD(v14[2]) = v5;
      BYTE2(v14[2]) = BYTE2(v5);
      BYTE3(v14[2]) = BYTE3(v5);
      BYTE4(v14[2]) = BYTE4(v5);
      BYTE5(v14[2]) = BYTE5(v5);
      sub_24B51B714();
LABEL_7:
      uint64_t v10 = IOHIDUserDeviceHandleReportAsyncWithTimeStamp();
      uint64_t result = sub_24B51B3AC(v10, (uint64_t)v14);
      if ((v14[0] & 0x10000000000) == 0)
      {
        unint64_t v11 = LODWORD(v14[0]) | ((unint64_t)BYTE4(v14[0]) << 32);
        sub_24B4ED390();
        uint64_t v12 = swift_allocError();
        *(_DWORD *)uint64_t v13 = v11;
        *(unsigned char *)(v13 + 4) = BYTE4(v11) & 1;
        v14[0] = v12;
        uint64_t result = sub_24B534A10();
      }
      break;
  }
  return result;
}

uint64_t sub_24B4EC3FC(uint64_t a1, uint64_t a2)
{
  return sub_24B4EC110(&qword_2697C6870, a2, (void (*)(uint64_t))type metadata accessor for HIDVirtualDevice);
}

uint64_t method lookup function for HIDVirtualDevice(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HIDVirtualDevice);
}

uint64_t dispatch thunk of HIDVirtualDevice.__allocating_init(properties:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of HIDVirtualDevice.activate(delegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of HIDVirtualDevice.dispatchInputReport(data:timestamp:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 232)
                                                          + **(int **)(*(void *)v3 + 232));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_24B4EC5B0;
  return v10(a1, a2, a3);
}

uint64_t sub_24B4EC5B0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t destroy for HIDVirtualDevice.Properties(uint64_t *a1)
{
  sub_24B4E5590(*a1, a1[1]);
  if ((unint64_t)a1[5] >= 0xE) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HIDVirtualDevice.Properties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_24B4E5538(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  int v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v6;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  unint64_t v7 = (void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  if (v8 > 0xD)
  {
    *(void *)(a1 + 32) = *v7;
    *(void *)(a1 + 40) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
  }
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HIDVirtualDevice.Properties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_24B4E5538(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_24B4E5590(v6, v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v8;
  unint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void *)(a2 + 40);
  if (v9 == 13)
  {
    if (v10 >= 0xE) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  if (v10 == 13)
  {
    sub_24B4ECA60(a1 + 32);
    goto LABEL_11;
  }
  if (v9 >= 0xD)
  {
    if (v10 >= 0xD)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_24B4ECA0C(a1 + 32);
    goto LABEL_11;
  }
  if (v10 < 0xD)
  {
LABEL_11:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_12;
  }
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
LABEL_12:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24B4ECA0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_24B4ECA60(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for HIDVirtualDevice.Properties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24B4E5590(v4, v5);
  int v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v6;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  unint64_t v7 = (void *)(a2 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a2 + 40);
  if (v8 != 13)
  {
    if (v9 == 13)
    {
      sub_24B4ECA60(a1 + 32);
    }
    else if (v8 >= 0xD)
    {
      if (v9 >= 0xD)
      {
        *(void *)(a1 + 32) = *v7;
        *(void *)(a1 + 40) = v9;
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      sub_24B4ECA0C(a1 + 32);
    }
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
LABEL_8:
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDVirtualDevice.Properties(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 168)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDVirtualDevice.Properties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 168) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDVirtualDevice.Properties()
{
  return &type metadata for HIDVirtualDevice.Properties;
}

void *initializeBufferWithCopyOfBuffer for HIDVirtualDevice.Properties.Property(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for HIDVirtualDevice.Properties.Property()
{
  return swift_unknownObjectRelease();
}

void *assignWithCopy for HIDVirtualDevice.Properties.Property(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *assignWithTake for HIDVirtualDevice.Properties.Property(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDVirtualDevice.Properties.Property(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDVirtualDevice.Properties.Property(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDVirtualDevice.Properties.Property()
{
  return &type metadata for HIDVirtualDevice.Properties.Property;
}

uint64_t dispatch thunk of HIDVirtualDeviceDelegate.hidVirtualDevice(_:receivedSetReportRequestOfType:id:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 + 8)
                                                                                              + **(int **)(a7 + 8));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_24B4ED9E4;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of HIDVirtualDeviceDelegate.hidVirtualDevice(_:receivedGetReportRequestOfType:id:maxSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 16)
                                                                                     + **(int **)(a6 + 16));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_24B4ED0B0;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_24B4ED0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t type metadata accessor for HIDVirtualDevice.Context()
{
  return self;
}

uint64_t _s7CoreHID16HIDVirtualDeviceC7ContextCMa_0()
{
  return self;
}

uint64_t sub_24B4ED204()
{
  return sub_24B4EC110(&qword_2697C6898, 255, type metadata accessor for IOHIDUserDevice);
}

uint64_t sub_24B4ED250()
{
  return sub_24B4EC110(&qword_2697C68A0, 255, type metadata accessor for IOHIDUserDevice);
}

uint64_t sub_24B4ED29C(uint64_t a1)
{
  uint64_t result = sub_24B51B714();
  if (a1)
  {
    uint64_t v3 = IOHIDUserDeviceHandleReportAsyncWithTimeStamp();
    uint64_t result = sub_24B51B3AC(v3, (uint64_t)&v6);
    if ((v8 & 1) == 0)
    {
      unint64_t v4 = v6 | ((unint64_t)v7 << 32);
      sub_24B4ED390();
      swift_allocError();
      *(_DWORD *)uint64_t v5 = v4;
      *(unsigned char *)(v5 + 4) = BYTE4(v4) & 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
      return sub_24B534A10();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24B4ED390()
{
  unint64_t result = qword_2697C68A8;
  if (!qword_2697C68A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C68A8);
  }
  return result;
}

uint64_t sub_24B4ED3E4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_24B4ED434()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 40);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_24B4ED9E4;
  *(_OWORD *)(v3 + 64) = v4;
  *(void *)(v3 + 128) = v5;
  *(void *)(v3 + 56) = v2;
  uint64_t v6 = (*(void *)v2 + 144) & 0xFFFFFFFFFFFFLL | 0x19E000000000000;
  *(void *)(v3 + 80) = *(void *)(*(void *)v2 + 144);
  *(void *)(v3 + 88) = v6;
  return MEMORY[0x270FA2498](sub_24B4E9C80, v2, 0);
}

uint64_t sub_24B4ED50C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24B4ED544(uint64_t a1)
{
  long long v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_24B4ED9E4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_2697C68C8 + dword_2697C68C8);
  return v6(a1, v4);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_24B4ED690(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_24B4ED754(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    sub_24B5347D0();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    long long v4 = (unsigned char *)sub_24B534710();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = sub_24B534730();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      unsigned __int8 v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = sub_24B4ED690(v4, v8);
      swift_release();
      return v3;
    }
    unint64_t result = sub_24B534740();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24B4ED83C()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_24B4E5590(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_24B4ED894()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *(void *)(v0 + 40);
  long long v7 = *(_OWORD *)(v0 + 64);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_24B4EC5B0;
  *(_OWORD *)(v5 + 80) = v7;
  *(void *)(v5 + 64) = v3;
  *(void *)(v5 + 72) = v4;
  *(void *)(v5 + 128) = v6;
  *(void *)(v5 + 56) = v2;
  uint64_t v8 = (*(void *)v2 + 144) & 0xFFFFFFFFFFFFLL | 0x19E000000000000;
  *(void *)(v5 + 96) = *(void *)(*(void *)v2 + 144);
  *(void *)(v5 + 104) = v8;
  return MEMORY[0x270FA2498](sub_24B4E94C8, v2, 0);
}

uint64_t sub_24B4ED97C()
{
  return swift_release();
}

void type metadata accessor for IOHIDReportType(uint64_t a1)
{
}

void sub_24B4ED998(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void sub_24B4EDA08(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = -2;
}

void HIDDeviceManager.DeviceMatchingCriteria.primaryUsage.getter(uint64_t a1@<X8>)
{
  int v2 = *v1;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)v1 + 4);
  *(_DWORD *)a1 = v2;
}

int *HIDDeviceManager.DeviceMatchingCriteria.primaryUsage.setter(int *result)
{
  int v2 = *result;
  *(unsigned char *)(v1 + 4) = *((unsigned char *)result + 4);
  *(_DWORD *)uint64_t v1 = v2;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.primaryUsage.modify())()
{
  return nullsub_1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.deviceUsages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.deviceUsages.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.deviceUsages.modify())()
{
  return nullsub_1;
}

unint64_t HIDDeviceManager.DeviceMatchingCriteria.vendorID.getter()
{
  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.vendorID.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  *(unsigned char *)(v1 + 20) = BYTE4(result) & 1;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.vendorID.modify())()
{
  return nullsub_1;
}

unint64_t HIDDeviceManager.DeviceMatchingCriteria.productID.getter()
{
  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.productID.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  *(unsigned char *)(v1 + 28) = BYTE4(result) & 1;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.productID.modify())()
{
  return nullsub_1;
}

double sub_24B4EDB54@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_24B535FA0;
  return result;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.transport.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t v3 = *(void *)(v1 + 40);
  *a1 = v2;
  a1[1] = v3;
  return sub_24B4E74A8(v2, v3);
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.transport.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_24B4E7950(*(void *)(v1 + 32), *(void *)(v1 + 40));
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.transport.modify())()
{
  return nullsub_1;
}

uint64_t sub_24B4EDBC4()
{
  return 0;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.product.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.product.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.product.modify())()
{
  return nullsub_1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.manufacturer.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.manufacturer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.manufacturer.modify())()
{
  return nullsub_1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.modelNumber.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.modelNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.modelNumber.modify())()
{
  return nullsub_1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.versionNumber.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.versionNumber.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 96) = result;
  *(unsigned char *)(v2 + 104) = a2 & 1;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.versionNumber.modify())()
{
  return nullsub_1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.serialNumber.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.serialNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.serialNumber.modify())()
{
  return nullsub_1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.uniqueID.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.uniqueID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.uniqueID.modify())()
{
  return nullsub_1;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.locationID.getter()
{
  return *(void *)(v0 + 144);
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.locationID.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 144) = result;
  *(unsigned char *)(v2 + 152) = a2 & 1;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.locationID.modify())()
{
  return nullsub_1;
}

void sub_24B4EDEF0(unsigned char *a1@<X8>)
{
  *a1 = 36;
}

void HIDDeviceManager.DeviceMatchingCriteria.localizationCode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 153);
}

unsigned char *HIDDeviceManager.DeviceMatchingCriteria.localizationCode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 153) = *result;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.localizationCode.modify())()
{
  return nullsub_1;
}

uint64_t sub_24B4EDF34()
{
  return 2;
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.isBuiltIn.getter()
{
  return *(unsigned __int8 *)(v0 + 154);
}

uint64_t HIDDeviceManager.DeviceMatchingCriteria.isBuiltIn.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 154) = result;
  return result;
}

uint64_t (*HIDDeviceManager.DeviceMatchingCriteria.isBuiltIn.modify())()
{
  return nullsub_1;
}

__n128 HIDDeviceManager.DeviceMatchingCriteria.init(primaryUsage:deviceUsages:vendorID:productID:transport:product:manufacturer:modelNumber:versionNumber:serialNumber:uniqueID:locationID:localizationCode:isBuiltIn:extraProperties:)@<Q0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, char a13, long long a14, long long a15, uint64_t a16, char a17, char *a18, char a19, uint64_t a20)
{
  unint64_t v22 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  uint64_t v23 = *a5;
  unint64_t v24 = a5[1];
  char v31 = *a18;
  swift_bridgeObjectRetain();
  sub_24B4E74A8(v23, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a20)
  {
    uint64_t v25 = sub_24B4EE330(a20);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = 0;
  }
  LODWORD(v37) = v22;
  BYTE4(v37) = BYTE4(v22);
  *((void *)&v37 + 1) = a2;
  LODWORD(v38) = a3;
  BYTE4(v38) = BYTE4(a3) & 1;
  DWORD2(v38) = a4;
  BYTE12(v38) = BYTE4(a4) & 1;
  *(void *)&long long v39 = v23;
  *((void *)&v39 + 1) = v24;
  v40.n128_u64[0] = a6;
  v40.n128_u64[1] = a7;
  *(void *)&long long v41 = a8;
  *((void *)&v41 + 1) = a10;
  long long v42 = a11;
  *(void *)&long long v43 = a12;
  BYTE8(v43) = a13 & 1;
  long long v44 = a14;
  long long v45 = a15;
  *(void *)&long long v46 = a16;
  BYTE8(v46) = a17 & 1;
  BYTE9(v46) = v31;
  BYTE10(v46) = a19;
  uint64_t v47 = v25;
  sub_24B4EE1E8((uint64_t)&v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24B4E7950(v23, v24);
  swift_bridgeObjectRelease();
  sub_24B4EE28C((uint64_t)&v37);
  long long v26 = v46;
  *(_OWORD *)(a9 + 128) = v45;
  *(_OWORD *)(a9 + 144) = v26;
  *(void *)(a9 + 160) = v47;
  long long v27 = v42;
  *(_OWORD *)(a9 + 64) = v41;
  *(_OWORD *)(a9 + 80) = v27;
  long long v28 = v44;
  *(_OWORD *)(a9 + 96) = v43;
  *(_OWORD *)(a9 + 112) = v28;
  long long v29 = v38;
  *(_OWORD *)a9 = v37;
  *(_OWORD *)(a9 + 16) = v29;
  __n128 result = v40;
  *(_OWORD *)(a9 + 32) = v39;
  *(__n128 *)(a9 + 48) = result;
  return result;
}

uint64_t sub_24B4EE1E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_24B4E74A8(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24B4EE28C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  sub_24B4E7950(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24B4EE330(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8EE80];
  uint64_t v31 = a1 + 64;
  uint64_t v32 = MEMORY[0x263F8EE80];
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v30 = (unint64_t)(63 - v3) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v7 << 6);
      goto LABEL_25;
    }
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v30) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v31 + 8 * v12);
    int64_t v14 = v7 + 1;
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v30) {
        goto LABEL_37;
      }
      unint64_t v13 = *(void *)(v31 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v7 + 3;
        if (v7 + 3 >= v30) {
          goto LABEL_37;
        }
        unint64_t v13 = *(void *)(v31 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v7 + 4;
          if (v7 + 4 >= v30) {
            goto LABEL_37;
          }
          unint64_t v13 = *(void *)(v31 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v7 = v14;
LABEL_25:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    unint64_t v20 = *(void *)(v2 + 16);
    if (*(void *)(v2 + 24) <= v20)
    {
      uint64_t v21 = v20 + 1;
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_24B4F0000(v21, 1);
      uint64_t v2 = v32;
    }
    else
    {
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    sub_24B534E60();
    sub_24B534980();
    uint64_t result = sub_24B534EB0();
    uint64_t v22 = v2 + 64;
    uint64_t v23 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v2 + 64 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v24) & ~*(void *)(v2 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v22 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v8 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v22 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    unint64_t v9 = (void *)(*(void *)(v2 + 48) + 16 * v8);
    void *v9 = v18;
    v9[1] = v17;
    *(void *)(*(void *)(v2 + 56) + 8 * v8) = v19;
    ++*(void *)(v2 + 16);
    uint64_t result = swift_unknownObjectRelease();
  }
  int64_t v15 = v7 + 5;
  if (v7 + 5 >= v30)
  {
LABEL_37:
    sub_24B4ED97C();
    return v2;
  }
  unint64_t v13 = *(void *)(v31 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v7 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v30) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v31 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_24B4EE64C()
{
  unsigned int v1 = *((unsigned __int8 *)v0 + 4);
  uint64_t v2 = *v0;
  uint64_t v87 = *((void *)v0 + 1);
  char v3 = *((unsigned char *)v0 + 20);
  char v4 = *((unsigned char *)v0 + 28);
  uint64_t v78 = *((void *)v0 + 5);
  uint64_t v79 = *((void *)v0 + 4);
  uint64_t v5 = *((void *)v0 + 7);
  uint64_t v72 = *((void *)v0 + 6);
  uint64_t v73 = *((void *)v0 + 8);
  uint64_t v83 = *((void *)v0 + 9);
  uint64_t v74 = *((void *)v0 + 10);
  uint64_t v85 = *((void *)v0 + 11);
  uint64_t v70 = *((void *)v0 + 12);
  char v86 = *((unsigned char *)v0 + 104);
  uint64_t v75 = *((void *)v0 + 14);
  uint64_t v80 = *((void *)v0 + 15);
  uint64_t v6 = *((void *)v0 + 17);
  uint64_t v76 = *((void *)v0 + 16);
  uint64_t v71 = *((void *)v0 + 18);
  char v7 = *((unsigned char *)v0 + 152);
  int v81 = *((unsigned __int8 *)v0 + 154);
  char v82 = *((unsigned char *)v0 + 153);
  uint64_t v77 = *((void *)v0 + 20);
  uint64_t v8 = MEMORY[0x263F8EE80];
  uint64_t v91 = MEMORY[0x263F8EE80];
  uint64_t v9 = sub_24B534950();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_24B4EB884(v9, 0x6469766F72504F49, 0xEF7373616C437265, isUniquelyReferenced_nonNull_native);
  uint64_t v11 = v8;
  swift_bridgeObjectRelease();
  if (v1 >> 1 <= 0x7EuLL)
  {
    unint64_t v12 = v2 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v1 << 32);
    uint64_t v13 = v8;
    HIDUsage.page.getter();
    uint64_t v14 = sub_24B534EC0();
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    HIDWORD(v89) = HIDWORD(v13);
    sub_24B4EB884(v14, 0xD000000000000010, 0x800000024B53CC30, v15);
    swift_bridgeObjectRelease();
    BYTE4(v89) = BYTE4(v12);
    LODWORD(v89) = v12;
    if ((HIDUsage.usage.getter() & 0x10000) != 0)
    {
      uint64_t v11 = v13;
    }
    else
    {
      HIDUsage.usage.getter();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6920);
      uint64_t v16 = sub_24B534B20();
      char v17 = swift_isUniquelyReferenced_nonNull_native();
      sub_24B4EB884(v16, 0x557972616D697250, 0xEC00000065676173, v17);
      uint64_t v11 = v13;
      swift_bridgeObjectRelease();
    }
  }
  if ((v3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6808);
    uint64_t v18 = sub_24B534B20();
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v18, 0x4449726F646E6556, 0xE800000000000000, v19);
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = v87;
  if ((v4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6808);
    uint64_t v21 = sub_24B534B20();
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v21, 0x49746375646F7250, 0xE900000000000044, v22);
    swift_bridgeObjectRelease();
  }
  uint64_t v89 = (void *)v79;
  uint64_t v90 = v78;
  sub_24B51AF64((uint64_t *)&v89);
  if (v23)
  {
    uint64_t v24 = sub_24B534950();
    swift_bridgeObjectRelease();
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v24, 0x726F70736E617254, 0xE900000000000074, v25);
    uint64_t v11 = (uint64_t)v89;
    swift_bridgeObjectRelease();
  }
  if (v5)
  {
    uint64_t v89 = (void *)v72;
    uint64_t v90 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6810);
    uint64_t v26 = sub_24B534B20();
    uint64_t v27 = v91;
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v27;
    sub_24B4EB884(v26, 0x746375646F7250, 0xE700000000000000, v28);
    uint64_t v91 = (uint64_t)v89;
    swift_bridgeObjectRelease();
  }
  if (v83)
  {
    uint64_t v89 = (void *)v73;
    uint64_t v90 = v83;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6810);
    uint64_t v29 = sub_24B534B20();
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v29, 0x74636166756E614DLL, 0xEC00000072657275, v30);
    uint64_t v11 = (uint64_t)v89;
    swift_bridgeObjectRelease();
  }
  if (v85)
  {
    uint64_t v89 = (void *)v74;
    uint64_t v90 = v85;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6810);
    uint64_t v31 = sub_24B534B20();
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v31, 0x6D754E6C65646F4DLL, 0xEB00000000726562, v32);
    uint64_t v11 = (uint64_t)v89;
    swift_bridgeObjectRelease();
  }
  if ((v86 & 1) == 0)
  {
    uint64_t v89 = (void *)v70;
    LOBYTE(v90) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6818);
    uint64_t v33 = sub_24B534B20();
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v33, 0x4E6E6F6973726556, 0xED00007265626D75, v34);
    uint64_t v11 = (uint64_t)v89;
    swift_bridgeObjectRelease();
  }
  if (v80)
  {
    uint64_t v89 = (void *)v75;
    uint64_t v90 = v80;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6810);
    uint64_t v35 = sub_24B534B20();
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v35, 0x754E6C6169726553, 0xEC0000007265626DLL, v36);
    uint64_t v11 = (uint64_t)v89;
    swift_bridgeObjectRelease();
  }
  if (v6)
  {
    uint64_t v89 = (void *)v76;
    uint64_t v90 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6810);
    uint64_t v37 = sub_24B534B20();
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v37, 0xD000000000000016, 0x800000024B53CBF0, v38);
    uint64_t v11 = (uint64_t)v89;
    swift_bridgeObjectRelease();
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v89 = (void *)v71;
    LOBYTE(v90) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6818);
    uint64_t v39 = sub_24B534B20();
    char v40 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v11;
    sub_24B4EB884(v39, 0x6E6F697461636F4CLL, 0xEA00000000004449, v40);
    uint64_t v11 = (uint64_t)v89;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v89) = v82;
  sub_24B51B12C((unsigned __int8 *)&v89);
  if (v41)
  {
    if (v81 == 2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v42 = sub_24B534AA0();
    uint64_t v43 = v91;
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)v43;
    sub_24B4EB884(v42, 0x437972746E756F43, 0xEB0000000065646FLL, v44);
    uint64_t v91 = (uint64_t)v89;
    swift_bridgeObjectRelease();
    if (v81 == 2)
    {
LABEL_27:
      if (!v87) {
        goto LABEL_43;
      }
      goto LABEL_31;
    }
  }
  LOBYTE(v89) = v81;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6918);
  uint64_t v45 = sub_24B534B20();
  uint64_t v46 = v91;
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v89 = (void *)v46;
  sub_24B4EB884(v45, 0x6E492D746C697542, 0xE800000000000000, v47);
  uint64_t v91 = (uint64_t)v89;
  swift_bridgeObjectRelease();
  if (!v87)
  {
LABEL_43:
    if (v77)
    {
      uint64_t v67 = MEMORY[0x270FA5388](v77);
      sub_24B4F0A5C(v67, (void (*)(uint64_t, uint64_t, uint64_t))sub_24B4EB9F4);
    }
    if (*(void *)(v91 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_24B5348C0();
      swift_bridgeObjectRelease();
      char v69 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v89 = (void *)v11;
      sub_24B4EB884(v68, 0x7265706F72504F49, 0xEF686374614D7974, v69);
      uint64_t v11 = (uint64_t)v89;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v11;
  }
LABEL_31:
  uint64_t v48 = *(void *)(v87 + 16);
  if (!v48) {
    goto LABEL_43;
  }
  uint64_t v84 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6900);
  swift_bridgeObjectRetain();
  uint64_t v49 = (void *)MEMORY[0x263F8EE78];
  uint64_t v50 = 32;
  while (1)
  {
    uint64_t v51 = *(unsigned __int8 *)(v20 + v50 + 4);
    uint64_t v52 = *(unsigned int *)(v20 + v50);
    BYTE4(v89) = v51;
    LODWORD(v89) = v52;
    uint64_t v88 = (unsigned __int16)HIDUsage.page.getter();
    unsigned __int16 v53 = (void *)sub_24B534DA0();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_24B4EB80C(0x7355656369766544, 0xEF65676150656761);
    if (v55) {
      break;
    }
    v53[(result >> 6) + 8] |= 1 << result;
    long long v56 = (void *)(v53[6] + 16 * result);
    void *v56 = 0x7355656369766544;
    v56[1] = 0xEF65676150656761;
    *(void *)(v53[7] + 8 * result) = v88;
    uint64_t v57 = v53[2];
    BOOL v58 = __OFADD__(v57, 1);
    uint64_t v59 = v57 + 1;
    if (v58) {
      goto LABEL_49;
    }
    v53[2] = v59;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6908);
    swift_arrayDestroy();
    swift_release();
    BYTE4(v89) = (v52 | (unint64_t)(v51 << 32)) >> 32;
    LODWORD(v89) = v52;
    uint64_t v60 = HIDUsage.usage.getter();
    if ((v60 & 0x10000) == 0)
    {
      uint64_t v61 = (unsigned __int16)v60;
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v89 = v53;
      sub_24B4F0748(v61, 0x7355656369766544, 0xEB00000000656761, v62);
      unsigned __int16 v53 = v89;
      swift_bridgeObjectRelease();
    }
    uint64_t v20 = v87;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v49 = sub_24B4F0624(0, v49[2] + 1, 1, v49);
    }
    unint64_t v64 = v49[2];
    unint64_t v63 = v49[3];
    if (v64 >= v63 >> 1) {
      uint64_t v49 = sub_24B4F0624((void *)(v63 > 1), v64 + 1, 1, v49);
    }
    v49[2] = v64 + 1;
    v49[v64 + 4] = v53;
    v50 += 6;
    if (!--v48)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6910);
      uint64_t v65 = sub_24B5349B0();
      swift_bridgeObjectRelease();
      char v66 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v89 = (void *)v84;
      sub_24B4EB884(v65, 0xD000000000000010, 0x800000024B53CEC0, v66);
      uint64_t v11 = (uint64_t)v89;
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_24B4EF10C()
{
  uint64_t v0 = sub_24B534AB0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  char v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_24B534AE0();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = sub_24B534880();
  MEMORY[0x270FA5388](v5 - 8);
  sub_24B4F0C04(0, (unint64_t *)&qword_2697C6830);
  sub_24B534870();
  v7[1] = MEMORY[0x263F8EE78];
  sub_24B4F0C88(&qword_2697C6838, 255, MEMORY[0x263F8F198]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6840);
  sub_24B4EBFF0();
  sub_24B534BA0();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F138], v0);
  return sub_24B534AF0();
}

id sub_24B4EF348()
{
  return *(id *)(v0 + 112);
}

uint64_t HIDDeviceManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  HIDDeviceManager.init()();
  return v0;
}

uint64_t HIDDeviceManager.init()()
{
  uint64_t v1 = sub_24B534AB0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_24B534AE0();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_24B534880();
  MEMORY[0x270FA5388](v6 - 8);
  swift_defaultActor_initialize();
  sub_24B4F0C04(0, (unint64_t *)&qword_2697C6830);
  sub_24B534870();
  v8[1] = MEMORY[0x263F8EE78];
  sub_24B4F0C88(&qword_2697C6838, 255, MEMORY[0x263F8F198]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6840);
  sub_24B4EBFF0();
  sub_24B534BA0();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F138], v1);
  *(void *)(v0 + 112) = sub_24B534AF0();
  return v0;
}

uint64_t sub_24B4EF5D8(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6928);
  MEMORY[0x270FA5388](v3);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  (*(void (**)(unsigned char *, void))(v5 + 104))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], *MEMORY[0x263F8F680]);
  return sub_24B534A90();
}

void sub_24B4EF6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6950);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  IONotificationPortRef v10 = IONotificationPortCreate(*MEMORY[0x263F0EC88]);
  if (!v10) {
    __break(1u);
  }
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  type metadata accessor for HIDDeviceManager.Context();
  unint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v12+ OBJC_IVAR____TtCFFC7CoreHID16HIDDeviceManager20monitorNotificationsFT16matchingCriteriaGSaVS0_22DeviceMatchingCriteria__GVs19AsyncThrowingStreamOS0_12NotificationPs5Error__U_FGVS2_12ContinuationS3_PS4____T_L_7Context_continuation, v9, v6);
  IONotificationPortSetDispatchQueue(v11, *(dispatch_queue_t *)(a2 + 112));
  swift_retain();
  sub_24B534A50();
  uint64_t v13 = *(void *)(a3 + 16);
  if (v13)
  {
    v33[0] = v6;
    v33[1] = a1;
    swift_bridgeObjectRetain();
    long long v14 = *(_OWORD *)(a3 + 176);
    long long v44 = *(_OWORD *)(a3 + 160);
    long long v45 = v14;
    uint64_t v46 = *(void *)(a3 + 192);
    long long v15 = *(_OWORD *)(a3 + 112);
    long long v40 = *(_OWORD *)(a3 + 96);
    long long v41 = v15;
    long long v16 = *(_OWORD *)(a3 + 144);
    long long v42 = *(_OWORD *)(a3 + 128);
    long long v43 = v16;
    long long v17 = *(_OWORD *)(a3 + 48);
    long long v36 = *(_OWORD *)(a3 + 32);
    long long v37 = v17;
    long long v18 = *(_OWORD *)(a3 + 80);
    uint64_t v19 = v13 - 1;
    uint64_t v20 = 200;
    long long v38 = *(_OWORD *)(a3 + 64);
    long long v39 = v18;
    while (1)
    {
      sub_24B4EE64C();
      uint64_t v21 = (void *)sub_24B5348C0();
      swift_bridgeObjectRelease();
      io_iterator_t notification = 0;
      CFDictionaryRef v22 = v21;
      uint64_t v23 = IOServiceAddMatchingNotification(v11, "IOServiceFirstMatch", v22, (IOServiceMatchingCallback)sub_24B4EFC84, v12, &notification);
      sub_24B51B3AC(v23, (uint64_t)&v35);
      if ((v35 & 0x10000000000) == 0)
      {
        unint64_t v30 = v35 | ((unint64_t)BYTE4(v35) << 32);
        swift_bridgeObjectRelease();
        sub_24B4ED390();
        uint64_t v31 = swift_allocError();
        *(_DWORD *)uint64_t v32 = v30;
        *(unsigned char *)(v32 + 4) = BYTE4(v30) & 1;
        uint64_t v35 = v31;
        sub_24B534A70();
        swift_release();

        return;
      }
      sub_24B4EFA6C(notification, (IONotificationPortRef *)v12);

      if (!v19) {
        break;
      }
      long long v24 = *(_OWORD *)(a3 + v20 + 144);
      long long v44 = *(_OWORD *)(a3 + v20 + 128);
      long long v45 = v24;
      uint64_t v46 = *(void *)(a3 + v20 + 160);
      long long v25 = *(_OWORD *)(a3 + v20 + 80);
      long long v40 = *(_OWORD *)(a3 + v20 + 64);
      long long v41 = v25;
      long long v26 = *(_OWORD *)(a3 + v20 + 112);
      long long v42 = *(_OWORD *)(a3 + v20 + 96);
      long long v43 = v26;
      long long v27 = *(_OWORD *)(a3 + v20 + 16);
      long long v36 = *(_OWORD *)(a3 + v20);
      long long v29 = *(_OWORD *)(a3 + v20 + 32);
      long long v28 = *(_OWORD *)(a3 + v20 + 48);
      v20 += 168;
      --v19;
      long long v39 = v28;
      long long v37 = v27;
      long long v38 = v29;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_24B4EFA6C(io_iterator_t a1, IONotificationPortRef *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6958);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&notification[-2] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  io_object_t v8 = IOIteratorNext(a1);
  if (v8)
  {
    io_registry_entry_t v9 = v8;
    do
    {
      sub_24B51CA90(v9, (uint64_t)notification);
      if ((v13 & 1) == 0)
      {
        char v13 = 0;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6950);
        sub_24B534A60();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        notification[0] = 0;
        IOServiceAddInterestNotification(a2[2], v9, "IOGeneralInterest", (IOServiceInterestCallback)sub_24B4EFC80, a2, notification);
      }
      io_registry_entry_t v9 = IOIteratorNext(a1);
    }
    while (v9);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_release();
}

IONotificationPortRef *sub_24B4EFC84(IONotificationPortRef *result, io_iterator_t a2)
{
  if (result) {
    return (IONotificationPortRef *)sub_24B4EFA6C(a2, result);
  }
  __break(1u);
  return result;
}

uint64_t HIDDeviceManager.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t HIDDeviceManager.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t HIDDeviceManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t static HIDDeviceManager.== infix(_:_:)()
{
  return sub_24B534B00() & 1;
}

uint64_t sub_24B4EFD5C()
{
  return sub_24B534B00() & 1;
}

void HIDDeviceManager.hash(into:)()
{
  id v1 = *(id *)(v0 + 112);
  sub_24B534B10();
}

uint64_t HIDDeviceManager.hashValue.getter()
{
  sub_24B534E60();
  id v1 = *(id *)(v0 + 112);
  sub_24B534B10();

  return sub_24B534EB0();
}

uint64_t sub_24B4EFE5C()
{
  uint64_t v1 = *v0;
  sub_24B534E60();
  id v2 = *(id *)(v1 + 112);
  sub_24B534B10();

  return sub_24B534EB0();
}

void sub_24B4EFEB0()
{
  id v1 = *(id *)(*(void *)v0 + 112);
  sub_24B534B10();
}

uint64_t sub_24B4EFF0C()
{
  uint64_t v1 = *v0;
  sub_24B534E60();
  id v2 = *(id *)(v1 + 112);
  sub_24B534B10();

  return sub_24B534EB0();
}

uint64_t sub_24B4EFF5C()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCFFC7CoreHID16HIDDeviceManager20monitorNotificationsFT16matchingCriteriaGSaVS0_22DeviceMatchingCriteria__GVs19AsyncThrowingStreamOS0_12NotificationPs5Error__U_FGVS2_12ContinuationS3_PS4____T_L_7Context_continuation;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t sub_24B4F0000(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6968);
  char v36 = a2;
  uint64_t v6 = sub_24B534D80();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    CFDictionaryRef v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    long long v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_24B534E60();
    sub_24B534980();
    uint64_t result = sub_24B534EB0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *long long v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  CFDictionaryRef v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *CFDictionaryRef v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_24B4F0318(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6900);
  char v37 = a2;
  uint64_t v6 = sub_24B534D80();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    CFDictionaryRef v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    long long v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_24B534E60();
    sub_24B534980();
    uint64_t result = sub_24B534EB0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *long long v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  CFDictionaryRef v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *CFDictionaryRef v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_24B4F0624(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6960);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    _OWORD v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6910);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_24B4F0748(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_24B4EB80C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_24B4F08AC();
LABEL_7:
    long long v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_24B4F0318(result, a4 & 1);
  uint64_t result = sub_24B4EB80C(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = sub_24B534E00();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  long long v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

void *sub_24B4F08AC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6900);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_24B534D70();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    BOOL v22 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24B4F0A5C(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    int64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    a2(v14, v15, v16);
    swift_unknownObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_24B4F0BFC(uint64_t a1)
{
  sub_24B4EF6DC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24B4F0C04(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_24B4F0C40(uint64_t a1, uint64_t a2)
{
  return sub_24B4F0C88(&qword_2697C6938, a2, (void (*)(uint64_t))type metadata accessor for HIDDeviceManager);
}

uint64_t sub_24B4F0C88(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for HIDDeviceManager()
{
  return self;
}

uint64_t method lookup function for HIDDeviceManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HIDDeviceManager);
}

uint64_t dispatch thunk of HIDDeviceManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of HIDDeviceManager.monitorNotifications(matchingCriteria:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t destroy for HIDDeviceManager.DeviceMatchingCriteria(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40) >= 0xEuLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HIDDeviceManager.DeviceMatchingCriteria(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  uint64_t v4 = (void *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v5 > 0xD)
  {
    *(void *)(a1 + 32) = *v4;
    *(void *)(a1 + 40) = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v4;
  }
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HIDDeviceManager.DeviceMatchingCriteria(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v5 = a2[4];
  *(unsigned char *)(a1 + 20) = *((unsigned char *)a2 + 20);
  *(_DWORD *)(a1 + 16) = v5;
  int v6 = a2[6];
  *(unsigned char *)(a1 + 28) = *((unsigned char *)a2 + 28);
  *(_DWORD *)(a1 + 24) = v6;
  unint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *((void *)a2 + 5);
  if (v7 == 13)
  {
    if (v8 >= 0xE) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  if (v8 == 13)
  {
    sub_24B4ECA60(a1 + 32);
    goto LABEL_11;
  }
  if (v7 >= 0xD)
  {
    if (v8 >= 0xD)
    {
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_24B4ECA0C(a1 + 32);
    goto LABEL_11;
  }
  if (v8 < 0xD)
  {
LABEL_11:
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    goto LABEL_12;
  }
LABEL_8:
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
LABEL_12:
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *((void *)a2 + 12);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *((void *)a2 + 18);
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 144) = v10;
  *(unsigned char *)(a1 + 153) = *((unsigned char *)a2 + 153);
  *(unsigned char *)(a1 + 154) = *((unsigned char *)a2 + 154);
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HIDDeviceManager.DeviceMatchingCriteria(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  int v4 = (void *)(a2 + 32);
  unint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(void *)(a2 + 40);
  if (v5 != 13)
  {
    if (v6 == 13)
    {
      sub_24B4ECA60(a1 + 32);
    }
    else if (v5 >= 0xD)
    {
      if (v6 >= 0xD)
      {
        *(void *)(a1 + 32) = *v4;
        *(void *)(a1 + 40) = v6;
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      sub_24B4ECA0C(a1 + 32);
    }
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v4;
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDDeviceManager.DeviceMatchingCriteria(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 168)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDDeviceManager.DeviceMatchingCriteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 168) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDDeviceManager.DeviceMatchingCriteria()
{
  return &type metadata for HIDDeviceManager.DeviceMatchingCriteria;
}

ValueMetadata *type metadata accessor for HIDDeviceManager.DeviceMatchingCriteria.Property()
{
  return &type metadata for HIDDeviceManager.DeviceMatchingCriteria.Property;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HIDDeviceManager.Notification(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDDeviceManager.Notification(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24B4F13DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_24B4F13E4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HIDDeviceManager.Notification()
{
  return &type metadata for HIDDeviceManager.Notification;
}

uint64_t sub_24B4F1400()
{
  return type metadata accessor for HIDDeviceManager.Context();
}

uint64_t type metadata accessor for HIDDeviceManager.Context()
{
  uint64_t result = qword_2697C7878;
  if (!qword_2697C7878) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_24B4F1454()
{
  sub_24B4F14F4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_24B4F14F4()
{
  if (!qword_2697C6940)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2697C6948);
    unint64_t v0 = sub_24B534A80();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2697C6940);
    }
  }
}

void sub_24B4F1560()
{
  IONotificationPortDestroy(*(IONotificationPortRef *)(v0 + 16));
}

uint64_t sub_24B4F1568(uint64_t a1, io_registry_entry_t a2, int a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6958);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 == -536870896)
  {
    uint64_t result = sub_24B51CA90(a2, (uint64_t)&v12);
    if ((v13 & 1) == 0)
    {
      if (a1)
      {
        uint64_t v11 = v12;
        swift_retain();
        uint64_t v12 = v11;
        char v13 = 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6950);
        sub_24B534A60();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

unint64_t HIDUsage.page.getter()
{
  unint64_t result = 1;
  switch(*((unsigned __int8 *)v0 + 4) >> 2)
  {
    case 1:
      unint64_t result = 2;
      break;
    case 2:
      unint64_t result = 3;
      break;
    case 3:
      unint64_t result = 4;
      break;
    case 4:
      unint64_t result = 5;
      break;
    case 5:
      unint64_t result = 6;
      break;
    case 6:
      unint64_t result = 7;
      break;
    case 7:
      unint64_t result = 8;
      break;
    case 8:
      unint64_t result = 9;
      break;
    case 9:
      unint64_t result = 10;
      break;
    case 0xA:
      unint64_t result = 11;
      break;
    case 0xB:
      unint64_t result = 12;
      break;
    case 0xC:
      unint64_t result = 13;
      break;
    case 0xD:
      unint64_t result = 14;
      break;
    case 0xE:
      unint64_t result = 15;
      break;
    case 0xF:
      unint64_t result = 17;
      break;
    case 0x10:
      unint64_t result = 18;
      break;
    case 0x11:
      unint64_t result = 20;
      break;
    case 0x12:
      unint64_t result = 32;
      break;
    case 0x13:
      unint64_t result = 64;
      break;
    case 0x14:
      unint64_t result = 65;
      break;
    case 0x15:
      unint64_t result = 89;
      break;
    case 0x16:
      unint64_t result = 128;
      break;
    case 0x17:
      unint64_t result = 129;
      break;
    case 0x18:
      unint64_t result = 130;
      break;
    case 0x19:
      unint64_t result = 132;
      break;
    case 0x1A:
      unint64_t result = 133;
      break;
    case 0x1B:
      unint64_t result = 140;
      break;
    case 0x1C:
      unint64_t result = 141;
      break;
    case 0x1D:
      unint64_t result = 142;
      break;
    case 0x1E:
      unint64_t result = 144;
      break;
    case 0x1F:
      unint64_t result = 145;
      break;
    case 0x20:
      unint64_t result = 61904;
      break;
    case 0x21:
      unint64_t result = *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
      break;
    default:
      return result;
  }
  return result;
}

void *sub_24B4F1878()
{
  return &unk_24B536100;
}

void *sub_24B4F1884()
{
  return &unk_24B536102;
}

void *sub_24B4F1890()
{
  return &unk_24B536104;
}

void *sub_24B4F189C()
{
  return &unk_24B536106;
}

void *sub_24B4F18A8()
{
  return &unk_24B536108;
}

void *sub_24B4F18B4()
{
  return &unk_24B53610A;
}

const __int16 *sub_24B4F18C0()
{
  return asc_24B53610C;
}

__int16 *sub_24B4F18CC()
{
  return &asc_24B53610C[1];
}

__int16 *sub_24B4F18D8()
{
  return &asc_24B53610C[2];
}

__int16 *sub_24B4F18E4()
{
  return &asc_24B53610C[3];
}

__int16 *sub_24B4F18F0()
{
  return &asc_24B53610C[4];
}

void *sub_24B4F18FC()
{
  return &unk_24B536116;
}

void *sub_24B4F1908()
{
  return &unk_24B536118;
}

void *sub_24B4F1914()
{
  return &unk_24B53611A;
}

void *sub_24B4F1920()
{
  return &unk_24B53611C;
}

void *sub_24B4F192C()
{
  return &unk_24B53611E;
}

void *sub_24B4F1938()
{
  return &unk_24B536120;
}

void *sub_24B4F1944()
{
  return &unk_24B536122;
}

const __int16 *sub_24B4F1950()
{
  return aAy;
}

__int16 *sub_24B4F195C()
{
  return &aAy[1];
}

__int16 *sub_24B4F1968()
{
  return &aAy[2];
}

__int16 *sub_24B4F1974()
{
  return &aAy[3];
}

void *sub_24B4F1980()
{
  return &unk_24B53612C;
}

void *sub_24B4F198C()
{
  return &unk_24B53612E;
}

void *sub_24B4F1998()
{
  return &unk_24B536130;
}

void *sub_24B4F19A4()
{
  return &unk_24B536132;
}

void *sub_24B4F19B0()
{
  return &unk_24B536134;
}

void *sub_24B4F19BC()
{
  return &unk_24B536136;
}

void *sub_24B4F19C8()
{
  return &unk_24B536138;
}

void *sub_24B4F19D4()
{
  return &unk_24B53613A;
}

void *sub_24B4F19E0()
{
  return &unk_24B53613C;
}

void *sub_24B4F19EC()
{
  return &unk_24B53613E;
}

void *sub_24B4F19F8()
{
  return &unk_24B536140;
}

uint64_t HIDUsage.usage.getter()
{
  unint64_t v1 = *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
  switch(*((unsigned __int8 *)v0 + 4) >> 2)
  {
    case 1:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 2;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 3;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 5;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 6;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 7;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 8;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 9;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 10;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 11;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 12;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 35;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 37;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 176;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 177;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 178;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 179;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 180;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 181;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 182;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 183;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 184;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 185;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 186;
          break;
        case 0x1Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 187;
          break;
        case 0x1Eu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 188;
          break;
        case 0x1Fu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 189;
          break;
        case 0x20u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 190;
          break;
        case 0x21u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 191;
          break;
        case 0x22u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 192;
          break;
        case 0x23u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 193;
          break;
        case 0x24u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 194;
          break;
        case 0x25u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 195;
          break;
        case 0x26u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 196;
          break;
        case 0x27u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 197;
          break;
        case 0x28u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 198;
          break;
        case 0x29u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 199;
          break;
        case 0x2Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 200;
          break;
        case 0x2Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 201;
          break;
        case 0x2Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 202;
          break;
        case 0x2Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 203;
          break;
        case 0x2Eu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 204;
          break;
        case 0x2Fu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 205;
          break;
        case 0x30u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 206;
          break;
        case 0x31u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 207;
          break;
        case 0x32u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 208;
          break;
        case 0x33u:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 2:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 2;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 3;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 5;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 6;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 7;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 8;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 9;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 10;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 0xCu:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 3:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 2;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 3;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 48;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 49;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 50;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 51;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 52;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 53;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 54;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 55;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 56;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 57;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 80;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 81;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 82;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 83;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 84;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 85;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 86;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 87;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 88;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 89;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 90;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 91;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 92;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 93;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 94;
          break;
        case 0x1Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 95;
          break;
        case 0x1Eu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 96;
          break;
        case 0x1Fu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 97;
          break;
        case 0x20u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 98;
          break;
        case 0x21u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 99;
          break;
        case 0x22u:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 4:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 2;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 3;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 35;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 37;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 38;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 39;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 40;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 41;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 42;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 43;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 44;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 45;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 46;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 47;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 48;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 49;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 50;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 51;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 52;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 53;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 54;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 55;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 57;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 58;
          break;
        case 0x1Du:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 5:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 35;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 37;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 38;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 39;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 40;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 41;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 42;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 43;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 44;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 45;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 46;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 47;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 48;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 49;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 50;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 51;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 52;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 64;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 65;
          break;
        case 0x18u:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 6:
      if (*v0 == 218)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 3;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 6;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 7;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 8;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 9;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 10;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 11;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 12;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 13;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 14;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 15;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 16;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 17;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 18;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 19;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 20;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 21;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 22;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 23;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 24;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 25;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 26;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 27;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 28;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 29;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 30;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 31;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 35;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 36;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 37;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 38;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 39;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 40;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 41;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 42;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 43;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 44;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 45;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 46;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 47;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 55;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 56;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 57;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 58;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 59;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 60;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 61;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 62;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 63;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 71;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 72;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 73;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 74;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 75;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 76;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 77;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 78;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 79;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 80;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 81;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 82;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 83;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 84;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 85;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 86;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 87;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 88;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 89;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 90;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 91;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 92;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 93;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 94;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 95;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x60u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x61u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x62u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x63u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x64u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x65u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x66u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 103;
            break;
          case 0x67u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 104;
            break;
          case 0x68u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 105;
            break;
          case 0x69u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 106;
            break;
          case 0x6Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 107;
            break;
          case 0x6Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 108;
            break;
          case 0x6Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 109;
            break;
          case 0x6Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 110;
            break;
          case 0x6Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 111;
            break;
          case 0x6Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 112;
            break;
          case 0x70u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 113;
            break;
          case 0x71u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 114;
            break;
          case 0x72u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 115;
            break;
          case 0x73u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 116;
            break;
          case 0x74u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 117;
            break;
          case 0x75u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 118;
            break;
          case 0x76u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 119;
            break;
          case 0x77u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 120;
            break;
          case 0x78u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 121;
            break;
          case 0x79u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 122;
            break;
          case 0x7Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 123;
            break;
          case 0x7Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 124;
            break;
          case 0x7Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 125;
            break;
          case 0x7Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 126;
            break;
          case 0x7Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 127;
            break;
          case 0x7Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x80u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 129;
            break;
          case 0x81u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x82u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x83u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x84u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x85u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 134;
            break;
          case 0x86u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 135;
            break;
          case 0x87u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 136;
            break;
          case 0x88u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 137;
            break;
          case 0x89u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 138;
            break;
          case 0x8Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 139;
            break;
          case 0x8Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 140;
            break;
          case 0x8Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 141;
            break;
          case 0x8Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 142;
            break;
          case 0x8Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 143;
            break;
          case 0x8Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 144;
            break;
          case 0x90u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x91u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x92u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 147;
            break;
          case 0x93u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 148;
            break;
          case 0x94u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 149;
            break;
          case 0x95u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 150;
            break;
          case 0x96u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 151;
            break;
          case 0x97u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 152;
            break;
          case 0x98u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 153;
            break;
          case 0x99u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 154;
            break;
          case 0x9Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 155;
            break;
          case 0x9Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 156;
            break;
          case 0x9Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 157;
            break;
          case 0x9Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 158;
            break;
          case 0x9Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 159;
            break;
          case 0x9Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 160;
            break;
          case 0xA0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 161;
            break;
          case 0xA1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 162;
            break;
          case 0xA2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 163;
            break;
          case 0xA3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 164;
            break;
          case 0xA4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 176;
            break;
          case 0xA5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 177;
            break;
          case 0xA6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 178;
            break;
          case 0xA7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 179;
            break;
          case 0xA8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 180;
            break;
          case 0xA9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 181;
            break;
          case 0xAAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 182;
            break;
          case 0xABu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 183;
            break;
          case 0xACu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 184;
            break;
          case 0xADu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 185;
            break;
          case 0xAEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 186;
            break;
          case 0xAFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 187;
            break;
          case 0xB0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 188;
            break;
          case 0xB1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 189;
            break;
          case 0xB2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 190;
            break;
          case 0xB3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 191;
            break;
          case 0xB4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 192;
            break;
          case 0xB5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 193;
            break;
          case 0xB6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 194;
            break;
          case 0xB7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 195;
            break;
          case 0xB8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 196;
            break;
          case 0xB9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 197;
            break;
          case 0xBAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 198;
            break;
          case 0xBBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 199;
            break;
          case 0xBCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 200;
            break;
          case 0xBDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 201;
            break;
          case 0xBEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 202;
            break;
          case 0xBFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 203;
            break;
          case 0xC0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 204;
            break;
          case 0xC1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 205;
            break;
          case 0xC2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 206;
            break;
          case 0xC3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 207;
            break;
          case 0xC4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 208;
            break;
          case 0xC5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 209;
            break;
          case 0xC6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 210;
            break;
          case 0xC7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 211;
            break;
          case 0xC8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 212;
            break;
          case 0xC9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 213;
            break;
          case 0xCAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 214;
            break;
          case 0xCBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 215;
            break;
          case 0xCCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 216;
            break;
          case 0xCDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 217;
            break;
          case 0xCEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 218;
            break;
          case 0xCFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 219;
            break;
          case 0xD0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 220;
            break;
          case 0xD1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 221;
            break;
          case 0xD2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 224;
            break;
          case 0xD3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 225;
            break;
          case 0xD4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 226;
            break;
          case 0xD5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 227;
            break;
          case 0xD6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 228;
            break;
          case 0xD7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 229;
            break;
          case 0xD8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 230;
            break;
          case 0xD9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 231;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 7:
      if (*v0 == 96)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 3;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 6;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 7;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 8;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 9;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 10;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 11;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 12;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 13;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 14;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 15;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 16;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 17;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 18;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 19;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 20;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 21;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 22;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 23;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 24;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 25;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 26;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 27;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 28;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 29;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 30;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 31;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 35;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 36;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 37;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 38;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 39;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 40;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 41;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 42;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 43;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 44;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 45;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 46;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 47;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 55;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 56;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 57;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 58;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 59;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 60;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 61;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 62;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 63;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 71;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 72;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 73;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 74;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 75;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 76;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 77;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 78;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 79;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 80;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 81;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 82;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 83;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 84;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 85;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 86;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 87;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 103;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 104;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 8:
      uint64_t v3 = (v1 >> 16) & 1;
      LODWORD(v2) = *v0;
      break;
    case 9:
      uint64_t v3 = (v1 >> 16) & 1;
      LODWORD(v2) = *v0;
      break;
    case 0xA:
      if (*v0 == 99)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 3;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 6;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 7;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 35;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 36;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 37;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 38;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 39;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 40;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 41;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 42;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 43;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 44;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 45;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 46;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 47;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 80;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 81;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 82;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 83;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 112;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 113;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 114;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 115;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 116;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 144;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 147;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 148;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 149;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 150;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 151;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 152;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 153;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 154;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 155;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 156;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 157;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 158;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 176;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 177;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 178;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 179;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 180;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 181;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 182;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 183;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 184;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 185;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 186;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 187;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 188;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 189;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 190;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 191;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 192;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 193;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 194;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 240;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 241;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 242;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 243;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 244;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 245;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 248;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 249;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 250;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 251;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 252;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 253;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 254;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 264;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 265;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 266;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 272;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 273;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 274;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 275;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 276;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 320;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 321;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 322;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 323;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 324;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 325;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 326;
            break;
          case 0x60u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 327;
            break;
          case 0x61u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 330;
            break;
          case 0x62u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 331;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0xB:
      if ((unsigned __int16)*v0 == 450)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch((unsigned __int16)*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 3;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 6;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 71;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 72;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 103;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 104;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 105;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 106;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 107;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 108;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 109;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 110;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 111;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 112;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 113;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 114;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 115;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 116;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 117;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 118;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 119;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 120;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 121;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 122;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 123;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 124;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 125;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 126;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 127;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 129;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 134;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 135;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 136;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 137;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 138;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 139;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 140;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 141;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 142;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 143;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 144;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 147;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 148;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 149;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 150;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 151;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 152;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 153;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 154;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 155;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 156;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 157;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 158;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 160;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 161;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 162;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 163;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 164;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 176;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 177;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 178;
            break;
          case 0x60u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 179;
            break;
          case 0x61u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 180;
            break;
          case 0x62u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 181;
            break;
          case 0x63u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 182;
            break;
          case 0x64u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 183;
            break;
          case 0x65u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 184;
            break;
          case 0x66u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 185;
            break;
          case 0x67u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 186;
            break;
          case 0x68u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 187;
            break;
          case 0x69u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 188;
            break;
          case 0x6Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 189;
            break;
          case 0x6Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 190;
            break;
          case 0x6Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 191;
            break;
          case 0x6Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 192;
            break;
          case 0x6Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 193;
            break;
          case 0x6Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 194;
            break;
          case 0x70u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 195;
            break;
          case 0x71u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 196;
            break;
          case 0x72u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 197;
            break;
          case 0x73u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 198;
            break;
          case 0x74u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 199;
            break;
          case 0x75u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 200;
            break;
          case 0x76u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 201;
            break;
          case 0x77u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 202;
            break;
          case 0x78u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 203;
            break;
          case 0x79u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 204;
            break;
          case 0x7Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 205;
            break;
          case 0x7Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 206;
            break;
          case 0x7Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 207;
            break;
          case 0x7Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 208;
            break;
          case 0x7Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 209;
            break;
          case 0x7Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 210;
            break;
          case 0x80u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 211;
            break;
          case 0x81u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 212;
            break;
          case 0x82u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 213;
            break;
          case 0x83u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 214;
            break;
          case 0x84u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 215;
            break;
          case 0x85u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 216;
            break;
          case 0x86u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 217;
            break;
          case 0x87u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 224;
            break;
          case 0x88u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 225;
            break;
          case 0x89u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 226;
            break;
          case 0x8Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 227;
            break;
          case 0x8Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 228;
            break;
          case 0x8Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 229;
            break;
          case 0x8Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 230;
            break;
          case 0x8Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 231;
            break;
          case 0x8Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 232;
            break;
          case 0x90u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 233;
            break;
          case 0x91u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 234;
            break;
          case 0x92u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 240;
            break;
          case 0x93u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 241;
            break;
          case 0x94u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 242;
            break;
          case 0x95u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 243;
            break;
          case 0x96u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 244;
            break;
          case 0x97u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 245;
            break;
          case 0x98u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 256;
            break;
          case 0x99u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 257;
            break;
          case 0x9Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 258;
            break;
          case 0x9Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 259;
            break;
          case 0x9Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 260;
            break;
          case 0x9Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 261;
            break;
          case 0x9Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 262;
            break;
          case 0x9Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 263;
            break;
          case 0xA0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 264;
            break;
          case 0xA1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 265;
            break;
          case 0xA2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 266;
            break;
          case 0xA3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 267;
            break;
          case 0xA4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 268;
            break;
          case 0xA5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 269;
            break;
          case 0xA6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 336;
            break;
          case 0xA7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 337;
            break;
          case 0xA8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 338;
            break;
          case 0xA9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 339;
            break;
          case 0xAAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 340;
            break;
          case 0xABu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 341;
            break;
          case 0xACu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 352;
            break;
          case 0xADu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 353;
            break;
          case 0xAEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 354;
            break;
          case 0xAFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 355;
            break;
          case 0xB0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 356;
            break;
          case 0xB1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 357;
            break;
          case 0xB2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 358;
            break;
          case 0xB3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 359;
            break;
          case 0xB4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 360;
            break;
          case 0xB5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 361;
            break;
          case 0xB6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 362;
            break;
          case 0xB7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 368;
            break;
          case 0xB8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 369;
            break;
          case 0xB9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 370;
            break;
          case 0xBAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 371;
            break;
          case 0xBBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 372;
            break;
          case 0xBCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 384;
            break;
          case 0xBDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 385;
            break;
          case 0xBEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 386;
            break;
          case 0xBFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 387;
            break;
          case 0xC0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 388;
            break;
          case 0xC1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 389;
            break;
          case 0xC2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 390;
            break;
          case 0xC3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 391;
            break;
          case 0xC4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 392;
            break;
          case 0xC5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 393;
            break;
          case 0xC6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 394;
            break;
          case 0xC7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 395;
            break;
          case 0xC8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 396;
            break;
          case 0xC9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 397;
            break;
          case 0xCAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 398;
            break;
          case 0xCBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 399;
            break;
          case 0xCCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 400;
            break;
          case 0xCDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 401;
            break;
          case 0xCEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 402;
            break;
          case 0xCFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 403;
            break;
          case 0xD0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 404;
            break;
          case 0xD1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 405;
            break;
          case 0xD2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 406;
            break;
          case 0xD3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 407;
            break;
          case 0xD4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 408;
            break;
          case 0xD5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 409;
            break;
          case 0xD6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 410;
            break;
          case 0xD7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 411;
            break;
          case 0xD8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 412;
            break;
          case 0xD9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 413;
            break;
          case 0xDAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 414;
            break;
          case 0xDBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 415;
            break;
          case 0xDCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 416;
            break;
          case 0xDDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 417;
            break;
          case 0xDEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 418;
            break;
          case 0xDFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 419;
            break;
          case 0xE0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 420;
            break;
          case 0xE1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 421;
            break;
          case 0xE2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 422;
            break;
          case 0xE3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 423;
            break;
          case 0xE4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 424;
            break;
          case 0xE5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 425;
            break;
          case 0xE6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 426;
            break;
          case 0xE7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 427;
            break;
          case 0xE8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 428;
            break;
          case 0xE9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 429;
            break;
          case 0xEAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 430;
            break;
          case 0xEBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 431;
            break;
          case 0xECu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 432;
            break;
          case 0xEDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 433;
            break;
          case 0xEEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 434;
            break;
          case 0xEFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 435;
            break;
          case 0xF0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 436;
            break;
          case 0xF1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 437;
            break;
          case 0xF2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 438;
            break;
          case 0xF3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 439;
            break;
          case 0xF4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 440;
            break;
          case 0xF5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 441;
            break;
          case 0xF6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 442;
            break;
          case 0xF7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 444;
            break;
          case 0xF8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 445;
            break;
          case 0xF9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 446;
            break;
          case 0xFAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 447;
            break;
          case 0xFBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 448;
            break;
          case 0xFCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 449;
            break;
          case 0xFDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 450;
            break;
          case 0xFEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 451;
            break;
          case 0xFFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 452;
            break;
          case 0x100u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 453;
            break;
          case 0x101u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 454;
            break;
          case 0x102u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 455;
            break;
          case 0x103u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 456;
            break;
          case 0x104u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 457;
            break;
          case 0x105u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 458;
            break;
          case 0x106u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 459;
            break;
          case 0x107u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 512;
            break;
          case 0x108u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 513;
            break;
          case 0x109u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 514;
            break;
          case 0x10Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 515;
            break;
          case 0x10Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 516;
            break;
          case 0x10Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 517;
            break;
          case 0x10Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 518;
            break;
          case 0x10Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 519;
            break;
          case 0x10Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 520;
            break;
          case 0x110u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 521;
            break;
          case 0x111u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 538;
            break;
          case 0x112u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 539;
            break;
          case 0x113u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 540;
            break;
          case 0x114u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 541;
            break;
          case 0x115u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 542;
            break;
          case 0x116u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 543;
            break;
          case 0x117u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 544;
            break;
          case 0x118u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 545;
            break;
          case 0x119u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 546;
            break;
          case 0x11Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 547;
            break;
          case 0x11Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 548;
            break;
          case 0x11Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 549;
            break;
          case 0x11Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 550;
            break;
          case 0x11Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 551;
            break;
          case 0x11Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 552;
            break;
          case 0x120u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 553;
            break;
          case 0x121u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 554;
            break;
          case 0x122u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 555;
            break;
          case 0x123u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 556;
            break;
          case 0x124u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 557;
            break;
          case 0x125u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 558;
            break;
          case 0x126u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 559;
            break;
          case 0x127u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 560;
            break;
          case 0x128u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 561;
            break;
          case 0x129u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 562;
            break;
          case 0x12Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 563;
            break;
          case 0x12Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 564;
            break;
          case 0x12Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 565;
            break;
          case 0x12Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 566;
            break;
          case 0x12Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 567;
            break;
          case 0x12Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 568;
            break;
          case 0x130u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 569;
            break;
          case 0x131u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 570;
            break;
          case 0x132u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 571;
            break;
          case 0x133u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 572;
            break;
          case 0x134u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 573;
            break;
          case 0x135u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 574;
            break;
          case 0x136u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 575;
            break;
          case 0x137u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 576;
            break;
          case 0x138u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 577;
            break;
          case 0x139u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 578;
            break;
          case 0x13Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 579;
            break;
          case 0x13Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 580;
            break;
          case 0x13Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 581;
            break;
          case 0x13Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 582;
            break;
          case 0x13Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 583;
            break;
          case 0x13Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 584;
            break;
          case 0x140u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 585;
            break;
          case 0x141u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 586;
            break;
          case 0x142u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 587;
            break;
          case 0x143u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 588;
            break;
          case 0x144u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 589;
            break;
          case 0x145u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 590;
            break;
          case 0x146u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 591;
            break;
          case 0x147u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 592;
            break;
          case 0x148u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 593;
            break;
          case 0x149u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 594;
            break;
          case 0x14Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 595;
            break;
          case 0x14Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 596;
            break;
          case 0x14Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 597;
            break;
          case 0x14Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 598;
            break;
          case 0x14Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 599;
            break;
          case 0x14Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 600;
            break;
          case 0x150u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 601;
            break;
          case 0x151u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 602;
            break;
          case 0x152u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 603;
            break;
          case 0x153u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 604;
            break;
          case 0x154u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 605;
            break;
          case 0x155u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 606;
            break;
          case 0x156u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 607;
            break;
          case 0x157u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 608;
            break;
          case 0x158u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 609;
            break;
          case 0x159u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 610;
            break;
          case 0x15Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 611;
            break;
          case 0x15Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 612;
            break;
          case 0x15Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 613;
            break;
          case 0x15Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 614;
            break;
          case 0x15Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 615;
            break;
          case 0x15Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 616;
            break;
          case 0x160u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 617;
            break;
          case 0x161u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 618;
            break;
          case 0x162u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 619;
            break;
          case 0x163u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 620;
            break;
          case 0x164u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 621;
            break;
          case 0x165u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 622;
            break;
          case 0x166u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 623;
            break;
          case 0x167u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 624;
            break;
          case 0x168u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 625;
            break;
          case 0x169u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 626;
            break;
          case 0x16Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 627;
            break;
          case 0x16Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 628;
            break;
          case 0x16Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 629;
            break;
          case 0x16Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 630;
            break;
          case 0x16Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 631;
            break;
          case 0x16Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 632;
            break;
          case 0x170u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 633;
            break;
          case 0x171u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 634;
            break;
          case 0x172u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 635;
            break;
          case 0x173u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 636;
            break;
          case 0x174u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 637;
            break;
          case 0x175u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 638;
            break;
          case 0x176u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 639;
            break;
          case 0x177u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 640;
            break;
          case 0x178u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 641;
            break;
          case 0x179u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 642;
            break;
          case 0x17Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 643;
            break;
          case 0x17Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 644;
            break;
          case 0x17Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 645;
            break;
          case 0x17Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 646;
            break;
          case 0x17Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 647;
            break;
          case 0x17Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 648;
            break;
          case 0x180u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 649;
            break;
          case 0x181u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 650;
            break;
          case 0x182u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 651;
            break;
          case 0x183u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 652;
            break;
          case 0x184u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 653;
            break;
          case 0x185u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 654;
            break;
          case 0x186u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 655;
            break;
          case 0x187u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 656;
            break;
          case 0x188u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 657;
            break;
          case 0x189u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 658;
            break;
          case 0x18Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 659;
            break;
          case 0x18Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 660;
            break;
          case 0x18Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 661;
            break;
          case 0x18Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 662;
            break;
          case 0x18Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 663;
            break;
          case 0x18Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 664;
            break;
          case 0x190u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 665;
            break;
          case 0x191u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 666;
            break;
          case 0x192u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 667;
            break;
          case 0x193u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 668;
            break;
          case 0x194u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 669;
            break;
          case 0x195u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 670;
            break;
          case 0x196u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 671;
            break;
          case 0x197u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 672;
            break;
          case 0x198u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 673;
            break;
          case 0x199u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 674;
            break;
          case 0x19Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 688;
            break;
          case 0x19Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 704;
            break;
          case 0x19Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 705;
            break;
          case 0x19Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 706;
            break;
          case 0x19Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 707;
            break;
          case 0x19Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 708;
            break;
          case 0x1A0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 709;
            break;
          case 0x1A1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 710;
            break;
          case 0x1A2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 711;
            break;
          case 0x1A3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 712;
            break;
          case 0x1A4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 713;
            break;
          case 0x1A5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 714;
            break;
          case 0x1A6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 715;
            break;
          case 0x1A7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 716;
            break;
          case 0x1A8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 720;
            break;
          case 0x1A9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 721;
            break;
          case 0x1AAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 722;
            break;
          case 0x1ABu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 723;
            break;
          case 0x1ACu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 724;
            break;
          case 0x1ADu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1280;
            break;
          case 0x1AEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1281;
            break;
          case 0x1AFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1282;
            break;
          case 0x1B0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1283;
            break;
          case 0x1B1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1284;
            break;
          case 0x1B2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1285;
            break;
          case 0x1B3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1286;
            break;
          case 0x1B4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1287;
            break;
          case 0x1B5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1288;
            break;
          case 0x1B6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1289;
            break;
          case 0x1B7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1290;
            break;
          case 0x1B8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1291;
            break;
          case 0x1B9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1292;
            break;
          case 0x1BAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1293;
            break;
          case 0x1BBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1294;
            break;
          case 0x1BCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1295;
            break;
          case 0x1BDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1296;
            break;
          case 0x1BEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1297;
            break;
          case 0x1BFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1298;
            break;
          case 0x1C0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1299;
            break;
          case 0x1C1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1300;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0xC:
      if (*v0 == 108)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 3;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 6;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 7;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 8;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 9;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 10;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 11;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 12;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 13;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 14;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 15;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 35;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 36;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 55;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 56;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 57;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 58;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 59;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 60;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 61;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 62;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 63;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 71;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 72;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 73;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 81;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 82;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 83;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 84;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 85;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 86;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 87;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 88;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 89;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 90;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 91;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 92;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 93;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 94;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 95;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 103;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 104;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 105;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 106;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 107;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 108;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 109;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 110;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 111;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 112;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 113;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 114;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 115;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 116;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 117;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 118;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 119;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 129;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 144;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 147;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 148;
            break;
          case 0x60u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 149;
            break;
          case 0x61u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 150;
            break;
          case 0x62u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 151;
            break;
          case 0x63u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 152;
            break;
          case 0x64u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 160;
            break;
          case 0x65u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 161;
            break;
          case 0x66u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 162;
            break;
          case 0x67u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 163;
            break;
          case 0x68u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 164;
            break;
          case 0x69u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 165;
            break;
          case 0x6Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 166;
            break;
          case 0x6Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 176;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0xD:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 16;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 17;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 35;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 37;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 38;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 39;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 40;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4097;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4098;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4099;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4100;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4101;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4102;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4103;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4104;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4105;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4106;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4107;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4108;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4109;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4110;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4111;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4112;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4113;
          break;
        case 0x1Du:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 0xE:
      if (*v0 == 105)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 35;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 36;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 37;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 38;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 39;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 40;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 80;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 81;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 82;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 83;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 84;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 85;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 86;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 87;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 88;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 89;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 90;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 91;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 92;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 93;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 94;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 95;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 103;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 104;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 105;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 106;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 107;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 108;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 109;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 110;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 111;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 112;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 113;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 114;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 115;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 116;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 117;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 118;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 119;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 120;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 121;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 122;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 123;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 124;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 125;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 126;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 127;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 129;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 134;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 135;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 136;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 137;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 139;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 140;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 141;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 142;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 143;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 144;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 148;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 149;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 150;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 151;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 152;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 153;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 154;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 155;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 156;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 159;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 160;
            break;
          case 0x60u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 164;
            break;
          case 0x61u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 165;
            break;
          case 0x62u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 166;
            break;
          case 0x63u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 167;
            break;
          case 0x64u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 168;
            break;
          case 0x65u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 169;
            break;
          case 0x66u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 170;
            break;
          case 0x67u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 171;
            break;
          case 0x68u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 172;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0xF:
      if (*v0 == 10) {
        LOWORD(v2) = 0;
      }
      else {
        LOWORD(v2) = *v0 + 1;
      }
      LODWORD(v3) = *v0 == 10;
      break;
    case 0x10:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 2;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 16;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 17;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 18;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 19;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 20;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 35;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 37;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 38;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 39;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 40;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 41;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 42;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 43;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 256;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 257;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 258;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 259;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 260;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 261;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 512;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 513;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 514;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 515;
          break;
        case 0x1Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 516;
          break;
        case 0x1Eu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 517;
          break;
        case 0x1Fu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 768;
          break;
        case 0x20u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 769;
          break;
        case 0x21u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1024;
          break;
        case 0x22u:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 0x11:
      if (*v0 == 75)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 35;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 36;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 37;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 38;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 39;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 40;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 41;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 42;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 43;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 44;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 45;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 46;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 47;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 55;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 56;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 57;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 58;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 59;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 60;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 61;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 62;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 63;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 71;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 72;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 73;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 74;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 75;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 76;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 77;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 129;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 134;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 135;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 136;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 138;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 139;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 140;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 141;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 142;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 143;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 144;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 147;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 148;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 149;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 194;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 204;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 207;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 221;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 223;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 255;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0x12:
      if ((unsigned __int16)*v0 == 665)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch((unsigned __int16)*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 16;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 17;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 18;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 19;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 20;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 21;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 22;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 23;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 24;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 25;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 35;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 36;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 37;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 38;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 39;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 40;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 41;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 55;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 56;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 57;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 58;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 59;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 80;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 81;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 82;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 83;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 84;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 85;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 86;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 87;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 103;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 104;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 105;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 112;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 113;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 114;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 115;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 116;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 117;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 118;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 119;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 120;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 121;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 122;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 123;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 124;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 129;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 134;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 135;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 136;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 137;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 138;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 139;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 140;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 141;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 142;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 143;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 144;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 147;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 160;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 161;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 162;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 176;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 177;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 178;
            break;
          case 0x60u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 179;
            break;
          case 0x61u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 180;
            break;
          case 0x62u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 192;
            break;
          case 0x63u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 193;
            break;
          case 0x64u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 194;
            break;
          case 0x65u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 208;
            break;
          case 0x66u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 209;
            break;
          case 0x67u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 210;
            break;
          case 0x68u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 224;
            break;
          case 0x69u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 225;
            break;
          case 0x6Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 226;
            break;
          case 0x6Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 227;
            break;
          case 0x6Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 228;
            break;
          case 0x6Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 240;
            break;
          case 0x6Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 241;
            break;
          case 0x6Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 242;
            break;
          case 0x70u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 243;
            break;
          case 0x71u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 244;
            break;
          case 0x72u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 245;
            break;
          case 0x73u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 246;
            break;
          case 0x74u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 247;
            break;
          case 0x75u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 248;
            break;
          case 0x76u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 249;
            break;
          case 0x77u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 250;
            break;
          case 0x78u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 251;
            break;
          case 0x79u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 252;
            break;
          case 0x7Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 253;
            break;
          case 0x7Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 254;
            break;
          case 0x7Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 255;
            break;
          case 0x7Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 512;
            break;
          case 0x7Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 513;
            break;
          case 0x7Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 514;
            break;
          case 0x80u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 768;
            break;
          case 0x81u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 769;
            break;
          case 0x82u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 770;
            break;
          case 0x83u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 771;
            break;
          case 0x84u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 772;
            break;
          case 0x85u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 773;
            break;
          case 0x86u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 774;
            break;
          case 0x87u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 775;
            break;
          case 0x88u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 776;
            break;
          case 0x89u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 777;
            break;
          case 0x8Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 778;
            break;
          case 0x8Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 779;
            break;
          case 0x8Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 780;
            break;
          case 0x8Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 781;
            break;
          case 0x8Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 782;
            break;
          case 0x8Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 783;
            break;
          case 0x90u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 784;
            break;
          case 0x91u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 785;
            break;
          case 0x92u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 786;
            break;
          case 0x93u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 787;
            break;
          case 0x94u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 788;
            break;
          case 0x95u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 789;
            break;
          case 0x96u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 790;
            break;
          case 0x97u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 791;
            break;
          case 0x98u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 792;
            break;
          case 0x99u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 793;
            break;
          case 0x9Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 794;
            break;
          case 0x9Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 795;
            break;
          case 0x9Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 796;
            break;
          case 0x9Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 797;
            break;
          case 0x9Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 798;
            break;
          case 0x9Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 799;
            break;
          case 0xA0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1024;
            break;
          case 0xA1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1026;
            break;
          case 0xA2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1027;
            break;
          case 0xA3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1028;
            break;
          case 0xA4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1029;
            break;
          case 0xA5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1030;
            break;
          case 0xA6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1031;
            break;
          case 0xA7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1032;
            break;
          case 0xA8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1033;
            break;
          case 0xA9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1034;
            break;
          case 0xAAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1035;
            break;
          case 0xABu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1036;
            break;
          case 0xACu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1037;
            break;
          case 0xADu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1038;
            break;
          case 0xAEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1039;
            break;
          case 0xAFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1040;
            break;
          case 0xB0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1041;
            break;
          case 0xB1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1042;
            break;
          case 0xB2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1043;
            break;
          case 0xB3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1044;
            break;
          case 0xB4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1045;
            break;
          case 0xB5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1046;
            break;
          case 0xB6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1047;
            break;
          case 0xB7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1048;
            break;
          case 0xB8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1049;
            break;
          case 0xB9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1050;
            break;
          case 0xBAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1051;
            break;
          case 0xBBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1052;
            break;
          case 0xBCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1053;
            break;
          case 0xBDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1054;
            break;
          case 0xBEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1055;
            break;
          case 0xBFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1056;
            break;
          case 0xC0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1057;
            break;
          case 0xC1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1058;
            break;
          case 0xC2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1059;
            break;
          case 0xC3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1060;
            break;
          case 0xC4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1061;
            break;
          case 0xC5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1062;
            break;
          case 0xC6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1063;
            break;
          case 0xC7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1066;
            break;
          case 0xC8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1067;
            break;
          case 0xC9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1072;
            break;
          case 0xCAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1073;
            break;
          case 0xCBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1075;
            break;
          case 0xCCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1076;
            break;
          case 0xCDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1077;
            break;
          case 0xCEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1078;
            break;
          case 0xCFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1079;
            break;
          case 0xD0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1080;
            break;
          case 0xD1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1081;
            break;
          case 0xD2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1082;
            break;
          case 0xD3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1083;
            break;
          case 0xD4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1084;
            break;
          case 0xD5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1088;
            break;
          case 0xD6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1089;
            break;
          case 0xD7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1104;
            break;
          case 0xD8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1105;
            break;
          case 0xD9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1106;
            break;
          case 0xDAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1107;
            break;
          case 0xDBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1108;
            break;
          case 0xDCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1109;
            break;
          case 0xDDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1110;
            break;
          case 0xDEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1111;
            break;
          case 0xDFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1112;
            break;
          case 0xE0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1113;
            break;
          case 0xE1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1114;
            break;
          case 0xE2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1115;
            break;
          case 0xE3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1116;
            break;
          case 0xE4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1117;
            break;
          case 0xE5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1118;
            break;
          case 0xE6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1119;
            break;
          case 0xE7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1136;
            break;
          case 0xE8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1137;
            break;
          case 0xE9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1138;
            break;
          case 0xEAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1139;
            break;
          case 0xEBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1140;
            break;
          case 0xECu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1141;
            break;
          case 0xEDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1142;
            break;
          case 0xEEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1143;
            break;
          case 0xEFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1144;
            break;
          case 0xF0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1145;
            break;
          case 0xF1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1146;
            break;
          case 0xF2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1147;
            break;
          case 0xF3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1148;
            break;
          case 0xF4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1149;
            break;
          case 0xF5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1150;
            break;
          case 0xF6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1151;
            break;
          case 0xF7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1152;
            break;
          case 0xF8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1153;
            break;
          case 0xF9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1154;
            break;
          case 0xFAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1155;
            break;
          case 0xFBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1156;
            break;
          case 0xFCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1157;
            break;
          case 0xFDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1158;
            break;
          case 0xFEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1159;
            break;
          case 0xFFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1160;
            break;
          case 0x100u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1161;
            break;
          case 0x101u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1168;
            break;
          case 0x102u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1169;
            break;
          case 0x103u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1170;
            break;
          case 0x104u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1171;
            break;
          case 0x105u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1172;
            break;
          case 0x106u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1173;
            break;
          case 0x107u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1174;
            break;
          case 0x108u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1175;
            break;
          case 0x109u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1176;
            break;
          case 0x10Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1184;
            break;
          case 0x10Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1185;
            break;
          case 0x10Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1186;
            break;
          case 0x10Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1187;
            break;
          case 0x10Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1200;
            break;
          case 0x10Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1201;
            break;
          case 0x110u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1202;
            break;
          case 0x111u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1203;
            break;
          case 0x112u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1204;
            break;
          case 0x113u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1205;
            break;
          case 0x114u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1206;
            break;
          case 0x115u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1207;
            break;
          case 0x116u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1208;
            break;
          case 0x117u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1209;
            break;
          case 0x118u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1210;
            break;
          case 0x119u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1211;
            break;
          case 0x11Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1212;
            break;
          case 0x11Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1213;
            break;
          case 0x11Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1232;
            break;
          case 0x11Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1233;
            break;
          case 0x11Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1234;
            break;
          case 0x11Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1235;
            break;
          case 0x120u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1236;
            break;
          case 0x121u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1237;
            break;
          case 0x122u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1238;
            break;
          case 0x123u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1239;
            break;
          case 0x124u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1240;
            break;
          case 0x125u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1241;
            break;
          case 0x126u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1242;
            break;
          case 0x127u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1243;
            break;
          case 0x128u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1244;
            break;
          case 0x129u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1245;
            break;
          case 0x12Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1246;
            break;
          case 0x12Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1247;
            break;
          case 0x12Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1248;
            break;
          case 0x12Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1250;
            break;
          case 0x12Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1251;
            break;
          case 0x12Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1264;
            break;
          case 0x130u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1265;
            break;
          case 0x131u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1266;
            break;
          case 0x132u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1272;
            break;
          case 0x133u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1273;
            break;
          case 0x134u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1280;
            break;
          case 0x135u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1281;
            break;
          case 0x136u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1282;
            break;
          case 0x137u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1283;
            break;
          case 0x138u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1284;
            break;
          case 0x139u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1285;
            break;
          case 0x13Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1286;
            break;
          case 0x13Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1287;
            break;
          case 0x13Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1288;
            break;
          case 0x13Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1289;
            break;
          case 0x13Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1312;
            break;
          case 0x13Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1313;
            break;
          case 0x140u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1314;
            break;
          case 0x141u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1315;
            break;
          case 0x142u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1316;
            break;
          case 0x143u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1317;
            break;
          case 0x144u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1318;
            break;
          case 0x145u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1319;
            break;
          case 0x146u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1320;
            break;
          case 0x147u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1321;
            break;
          case 0x148u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1322;
            break;
          case 0x149u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1323;
            break;
          case 0x14Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1328;
            break;
          case 0x14Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1329;
            break;
          case 0x14Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1330;
            break;
          case 0x14Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1331;
            break;
          case 0x14Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1332;
            break;
          case 0x14Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1333;
            break;
          case 0x150u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1344;
            break;
          case 0x151u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1345;
            break;
          case 0x152u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1346;
            break;
          case 0x153u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1347;
            break;
          case 0x154u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1348;
            break;
          case 0x155u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1349;
            break;
          case 0x156u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1350;
            break;
          case 0x157u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1351;
            break;
          case 0x158u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1352;
            break;
          case 0x159u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1353;
            break;
          case 0x15Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1354;
            break;
          case 0x15Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1355;
            break;
          case 0x15Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1356;
            break;
          case 0x15Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1357;
            break;
          case 0x15Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1358;
            break;
          case 0x15Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1359;
            break;
          case 0x160u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1360;
            break;
          case 0x161u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1361;
            break;
          case 0x162u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1362;
            break;
          case 0x163u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1363;
            break;
          case 0x164u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1364;
            break;
          case 0x165u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1365;
            break;
          case 0x166u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1366;
            break;
          case 0x167u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1367;
            break;
          case 0x168u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1368;
            break;
          case 0x169u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1369;
            break;
          case 0x16Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1370;
            break;
          case 0x16Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1371;
            break;
          case 0x16Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1372;
            break;
          case 0x16Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1373;
            break;
          case 0x16Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1374;
            break;
          case 0x16Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1375;
            break;
          case 0x170u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1376;
            break;
          case 0x171u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1377;
            break;
          case 0x172u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1378;
            break;
          case 0x173u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1379;
            break;
          case 0x174u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1380;
            break;
          case 0x175u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1381;
            break;
          case 0x176u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1382;
            break;
          case 0x177u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1383;
            break;
          case 0x178u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1384;
            break;
          case 0x179u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1385;
            break;
          case 0x17Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1386;
            break;
          case 0x17Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1387;
            break;
          case 0x17Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1388;
            break;
          case 0x17Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1389;
            break;
          case 0x17Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1390;
            break;
          case 0x17Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1391;
            break;
          case 0x180u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1392;
            break;
          case 0x181u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1393;
            break;
          case 0x182u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1394;
            break;
          case 0x183u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1395;
            break;
          case 0x184u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1396;
            break;
          case 0x185u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1397;
            break;
          case 0x186u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1398;
            break;
          case 0x187u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1408;
            break;
          case 0x188u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1409;
            break;
          case 0x189u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1410;
            break;
          case 0x18Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1424;
            break;
          case 0x18Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1425;
            break;
          case 0x18Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1426;
            break;
          case 0x18Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1427;
            break;
          case 0x18Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1428;
            break;
          case 0x18Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1429;
            break;
          case 0x190u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1430;
            break;
          case 0x191u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1431;
            break;
          case 0x192u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1440;
            break;
          case 0x193u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1441;
            break;
          case 0x194u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1442;
            break;
          case 0x195u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1443;
            break;
          case 0x196u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1444;
            break;
          case 0x197u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1445;
            break;
          case 0x198u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1456;
            break;
          case 0x199u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1472;
            break;
          case 0x19Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1473;
            break;
          case 0x19Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1474;
            break;
          case 0x19Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1475;
            break;
          case 0x19Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1476;
            break;
          case 0x19Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1477;
            break;
          case 0x19Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1478;
            break;
          case 0x1A0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1479;
            break;
          case 0x1A1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1480;
            break;
          case 0x1A2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1481;
            break;
          case 0x1A3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1482;
            break;
          case 0x1A4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1483;
            break;
          case 0x1A5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1484;
            break;
          case 0x1A6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1485;
            break;
          case 0x1A7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1486;
            break;
          case 0x1A8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1487;
            break;
          case 0x1A9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1488;
            break;
          case 0x1AAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1504;
            break;
          case 0x1ABu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1505;
            break;
          case 0x1ACu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1520;
            break;
          case 0x1ADu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1521;
            break;
          case 0x1AEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1522;
            break;
          case 0x1AFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1523;
            break;
          case 0x1B0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1524;
            break;
          case 0x1B1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 1525;
            break;
          case 0x1B2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2048;
            break;
          case 0x1B3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2049;
            break;
          case 0x1B4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2050;
            break;
          case 0x1B5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2051;
            break;
          case 0x1B6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2052;
            break;
          case 0x1B7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2053;
            break;
          case 0x1B8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2054;
            break;
          case 0x1B9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2064;
            break;
          case 0x1BAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2065;
            break;
          case 0x1BBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2066;
            break;
          case 0x1BCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2067;
            break;
          case 0x1BDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2068;
            break;
          case 0x1BEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2069;
            break;
          case 0x1BFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2070;
            break;
          case 0x1C0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2071;
            break;
          case 0x1C1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2072;
            break;
          case 0x1C2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2073;
            break;
          case 0x1C3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2074;
            break;
          case 0x1C4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2075;
            break;
          case 0x1C5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2076;
            break;
          case 0x1C6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2077;
            break;
          case 0x1C7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2078;
            break;
          case 0x1C8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2079;
            break;
          case 0x1C9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2080;
            break;
          case 0x1CAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2096;
            break;
          case 0x1CBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2097;
            break;
          case 0x1CCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2098;
            break;
          case 0x1CDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2112;
            break;
          case 0x1CEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2113;
            break;
          case 0x1CFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2114;
            break;
          case 0x1D0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2115;
            break;
          case 0x1D1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2116;
            break;
          case 0x1D2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2117;
            break;
          case 0x1D3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2128;
            break;
          case 0x1D4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2129;
            break;
          case 0x1D5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2130;
            break;
          case 0x1D6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2131;
            break;
          case 0x1D7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2132;
            break;
          case 0x1D8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2133;
            break;
          case 0x1D9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2144;
            break;
          case 0x1DAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2145;
            break;
          case 0x1DBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2146;
            break;
          case 0x1DCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2147;
            break;
          case 0x1DDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2160;
            break;
          case 0x1DEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2161;
            break;
          case 0x1DFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2162;
            break;
          case 0x1E0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2176;
            break;
          case 0x1E1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2177;
            break;
          case 0x1E2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2178;
            break;
          case 0x1E3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2179;
            break;
          case 0x1E4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2180;
            break;
          case 0x1E5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2181;
            break;
          case 0x1E6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2182;
            break;
          case 0x1E7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2183;
            break;
          case 0x1E8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2184;
            break;
          case 0x1E9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2192;
            break;
          case 0x1EAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2193;
            break;
          case 0x1EBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2208;
            break;
          case 0x1ECu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2209;
            break;
          case 0x1EDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2210;
            break;
          case 0x1EEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2211;
            break;
          case 0x1EFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2212;
            break;
          case 0x1F0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2213;
            break;
          case 0x1F1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2224;
            break;
          case 0x1F2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2225;
            break;
          case 0x1F3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2240;
            break;
          case 0x1F4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2241;
            break;
          case 0x1F5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2242;
            break;
          case 0x1F6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2243;
            break;
          case 0x1F7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2244;
            break;
          case 0x1F8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2245;
            break;
          case 0x1F9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2246;
            break;
          case 0x1FAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2256;
            break;
          case 0x1FBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2257;
            break;
          case 0x1FCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2258;
            break;
          case 0x1FDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2259;
            break;
          case 0x1FEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2260;
            break;
          case 0x1FFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2272;
            break;
          case 0x200u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2273;
            break;
          case 0x201u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2274;
            break;
          case 0x202u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2288;
            break;
          case 0x203u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2289;
            break;
          case 0x204u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2290;
            break;
          case 0x205u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2291;
            break;
          case 0x206u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2292;
            break;
          case 0x207u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2293;
            break;
          case 0x208u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2304;
            break;
          case 0x209u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2305;
            break;
          case 0x20Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2306;
            break;
          case 0x20Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2307;
            break;
          case 0x20Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2308;
            break;
          case 0x20Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2309;
            break;
          case 0x20Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2310;
            break;
          case 0x20Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2311;
            break;
          case 0x210u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2312;
            break;
          case 0x211u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2313;
            break;
          case 0x212u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2314;
            break;
          case 0x213u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2315;
            break;
          case 0x214u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2316;
            break;
          case 0x215u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2317;
            break;
          case 0x216u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2318;
            break;
          case 0x217u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2319;
            break;
          case 0x218u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2320;
            break;
          case 0x219u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2321;
            break;
          case 0x21Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2322;
            break;
          case 0x21Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2323;
            break;
          case 0x21Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2324;
            break;
          case 0x21Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2325;
            break;
          case 0x21Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2326;
            break;
          case 0x21Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2327;
            break;
          case 0x220u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2328;
            break;
          case 0x221u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2329;
            break;
          case 0x222u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2330;
            break;
          case 0x223u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2331;
            break;
          case 0x224u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2332;
            break;
          case 0x225u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2333;
            break;
          case 0x226u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2334;
            break;
          case 0x227u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2335;
            break;
          case 0x228u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2336;
            break;
          case 0x229u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2337;
            break;
          case 0x22Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2338;
            break;
          case 0x22Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2339;
            break;
          case 0x22Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2340;
            break;
          case 0x22Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2341;
            break;
          case 0x22Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2342;
            break;
          case 0x22Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2343;
            break;
          case 0x230u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2344;
            break;
          case 0x231u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2345;
            break;
          case 0x232u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2346;
            break;
          case 0x233u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2347;
            break;
          case 0x234u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2348;
            break;
          case 0x235u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2349;
            break;
          case 0x236u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2350;
            break;
          case 0x237u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2351;
            break;
          case 0x238u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2352;
            break;
          case 0x239u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2353;
            break;
          case 0x23Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2354;
            break;
          case 0x23Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2355;
            break;
          case 0x23Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2356;
            break;
          case 0x23Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2357;
            break;
          case 0x23Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2358;
            break;
          case 0x23Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2359;
            break;
          case 0x240u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2368;
            break;
          case 0x241u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2369;
            break;
          case 0x242u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2370;
            break;
          case 0x243u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2371;
            break;
          case 0x244u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2372;
            break;
          case 0x245u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2373;
            break;
          case 0x246u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2374;
            break;
          case 0x247u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2375;
            break;
          case 0x248u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2376;
            break;
          case 0x249u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2377;
            break;
          case 0x24Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2378;
            break;
          case 0x24Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2379;
            break;
          case 0x24Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2380;
            break;
          case 0x24Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2381;
            break;
          case 0x24Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2382;
            break;
          case 0x24Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2383;
            break;
          case 0x250u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2384;
            break;
          case 0x251u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2385;
            break;
          case 0x252u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2386;
            break;
          case 0x253u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2387;
            break;
          case 0x254u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2388;
            break;
          case 0x255u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2389;
            break;
          case 0x256u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2390;
            break;
          case 0x257u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2391;
            break;
          case 0x258u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2392;
            break;
          case 0x259u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2393;
            break;
          case 0x25Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2394;
            break;
          case 0x25Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2395;
            break;
          case 0x25Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2396;
            break;
          case 0x25Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2397;
            break;
          case 0x25Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2398;
            break;
          case 0x25Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2400;
            break;
          case 0x260u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2401;
            break;
          case 0x261u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2402;
            break;
          case 0x262u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2416;
            break;
          case 0x263u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2417;
            break;
          case 0x264u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2418;
            break;
          case 0x265u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2419;
            break;
          case 0x266u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2420;
            break;
          case 0x267u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2421;
            break;
          case 0x268u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2422;
            break;
          case 0x269u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2423;
            break;
          case 0x26Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2424;
            break;
          case 0x26Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2425;
            break;
          case 0x26Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2426;
            break;
          case 0x26Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2427;
            break;
          case 0x26Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2428;
            break;
          case 0x26Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2429;
            break;
          case 0x270u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2430;
            break;
          case 0x271u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2431;
            break;
          case 0x272u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2432;
            break;
          case 0x273u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2433;
            break;
          case 0x274u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2434;
            break;
          case 0x275u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2435;
            break;
          case 0x276u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2436;
            break;
          case 0x277u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2437;
            break;
          case 0x278u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2448;
            break;
          case 0x279u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2449;
            break;
          case 0x27Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2450;
            break;
          case 0x27Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2464;
            break;
          case 0x27Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2465;
            break;
          case 0x27Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2466;
            break;
          case 0x27Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2467;
            break;
          case 0x27Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2480;
            break;
          case 0x280u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2481;
            break;
          case 0x281u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2482;
            break;
          case 0x282u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2483;
            break;
          case 0x283u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2484;
            break;
          case 0x284u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2485;
            break;
          case 0x285u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2486;
            break;
          case 0x286u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2496;
            break;
          case 0x287u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2497;
            break;
          case 0x288u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2498;
            break;
          case 0x289u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2499;
            break;
          case 0x28Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4096;
            break;
          case 0x28Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 0x2000;
            break;
          case 0x28Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 12288;
            break;
          case 0x28Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 0x4000;
            break;
          case 0x28Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 20480;
            break;
          case 0x28Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 24576;
            break;
          case 0x290u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 28672;
            break;
          case 0x291u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 0x8000;
            break;
          case 0x292u:
            LODWORD(v3) = 0;
            LOWORD(v2) = -28672;
            break;
          case 0x293u:
            LODWORD(v3) = 0;
            LOWORD(v2) = -24576;
            break;
          case 0x294u:
            LODWORD(v3) = 0;
            LOWORD(v2) = -20480;
            break;
          case 0x295u:
            LODWORD(v3) = 0;
            LOWORD(v2) = -16384;
            break;
          case 0x296u:
            LODWORD(v3) = 0;
            LOWORD(v2) = -12288;
            break;
          case 0x297u:
            LODWORD(v3) = 0;
            LOWORD(v2) = -8192;
            break;
          case 0x298u:
            LODWORD(v3) = 0;
            LOWORD(v2) = -4096;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0x13:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 35;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 37;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 38;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 39;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 64;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 65;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 66;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 67;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 68;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 96;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 97;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 112;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 128;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 129;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 130;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 131;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 132;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 133;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 134;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 135;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 136;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 137;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 160;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 161;
          break;
        case 0x1Du:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 0x14:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 2;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 3;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 5;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 6;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 7;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 250;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 251;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 252;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 256;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 257;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 512;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 513;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 514;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 515;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 516;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 517;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 518;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 519;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 520;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 521;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 522;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 523;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 524;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 525;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 526;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 527;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 528;
          break;
        case 0x1Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 529;
          break;
        case 0x1Eu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 530;
          break;
        case 0x1Fu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 531;
          break;
        case 0x20u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 532;
          break;
        case 0x21u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 533;
          break;
        case 0x22u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 534;
          break;
        case 0x23u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 535;
          break;
        case 0x24u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 536;
          break;
        case 0x25u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 537;
          break;
        case 0x26u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 538;
          break;
        case 0x27u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 539;
          break;
        case 0x28u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 540;
          break;
        case 0x29u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 541;
          break;
        case 0x2Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 542;
          break;
        case 0x2Bu:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 0x15:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 2;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 3;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 4;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 5;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 6;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 7;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 8;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 35;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 37;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 38;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 39;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 40;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 41;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 42;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 43;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 44;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 45;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 80;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 81;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 82;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 83;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 84;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 85;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 96;
          break;
        case 0x1Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 97;
          break;
        case 0x1Eu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 98;
          break;
        case 0x1Fu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 112;
          break;
        case 0x20u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 113;
          break;
        case 0x21u:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 0x16:
      if (*v0 == 4) {
        LOWORD(v2) = 0;
      }
      else {
        LOWORD(v2) = *v0 + 1;
      }
      LODWORD(v3) = *v0 == 4;
      break;
    case 0x17:
      uint64_t v3 = (v1 >> 16) & 1;
      LODWORD(v2) = *v0;
      break;
    case 0x18:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 16;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 18;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 22;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 24;
          break;
        case 5u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 26;
          break;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 28;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 38;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 40;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 42;
          break;
        case 0xDu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 44;
          break;
        case 0xEu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 48;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 50;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 52;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 54;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 56;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 58;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 60;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 64;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 66;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 68;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 70;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 72;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 74;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 76;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 86;
          break;
        case 0x1Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 88;
          break;
        case 0x1Eu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 94;
          break;
        case 0x1Fu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 96;
          break;
        case 0x20u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 108;
          break;
        case 0x21u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 110;
          break;
        case 0x22u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 112;
          break;
        case 0x23u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 162;
          break;
        case 0x24u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 164;
          break;
        case 0x25u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 166;
          break;
        case 0x26u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 168;
          break;
        case 0x27u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 170;
          break;
        case 0x28u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 172;
          break;
        case 0x29u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 174;
          break;
        case 0x2Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 176;
          break;
        case 0x2Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 202;
          break;
        case 0x2Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 212;
          break;
        case 0x2Du:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 0x19:
      if (*v0 == 77)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 3;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 16;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 17;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 18;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 19;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 20;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 21;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 22;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 23;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 24;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 25;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 26;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 27;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 28;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 29;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 30;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 31;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 32;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 33;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 34;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 35;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 36;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 37;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 55;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 56;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 71;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 80;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 81;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 82;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 83;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 84;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 85;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 86;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 87;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 88;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 89;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 90;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 103;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 104;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 105;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 107;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 108;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 109;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 110;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 111;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 112;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 113;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 114;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 115;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 253;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 254;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 255;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0x1A:
      if (*v0 == 91)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 3;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 6;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 7;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 8;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 9;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 16;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 17;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 18;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 19;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 20;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 21;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 22;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 23;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 24;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 25;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 26;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 27;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 28;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 29;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 40;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 41;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 42;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 43;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 44;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 45;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 46;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 47;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 71;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 72;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 73;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 74;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 75;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 103;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 104;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 105;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 106;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 107;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 129;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 134;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 135;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 136;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 137;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 138;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 139;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 140;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 141;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 142;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 143;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 192;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 193;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 194;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 208;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 209;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 210;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 211;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 212;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 213;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 214;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 215;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 216;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 217;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 218;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 219;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 220;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 240;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 241;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 242;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 243;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0x1B:
      if (*v0 == 194)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 3;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 16;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 17;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 18;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 19;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 20;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 21;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 22;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 23;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 24;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 25;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 26;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 27;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 28;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 29;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 30;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 31;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 55;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 56;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 57;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 58;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 59;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 60;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 61;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 62;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 63;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 77;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 78;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 79;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 80;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 81;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 82;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 85;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 86;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 87;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 88;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 89;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 90;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 91;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 92;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 93;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 94;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 95;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 96;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 97;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 98;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 99;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 100;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 101;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 102;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 109;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 110;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 111;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 112;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 117;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 118;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 122;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 123;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 124;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 125;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 126;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 127;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 134;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 135;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 136;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 137;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 138;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 139;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 147;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 148;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 149;
            break;
          case 0x60u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 150;
            break;
          case 0x61u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 151;
            break;
          case 0x62u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 152;
            break;
          case 0x63u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 153;
            break;
          case 0x64u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 154;
            break;
          case 0x65u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 155;
            break;
          case 0x66u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 156;
            break;
          case 0x67u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 157;
            break;
          case 0x68u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 158;
            break;
          case 0x69u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 159;
            break;
          case 0x6Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 160;
            break;
          case 0x6Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 161;
            break;
          case 0x6Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 162;
            break;
          case 0x6Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 169;
            break;
          case 0x6Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 170;
            break;
          case 0x6Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 171;
            break;
          case 0x70u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 172;
            break;
          case 0x71u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 173;
            break;
          case 0x72u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 174;
            break;
          case 0x73u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 175;
            break;
          case 0x74u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 176;
            break;
          case 0x75u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 177;
            break;
          case 0x76u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 178;
            break;
          case 0x77u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 179;
            break;
          case 0x78u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 180;
            break;
          case 0x79u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 181;
            break;
          case 0x7Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 183;
            break;
          case 0x7Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 184;
            break;
          case 0x7Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 185;
            break;
          case 0x7Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 186;
            break;
          case 0x7Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 187;
            break;
          case 0x7Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 188;
            break;
          case 0x80u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 189;
            break;
          case 0x81u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 190;
            break;
          case 0x82u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 191;
            break;
          case 0x83u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 192;
            break;
          case 0x84u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 195;
            break;
          case 0x85u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 196;
            break;
          case 0x86u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 199;
            break;
          case 0x87u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 200;
            break;
          case 0x88u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 201;
            break;
          case 0x89u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 202;
            break;
          case 0x8Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 203;
            break;
          case 0x8Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 204;
            break;
          case 0x8Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 205;
            break;
          case 0x8Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 206;
            break;
          case 0x8Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 211;
            break;
          case 0x8Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 212;
            break;
          case 0x90u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 213;
            break;
          case 0x91u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 214;
            break;
          case 0x92u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 215;
            break;
          case 0x93u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 216;
            break;
          case 0x94u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 217;
            break;
          case 0x95u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 218;
            break;
          case 0x96u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 219;
            break;
          case 0x97u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 220;
            break;
          case 0x98u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 221;
            break;
          case 0x99u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 222;
            break;
          case 0x9Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 223;
            break;
          case 0x9Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 240;
            break;
          case 0x9Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 241;
            break;
          case 0x9Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 242;
            break;
          case 0x9Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 251;
            break;
          case 0x9Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 252;
            break;
          case 0xA0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 253;
            break;
          case 0xA1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 254;
            break;
          case 0xA2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 255;
            break;
          case 0xA3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 256;
            break;
          case 0xA4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 257;
            break;
          case 0xA5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 258;
            break;
          case 0xA6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 259;
            break;
          case 0xA7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 260;
            break;
          case 0xA8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 262;
            break;
          case 0xA9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 263;
            break;
          case 0xAAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 264;
            break;
          case 0xABu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 265;
            break;
          case 0xACu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 266;
            break;
          case 0xADu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 267;
            break;
          case 0xAEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 268;
            break;
          case 0xAFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 269;
            break;
          case 0xB0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 272;
            break;
          case 0xB1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 273;
            break;
          case 0xB2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 274;
            break;
          case 0xB3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 275;
            break;
          case 0xB4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 276;
            break;
          case 0xB5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 277;
            break;
          case 0xB6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 278;
            break;
          case 0xB7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 279;
            break;
          case 0xB8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 280;
            break;
          case 0xB9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 281;
            break;
          case 0xBAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 282;
            break;
          case 0xBBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 283;
            break;
          case 0xBCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 284;
            break;
          case 0xBDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 285;
            break;
          case 0xBEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 286;
            break;
          case 0xBFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 287;
            break;
          case 0xC0u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 288;
            break;
          case 0xC1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 289;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
    case 0x1C:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          goto LABEL_96;
        case 2u:
          goto LABEL_97;
        case 3u:
          goto LABEL_98;
        case 4u:
          goto LABEL_99;
        case 5u:
          goto LABEL_100;
        case 6u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 37;
          break;
        case 7u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 38;
          break;
        case 8u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 39;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 40;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 41;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 42;
          break;
        case 0xCu:
          goto LABEL_115;
        case 0xDu:
          goto LABEL_116;
        case 0xEu:
          goto LABEL_117;
        case 0xFu:
          goto LABEL_118;
        case 0x10u:
          goto LABEL_119;
        case 0x11u:
          goto LABEL_120;
        case 0x12u:
          goto LABEL_121;
        case 0x13u:
          goto LABEL_122;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 80;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 81;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 82;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 83;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 84;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 85;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 86;
          break;
        case 0x1Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 87;
          break;
        case 0x1Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 88;
          break;
        case 0x1Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 89;
          break;
        case 0x1Eu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 90;
          break;
        case 0x1Fu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 91;
          break;
        case 0x20u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 92;
          break;
        case 0x21u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 96;
          break;
        case 0x22u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 97;
          break;
        case 0x23u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 112;
          break;
        case 0x24u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 113;
          break;
        case 0x25u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 114;
          break;
        case 0x26u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 115;
          break;
        case 0x27u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 116;
          break;
        case 0x28u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 117;
          break;
        case 0x29u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 118;
          break;
        case 0x2Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 119;
          break;
        case 0x2Bu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 120;
          break;
        case 0x2Cu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 128;
          break;
        case 0x2Du:
          LODWORD(v3) = 0;
          LOWORD(v2) = 129;
          break;
        case 0x2Eu:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          goto LABEL_70;
      }
      break;
    case 0x1D:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 17;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 18;
          break;
        case 3u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 19;
          break;
        case 4u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 20;
          break;
        case 5u:
          goto LABEL_96;
        case 6u:
          goto LABEL_97;
        case 7u:
LABEL_98:
          LODWORD(v3) = 0;
          LOWORD(v2) = 34;
          break;
        case 8u:
LABEL_99:
          LODWORD(v3) = 0;
          LOWORD(v2) = 35;
          break;
        case 9u:
LABEL_100:
          LODWORD(v3) = 0;
          LOWORD(v2) = 36;
          break;
        case 0xAu:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          goto LABEL_70;
      }
      break;
    case 0x1E:
      if (*v0 == 2) {
        LOWORD(v2) = 0;
      }
      else {
        LOWORD(v2) = *v0 & 1 | 0x20;
      }
      LODWORD(v3) = *v0 == 2;
      break;
    case 0x1F:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 2;
          break;
        case 2u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 3;
          break;
        case 3u:
LABEL_115:
          LODWORD(v3) = 0;
          LOWORD(v2) = 48;
          break;
        case 4u:
LABEL_116:
          LODWORD(v3) = 0;
          LOWORD(v2) = 49;
          break;
        case 5u:
LABEL_117:
          LODWORD(v3) = 0;
          LOWORD(v2) = 50;
          break;
        case 6u:
LABEL_118:
          LODWORD(v3) = 0;
          LOWORD(v2) = 51;
          break;
        case 7u:
LABEL_119:
          LODWORD(v3) = 0;
          LOWORD(v2) = 52;
          break;
        case 8u:
LABEL_120:
          LODWORD(v3) = 0;
          LOWORD(v2) = 53;
          break;
        case 9u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 54;
          break;
        case 0xAu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 55;
          break;
        case 0xBu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 56;
          break;
        case 0xCu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 57;
          break;
        case 0xDu:
LABEL_121:
          LODWORD(v3) = 0;
          LOWORD(v2) = 64;
          break;
        case 0xEu:
LABEL_122:
          LODWORD(v3) = 0;
          LOWORD(v2) = 65;
          break;
        case 0xFu:
          LODWORD(v3) = 0;
          LOWORD(v2) = 66;
          break;
        case 0x10u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 67;
          break;
        case 0x11u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 68;
          break;
        case 0x12u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 69;
          break;
        case 0x13u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 70;
          break;
        case 0x14u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 71;
          break;
        case 0x15u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 72;
          break;
        case 0x16u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 73;
          break;
        case 0x17u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 74;
          break;
        case 0x18u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 75;
          break;
        case 0x19u:
          LODWORD(v3) = 0;
          LOWORD(v2) = 76;
          break;
        case 0x1Au:
          LODWORD(v3) = 0;
          LOWORD(v2) = 77;
          break;
        case 0x1Bu:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
          goto LABEL_70;
      }
      break;
    case 0x20:
      LODWORD(v3) = 1;
      LOWORD(v2) = 0;
      switch(*v0)
      {
        case 1u:
LABEL_96:
          LODWORD(v3) = 0;
          LOWORD(v2) = 32;
          break;
        case 2u:
LABEL_97:
          LODWORD(v3) = 0;
          LOWORD(v2) = 33;
          break;
        case 3u:
          return (unsigned __int16)v2 | (v3 << 16);
        default:
LABEL_70:
          LODWORD(v3) = 0;
          LOWORD(v2) = 1;
          break;
      }
      break;
    case 0x21:
      unint64_t v2 = v1 >> 16;
      uint64_t v3 = HIDWORD(v1) & 1;
      break;
    default:
      if (*v0 == 114)
      {
        LOWORD(v2) = 0;
        LODWORD(v3) = 1;
      }
      else
      {
        LOWORD(v2) = 1;
        LODWORD(v3) = 0;
        switch(*v0)
        {
          case 1u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 2;
            break;
          case 2u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 4;
            break;
          case 3u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 5;
            break;
          case 4u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 6;
            break;
          case 5u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 7;
            break;
          case 6u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 8;
            break;
          case 7u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 9;
            break;
          case 8u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 10;
            break;
          case 9u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 11;
            break;
          case 0xAu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 12;
            break;
          case 0xBu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 13;
            break;
          case 0xCu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 14;
            break;
          case 0xDu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 15;
            break;
          case 0xEu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 16;
            break;
          case 0xFu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 17;
            break;
          case 0x10u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 18;
            break;
          case 0x11u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 19;
            break;
          case 0x12u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 48;
            break;
          case 0x13u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 49;
            break;
          case 0x14u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 50;
            break;
          case 0x15u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 51;
            break;
          case 0x16u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 52;
            break;
          case 0x17u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 53;
            break;
          case 0x18u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 54;
            break;
          case 0x19u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 55;
            break;
          case 0x1Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 56;
            break;
          case 0x1Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 57;
            break;
          case 0x1Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 58;
            break;
          case 0x1Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 59;
            break;
          case 0x1Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 60;
            break;
          case 0x1Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 61;
            break;
          case 0x20u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 62;
            break;
          case 0x21u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 64;
            break;
          case 0x22u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 65;
            break;
          case 0x23u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 66;
            break;
          case 0x24u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 67;
            break;
          case 0x25u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 68;
            break;
          case 0x26u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 69;
            break;
          case 0x27u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 70;
            break;
          case 0x28u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 71;
            break;
          case 0x29u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 72;
            break;
          case 0x2Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 73;
            break;
          case 0x2Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 74;
            break;
          case 0x2Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 75;
            break;
          case 0x2Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 76;
            break;
          case 0x2Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 128;
            break;
          case 0x2Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 129;
            break;
          case 0x30u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 130;
            break;
          case 0x31u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 131;
            break;
          case 0x32u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 132;
            break;
          case 0x33u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 133;
            break;
          case 0x34u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 134;
            break;
          case 0x35u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 135;
            break;
          case 0x36u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 136;
            break;
          case 0x37u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 137;
            break;
          case 0x38u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 138;
            break;
          case 0x39u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 139;
            break;
          case 0x3Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 140;
            break;
          case 0x3Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 141;
            break;
          case 0x3Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 142;
            break;
          case 0x3Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 143;
            break;
          case 0x3Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 144;
            break;
          case 0x3Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 145;
            break;
          case 0x40u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 146;
            break;
          case 0x41u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 147;
            break;
          case 0x42u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 148;
            break;
          case 0x43u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 149;
            break;
          case 0x44u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 150;
            break;
          case 0x45u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 151;
            break;
          case 0x46u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 152;
            break;
          case 0x47u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 153;
            break;
          case 0x48u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 154;
            break;
          case 0x49u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 155;
            break;
          case 0x4Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 160;
            break;
          case 0x4Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 161;
            break;
          case 0x4Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 162;
            break;
          case 0x4Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 163;
            break;
          case 0x4Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 164;
            break;
          case 0x4Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 165;
            break;
          case 0x50u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 166;
            break;
          case 0x51u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 167;
            break;
          case 0x52u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 168;
            break;
          case 0x53u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 169;
            break;
          case 0x54u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 176;
            break;
          case 0x55u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 177;
            break;
          case 0x56u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 178;
            break;
          case 0x57u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 179;
            break;
          case 0x58u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 180;
            break;
          case 0x59u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 181;
            break;
          case 0x5Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 182;
            break;
          case 0x5Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 183;
            break;
          case 0x5Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 192;
            break;
          case 0x5Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 193;
            break;
          case 0x5Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 194;
            break;
          case 0x5Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 195;
            break;
          case 0x60u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 196;
            break;
          case 0x61u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 197;
            break;
          case 0x62u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 198;
            break;
          case 0x63u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 199;
            break;
          case 0x64u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 200;
            break;
          case 0x65u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 201;
            break;
          case 0x66u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 202;
            break;
          case 0x67u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 203;
            break;
          case 0x68u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 208;
            break;
          case 0x69u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 209;
            break;
          case 0x6Au:
            LODWORD(v3) = 0;
            LOWORD(v2) = 210;
            break;
          case 0x6Bu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 211;
            break;
          case 0x6Cu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 212;
            break;
          case 0x6Du:
            LODWORD(v3) = 0;
            LOWORD(v2) = 213;
            break;
          case 0x6Eu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 214;
            break;
          case 0x6Fu:
            LODWORD(v3) = 0;
            LOWORD(v2) = 224;
            break;
          case 0x70u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 225;
            break;
          case 0x71u:
            LODWORD(v3) = 0;
            LOWORD(v2) = 226;
            break;
          default:
            return (unsigned __int16)v2 | (v3 << 16);
        }
      }
      break;
  }
  return (unsigned __int16)v2 | (v3 << 16);
}

uint64_t HIDUsage.GenericDesktopUsage.rawValue.getter()
{
  return word_24B53A352[*v0];
}

uint64_t HIDUsage.SimulationControlsUsage.rawValue.getter()
{
  return word_24B53A436[*v0];
}

uint64_t HIDUsage.VRControlsUsage.rawValue.getter()
{
  return word_24B53A49C[*v0];
}

uint64_t HIDUsage.SportControlsUsage.rawValue.getter()
{
  return word_24B53A4B4[*v0];
}

uint64_t HIDUsage.GameControlsUsage.rawValue.getter()
{
  return word_24B53A4F8[*v0];
}

uint64_t HIDUsage.GenericDeviceControlsUsage.rawValue.getter()
{
  return word_24B53A532[*v0];
}

uint64_t HIDUsage.KeyboardOrKeypadUsage.rawValue.getter()
{
  uint64_t result = 1;
  switch(*v0)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
      uint64_t result = 5;
      break;
    case 5:
      uint64_t result = 6;
      break;
    case 6:
      uint64_t result = 7;
      break;
    case 7:
      uint64_t result = 8;
      break;
    case 8:
      uint64_t result = 9;
      break;
    case 9:
      uint64_t result = 10;
      break;
    case 0xA:
      uint64_t result = 11;
      break;
    case 0xB:
      uint64_t result = 12;
      break;
    case 0xC:
      uint64_t result = 13;
      break;
    case 0xD:
      uint64_t result = 14;
      break;
    case 0xE:
      uint64_t result = 15;
      break;
    case 0xF:
      uint64_t result = 16;
      break;
    case 0x10:
      uint64_t result = 17;
      break;
    case 0x11:
      uint64_t result = 18;
      break;
    case 0x12:
      uint64_t result = 19;
      break;
    case 0x13:
      uint64_t result = 20;
      break;
    case 0x14:
      uint64_t result = 21;
      break;
    case 0x15:
      uint64_t result = 22;
      break;
    case 0x16:
      uint64_t result = 23;
      break;
    case 0x17:
      uint64_t result = 24;
      break;
    case 0x18:
      uint64_t result = 25;
      break;
    case 0x19:
      uint64_t result = 26;
      break;
    case 0x1A:
      uint64_t result = 27;
      break;
    case 0x1B:
      uint64_t result = 28;
      break;
    case 0x1C:
      uint64_t result = 29;
      break;
    case 0x1D:
      uint64_t result = 30;
      break;
    case 0x1E:
      uint64_t result = 31;
      break;
    case 0x1F:
      uint64_t result = 32;
      break;
    case 0x20:
      uint64_t result = 33;
      break;
    case 0x21:
      uint64_t result = 34;
      break;
    case 0x22:
      uint64_t result = 35;
      break;
    case 0x23:
      uint64_t result = 36;
      break;
    case 0x24:
      uint64_t result = 37;
      break;
    case 0x25:
      uint64_t result = 38;
      break;
    case 0x26:
      uint64_t result = 39;
      break;
    case 0x27:
      uint64_t result = 40;
      break;
    case 0x28:
      uint64_t result = 41;
      break;
    case 0x29:
      uint64_t result = 42;
      break;
    case 0x2A:
      uint64_t result = 43;
      break;
    case 0x2B:
      uint64_t result = 44;
      break;
    case 0x2C:
      uint64_t result = 45;
      break;
    case 0x2D:
      uint64_t result = 46;
      break;
    case 0x2E:
      uint64_t result = 47;
      break;
    case 0x2F:
      uint64_t result = 48;
      break;
    case 0x30:
      uint64_t result = 49;
      break;
    case 0x31:
      uint64_t result = 50;
      break;
    case 0x32:
      uint64_t result = 51;
      break;
    case 0x33:
      uint64_t result = 52;
      break;
    case 0x34:
      uint64_t result = 53;
      break;
    case 0x35:
      uint64_t result = 54;
      break;
    case 0x36:
      uint64_t result = 55;
      break;
    case 0x37:
      uint64_t result = 56;
      break;
    case 0x38:
      uint64_t result = 57;
      break;
    case 0x39:
      uint64_t result = 58;
      break;
    case 0x3A:
      uint64_t result = 59;
      break;
    case 0x3B:
      uint64_t result = 60;
      break;
    case 0x3C:
      uint64_t result = 61;
      break;
    case 0x3D:
      uint64_t result = 62;
      break;
    case 0x3E:
      uint64_t result = 63;
      break;
    case 0x3F:
      uint64_t result = 64;
      break;
    case 0x40:
      uint64_t result = 65;
      break;
    case 0x41:
      uint64_t result = 66;
      break;
    case 0x42:
      uint64_t result = 67;
      break;
    case 0x43:
      uint64_t result = 68;
      break;
    case 0x44:
      uint64_t result = 69;
      break;
    case 0x45:
      uint64_t result = 70;
      break;
    case 0x46:
      uint64_t result = 71;
      break;
    case 0x47:
      uint64_t result = 72;
      break;
    case 0x48:
      uint64_t result = 73;
      break;
    case 0x49:
      uint64_t result = 74;
      break;
    case 0x4A:
      uint64_t result = 75;
      break;
    case 0x4B:
      uint64_t result = 76;
      break;
    case 0x4C:
      uint64_t result = 77;
      break;
    case 0x4D:
      uint64_t result = 78;
      break;
    case 0x4E:
      uint64_t result = 79;
      break;
    case 0x4F:
      uint64_t result = 80;
      break;
    case 0x50:
      uint64_t result = 81;
      break;
    case 0x51:
      uint64_t result = 82;
      break;
    case 0x52:
      uint64_t result = 83;
      break;
    case 0x53:
      uint64_t result = 84;
      break;
    case 0x54:
      uint64_t result = 85;
      break;
    case 0x55:
      uint64_t result = 86;
      break;
    case 0x56:
      uint64_t result = 87;
      break;
    case 0x57:
      uint64_t result = 88;
      break;
    case 0x58:
      uint64_t result = 89;
      break;
    case 0x59:
      uint64_t result = 90;
      break;
    case 0x5A:
      uint64_t result = 91;
      break;
    case 0x5B:
      uint64_t result = 92;
      break;
    case 0x5C:
      uint64_t result = 93;
      break;
    case 0x5D:
      uint64_t result = 94;
      break;
    case 0x5E:
      uint64_t result = 95;
      break;
    case 0x5F:
      uint64_t result = 96;
      break;
    case 0x60:
      uint64_t result = 97;
      break;
    case 0x61:
      uint64_t result = 98;
      break;
    case 0x62:
      uint64_t result = 99;
      break;
    case 0x63:
      uint64_t result = 100;
      break;
    case 0x64:
      uint64_t result = 101;
      break;
    case 0x65:
      uint64_t result = 102;
      break;
    case 0x66:
      uint64_t result = 103;
      break;
    case 0x67:
      uint64_t result = 104;
      break;
    case 0x68:
      uint64_t result = 105;
      break;
    case 0x69:
      uint64_t result = 106;
      break;
    case 0x6A:
      uint64_t result = 107;
      break;
    case 0x6B:
      uint64_t result = 108;
      break;
    case 0x6C:
      uint64_t result = 109;
      break;
    case 0x6D:
      uint64_t result = 110;
      break;
    case 0x6E:
      uint64_t result = 111;
      break;
    case 0x6F:
      uint64_t result = 112;
      break;
    case 0x70:
      uint64_t result = 113;
      break;
    case 0x71:
      uint64_t result = 114;
      break;
    case 0x72:
      uint64_t result = 115;
      break;
    case 0x73:
      uint64_t result = 116;
      break;
    case 0x74:
      uint64_t result = 117;
      break;
    case 0x75:
      uint64_t result = 118;
      break;
    case 0x76:
      uint64_t result = 119;
      break;
    case 0x77:
      uint64_t result = 120;
      break;
    case 0x78:
      uint64_t result = 121;
      break;
    case 0x79:
      uint64_t result = 122;
      break;
    case 0x7A:
      uint64_t result = 123;
      break;
    case 0x7B:
      uint64_t result = 124;
      break;
    case 0x7C:
      uint64_t result = 125;
      break;
    case 0x7D:
      uint64_t result = 126;
      break;
    case 0x7E:
      uint64_t result = 127;
      break;
    case 0x7F:
      uint64_t result = 128;
      break;
    case 0x80:
      uint64_t result = 129;
      break;
    case 0x81:
      uint64_t result = 130;
      break;
    case 0x82:
      uint64_t result = 131;
      break;
    case 0x83:
      uint64_t result = 132;
      break;
    case 0x84:
      uint64_t result = 133;
      break;
    case 0x85:
      uint64_t result = 134;
      break;
    case 0x86:
      uint64_t result = 135;
      break;
    case 0x87:
      uint64_t result = 136;
      break;
    case 0x88:
      uint64_t result = 137;
      break;
    case 0x89:
      uint64_t result = 138;
      break;
    case 0x8A:
      uint64_t result = 139;
      break;
    case 0x8B:
      uint64_t result = 140;
      break;
    case 0x8C:
      uint64_t result = 141;
      break;
    case 0x8D:
      uint64_t result = 142;
      break;
    case 0x8E:
      uint64_t result = 143;
      break;
    case 0x8F:
      uint64_t result = 144;
      break;
    case 0x90:
      uint64_t result = 145;
      break;
    case 0x91:
      uint64_t result = 146;
      break;
    case 0x92:
      uint64_t result = 147;
      break;
    case 0x93:
      uint64_t result = 148;
      break;
    case 0x94:
      uint64_t result = 149;
      break;
    case 0x95:
      uint64_t result = 150;
      break;
    case 0x96:
      uint64_t result = 151;
      break;
    case 0x97:
      uint64_t result = 152;
      break;
    case 0x98:
      uint64_t result = 153;
      break;
    case 0x99:
      uint64_t result = 154;
      break;
    case 0x9A:
      uint64_t result = 155;
      break;
    case 0x9B:
      uint64_t result = 156;
      break;
    case 0x9C:
      uint64_t result = 157;
      break;
    case 0x9D:
      uint64_t result = 158;
      break;
    case 0x9E:
      uint64_t result = 159;
      break;
    case 0x9F:
      uint64_t result = 160;
      break;
    case 0xA0:
      uint64_t result = 161;
      break;
    case 0xA1:
      uint64_t result = 162;
      break;
    case 0xA2:
      uint64_t result = 163;
      break;
    case 0xA3:
      uint64_t result = 164;
      break;
    case 0xA4:
      uint64_t result = 176;
      break;
    case 0xA5:
      uint64_t result = 177;
      break;
    case 0xA6:
      uint64_t result = 178;
      break;
    case 0xA7:
      uint64_t result = 179;
      break;
    case 0xA8:
      uint64_t result = 180;
      break;
    case 0xA9:
      uint64_t result = 181;
      break;
    case 0xAA:
      uint64_t result = 182;
      break;
    case 0xAB:
      uint64_t result = 183;
      break;
    case 0xAC:
      uint64_t result = 184;
      break;
    case 0xAD:
      uint64_t result = 185;
      break;
    case 0xAE:
      uint64_t result = 186;
      break;
    case 0xAF:
      uint64_t result = 187;
      break;
    case 0xB0:
      uint64_t result = 188;
      break;
    case 0xB1:
      uint64_t result = 189;
      break;
    case 0xB2:
      uint64_t result = 190;
      break;
    case 0xB3:
      uint64_t result = 191;
      break;
    case 0xB4:
      uint64_t result = 192;
      break;
    case 0xB5:
      uint64_t result = 193;
      break;
    case 0xB6:
      uint64_t result = 194;
      break;
    case 0xB7:
      uint64_t result = 195;
      break;
    case 0xB8:
      uint64_t result = 196;
      break;
    case 0xB9:
      uint64_t result = 197;
      break;
    case 0xBA:
      uint64_t result = 198;
      break;
    case 0xBB:
      uint64_t result = 199;
      break;
    case 0xBC:
      uint64_t result = 200;
      break;
    case 0xBD:
      uint64_t result = 201;
      break;
    case 0xBE:
      uint64_t result = 202;
      break;
    case 0xBF:
      uint64_t result = 203;
      break;
    case 0xC0:
      uint64_t result = 204;
      break;
    case 0xC1:
      uint64_t result = 205;
      break;
    case 0xC2:
      uint64_t result = 206;
      break;
    case 0xC3:
      uint64_t result = 207;
      break;
    case 0xC4:
      uint64_t result = 208;
      break;
    case 0xC5:
      uint64_t result = 209;
      break;
    case 0xC6:
      uint64_t result = 210;
      break;
    case 0xC7:
      uint64_t result = 211;
      break;
    case 0xC8:
      uint64_t result = 212;
      break;
    case 0xC9:
      uint64_t result = 213;
      break;
    case 0xCA:
      uint64_t result = 214;
      break;
    case 0xCB:
      uint64_t result = 215;
      break;
    case 0xCC:
      uint64_t result = 216;
      break;
    case 0xCD:
      uint64_t result = 217;
      break;
    case 0xCE:
      uint64_t result = 218;
      break;
    case 0xCF:
      uint64_t result = 219;
      break;
    case 0xD0:
      uint64_t result = 220;
      break;
    case 0xD1:
      uint64_t result = 221;
      break;
    case 0xD2:
      uint64_t result = 224;
      break;
    case 0xD3:
      uint64_t result = 225;
      break;
    case 0xD4:
      uint64_t result = 226;
      break;
    case 0xD5:
      uint64_t result = 227;
      break;
    case 0xD6:
      uint64_t result = 228;
      break;
    case 0xD7:
      uint64_t result = 229;
      break;
    case 0xD8:
      uint64_t result = 230;
      break;
    case 0xD9:
      uint64_t result = 231;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t HIDUsage.LEDUsage.rawValue.getter()
{
  return word_24B53A562[*v0];
}

uint64_t HIDUsage.TelephonyDeviceUsage.rawValue.getter()
{
  return word_24B53A622[*v0];
}

uint64_t HIDUsage.ConsumerUsage.rawValue.getter()
{
  return word_24B53A6E8[*v0];
}

uint64_t HIDUsage.DigitizersUsage.rawValue.getter()
{
  return word_24B53AA6C[*v0];
}

uint64_t HIDUsage.HapticsUsage.rawValue.getter()
{
  return word_24B53AB44[*v0];
}

uint64_t HIDUsage.PhysicalInputDeviceUsage.rawValue.getter()
{
  return word_24B53AB7E[*v0];
}

uint64_t HIDUsage.EyeAndHeadTrackersUsage.rawValue.getter()
{
  return word_24B53AC50[*v0];
}

uint64_t HIDUsage.AuxiliaryDisplayUsage.rawValue.getter()
{
  return word_24B53AC94[*v0];
}

uint64_t HIDUsage.SensorsUsage.rawValue.getter()
{
  return word_24B53AD2A[*v0];
}

uint64_t HIDUsage.MedicalInstrumentUsage.rawValue.getter()
{
  return word_24B53B25C[*v0];
}

uint64_t HIDUsage.BrailleDisplayUsage.rawValue.getter()
{
  return word_24B53B296[*v0];
}

uint64_t HIDUsage.LightingAndIlluminationUsage.rawValue.getter()
{
  return word_24B53B2EC[*v0];
}

uint64_t HIDUsage.MonitorUsage.rawValue.getter()
{
  return *v0 + 1;
}

uint64_t HIDUsage.VESAVirtualControlsUsage.rawValue.getter()
{
  return word_24B53B32E[*v0];
}

uint64_t HIDUsage.PowerUsage.rawValue.getter()
{
  return word_24B53B388[*v0];
}

uint64_t HIDUsage.BatterySystemUsage.rawValue.getter()
{
  return word_24B53B422[*v0];
}

uint64_t HIDUsage.BarcodeScannerUsage.rawValue.getter()
{
  uint64_t result = 1;
  switch(*v0)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
      uint64_t result = 5;
      break;
    case 5:
      uint64_t result = 16;
      break;
    case 6:
      uint64_t result = 17;
      break;
    case 7:
      uint64_t result = 18;
      break;
    case 8:
      uint64_t result = 19;
      break;
    case 9:
      uint64_t result = 20;
      break;
    case 0xA:
      uint64_t result = 21;
      break;
    case 0xB:
      uint64_t result = 22;
      break;
    case 0xC:
      uint64_t result = 23;
      break;
    case 0xD:
      uint64_t result = 24;
      break;
    case 0xE:
      uint64_t result = 25;
      break;
    case 0xF:
      uint64_t result = 26;
      break;
    case 0x10:
      uint64_t result = 27;
      break;
    case 0x11:
      uint64_t result = 28;
      break;
    case 0x12:
      uint64_t result = 29;
      break;
    case 0x13:
      uint64_t result = 30;
      break;
    case 0x14:
      uint64_t result = 31;
      break;
    case 0x15:
      uint64_t result = 48;
      break;
    case 0x16:
      uint64_t result = 49;
      break;
    case 0x17:
      uint64_t result = 50;
      break;
    case 0x18:
      uint64_t result = 51;
      break;
    case 0x19:
      uint64_t result = 52;
      break;
    case 0x1A:
      uint64_t result = 53;
      break;
    case 0x1B:
      uint64_t result = 54;
      break;
    case 0x1C:
      uint64_t result = 55;
      break;
    case 0x1D:
      uint64_t result = 56;
      break;
    case 0x1E:
      uint64_t result = 57;
      break;
    case 0x1F:
      uint64_t result = 58;
      break;
    case 0x20:
      uint64_t result = 59;
      break;
    case 0x21:
      uint64_t result = 60;
      break;
    case 0x22:
      uint64_t result = 61;
      break;
    case 0x23:
      uint64_t result = 62;
      break;
    case 0x24:
      uint64_t result = 63;
      break;
    case 0x25:
      uint64_t result = 64;
      break;
    case 0x26:
      uint64_t result = 65;
      break;
    case 0x27:
      uint64_t result = 66;
      break;
    case 0x28:
      uint64_t result = 67;
      break;
    case 0x29:
      uint64_t result = 68;
      break;
    case 0x2A:
      uint64_t result = 69;
      break;
    case 0x2B:
      uint64_t result = 70;
      break;
    case 0x2C:
      uint64_t result = 77;
      break;
    case 0x2D:
      uint64_t result = 78;
      break;
    case 0x2E:
      uint64_t result = 79;
      break;
    case 0x2F:
      uint64_t result = 80;
      break;
    case 0x30:
      uint64_t result = 81;
      break;
    case 0x31:
      uint64_t result = 82;
      break;
    case 0x32:
      uint64_t result = 85;
      break;
    case 0x33:
      uint64_t result = 86;
      break;
    case 0x34:
      uint64_t result = 87;
      break;
    case 0x35:
      uint64_t result = 88;
      break;
    case 0x36:
      uint64_t result = 89;
      break;
    case 0x37:
      uint64_t result = 90;
      break;
    case 0x38:
      uint64_t result = 91;
      break;
    case 0x39:
      uint64_t result = 92;
      break;
    case 0x3A:
      uint64_t result = 93;
      break;
    case 0x3B:
      uint64_t result = 94;
      break;
    case 0x3C:
      uint64_t result = 95;
      break;
    case 0x3D:
      uint64_t result = 96;
      break;
    case 0x3E:
      uint64_t result = 97;
      break;
    case 0x3F:
      uint64_t result = 98;
      break;
    case 0x40:
      uint64_t result = 99;
      break;
    case 0x41:
      uint64_t result = 100;
      break;
    case 0x42:
      uint64_t result = 101;
      break;
    case 0x43:
      uint64_t result = 102;
      break;
    case 0x44:
      uint64_t result = 109;
      break;
    case 0x45:
      uint64_t result = 110;
      break;
    case 0x46:
      uint64_t result = 111;
      break;
    case 0x47:
      uint64_t result = 112;
      break;
    case 0x48:
      uint64_t result = 117;
      break;
    case 0x49:
      uint64_t result = 118;
      break;
    case 0x4A:
      uint64_t result = 122;
      break;
    case 0x4B:
      uint64_t result = 123;
      break;
    case 0x4C:
      uint64_t result = 124;
      break;
    case 0x4D:
      uint64_t result = 125;
      break;
    case 0x4E:
      uint64_t result = 126;
      break;
    case 0x4F:
      uint64_t result = 127;
      break;
    case 0x50:
      uint64_t result = 128;
      break;
    case 0x51:
      uint64_t result = 130;
      break;
    case 0x52:
      uint64_t result = 131;
      break;
    case 0x53:
      uint64_t result = 132;
      break;
    case 0x54:
      uint64_t result = 133;
      break;
    case 0x55:
      uint64_t result = 134;
      break;
    case 0x56:
      uint64_t result = 135;
      break;
    case 0x57:
      uint64_t result = 136;
      break;
    case 0x58:
      uint64_t result = 137;
      break;
    case 0x59:
      uint64_t result = 138;
      break;
    case 0x5A:
      uint64_t result = 139;
      break;
    case 0x5B:
      uint64_t result = 145;
      break;
    case 0x5C:
      uint64_t result = 146;
      break;
    case 0x5D:
      uint64_t result = 147;
      break;
    case 0x5E:
      uint64_t result = 148;
      break;
    case 0x5F:
      uint64_t result = 149;
      break;
    case 0x60:
      uint64_t result = 150;
      break;
    case 0x61:
      uint64_t result = 151;
      break;
    case 0x62:
      uint64_t result = 152;
      break;
    case 0x63:
      uint64_t result = 153;
      break;
    case 0x64:
      uint64_t result = 154;
      break;
    case 0x65:
      uint64_t result = 155;
      break;
    case 0x66:
      uint64_t result = 156;
      break;
    case 0x67:
      uint64_t result = 157;
      break;
    case 0x68:
      uint64_t result = 158;
      break;
    case 0x69:
      uint64_t result = 159;
      break;
    case 0x6A:
      uint64_t result = 160;
      break;
    case 0x6B:
      uint64_t result = 161;
      break;
    case 0x6C:
      uint64_t result = 162;
      break;
    case 0x6D:
      uint64_t result = 169;
      break;
    case 0x6E:
      uint64_t result = 170;
      break;
    case 0x6F:
      uint64_t result = 171;
      break;
    case 0x70:
      uint64_t result = 172;
      break;
    case 0x71:
      uint64_t result = 173;
      break;
    case 0x72:
      uint64_t result = 174;
      break;
    case 0x73:
      uint64_t result = 175;
      break;
    case 0x74:
      uint64_t result = 176;
      break;
    case 0x75:
      uint64_t result = 177;
      break;
    case 0x76:
      uint64_t result = 178;
      break;
    case 0x77:
      uint64_t result = 179;
      break;
    case 0x78:
      uint64_t result = 180;
      break;
    case 0x79:
      uint64_t result = 181;
      break;
    case 0x7A:
      uint64_t result = 183;
      break;
    case 0x7B:
      uint64_t result = 184;
      break;
    case 0x7C:
      uint64_t result = 185;
      break;
    case 0x7D:
      uint64_t result = 186;
      break;
    case 0x7E:
      uint64_t result = 187;
      break;
    case 0x7F:
      uint64_t result = 188;
      break;
    case 0x80:
      uint64_t result = 189;
      break;
    case 0x81:
      uint64_t result = 190;
      break;
    case 0x82:
      uint64_t result = 191;
      break;
    case 0x83:
      uint64_t result = 192;
      break;
    case 0x84:
      uint64_t result = 195;
      break;
    case 0x85:
      uint64_t result = 196;
      break;
    case 0x86:
      uint64_t result = 199;
      break;
    case 0x87:
      uint64_t result = 200;
      break;
    case 0x88:
      uint64_t result = 201;
      break;
    case 0x89:
      uint64_t result = 202;
      break;
    case 0x8A:
      uint64_t result = 203;
      break;
    case 0x8B:
      uint64_t result = 204;
      break;
    case 0x8C:
      uint64_t result = 205;
      break;
    case 0x8D:
      uint64_t result = 206;
      break;
    case 0x8E:
      uint64_t result = 211;
      break;
    case 0x8F:
      uint64_t result = 212;
      break;
    case 0x90:
      uint64_t result = 213;
      break;
    case 0x91:
      uint64_t result = 214;
      break;
    case 0x92:
      uint64_t result = 215;
      break;
    case 0x93:
      uint64_t result = 216;
      break;
    case 0x94:
      uint64_t result = 217;
      break;
    case 0x95:
      uint64_t result = 218;
      break;
    case 0x96:
      uint64_t result = 219;
      break;
    case 0x97:
      uint64_t result = 220;
      break;
    case 0x98:
      uint64_t result = 221;
      break;
    case 0x99:
      uint64_t result = 222;
      break;
    case 0x9A:
      uint64_t result = 223;
      break;
    case 0x9B:
      uint64_t result = 240;
      break;
    case 0x9C:
      uint64_t result = 241;
      break;
    case 0x9D:
      uint64_t result = 242;
      break;
    case 0x9E:
      uint64_t result = 251;
      break;
    case 0x9F:
      uint64_t result = 252;
      break;
    case 0xA0:
      uint64_t result = 253;
      break;
    case 0xA1:
      uint64_t result = 254;
      break;
    case 0xA2:
      uint64_t result = 255;
      break;
    case 0xA3:
      uint64_t result = 256;
      break;
    case 0xA4:
      uint64_t result = 257;
      break;
    case 0xA5:
      uint64_t result = 258;
      break;
    case 0xA6:
      uint64_t result = 259;
      break;
    case 0xA7:
      uint64_t result = 260;
      break;
    case 0xA8:
      uint64_t result = 262;
      break;
    case 0xA9:
      uint64_t result = 263;
      break;
    case 0xAA:
      uint64_t result = 264;
      break;
    case 0xAB:
      uint64_t result = 265;
      break;
    case 0xAC:
      uint64_t result = 266;
      break;
    case 0xAD:
      uint64_t result = 267;
      break;
    case 0xAE:
      uint64_t result = 268;
      break;
    case 0xAF:
      uint64_t result = 269;
      break;
    case 0xB0:
      uint64_t result = 272;
      break;
    case 0xB1:
      uint64_t result = 273;
      break;
    case 0xB2:
      uint64_t result = 274;
      break;
    case 0xB3:
      uint64_t result = 275;
      break;
    case 0xB4:
      uint64_t result = 276;
      break;
    case 0xB5:
      uint64_t result = 277;
      break;
    case 0xB6:
      uint64_t result = 278;
      break;
    case 0xB7:
      uint64_t result = 279;
      break;
    case 0xB8:
      uint64_t result = 280;
      break;
    case 0xB9:
      uint64_t result = 281;
      break;
    case 0xBA:
      uint64_t result = 282;
      break;
    case 0xBB:
      uint64_t result = 283;
      break;
    case 0xBC:
      uint64_t result = 284;
      break;
    case 0xBD:
      uint64_t result = 285;
      break;
    case 0xBE:
      uint64_t result = 286;
      break;
    case 0xBF:
      uint64_t result = 287;
      break;
    case 0xC0:
      uint64_t result = 288;
      break;
    case 0xC1:
      uint64_t result = 289;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t HIDUsage.ScalesUsage.rawValue.getter()
{
  return word_24B53B4D8[*v0];
}

uint64_t HIDUsage.MagneticStripeReaderUsage.rawValue.getter()
{
  return word_24B53B534[*v0];
}

uint64_t HIDUsage.CameraControlUsage.rawValue.getter()
{
  if (*v0) {
    return 33;
  }
  else {
    return 32;
  }
}

uint64_t HIDUsage.ArcadeUsage.rawValue.getter()
{
  return word_24B53B548[*v0];
}

unint64_t HIDUsage.FIDOAllianceUsage.rawValue.getter()
{
  return 0x2100200001uLL >> (16 * *v0);
}

char HIDUsage.init(page:usage:)@<W0>(int rawValue@<W1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5 = rawValue & 0x10000;
  switch((__int16)a2)
  {
    case 1:
      if (v5)
      {
        unint64_t v6 = 114;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.GenericDesktopUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18;
        if (v18 == 114) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) - 1;
        }
      }
      goto LABEL_155;
    case 2:
      if (!v5)
      {
        LOBYTE(a2) = HIDUsage.SimulationControlsUsage.init(rawValue:)(rawValue);
        BOOL v10 = v18 == 51;
        unint64_t v6 = v18 | 0x400000000;
        uint64_t v11 = (rawValue << 16);
        unint64_t v12 = 0xFFFFFF8400000002;
        goto LABEL_109;
      }
      unint64_t v6 = 0x400000033;
      goto LABEL_155;
    case 3:
      if (v5)
      {
        unint64_t v6 = 0x80000000CLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.VRControlsUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x800000000;
        if (v18 == 12) {
          unint64_t v6 = (rawValue << 16) | 0xFFFFFF8400000003;
        }
      }
      goto LABEL_155;
    case 4:
      if (v5)
      {
        unint64_t v6 = 0xC00000022;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.SportControlsUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0xC00000000;
        if (v18 == 34) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 2;
        }
      }
      goto LABEL_155;
    case 5:
      if (v5)
      {
        unint64_t v6 = 0x100000001DLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.GameControlsUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x1000000000;
        if (v18 == 29) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 3;
        }
      }
      goto LABEL_155;
    case 6:
      if (v5)
      {
        unint64_t v6 = 0x1400000018;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.GenericDeviceControlsUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x1400000000;
        if (v18 == 24) {
          unint64_t v6 = (rawValue << 16) | 0xFFFFFF8400000006;
        }
      }
      goto LABEL_155;
    case 7:
      if (!v5)
      {
        LOBYTE(a2) = HIDUsage.KeyboardOrKeypadUsage.init(rawValue:)(rawValue);
        BOOL v10 = v18 == 218;
        unint64_t v6 = v18 | 0x1800000000;
        uint64_t v11 = (rawValue << 16);
        uint64_t v13 = 5;
        goto LABEL_108;
      }
      unint64_t v6 = 0x18000000DALL;
      goto LABEL_155;
    case 8:
      if (v5)
      {
        unint64_t v6 = 0x1C00000060;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.LEDUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x1C00000000;
        if (v18 == 96) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 6;
        }
      }
      goto LABEL_155;
    case 9:
      unint64_t v6 = rawValue & 0x1FFFF | 0x2000000000;
      goto LABEL_155;
    case 10:
      unint64_t v6 = rawValue & 0x1FFFF | 0x2400000000;
      goto LABEL_155;
    case 11:
      if (!v5)
      {
        LOBYTE(a2) = HIDUsage.TelephonyDeviceUsage.init(rawValue:)(rawValue);
        BOOL v10 = v18 == 99;
        unint64_t v6 = v18 | 0x2800000000;
        uint64_t v11 = (rawValue << 16);
        uint64_t v13 = 9;
        goto LABEL_108;
      }
      unint64_t v6 = 0x2800000063;
      goto LABEL_155;
    case 12:
      if (v5)
      {
        unint64_t v6 = 0x2C000001C2;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.ConsumerUsage.init(rawValue:)(rawValue).value;
        unint64_t v6 = v18 | 0x2C00000000;
        if (v18 == 450) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 10;
        }
      }
      goto LABEL_155;
    case 13:
      if (v5)
      {
        unint64_t v6 = 0x300000006CLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.DigitizersUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x3000000000;
        if (v18 == 108) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 11;
        }
      }
      goto LABEL_155;
    case 14:
      if (v5)
      {
        unint64_t v6 = 0x340000001DLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.HapticsUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x3400000000;
        if (v18 == 29) {
          unint64_t v6 = (rawValue << 16) | 0xFFFFFF840000000ELL;
        }
      }
      goto LABEL_155;
    case 15:
      if (!v5)
      {
        LOBYTE(a2) = HIDUsage.PhysicalInputDeviceUsage.init(rawValue:)(rawValue);
        BOOL v10 = v18 == 105;
        unint64_t v6 = v18 | 0x3800000000;
        uint64_t v11 = (rawValue << 16);
        uint64_t v13 = 13;
        goto LABEL_108;
      }
      unint64_t v6 = 0x3800000069;
      goto LABEL_155;
    case 16:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 131:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 143:
      goto LABEL_14;
    case 17:
      unint64_t v6 = 0x3C0000000ALL;
      uint64_t v9 = ((rawValue << 16) | 0xFFFFFF8400000002) + 15;
      if ((unsigned __int16)(rawValue - 1) < 0xAu) {
        uint64_t v9 = (rawValue - 1) | 0x3C00000000;
      }
      goto LABEL_59;
    case 18:
      if (v5)
      {
        unint64_t v6 = 0x4000000022;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.EyeAndHeadTrackersUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x4000000000;
        if (v18 == 34) {
          unint64_t v6 = (rawValue << 16) | 0xFFFFFF8400000012;
        }
      }
      goto LABEL_155;
    case 20:
      if (v5)
      {
        unint64_t v6 = 0x440000004BLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.AuxiliaryDisplayUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x4400000000;
        if (v18 == 75) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 18;
        }
      }
      goto LABEL_155;
    case 32:
      if (v5)
      {
        unint64_t v6 = 0x4800000299;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.SensorsUsage.init(rawValue:)(rawValue).value;
        unint64_t v6 = v18 | 0x4800000000;
        if (v18 == 665) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 30;
        }
      }
      goto LABEL_155;
    case 64:
      if (v5)
      {
        unint64_t v6 = 0x4C0000001DLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.MedicalInstrumentUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x4C00000000;
        if (v18 == 29) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 62;
        }
      }
      goto LABEL_155;
    case 65:
      if (v5)
      {
        unint64_t v6 = 0x500000002BLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.BrailleDisplayUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x5000000000;
        if (v18 == 43) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 63;
        }
      }
      goto LABEL_155;
    case 89:
      if (v5)
      {
        unint64_t v6 = 0x5400000021;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.LightingAndIlluminationUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x5400000000;
        if (v18 == 33) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 87;
        }
      }
      goto LABEL_155;
    case 128:
      unint64_t v6 = 0x5800000001;
      if (v5)
      {
        unint64_t v6 = 0x5800000004;
      }
      else
      {
        switch((__int16)rawValue)
        {
          case 1:
            unint64_t v6 = 0x5800000000;
            break;
          case 2:
            goto LABEL_155;
          case 3:
            unint64_t v6 = 0x5800000002;
            break;
          case 4:
            unint64_t v6 = 0x5800000003;
            break;
          default:
            unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 126;
            break;
        }
      }
      goto LABEL_155;
    case 129:
      unint64_t v6 = rawValue & 0x1FFFF | 0x5C00000000;
      goto LABEL_155;
    case 130:
      if (v5)
      {
        unint64_t v6 = 0x600000002DLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.VESAVirtualControlsUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x6000000000;
        if (v18 == 45) {
          unint64_t v6 = (rawValue << 16) | 0xFFFFFF8400000082;
        }
      }
      goto LABEL_155;
    case 132:
      if (v5)
      {
        unint64_t v6 = 0x640000004DLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.PowerUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x6400000000;
        if (v18 == 77) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 130;
        }
      }
      goto LABEL_155;
    case 133:
      if (v5)
      {
        unint64_t v6 = 0x680000005BLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.BatterySystemUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x6800000000;
        if (v18 == 91) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 131;
        }
      }
      goto LABEL_155;
    case 140:
      if (v5)
      {
        unint64_t v6 = 0x6C000000C2;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.BarcodeScannerUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x6C00000000;
        if (v18 == 194) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 138;
        }
      }
      goto LABEL_155;
    case 141:
      if (v5)
      {
        unint64_t v6 = 0x700000002ELL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.ScalesUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x7000000000;
        if (v18 == 46) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 139;
        }
      }
      goto LABEL_155;
    case 142:
      if (v5)
      {
        unint64_t v6 = 0x740000000ALL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.MagneticStripeReaderUsage.init(rawValue:)(rawValue);
        BOOL v10 = v18 == 10;
        unint64_t v6 = v18 | 0x7400000000;
        uint64_t v11 = (rawValue << 16);
        uint64_t v13 = 140;
LABEL_108:
        unint64_t v12 = v13 | 0xFFFFFF8400000002;
LABEL_109:
        unint64_t v14 = v11 | v12;
        if (v10) {
          unint64_t v6 = v14;
        }
      }
      goto LABEL_155;
    case 144:
      unint64_t v15 = ((rawValue << 16) | 0xFFFFFF8400000002) + 142;
      if ((unsigned __int16)rawValue == 33) {
        unint64_t v15 = 0x7800000001;
      }
      if ((unsigned __int16)rawValue == 32) {
        uint64_t v16 = 0x7800000000;
      }
      else {
        uint64_t v16 = v15;
      }
      if (v5) {
        unint64_t v6 = 0x7800000002;
      }
      else {
        unint64_t v6 = v16;
      }
      goto LABEL_155;
    case 145:
      if (v5)
      {
        unint64_t v6 = 0x7C0000001BLL;
      }
      else
      {
        LOBYTE(a2) = HIDUsage.ArcadeUsage.init(rawValue:)(rawValue);
        unint64_t v6 = v18 | 0x7C00000000;
        if (v18 == 27) {
          unint64_t v6 = ((rawValue << 16) | 0xFFFFFF8400000002) + 143;
        }
      }
      goto LABEL_155;
    default:
      if ((unsigned __int16)a2 == 61904)
      {
        unint64_t v6 = 0x8000000003;
        uint64_t v7 = 0x8000000001;
        unint64_t v8 = (rawValue << 16) | 0xFFFFFF840000F1D0;
        if ((unsigned __int16)rawValue == 33) {
          unint64_t v8 = 0x8000000002;
        }
        if ((unsigned __int16)rawValue != 32) {
          uint64_t v7 = v8;
        }
        if ((unsigned __int16)rawValue == 1) {
          uint64_t v9 = 0x8000000000;
        }
        else {
          uint64_t v9 = v7;
        }
LABEL_59:
        if (!v5) {
          unint64_t v6 = v9;
        }
      }
      else
      {
LABEL_14:
        a2 = (unsigned __int16)a2 | ((unsigned __int16)rawValue << 16);
        unint64_t v6 = (a2 | (v5 << 16)) - 0x7C00000000;
      }
LABEL_155:
      *(_DWORD *)a3 = v6;
      *(unsigned char *)(a3 + 4) = BYTE4(v6);
      return a2;
  }
}

CoreHID::HIDUsage::GenericDesktopUsage_optional __swiftcall HIDUsage.GenericDesktopUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 96;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_98;
    case 2u:
      char v2 = 1;
      goto LABEL_98;
    case 4u:
      char v2 = 2;
      goto LABEL_98;
    case 5u:
      char v2 = 3;
      goto LABEL_98;
    case 6u:
      char v2 = 4;
      goto LABEL_98;
    case 7u:
      char v2 = 5;
      goto LABEL_98;
    case 8u:
      char v2 = 6;
      goto LABEL_98;
    case 9u:
      char v2 = 7;
      goto LABEL_98;
    case 0xAu:
      char v2 = 8;
      goto LABEL_98;
    case 0xBu:
      char v2 = 9;
      goto LABEL_98;
    case 0xCu:
      char v2 = 10;
      goto LABEL_98;
    case 0xDu:
      char v2 = 11;
      goto LABEL_98;
    case 0xEu:
      char v2 = 12;
      goto LABEL_98;
    case 0xFu:
      char v2 = 13;
      goto LABEL_98;
    case 0x10u:
      char v2 = 14;
      goto LABEL_98;
    case 0x11u:
      char v2 = 15;
      goto LABEL_98;
    case 0x12u:
      char v2 = 16;
      goto LABEL_98;
    case 0x13u:
      char v2 = 17;
      goto LABEL_98;
    case 0x30u:
      char v2 = 18;
      goto LABEL_98;
    case 0x31u:
      char v2 = 19;
      goto LABEL_98;
    case 0x32u:
      char v2 = 20;
      goto LABEL_98;
    case 0x33u:
      char v2 = 21;
      goto LABEL_98;
    case 0x34u:
      char v2 = 22;
      goto LABEL_98;
    case 0x35u:
      char v2 = 23;
      goto LABEL_98;
    case 0x36u:
      char v2 = 24;
      goto LABEL_98;
    case 0x37u:
      char v2 = 25;
      goto LABEL_98;
    case 0x38u:
      char v2 = 26;
      goto LABEL_98;
    case 0x39u:
      char v2 = 27;
      goto LABEL_98;
    case 0x3Au:
      char v2 = 28;
      goto LABEL_98;
    case 0x3Bu:
      char v2 = 29;
      goto LABEL_98;
    case 0x3Cu:
      char v2 = 30;
      goto LABEL_98;
    case 0x3Du:
      char v2 = 31;
      goto LABEL_98;
    case 0x3Eu:
      char v2 = 32;
      goto LABEL_98;
    case 0x40u:
      char v2 = 33;
      goto LABEL_98;
    case 0x41u:
      char v2 = 34;
      goto LABEL_98;
    case 0x42u:
      char v2 = 35;
      goto LABEL_98;
    case 0x43u:
      char v2 = 36;
      goto LABEL_98;
    case 0x44u:
      char v2 = 37;
      goto LABEL_98;
    case 0x45u:
      char v2 = 38;
      goto LABEL_98;
    case 0x46u:
      char v2 = 39;
      goto LABEL_98;
    case 0x47u:
      char v2 = 40;
      goto LABEL_98;
    case 0x48u:
      char v2 = 41;
      goto LABEL_98;
    case 0x49u:
      char v2 = 42;
      goto LABEL_98;
    case 0x4Au:
      char v2 = 43;
      goto LABEL_98;
    case 0x4Bu:
      char v2 = 44;
      goto LABEL_98;
    case 0x4Cu:
      char v2 = 45;
      goto LABEL_98;
    case 0x80u:
      char v2 = 46;
      goto LABEL_98;
    case 0x81u:
      char v2 = 47;
      goto LABEL_98;
    case 0x82u:
      char v2 = 48;
      goto LABEL_98;
    case 0x83u:
      char v2 = 49;
      goto LABEL_98;
    case 0x84u:
      char v2 = 50;
      goto LABEL_98;
    case 0x85u:
      char v2 = 51;
      goto LABEL_98;
    case 0x86u:
      char v2 = 52;
      goto LABEL_98;
    case 0x87u:
      char v2 = 53;
      goto LABEL_98;
    case 0x88u:
      char v2 = 54;
      goto LABEL_98;
    case 0x89u:
      char v2 = 55;
      goto LABEL_98;
    case 0x8Au:
      char v2 = 56;
      goto LABEL_98;
    case 0x8Bu:
      char v2 = 57;
      goto LABEL_98;
    case 0x8Cu:
      char v2 = 58;
      goto LABEL_98;
    case 0x8Du:
      char v2 = 59;
      goto LABEL_98;
    case 0x8Eu:
      char v2 = 60;
      goto LABEL_98;
    case 0x8Fu:
      char v2 = 61;
      goto LABEL_98;
    case 0x90u:
      char v2 = 62;
      goto LABEL_98;
    case 0x91u:
      char v2 = 63;
      goto LABEL_98;
    case 0x92u:
      char v2 = 64;
      goto LABEL_98;
    case 0x93u:
      char v2 = 65;
      goto LABEL_98;
    case 0x94u:
      char v2 = 66;
      goto LABEL_98;
    case 0x95u:
      char v2 = 67;
      goto LABEL_98;
    case 0x96u:
      char v2 = 68;
      goto LABEL_98;
    case 0x97u:
      char v2 = 69;
      goto LABEL_98;
    case 0x98u:
      char v2 = 70;
      goto LABEL_98;
    case 0x99u:
      char v2 = 71;
      goto LABEL_98;
    case 0x9Au:
      char v2 = 72;
      goto LABEL_98;
    case 0x9Bu:
      char v2 = 73;
      goto LABEL_98;
    case 0xA0u:
      char v2 = 74;
      goto LABEL_98;
    case 0xA1u:
      char v2 = 75;
      goto LABEL_98;
    case 0xA2u:
      char v2 = 76;
      goto LABEL_98;
    case 0xA3u:
      char v2 = 77;
      goto LABEL_98;
    case 0xA4u:
      char v2 = 78;
      goto LABEL_98;
    case 0xA5u:
      char v2 = 79;
      goto LABEL_98;
    case 0xA6u:
      char v2 = 80;
      goto LABEL_98;
    case 0xA7u:
      char v2 = 81;
      goto LABEL_98;
    case 0xA8u:
      char v2 = 82;
      goto LABEL_98;
    case 0xA9u:
      char v2 = 83;
      goto LABEL_98;
    case 0xB0u:
      char v2 = 84;
      goto LABEL_98;
    case 0xB1u:
      char v2 = 85;
      goto LABEL_98;
    case 0xB2u:
      char v2 = 86;
      goto LABEL_98;
    case 0xB3u:
      char v2 = 87;
      goto LABEL_98;
    case 0xB4u:
      char v2 = 88;
      goto LABEL_98;
    case 0xB5u:
      char v2 = 89;
      goto LABEL_98;
    case 0xB6u:
      char v2 = 90;
      goto LABEL_98;
    case 0xB7u:
      char v2 = 91;
      goto LABEL_98;
    case 0xC0u:
      char v2 = 92;
      goto LABEL_98;
    case 0xC1u:
      char v2 = 93;
      goto LABEL_98;
    case 0xC2u:
      char v2 = 94;
      goto LABEL_98;
    case 0xC3u:
      char v2 = 95;
LABEL_98:
      char v3 = v2;
      goto LABEL_99;
    case 0xC4u:
LABEL_99:
      char *v1 = v3;
      break;
    case 0xC5u:
      char *v1 = 97;
      break;
    case 0xC6u:
      char *v1 = 98;
      break;
    case 0xC7u:
      char *v1 = 99;
      break;
    case 0xC8u:
      char *v1 = 100;
      break;
    case 0xC9u:
      char *v1 = 101;
      break;
    case 0xCAu:
      char *v1 = 102;
      break;
    case 0xCBu:
      char *v1 = 103;
      break;
    case 0xD0u:
      char *v1 = 104;
      break;
    case 0xD1u:
      char *v1 = 105;
      break;
    case 0xD2u:
      char *v1 = 106;
      break;
    case 0xD3u:
      char *v1 = 107;
      break;
    case 0xD4u:
      char *v1 = 108;
      break;
    case 0xD5u:
      char *v1 = 109;
      break;
    case 0xD6u:
      char *v1 = 110;
      break;
    case 0xE0u:
      char *v1 = 111;
      break;
    case 0xE1u:
      char *v1 = 112;
      break;
    case 0xE2u:
      char *v1 = 113;
      break;
    default:
      char *v1 = 114;
      break;
  }
  return (CoreHID::HIDUsage::GenericDesktopUsage_optional)rawValue;
}

CoreHID::HIDUsage::SimulationControlsUsage_optional __swiftcall HIDUsage.SimulationControlsUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 33;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_35;
    case 2u:
      char v2 = 1;
      goto LABEL_35;
    case 3u:
      char v2 = 2;
      goto LABEL_35;
    case 4u:
      char v2 = 3;
      goto LABEL_35;
    case 5u:
      char v2 = 4;
      goto LABEL_35;
    case 6u:
      char v2 = 5;
      goto LABEL_35;
    case 7u:
      char v2 = 6;
      goto LABEL_35;
    case 8u:
      char v2 = 7;
      goto LABEL_35;
    case 9u:
      char v2 = 8;
      goto LABEL_35;
    case 0xAu:
      char v2 = 9;
      goto LABEL_35;
    case 0xBu:
      char v2 = 10;
      goto LABEL_35;
    case 0xCu:
      char v2 = 11;
      goto LABEL_35;
    case 0x20u:
      char v2 = 12;
      goto LABEL_35;
    case 0x21u:
      char v2 = 13;
      goto LABEL_35;
    case 0x22u:
      char v2 = 14;
      goto LABEL_35;
    case 0x23u:
      char v2 = 15;
      goto LABEL_35;
    case 0x24u:
      char v2 = 16;
      goto LABEL_35;
    case 0x25u:
      char v2 = 17;
      goto LABEL_35;
    case 0xB0u:
      char v2 = 18;
      goto LABEL_35;
    case 0xB1u:
      char v2 = 19;
      goto LABEL_35;
    case 0xB2u:
      char v2 = 20;
      goto LABEL_35;
    case 0xB3u:
      char v2 = 21;
      goto LABEL_35;
    case 0xB4u:
      char v2 = 22;
      goto LABEL_35;
    case 0xB5u:
      char v2 = 23;
      goto LABEL_35;
    case 0xB6u:
      char v2 = 24;
      goto LABEL_35;
    case 0xB7u:
      char v2 = 25;
      goto LABEL_35;
    case 0xB8u:
      char v2 = 26;
      goto LABEL_35;
    case 0xB9u:
      char v2 = 27;
      goto LABEL_35;
    case 0xBAu:
      char v2 = 28;
      goto LABEL_35;
    case 0xBBu:
      char v2 = 29;
      goto LABEL_35;
    case 0xBCu:
      char v2 = 30;
      goto LABEL_35;
    case 0xBDu:
      char v2 = 31;
      goto LABEL_35;
    case 0xBEu:
      char v2 = 32;
LABEL_35:
      char v3 = v2;
      goto LABEL_36;
    case 0xBFu:
LABEL_36:
      char *v1 = v3;
      break;
    case 0xC0u:
      char *v1 = 34;
      break;
    case 0xC1u:
      char *v1 = 35;
      break;
    case 0xC2u:
      char *v1 = 36;
      break;
    case 0xC3u:
      char *v1 = 37;
      break;
    case 0xC4u:
      char *v1 = 38;
      break;
    case 0xC5u:
      char *v1 = 39;
      break;
    case 0xC6u:
      char *v1 = 40;
      break;
    case 0xC7u:
      char *v1 = 41;
      break;
    case 0xC8u:
      char *v1 = 42;
      break;
    case 0xC9u:
      char *v1 = 43;
      break;
    case 0xCAu:
      char *v1 = 44;
      break;
    case 0xCBu:
      char *v1 = 45;
      break;
    case 0xCCu:
      char *v1 = 46;
      break;
    case 0xCDu:
      char *v1 = 47;
      break;
    case 0xCEu:
      char *v1 = 48;
      break;
    case 0xCFu:
      char *v1 = 49;
      break;
    case 0xD0u:
      char *v1 = 50;
      break;
    default:
      char *v1 = 51;
      break;
  }
  return (CoreHID::HIDUsage::SimulationControlsUsage_optional)rawValue;
}

CoreHID::HIDUsage::VRControlsUsage_optional __swiftcall HIDUsage.VRControlsUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 1;
  switch(rawValue)
  {
    case 1u:
      char v2 = 0;
      goto LABEL_3;
    case 2u:
LABEL_3:
      char *v1 = v2;
      break;
    case 3u:
      char *v1 = 2;
      break;
    case 4u:
      char *v1 = 3;
      break;
    case 5u:
      char *v1 = 4;
      break;
    case 6u:
      char *v1 = 5;
      break;
    case 7u:
      char *v1 = 6;
      break;
    case 8u:
      char *v1 = 7;
      break;
    case 9u:
      char *v1 = 8;
      break;
    case 0xAu:
      char *v1 = 9;
      break;
    case 0x20u:
      char *v1 = 10;
      break;
    case 0x21u:
      char *v1 = 11;
      break;
    default:
      char *v1 = 12;
      break;
  }
  return (CoreHID::HIDUsage::VRControlsUsage_optional)rawValue;
}

CoreHID::HIDUsage::SportControlsUsage_optional __swiftcall HIDUsage.SportControlsUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 16;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_18;
    case 2u:
      char v2 = 1;
      goto LABEL_18;
    case 3u:
      char v2 = 2;
      goto LABEL_18;
    case 4u:
      char v2 = 3;
      goto LABEL_18;
    case 0x30u:
      char v2 = 4;
      goto LABEL_18;
    case 0x31u:
      char v2 = 5;
      goto LABEL_18;
    case 0x32u:
      char v2 = 6;
      goto LABEL_18;
    case 0x33u:
      char v2 = 7;
      goto LABEL_18;
    case 0x34u:
      char v2 = 8;
      goto LABEL_18;
    case 0x35u:
      char v2 = 9;
      goto LABEL_18;
    case 0x36u:
      char v2 = 10;
      goto LABEL_18;
    case 0x37u:
      char v2 = 11;
      goto LABEL_18;
    case 0x38u:
      char v2 = 12;
      goto LABEL_18;
    case 0x39u:
      char v2 = 13;
      goto LABEL_18;
    case 0x50u:
      char v2 = 14;
      goto LABEL_18;
    case 0x51u:
      char v2 = 15;
LABEL_18:
      char v3 = v2;
      goto LABEL_19;
    case 0x52u:
LABEL_19:
      char *v1 = v3;
      break;
    case 0x53u:
      char *v1 = 17;
      break;
    case 0x54u:
      char *v1 = 18;
      break;
    case 0x55u:
      char *v1 = 19;
      break;
    case 0x56u:
      char *v1 = 20;
      break;
    case 0x57u:
      char *v1 = 21;
      break;
    case 0x58u:
      char *v1 = 22;
      break;
    case 0x59u:
      char *v1 = 23;
      break;
    case 0x5Au:
      char *v1 = 24;
      break;
    case 0x5Bu:
      char *v1 = 25;
      break;
    case 0x5Cu:
      char *v1 = 26;
      break;
    case 0x5Du:
      char *v1 = 27;
      break;
    case 0x5Eu:
      char *v1 = 28;
      break;
    case 0x5Fu:
      char *v1 = 29;
      break;
    case 0x60u:
      char *v1 = 30;
      break;
    case 0x61u:
      char *v1 = 31;
      break;
    case 0x62u:
      char *v1 = 32;
      break;
    case 0x63u:
      char *v1 = 33;
      break;
    default:
      char *v1 = 34;
      break;
  }
  return (CoreHID::HIDUsage::SportControlsUsage_optional)rawValue;
}

CoreHID::HIDUsage::GameControlsUsage_optional __swiftcall HIDUsage.GameControlsUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 11;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_13;
    case 2u:
      char v2 = 1;
      goto LABEL_13;
    case 3u:
      char v2 = 2;
      goto LABEL_13;
    case 0x20u:
      char v2 = 3;
      goto LABEL_13;
    case 0x21u:
      char v2 = 4;
      goto LABEL_13;
    case 0x22u:
      char v2 = 5;
      goto LABEL_13;
    case 0x23u:
      char v2 = 6;
      goto LABEL_13;
    case 0x24u:
      char v2 = 7;
      goto LABEL_13;
    case 0x25u:
      char v2 = 8;
      goto LABEL_13;
    case 0x26u:
      char v2 = 9;
      goto LABEL_13;
    case 0x27u:
      char v2 = 10;
LABEL_13:
      char v3 = v2;
      goto LABEL_14;
    case 0x28u:
LABEL_14:
      char *v1 = v3;
      break;
    case 0x29u:
      char *v1 = 12;
      break;
    case 0x2Au:
      char *v1 = 13;
      break;
    case 0x2Bu:
      char *v1 = 14;
      break;
    case 0x2Cu:
      char *v1 = 15;
      break;
    case 0x2Du:
      char *v1 = 16;
      break;
    case 0x2Eu:
      char *v1 = 17;
      break;
    case 0x2Fu:
      char *v1 = 18;
      break;
    case 0x30u:
      char *v1 = 19;
      break;
    case 0x31u:
      char *v1 = 20;
      break;
    case 0x32u:
      char *v1 = 21;
      break;
    case 0x33u:
      char *v1 = 22;
      break;
    case 0x34u:
      char *v1 = 23;
      break;
    case 0x35u:
      char *v1 = 24;
      break;
    case 0x36u:
      char *v1 = 25;
      break;
    case 0x37u:
      char *v1 = 26;
      break;
    case 0x39u:
      char *v1 = 27;
      break;
    case 0x3Au:
      char *v1 = 28;
      break;
    default:
      char *v1 = 29;
      break;
  }
  return (CoreHID::HIDUsage::GameControlsUsage_optional)rawValue;
}

CoreHID::HIDUsage::GenericDeviceControlsUsage_optional __swiftcall HIDUsage.GenericDeviceControlsUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 6;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_8;
    case 0x20u:
      char v2 = 1;
      goto LABEL_8;
    case 0x21u:
      char v2 = 2;
      goto LABEL_8;
    case 0x22u:
      char v2 = 3;
      goto LABEL_8;
    case 0x23u:
      char v2 = 4;
      goto LABEL_8;
    case 0x24u:
      char v2 = 5;
LABEL_8:
      char v3 = v2;
      goto LABEL_9;
    case 0x25u:
LABEL_9:
      char *v1 = v3;
      break;
    case 0x26u:
      char *v1 = 7;
      break;
    case 0x27u:
      char *v1 = 8;
      break;
    case 0x28u:
      char *v1 = 9;
      break;
    case 0x29u:
      char *v1 = 10;
      break;
    case 0x2Au:
      char *v1 = 11;
      break;
    case 0x2Bu:
      char *v1 = 12;
      break;
    case 0x2Cu:
      char *v1 = 13;
      break;
    case 0x2Du:
      char *v1 = 14;
      break;
    case 0x2Eu:
      char *v1 = 15;
      break;
    case 0x2Fu:
      char *v1 = 16;
      break;
    case 0x30u:
      char *v1 = 17;
      break;
    case 0x31u:
      char *v1 = 18;
      break;
    case 0x32u:
      char *v1 = 19;
      break;
    case 0x33u:
      char *v1 = 20;
      break;
    case 0x34u:
      char *v1 = 21;
      break;
    case 0x40u:
      char *v1 = 22;
      break;
    case 0x41u:
      char *v1 = 23;
      break;
    default:
      char *v1 = 24;
      break;
  }
  return (CoreHID::HIDUsage::GenericDeviceControlsUsage_optional)rawValue;
}

CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional __swiftcall HIDUsage.KeyboardOrKeypadUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = rawValue - 1;
  if ((unsigned __int16)(rawValue - 1) >= 0x80u)
  {
    char v2 = 0x80;
    switch(rawValue)
    {
      case 0x81u:
        goto LABEL_2;
      case 0x82u:
        char *v1 = -127;
        break;
      case 0x83u:
        char *v1 = -126;
        break;
      case 0x84u:
        char *v1 = -125;
        break;
      case 0x85u:
        char *v1 = -124;
        break;
      case 0x86u:
        char *v1 = -123;
        break;
      case 0x87u:
        char *v1 = -122;
        break;
      case 0x88u:
        char *v1 = -121;
        break;
      case 0x89u:
        char *v1 = -120;
        break;
      case 0x8Au:
        char *v1 = -119;
        break;
      case 0x8Bu:
        char *v1 = -118;
        break;
      case 0x8Cu:
        char *v1 = -117;
        break;
      case 0x8Du:
        char *v1 = -116;
        break;
      case 0x8Eu:
        char *v1 = -115;
        break;
      case 0x8Fu:
        char *v1 = -114;
        break;
      case 0x90u:
        char *v1 = -113;
        break;
      case 0x91u:
        char *v1 = -112;
        break;
      case 0x92u:
        char *v1 = -111;
        break;
      case 0x93u:
        char *v1 = -110;
        break;
      case 0x94u:
        char *v1 = -109;
        break;
      case 0x95u:
        char *v1 = -108;
        break;
      case 0x96u:
        char *v1 = -107;
        break;
      case 0x97u:
        char *v1 = -106;
        break;
      case 0x98u:
        char *v1 = -105;
        break;
      case 0x99u:
        char *v1 = -104;
        break;
      case 0x9Au:
        char *v1 = -103;
        break;
      case 0x9Bu:
        char *v1 = -102;
        break;
      case 0x9Cu:
        char *v1 = -101;
        break;
      case 0x9Du:
        char *v1 = -100;
        break;
      case 0x9Eu:
        char *v1 = -99;
        break;
      case 0x9Fu:
        char *v1 = -98;
        break;
      case 0xA0u:
        char *v1 = -97;
        break;
      case 0xA1u:
        char *v1 = -96;
        break;
      case 0xA2u:
        char *v1 = -95;
        break;
      case 0xA3u:
        char *v1 = -94;
        break;
      case 0xA4u:
        char *v1 = -93;
        break;
      case 0xB0u:
        char *v1 = -92;
        break;
      case 0xB1u:
        char *v1 = -91;
        break;
      case 0xB2u:
        char *v1 = -90;
        break;
      case 0xB3u:
        char *v1 = -89;
        break;
      case 0xB4u:
        char *v1 = -88;
        break;
      case 0xB5u:
        char *v1 = -87;
        break;
      case 0xB6u:
        char *v1 = -86;
        break;
      case 0xB7u:
        char *v1 = -85;
        break;
      case 0xB8u:
        char *v1 = -84;
        break;
      case 0xB9u:
        char *v1 = -83;
        break;
      case 0xBAu:
        char *v1 = -82;
        break;
      case 0xBBu:
        char *v1 = -81;
        break;
      case 0xBCu:
        char *v1 = -80;
        break;
      case 0xBDu:
        char *v1 = -79;
        break;
      case 0xBEu:
        char *v1 = -78;
        break;
      case 0xBFu:
        char *v1 = -77;
        break;
      case 0xC0u:
        char *v1 = -76;
        break;
      case 0xC1u:
        char *v1 = -75;
        break;
      case 0xC2u:
        char *v1 = -74;
        break;
      case 0xC3u:
        char *v1 = -73;
        break;
      case 0xC4u:
        char *v1 = -72;
        break;
      case 0xC5u:
        char *v1 = -71;
        break;
      case 0xC6u:
        char *v1 = -70;
        break;
      case 0xC7u:
        char *v1 = -69;
        break;
      case 0xC8u:
        char *v1 = -68;
        break;
      case 0xC9u:
        char *v1 = -67;
        break;
      case 0xCAu:
        char *v1 = -66;
        break;
      case 0xCBu:
        char *v1 = -65;
        break;
      default:
        char v3 = -56;
        char v2 = -64;
        switch(rawValue)
        {
          case 0xCCu:
            goto LABEL_2;
          case 0xCDu:
            char *v1 = -63;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xCEu:
            char *v1 = -62;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xCFu:
            char *v1 = -61;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD0u:
            char *v1 = -60;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD1u:
            char *v1 = -59;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD2u:
            char *v1 = -58;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD3u:
            char *v1 = -57;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD4u:
            goto LABEL_85;
          case 0xD5u:
            char *v1 = -55;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD6u:
            char *v1 = -54;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD7u:
            char *v1 = -53;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD8u:
            char *v1 = -52;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xD9u:
            char *v1 = -51;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xDAu:
            char *v1 = -50;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xDBu:
            char *v1 = -49;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xDCu:
            char *v1 = -48;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xDDu:
            char *v1 = -47;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xE0u:
            char *v1 = -46;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xE1u:
            char *v1 = -45;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xE2u:
            char *v1 = -44;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xE3u:
            char *v1 = -43;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xE4u:
            char *v1 = -42;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xE5u:
            char *v1 = -41;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xE6u:
            char *v1 = -40;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          case 0xE7u:
            char *v1 = -39;
            return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
          default:
            char v3 = -38;
LABEL_85:
            char *v1 = v3;
            break;
        }
        break;
    }
  }
  else
  {
LABEL_2:
    char *v1 = v2;
  }
  return (CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional)rawValue;
}

CoreHID::HIDUsage::LEDUsage_optional __swiftcall HIDUsage.LEDUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 78;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_79;
    case 2u:
      char v2 = 1;
      goto LABEL_79;
    case 3u:
      char v2 = 2;
      goto LABEL_79;
    case 4u:
      char v2 = 3;
      goto LABEL_79;
    case 5u:
      char v2 = 4;
      goto LABEL_79;
    case 6u:
      char v2 = 5;
      goto LABEL_79;
    case 7u:
      char v2 = 6;
      goto LABEL_79;
    case 8u:
      char v2 = 7;
      goto LABEL_79;
    case 9u:
      char v2 = 8;
      goto LABEL_79;
    case 0xAu:
      char v2 = 9;
      goto LABEL_79;
    case 0xBu:
      char v2 = 10;
      goto LABEL_79;
    case 0xCu:
      char v2 = 11;
      goto LABEL_79;
    case 0xDu:
      char v2 = 12;
      goto LABEL_79;
    case 0xEu:
      char v2 = 13;
      goto LABEL_79;
    case 0xFu:
      char v2 = 14;
      goto LABEL_79;
    case 0x10u:
      char v2 = 15;
      goto LABEL_79;
    case 0x11u:
      char v2 = 16;
      goto LABEL_79;
    case 0x12u:
      char v2 = 17;
      goto LABEL_79;
    case 0x13u:
      char v2 = 18;
      goto LABEL_79;
    case 0x14u:
      char v2 = 19;
      goto LABEL_79;
    case 0x15u:
      char v2 = 20;
      goto LABEL_79;
    case 0x16u:
      char v2 = 21;
      goto LABEL_79;
    case 0x17u:
      char v2 = 22;
      goto LABEL_79;
    case 0x18u:
      char v2 = 23;
      goto LABEL_79;
    case 0x19u:
      char v2 = 24;
      goto LABEL_79;
    case 0x1Au:
      char v2 = 25;
      goto LABEL_79;
    case 0x1Bu:
      char v2 = 26;
      goto LABEL_79;
    case 0x1Cu:
      char v2 = 27;
      goto LABEL_79;
    case 0x1Du:
      char v2 = 28;
      goto LABEL_79;
    case 0x1Eu:
      char v2 = 29;
      goto LABEL_79;
    case 0x1Fu:
      char v2 = 30;
      goto LABEL_79;
    case 0x20u:
      char v2 = 31;
      goto LABEL_79;
    case 0x21u:
      char v2 = 32;
      goto LABEL_79;
    case 0x22u:
      char v2 = 33;
      goto LABEL_79;
    case 0x23u:
      char v2 = 34;
      goto LABEL_79;
    case 0x24u:
      char v2 = 35;
      goto LABEL_79;
    case 0x25u:
      char v2 = 36;
      goto LABEL_79;
    case 0x26u:
      char v2 = 37;
      goto LABEL_79;
    case 0x27u:
      char v2 = 38;
      goto LABEL_79;
    case 0x28u:
      char v2 = 39;
      goto LABEL_79;
    case 0x29u:
      char v2 = 40;
      goto LABEL_79;
    case 0x2Au:
      char v2 = 41;
      goto LABEL_79;
    case 0x2Bu:
      char v2 = 42;
      goto LABEL_79;
    case 0x2Cu:
      char v2 = 43;
      goto LABEL_79;
    case 0x2Du:
      char v2 = 44;
      goto LABEL_79;
    case 0x2Eu:
      char v2 = 45;
      goto LABEL_79;
    case 0x2Fu:
      char v2 = 46;
      goto LABEL_79;
    case 0x30u:
      char v2 = 47;
      goto LABEL_79;
    case 0x31u:
      char v2 = 48;
      goto LABEL_79;
    case 0x32u:
      char v2 = 49;
      goto LABEL_79;
    case 0x33u:
      char v2 = 50;
      goto LABEL_79;
    case 0x34u:
      char v2 = 51;
      goto LABEL_79;
    case 0x35u:
      char v2 = 52;
      goto LABEL_79;
    case 0x36u:
      char v2 = 53;
      goto LABEL_79;
    case 0x37u:
      char v2 = 54;
      goto LABEL_79;
    case 0x38u:
      char v2 = 55;
      goto LABEL_79;
    case 0x39u:
      char v2 = 56;
      goto LABEL_79;
    case 0x3Au:
      char v2 = 57;
      goto LABEL_79;
    case 0x3Bu:
      char v2 = 58;
      goto LABEL_79;
    case 0x3Cu:
      char v2 = 59;
      goto LABEL_79;
    case 0x3Du:
      char v2 = 60;
      goto LABEL_79;
    case 0x3Eu:
      char v2 = 61;
      goto LABEL_79;
    case 0x3Fu:
      char v2 = 62;
      goto LABEL_79;
    case 0x40u:
      char v2 = 63;
      goto LABEL_79;
    case 0x41u:
      char v2 = 64;
      goto LABEL_79;
    case 0x42u:
      char v2 = 65;
      goto LABEL_79;
    case 0x43u:
      char v2 = 66;
      goto LABEL_79;
    case 0x44u:
      char v2 = 67;
      goto LABEL_79;
    case 0x45u:
      char v2 = 68;
      goto LABEL_79;
    case 0x46u:
      char v2 = 69;
      goto LABEL_79;
    case 0x47u:
      char v2 = 70;
      goto LABEL_79;
    case 0x48u:
      char v2 = 71;
      goto LABEL_79;
    case 0x49u:
      char v2 = 72;
      goto LABEL_79;
    case 0x4Au:
      char v2 = 73;
      goto LABEL_79;
    case 0x4Bu:
      char v2 = 74;
      goto LABEL_79;
    case 0x4Cu:
      char v2 = 75;
      goto LABEL_79;
    case 0x4Du:
      char v2 = 76;
      goto LABEL_79;
    case 0x4Eu:
      char v2 = 77;
LABEL_79:
      char v3 = v2;
      goto LABEL_80;
    case 0x4Fu:
LABEL_80:
      char *v1 = v3;
      break;
    case 0x50u:
      char *v1 = 79;
      break;
    case 0x51u:
      char *v1 = 80;
      break;
    case 0x52u:
      char *v1 = 81;
      break;
    case 0x53u:
      char *v1 = 82;
      break;
    case 0x54u:
      char *v1 = 83;
      break;
    case 0x55u:
      char *v1 = 84;
      break;
    case 0x56u:
      char *v1 = 85;
      break;
    case 0x57u:
      char *v1 = 86;
      break;
    case 0x60u:
      char *v1 = 87;
      break;
    case 0x61u:
      char *v1 = 88;
      break;
    case 0x62u:
      char *v1 = 89;
      break;
    case 0x63u:
      char *v1 = 90;
      break;
    case 0x64u:
      char *v1 = 91;
      break;
    case 0x65u:
      char *v1 = 92;
      break;
    case 0x66u:
      char *v1 = 93;
      break;
    case 0x67u:
      char *v1 = 94;
      break;
    case 0x68u:
      char *v1 = 95;
      break;
    default:
      char *v1 = 96;
      break;
  }
  return (CoreHID::HIDUsage::LEDUsage_optional)rawValue;
}

CoreHID::HIDUsage::TelephonyDeviceUsage_optional __swiftcall HIDUsage.TelephonyDeviceUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 81;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_83;
    case 2u:
      char v2 = 1;
      goto LABEL_83;
    case 3u:
      char v2 = 2;
      goto LABEL_83;
    case 4u:
      char v2 = 3;
      goto LABEL_83;
    case 5u:
      char v2 = 4;
      goto LABEL_83;
    case 6u:
      char v2 = 5;
      goto LABEL_83;
    case 7u:
      char v2 = 6;
      goto LABEL_83;
    case 0x20u:
      char v2 = 7;
      goto LABEL_83;
    case 0x21u:
      char v2 = 8;
      goto LABEL_83;
    case 0x22u:
      char v2 = 9;
      goto LABEL_83;
    case 0x23u:
      char v2 = 10;
      goto LABEL_83;
    case 0x24u:
      char v2 = 11;
      goto LABEL_83;
    case 0x25u:
      char v2 = 12;
      goto LABEL_83;
    case 0x26u:
      char v2 = 13;
      goto LABEL_83;
    case 0x27u:
      char v2 = 14;
      goto LABEL_83;
    case 0x28u:
      char v2 = 15;
      goto LABEL_83;
    case 0x29u:
      char v2 = 16;
      goto LABEL_83;
    case 0x2Au:
      char v2 = 17;
      goto LABEL_83;
    case 0x2Bu:
      char v2 = 18;
      goto LABEL_83;
    case 0x2Cu:
      char v2 = 19;
      goto LABEL_83;
    case 0x2Du:
      char v2 = 20;
      goto LABEL_83;
    case 0x2Eu:
      char v2 = 21;
      goto LABEL_83;
    case 0x2Fu:
      char v2 = 22;
      goto LABEL_83;
    case 0x30u:
      char v2 = 23;
      goto LABEL_83;
    case 0x31u:
      char v2 = 24;
      goto LABEL_83;
    case 0x50u:
      char v2 = 25;
      goto LABEL_83;
    case 0x51u:
      char v2 = 26;
      goto LABEL_83;
    case 0x52u:
      char v2 = 27;
      goto LABEL_83;
    case 0x53u:
      char v2 = 28;
      goto LABEL_83;
    case 0x70u:
      char v2 = 29;
      goto LABEL_83;
    case 0x71u:
      char v2 = 30;
      goto LABEL_83;
    case 0x72u:
      char v2 = 31;
      goto LABEL_83;
    case 0x73u:
      char v2 = 32;
      goto LABEL_83;
    case 0x74u:
      char v2 = 33;
      goto LABEL_83;
    case 0x90u:
      char v2 = 34;
      goto LABEL_83;
    case 0x91u:
      char v2 = 35;
      goto LABEL_83;
    case 0x92u:
      char v2 = 36;
      goto LABEL_83;
    case 0x93u:
      char v2 = 37;
      goto LABEL_83;
    case 0x94u:
      char v2 = 38;
      goto LABEL_83;
    case 0x95u:
      char v2 = 39;
      goto LABEL_83;
    case 0x96u:
      char v2 = 40;
      goto LABEL_83;
    case 0x97u:
      char v2 = 41;
      goto LABEL_83;
    case 0x98u:
      char v2 = 42;
      goto LABEL_83;
    case 0x99u:
      char v2 = 43;
      goto LABEL_83;
    case 0x9Au:
      char v2 = 44;
      goto LABEL_83;
    case 0x9Bu:
      char v2 = 45;
      goto LABEL_83;
    case 0x9Cu:
      char v2 = 46;
      goto LABEL_83;
    case 0x9Du:
      char v2 = 47;
      goto LABEL_83;
    case 0x9Eu:
      char v2 = 48;
      goto LABEL_83;
    case 0xB0u:
      char v2 = 49;
      goto LABEL_83;
    case 0xB1u:
      char v2 = 50;
      goto LABEL_83;
    case 0xB2u:
      char v2 = 51;
      goto LABEL_83;
    case 0xB3u:
      char v2 = 52;
      goto LABEL_83;
    case 0xB4u:
      char v2 = 53;
      goto LABEL_83;
    case 0xB5u:
      char v2 = 54;
      goto LABEL_83;
    case 0xB6u:
      char v2 = 55;
      goto LABEL_83;
    case 0xB7u:
      char v2 = 56;
      goto LABEL_83;
    case 0xB8u:
      char v2 = 57;
      goto LABEL_83;
    case 0xB9u:
      char v2 = 58;
      goto LABEL_83;
    case 0xBAu:
      char v2 = 59;
      goto LABEL_83;
    case 0xBBu:
      char v2 = 60;
      goto LABEL_83;
    case 0xBCu:
      char v2 = 61;
      goto LABEL_83;
    case 0xBDu:
      char v2 = 62;
      goto LABEL_83;
    case 0xBEu:
      char v2 = 63;
      goto LABEL_83;
    case 0xBFu:
      char v2 = 64;
      goto LABEL_83;
    case 0xC0u:
      char v2 = 65;
      goto LABEL_83;
    case 0xC1u:
      char v2 = 66;
      goto LABEL_83;
    case 0xC2u:
      char v2 = 67;
      goto LABEL_83;
    case 0xF0u:
      char v2 = 68;
      goto LABEL_83;
    case 0xF1u:
      char v2 = 69;
      goto LABEL_83;
    case 0xF2u:
      char v2 = 70;
      goto LABEL_83;
    case 0xF3u:
      char v2 = 71;
      goto LABEL_83;
    case 0xF4u:
      char v2 = 72;
      goto LABEL_83;
    case 0xF5u:
      char v2 = 73;
      goto LABEL_83;
    case 0xF8u:
      char v2 = 74;
      goto LABEL_83;
    case 0xF9u:
      char v2 = 75;
      goto LABEL_83;
    case 0xFAu:
      char v2 = 76;
      goto LABEL_83;
    case 0xFBu:
      char v2 = 77;
      goto LABEL_83;
    case 0xFCu:
      char v2 = 78;
      goto LABEL_83;
    case 0xFDu:
      char v2 = 79;
      goto LABEL_83;
    case 0xFEu:
      char v2 = 80;
LABEL_83:
      char v3 = v2;
      goto LABEL_84;
    case 0x108u:
LABEL_84:
      char *v1 = v3;
      break;
    case 0x109u:
      char *v1 = 82;
      break;
    case 0x10Au:
      char *v1 = 83;
      break;
    case 0x110u:
      char *v1 = 84;
      break;
    case 0x111u:
      char *v1 = 85;
      break;
    case 0x112u:
      char *v1 = 86;
      break;
    case 0x113u:
      char *v1 = 87;
      break;
    case 0x114u:
      char *v1 = 88;
      break;
    case 0x140u:
      char *v1 = 89;
      break;
    case 0x141u:
      char *v1 = 90;
      break;
    case 0x142u:
      char *v1 = 91;
      break;
    case 0x143u:
      char *v1 = 92;
      break;
    case 0x144u:
      char *v1 = 93;
      break;
    case 0x145u:
      char *v1 = 94;
      break;
    case 0x146u:
      char *v1 = 95;
      break;
    case 0x147u:
      char *v1 = 96;
      break;
    case 0x14Au:
      char *v1 = 97;
      break;
    case 0x14Bu:
      char *v1 = 98;
      break;
    default:
      char *v1 = 99;
      break;
  }
  return (CoreHID::HIDUsage::TelephonyDeviceUsage_optional)rawValue;
}

CoreHID::HIDUsage::ConsumerUsage_optional __swiftcall HIDUsage.ConsumerUsage.init(rawValue:)(CoreHID::HIDUsage::ConsumerUsage_optional rawValue)
{
  __int16 v2 = 0;
  switch(rawValue.value)
  {
    case CoreHID_HIDUsage_ConsumerUsage_numericKeyPad:
LABEL_2:
      __int16 *v1 = v2;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_programmableButtons:
      __int16 *v1 = 1;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_microphone:
      __int16 *v1 = 2;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_headphone:
      __int16 *v1 = 3;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_graphicEqualizer:
      __int16 *v1 = 4;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_plus10:
      __int16 *v1 = 5;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_pictureInPictureToggle:
      __int16 *v1 = 6;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_pictureInPictureSwap:
      __int16 *v1 = 7;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_redMenuButton:
      __int16 *v1 = 8;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_cameraAccessDisabled:
      __int16 *v1 = 9;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_cameraAccessToggle:
      __int16 *v1 = 10;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_keyboardBrightnessIncrement:
      __int16 *v1 = 11;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_keyboardBrightnessDecrement:
      __int16 *v1 = 12;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_keyboardBacklightSetLevel:
      __int16 *v1 = 13;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_keyboardBacklightOOC:
      __int16 *v1 = 14;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_keyboardBacklightSetMinimum:
      __int16 *v1 = 15;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelection:
      __int16 *v1 = 16;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelectComputer:
      __int16 *v1 = 17;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelectTV:
      __int16 *v1 = 18;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelectWWW:
      __int16 *v1 = 19;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelectDVD:
      __int16 *v1 = 20;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelectTelephone:
      __int16 *v1 = 21;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelectProgramGuide:
      __int16 *v1 = 22;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelectVideoPhone:
      __int16 *v1 = 23;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mediaSelectGames:
      __int16 *v1 = 24;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_fastForward:
      __int16 *v1 = 25;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_rewind:
      __int16 *v1 = 26;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_scanNextTrack:
      __int16 *v1 = 27;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_scanPreviousTrack:
      __int16 *v1 = 28;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_stop:
      __int16 *v1 = 29;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_eject:
      __int16 *v1 = 30;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_randomPlay:
      __int16 *v1 = 31;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_selectDisc:
      __int16 *v1 = 32;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_enterDisc:
      __int16 *v1 = 33;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_repeatTrack:
      __int16 *v1 = 34;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_tracking:
      __int16 *v1 = 35;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_trackNormal:
      __int16 *v1 = 36;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_slowTracking:
      __int16 *v1 = 37;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_frameForward:
      __int16 *v1 = 38;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_frameBack:
      __int16 *v1 = 39;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mark:
      __int16 *v1 = 40;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_clearMark:
      __int16 *v1 = 41;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_repeatFromMark:
      __int16 *v1 = 42;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_returnToMark:
      __int16 *v1 = 43;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_searchMarkForward:
      __int16 *v1 = 44;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_searchMarkBackwards:
      __int16 *v1 = 45;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_counterReset:
      __int16 *v1 = 46;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_showCounter:
      __int16 *v1 = 47;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_trackingIncrement:
      __int16 *v1 = 48;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_trackingDecrement:
      __int16 *v1 = 49;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_stopOrEject:
      __int16 *v1 = 50;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_playOrPause:
      __int16 *v1 = 51;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_playOrSkip:
      __int16 *v1 = 52;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_voiceCommand:
      __int16 *v1 = 53;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_invokeCaptureInterface:
      __int16 *v1 = 54;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_startOrStopGameRecording:
      __int16 *v1 = 55;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_historicalGameCapture:
      __int16 *v1 = 56;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_captureGameScreenshot:
      __int16 *v1 = 57;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_showOrHideRecordingIndicator:
      __int16 *v1 = 58;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_startOrStopMicrophoneCapture:
      __int16 *v1 = 59;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_startOrStopCameraCapture:
      __int16 *v1 = 60;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_startOrStopGameBroadcast:
      __int16 *v1 = 61;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_startOrStopVoiceDictationSession:
      __int16 *v1 = 62;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_invokeOrDismissEmojiPicker:
      __int16 *v1 = 63;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_volume:
      __int16 *v1 = 64;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_balance:
      __int16 *v1 = 65;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mute:
      __int16 *v1 = 66;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_bass:
      __int16 *v1 = 67;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_treble:
      __int16 *v1 = 68;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_bassBoost:
      __int16 *v1 = 69;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_surroundMode:
      __int16 *v1 = 70;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_loudness:
      __int16 *v1 = 71;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_mpx:
      __int16 *v1 = 72;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_volumeIncrement:
      __int16 *v1 = 73;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_volumeDecrement:
      __int16 *v1 = 74;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_speedSelect:
      __int16 *v1 = 75;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_playbackSpeed:
      __int16 *v1 = 76;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_standardPlay:
      __int16 *v1 = 77;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_longPlay:
      __int16 *v1 = 78;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_extendedPlay:
      __int16 *v1 = 79;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_slow:
      __int16 *v1 = 80;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_fanEnable:
      __int16 *v1 = 81;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_fanSpeed:
      __int16 *v1 = 82;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_lightEnable:
      __int16 *v1 = 83;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_lightIlluminationLevel:
      __int16 *v1 = 84;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_climateControlEnable:
      __int16 *v1 = 85;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_roomTemperature:
      __int16 *v1 = 86;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_securityEnable:
      __int16 *v1 = 87;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_policeAlarm:
      __int16 *v1 = 88;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_proximity:
      __int16 *v1 = 89;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_motion:
      __int16 *v1 = 90;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_duressAlarm:
      __int16 *v1 = 91;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_holdupAlarm:
      __int16 *v1 = 92;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_channelFront:
      __int16 *v1 = 93;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_channelCenterFront:
      __int16 *v1 = 94;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_channelSide:
      __int16 *v1 = 95;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_channelSurround:
      __int16 *v1 = 96;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_channelLowFrequencyEnhancement:
      __int16 *v1 = 97;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_channelTop:
      __int16 *v1 = 98;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_channelUnknown:
      __int16 *v1 = 99;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_subChannel:
      __int16 *v1 = 100;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_subChannelIncrement:
      __int16 *v1 = 101;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_subChannelDecrement:
      __int16 *v1 = 102;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alternateAudioIncrement:
      __int16 *v1 = 103;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alternateAudioDecrement:
      __int16 *v1 = 104;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_applicationLaunchButtons:
      __int16 *v1 = 105;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alLaunchButtonConfigurationTool:
      __int16 *v1 = 106;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alProgrammableButtonConfiguration:
      __int16 *v1 = 107;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alConsumerControlConfiguration:
      __int16 *v1 = 108;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alWordProcessor:
      __int16 *v1 = 109;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alTextEditor:
      __int16 *v1 = 110;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alSpreadsheet:
      __int16 *v1 = 111;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alGraphicsEditor:
      __int16 *v1 = 112;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alPresentationApp:
      __int16 *v1 = 113;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alDatabaseApp:
      __int16 *v1 = 114;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alEmailReader:
      __int16 *v1 = 115;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alNewsreader:
      __int16 *v1 = 116;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alVoicemail:
      __int16 *v1 = 117;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alContactsOrAddressBook:
      __int16 *v1 = 118;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alCalendarOrSchedule:
      __int16 *v1 = 119;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alTaskOrProjectManager:
      __int16 *v1 = 120;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alLogOrJournalOrTimecard:
      __int16 *v1 = 121;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alCheckbookOrFinance:
      __int16 *v1 = 122;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alCalculator:
      __int16 *v1 = 123;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alAVCaptureOrPlayback:
      __int16 *v1 = 124;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alLocalMachineBrowser:
      __int16 *v1 = 125;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alLANOrWANBrowser:
      __int16 *v1 = 126;
      break;
    case CoreHID_HIDUsage_ConsumerUsage_alInternetBrowser:
      __int16 *v1 = 127;
      break;
    default:
      __int16 v2 = 128;
      switch(rawValue.value)
      {
        case CoreHID_HIDUsage_ConsumerUsage_alRemoteNetworkingOrISPConnect:
          goto LABEL_2;
        case CoreHID_HIDUsage_ConsumerUsage_alNetworkConference:
          __int16 *v1 = 129;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alNetworkChat:
          __int16 *v1 = 130;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alTelephonyOrDialer:
          __int16 *v1 = 131;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alLogon:
          __int16 *v1 = 132;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alLogoff:
          __int16 *v1 = 133;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alLogonOrLogoff:
          __int16 *v1 = 134;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alPreviousTaskOrApplication:
          __int16 *v1 = 135;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alPreemptiveHaltTaskOrApplication:
          __int16 *v1 = 136;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alIntegratedHelpCenter:
          __int16 *v1 = 137;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alDocuments:
          __int16 *v1 = 138;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alThesaurus:
          __int16 *v1 = 139;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alDictionary:
          __int16 *v1 = 140;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alDesktop:
          __int16 *v1 = 141;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alSpellCheck:
          __int16 *v1 = 142;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alGrammarCheck:
          __int16 *v1 = 143;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alWirelessStatus:
          __int16 *v1 = 144;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alKeyboardLayout:
          __int16 *v1 = 145;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alFileBrowser:
          __int16 *v1 = 146;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alPowerStatus:
          __int16 *v1 = 147;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alImageBrowser:
          __int16 *v1 = 148;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alAudioBrowser:
          __int16 *v1 = 149;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alMovieBrowser:
          __int16 *v1 = 150;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alDigitalRightsManager:
          __int16 *v1 = 151;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alOnlineActivityBrowser:
          __int16 *v1 = 152;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alResearchOrSearchBrowser:
          __int16 *v1 = 153;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alAudioPlayer:
          __int16 *v1 = 154;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alMessageStatus:
          __int16 *v1 = 155;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alContactSync:
          __int16 *v1 = 156;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alNavigation:
          __int16 *v1 = 157;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_alContextAwareDesktopAssistant:
          __int16 *v1 = 158;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_genericGUIApplicationControls:
          __int16 *v1 = 159;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acNew:
          __int16 *v1 = 160;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acOpen:
          __int16 *v1 = 161;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acClose:
          __int16 *v1 = 162;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acExit:
          __int16 *v1 = 163;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acMaximize:
          __int16 *v1 = 164;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acMinimize:
          __int16 *v1 = 165;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acRestartNumbering:
          __int16 *v1 = 166;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acBulletedList:
          __int16 *v1 = 167;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acPromote:
          __int16 *v1 = 168;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acDemote:
          __int16 *v1 = 169;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acYes:
          __int16 *v1 = 170;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acNo:
          __int16 *v1 = 171;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acInsertMode:
          __int16 *v1 = 172;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acDelete:
          __int16 *v1 = 173;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acLock:
          __int16 *v1 = 174;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acUnlock:
          __int16 *v1 = 175;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acProtect:
          __int16 *v1 = 176;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acUnprotect:
          __int16 *v1 = 177;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acAttachComment:
          __int16 *v1 = 178;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acDeleteComment:
          __int16 *v1 = 179;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acViewComment:
          __int16 *v1 = 180;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acSelectWord:
          __int16 *v1 = 181;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acSelectSentence:
          __int16 *v1 = 182;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acRedoOrRepeat:
          __int16 *v1 = 183;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acSort:
          __int16 *v1 = 184;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acSortAscending:
          __int16 *v1 = 185;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acSortDescending:
          __int16 *v1 = 186;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acFilter:
          __int16 *v1 = 187;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acReply:
          __int16 *v1 = 188;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acReplyAll:
          __int16 *v1 = 189;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acForwardMsg:
          __int16 *v1 = 190;
          break;
        case CoreHID_HIDUsage_ConsumerUsage_acSend:
          __int16 *v1 = 191;
          break;
        default:
          __int16 v2 = 192;
          switch(rawValue.value)
          {
            case CoreHID_HIDUsage_ConsumerUsage_acAttachFile:
              goto LABEL_2;
            case CoreHID_HIDUsage_ConsumerUsage_acUpload:
              __int16 *v1 = 193;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acDownloadSaveTargetAs:
              __int16 *v1 = 194;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acSetBorders:
              __int16 *v1 = 195;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acInsertRow:
              __int16 *v1 = 196;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acInsertColumn:
              __int16 *v1 = 197;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acInsertFile:
              __int16 *v1 = 198;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acInsertPicture:
              __int16 *v1 = 199;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acInsertObject:
              __int16 *v1 = 200;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acInsertSymbol:
              __int16 *v1 = 201;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acSaveAndClose:
              __int16 *v1 = 202;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acRename:
              __int16 *v1 = 203;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acMerge:
              __int16 *v1 = 204;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acSplit:
              __int16 *v1 = 205;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acDisributeHorizontally:
              __int16 *v1 = 206;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acDistributeVertically:
              __int16 *v1 = 207;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acNextKeyboardLayoutSelect:
              __int16 *v1 = 208;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acNavigationGuidance:
              __int16 *v1 = 209;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acDesktopShowAllWindows:
              __int16 *v1 = 210;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acSoftKeyLeft:
              __int16 *v1 = 211;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acSoftKeyRight:
              __int16 *v1 = 212;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acDesktopShowAllApplications:
              __int16 *v1 = 213;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_acIdleKeepAlive:
              __int16 *v1 = 214;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_extendedKeyboardAttributesCollection:
              __int16 *v1 = 215;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardFormFactor:
              __int16 *v1 = 216;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardKeyType:
              __int16 *v1 = 217;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardPhysicalLayout:
              __int16 *v1 = 218;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_vendorSpecificKeyboardPhysicalLayout:
              __int16 *v1 = 219;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardIETFLanguageTagIndex:
              __int16 *v1 = 220;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_implementedKeyboardInputAssistControls:
              __int16 *v1 = 221;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardInputAssistPrevious:
              __int16 *v1 = 222;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardInputAssistNext:
              __int16 *v1 = 223;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardInputAssistPreviousGroup:
              __int16 *v1 = 224;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardInputAssistNextGroup:
              __int16 *v1 = 225;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardInputAssistAccept:
              __int16 *v1 = 226;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_keyboardInputAssistCancel:
              __int16 *v1 = 227;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_privacyScreenToggle:
              __int16 *v1 = 228;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_privacyScreenLevelDecrement:
              __int16 *v1 = 229;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_privacyScreenLevelIncrement:
              __int16 *v1 = 230;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_privacyScreenLevelMinimum:
              __int16 *v1 = 231;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_privacyScreenLevelMaximum:
              __int16 *v1 = 232;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactEdited:
              __int16 *v1 = 233;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactAdded:
              __int16 *v1 = 234;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactRecordActive:
              __int16 *v1 = 235;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactIndex:
              __int16 *v1 = 236;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactNickname:
              __int16 *v1 = 237;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactFirstName:
              __int16 *v1 = 238;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactLastName:
              __int16 *v1 = 239;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactFullName:
              __int16 *v1 = 240;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactPhoneNumberPersonal:
              __int16 *v1 = 241;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactPhoneNumberBusiness:
              __int16 *v1 = 242;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactPhoneNumberMobile:
              __int16 *v1 = 243;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactPhoneNumberPager:
              __int16 *v1 = 244;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactPhoneNumberFax:
              __int16 *v1 = 245;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactPhoneNumberOther:
              __int16 *v1 = 246;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactEmailBusiness:
              __int16 *v1 = 247;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactEmailOther:
              __int16 *v1 = 248;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactEmailMain:
              __int16 *v1 = 249;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactSpeedDialNumber:
              __int16 *v1 = 250;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactStatusFlag:
              __int16 *v1 = 251;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactMiscellaneous:
              __int16 *v1 = 252;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_unknownDefault:
              __int16 *v1 = 253;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_unknownDefault|CoreHID_HIDUsage_ConsumerUsage_numericKeyPad:
              __int16 *v1 = 254;
              break;
            case CoreHID_HIDUsage_ConsumerUsage_contactStatusFlag|CoreHID_HIDUsage_ConsumerUsage_headphone:
              __int16 *v1 = 255;
              break;
            default:
              __int16 v2 = 256;
              switch(rawValue.value)
              {
                case 0x1C5:
                  goto LABEL_2;
                case 0x1C6:
                  __int16 *v1 = 257;
                  break;
                case 0x1C7:
                  __int16 *v1 = 258;
                  break;
                case 0x1C8:
                  __int16 *v1 = 259;
                  break;
                case 0x1C9:
                  __int16 *v1 = 260;
                  break;
                case 0x1CA:
                  __int16 *v1 = 261;
                  break;
                case 0x1CB:
                  __int16 *v1 = 262;
                  break;
                case 0x200:
                  __int16 *v1 = 263;
                  break;
                case 0x201:
                  __int16 *v1 = 264;
                  break;
                case 0x202:
                  __int16 *v1 = 265;
                  break;
                case 0x203:
                  __int16 *v1 = 266;
                  break;
                case 0x204:
                  __int16 *v1 = 267;
                  break;
                case 0x205:
                  __int16 *v1 = 268;
                  break;
                case 0x206:
                  __int16 *v1 = 269;
                  break;
                case 0x207:
                  __int16 *v1 = 270;
                  break;
                case 0x208:
                  __int16 *v1 = 271;
                  break;
                case 0x209:
                  __int16 *v1 = 272;
                  break;
                case 0x21A:
                  __int16 *v1 = 273;
                  break;
                case 0x21B:
                  __int16 *v1 = 274;
                  break;
                case 0x21C:
                  __int16 *v1 = 275;
                  break;
                case 0x21D:
                  __int16 *v1 = 276;
                  break;
                case 0x21E:
                  __int16 *v1 = 277;
                  break;
                case 0x21F:
                  __int16 *v1 = 278;
                  break;
                case 0x220:
                  __int16 *v1 = 279;
                  break;
                case 0x221:
                  __int16 *v1 = 280;
                  break;
                case 0x222:
                  __int16 *v1 = 281;
                  break;
                case 0x223:
                  __int16 *v1 = 282;
                  break;
                case 0x224:
                  __int16 *v1 = 283;
                  break;
                case 0x225:
                  __int16 *v1 = 284;
                  break;
                case 0x226:
                  __int16 *v1 = 285;
                  break;
                case 0x227:
                  __int16 *v1 = 286;
                  break;
                case 0x228:
                  __int16 *v1 = 287;
                  break;
                case 0x229:
                  __int16 *v1 = 288;
                  break;
                case 0x22A:
                  __int16 *v1 = 289;
                  break;
                case 0x22B:
                  __int16 *v1 = 290;
                  break;
                case 0x22C:
                  __int16 *v1 = 291;
                  break;
                case 0x22D:
                  __int16 *v1 = 292;
                  break;
                case 0x22E:
                  __int16 *v1 = 293;
                  break;
                case 0x22F:
                  __int16 *v1 = 294;
                  break;
                case 0x230:
                  __int16 *v1 = 295;
                  break;
                case 0x231:
                  __int16 *v1 = 296;
                  break;
                case 0x232:
                  __int16 *v1 = 297;
                  break;
                case 0x233:
                  __int16 *v1 = 298;
                  break;
                case 0x234:
                  __int16 *v1 = 299;
                  break;
                case 0x235:
                  __int16 *v1 = 300;
                  break;
                case 0x236:
                  __int16 *v1 = 301;
                  break;
                case 0x237:
                  __int16 *v1 = 302;
                  break;
                case 0x238:
                  __int16 *v1 = 303;
                  break;
                case 0x239:
                  __int16 *v1 = 304;
                  break;
                case 0x23A:
                  __int16 *v1 = 305;
                  break;
                case 0x23B:
                  __int16 *v1 = 306;
                  break;
                case 0x23C:
                  __int16 *v1 = 307;
                  break;
                case 0x23D:
                  __int16 *v1 = 308;
                  break;
                case 0x23E:
                  __int16 *v1 = 309;
                  break;
                case 0x23F:
                  __int16 *v1 = 310;
                  break;
                case 0x240:
                  __int16 *v1 = 311;
                  break;
                case 0x241:
                  __int16 *v1 = 312;
                  break;
                case 0x242:
                  __int16 *v1 = 313;
                  break;
                case 0x243:
                  __int16 *v1 = 314;
                  break;
                case 0x244:
                  __int16 *v1 = 315;
                  break;
                case 0x245:
                  __int16 *v1 = 316;
                  break;
                case 0x246:
                  __int16 *v1 = 317;
                  break;
                case 0x247:
                  __int16 *v1 = 318;
                  break;
                case 0x248:
                  __int16 *v1 = 319;
                  break;
                default:
                  if ((unsigned __int16)(rawValue.value - 585) >= 0x40u)
                  {
                    __int16 v2 = 384;
                    switch(rawValue.value)
                    {
                      case CoreHID_HIDUsage_ConsumerUsage_mute|0x200:
                        goto LABEL_2;
                      case CoreHID_HIDUsage_ConsumerUsage_bass|0x200:
                        __int16 *v1 = 385;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_treble|0x200:
                        __int16 *v1 = 386;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_bassBoost|0x200:
                        __int16 *v1 = 387;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_surroundMode|0x200:
                        __int16 *v1 = 388;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_loudness|0x200:
                        __int16 *v1 = 389;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_mpx|0x200:
                        __int16 *v1 = 390;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_volumeIncrement|0x200:
                        __int16 *v1 = 391;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_volumeDecrement|0x200:
                        __int16 *v1 = 392;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_speedSelect|0x200:
                        __int16 *v1 = 393;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_playbackSpeed|0x200:
                        __int16 *v1 = 394;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_standardPlay|0x200:
                        __int16 *v1 = 395;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_longPlay|0x200:
                        __int16 *v1 = 396;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_extendedPlay|0x200:
                        __int16 *v1 = 397;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_slow|0x200:
                        __int16 *v1 = 398;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_fanEnable|0x200:
                        __int16 *v1 = 399;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_fanSpeed|0x200:
                        __int16 *v1 = 400;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_lightEnable|0x200:
                        __int16 *v1 = 401;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_lightIlluminationLevel|0x200:
                        __int16 *v1 = 402;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_climateControlEnable|0x200:
                        __int16 *v1 = 403;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_roomTemperature|0x200:
                        __int16 *v1 = 404;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_securityEnable|0x200:
                        __int16 *v1 = 405;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_fireAlarm|0x200:
                        __int16 *v1 = 406;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_policeAlarm|0x200:
                        __int16 *v1 = 407;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_proximity|0x200:
                        __int16 *v1 = 408;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_motion|0x200:
                        __int16 *v1 = 409;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_channelFront|0x200:
                        __int16 *v1 = 410;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alWordProcessor|0x200:
                        __int16 *v1 = 411;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alTextEditor|0x200:
                        __int16 *v1 = 412;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alSpreadsheet|0x200:
                        __int16 *v1 = 413;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alGraphicsEditor|0x200:
                        __int16 *v1 = 414;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alPresentationApp|0x200:
                        __int16 *v1 = 415;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alDatabaseApp|0x200:
                        __int16 *v1 = 416;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alEmailReader|0x200:
                        __int16 *v1 = 417;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alNewsreader|0x200:
                        __int16 *v1 = 418;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alVoicemail|0x200:
                        __int16 *v1 = 419;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alContactsOrAddressBook|0x200:
                        __int16 *v1 = 420;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alCalendarOrSchedule|0x200:
                        __int16 *v1 = 421;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alTaskOrProjectManager|0x200:
                        __int16 *v1 = 422;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alLogOrJournalOrTimecard|0x200:
                        __int16 *v1 = 423;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alLocalMachineBrowser|0x200:
                        __int16 *v1 = 424;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alLANOrWANBrowser|0x200:
                        __int16 *v1 = 425;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alInternetBrowser|0x200:
                        __int16 *v1 = 426;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alRemoteNetworkingOrISPConnect|0x200:
                        __int16 *v1 = 427;
                        break;
                      case CoreHID_HIDUsage_ConsumerUsage_alNetworkConference|0x200:
                        __int16 *v1 = 428;
                        break;
                      default:
                        if (rawValue.value == (CoreHID_HIDUsage_ConsumerUsage_acPaste|0x400)) {
                          __int16 v3 = 449;
                        }
                        else {
                          __int16 v3 = 450;
                        }
                        if (rawValue.value == (CoreHID_HIDUsage_ConsumerUsage_acCut|0x400)) {
                          __int16 v4 = 448;
                        }
                        else {
                          __int16 v4 = v3;
                        }
                        __int16 *v1 = v4;
                        break;
                    }
                  }
                  else
                  {
                    __int16 *v1 = rawValue.value - 265;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  return rawValue;
}

CoreHID::HIDUsage::DigitizersUsage_optional __swiftcall HIDUsage.DigitizersUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 90;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_92;
    case 2u:
      char v2 = 1;
      goto LABEL_92;
    case 3u:
      char v2 = 2;
      goto LABEL_92;
    case 4u:
      char v2 = 3;
      goto LABEL_92;
    case 5u:
      char v2 = 4;
      goto LABEL_92;
    case 6u:
      char v2 = 5;
      goto LABEL_92;
    case 7u:
      char v2 = 6;
      goto LABEL_92;
    case 8u:
      char v2 = 7;
      goto LABEL_92;
    case 9u:
      char v2 = 8;
      goto LABEL_92;
    case 0xAu:
      char v2 = 9;
      goto LABEL_92;
    case 0xBu:
      char v2 = 10;
      goto LABEL_92;
    case 0xCu:
      char v2 = 11;
      goto LABEL_92;
    case 0xDu:
      char v2 = 12;
      goto LABEL_92;
    case 0xEu:
      char v2 = 13;
      goto LABEL_92;
    case 0xFu:
      char v2 = 14;
      goto LABEL_92;
    case 0x20u:
      char v2 = 15;
      goto LABEL_92;
    case 0x21u:
      char v2 = 16;
      goto LABEL_92;
    case 0x22u:
      char v2 = 17;
      goto LABEL_92;
    case 0x23u:
      char v2 = 18;
      goto LABEL_92;
    case 0x24u:
      char v2 = 19;
      goto LABEL_92;
    case 0x30u:
      char v2 = 20;
      goto LABEL_92;
    case 0x31u:
      char v2 = 21;
      goto LABEL_92;
    case 0x32u:
      char v2 = 22;
      goto LABEL_92;
    case 0x33u:
      char v2 = 23;
      goto LABEL_92;
    case 0x34u:
      char v2 = 24;
      goto LABEL_92;
    case 0x35u:
      char v2 = 25;
      goto LABEL_92;
    case 0x36u:
      char v2 = 26;
      goto LABEL_92;
    case 0x37u:
      char v2 = 27;
      goto LABEL_92;
    case 0x38u:
      char v2 = 28;
      goto LABEL_92;
    case 0x39u:
      char v2 = 29;
      goto LABEL_92;
    case 0x3Au:
      char v2 = 30;
      goto LABEL_92;
    case 0x3Bu:
      char v2 = 31;
      goto LABEL_92;
    case 0x3Cu:
      char v2 = 32;
      goto LABEL_92;
    case 0x3Du:
      char v2 = 33;
      goto LABEL_92;
    case 0x3Eu:
      char v2 = 34;
      goto LABEL_92;
    case 0x3Fu:
      char v2 = 35;
      goto LABEL_92;
    case 0x40u:
      char v2 = 36;
      goto LABEL_92;
    case 0x41u:
      char v2 = 37;
      goto LABEL_92;
    case 0x42u:
      char v2 = 38;
      goto LABEL_92;
    case 0x43u:
      char v2 = 39;
      goto LABEL_92;
    case 0x44u:
      char v2 = 40;
      goto LABEL_92;
    case 0x45u:
      char v2 = 41;
      goto LABEL_92;
    case 0x46u:
      char v2 = 42;
      goto LABEL_92;
    case 0x47u:
      char v2 = 43;
      goto LABEL_92;
    case 0x48u:
      char v2 = 44;
      goto LABEL_92;
    case 0x49u:
      char v2 = 45;
      goto LABEL_92;
    case 0x51u:
      char v2 = 46;
      goto LABEL_92;
    case 0x52u:
      char v2 = 47;
      goto LABEL_92;
    case 0x53u:
      char v2 = 48;
      goto LABEL_92;
    case 0x54u:
      char v2 = 49;
      goto LABEL_92;
    case 0x55u:
      char v2 = 50;
      goto LABEL_92;
    case 0x56u:
      char v2 = 51;
      goto LABEL_92;
    case 0x57u:
      char v2 = 52;
      goto LABEL_92;
    case 0x58u:
      char v2 = 53;
      goto LABEL_92;
    case 0x59u:
      char v2 = 54;
      goto LABEL_92;
    case 0x5Au:
      char v2 = 55;
      goto LABEL_92;
    case 0x5Bu:
      char v2 = 56;
      goto LABEL_92;
    case 0x5Cu:
      char v2 = 57;
      goto LABEL_92;
    case 0x5Du:
      char v2 = 58;
      goto LABEL_92;
    case 0x5Eu:
      char v2 = 59;
      goto LABEL_92;
    case 0x5Fu:
      char v2 = 60;
      goto LABEL_92;
    case 0x60u:
      char v2 = 61;
      goto LABEL_92;
    case 0x61u:
      char v2 = 62;
      goto LABEL_92;
    case 0x62u:
      char v2 = 63;
      goto LABEL_92;
    case 0x63u:
      char v2 = 64;
      goto LABEL_92;
    case 0x64u:
      char v2 = 65;
      goto LABEL_92;
    case 0x65u:
      char v2 = 66;
      goto LABEL_92;
    case 0x66u:
      char v2 = 67;
      goto LABEL_92;
    case 0x67u:
      char v2 = 68;
      goto LABEL_92;
    case 0x68u:
      char v2 = 69;
      goto LABEL_92;
    case 0x69u:
      char v2 = 70;
      goto LABEL_92;
    case 0x6Au:
      char v2 = 71;
      goto LABEL_92;
    case 0x6Bu:
      char v2 = 72;
      goto LABEL_92;
    case 0x6Cu:
      char v2 = 73;
      goto LABEL_92;
    case 0x6Du:
      char v2 = 74;
      goto LABEL_92;
    case 0x6Eu:
      char v2 = 75;
      goto LABEL_92;
    case 0x6Fu:
      char v2 = 76;
      goto LABEL_92;
    case 0x70u:
      char v2 = 77;
      goto LABEL_92;
    case 0x71u:
      char v2 = 78;
      goto LABEL_92;
    case 0x72u:
      char v2 = 79;
      goto LABEL_92;
    case 0x73u:
      char v2 = 80;
      goto LABEL_92;
    case 0x74u:
      char v2 = 81;
      goto LABEL_92;
    case 0x75u:
      char v2 = 82;
      goto LABEL_92;
    case 0x76u:
      char v2 = 83;
      goto LABEL_92;
    case 0x77u:
      char v2 = 84;
      goto LABEL_92;
    case 0x80u:
      char v2 = 85;
      goto LABEL_92;
    case 0x81u:
      char v2 = 86;
      goto LABEL_92;
    case 0x82u:
      char v2 = 87;
      goto LABEL_92;
    case 0x83u:
      char v2 = 88;
      goto LABEL_92;
    case 0x84u:
      char v2 = 89;
LABEL_92:
      char v3 = v2;
      goto LABEL_93;
    case 0x85u:
LABEL_93:
      char *v1 = v3;
      break;
    case 0x90u:
      char *v1 = 91;
      break;
    case 0x91u:
      char *v1 = 92;
      break;
    case 0x92u:
      char *v1 = 93;
      break;
    case 0x93u:
      char *v1 = 94;
      break;
    case 0x94u:
      char *v1 = 95;
      break;
    case 0x95u:
      char *v1 = 96;
      break;
    case 0x96u:
      char *v1 = 97;
      break;
    case 0x97u:
      char *v1 = 98;
      break;
    case 0x98u:
      char *v1 = 99;
      break;
    case 0xA0u:
      char *v1 = 100;
      break;
    case 0xA1u:
      char *v1 = 101;
      break;
    case 0xA2u:
      char *v1 = 102;
      break;
    case 0xA3u:
      char *v1 = 103;
      break;
    case 0xA4u:
      char *v1 = 104;
      break;
    case 0xA5u:
      char *v1 = 105;
      break;
    case 0xA6u:
      char *v1 = 106;
      break;
    case 0xB0u:
      char *v1 = 107;
      break;
    default:
      char *v1 = 108;
      break;
  }
  return (CoreHID::HIDUsage::DigitizersUsage_optional)rawValue;
}

CoreHID::HIDUsage::HapticsUsage_optional __swiftcall HIDUsage.HapticsUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  switch(rawValue)
  {
    case 0x1001u:
      char *v1 = 12;
      break;
    case 0x1002u:
      char *v1 = 13;
      break;
    case 0x1003u:
      char *v1 = 14;
      break;
    case 0x1004u:
      char *v1 = 15;
      break;
    case 0x1005u:
      char *v1 = 16;
      break;
    case 0x1006u:
      char *v1 = 17;
      break;
    case 0x1007u:
      char *v1 = 18;
      break;
    case 0x1008u:
      char *v1 = 19;
      break;
    case 0x1009u:
      char *v1 = 20;
      break;
    case 0x100Au:
      char *v1 = 21;
      break;
    case 0x100Bu:
      char *v1 = 22;
      break;
    case 0x100Cu:
      char *v1 = 23;
      break;
    case 0x100Du:
      char *v1 = 24;
      break;
    case 0x100Eu:
      char *v1 = 25;
      break;
    case 0x100Fu:
      char *v1 = 26;
      break;
    case 0x1010u:
      char *v1 = 27;
      break;
    case 0x1011u:
      char *v1 = 28;
      break;
    default:
      char v2 = 0;
      char v3 = 11;
      switch(rawValue)
      {
        case 1u:
          goto LABEL_30;
        case 0x10u:
          char v2 = 1;
          goto LABEL_30;
        case 0x11u:
          char v2 = 2;
          goto LABEL_30;
        case 0x20u:
          char v2 = 3;
          goto LABEL_30;
        case 0x21u:
          char v2 = 4;
          goto LABEL_30;
        case 0x22u:
          char v2 = 5;
          goto LABEL_30;
        case 0x23u:
          char v2 = 6;
          goto LABEL_30;
        case 0x24u:
          char v2 = 7;
          goto LABEL_30;
        case 0x25u:
          char v2 = 8;
          goto LABEL_30;
        case 0x26u:
          char v2 = 9;
          goto LABEL_30;
        case 0x27u:
          char v2 = 10;
LABEL_30:
          char v3 = v2;
          goto LABEL_31;
        case 0x28u:
LABEL_31:
          char *v1 = v3;
          break;
        default:
          char *v1 = 29;
          break;
      }
      break;
  }
  return (CoreHID::HIDUsage::HapticsUsage_optional)rawValue;
}

CoreHID::HIDUsage::PhysicalInputDeviceUsage_optional __swiftcall HIDUsage.PhysicalInputDeviceUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 87;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_89;
    case 0x20u:
      char v2 = 1;
      goto LABEL_89;
    case 0x21u:
      char v2 = 2;
      goto LABEL_89;
    case 0x22u:
      char v2 = 3;
      goto LABEL_89;
    case 0x23u:
      char v2 = 4;
      goto LABEL_89;
    case 0x24u:
      char v2 = 5;
      goto LABEL_89;
    case 0x25u:
      char v2 = 6;
      goto LABEL_89;
    case 0x26u:
      char v2 = 7;
      goto LABEL_89;
    case 0x27u:
      char v2 = 8;
      goto LABEL_89;
    case 0x28u:
      char v2 = 9;
      goto LABEL_89;
    case 0x30u:
      char v2 = 10;
      goto LABEL_89;
    case 0x31u:
      char v2 = 11;
      goto LABEL_89;
    case 0x32u:
      char v2 = 12;
      goto LABEL_89;
    case 0x33u:
      char v2 = 13;
      goto LABEL_89;
    case 0x34u:
      char v2 = 14;
      goto LABEL_89;
    case 0x40u:
      char v2 = 15;
      goto LABEL_89;
    case 0x41u:
      char v2 = 16;
      goto LABEL_89;
    case 0x42u:
      char v2 = 17;
      goto LABEL_89;
    case 0x43u:
      char v2 = 18;
      goto LABEL_89;
    case 0x50u:
      char v2 = 19;
      goto LABEL_89;
    case 0x51u:
      char v2 = 20;
      goto LABEL_89;
    case 0x52u:
      char v2 = 21;
      goto LABEL_89;
    case 0x53u:
      char v2 = 22;
      goto LABEL_89;
    case 0x54u:
      char v2 = 23;
      goto LABEL_89;
    case 0x55u:
      char v2 = 24;
      goto LABEL_89;
    case 0x56u:
      char v2 = 25;
      goto LABEL_89;
    case 0x57u:
      char v2 = 26;
      goto LABEL_89;
    case 0x58u:
      char v2 = 27;
      goto LABEL_89;
    case 0x59u:
      char v2 = 28;
      goto LABEL_89;
    case 0x5Au:
      char v2 = 29;
      goto LABEL_89;
    case 0x5Bu:
      char v2 = 30;
      goto LABEL_89;
    case 0x5Cu:
      char v2 = 31;
      goto LABEL_89;
    case 0x5Du:
      char v2 = 32;
      goto LABEL_89;
    case 0x5Eu:
      char v2 = 33;
      goto LABEL_89;
    case 0x5Fu:
      char v2 = 34;
      goto LABEL_89;
    case 0x60u:
      char v2 = 35;
      goto LABEL_89;
    case 0x61u:
      char v2 = 36;
      goto LABEL_89;
    case 0x62u:
      char v2 = 37;
      goto LABEL_89;
    case 0x63u:
      char v2 = 38;
      goto LABEL_89;
    case 0x64u:
      char v2 = 39;
      goto LABEL_89;
    case 0x65u:
      char v2 = 40;
      goto LABEL_89;
    case 0x66u:
      char v2 = 41;
      goto LABEL_89;
    case 0x67u:
      char v2 = 42;
      goto LABEL_89;
    case 0x68u:
      char v2 = 43;
      goto LABEL_89;
    case 0x69u:
      char v2 = 44;
      goto LABEL_89;
    case 0x6Au:
      char v2 = 45;
      goto LABEL_89;
    case 0x6Bu:
      char v2 = 46;
      goto LABEL_89;
    case 0x6Cu:
      char v2 = 47;
      goto LABEL_89;
    case 0x6Du:
      char v2 = 48;
      goto LABEL_89;
    case 0x6Eu:
      char v2 = 49;
      goto LABEL_89;
    case 0x6Fu:
      char v2 = 50;
      goto LABEL_89;
    case 0x70u:
      char v2 = 51;
      goto LABEL_89;
    case 0x71u:
      char v2 = 52;
      goto LABEL_89;
    case 0x72u:
      char v2 = 53;
      goto LABEL_89;
    case 0x73u:
      char v2 = 54;
      goto LABEL_89;
    case 0x74u:
      char v2 = 55;
      goto LABEL_89;
    case 0x75u:
      char v2 = 56;
      goto LABEL_89;
    case 0x76u:
      char v2 = 57;
      goto LABEL_89;
    case 0x77u:
      char v2 = 58;
      goto LABEL_89;
    case 0x78u:
      char v2 = 59;
      goto LABEL_89;
    case 0x79u:
      char v2 = 60;
      goto LABEL_89;
    case 0x7Au:
      char v2 = 61;
      goto LABEL_89;
    case 0x7Bu:
      char v2 = 62;
      goto LABEL_89;
    case 0x7Cu:
      char v2 = 63;
      goto LABEL_89;
    case 0x7Du:
      char v2 = 64;
      goto LABEL_89;
    case 0x7Eu:
      char v2 = 65;
      goto LABEL_89;
    case 0x7Fu:
      char v2 = 66;
      goto LABEL_89;
    case 0x80u:
      char v2 = 67;
      goto LABEL_89;
    case 0x81u:
      char v2 = 68;
      goto LABEL_89;
    case 0x82u:
      char v2 = 69;
      goto LABEL_89;
    case 0x83u:
      char v2 = 70;
      goto LABEL_89;
    case 0x84u:
      char v2 = 71;
      goto LABEL_89;
    case 0x85u:
      char v2 = 72;
      goto LABEL_89;
    case 0x86u:
      char v2 = 73;
      goto LABEL_89;
    case 0x87u:
      char v2 = 74;
      goto LABEL_89;
    case 0x88u:
      char v2 = 75;
      goto LABEL_89;
    case 0x89u:
      char v2 = 76;
      goto LABEL_89;
    case 0x8Bu:
      char v2 = 77;
      goto LABEL_89;
    case 0x8Cu:
      char v2 = 78;
      goto LABEL_89;
    case 0x8Du:
      char v2 = 79;
      goto LABEL_89;
    case 0x8Eu:
      char v2 = 80;
      goto LABEL_89;
    case 0x8Fu:
      char v2 = 81;
      goto LABEL_89;
    case 0x90u:
      char v2 = 82;
      goto LABEL_89;
    case 0x91u:
      char v2 = 83;
      goto LABEL_89;
    case 0x92u:
      char v2 = 84;
      goto LABEL_89;
    case 0x94u:
      char v2 = 85;
      goto LABEL_89;
    case 0x95u:
      char v2 = 86;
LABEL_89:
      char v3 = v2;
      goto LABEL_90;
    case 0x96u:
LABEL_90:
      char *v1 = v3;
      break;
    case 0x97u:
      char *v1 = 88;
      break;
    case 0x98u:
      char *v1 = 89;
      break;
    case 0x99u:
      char *v1 = 90;
      break;
    case 0x9Au:
      char *v1 = 91;
      break;
    case 0x9Bu:
      char *v1 = 92;
      break;
    case 0x9Cu:
      char *v1 = 93;
      break;
    case 0x9Fu:
      char *v1 = 94;
      break;
    case 0xA0u:
      char *v1 = 95;
      break;
    case 0xA4u:
      char *v1 = 96;
      break;
    case 0xA5u:
      char *v1 = 97;
      break;
    case 0xA6u:
      char *v1 = 98;
      break;
    case 0xA7u:
      char *v1 = 99;
      break;
    case 0xA8u:
      char *v1 = 100;
      break;
    case 0xA9u:
      char *v1 = 101;
      break;
    case 0xAAu:
      char *v1 = 102;
      break;
    case 0xABu:
      char *v1 = 103;
      break;
    case 0xACu:
      char *v1 = 104;
      break;
    default:
      char *v1 = 105;
      break;
  }
  return (CoreHID::HIDUsage::PhysicalInputDeviceUsage_optional)rawValue;
}

CoreHID::HIDUsage::SOCUsage_optional __swiftcall HIDUsage.SOCUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  unsigned int v2 = (unsigned __int16)(rawValue - 1);
  if (v2 >= 0xA) {
    LOBYTE(v2) = 10;
  }
  unsigned char *v1 = v2;
  return (CoreHID::HIDUsage::SOCUsage_optional)rawValue;
}

CoreHID::HIDUsage::EyeAndHeadTrackersUsage_optional __swiftcall HIDUsage.EyeAndHeadTrackersUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  if (rawValue > 0xFFu)
  {
    if (rawValue <= 0x1FFu)
    {
      switch(rawValue)
      {
        case 0x100u:
          char *v1 = 19;
          break;
        case 0x101u:
          char *v1 = 20;
          break;
        case 0x102u:
          char *v1 = 21;
          break;
        case 0x103u:
          char *v1 = 22;
          break;
        case 0x104u:
          char *v1 = 23;
          break;
        case 0x105u:
          char *v1 = 24;
          break;
        default:
          goto LABEL_44;
      }
    }
    else if (rawValue > 0x2FFu)
    {
      switch(rawValue)
      {
        case 0x300u:
          char *v1 = 31;
          break;
        case 0x301u:
          char *v1 = 32;
          break;
        case 0x400u:
          char *v1 = 33;
          break;
        default:
LABEL_44:
          char *v1 = 34;
          break;
      }
    }
    else
    {
      switch(rawValue)
      {
        case 0x200u:
          char *v1 = 25;
          break;
        case 0x201u:
          char *v1 = 26;
          break;
        case 0x202u:
          char *v1 = 27;
          break;
        case 0x203u:
          char *v1 = 28;
          break;
        case 0x204u:
          char *v1 = 29;
          break;
        case 0x205u:
          char *v1 = 30;
          break;
        default:
          goto LABEL_44;
      }
    }
  }
  else
  {
    char v2 = 0;
    char v3 = 16;
    switch(rawValue)
    {
      case 1u:
        goto LABEL_28;
      case 2u:
        char v2 = 1;
        goto LABEL_28;
      case 0x10u:
        char v2 = 2;
        goto LABEL_28;
      case 0x11u:
        char v2 = 3;
        goto LABEL_28;
      case 0x12u:
        char v2 = 4;
        goto LABEL_28;
      case 0x13u:
        char v2 = 5;
        goto LABEL_28;
      case 0x14u:
        char v2 = 6;
        goto LABEL_28;
      case 0x20u:
        char v2 = 7;
        goto LABEL_28;
      case 0x21u:
        char v2 = 8;
        goto LABEL_28;
      case 0x22u:
        char v2 = 9;
        goto LABEL_28;
      case 0x23u:
        char v2 = 10;
        goto LABEL_28;
      case 0x24u:
        char v2 = 11;
        goto LABEL_28;
      case 0x25u:
        char v2 = 12;
        goto LABEL_28;
      case 0x26u:
        char v2 = 13;
        goto LABEL_28;
      case 0x27u:
        char v2 = 14;
        goto LABEL_28;
      case 0x28u:
        char v2 = 15;
LABEL_28:
        char v3 = v2;
        goto LABEL_29;
      case 0x29u:
LABEL_29:
        char *v1 = v3;
        break;
      case 0x2Au:
        char *v1 = 17;
        break;
      case 0x2Bu:
        char *v1 = 18;
        break;
      default:
        goto LABEL_44;
    }
  }
  return (CoreHID::HIDUsage::EyeAndHeadTrackersUsage_optional)rawValue;
}

CoreHID::HIDUsage::AuxiliaryDisplayUsage_optional __swiftcall HIDUsage.AuxiliaryDisplayUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 57;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_58;
    case 2u:
      char v2 = 1;
      goto LABEL_58;
    case 0x20u:
      char v2 = 2;
      goto LABEL_58;
    case 0x21u:
      char v2 = 3;
      goto LABEL_58;
    case 0x22u:
      char v2 = 4;
      goto LABEL_58;
    case 0x23u:
      char v2 = 5;
      goto LABEL_58;
    case 0x24u:
      char v2 = 6;
      goto LABEL_58;
    case 0x25u:
      char v2 = 7;
      goto LABEL_58;
    case 0x26u:
      char v2 = 8;
      goto LABEL_58;
    case 0x27u:
      char v2 = 9;
      goto LABEL_58;
    case 0x28u:
      char v2 = 10;
      goto LABEL_58;
    case 0x29u:
      char v2 = 11;
      goto LABEL_58;
    case 0x2Au:
      char v2 = 12;
      goto LABEL_58;
    case 0x2Bu:
      char v2 = 13;
      goto LABEL_58;
    case 0x2Cu:
      char v2 = 14;
      goto LABEL_58;
    case 0x2Du:
      char v2 = 15;
      goto LABEL_58;
    case 0x2Eu:
      char v2 = 16;
      goto LABEL_58;
    case 0x2Fu:
      char v2 = 17;
      goto LABEL_58;
    case 0x30u:
      char v2 = 18;
      goto LABEL_58;
    case 0x31u:
      char v2 = 19;
      goto LABEL_58;
    case 0x32u:
      char v2 = 20;
      goto LABEL_58;
    case 0x33u:
      char v2 = 21;
      goto LABEL_58;
    case 0x34u:
      char v2 = 22;
      goto LABEL_58;
    case 0x35u:
      char v2 = 23;
      goto LABEL_58;
    case 0x36u:
      char v2 = 24;
      goto LABEL_58;
    case 0x37u:
      char v2 = 25;
      goto LABEL_58;
    case 0x38u:
      char v2 = 26;
      goto LABEL_58;
    case 0x39u:
      char v2 = 27;
      goto LABEL_58;
    case 0x3Au:
      char v2 = 28;
      goto LABEL_58;
    case 0x3Bu:
      char v2 = 29;
      goto LABEL_58;
    case 0x3Cu:
      char v2 = 30;
      goto LABEL_58;
    case 0x3Du:
      char v2 = 31;
      goto LABEL_58;
    case 0x3Eu:
      char v2 = 32;
      goto LABEL_58;
    case 0x3Fu:
      char v2 = 33;
      goto LABEL_58;
    case 0x40u:
      char v2 = 34;
      goto LABEL_58;
    case 0x41u:
      char v2 = 35;
      goto LABEL_58;
    case 0x42u:
      char v2 = 36;
      goto LABEL_58;
    case 0x43u:
      char v2 = 37;
      goto LABEL_58;
    case 0x44u:
      char v2 = 38;
      goto LABEL_58;
    case 0x45u:
      char v2 = 39;
      goto LABEL_58;
    case 0x46u:
      char v2 = 40;
      goto LABEL_58;
    case 0x47u:
      char v2 = 41;
      goto LABEL_58;
    case 0x48u:
      char v2 = 42;
      goto LABEL_58;
    case 0x49u:
      char v2 = 43;
      goto LABEL_58;
    case 0x4Au:
      char v2 = 44;
      goto LABEL_58;
    case 0x4Bu:
      char v2 = 45;
      goto LABEL_58;
    case 0x4Cu:
      char v2 = 46;
      goto LABEL_58;
    case 0x4Du:
      char v2 = 47;
      goto LABEL_58;
    case 0x80u:
      char v2 = 48;
      goto LABEL_58;
    case 0x81u:
      char v2 = 49;
      goto LABEL_58;
    case 0x82u:
      char v2 = 50;
      goto LABEL_58;
    case 0x83u:
      char v2 = 51;
      goto LABEL_58;
    case 0x84u:
      char v2 = 52;
      goto LABEL_58;
    case 0x85u:
      char v2 = 53;
      goto LABEL_58;
    case 0x86u:
      char v2 = 54;
      goto LABEL_58;
    case 0x87u:
      char v2 = 55;
      goto LABEL_58;
    case 0x88u:
      char v2 = 56;
LABEL_58:
      char v3 = v2;
      goto LABEL_59;
    case 0x8Au:
LABEL_59:
      char *v1 = v3;
      break;
    case 0x8Bu:
      char *v1 = 58;
      break;
    case 0x8Cu:
      char *v1 = 59;
      break;
    case 0x8Du:
      char *v1 = 60;
      break;
    case 0x8Eu:
      char *v1 = 61;
      break;
    case 0x8Fu:
      char *v1 = 62;
      break;
    case 0x90u:
      char *v1 = 63;
      break;
    case 0x91u:
      char *v1 = 64;
      break;
    case 0x92u:
      char *v1 = 65;
      break;
    case 0x93u:
      char *v1 = 66;
      break;
    case 0x94u:
      char *v1 = 67;
      break;
    case 0x95u:
      char *v1 = 68;
      break;
    case 0xC2u:
      char *v1 = 69;
      break;
    case 0xCCu:
      char *v1 = 70;
      break;
    case 0xCFu:
      char *v1 = 71;
      break;
    case 0xDDu:
      char *v1 = 72;
      break;
    case 0xDFu:
      char *v1 = 73;
      break;
    case 0xFFu:
      char *v1 = 74;
      break;
    default:
      char *v1 = 75;
      break;
  }
  return (CoreHID::HIDUsage::AuxiliaryDisplayUsage_optional)rawValue;
}

CoreHID::HIDUsage::SensorsUsage_optional __swiftcall HIDUsage.SensorsUsage.init(rawValue:)(CoreHID::HIDUsage::SensorsUsage_optional rawValue)
{
  __int16 v2 = 0;
  switch(rawValue.value)
  {
    case CoreHID_HIDUsage_SensorsUsage_biometric:
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_electricalResistance:
      __int16 v2 = 1;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_electricalVoltage:
      __int16 v2 = 2;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_electricalPotentiometer:
      __int16 v2 = 3;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_electricalFrequency:
      __int16 v2 = 4;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_electricalPeriod:
      __int16 v2 = 5;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_environmental:
      __int16 v2 = 6;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_environmentalAtmosphericPressure:
      __int16 v2 = 7;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_environmentalHumidity:
      __int16 v2 = 8;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_environmentalTemperature:
      __int16 v2 = 9;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_environmentalWindDirection:
      __int16 v2 = 10;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_environmentalObjectProximity:
      __int16 v2 = 11;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_light:
      __int16 v2 = 12;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_lightAmbientLight:
      __int16 v2 = 13;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_lightConsumerInfrared:
      __int16 v2 = 14;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_lightInfraredLight:
      __int16 v2 = 15;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_lightVisibleLight:
      __int16 v2 = 16;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_lightUltravioletLight:
      __int16 v2 = 17;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_location:
      __int16 v2 = 18;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_locationBroadcast:
      __int16 v2 = 19;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_locationDeadReckoning:
      __int16 v2 = 20;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalBooleanSwitch:
      __int16 v2 = 21;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalBooleanSwitchArray:
      __int16 v2 = 22;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalMultivalueSwitch:
      __int16 v2 = 23;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalForce:
      __int16 v2 = 24;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalPressure:
      __int16 v2 = 25;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalStrain:
      __int16 v2 = 26;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalWeight:
      __int16 v2 = 27;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalHapticVibrator:
      __int16 v2 = 28;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_mechanicalHallEffectSwitch:
      __int16 v2 = 29;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motion:
      __int16 v2 = 30;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motionAccelerometer1D:
      __int16 v2 = 31;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motionAccelerometer2D:
      __int16 v2 = 32;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motionMotionDetector:
      __int16 v2 = 33;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motionSpeedometer:
      __int16 v2 = 34;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motionAccelerometer:
      __int16 v2 = 35;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motionGyrometer:
      __int16 v2 = 36;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motionGravityVector:
      __int16 v2 = 37;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_motionLinearAccelerometer:
      __int16 v2 = 38;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationDeviceOrientation:
      __int16 v2 = 39;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationCompass:
      __int16 v2 = 40;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationInclinometer:
      __int16 v2 = 41;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationDistance:
      __int16 v2 = 42;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationRelativeOrientation:
      __int16 v2 = 43;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationSimpleOrientation:
      __int16 v2 = 44;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_scanner:
      __int16 v2 = 45;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_scannerBarcode:
      __int16 v2 = 46;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_personalActivityPedometer:
      __int16 v2 = 47;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_personalActivityStepDetection:
      __int16 v2 = 48;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationExtended:
      __int16 v2 = 49;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationExtendedGeomagneticOrientation:
      __int16 v2 = 50;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_orientationExtendedMagnetometer:
      __int16 v2 = 51;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_gesture:
      __int16 v2 = 52;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_gestureChassisFlipGesture:
      __int16 v2 = 53;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_gestureHingeFoldGesture:
      __int16 v2 = 54;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_other:
      __int16 v2 = 55;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_otherCustom:
      __int16 v2 = 56;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved4:
      __int16 v2 = 57;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved5:
      __int16 v2 = 58;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved6:
      __int16 v2 = 59;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved7:
      __int16 v2 = 60;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved8:
      __int16 v2 = 61;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved9:
      __int16 v2 = 62;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved10:
      __int16 v2 = 63;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved11:
      __int16 v2 = 64;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved12:
      __int16 v2 = 65;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved13:
      __int16 v2 = 66;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved14:
      __int16 v2 = 67;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved15:
      __int16 v2 = 68;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_vendorReserved16:
      __int16 v2 = 69;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_property:
      __int16 v2 = 70;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyFriendlyName:
      __int16 v2 = 71;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyPersistentUniqueID:
      __int16 v2 = 72;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertySensorStatus:
      __int16 v2 = 73;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyMinimumReportInterval:
      __int16 v2 = 74;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertySensorManufacturer:
      __int16 v2 = 75;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertySensorModel:
      __int16 v2 = 76;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertySensorSerialNumber:
      __int16 v2 = 77;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertySensorDescription:
      __int16 v2 = 78;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertySensorConnectionType:
      __int16 v2 = 79;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertySensorDevicePath:
      __int16 v2 = 80;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyHardwareRevision:
      __int16 v2 = 81;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyFirmwareVersion:
      __int16 v2 = 82;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyReleaseDate:
      __int16 v2 = 83;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyReportInterval:
      __int16 v2 = 84;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyChangeSensitivityAbsolute:
      __int16 v2 = 85;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyChangeSensitivityPercentOfRange:
      __int16 v2 = 86;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyChangeSensitivityPercentRelative:
      __int16 v2 = 87;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyAccuracy:
      __int16 v2 = 88;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_propertyResolution:
      __int16 v2 = 89;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldLocation:
      __int16 v2 = 90;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldAltitudeAntennaSeaLevel:
      __int16 v2 = 91;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldDifferentialReferenceStationID:
      __int16 v2 = 92;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldHorizontalDilutionOfPrecision:
      __int16 v2 = 93;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldVerticalDilutionOfPrecision:
      __int16 v2 = 94;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldLatitude:
      __int16 v2 = 95;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldLongitude:
      __int16 v2 = 96;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldTrueHeading:
      __int16 v2 = 97;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldNMEASentence:
      __int16 v2 = 98;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldAddressLine1:
      __int16 v2 = 99;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldAddressLine2:
      __int16 v2 = 100;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldEquivalentCO2:
      __int16 v2 = 101;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldVolatileOrganicCompoundConcentration:
      __int16 v2 = 102;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldObjectPresence:
      __int16 v2 = 103;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldAngularVelocityAboutZAxis:
      __int16 v2 = 104;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldAngularPosition:
      __int16 v2 = 105;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldAngularPositionAboutXAxis:
      __int16 v2 = 106;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldAngularPositionAboutYAxis:
      __int16 v2 = 107;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldAngularPositionAboutZAxis:
      __int16 v2 = 108;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldDistance:
      __int16 v2 = 109;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldDistanceXAxis:
      __int16 v2 = 110;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldDistanceYAxis:
      __int16 v2 = 111;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldDistanceZAxis:
      __int16 v2 = 112;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldDistanceOutOfRange:
      __int16 v2 = 113;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldTilt:
      __int16 v2 = 114;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldTiltXAxis:
      __int16 v2 = 115;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldTiltYAxis:
      __int16 v2 = 116;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldTiltZAxis:
      __int16 v2 = 117;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldRotationMatrix:
      __int16 v2 = 118;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldQuaternion:
      __int16 v2 = 119;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldMagneticFlux:
      __int16 v2 = 120;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldMagneticFluxXAxis:
      __int16 v2 = 121;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldMagneticFluxYAxis:
      __int16 v2 = 122;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldMagneticFluxZAxis:
      __int16 v2 = 123;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_dataFieldMagnetometerAccuracy:
      __int16 v2 = 124;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_magnetometerAccuracyMedium:
      __int16 v2 = 125;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_magnetometerAccuracyHigh:
      __int16 v2 = 126;
      goto LABEL_131;
    case CoreHID_HIDUsage_SensorsUsage_simpleOrientationDirectionNotRotated:
      __int16 v2 = 127;
LABEL_131:
      __int16 v3 = v2;
LABEL_132:
      __int16 *v1 = v3;
      return rawValue;
    default:
      __int16 v2 = 128;
      switch(rawValue.value)
      {
        case 0x300:
          goto LABEL_131;
        case 0x301:
          __int16 v2 = 129;
          goto LABEL_131;
        case 0x302:
          __int16 v2 = 130;
          goto LABEL_131;
        case 0x303:
          __int16 v2 = 131;
          goto LABEL_131;
        case 0x304:
          __int16 v2 = 132;
          goto LABEL_131;
        case 0x305:
          __int16 v2 = 133;
          goto LABEL_131;
        case 0x306:
          __int16 v2 = 134;
          goto LABEL_131;
        case 0x307:
          __int16 v2 = 135;
          goto LABEL_131;
        case 0x308:
          __int16 v2 = 136;
          goto LABEL_131;
        case 0x309:
          __int16 v2 = 137;
          goto LABEL_131;
        case 0x30A:
          __int16 v2 = 138;
          goto LABEL_131;
        case 0x30B:
          __int16 v2 = 139;
          goto LABEL_131;
        case 0x30C:
          __int16 v2 = 140;
          goto LABEL_131;
        case 0x30D:
          __int16 v2 = 141;
          goto LABEL_131;
        case 0x30E:
          __int16 v2 = 142;
          goto LABEL_131;
        case 0x30F:
          __int16 v2 = 143;
          goto LABEL_131;
        case 0x310:
          __int16 v2 = 144;
          goto LABEL_131;
        case 0x311:
          __int16 v2 = 145;
          goto LABEL_131;
        case 0x312:
          __int16 v2 = 146;
          goto LABEL_131;
        case 0x313:
          __int16 v2 = 147;
          goto LABEL_131;
        case 0x314:
          __int16 v2 = 148;
          goto LABEL_131;
        case 0x315:
          __int16 v2 = 149;
          goto LABEL_131;
        case 0x316:
          __int16 v2 = 150;
          goto LABEL_131;
        case 0x317:
          __int16 v2 = 151;
          goto LABEL_131;
        case 0x318:
          __int16 v2 = 152;
          goto LABEL_131;
        case 0x319:
          __int16 v2 = 153;
          goto LABEL_131;
        case 0x31A:
          __int16 v2 = 154;
          goto LABEL_131;
        case 0x31B:
          __int16 v2 = 155;
          goto LABEL_131;
        case 0x31C:
          __int16 v2 = 156;
          goto LABEL_131;
        case 0x31D:
          __int16 v2 = 157;
          goto LABEL_131;
        case 0x31E:
          __int16 v2 = 158;
          goto LABEL_131;
        case 0x31F:
          __int16 v2 = 159;
          goto LABEL_131;
        case 0x400:
          __int16 v2 = 160;
          goto LABEL_131;
        case 0x402:
          __int16 v2 = 161;
          goto LABEL_131;
        case 0x403:
          __int16 v2 = 162;
          goto LABEL_131;
        case 0x404:
          __int16 v2 = 163;
          goto LABEL_131;
        case 0x405:
          __int16 v2 = 164;
          goto LABEL_131;
        case 0x406:
          __int16 v2 = 165;
          goto LABEL_131;
        case 0x407:
          __int16 v2 = 166;
          goto LABEL_131;
        case 0x408:
          __int16 v2 = 167;
          goto LABEL_131;
        case 0x409:
          __int16 v2 = 168;
          goto LABEL_131;
        case 0x40A:
          __int16 v2 = 169;
          goto LABEL_131;
        case 0x40B:
          __int16 v2 = 170;
          goto LABEL_131;
        case 0x40C:
          __int16 v2 = 171;
          goto LABEL_131;
        case 0x40D:
          __int16 v2 = 172;
          goto LABEL_131;
        case 0x40E:
          __int16 v2 = 173;
          goto LABEL_131;
        case 0x40F:
          __int16 v2 = 174;
          goto LABEL_131;
        case 0x410:
          __int16 v2 = 175;
          goto LABEL_131;
        case 0x411:
          __int16 v2 = 176;
          goto LABEL_131;
        case 0x412:
          __int16 v2 = 177;
          goto LABEL_131;
        case 0x413:
          __int16 v2 = 178;
          goto LABEL_131;
        case 0x414:
          __int16 v2 = 179;
          goto LABEL_131;
        case 0x415:
          __int16 v2 = 180;
          goto LABEL_131;
        case 0x416:
          __int16 v2 = 181;
          goto LABEL_131;
        case 0x417:
          __int16 v2 = 182;
          goto LABEL_131;
        case 0x418:
          __int16 v2 = 183;
          goto LABEL_131;
        case 0x419:
          __int16 v2 = 184;
          goto LABEL_131;
        case 0x41A:
          __int16 v2 = 185;
          goto LABEL_131;
        case 0x41B:
          __int16 v2 = 186;
          goto LABEL_131;
        case 0x41C:
          __int16 v2 = 187;
          goto LABEL_131;
        case 0x41D:
          __int16 v2 = 188;
          goto LABEL_131;
        case 0x41E:
          __int16 v2 = 189;
          goto LABEL_131;
        case 0x41F:
          __int16 v2 = 190;
          goto LABEL_131;
        case 0x420:
          __int16 v2 = 191;
          goto LABEL_131;
        default:
          __int16 v2 = 192;
          switch(rawValue.value)
          {
            case 0x421:
              goto LABEL_131;
            case 0x422:
              __int16 v2 = 193;
              goto LABEL_131;
            case 0x423:
              __int16 v2 = 194;
              goto LABEL_131;
            case 0x424:
              __int16 v2 = 195;
              goto LABEL_131;
            case 0x425:
              __int16 v2 = 196;
              goto LABEL_131;
            case 0x426:
              __int16 v2 = 197;
              goto LABEL_131;
            case 0x427:
              __int16 v2 = 198;
              goto LABEL_131;
            case 0x42A:
              __int16 v2 = 199;
              goto LABEL_131;
            case 0x42B:
              __int16 v2 = 200;
              goto LABEL_131;
            case 0x430:
              __int16 v2 = 201;
              goto LABEL_131;
            case 0x431:
              __int16 v2 = 202;
              goto LABEL_131;
            case 0x433:
              __int16 v2 = 203;
              goto LABEL_131;
            case 0x434:
              __int16 v2 = 204;
              goto LABEL_131;
            case 0x435:
              __int16 v2 = 205;
              goto LABEL_131;
            case 0x436:
              __int16 v2 = 206;
              goto LABEL_131;
            case 0x437:
              __int16 v2 = 207;
              goto LABEL_131;
            case 0x438:
              __int16 v2 = 208;
              goto LABEL_131;
            case 0x439:
              __int16 v2 = 209;
              goto LABEL_131;
            case 0x43A:
              __int16 v2 = 210;
              goto LABEL_131;
            case 0x43B:
              __int16 v2 = 211;
              goto LABEL_131;
            case 0x43C:
              __int16 v2 = 212;
              goto LABEL_131;
            case 0x440:
              __int16 v2 = 213;
              goto LABEL_131;
            case 0x441:
              __int16 v2 = 214;
              goto LABEL_131;
            case 0x450:
              __int16 v2 = 215;
              goto LABEL_131;
            case 0x451:
              __int16 v2 = 216;
              goto LABEL_131;
            case 0x452:
              __int16 v2 = 217;
              goto LABEL_131;
            case 0x453:
              __int16 v2 = 218;
              goto LABEL_131;
            case 0x454:
              __int16 v2 = 219;
              goto LABEL_131;
            case 0x455:
              __int16 v2 = 220;
              goto LABEL_131;
            case 0x456:
              __int16 v2 = 221;
              goto LABEL_131;
            case 0x457:
              __int16 v2 = 222;
              goto LABEL_131;
            case 0x458:
              __int16 v2 = 223;
              goto LABEL_131;
            case 0x459:
              __int16 v2 = 224;
              goto LABEL_131;
            case 0x45A:
              __int16 v2 = 225;
              goto LABEL_131;
            case 0x45B:
              __int16 v2 = 226;
              goto LABEL_131;
            case 0x45C:
              __int16 v2 = 227;
              goto LABEL_131;
            case 0x45D:
              __int16 v2 = 228;
              goto LABEL_131;
            case 0x45E:
              __int16 v2 = 229;
              goto LABEL_131;
            case 0x45F:
              __int16 v2 = 230;
              goto LABEL_131;
            case 0x470:
              __int16 v2 = 231;
              goto LABEL_131;
            case 0x471:
              __int16 v2 = 232;
              goto LABEL_131;
            case 0x472:
              __int16 v2 = 233;
              goto LABEL_131;
            case 0x473:
              __int16 v2 = 234;
              goto LABEL_131;
            case 0x474:
              __int16 v2 = 235;
              goto LABEL_131;
            case 0x475:
              __int16 v2 = 236;
              goto LABEL_131;
            case 0x476:
              __int16 v2 = 237;
              goto LABEL_131;
            case 0x477:
              __int16 v2 = 238;
              goto LABEL_131;
            case 0x478:
              __int16 v2 = 239;
              goto LABEL_131;
            case 0x479:
              __int16 v2 = 240;
              goto LABEL_131;
            case 0x47A:
              __int16 v2 = 241;
              goto LABEL_131;
            case 0x47B:
              __int16 v2 = 242;
              goto LABEL_131;
            case 0x47C:
              __int16 v2 = 243;
              goto LABEL_131;
            case 0x47D:
              __int16 v2 = 244;
              goto LABEL_131;
            case 0x47E:
              __int16 v2 = 245;
              goto LABEL_131;
            case 0x47F:
              __int16 v2 = 246;
              goto LABEL_131;
            case 0x480:
              __int16 v2 = 247;
              goto LABEL_131;
            case 0x481:
              __int16 v2 = 248;
              goto LABEL_131;
            case 0x482:
              __int16 v2 = 249;
              goto LABEL_131;
            case 0x483:
              __int16 v2 = 250;
              goto LABEL_131;
            case 0x484:
              __int16 v2 = 251;
              goto LABEL_131;
            case 0x485:
              __int16 v2 = 252;
              goto LABEL_131;
            case 0x486:
              __int16 v2 = 253;
              goto LABEL_131;
            case 0x487:
              __int16 v2 = 254;
              goto LABEL_131;
            case 0x488:
              __int16 v2 = 255;
              goto LABEL_131;
            default:
              __int16 v2 = 256;
              switch(rawValue.value)
              {
                case 0x489:
                  goto LABEL_131;
                case 0x490:
                  __int16 v2 = 257;
                  goto LABEL_131;
                case 0x491:
                  __int16 v2 = 258;
                  goto LABEL_131;
                case 0x492:
                  __int16 v2 = 259;
                  goto LABEL_131;
                case 0x493:
                  __int16 v2 = 260;
                  goto LABEL_131;
                case 0x494:
                  __int16 v2 = 261;
                  goto LABEL_131;
                case 0x495:
                  __int16 v2 = 262;
                  goto LABEL_131;
                case 0x496:
                  __int16 v2 = 263;
                  goto LABEL_131;
                case 0x497:
                  __int16 v2 = 264;
                  goto LABEL_131;
                case 0x498:
                  __int16 v2 = 265;
                  goto LABEL_131;
                case 0x4A0:
                  __int16 v2 = 266;
                  goto LABEL_131;
                case 0x4A1:
                  __int16 v2 = 267;
                  goto LABEL_131;
                case 0x4A2:
                  __int16 v2 = 268;
                  goto LABEL_131;
                case 0x4A3:
                  __int16 v2 = 269;
                  goto LABEL_131;
                case 0x4B0:
                  __int16 v2 = 270;
                  goto LABEL_131;
                case 0x4B1:
                  __int16 v2 = 271;
                  goto LABEL_131;
                case 0x4B2:
                  __int16 v2 = 272;
                  goto LABEL_131;
                case 0x4B3:
                  __int16 v2 = 273;
                  goto LABEL_131;
                case 0x4B4:
                  __int16 v2 = 274;
                  goto LABEL_131;
                case 0x4B5:
                  __int16 v2 = 275;
                  goto LABEL_131;
                case 0x4B6:
                  __int16 v2 = 276;
                  goto LABEL_131;
                case 0x4B7:
                  __int16 v2 = 277;
                  goto LABEL_131;
                case 0x4B8:
                  __int16 v2 = 278;
                  goto LABEL_131;
                case 0x4B9:
                  __int16 v2 = 279;
                  goto LABEL_131;
                case 0x4BA:
                  __int16 v2 = 280;
                  goto LABEL_131;
                case 0x4BB:
                  __int16 v2 = 281;
                  goto LABEL_131;
                case 0x4BC:
                  __int16 v2 = 282;
                  goto LABEL_131;
                case 0x4BD:
                  __int16 v2 = 283;
                  goto LABEL_131;
                case 0x4D0:
                  __int16 v2 = 284;
                  goto LABEL_131;
                case 0x4D1:
                  __int16 v2 = 285;
                  goto LABEL_131;
                case 0x4D2:
                  __int16 v2 = 286;
                  goto LABEL_131;
                case 0x4D3:
                  __int16 v2 = 287;
                  goto LABEL_131;
                case 0x4D4:
                  __int16 v2 = 288;
                  goto LABEL_131;
                case 0x4D5:
                  __int16 v2 = 289;
                  goto LABEL_131;
                case 0x4D6:
                  __int16 v2 = 290;
                  goto LABEL_131;
                case 0x4D7:
                  __int16 v2 = 291;
                  goto LABEL_131;
                case 0x4D8:
                  __int16 v2 = 292;
                  goto LABEL_131;
                case 0x4D9:
                  __int16 v2 = 293;
                  goto LABEL_131;
                case 0x4DA:
                  __int16 v2 = 294;
                  goto LABEL_131;
                case 0x4DB:
                  __int16 v2 = 295;
                  goto LABEL_131;
                case 0x4DC:
                  __int16 v2 = 296;
                  goto LABEL_131;
                case 0x4DD:
                  __int16 v2 = 297;
                  goto LABEL_131;
                case 0x4DE:
                  __int16 v2 = 298;
                  goto LABEL_131;
                case 0x4DF:
                  __int16 v2 = 299;
                  goto LABEL_131;
                case 0x4E0:
                  __int16 v2 = 300;
                  goto LABEL_131;
                case 0x4E2:
                  __int16 v2 = 301;
                  goto LABEL_131;
                case 0x4E3:
                  __int16 v2 = 302;
                  goto LABEL_131;
                case 0x4F0:
                  __int16 v2 = 303;
                  goto LABEL_131;
                case 0x4F1:
                  __int16 v2 = 304;
                  goto LABEL_131;
                case 0x4F2:
                  __int16 v2 = 305;
                  goto LABEL_131;
                case 0x4F8:
                  __int16 v2 = 306;
                  goto LABEL_131;
                case 0x4F9:
                  __int16 v2 = 307;
                  goto LABEL_131;
                case 0x500:
                  __int16 v2 = 308;
                  goto LABEL_131;
                case 0x501:
                  __int16 v2 = 309;
                  goto LABEL_131;
                case 0x502:
                  __int16 v2 = 310;
                  goto LABEL_131;
                case 0x503:
                  __int16 v2 = 311;
                  goto LABEL_131;
                case 0x504:
                  __int16 v2 = 312;
                  goto LABEL_131;
                case 0x505:
                  __int16 v2 = 313;
                  goto LABEL_131;
                case 0x506:
                  __int16 v2 = 314;
                  goto LABEL_131;
                case 0x507:
                  __int16 v2 = 315;
                  goto LABEL_131;
                case 0x508:
                  __int16 v2 = 316;
                  goto LABEL_131;
                case 0x509:
                  __int16 v2 = 317;
                  goto LABEL_131;
                case 0x520:
                  __int16 v2 = 318;
                  goto LABEL_131;
                case 0x521:
                  __int16 v2 = 319;
                  goto LABEL_131;
                default:
                  __int16 v2 = 320;
                  switch(rawValue.value)
                  {
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldConsumerIRSentenceReceive|0x400:
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldInfraredLight|0x400:
                      __int16 v2 = 321;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldRedLight|0x400:
                      __int16 v2 = 322;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldGreenLight|0x400:
                      __int16 v2 = 323;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldBlueLight|0x400:
                      __int16 v2 = 324;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldUltravioletALight|0x400:
                      __int16 v2 = 325;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldUltravioletBLight|0x400:
                      __int16 v2 = 326;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldUltravioletIndex|0x400:
                      __int16 v2 = 327;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldNearInfraredLight|0x400:
                      __int16 v2 = 328;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyLight|0x400:
                      __int16 v2 = 329;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldRFIDTag40Bit|0x400:
                      __int16 v2 = 330;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldNFCSentenceReceive|0x400:
                      __int16 v2 = 331;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyScanner|0x400:
                      __int16 v2 = 332;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyNFCSentenceSend|0x400:
                      __int16 v2 = 333;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldElectrical|0x400:
                      __int16 v2 = 334;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCapacitance|0x400:
                      __int16 v2 = 335;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldMonth|0x400:
                      __int16 v2 = 336;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldDay|0x400:
                      __int16 v2 = 337;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldDayOfWeek|0x400:
                      __int16 v2 = 338;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldHour|0x400:
                      __int16 v2 = 339;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldMinute|0x400:
                      __int16 v2 = 340;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldSecond|0x400:
                      __int16 v2 = 341;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldMillisecond|0x400:
                      __int16 v2 = 342;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldTimestamp|0x400:
                      __int16 v2 = 343;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldJulianDayOfYear|0x400:
                      __int16 v2 = 344;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldTimeSinceSystemBoot|0x400:
                      __int16 v2 = 345;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyTime|0x400:
                      __int16 v2 = 346;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyTimeZoneOffsetFromUTC|0x400:
                      __int16 v2 = 347;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyTimeZoneName|0x400:
                      __int16 v2 = 348;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyDaylightSavingsTimeObserved|0x400:
                      __int16 v2 = 349;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyTimeTrimAdjustment|0x400:
                      __int16 v2 = 350;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_propertyArmAlarm|0x400:
                      __int16 v2 = 351;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustom|0x400:
                      __int16 v2 = 352;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomUsage|0x400:
                      __int16 v2 = 353;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomBooleanArray|0x400:
                      __int16 v2 = 354;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue|0x400:
                      __int16 v2 = 355;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue1|0x400:
                      __int16 v2 = 356;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue2|0x400:
                      __int16 v2 = 357;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue3|0x400:
                      __int16 v2 = 358;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue4|0x400:
                      __int16 v2 = 359;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue5|0x400:
                      __int16 v2 = 360;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue6|0x400:
                      __int16 v2 = 361;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue7|0x400:
                      __int16 v2 = 362;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue8|0x400:
                      __int16 v2 = 363;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue9|0x400:
                      __int16 v2 = 364;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue10|0x400:
                      __int16 v2 = 365;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue11|0x400:
                      __int16 v2 = 366;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue12|0x400:
                      __int16 v2 = 367;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue13|0x400:
                      __int16 v2 = 368;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue14|0x400:
                      __int16 v2 = 369;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue15|0x400:
                      __int16 v2 = 370;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue16|0x400:
                      __int16 v2 = 371;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue17|0x400:
                      __int16 v2 = 372;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue18|0x400:
                      __int16 v2 = 373;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue19|0x400:
                      __int16 v2 = 374;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue20|0x400:
                      __int16 v2 = 375;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue21|0x400:
                      __int16 v2 = 376;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue22|0x400:
                      __int16 v2 = 377;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue23|0x400:
                      __int16 v2 = 378;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue24|0x400:
                      __int16 v2 = 379;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue25|0x400:
                      __int16 v2 = 380;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue26|0x400:
                      __int16 v2 = 381;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue27|0x400:
                      __int16 v2 = 382;
                      goto LABEL_131;
                    case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue28|0x400:
                      __int16 v2 = 383;
                      goto LABEL_131;
                    default:
                      __int16 v2 = 384;
                      switch(rawValue.value)
                      {
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGeneric|0x400:
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericGUIDOrPropertyKey|0x400:
                          __int16 v2 = 385;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericCategoryGUID|0x400:
                          __int16 v2 = 386;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericTypeGUID|0x400:
                          __int16 v2 = 387;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericEventPropertyKey|0x400:
                          __int16 v2 = 388;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericPropertyPropertyKey|0x400:
                          __int16 v2 = 389;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericDataFieldPropertyKey|0x400:
                          __int16 v2 = 390;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericEvent|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericProperty|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericDataField|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldEnumeratorTableRowIndex|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldEnumeratorTableRowCount|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericGUIDOrPropertyKeyKind|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericGUID|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericPropertyKey|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericTopLevelCollectionID|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericUnitOfMeasure|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericUnitExponent|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericReportSize|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericReportCount|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyGeneric|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyEnumeratorTableRowIndex|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyEnumeratorTableRowCount|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldPersonalActivity|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldActivityType|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldActivityState|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldDevicePosition|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldStepCount|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldStepCountReset|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomTypeID|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustom|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue1|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue2|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue3|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue4|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue5|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue6|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue13|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue14|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue15|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue16|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldHinge|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldHingeAngle|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGestureSensor|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGestureState|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldHingeFoldInitialAngle|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldHingeFoldFinalAngle|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldHingeFoldType|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorStateUndefined|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorStateReady|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorStateNotAvailable|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorStateNoData|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorStateInitializing|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorStateAccessDenied|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorStateError|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventUnknown|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventStateChanged|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventPropertyChanged|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventDataUpdated|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventPollResponse|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventChangeSensitivity|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventRangeMaximumReached|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_reportingStateWakeOnAllEvents|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_reportingStateWakeOnThresholdEvents|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_powerStateUndefined|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_powerStateD0FullPower|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_powerStateD1LowPower|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_powerStateD2StandbyPowerWithWakeup|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_powerStateD3SleepWithWakeup|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_powerStateD4PowerOff|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_accuracyDefault|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_accuracyHigh|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_accuracyMedium|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_accuracyLow|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixQualityNoFix|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixQualityGPS|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixQualityDGPS|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeDGPSSPSModeFixValid|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeGPSPPSModeFixValid|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeRealTimeKinematic|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeFloatRTK|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeEstimatedDeadReckoned|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeManualInputMode|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeSimulatorMode|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_gpsOperationModeManual|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_gpsOperationModeAutomatic|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_gpsSelectionModeAutonomous|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_gpsSelectionModeDGPS|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_gpsSelectionModeEstimatedDeadReckoned|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_gpsSelectionModeManualInput|0x400:
                        case CoreHID_HIDUsage_SensorsUsage_gpsSelectionModeSimulator|0x400:
                          goto LABEL_452;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericReportID|0x400:
                          __int16 v2 = 391;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericReportItemPositionIndex|0x400:
                          __int16 v2 = 392;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericFirmwareVARTYPE|0x400:
                          __int16 v2 = 393;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldStepDuration|0x400:
                          __int16 v2 = 394;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldStepType|0x400:
                          __int16 v2 = 395;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertyMinimumActivityDetectionInterval|0x400:
                          __int16 v2 = 396;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertySupportedActivityTypes|0x400:
                          __int16 v2 = 397;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertySubscribedActivityTypes|0x400:
                          __int16 v2 = 398;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertySupportedStepTypes|0x400:
                          __int16 v2 = 399;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertySubscribedStepTypes|0x400:
                          __int16 v2 = 400;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertyFloorHeight|0x400:
                          __int16 v2 = 401;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue7|0x400:
                          __int16 v2 = 402;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue8|0x400:
                          __int16 v2 = 403;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue9|0x400:
                          __int16 v2 = 404;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue10|0x400:
                          __int16 v2 = 405;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue11|0x400:
                          __int16 v2 = 406;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue12|0x400:
                          __int16 v2 = 407;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dataFieldHingeFoldContributingPanel|0x400:
                          __int16 v2 = 408;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventRangeMinimumReached|0x400:
                          __int16 v2 = 409;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventHighThresholdCrossUpward|0x400:
                          __int16 v2 = 410;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventHighThresholdCrossDownward|0x400:
                          __int16 v2 = 411;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventLowThresholdCrossUpward|0x400:
                          __int16 v2 = 412;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventLowThresholdCrossDownward|0x400:
                          __int16 v2 = 413;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventZeroThresholdCrossUpward|0x400:
                          __int16 v2 = 414;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventZeroThresholdCrossDownward|0x400:
                          __int16 v2 = 415;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventPeriodExceeded|0x400:
                          __int16 v2 = 416;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventFrequencyExceeded|0x400:
                          __int16 v2 = 417;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_sensorEventComplexTrigger|0x400:
                          __int16 v2 = 418;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_connectionTypePCIntegrated|0x400:
                          __int16 v2 = 419;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_connectionTypePCAttached|0x400:
                          __int16 v2 = 420;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_connectionTypePCExternal|0x400:
                          __int16 v2 = 421;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_reportingStateReportNoEvents|0x400:
                          __int16 v2 = 422;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_reportingStateReportAllEvents|0x400:
                          __int16 v2 = 423;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_reportingStateReportThresholdEvents|0x400:
                          __int16 v2 = 424;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_reportingStateWakeOnNoEvents|0x400:
                          __int16 v2 = 425;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeNoFix|0x400:
                          __int16 v2 = 426;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_fixTypeGPSSPSModeFixValid|0x400:
                          __int16 v2 = 427;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_gpsSelectionModeDataNotValid|0x400:
                          __int16 v2 = 428;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_gpsStatusDataValid|0x400:
                          __int16 v2 = 429;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_gpsStatusDataNotValid|0x400:
                          __int16 v2 = 430;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dayOfWeekSunday|0x400:
                          __int16 v2 = 431;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dayOfWeekMonday|0x400:
                          __int16 v2 = 432;
                          goto LABEL_131;
                        case CoreHID_HIDUsage_SensorsUsage_dayOfWeekTuesday|0x400:
                          __int16 v2 = 433;
                          goto LABEL_131;
                        default:
                          switch(rawValue.value)
                          {
                            case 0x800:
                              __int16 v2 = 434;
                              goto LABEL_131;
                            case 0x801:
                              __int16 v2 = 435;
                              goto LABEL_131;
                            case 0x802:
                              __int16 v2 = 436;
                              goto LABEL_131;
                            case 0x803:
                              __int16 v2 = 437;
                              goto LABEL_131;
                            case 0x804:
                              __int16 v2 = 438;
                              goto LABEL_131;
                            case 0x805:
                              __int16 v2 = 439;
                              goto LABEL_131;
                            case 0x806:
                              __int16 v2 = 440;
                              goto LABEL_131;
                            case 0x810:
                              __int16 v2 = 441;
                              goto LABEL_131;
                            case 0x811:
                              __int16 v2 = 442;
                              goto LABEL_131;
                            case 0x812:
                              __int16 v2 = 443;
                              goto LABEL_131;
                            case 0x813:
                              __int16 v2 = 444;
                              goto LABEL_131;
                            case 0x814:
                              __int16 v2 = 445;
                              goto LABEL_131;
                            case 0x815:
                              __int16 v2 = 446;
                              goto LABEL_131;
                            case 0x816:
                              __int16 v2 = 447;
                              goto LABEL_131;
                            default:
                              goto LABEL_452;
                          }
                      }
                  }
              }
          }
      }
  }
LABEL_452:
  __int16 v2 = 448;
  switch(rawValue.value)
  {
    case 0x817:
      goto LABEL_131;
    case 0x818:
      __int16 v2 = 449;
      goto LABEL_131;
    case 0x819:
      __int16 v2 = 450;
      goto LABEL_131;
    case 0x81A:
      __int16 v2 = 451;
      goto LABEL_131;
    case 0x81B:
      __int16 v2 = 452;
      goto LABEL_131;
    case 0x81C:
      __int16 v2 = 453;
      goto LABEL_131;
    case 0x81D:
      __int16 v2 = 454;
      goto LABEL_131;
    case 0x81E:
      __int16 v2 = 455;
      goto LABEL_131;
    case 0x81F:
      __int16 v2 = 456;
      goto LABEL_131;
    case 0x820:
      __int16 v2 = 457;
      goto LABEL_131;
    case 0x830:
      __int16 v2 = 458;
      goto LABEL_131;
    case 0x831:
      __int16 v2 = 459;
      goto LABEL_131;
    case 0x832:
      __int16 v2 = 460;
      goto LABEL_131;
    case 0x840:
      __int16 v2 = 461;
      goto LABEL_131;
    case 0x841:
      __int16 v2 = 462;
      goto LABEL_131;
    case 0x842:
      __int16 v2 = 463;
      goto LABEL_131;
    case 0x843:
      __int16 v2 = 464;
      goto LABEL_131;
    case 0x844:
      __int16 v2 = 465;
      goto LABEL_131;
    case 0x845:
      __int16 v2 = 466;
      goto LABEL_131;
    case 0x850:
      __int16 v2 = 467;
      goto LABEL_131;
    case 0x851:
      __int16 v2 = 468;
      goto LABEL_131;
    case 0x852:
      __int16 v2 = 469;
      goto LABEL_131;
    case 0x853:
      __int16 v2 = 470;
      goto LABEL_131;
    case 0x854:
      __int16 v2 = 471;
      goto LABEL_131;
    case 0x855:
      __int16 v2 = 472;
      goto LABEL_131;
    case 0x860:
      __int16 v2 = 473;
      goto LABEL_131;
    case 0x861:
      __int16 v2 = 474;
      goto LABEL_131;
    case 0x862:
      __int16 v2 = 475;
      goto LABEL_131;
    case 0x863:
      __int16 v2 = 476;
      goto LABEL_131;
    case 0x870:
      __int16 v2 = 477;
      goto LABEL_131;
    case 0x871:
      __int16 v2 = 478;
      goto LABEL_131;
    case 0x872:
      __int16 v2 = 479;
      goto LABEL_131;
    case 0x880:
      __int16 v2 = 480;
      goto LABEL_131;
    case 0x881:
      __int16 v2 = 481;
      goto LABEL_131;
    case 0x882:
      __int16 v2 = 482;
      goto LABEL_131;
    case 0x883:
      __int16 v2 = 483;
      goto LABEL_131;
    case 0x884:
      __int16 v2 = 484;
      goto LABEL_131;
    case 0x885:
      __int16 v2 = 485;
      goto LABEL_131;
    case 0x886:
      __int16 v2 = 486;
      goto LABEL_131;
    case 0x887:
      __int16 v2 = 487;
      goto LABEL_131;
    case 0x888:
      __int16 v2 = 488;
      goto LABEL_131;
    case 0x890:
      __int16 v2 = 489;
      goto LABEL_131;
    case 0x891:
      __int16 v2 = 490;
      goto LABEL_131;
    case 0x8A0:
      __int16 v2 = 491;
      goto LABEL_131;
    case 0x8A1:
      __int16 v2 = 492;
      goto LABEL_131;
    case 0x8A2:
      __int16 v2 = 493;
      goto LABEL_131;
    case 0x8A3:
      __int16 v2 = 494;
      goto LABEL_131;
    case 0x8A4:
      __int16 v2 = 495;
      goto LABEL_131;
    case 0x8A5:
      __int16 v2 = 496;
      goto LABEL_131;
    case 0x8B0:
      __int16 v2 = 497;
      goto LABEL_131;
    case 0x8B1:
      __int16 v2 = 498;
      goto LABEL_131;
    case 0x8C0:
      __int16 v2 = 499;
      goto LABEL_131;
    case 0x8C1:
      __int16 v2 = 500;
      goto LABEL_131;
    case 0x8C2:
      __int16 v2 = 501;
      goto LABEL_131;
    case 0x8C3:
      __int16 v2 = 502;
      goto LABEL_131;
    case 0x8C4:
      __int16 v2 = 503;
      goto LABEL_131;
    case 0x8C5:
      __int16 v2 = 504;
      goto LABEL_131;
    case 0x8C6:
      __int16 v2 = 505;
      goto LABEL_131;
    case 0x8D0:
      __int16 v2 = 506;
      goto LABEL_131;
    case 0x8D1:
      __int16 v2 = 507;
      goto LABEL_131;
    case 0x8D2:
      __int16 v2 = 508;
      goto LABEL_131;
    case 0x8D3:
      __int16 v2 = 509;
      goto LABEL_131;
    case 0x8D4:
      __int16 v2 = 510;
      goto LABEL_131;
    case 0x8E0:
      __int16 v2 = 511;
      goto LABEL_131;
    default:
      __int16 v2 = 512;
      switch(rawValue.value)
      {
        case 0x8E1:
          goto LABEL_131;
        case 0x8E2:
          __int16 v2 = 513;
          goto LABEL_131;
        case 0x8F0:
          __int16 v2 = 514;
          goto LABEL_131;
        case 0x8F1:
          __int16 v2 = 515;
          goto LABEL_131;
        case 0x8F2:
          __int16 v2 = 516;
          goto LABEL_131;
        case 0x8F3:
          __int16 v2 = 517;
          goto LABEL_131;
        case 0x8F4:
          __int16 v2 = 518;
          goto LABEL_131;
        case 0x8F5:
          __int16 v2 = 519;
          goto LABEL_131;
        case 0x900:
          __int16 v2 = 520;
          goto LABEL_131;
        case 0x901:
          __int16 v2 = 521;
          goto LABEL_131;
        case 0x902:
          __int16 v2 = 522;
          goto LABEL_131;
        case 0x903:
          __int16 v2 = 523;
          goto LABEL_131;
        case 0x904:
          __int16 v2 = 524;
          goto LABEL_131;
        case 0x905:
          __int16 v2 = 525;
          goto LABEL_131;
        case 0x906:
          __int16 v2 = 526;
          goto LABEL_131;
        case 0x907:
          __int16 v2 = 527;
          goto LABEL_131;
        case 0x908:
          __int16 v2 = 528;
          goto LABEL_131;
        case 0x909:
          __int16 v2 = 529;
          goto LABEL_131;
        case 0x90A:
          __int16 v2 = 530;
          goto LABEL_131;
        case 0x90B:
          __int16 v2 = 531;
          goto LABEL_131;
        case 0x90C:
          __int16 v2 = 532;
          goto LABEL_131;
        case 0x90D:
          __int16 v2 = 533;
          goto LABEL_131;
        case 0x90E:
          __int16 v2 = 534;
          goto LABEL_131;
        case 0x90F:
          __int16 v2 = 535;
          goto LABEL_131;
        case 0x910:
          __int16 v2 = 536;
          goto LABEL_131;
        case 0x911:
          __int16 v2 = 537;
          goto LABEL_131;
        case 0x912:
          __int16 v2 = 538;
          goto LABEL_131;
        case 0x913:
          __int16 v2 = 539;
          goto LABEL_131;
        case 0x914:
          __int16 v2 = 540;
          goto LABEL_131;
        case 0x915:
          __int16 v2 = 541;
          goto LABEL_131;
        case 0x916:
          __int16 v2 = 542;
          goto LABEL_131;
        case 0x917:
          __int16 v2 = 543;
          goto LABEL_131;
        case 0x918:
          __int16 v2 = 544;
          goto LABEL_131;
        case 0x919:
          __int16 v2 = 545;
          goto LABEL_131;
        case 0x91A:
          __int16 v2 = 546;
          goto LABEL_131;
        case 0x91B:
          __int16 v2 = 547;
          goto LABEL_131;
        case 0x91C:
          __int16 v2 = 548;
          goto LABEL_131;
        case 0x91D:
          __int16 v2 = 549;
          goto LABEL_131;
        case 0x91E:
          __int16 v2 = 550;
          goto LABEL_131;
        case 0x91F:
          __int16 v2 = 551;
          goto LABEL_131;
        case 0x920:
          __int16 v2 = 552;
          goto LABEL_131;
        case 0x921:
          __int16 v2 = 553;
          goto LABEL_131;
        case 0x922:
          __int16 v2 = 554;
          goto LABEL_131;
        case 0x923:
          __int16 v2 = 555;
          goto LABEL_131;
        case 0x924:
          __int16 v2 = 556;
          goto LABEL_131;
        case 0x925:
          __int16 v2 = 557;
          goto LABEL_131;
        case 0x926:
          __int16 v2 = 558;
          goto LABEL_131;
        case 0x927:
          __int16 v2 = 559;
          goto LABEL_131;
        case 0x928:
          __int16 v2 = 560;
          goto LABEL_131;
        case 0x929:
          __int16 v2 = 561;
          goto LABEL_131;
        case 0x92A:
          __int16 v2 = 562;
          goto LABEL_131;
        case 0x92B:
          __int16 v2 = 563;
          goto LABEL_131;
        case 0x92C:
          __int16 v2 = 564;
          goto LABEL_131;
        case 0x92D:
          __int16 v2 = 565;
          goto LABEL_131;
        case 0x92E:
          __int16 v2 = 566;
          goto LABEL_131;
        case 0x92F:
          __int16 v2 = 567;
          goto LABEL_131;
        case 0x930:
          __int16 v2 = 568;
          goto LABEL_131;
        case 0x931:
          __int16 v2 = 569;
          goto LABEL_131;
        case 0x932:
          __int16 v2 = 570;
          goto LABEL_131;
        case 0x933:
          __int16 v2 = 571;
          goto LABEL_131;
        case 0x934:
          __int16 v2 = 572;
          goto LABEL_131;
        case 0x935:
          __int16 v2 = 573;
          goto LABEL_131;
        case 0x936:
          __int16 v2 = 574;
          goto LABEL_131;
        case 0x937:
          __int16 v2 = 575;
          goto LABEL_131;
        default:
          __int16 v2 = 576;
          switch(rawValue.value)
          {
            case CoreHID_HIDUsage_SensorsUsage_dataFieldMonth|0x800:
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldDay|0x800:
              __int16 v2 = 577;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldDayOfWeek|0x800:
              __int16 v2 = 578;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldHour|0x800:
              __int16 v2 = 579;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldMinute|0x800:
              __int16 v2 = 580;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldSecond|0x800:
              __int16 v2 = 581;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldMillisecond|0x800:
              __int16 v2 = 582;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldTimestamp|0x800:
              __int16 v2 = 583;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldJulianDayOfYear|0x800:
              __int16 v2 = 584;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldTimeSinceSystemBoot|0x800:
              __int16 v2 = 585;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyTime|0x800:
              __int16 v2 = 586;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyTimeZoneOffsetFromUTC|0x800:
              __int16 v2 = 587;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyTimeZoneName|0x800:
              __int16 v2 = 588;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyDaylightSavingsTimeObserved|0x800:
              __int16 v2 = 589;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyTimeTrimAdjustment|0x800:
              __int16 v2 = 590;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyArmAlarm|0x800:
              __int16 v2 = 591;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustom|0x800:
              __int16 v2 = 592;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomUsage|0x800:
              __int16 v2 = 593;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomBooleanArray|0x800:
              __int16 v2 = 594;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue|0x800:
              __int16 v2 = 595;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue1|0x800:
              __int16 v2 = 596;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue2|0x800:
              __int16 v2 = 597;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue3|0x800:
              __int16 v2 = 598;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue4|0x800:
              __int16 v2 = 599;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue5|0x800:
              __int16 v2 = 600;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue6|0x800:
              __int16 v2 = 601;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue7|0x800:
              __int16 v2 = 602;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue8|0x800:
              __int16 v2 = 603;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue9|0x800:
              __int16 v2 = 604;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue10|0x800:
              __int16 v2 = 605;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue11|0x800:
              __int16 v2 = 606;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue13|0x800:
              __int16 v2 = 607;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue14|0x800:
              __int16 v2 = 608;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue15|0x800:
              __int16 v2 = 609;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGeneric|0x800:
              __int16 v2 = 610;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericGUIDOrPropertyKey|0x800:
              __int16 v2 = 611;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericCategoryGUID|0x800:
              __int16 v2 = 612;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericTypeGUID|0x800:
              __int16 v2 = 613;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericEventPropertyKey|0x800:
              __int16 v2 = 614;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericPropertyPropertyKey|0x800:
              __int16 v2 = 615;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericDataFieldPropertyKey|0x800:
              __int16 v2 = 616;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericEvent|0x800:
              __int16 v2 = 617;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericProperty|0x800:
              __int16 v2 = 618;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericDataField|0x800:
              __int16 v2 = 619;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldEnumeratorTableRowIndex|0x800:
              __int16 v2 = 620;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldEnumeratorTableRowCount|0x800:
              __int16 v2 = 621;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericGUIDOrPropertyKeyKind|0x800:
              __int16 v2 = 622;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericGUID|0x800:
              __int16 v2 = 623;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericPropertyKey|0x800:
              __int16 v2 = 624;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericTopLevelCollectionID|0x800:
              __int16 v2 = 625;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericReportID|0x800:
              __int16 v2 = 626;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericReportItemPositionIndex|0x800:
              __int16 v2 = 627;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericFirmwareVARTYPE|0x800:
              __int16 v2 = 628;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericUnitOfMeasure|0x800:
              __int16 v2 = 629;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericUnitExponent|0x800:
              __int16 v2 = 630;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldGenericReportSize|0x800:
              __int16 v2 = 631;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldStepDuration|0x800:
              __int16 v2 = 632;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldStepType|0x800:
              __int16 v2 = 633;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyMinimumActivityDetectionInterval|0x800:
              __int16 v2 = 634;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue7|0x800:
              __int16 v2 = 635;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue8|0x800:
              __int16 v2 = 636;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue9|0x800:
              __int16 v2 = 637;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_propertyCustomValue10|0x800:
              __int16 v2 = 638;
              goto LABEL_131;
            case CoreHID_HIDUsage_SensorsUsage_dataFieldHingeFoldContributingPanel|0x800:
              __int16 v2 = 639;
              goto LABEL_131;
            default:
              if ((unsigned __int16)rawValue.value >= 0x4000u)
              {
                if ((unsigned __int16)rawValue.value >= 0xA000u)
                {
                  if ((unsigned __int16)rawValue.value >= 0xD000u)
                  {
                    switch((unsigned __int16)rawValue.value)
                    {
                      case 0xD000u:
                        __int16 *v1 = 662;
                        return rawValue;
                      case 0xE000u:
                        __int16 *v1 = 663;
                        return rawValue;
                      case 0xF000u:
                        __int16 *v1 = 664;
                        return rawValue;
                    }
                  }
                  else
                  {
                    switch((unsigned __int16)rawValue.value)
                    {
                      case 0xA000u:
                        __int16 *v1 = 659;
                        return rawValue;
                      case 0xB000u:
                        __int16 *v1 = 660;
                        return rawValue;
                      case 0xC000u:
                        __int16 *v1 = 661;
                        return rawValue;
                    }
                  }
                }
                else if ((unsigned __int16)rawValue.value >= 0x7000u)
                {
                  switch((unsigned __int16)rawValue.value)
                  {
                    case 0x7000u:
                      __int16 *v1 = 656;
                      return rawValue;
                    case 0x8000u:
                      __int16 *v1 = 657;
                      return rawValue;
                    case 0x9000u:
                      __int16 *v1 = 658;
                      return rawValue;
                  }
                }
                else
                {
                  switch(rawValue.value)
                  {
                    case 0x4000:
                      __int16 *v1 = 653;
                      return rawValue;
                    case 0x5000:
                      __int16 *v1 = 654;
                      return rawValue;
                    case 0x6000:
                      __int16 *v1 = 655;
                      return rawValue;
                  }
                }
LABEL_671:
                __int16 *v1 = 665;
                return rawValue;
              }
              if ((unsigned __int16)rawValue.value > (CoreHID_HIDUsage_SensorsUsage_unknownDefault|CoreHID_HIDUsage_SensorsUsage_dataFieldCustomValue19|0xC00))
              {
                switch(rawValue.value)
                {
                  case 0x1000:
                    __int16 *v1 = 650;
                    return rawValue;
                  case 0x2000:
                    __int16 *v1 = 651;
                    return rawValue;
                  case 0x3000:
                    __int16 *v1 = 652;
                    return rawValue;
                }
                goto LABEL_671;
              }
              __int16 v3 = 647;
              __int16 v2 = 640;
              switch(rawValue.value)
              {
                case CoreHID_HIDUsage_SensorsUsage_dataFieldHingeFoldType|0x800:
                  goto LABEL_131;
                case CoreHID_HIDUsage_SensorsUsage_sensorStateUndefined|0x800:
                  __int16 v2 = 641;
                  goto LABEL_131;
                case CoreHID_HIDUsage_SensorsUsage_sensorStateReady|0x800:
                  __int16 v2 = 642;
                  goto LABEL_131;
                case CoreHID_HIDUsage_SensorsUsage_sensorStateNotAvailable|0x800:
                  __int16 v2 = 643;
                  goto LABEL_131;
                case CoreHID_HIDUsage_SensorsUsage_sensorStateNoData|0x800:
                  __int16 v2 = 644;
                  goto LABEL_131;
                case CoreHID_HIDUsage_SensorsUsage_sensorStateInitializing|0x800:
                  __int16 v2 = 645;
                  goto LABEL_131;
                case CoreHID_HIDUsage_SensorsUsage_sensorEventRangeMinimumReached|0x800:
                  __int16 v2 = 646;
                  goto LABEL_131;
                case CoreHID_HIDUsage_SensorsUsage_sensorEventHighThresholdCrossUpward|0x800:
                  goto LABEL_132;
                case CoreHID_HIDUsage_SensorsUsage_sensorEventHighThresholdCrossDownward|0x800:
                  __int16 *v1 = 648;
                  break;
                case CoreHID_HIDUsage_SensorsUsage_sensorEventLowThresholdCrossUpward|0x800:
                  __int16 *v1 = 649;
                  break;
                default:
                  goto LABEL_671;
              }
              return rawValue;
          }
      }
  }
}

CoreHID::HIDUsage::MedicalInstrumentUsage_optional __swiftcall HIDUsage.MedicalInstrumentUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 11;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_13;
    case 0x20u:
      char v2 = 1;
      goto LABEL_13;
    case 0x21u:
      char v2 = 2;
      goto LABEL_13;
    case 0x22u:
      char v2 = 3;
      goto LABEL_13;
    case 0x23u:
      char v2 = 4;
      goto LABEL_13;
    case 0x24u:
      char v2 = 5;
      goto LABEL_13;
    case 0x25u:
      char v2 = 6;
      goto LABEL_13;
    case 0x26u:
      char v2 = 7;
      goto LABEL_13;
    case 0x27u:
      char v2 = 8;
      goto LABEL_13;
    case 0x40u:
      char v2 = 9;
      goto LABEL_13;
    case 0x41u:
      char v2 = 10;
LABEL_13:
      char v3 = v2;
      goto LABEL_14;
    case 0x42u:
LABEL_14:
      char *v1 = v3;
      break;
    case 0x43u:
      char *v1 = 12;
      break;
    case 0x44u:
      char *v1 = 13;
      break;
    case 0x60u:
      char *v1 = 14;
      break;
    case 0x61u:
      char *v1 = 15;
      break;
    case 0x70u:
      char *v1 = 16;
      break;
    case 0x80u:
      char *v1 = 17;
      break;
    case 0x81u:
      char *v1 = 18;
      break;
    case 0x82u:
      char *v1 = 19;
      break;
    case 0x83u:
      char *v1 = 20;
      break;
    case 0x84u:
      char *v1 = 21;
      break;
    case 0x85u:
      char *v1 = 22;
      break;
    case 0x86u:
      char *v1 = 23;
      break;
    case 0x87u:
      char *v1 = 24;
      break;
    case 0x88u:
      char *v1 = 25;
      break;
    case 0x89u:
      char *v1 = 26;
      break;
    case 0xA0u:
      char *v1 = 27;
      break;
    case 0xA1u:
      char *v1 = 28;
      break;
    default:
      char *v1 = 29;
      break;
  }
  return (CoreHID::HIDUsage::MedicalInstrumentUsage_optional)rawValue;
}

CoreHID::HIDUsage::BrailleDisplayUsage_optional __swiftcall HIDUsage.BrailleDisplayUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  switch(rawValue)
  {
    case 0xFAu:
      unsigned char *v1 = 7;
      break;
    case 0xFBu:
      unsigned char *v1 = 8;
      break;
    case 0xFCu:
      unsigned char *v1 = 9;
      break;
    case 0x100u:
      unsigned char *v1 = 10;
      break;
    case 0x101u:
      unsigned char *v1 = 11;
      break;
    case 0x200u:
      unsigned char *v1 = 12;
      break;
    case 0x201u:
      unsigned char *v1 = 13;
      break;
    case 0x202u:
      unsigned char *v1 = 14;
      break;
    case 0x203u:
      unsigned char *v1 = 15;
      break;
    case 0x204u:
      unsigned char *v1 = 16;
      break;
    case 0x205u:
      unsigned char *v1 = 17;
      break;
    case 0x206u:
      unsigned char *v1 = 18;
      break;
    case 0x207u:
      unsigned char *v1 = 19;
      break;
    case 0x208u:
      unsigned char *v1 = 20;
      break;
    case 0x209u:
      unsigned char *v1 = 21;
      break;
    case 0x20Au:
      unsigned char *v1 = 22;
      break;
    case 0x20Bu:
      unsigned char *v1 = 23;
      break;
    case 0x20Cu:
      unsigned char *v1 = 24;
      break;
    case 0x20Du:
      unsigned char *v1 = 25;
      break;
    case 0x20Eu:
      unsigned char *v1 = 26;
      break;
    case 0x20Fu:
      unsigned char *v1 = 27;
      break;
    case 0x210u:
      unsigned char *v1 = 28;
      break;
    case 0x211u:
      unsigned char *v1 = 29;
      break;
    case 0x212u:
      unsigned char *v1 = 30;
      break;
    case 0x213u:
      unsigned char *v1 = 31;
      break;
    case 0x214u:
      unsigned char *v1 = 32;
      break;
    case 0x215u:
      unsigned char *v1 = 33;
      break;
    case 0x216u:
      unsigned char *v1 = 34;
      break;
    case 0x217u:
      unsigned char *v1 = 35;
      break;
    case 0x218u:
      unsigned char *v1 = 36;
      break;
    case 0x219u:
      unsigned char *v1 = 37;
      break;
    case 0x21Au:
      unsigned char *v1 = 38;
      break;
    case 0x21Bu:
      unsigned char *v1 = 39;
      break;
    case 0x21Cu:
      unsigned char *v1 = 40;
      break;
    case 0x21Du:
      unsigned char *v1 = 41;
      break;
    case 0x21Eu:
      unsigned char *v1 = 42;
      break;
    default:
      unsigned char *v1 = 43;
      break;
  }
  return (CoreHID::HIDUsage::BrailleDisplayUsage_optional)rawValue;
}

CoreHID::HIDUsage::LightingAndIlluminationUsage_optional __swiftcall HIDUsage.LightingAndIlluminationUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 15;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_16;
    case 2u:
      char v2 = 1;
      goto LABEL_16;
    case 3u:
      char v2 = 2;
      goto LABEL_16;
    case 4u:
      char v2 = 3;
      goto LABEL_16;
    case 5u:
      char v2 = 4;
      goto LABEL_16;
    case 6u:
      char v2 = 5;
      goto LABEL_16;
    case 7u:
      char v2 = 6;
      goto LABEL_16;
    case 8u:
      char v2 = 7;
      goto LABEL_16;
    case 0x20u:
      char v2 = 8;
      goto LABEL_16;
    case 0x21u:
      char v2 = 9;
      goto LABEL_16;
    case 0x22u:
      char v2 = 10;
      goto LABEL_16;
    case 0x23u:
      char v2 = 11;
      goto LABEL_16;
    case 0x24u:
      char v2 = 12;
      goto LABEL_16;
    case 0x25u:
      char v2 = 13;
      goto LABEL_16;
    case 0x26u:
      char v2 = 14;
LABEL_16:
      char v3 = v2;
      goto LABEL_17;
    case 0x27u:
LABEL_17:
      char *v1 = v3;
      break;
    case 0x28u:
      char *v1 = 16;
      break;
    case 0x29u:
      char *v1 = 17;
      break;
    case 0x2Au:
      char *v1 = 18;
      break;
    case 0x2Bu:
      char *v1 = 19;
      break;
    case 0x2Cu:
      char *v1 = 20;
      break;
    case 0x2Du:
      char *v1 = 21;
      break;
    case 0x50u:
      char *v1 = 22;
      break;
    case 0x51u:
      char *v1 = 23;
      break;
    case 0x52u:
      char *v1 = 24;
      break;
    case 0x53u:
      char *v1 = 25;
      break;
    case 0x54u:
      char *v1 = 26;
      break;
    case 0x55u:
      char *v1 = 27;
      break;
    case 0x60u:
      char *v1 = 28;
      break;
    case 0x61u:
      char *v1 = 29;
      break;
    case 0x62u:
      char *v1 = 30;
      break;
    case 0x70u:
      char *v1 = 31;
      break;
    case 0x71u:
      char *v1 = 32;
      break;
    default:
      char *v1 = 33;
      break;
  }
  return (CoreHID::HIDUsage::LightingAndIlluminationUsage_optional)rawValue;
}

CoreHID::HIDUsage::MonitorUsage_optional __swiftcall HIDUsage.MonitorUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  if (rawValue >= 5u) {
    char v2 = 4;
  }
  else {
    char v2 = 0x302010004uLL >> (8 * rawValue);
  }
  char *v1 = v2;
  return (CoreHID::HIDUsage::MonitorUsage_optional)rawValue;
}

CoreHID::HIDUsage::VESAVirtualControlsUsage_optional __swiftcall HIDUsage.VESAVirtualControlsUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 27;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_29;
    case 0x10u:
      char v2 = 1;
      goto LABEL_29;
    case 0x12u:
      char v2 = 2;
      goto LABEL_29;
    case 0x16u:
      char v2 = 3;
      goto LABEL_29;
    case 0x18u:
      char v2 = 4;
      goto LABEL_29;
    case 0x1Au:
      char v2 = 5;
      goto LABEL_29;
    case 0x1Cu:
      char v2 = 6;
      goto LABEL_29;
    case 0x20u:
      char v2 = 7;
      goto LABEL_29;
    case 0x22u:
      char v2 = 8;
      goto LABEL_29;
    case 0x24u:
      char v2 = 9;
      goto LABEL_29;
    case 0x26u:
      char v2 = 10;
      goto LABEL_29;
    case 0x28u:
      char v2 = 11;
      goto LABEL_29;
    case 0x2Au:
      char v2 = 12;
      goto LABEL_29;
    case 0x2Cu:
      char v2 = 13;
      goto LABEL_29;
    case 0x30u:
      char v2 = 14;
      goto LABEL_29;
    case 0x32u:
      char v2 = 15;
      goto LABEL_29;
    case 0x34u:
      char v2 = 16;
      goto LABEL_29;
    case 0x36u:
      char v2 = 17;
      goto LABEL_29;
    case 0x38u:
      char v2 = 18;
      goto LABEL_29;
    case 0x3Au:
      char v2 = 19;
      goto LABEL_29;
    case 0x3Cu:
      char v2 = 20;
      goto LABEL_29;
    case 0x40u:
      char v2 = 21;
      goto LABEL_29;
    case 0x42u:
      char v2 = 22;
      goto LABEL_29;
    case 0x44u:
      char v2 = 23;
      goto LABEL_29;
    case 0x46u:
      char v2 = 24;
      goto LABEL_29;
    case 0x48u:
      char v2 = 25;
      goto LABEL_29;
    case 0x4Au:
      char v2 = 26;
LABEL_29:
      char v3 = v2;
      goto LABEL_30;
    case 0x4Cu:
LABEL_30:
      char *v1 = v3;
      break;
    case 0x56u:
      char *v1 = 28;
      break;
    case 0x58u:
      char *v1 = 29;
      break;
    case 0x5Eu:
      char *v1 = 30;
      break;
    case 0x60u:
      char *v1 = 31;
      break;
    case 0x6Cu:
      char *v1 = 32;
      break;
    case 0x6Eu:
      char *v1 = 33;
      break;
    case 0x70u:
      char *v1 = 34;
      break;
    case 0xA2u:
      char *v1 = 35;
      break;
    case 0xA4u:
      char *v1 = 36;
      break;
    case 0xA6u:
      char *v1 = 37;
      break;
    case 0xA8u:
      char *v1 = 38;
      break;
    case 0xAAu:
      char *v1 = 39;
      break;
    case 0xACu:
      char *v1 = 40;
      break;
    case 0xAEu:
      char *v1 = 41;
      break;
    case 0xB0u:
      char *v1 = 42;
      break;
    case 0xCAu:
      char *v1 = 43;
      break;
    case 0xD4u:
      char *v1 = 44;
      break;
    default:
      char *v1 = 45;
      break;
  }
  return (CoreHID::HIDUsage::VESAVirtualControlsUsage_optional)rawValue;
}

CoreHID::HIDUsage::PowerUsage_optional __swiftcall HIDUsage.PowerUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 59;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_60;
    case 2u:
      char v2 = 1;
      goto LABEL_60;
    case 3u:
      char v2 = 2;
      goto LABEL_60;
    case 4u:
      char v2 = 3;
      goto LABEL_60;
    case 5u:
      char v2 = 4;
      goto LABEL_60;
    case 0x10u:
      char v2 = 5;
      goto LABEL_60;
    case 0x11u:
      char v2 = 6;
      goto LABEL_60;
    case 0x12u:
      char v2 = 7;
      goto LABEL_60;
    case 0x13u:
      char v2 = 8;
      goto LABEL_60;
    case 0x14u:
      char v2 = 9;
      goto LABEL_60;
    case 0x15u:
      char v2 = 10;
      goto LABEL_60;
    case 0x16u:
      char v2 = 11;
      goto LABEL_60;
    case 0x17u:
      char v2 = 12;
      goto LABEL_60;
    case 0x18u:
      char v2 = 13;
      goto LABEL_60;
    case 0x19u:
      char v2 = 14;
      goto LABEL_60;
    case 0x1Au:
      char v2 = 15;
      goto LABEL_60;
    case 0x1Bu:
      char v2 = 16;
      goto LABEL_60;
    case 0x1Cu:
      char v2 = 17;
      goto LABEL_60;
    case 0x1Du:
      char v2 = 18;
      goto LABEL_60;
    case 0x1Eu:
      char v2 = 19;
      goto LABEL_60;
    case 0x1Fu:
      char v2 = 20;
      goto LABEL_60;
    case 0x20u:
      char v2 = 21;
      goto LABEL_60;
    case 0x21u:
      char v2 = 22;
      goto LABEL_60;
    case 0x22u:
      char v2 = 23;
      goto LABEL_60;
    case 0x23u:
      char v2 = 24;
      goto LABEL_60;
    case 0x24u:
      char v2 = 25;
      goto LABEL_60;
    case 0x25u:
      char v2 = 26;
      goto LABEL_60;
    case 0x30u:
      char v2 = 27;
      goto LABEL_60;
    case 0x31u:
      char v2 = 28;
      goto LABEL_60;
    case 0x32u:
      char v2 = 29;
      goto LABEL_60;
    case 0x33u:
      char v2 = 30;
      goto LABEL_60;
    case 0x34u:
      char v2 = 31;
      goto LABEL_60;
    case 0x35u:
      char v2 = 32;
      goto LABEL_60;
    case 0x36u:
      char v2 = 33;
      goto LABEL_60;
    case 0x37u:
      char v2 = 34;
      goto LABEL_60;
    case 0x38u:
      char v2 = 35;
      goto LABEL_60;
    case 0x40u:
      char v2 = 36;
      goto LABEL_60;
    case 0x41u:
      char v2 = 37;
      goto LABEL_60;
    case 0x42u:
      char v2 = 38;
      goto LABEL_60;
    case 0x43u:
      char v2 = 39;
      goto LABEL_60;
    case 0x44u:
      char v2 = 40;
      goto LABEL_60;
    case 0x45u:
      char v2 = 41;
      goto LABEL_60;
    case 0x46u:
      char v2 = 42;
      goto LABEL_60;
    case 0x47u:
      char v2 = 43;
      goto LABEL_60;
    case 0x50u:
      char v2 = 44;
      goto LABEL_60;
    case 0x51u:
      char v2 = 45;
      goto LABEL_60;
    case 0x52u:
      char v2 = 46;
      goto LABEL_60;
    case 0x53u:
      char v2 = 47;
      goto LABEL_60;
    case 0x54u:
      char v2 = 48;
      goto LABEL_60;
    case 0x55u:
      char v2 = 49;
      goto LABEL_60;
    case 0x56u:
      char v2 = 50;
      goto LABEL_60;
    case 0x57u:
      char v2 = 51;
      goto LABEL_60;
    case 0x58u:
      char v2 = 52;
      goto LABEL_60;
    case 0x59u:
      char v2 = 53;
      goto LABEL_60;
    case 0x5Au:
      char v2 = 54;
      goto LABEL_60;
    case 0x60u:
      char v2 = 55;
      goto LABEL_60;
    case 0x61u:
      char v2 = 56;
      goto LABEL_60;
    case 0x62u:
      char v2 = 57;
      goto LABEL_60;
    case 0x63u:
      char v2 = 58;
LABEL_60:
      char v3 = v2;
      goto LABEL_61;
    case 0x64u:
LABEL_61:
      char *v1 = v3;
      break;
    case 0x65u:
      char *v1 = 60;
      break;
    case 0x66u:
      char *v1 = 61;
      break;
    case 0x67u:
      char *v1 = 62;
      break;
    case 0x68u:
      char *v1 = 63;
      break;
    case 0x69u:
      char *v1 = 64;
      break;
    case 0x6Bu:
      char *v1 = 65;
      break;
    case 0x6Cu:
      char *v1 = 66;
      break;
    case 0x6Du:
      char *v1 = 67;
      break;
    case 0x6Eu:
      char *v1 = 68;
      break;
    case 0x6Fu:
      char *v1 = 69;
      break;
    case 0x70u:
      char *v1 = 70;
      break;
    case 0x71u:
      char *v1 = 71;
      break;
    case 0x72u:
      char *v1 = 72;
      break;
    case 0x73u:
      char *v1 = 73;
      break;
    case 0xFDu:
      char *v1 = 74;
      break;
    case 0xFEu:
      char *v1 = 75;
      break;
    case 0xFFu:
      char *v1 = 76;
      break;
    default:
      char *v1 = 77;
      break;
  }
  return (CoreHID::HIDUsage::PowerUsage_optional)rawValue;
}

CoreHID::HIDUsage::BatterySystemUsage_optional __swiftcall HIDUsage.BatterySystemUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 73;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_75;
    case 2u:
      char v2 = 1;
      goto LABEL_75;
    case 3u:
      char v2 = 2;
      goto LABEL_75;
    case 4u:
      char v2 = 3;
      goto LABEL_75;
    case 5u:
      char v2 = 4;
      goto LABEL_75;
    case 6u:
      char v2 = 5;
      goto LABEL_75;
    case 7u:
      char v2 = 6;
      goto LABEL_75;
    case 8u:
      char v2 = 7;
      goto LABEL_75;
    case 9u:
      char v2 = 8;
      goto LABEL_75;
    case 0x10u:
      char v2 = 9;
      goto LABEL_75;
    case 0x11u:
      char v2 = 10;
      goto LABEL_75;
    case 0x12u:
      char v2 = 11;
      goto LABEL_75;
    case 0x13u:
      char v2 = 12;
      goto LABEL_75;
    case 0x14u:
      char v2 = 13;
      goto LABEL_75;
    case 0x15u:
      char v2 = 14;
      goto LABEL_75;
    case 0x16u:
      char v2 = 15;
      goto LABEL_75;
    case 0x17u:
      char v2 = 16;
      goto LABEL_75;
    case 0x18u:
      char v2 = 17;
      goto LABEL_75;
    case 0x19u:
      char v2 = 18;
      goto LABEL_75;
    case 0x1Au:
      char v2 = 19;
      goto LABEL_75;
    case 0x1Bu:
      char v2 = 20;
      goto LABEL_75;
    case 0x1Cu:
      char v2 = 21;
      goto LABEL_75;
    case 0x1Du:
      char v2 = 22;
      goto LABEL_75;
    case 0x28u:
      char v2 = 23;
      goto LABEL_75;
    case 0x29u:
      char v2 = 24;
      goto LABEL_75;
    case 0x2Au:
      char v2 = 25;
      goto LABEL_75;
    case 0x2Bu:
      char v2 = 26;
      goto LABEL_75;
    case 0x2Cu:
      char v2 = 27;
      goto LABEL_75;
    case 0x2Du:
      char v2 = 28;
      goto LABEL_75;
    case 0x2Eu:
      char v2 = 29;
      goto LABEL_75;
    case 0x2Fu:
      char v2 = 30;
      goto LABEL_75;
    case 0x40u:
      char v2 = 31;
      goto LABEL_75;
    case 0x41u:
      char v2 = 32;
      goto LABEL_75;
    case 0x42u:
      char v2 = 33;
      goto LABEL_75;
    case 0x43u:
      char v2 = 34;
      goto LABEL_75;
    case 0x44u:
      char v2 = 35;
      goto LABEL_75;
    case 0x45u:
      char v2 = 36;
      goto LABEL_75;
    case 0x46u:
      char v2 = 37;
      goto LABEL_75;
    case 0x47u:
      char v2 = 38;
      goto LABEL_75;
    case 0x48u:
      char v2 = 39;
      goto LABEL_75;
    case 0x49u:
      char v2 = 40;
      goto LABEL_75;
    case 0x4Au:
      char v2 = 41;
      goto LABEL_75;
    case 0x4Bu:
      char v2 = 42;
      goto LABEL_75;
    case 0x60u:
      char v2 = 43;
      goto LABEL_75;
    case 0x61u:
      char v2 = 44;
      goto LABEL_75;
    case 0x62u:
      char v2 = 45;
      goto LABEL_75;
    case 0x63u:
      char v2 = 46;
      goto LABEL_75;
    case 0x64u:
      char v2 = 47;
      goto LABEL_75;
    case 0x65u:
      char v2 = 48;
      goto LABEL_75;
    case 0x66u:
      char v2 = 49;
      goto LABEL_75;
    case 0x67u:
      char v2 = 50;
      goto LABEL_75;
    case 0x68u:
      char v2 = 51;
      goto LABEL_75;
    case 0x69u:
      char v2 = 52;
      goto LABEL_75;
    case 0x6Au:
      char v2 = 53;
      goto LABEL_75;
    case 0x6Bu:
      char v2 = 54;
      goto LABEL_75;
    case 0x80u:
      char v2 = 55;
      goto LABEL_75;
    case 0x81u:
      char v2 = 56;
      goto LABEL_75;
    case 0x82u:
      char v2 = 57;
      goto LABEL_75;
    case 0x83u:
      char v2 = 58;
      goto LABEL_75;
    case 0x84u:
      char v2 = 59;
      goto LABEL_75;
    case 0x85u:
      char v2 = 60;
      goto LABEL_75;
    case 0x86u:
      char v2 = 61;
      goto LABEL_75;
    case 0x87u:
      char v2 = 62;
      goto LABEL_75;
    case 0x88u:
      char v2 = 63;
      goto LABEL_75;
    case 0x89u:
      char v2 = 64;
      goto LABEL_75;
    case 0x8Au:
      char v2 = 65;
      goto LABEL_75;
    case 0x8Bu:
      char v2 = 66;
      goto LABEL_75;
    case 0x8Cu:
      char v2 = 67;
      goto LABEL_75;
    case 0x8Du:
      char v2 = 68;
      goto LABEL_75;
    case 0x8Eu:
      char v2 = 69;
      goto LABEL_75;
    case 0x8Fu:
      char v2 = 70;
      goto LABEL_75;
    case 0xC0u:
      char v2 = 71;
      goto LABEL_75;
    case 0xC1u:
      char v2 = 72;
LABEL_75:
      char v3 = v2;
      goto LABEL_76;
    case 0xC2u:
LABEL_76:
      char *v1 = v3;
      break;
    case 0xD0u:
      char *v1 = 74;
      break;
    case 0xD1u:
      char *v1 = 75;
      break;
    case 0xD2u:
      char *v1 = 76;
      break;
    case 0xD3u:
      char *v1 = 77;
      break;
    case 0xD4u:
      char *v1 = 78;
      break;
    case 0xD5u:
      char *v1 = 79;
      break;
    case 0xD6u:
      char *v1 = 80;
      break;
    case 0xD7u:
      char *v1 = 81;
      break;
    case 0xD8u:
      char *v1 = 82;
      break;
    case 0xD9u:
      char *v1 = 83;
      break;
    case 0xDAu:
      char *v1 = 84;
      break;
    case 0xDBu:
      char *v1 = 85;
      break;
    case 0xDCu:
      char *v1 = 86;
      break;
    case 0xF0u:
      char *v1 = 87;
      break;
    case 0xF1u:
      char *v1 = 88;
      break;
    case 0xF2u:
      char *v1 = 89;
      break;
    case 0xF3u:
      char *v1 = 90;
      break;
    default:
      char *v1 = 91;
      break;
  }
  return (CoreHID::HIDUsage::BatterySystemUsage_optional)rawValue;
}

CoreHID::HIDUsage::BarcodeScannerUsage_optional __swiftcall HIDUsage.BarcodeScannerUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_131;
    case 2u:
      char v2 = 1;
      goto LABEL_131;
    case 3u:
      char v2 = 2;
      goto LABEL_131;
    case 4u:
      char v2 = 3;
      goto LABEL_131;
    case 5u:
      char v2 = 4;
      goto LABEL_131;
    case 0x10u:
      char v2 = 5;
      goto LABEL_131;
    case 0x11u:
      char v2 = 6;
      goto LABEL_131;
    case 0x12u:
      char v2 = 7;
      goto LABEL_131;
    case 0x13u:
      char v2 = 8;
      goto LABEL_131;
    case 0x14u:
      char v2 = 9;
      goto LABEL_131;
    case 0x15u:
      char v2 = 10;
      goto LABEL_131;
    case 0x16u:
      char v2 = 11;
      goto LABEL_131;
    case 0x17u:
      char v2 = 12;
      goto LABEL_131;
    case 0x18u:
      char v2 = 13;
      goto LABEL_131;
    case 0x19u:
      char v2 = 14;
      goto LABEL_131;
    case 0x1Au:
      char v2 = 15;
      goto LABEL_131;
    case 0x1Bu:
      char v2 = 16;
      goto LABEL_131;
    case 0x1Cu:
      char v2 = 17;
      goto LABEL_131;
    case 0x1Du:
      char v2 = 18;
      goto LABEL_131;
    case 0x1Eu:
      char v2 = 19;
      goto LABEL_131;
    case 0x1Fu:
      char v2 = 20;
      goto LABEL_131;
    case 0x30u:
      char v2 = 21;
      goto LABEL_131;
    case 0x31u:
      char v2 = 22;
      goto LABEL_131;
    case 0x32u:
      char v2 = 23;
      goto LABEL_131;
    case 0x33u:
      char v2 = 24;
      goto LABEL_131;
    case 0x34u:
      char v2 = 25;
      goto LABEL_131;
    case 0x35u:
      char v2 = 26;
      goto LABEL_131;
    case 0x36u:
      char v2 = 27;
      goto LABEL_131;
    case 0x37u:
      char v2 = 28;
      goto LABEL_131;
    case 0x38u:
      char v2 = 29;
      goto LABEL_131;
    case 0x39u:
      char v2 = 30;
      goto LABEL_131;
    case 0x3Au:
      char v2 = 31;
      goto LABEL_131;
    case 0x3Bu:
      char v2 = 32;
      goto LABEL_131;
    case 0x3Cu:
      char v2 = 33;
      goto LABEL_131;
    case 0x3Du:
      char v2 = 34;
      goto LABEL_131;
    case 0x3Eu:
      char v2 = 35;
      goto LABEL_131;
    case 0x3Fu:
      char v2 = 36;
      goto LABEL_131;
    case 0x40u:
      char v2 = 37;
      goto LABEL_131;
    case 0x41u:
      char v2 = 38;
      goto LABEL_131;
    case 0x42u:
      char v2 = 39;
      goto LABEL_131;
    case 0x43u:
      char v2 = 40;
      goto LABEL_131;
    case 0x44u:
      char v2 = 41;
      goto LABEL_131;
    case 0x45u:
      char v2 = 42;
      goto LABEL_131;
    case 0x46u:
      char v2 = 43;
      goto LABEL_131;
    case 0x4Du:
      char v2 = 44;
      goto LABEL_131;
    case 0x4Eu:
      char v2 = 45;
      goto LABEL_131;
    case 0x4Fu:
      char v2 = 46;
      goto LABEL_131;
    case 0x50u:
      char v2 = 47;
      goto LABEL_131;
    case 0x51u:
      char v2 = 48;
      goto LABEL_131;
    case 0x52u:
      char v2 = 49;
      goto LABEL_131;
    case 0x55u:
      char v2 = 50;
      goto LABEL_131;
    case 0x56u:
      char v2 = 51;
      goto LABEL_131;
    case 0x57u:
      char v2 = 52;
      goto LABEL_131;
    case 0x58u:
      char v2 = 53;
      goto LABEL_131;
    case 0x59u:
      char v2 = 54;
      goto LABEL_131;
    case 0x5Au:
      char v2 = 55;
      goto LABEL_131;
    case 0x5Bu:
      char v2 = 56;
      goto LABEL_131;
    case 0x5Cu:
      char v2 = 57;
      goto LABEL_131;
    case 0x5Du:
      char v2 = 58;
      goto LABEL_131;
    case 0x5Eu:
      char v2 = 59;
      goto LABEL_131;
    case 0x5Fu:
      char v2 = 60;
      goto LABEL_131;
    case 0x60u:
      char v2 = 61;
      goto LABEL_131;
    case 0x61u:
      char v2 = 62;
      goto LABEL_131;
    case 0x62u:
      char v2 = 63;
      goto LABEL_131;
    case 0x63u:
      char v2 = 64;
      goto LABEL_131;
    case 0x64u:
      char v2 = 65;
      goto LABEL_131;
    case 0x65u:
      char v2 = 66;
      goto LABEL_131;
    case 0x66u:
      char v2 = 67;
      goto LABEL_131;
    case 0x6Du:
      char v2 = 68;
      goto LABEL_131;
    case 0x6Eu:
      char v2 = 69;
      goto LABEL_131;
    case 0x6Fu:
      char v2 = 70;
      goto LABEL_131;
    case 0x70u:
      char v2 = 71;
      goto LABEL_131;
    case 0x75u:
      char v2 = 72;
      goto LABEL_131;
    case 0x76u:
      char v2 = 73;
      goto LABEL_131;
    case 0x7Au:
      char v2 = 74;
      goto LABEL_131;
    case 0x7Bu:
      char v2 = 75;
      goto LABEL_131;
    case 0x7Cu:
      char v2 = 76;
      goto LABEL_131;
    case 0x7Du:
      char v2 = 77;
      goto LABEL_131;
    case 0x7Eu:
      char v2 = 78;
      goto LABEL_131;
    case 0x7Fu:
      char v2 = 79;
      goto LABEL_131;
    case 0x80u:
      char v2 = 80;
      goto LABEL_131;
    case 0x82u:
      char v2 = 81;
      goto LABEL_131;
    case 0x83u:
      char v2 = 82;
      goto LABEL_131;
    case 0x84u:
      char v2 = 83;
      goto LABEL_131;
    case 0x85u:
      char v2 = 84;
      goto LABEL_131;
    case 0x86u:
      char v2 = 85;
      goto LABEL_131;
    case 0x87u:
      char v2 = 86;
      goto LABEL_131;
    case 0x88u:
      char v2 = 87;
      goto LABEL_131;
    case 0x89u:
      char v2 = 88;
      goto LABEL_131;
    case 0x8Au:
      char v2 = 89;
      goto LABEL_131;
    case 0x8Bu:
      char v2 = 90;
      goto LABEL_131;
    case 0x91u:
      char v2 = 91;
      goto LABEL_131;
    case 0x92u:
      char v2 = 92;
      goto LABEL_131;
    case 0x93u:
      char v2 = 93;
      goto LABEL_131;
    case 0x94u:
      char v2 = 94;
      goto LABEL_131;
    case 0x95u:
      char v2 = 95;
      goto LABEL_131;
    case 0x96u:
      char v2 = 96;
      goto LABEL_131;
    case 0x97u:
      char v2 = 97;
      goto LABEL_131;
    case 0x98u:
      char v2 = 98;
      goto LABEL_131;
    case 0x99u:
      char v2 = 99;
      goto LABEL_131;
    case 0x9Au:
      char v2 = 100;
      goto LABEL_131;
    case 0x9Bu:
      char v2 = 101;
      goto LABEL_131;
    case 0x9Cu:
      char v2 = 102;
      goto LABEL_131;
    case 0x9Du:
      char v2 = 103;
      goto LABEL_131;
    case 0x9Eu:
      char v2 = 104;
      goto LABEL_131;
    case 0x9Fu:
      char v2 = 105;
      goto LABEL_131;
    case 0xA0u:
      char v2 = 106;
      goto LABEL_131;
    case 0xA1u:
      char v2 = 107;
      goto LABEL_131;
    case 0xA2u:
      char v2 = 108;
      goto LABEL_131;
    case 0xA9u:
      char v2 = 109;
      goto LABEL_131;
    case 0xAAu:
      char v2 = 110;
      goto LABEL_131;
    case 0xABu:
      char v2 = 111;
      goto LABEL_131;
    case 0xACu:
      char v2 = 112;
      goto LABEL_131;
    case 0xADu:
      char v2 = 113;
      goto LABEL_131;
    case 0xAEu:
      char v2 = 114;
      goto LABEL_131;
    case 0xAFu:
      char v2 = 115;
      goto LABEL_131;
    case 0xB0u:
      char v2 = 116;
      goto LABEL_131;
    case 0xB1u:
      char v2 = 117;
      goto LABEL_131;
    case 0xB2u:
      char v2 = 118;
      goto LABEL_131;
    case 0xB3u:
      char v2 = 119;
      goto LABEL_131;
    case 0xB4u:
      char v2 = 120;
      goto LABEL_131;
    case 0xB5u:
      char v2 = 121;
      goto LABEL_131;
    case 0xB7u:
      char v2 = 122;
      goto LABEL_131;
    case 0xB8u:
      char v2 = 123;
      goto LABEL_131;
    case 0xB9u:
      char v2 = 124;
      goto LABEL_131;
    case 0xBAu:
      char v2 = 125;
      goto LABEL_131;
    case 0xBBu:
      char v2 = 126;
      goto LABEL_131;
    case 0xBCu:
      char v2 = 127;
LABEL_131:
      char v3 = v2;
LABEL_132:
      char *v1 = v3;
      break;
    default:
      char v3 = -80;
      char v2 = 0x80;
      switch(rawValue)
      {
        case 0xBDu:
          goto LABEL_131;
        case 0xBEu:
          char v2 = -127;
          goto LABEL_131;
        case 0xBFu:
          char v2 = -126;
          goto LABEL_131;
        case 0xC0u:
          char v2 = -125;
          goto LABEL_131;
        case 0xC3u:
          char v2 = -124;
          goto LABEL_131;
        case 0xC4u:
          char v2 = -123;
          goto LABEL_131;
        case 0xC7u:
          char v2 = -122;
          goto LABEL_131;
        case 0xC8u:
          char v2 = -121;
          goto LABEL_131;
        case 0xC9u:
          char v2 = -120;
          goto LABEL_131;
        case 0xCAu:
          char v2 = -119;
          goto LABEL_131;
        case 0xCBu:
          char v2 = -118;
          goto LABEL_131;
        case 0xCCu:
          char v2 = -117;
          goto LABEL_131;
        case 0xCDu:
          char v2 = -116;
          goto LABEL_131;
        case 0xCEu:
          char v2 = -115;
          goto LABEL_131;
        case 0xD3u:
          char v2 = -114;
          goto LABEL_131;
        case 0xD4u:
          char v2 = -113;
          goto LABEL_131;
        case 0xD5u:
          char v2 = -112;
          goto LABEL_131;
        case 0xD6u:
          char v2 = -111;
          goto LABEL_131;
        case 0xD7u:
          char v2 = -110;
          goto LABEL_131;
        case 0xD8u:
          char v2 = -109;
          goto LABEL_131;
        case 0xD9u:
          char v2 = -108;
          goto LABEL_131;
        case 0xDAu:
          char v2 = -107;
          goto LABEL_131;
        case 0xDBu:
          char v2 = -106;
          goto LABEL_131;
        case 0xDCu:
          char v2 = -105;
          goto LABEL_131;
        case 0xDDu:
          char v2 = -104;
          goto LABEL_131;
        case 0xDEu:
          char v2 = -103;
          goto LABEL_131;
        case 0xDFu:
          char v2 = -102;
          goto LABEL_131;
        case 0xF0u:
          char v2 = -101;
          goto LABEL_131;
        case 0xF1u:
          char v2 = -100;
          goto LABEL_131;
        case 0xF2u:
          char v2 = -99;
          goto LABEL_131;
        case 0xFBu:
          char v2 = -98;
          goto LABEL_131;
        case 0xFCu:
          char v2 = -97;
          goto LABEL_131;
        case 0xFDu:
          char v2 = -96;
          goto LABEL_131;
        case 0xFEu:
          char v2 = -95;
          goto LABEL_131;
        case 0xFFu:
          char v2 = -94;
          goto LABEL_131;
        case 0x100u:
          char v2 = -93;
          goto LABEL_131;
        case 0x101u:
          char v2 = -92;
          goto LABEL_131;
        case 0x102u:
          char v2 = -91;
          goto LABEL_131;
        case 0x103u:
          char v2 = -90;
          goto LABEL_131;
        case 0x104u:
          char v2 = -89;
          goto LABEL_131;
        case 0x106u:
          char v2 = -88;
          goto LABEL_131;
        case 0x107u:
          char v2 = -87;
          goto LABEL_131;
        case 0x108u:
          char v2 = -86;
          goto LABEL_131;
        case 0x109u:
          char v2 = -85;
          goto LABEL_131;
        case 0x10Au:
          char v2 = -84;
          goto LABEL_131;
        case 0x10Bu:
          char v2 = -83;
          goto LABEL_131;
        case 0x10Cu:
          char v2 = -82;
          goto LABEL_131;
        case 0x10Du:
          char v2 = -81;
          goto LABEL_131;
        case 0x110u:
          goto LABEL_132;
        case 0x111u:
          char *v1 = -79;
          break;
        case 0x112u:
          char *v1 = -78;
          break;
        case 0x113u:
          char *v1 = -77;
          break;
        case 0x114u:
          char *v1 = -76;
          break;
        case 0x115u:
          char *v1 = -75;
          break;
        case 0x116u:
          char *v1 = -74;
          break;
        case 0x117u:
          char *v1 = -73;
          break;
        case 0x118u:
          char *v1 = -72;
          break;
        case 0x119u:
          char *v1 = -71;
          break;
        case 0x11Au:
          char *v1 = -70;
          break;
        case 0x11Bu:
          char *v1 = -69;
          break;
        case 0x11Cu:
          char *v1 = -68;
          break;
        case 0x11Du:
          char *v1 = -67;
          break;
        case 0x11Eu:
          char *v1 = -66;
          break;
        case 0x11Fu:
          char *v1 = -65;
          break;
        default:
          if (rawValue == 289) {
            char v4 = -63;
          }
          else {
            char v4 = -62;
          }
          if (rawValue == 288) {
            char v4 = -64;
          }
          char *v1 = v4;
          break;
      }
      break;
  }
  return (CoreHID::HIDUsage::BarcodeScannerUsage_optional)rawValue;
}

CoreHID::HIDUsage::ScalesUsage_optional __swiftcall HIDUsage.ScalesUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 28;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_30;
    case 0x20u:
      char v2 = 1;
      goto LABEL_30;
    case 0x21u:
      char v2 = 2;
      goto LABEL_30;
    case 0x22u:
      char v2 = 3;
      goto LABEL_30;
    case 0x23u:
      char v2 = 4;
      goto LABEL_30;
    case 0x24u:
      char v2 = 5;
      goto LABEL_30;
    case 0x25u:
      char v2 = 6;
      goto LABEL_30;
    case 0x26u:
      char v2 = 7;
      goto LABEL_30;
    case 0x27u:
      char v2 = 8;
      goto LABEL_30;
    case 0x28u:
      char v2 = 9;
      goto LABEL_30;
    case 0x29u:
      char v2 = 10;
      goto LABEL_30;
    case 0x2Au:
      char v2 = 11;
      goto LABEL_30;
    case 0x30u:
      char v2 = 12;
      goto LABEL_30;
    case 0x31u:
      char v2 = 13;
      goto LABEL_30;
    case 0x32u:
      char v2 = 14;
      goto LABEL_30;
    case 0x33u:
      char v2 = 15;
      goto LABEL_30;
    case 0x34u:
      char v2 = 16;
      goto LABEL_30;
    case 0x35u:
      char v2 = 17;
      goto LABEL_30;
    case 0x40u:
      char v2 = 18;
      goto LABEL_30;
    case 0x41u:
      char v2 = 19;
      goto LABEL_30;
    case 0x50u:
      char v2 = 20;
      goto LABEL_30;
    case 0x51u:
      char v2 = 21;
      goto LABEL_30;
    case 0x52u:
      char v2 = 22;
      goto LABEL_30;
    case 0x53u:
      char v2 = 23;
      goto LABEL_30;
    case 0x54u:
      char v2 = 24;
      goto LABEL_30;
    case 0x55u:
      char v2 = 25;
      goto LABEL_30;
    case 0x56u:
      char v2 = 26;
      goto LABEL_30;
    case 0x57u:
      char v2 = 27;
LABEL_30:
      char v3 = v2;
      goto LABEL_31;
    case 0x58u:
LABEL_31:
      char *v1 = v3;
      break;
    case 0x59u:
      char *v1 = 29;
      break;
    case 0x5Au:
      char *v1 = 30;
      break;
    case 0x5Bu:
      char *v1 = 31;
      break;
    case 0x5Cu:
      char *v1 = 32;
      break;
    case 0x60u:
      char *v1 = 33;
      break;
    case 0x61u:
      char *v1 = 34;
      break;
    case 0x70u:
      char *v1 = 35;
      break;
    case 0x71u:
      char *v1 = 36;
      break;
    case 0x72u:
      char *v1 = 37;
      break;
    case 0x73u:
      char *v1 = 38;
      break;
    case 0x74u:
      char *v1 = 39;
      break;
    case 0x75u:
      char *v1 = 40;
      break;
    case 0x76u:
      char *v1 = 41;
      break;
    case 0x77u:
      char *v1 = 42;
      break;
    case 0x78u:
      char *v1 = 43;
      break;
    case 0x80u:
      char *v1 = 44;
      break;
    case 0x81u:
      char *v1 = 45;
      break;
    default:
      char *v1 = 46;
      break;
  }
  return (CoreHID::HIDUsage::ScalesUsage_optional)rawValue;
}

CoreHID::HIDUsage::MagneticStripeReaderUsage_optional __swiftcall HIDUsage.MagneticStripeReaderUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 1;
  switch(rawValue)
  {
    case 1u:
      char v2 = 0;
      goto LABEL_3;
    case 0x11u:
LABEL_3:
      char *v1 = v2;
      break;
    case 0x12u:
      char *v1 = 2;
      break;
    case 0x13u:
      char *v1 = 3;
      break;
    case 0x14u:
      char *v1 = 4;
      break;
    case 0x20u:
      char *v1 = 5;
      break;
    case 0x21u:
      char *v1 = 6;
      break;
    case 0x22u:
      char *v1 = 7;
      break;
    case 0x23u:
      char *v1 = 8;
      break;
    case 0x24u:
      char *v1 = 9;
      break;
    default:
      char *v1 = 10;
      break;
  }
  return (CoreHID::HIDUsage::MagneticStripeReaderUsage_optional)rawValue;
}

CoreHID::HIDUsage::CameraControlUsage_optional __swiftcall HIDUsage.CameraControlUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  if (rawValue == 33) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (rawValue == 32) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  char *v1 = v3;
  return (CoreHID::HIDUsage::CameraControlUsage_optional)rawValue;
}

CoreHID::HIDUsage::ArcadeUsage_optional __swiftcall HIDUsage.ArcadeUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  char v2 = 0;
  char v3 = 9;
  switch(rawValue)
  {
    case 1u:
      goto LABEL_11;
    case 2u:
      char v2 = 1;
      goto LABEL_11;
    case 3u:
      char v2 = 2;
      goto LABEL_11;
    case 0x30u:
      char v2 = 3;
      goto LABEL_11;
    case 0x31u:
      char v2 = 4;
      goto LABEL_11;
    case 0x32u:
      char v2 = 5;
      goto LABEL_11;
    case 0x33u:
      char v2 = 6;
      goto LABEL_11;
    case 0x34u:
      char v2 = 7;
      goto LABEL_11;
    case 0x35u:
      char v2 = 8;
LABEL_11:
      char v3 = v2;
      goto LABEL_12;
    case 0x36u:
LABEL_12:
      char *v1 = v3;
      break;
    case 0x37u:
      char *v1 = 10;
      break;
    case 0x38u:
      char *v1 = 11;
      break;
    case 0x39u:
      char *v1 = 12;
      break;
    case 0x40u:
      char *v1 = 13;
      break;
    case 0x41u:
      char *v1 = 14;
      break;
    case 0x42u:
      char *v1 = 15;
      break;
    case 0x43u:
      char *v1 = 16;
      break;
    case 0x44u:
      char *v1 = 17;
      break;
    case 0x45u:
      char *v1 = 18;
      break;
    case 0x46u:
      char *v1 = 19;
      break;
    case 0x47u:
      char *v1 = 20;
      break;
    case 0x48u:
      char *v1 = 21;
      break;
    case 0x49u:
      char *v1 = 22;
      break;
    case 0x4Au:
      char *v1 = 23;
      break;
    case 0x4Bu:
      char *v1 = 24;
      break;
    case 0x4Cu:
      char *v1 = 25;
      break;
    case 0x4Du:
      char *v1 = 26;
      break;
    default:
      char *v1 = 27;
      break;
  }
  return (CoreHID::HIDUsage::ArcadeUsage_optional)rawValue;
}

CoreHID::HIDUsage::FIDOAllianceUsage_optional __swiftcall HIDUsage.FIDOAllianceUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  if (rawValue == 33) {
    char v2 = 2;
  }
  else {
    char v2 = 3;
  }
  if (rawValue == 32) {
    char v3 = 1;
  }
  else {
    char v3 = v2;
  }
  if (rawValue == 1) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  char *v1 = v4;
  return (CoreHID::HIDUsage::FIDOAllianceUsage_optional)rawValue;
}

uint64_t HIDUsage.hash(into:)()
{
  unint64_t v1 = *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
  switch(*((unsigned __int8 *)v0 + 4) >> 2)
  {
    case 1:
      sub_24B534E70();
      if (v1 == 51) {
        return sub_24B534E80();
      }
      goto LABEL_57;
    case 2:
      sub_24B534E70();
      if (v1 != 12) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 3:
      sub_24B534E70();
      if (v1 != 34) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 4:
      sub_24B534E70();
      if (v1 != 29) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 5:
      sub_24B534E70();
      if (v1 != 24) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 6:
      sub_24B534E70();
      if (v1 != 218) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 7:
      sub_24B534E70();
      if (v1 != 96) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 8:
      sub_24B534E70();
      if ((v1 & 0x10000) != 0) {
        return sub_24B534E80();
      }
      goto LABEL_57;
    case 9:
      sub_24B534E70();
      if ((v1 & 0x10000) != 0) {
        return sub_24B534E80();
      }
      goto LABEL_57;
    case 0xA:
      sub_24B534E70();
      if (v1 != 99) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0xB:
      sub_24B534E70();
      if ((unsigned __int16)v1 != 450) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0xC:
      sub_24B534E70();
      if (v1 != 108) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0xD:
      sub_24B534E70();
      if (v1 != 29) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0xE:
      sub_24B534E70();
      if (v1 != 105) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0xF:
      sub_24B534E70();
      if (v1 == 10) {
        return sub_24B534E80();
      }
      goto LABEL_57;
    case 0x10:
      sub_24B534E70();
      if (v1 != 34) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x11:
      sub_24B534E70();
      if (v1 != 75) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x12:
      sub_24B534E70();
      if ((unsigned __int16)v1 != 665) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x13:
      sub_24B534E70();
      if (v1 != 29) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x14:
      sub_24B534E70();
      if (v1 != 43) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x15:
      sub_24B534E70();
      if (v1 != 33) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x16:
      sub_24B534E70();
      if (v1 != 4) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x17:
      sub_24B534E70();
      if ((v1 & 0x10000) != 0) {
        return sub_24B534E80();
      }
      goto LABEL_57;
    case 0x18:
      sub_24B534E70();
      if (v1 != 45) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x19:
      sub_24B534E70();
      if (v1 != 77) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x1A:
      sub_24B534E70();
      if (v1 != 91) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x1B:
      sub_24B534E70();
      if (v1 != 194) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x1C:
      sub_24B534E70();
      if (v1 != 46) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x1D:
      sub_24B534E70();
      if (v1 != 10) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x1E:
      sub_24B534E70();
      if (v1 != 2) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x1F:
      sub_24B534E70();
      if (v1 != 27) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x20:
      sub_24B534E70();
      if (v1 != 3) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    case 0x21:
      sub_24B534E70();
      sub_24B534E90();
      if ((v1 & 0x100000000) == 0) {
        goto LABEL_57;
      }
      return sub_24B534E80();
    default:
      sub_24B534E70();
      if (v1 == 114) {
        return sub_24B534E80();
      }
LABEL_57:
      sub_24B534E80();
      return sub_24B534E90();
  }
}

uint64_t HIDUsage.hashValue.getter()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50CF90()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50CFE8()
{
  return sub_24B534EB0();
}

uint64_t HIDUsage.description.getter()
{
  sub_24B534BD0();
  swift_bridgeObjectRelease();
  HIDUsage.page.getter();
  sub_24B534DB0();
  sub_24B534990();
  swift_bridgeObjectRelease();
  if ((HIDUsage.usage.getter() & 0x10000) != 0) {
    goto LABEL_4;
  }
  uint64_t result = HIDUsage.usage.getter();
  if ((result & 0x10000) == 0)
  {
    sub_24B534DB0();
    sub_24B534990();
    swift_bridgeObjectRelease();
LABEL_4:
    sub_24B534990();
    swift_bridgeObjectRelease();
    sub_24B534990();
    return 0xD000000000000017;
  }
  __break(1u);
  return result;
}

uint64_t static HIDUsage.GenericDesktopUsage.page.getter()
{
  return 1;
}

BOOL sub_24B50D1B4(char *a1, char *a2)
{
  return word_24B53A352[*a1] == word_24B53A352[*a2];
}

uint64_t sub_24B50D1D8()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50D228()
{
  return sub_24B534E90();
}

uint64_t sub_24B50D260()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::GenericDesktopUsage_optional sub_24B50D2AC(Swift::UInt16 *a1)
{
  return HIDUsage.GenericDesktopUsage.init(rawValue:)(*a1);
}

void sub_24B50D2B4(_WORD *a1@<X8>)
{
  *a1 = word_24B53A352[*v1];
}

uint64_t static HIDUsage.SimulationControlsUsage.page.getter()
{
  return 2;
}

BOOL sub_24B50D2D4(char *a1, char *a2)
{
  return word_24B53A436[*a1] == word_24B53A436[*a2];
}

uint64_t sub_24B50D2F8()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50D348()
{
  return sub_24B534E90();
}

uint64_t sub_24B50D380()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::SimulationControlsUsage_optional sub_24B50D3CC(Swift::UInt16 *a1)
{
  return HIDUsage.SimulationControlsUsage.init(rawValue:)(*a1);
}

void sub_24B50D3D4(_WORD *a1@<X8>)
{
  *a1 = word_24B53A436[*v1];
}

uint64_t static HIDUsage.VRControlsUsage.page.getter()
{
  return 3;
}

BOOL sub_24B50D3F4(char *a1, char *a2)
{
  return word_24B53A49C[*a1] == word_24B53A49C[*a2];
}

uint64_t sub_24B50D418()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50D468()
{
  return sub_24B534E90();
}

uint64_t sub_24B50D4A0()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::VRControlsUsage_optional sub_24B50D4EC(Swift::UInt16 *a1)
{
  return HIDUsage.VRControlsUsage.init(rawValue:)(*a1);
}

void sub_24B50D4F4(_WORD *a1@<X8>)
{
  *a1 = word_24B53A49C[*v1];
}

uint64_t static HIDUsage.SportControlsUsage.page.getter()
{
  return 4;
}

BOOL sub_24B50D514(char *a1, char *a2)
{
  return word_24B53A4B4[*a1] == word_24B53A4B4[*a2];
}

uint64_t sub_24B50D538()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50D588()
{
  return sub_24B534E90();
}

uint64_t sub_24B50D5C0()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::SportControlsUsage_optional sub_24B50D60C(Swift::UInt16 *a1)
{
  return HIDUsage.SportControlsUsage.init(rawValue:)(*a1);
}

void sub_24B50D614(_WORD *a1@<X8>)
{
  *a1 = word_24B53A4B4[*v1];
}

uint64_t static HIDUsage.GameControlsUsage.page.getter()
{
  return 5;
}

BOOL sub_24B50D634(char *a1, char *a2)
{
  return word_24B53A4F8[*a1] == word_24B53A4F8[*a2];
}

uint64_t sub_24B50D658()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50D6A8()
{
  return sub_24B534E90();
}

uint64_t sub_24B50D6E0()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::GameControlsUsage_optional sub_24B50D72C(Swift::UInt16 *a1)
{
  return HIDUsage.GameControlsUsage.init(rawValue:)(*a1);
}

void sub_24B50D734(_WORD *a1@<X8>)
{
  *a1 = word_24B53A4F8[*v1];
}

uint64_t static HIDUsage.GenericDeviceControlsUsage.page.getter()
{
  return 6;
}

BOOL sub_24B50D754(char *a1, char *a2)
{
  return word_24B53A532[*a1] == word_24B53A532[*a2];
}

uint64_t sub_24B50D778()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50D7C8()
{
  return sub_24B534E90();
}

uint64_t sub_24B50D800()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::GenericDeviceControlsUsage_optional sub_24B50D84C(Swift::UInt16 *a1)
{
  return HIDUsage.GenericDeviceControlsUsage.init(rawValue:)(*a1);
}

void sub_24B50D854(_WORD *a1@<X8>)
{
  *a1 = word_24B53A532[*v1];
}

uint64_t static HIDUsage.KeyboardOrKeypadUsage.page.getter()
{
  return 7;
}

BOOL sub_24B50D874(unsigned char *a1, unsigned char *a2)
{
  int v2 = 1;
  switch(*a1)
  {
    case 1:
      int v2 = 2;
      break;
    case 2:
      int v2 = 3;
      break;
    case 3:
      int v2 = 4;
      break;
    case 4:
      int v2 = 5;
      break;
    case 5:
      int v2 = 6;
      break;
    case 6:
      int v2 = 7;
      break;
    case 7:
      int v2 = 8;
      break;
    case 8:
      int v2 = 9;
      break;
    case 9:
      int v2 = 10;
      break;
    case 0xA:
      int v2 = 11;
      break;
    case 0xB:
      int v2 = 12;
      break;
    case 0xC:
      int v2 = 13;
      break;
    case 0xD:
      int v2 = 14;
      break;
    case 0xE:
      int v2 = 15;
      break;
    case 0xF:
      int v2 = 16;
      break;
    case 0x10:
      int v2 = 17;
      break;
    case 0x11:
      int v2 = 18;
      break;
    case 0x12:
      int v2 = 19;
      break;
    case 0x13:
      int v2 = 20;
      break;
    case 0x14:
      int v2 = 21;
      break;
    case 0x15:
      int v2 = 22;
      break;
    case 0x16:
      int v2 = 23;
      break;
    case 0x17:
      int v2 = 24;
      break;
    case 0x18:
      int v2 = 25;
      break;
    case 0x19:
      int v2 = 26;
      break;
    case 0x1A:
      int v2 = 27;
      break;
    case 0x1B:
      int v2 = 28;
      break;
    case 0x1C:
      int v2 = 29;
      break;
    case 0x1D:
      int v2 = 30;
      break;
    case 0x1E:
      int v2 = 31;
      break;
    case 0x1F:
      int v2 = 32;
      break;
    case 0x20:
      int v2 = 33;
      break;
    case 0x21:
      int v2 = 34;
      break;
    case 0x22:
      int v2 = 35;
      break;
    case 0x23:
      int v2 = 36;
      break;
    case 0x24:
      int v2 = 37;
      break;
    case 0x25:
      int v2 = 38;
      break;
    case 0x26:
      int v2 = 39;
      break;
    case 0x27:
      int v2 = 40;
      break;
    case 0x28:
      int v2 = 41;
      break;
    case 0x29:
      int v2 = 42;
      break;
    case 0x2A:
      int v2 = 43;
      break;
    case 0x2B:
      int v2 = 44;
      break;
    case 0x2C:
      int v2 = 45;
      break;
    case 0x2D:
      int v2 = 46;
      break;
    case 0x2E:
      int v2 = 47;
      break;
    case 0x2F:
      int v2 = 48;
      break;
    case 0x30:
      int v2 = 49;
      break;
    case 0x31:
      int v2 = 50;
      break;
    case 0x32:
      int v2 = 51;
      break;
    case 0x33:
      int v2 = 52;
      break;
    case 0x34:
      int v2 = 53;
      break;
    case 0x35:
      int v2 = 54;
      break;
    case 0x36:
      int v2 = 55;
      break;
    case 0x37:
      int v2 = 56;
      break;
    case 0x38:
      int v2 = 57;
      break;
    case 0x39:
      int v2 = 58;
      break;
    case 0x3A:
      int v2 = 59;
      break;
    case 0x3B:
      int v2 = 60;
      break;
    case 0x3C:
      int v2 = 61;
      break;
    case 0x3D:
      int v2 = 62;
      break;
    case 0x3E:
      int v2 = 63;
      break;
    case 0x3F:
      int v2 = 64;
      break;
    case 0x40:
      int v2 = 65;
      break;
    case 0x41:
      int v2 = 66;
      break;
    case 0x42:
      int v2 = 67;
      break;
    case 0x43:
      int v2 = 68;
      break;
    case 0x44:
      int v2 = 69;
      break;
    case 0x45:
      int v2 = 70;
      break;
    case 0x46:
      int v2 = 71;
      break;
    case 0x47:
      int v2 = 72;
      break;
    case 0x48:
      int v2 = 73;
      break;
    case 0x49:
      int v2 = 74;
      break;
    case 0x4A:
      int v2 = 75;
      break;
    case 0x4B:
      int v2 = 76;
      break;
    case 0x4C:
      int v2 = 77;
      break;
    case 0x4D:
      int v2 = 78;
      break;
    case 0x4E:
      int v2 = 79;
      break;
    case 0x4F:
      int v2 = 80;
      break;
    case 0x50:
      int v2 = 81;
      break;
    case 0x51:
      int v2 = 82;
      break;
    case 0x52:
      int v2 = 83;
      break;
    case 0x53:
      int v2 = 84;
      break;
    case 0x54:
      int v2 = 85;
      break;
    case 0x55:
      int v2 = 86;
      break;
    case 0x56:
      int v2 = 87;
      break;
    case 0x57:
      int v2 = 88;
      break;
    case 0x58:
      int v2 = 89;
      break;
    case 0x59:
      int v2 = 90;
      break;
    case 0x5A:
      int v2 = 91;
      break;
    case 0x5B:
      int v2 = 92;
      break;
    case 0x5C:
      int v2 = 93;
      break;
    case 0x5D:
      int v2 = 94;
      break;
    case 0x5E:
      int v2 = 95;
      break;
    case 0x5F:
      int v2 = 96;
      break;
    case 0x60:
      int v2 = 97;
      break;
    case 0x61:
      int v2 = 98;
      break;
    case 0x62:
      int v2 = 99;
      break;
    case 0x63:
      int v2 = 100;
      break;
    case 0x64:
      int v2 = 101;
      break;
    case 0x65:
      int v2 = 102;
      break;
    case 0x66:
      int v2 = 103;
      break;
    case 0x67:
      int v2 = 104;
      break;
    case 0x68:
      int v2 = 105;
      break;
    case 0x69:
      int v2 = 106;
      break;
    case 0x6A:
      int v2 = 107;
      break;
    case 0x6B:
      int v2 = 108;
      break;
    case 0x6C:
      int v2 = 109;
      break;
    case 0x6D:
      int v2 = 110;
      break;
    case 0x6E:
      int v2 = 111;
      break;
    case 0x6F:
      int v2 = 112;
      break;
    case 0x70:
      int v2 = 113;
      break;
    case 0x71:
      int v2 = 114;
      break;
    case 0x72:
      int v2 = 115;
      break;
    case 0x73:
      int v2 = 116;
      break;
    case 0x74:
      int v2 = 117;
      break;
    case 0x75:
      int v2 = 118;
      break;
    case 0x76:
      int v2 = 119;
      break;
    case 0x77:
      int v2 = 120;
      break;
    case 0x78:
      int v2 = 121;
      break;
    case 0x79:
      int v2 = 122;
      break;
    case 0x7A:
      int v2 = 123;
      break;
    case 0x7B:
      int v2 = 124;
      break;
    case 0x7C:
      int v2 = 125;
      break;
    case 0x7D:
      int v2 = 126;
      break;
    case 0x7E:
      int v2 = 127;
      break;
    case 0x7F:
      int v2 = 128;
      break;
    case 0x80:
      int v2 = 129;
      break;
    case 0x81:
      int v2 = 130;
      break;
    case 0x82:
      int v2 = 131;
      break;
    case 0x83:
      int v2 = 132;
      break;
    case 0x84:
      int v2 = 133;
      break;
    case 0x85:
      int v2 = 134;
      break;
    case 0x86:
      int v2 = 135;
      break;
    case 0x87:
      int v2 = 136;
      break;
    case 0x88:
      int v2 = 137;
      break;
    case 0x89:
      int v2 = 138;
      break;
    case 0x8A:
      int v2 = 139;
      break;
    case 0x8B:
      int v2 = 140;
      break;
    case 0x8C:
      int v2 = 141;
      break;
    case 0x8D:
      int v2 = 142;
      break;
    case 0x8E:
      int v2 = 143;
      break;
    case 0x8F:
      int v2 = 144;
      break;
    case 0x90:
      int v2 = 145;
      break;
    case 0x91:
      int v2 = 146;
      break;
    case 0x92:
      int v2 = 147;
      break;
    case 0x93:
      int v2 = 148;
      break;
    case 0x94:
      int v2 = 149;
      break;
    case 0x95:
      int v2 = 150;
      break;
    case 0x96:
      int v2 = 151;
      break;
    case 0x97:
      int v2 = 152;
      break;
    case 0x98:
      int v2 = 153;
      break;
    case 0x99:
      int v2 = 154;
      break;
    case 0x9A:
      int v2 = 155;
      break;
    case 0x9B:
      int v2 = 156;
      break;
    case 0x9C:
      int v2 = 157;
      break;
    case 0x9D:
      int v2 = 158;
      break;
    case 0x9E:
      int v2 = 159;
      break;
    case 0x9F:
      int v2 = 160;
      break;
    case 0xA0:
      int v2 = 161;
      break;
    case 0xA1:
      int v2 = 162;
      break;
    case 0xA2:
      int v2 = 163;
      break;
    case 0xA3:
      int v2 = 164;
      break;
    case 0xA4:
      int v2 = 176;
      break;
    case 0xA5:
      int v2 = 177;
      break;
    case 0xA6:
      int v2 = 178;
      break;
    case 0xA7:
      int v2 = 179;
      break;
    case 0xA8:
      int v2 = 180;
      break;
    case 0xA9:
      int v2 = 181;
      break;
    case 0xAA:
      int v2 = 182;
      break;
    case 0xAB:
      int v2 = 183;
      break;
    case 0xAC:
      int v2 = 184;
      break;
    case 0xAD:
      int v2 = 185;
      break;
    case 0xAE:
      int v2 = 186;
      break;
    case 0xAF:
      int v2 = 187;
      break;
    case 0xB0:
      int v2 = 188;
      break;
    case 0xB1:
      int v2 = 189;
      break;
    case 0xB2:
      int v2 = 190;
      break;
    case 0xB3:
      int v2 = 191;
      break;
    case 0xB4:
      int v2 = 192;
      break;
    case 0xB5:
      int v2 = 193;
      break;
    case 0xB6:
      int v2 = 194;
      break;
    case 0xB7:
      int v2 = 195;
      break;
    case 0xB8:
      int v2 = 196;
      break;
    case 0xB9:
      int v2 = 197;
      break;
    case 0xBA:
      int v2 = 198;
      break;
    case 0xBB:
      int v2 = 199;
      break;
    case 0xBC:
      int v2 = 200;
      break;
    case 0xBD:
      int v2 = 201;
      break;
    case 0xBE:
      int v2 = 202;
      break;
    case 0xBF:
      int v2 = 203;
      break;
    case 0xC0:
      int v2 = 204;
      break;
    case 0xC1:
      int v2 = 205;
      break;
    case 0xC2:
      int v2 = 206;
      break;
    case 0xC3:
      int v2 = 207;
      break;
    case 0xC4:
      int v2 = 208;
      break;
    case 0xC5:
      int v2 = 209;
      break;
    case 0xC6:
      int v2 = 210;
      break;
    case 0xC7:
      int v2 = 211;
      break;
    case 0xC8:
      int v2 = 212;
      break;
    case 0xC9:
      int v2 = 213;
      break;
    case 0xCA:
      int v2 = 214;
      break;
    case 0xCB:
      int v2 = 215;
      break;
    case 0xCC:
      int v2 = 216;
      break;
    case 0xCD:
      int v2 = 217;
      break;
    case 0xCE:
      int v2 = 218;
      break;
    case 0xCF:
      int v2 = 219;
      break;
    case 0xD0:
      int v2 = 220;
      break;
    case 0xD1:
      int v2 = 221;
      break;
    case 0xD2:
      int v2 = 224;
      break;
    case 0xD3:
      int v2 = 225;
      break;
    case 0xD4:
      int v2 = 226;
      break;
    case 0xD5:
      int v2 = 227;
      break;
    case 0xD6:
      int v2 = 228;
      break;
    case 0xD7:
      int v2 = 229;
      break;
    case 0xD8:
      int v2 = 230;
      break;
    case 0xD9:
      int v2 = 231;
      break;
    default:
      break;
  }
  int v3 = 1;
  switch(*a2)
  {
    case 1:
      int v3 = 2;
      break;
    case 2:
      int v3 = 3;
      break;
    case 3:
      int v3 = 4;
      break;
    case 4:
      int v3 = 5;
      break;
    case 5:
      int v3 = 6;
      break;
    case 6:
      int v3 = 7;
      break;
    case 7:
      int v3 = 8;
      break;
    case 8:
      int v3 = 9;
      break;
    case 9:
      int v3 = 10;
      break;
    case 0xA:
      int v3 = 11;
      break;
    case 0xB:
      int v3 = 12;
      break;
    case 0xC:
      int v3 = 13;
      break;
    case 0xD:
      int v3 = 14;
      break;
    case 0xE:
      int v3 = 15;
      break;
    case 0xF:
      int v3 = 16;
      break;
    case 0x10:
      int v3 = 17;
      break;
    case 0x11:
      int v3 = 18;
      break;
    case 0x12:
      int v3 = 19;
      break;
    case 0x13:
      int v3 = 20;
      break;
    case 0x14:
      int v3 = 21;
      break;
    case 0x15:
      int v3 = 22;
      break;
    case 0x16:
      int v3 = 23;
      break;
    case 0x17:
      int v3 = 24;
      break;
    case 0x18:
      int v3 = 25;
      break;
    case 0x19:
      int v3 = 26;
      break;
    case 0x1A:
      int v3 = 27;
      break;
    case 0x1B:
      int v3 = 28;
      break;
    case 0x1C:
      int v3 = 29;
      break;
    case 0x1D:
      int v3 = 30;
      break;
    case 0x1E:
      int v3 = 31;
      break;
    case 0x1F:
      int v3 = 32;
      break;
    case 0x20:
      int v3 = 33;
      break;
    case 0x21:
      int v3 = 34;
      break;
    case 0x22:
      int v3 = 35;
      break;
    case 0x23:
      int v3 = 36;
      break;
    case 0x24:
      int v3 = 37;
      break;
    case 0x25:
      int v3 = 38;
      break;
    case 0x26:
      int v3 = 39;
      break;
    case 0x27:
      int v3 = 40;
      break;
    case 0x28:
      int v3 = 41;
      break;
    case 0x29:
      int v3 = 42;
      break;
    case 0x2A:
      int v3 = 43;
      break;
    case 0x2B:
      int v3 = 44;
      break;
    case 0x2C:
      int v3 = 45;
      break;
    case 0x2D:
      int v3 = 46;
      break;
    case 0x2E:
      int v3 = 47;
      break;
    case 0x2F:
      int v3 = 48;
      break;
    case 0x30:
      int v3 = 49;
      break;
    case 0x31:
      int v3 = 50;
      break;
    case 0x32:
      int v3 = 51;
      break;
    case 0x33:
      int v3 = 52;
      break;
    case 0x34:
      int v3 = 53;
      break;
    case 0x35:
      int v3 = 54;
      break;
    case 0x36:
      int v3 = 55;
      break;
    case 0x37:
      int v3 = 56;
      break;
    case 0x38:
      int v3 = 57;
      break;
    case 0x39:
      int v3 = 58;
      break;
    case 0x3A:
      int v3 = 59;
      break;
    case 0x3B:
      int v3 = 60;
      break;
    case 0x3C:
      int v3 = 61;
      break;
    case 0x3D:
      int v3 = 62;
      break;
    case 0x3E:
      int v3 = 63;
      break;
    case 0x3F:
      int v3 = 64;
      break;
    case 0x40:
      int v3 = 65;
      break;
    case 0x41:
      int v3 = 66;
      break;
    case 0x42:
      int v3 = 67;
      break;
    case 0x43:
      int v3 = 68;
      break;
    case 0x44:
      int v3 = 69;
      break;
    case 0x45:
      int v3 = 70;
      break;
    case 0x46:
      int v3 = 71;
      break;
    case 0x47:
      int v3 = 72;
      break;
    case 0x48:
      int v3 = 73;
      break;
    case 0x49:
      int v3 = 74;
      break;
    case 0x4A:
      int v3 = 75;
      break;
    case 0x4B:
      int v3 = 76;
      break;
    case 0x4C:
      int v3 = 77;
      break;
    case 0x4D:
      int v3 = 78;
      break;
    case 0x4E:
      int v3 = 79;
      break;
    case 0x4F:
      int v3 = 80;
      break;
    case 0x50:
      int v3 = 81;
      break;
    case 0x51:
      int v3 = 82;
      break;
    case 0x52:
      int v3 = 83;
      break;
    case 0x53:
      int v3 = 84;
      break;
    case 0x54:
      int v3 = 85;
      break;
    case 0x55:
      int v3 = 86;
      break;
    case 0x56:
      int v3 = 87;
      break;
    case 0x57:
      int v3 = 88;
      break;
    case 0x58:
      int v3 = 89;
      break;
    case 0x59:
      int v3 = 90;
      break;
    case 0x5A:
      int v3 = 91;
      break;
    case 0x5B:
      int v3 = 92;
      break;
    case 0x5C:
      int v3 = 93;
      break;
    case 0x5D:
      int v3 = 94;
      break;
    case 0x5E:
      int v3 = 95;
      break;
    case 0x5F:
      int v3 = 96;
      break;
    case 0x60:
      int v3 = 97;
      break;
    case 0x61:
      int v3 = 98;
      break;
    case 0x62:
      int v3 = 99;
      break;
    case 0x63:
      int v3 = 100;
      break;
    case 0x64:
      int v3 = 101;
      break;
    case 0x65:
      int v3 = 102;
      break;
    case 0x66:
      int v3 = 103;
      break;
    case 0x67:
      int v3 = 104;
      break;
    case 0x68:
      int v3 = 105;
      break;
    case 0x69:
      int v3 = 106;
      break;
    case 0x6A:
      int v3 = 107;
      break;
    case 0x6B:
      int v3 = 108;
      break;
    case 0x6C:
      int v3 = 109;
      break;
    case 0x6D:
      int v3 = 110;
      break;
    case 0x6E:
      int v3 = 111;
      break;
    case 0x6F:
      int v3 = 112;
      break;
    case 0x70:
      int v3 = 113;
      break;
    case 0x71:
      int v3 = 114;
      break;
    case 0x72:
      int v3 = 115;
      break;
    case 0x73:
      int v3 = 116;
      break;
    case 0x74:
      int v3 = 117;
      break;
    case 0x75:
      int v3 = 118;
      break;
    case 0x76:
      int v3 = 119;
      break;
    case 0x77:
      int v3 = 120;
      break;
    case 0x78:
      int v3 = 121;
      break;
    case 0x79:
      int v3 = 122;
      break;
    case 0x7A:
      int v3 = 123;
      break;
    case 0x7B:
      int v3 = 124;
      break;
    case 0x7C:
      int v3 = 125;
      break;
    case 0x7D:
      int v3 = 126;
      break;
    case 0x7E:
      int v3 = 127;
      break;
    case 0x7F:
      int v3 = 128;
      break;
    case 0x80:
      int v3 = 129;
      break;
    case 0x81:
      int v3 = 130;
      break;
    case 0x82:
      int v3 = 131;
      break;
    case 0x83:
      int v3 = 132;
      break;
    case 0x84:
      int v3 = 133;
      break;
    case 0x85:
      int v3 = 134;
      break;
    case 0x86:
      int v3 = 135;
      break;
    case 0x87:
      int v3 = 136;
      break;
    case 0x88:
      int v3 = 137;
      break;
    case 0x89:
      int v3 = 138;
      break;
    case 0x8A:
      int v3 = 139;
      break;
    case 0x8B:
      int v3 = 140;
      break;
    case 0x8C:
      int v3 = 141;
      break;
    case 0x8D:
      int v3 = 142;
      break;
    case 0x8E:
      int v3 = 143;
      break;
    case 0x8F:
      int v3 = 144;
      break;
    case 0x90:
      int v3 = 145;
      break;
    case 0x91:
      int v3 = 146;
      break;
    case 0x92:
      int v3 = 147;
      break;
    case 0x93:
      int v3 = 148;
      break;
    case 0x94:
      int v3 = 149;
      break;
    case 0x95:
      int v3 = 150;
      break;
    case 0x96:
      int v3 = 151;
      break;
    case 0x97:
      int v3 = 152;
      break;
    case 0x98:
      int v3 = 153;
      break;
    case 0x99:
      int v3 = 154;
      break;
    case 0x9A:
      int v3 = 155;
      break;
    case 0x9B:
      int v3 = 156;
      break;
    case 0x9C:
      int v3 = 157;
      break;
    case 0x9D:
      int v3 = 158;
      break;
    case 0x9E:
      int v3 = 159;
      break;
    case 0x9F:
      int v3 = 160;
      break;
    case 0xA0:
      int v3 = 161;
      break;
    case 0xA1:
      int v3 = 162;
      break;
    case 0xA2:
      int v3 = 163;
      break;
    case 0xA3:
      int v3 = 164;
      break;
    case 0xA4:
      int v3 = 176;
      break;
    case 0xA5:
      int v3 = 177;
      break;
    case 0xA6:
      int v3 = 178;
      break;
    case 0xA7:
      int v3 = 179;
      break;
    case 0xA8:
      int v3 = 180;
      break;
    case 0xA9:
      int v3 = 181;
      break;
    case 0xAA:
      int v3 = 182;
      break;
    case 0xAB:
      int v3 = 183;
      break;
    case 0xAC:
      int v3 = 184;
      break;
    case 0xAD:
      int v3 = 185;
      break;
    case 0xAE:
      int v3 = 186;
      break;
    case 0xAF:
      int v3 = 187;
      break;
    case 0xB0:
      int v3 = 188;
      break;
    case 0xB1:
      int v3 = 189;
      break;
    case 0xB2:
      int v3 = 190;
      break;
    case 0xB3:
      int v3 = 191;
      break;
    case 0xB4:
      int v3 = 192;
      break;
    case 0xB5:
      int v3 = 193;
      break;
    case 0xB6:
      int v3 = 194;
      break;
    case 0xB7:
      int v3 = 195;
      break;
    case 0xB8:
      int v3 = 196;
      break;
    case 0xB9:
      int v3 = 197;
      break;
    case 0xBA:
      int v3 = 198;
      break;
    case 0xBB:
      int v3 = 199;
      break;
    case 0xBC:
      int v3 = 200;
      break;
    case 0xBD:
      int v3 = 201;
      break;
    case 0xBE:
      int v3 = 202;
      break;
    case 0xBF:
      int v3 = 203;
      break;
    case 0xC0:
      int v3 = 204;
      break;
    case 0xC1:
      int v3 = 205;
      break;
    case 0xC2:
      int v3 = 206;
      break;
    case 0xC3:
      int v3 = 207;
      break;
    case 0xC4:
      int v3 = 208;
      break;
    case 0xC5:
      int v3 = 209;
      break;
    case 0xC6:
      int v3 = 210;
      break;
    case 0xC7:
      int v3 = 211;
      break;
    case 0xC8:
      int v3 = 212;
      break;
    case 0xC9:
      int v3 = 213;
      break;
    case 0xCA:
      int v3 = 214;
      break;
    case 0xCB:
      int v3 = 215;
      break;
    case 0xCC:
      int v3 = 216;
      break;
    case 0xCD:
      int v3 = 217;
      break;
    case 0xCE:
      int v3 = 218;
      break;
    case 0xCF:
      int v3 = 219;
      break;
    case 0xD0:
      int v3 = 220;
      break;
    case 0xD1:
      int v3 = 221;
      break;
    case 0xD2:
      int v3 = 224;
      break;
    case 0xD3:
      int v3 = 225;
      break;
    case 0xD4:
      int v3 = 226;
      break;
    case 0xD5:
      int v3 = 227;
      break;
    case 0xD6:
      int v3 = 228;
      break;
    case 0xD7:
      int v3 = 229;
      break;
    case 0xD8:
      int v3 = 230;
      break;
    case 0xD9:
      int v3 = 231;
      break;
    default:
      return v2 == v3;
  }
  return v2 == v3;
}

uint64_t sub_24B50ED2C()
{
  return sub_24B534EB0();
}

uint64_t sub_24B50F7C4()
{
  return sub_24B534E90();
}

uint64_t sub_24B510240()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::KeyboardOrKeypadUsage_optional sub_24B510CD4(Swift::UInt16 *a1)
{
  return HIDUsage.KeyboardOrKeypadUsage.init(rawValue:)(*a1);
}

void sub_24B510CDC(__int16 *a1@<X8>)
{
  __int16 v2 = 1;
  switch(*v1)
  {
    case 1:
      *a1 = 2;
      break;
    case 2:
      *a1 = 3;
      break;
    case 3:
      *a1 = 4;
      break;
    case 4:
      *a1 = 5;
      break;
    case 5:
      *a1 = 6;
      break;
    case 6:
      *a1 = 7;
      break;
    case 7:
      *a1 = 8;
      break;
    case 8:
      *a1 = 9;
      break;
    case 9:
      *a1 = 10;
      break;
    case 0xA:
      *a1 = 11;
      break;
    case 0xB:
      *a1 = 12;
      break;
    case 0xC:
      *a1 = 13;
      break;
    case 0xD:
      *a1 = 14;
      break;
    case 0xE:
      *a1 = 15;
      break;
    case 0xF:
      *a1 = 16;
      break;
    case 0x10:
      *a1 = 17;
      break;
    case 0x11:
      *a1 = 18;
      break;
    case 0x12:
      *a1 = 19;
      break;
    case 0x13:
      *a1 = 20;
      break;
    case 0x14:
      *a1 = 21;
      break;
    case 0x15:
      *a1 = 22;
      break;
    case 0x16:
      *a1 = 23;
      break;
    case 0x17:
      *a1 = 24;
      break;
    case 0x18:
      *a1 = 25;
      break;
    case 0x19:
      *a1 = 26;
      break;
    case 0x1A:
      *a1 = 27;
      break;
    case 0x1B:
      *a1 = 28;
      break;
    case 0x1C:
      *a1 = 29;
      break;
    case 0x1D:
      *a1 = 30;
      break;
    case 0x1E:
      *a1 = 31;
      break;
    case 0x1F:
      *a1 = 32;
      break;
    case 0x20:
      *a1 = 33;
      break;
    case 0x21:
      *a1 = 34;
      break;
    case 0x22:
      *a1 = 35;
      break;
    case 0x23:
      *a1 = 36;
      break;
    case 0x24:
      *a1 = 37;
      break;
    case 0x25:
      *a1 = 38;
      break;
    case 0x26:
      *a1 = 39;
      break;
    case 0x27:
      *a1 = 40;
      break;
    case 0x28:
      *a1 = 41;
      break;
    case 0x29:
      *a1 = 42;
      break;
    case 0x2A:
      *a1 = 43;
      break;
    case 0x2B:
      *a1 = 44;
      break;
    case 0x2C:
      *a1 = 45;
      break;
    case 0x2D:
      *a1 = 46;
      break;
    case 0x2E:
      *a1 = 47;
      break;
    case 0x2F:
      *a1 = 48;
      break;
    case 0x30:
      *a1 = 49;
      break;
    case 0x31:
      *a1 = 50;
      break;
    case 0x32:
      *a1 = 51;
      break;
    case 0x33:
      *a1 = 52;
      break;
    case 0x34:
      *a1 = 53;
      break;
    case 0x35:
      *a1 = 54;
      break;
    case 0x36:
      *a1 = 55;
      break;
    case 0x37:
      *a1 = 56;
      break;
    case 0x38:
      *a1 = 57;
      break;
    case 0x39:
      *a1 = 58;
      break;
    case 0x3A:
      *a1 = 59;
      break;
    case 0x3B:
      *a1 = 60;
      break;
    case 0x3C:
      *a1 = 61;
      break;
    case 0x3D:
      *a1 = 62;
      break;
    case 0x3E:
      *a1 = 63;
      break;
    case 0x3F:
      *a1 = 64;
      break;
    case 0x40:
      *a1 = 65;
      break;
    case 0x41:
      *a1 = 66;
      break;
    case 0x42:
      *a1 = 67;
      break;
    case 0x43:
      *a1 = 68;
      break;
    case 0x44:
      *a1 = 69;
      break;
    case 0x45:
      *a1 = 70;
      break;
    case 0x46:
      *a1 = 71;
      break;
    case 0x47:
      *a1 = 72;
      break;
    case 0x48:
      *a1 = 73;
      break;
    case 0x49:
      *a1 = 74;
      break;
    case 0x4A:
      *a1 = 75;
      break;
    case 0x4B:
      *a1 = 76;
      break;
    case 0x4C:
      *a1 = 77;
      break;
    case 0x4D:
      *a1 = 78;
      break;
    case 0x4E:
      *a1 = 79;
      break;
    case 0x4F:
      *a1 = 80;
      break;
    case 0x50:
      *a1 = 81;
      break;
    case 0x51:
      *a1 = 82;
      break;
    case 0x52:
      *a1 = 83;
      break;
    case 0x53:
      *a1 = 84;
      break;
    case 0x54:
      *a1 = 85;
      break;
    case 0x55:
      *a1 = 86;
      break;
    case 0x56:
      *a1 = 87;
      break;
    case 0x57:
      *a1 = 88;
      break;
    case 0x58:
      *a1 = 89;
      break;
    case 0x59:
      *a1 = 90;
      break;
    case 0x5A:
      *a1 = 91;
      break;
    case 0x5B:
      *a1 = 92;
      break;
    case 0x5C:
      *a1 = 93;
      break;
    case 0x5D:
      *a1 = 94;
      break;
    case 0x5E:
      *a1 = 95;
      break;
    case 0x5F:
      *a1 = 96;
      break;
    case 0x60:
      *a1 = 97;
      break;
    case 0x61:
      *a1 = 98;
      break;
    case 0x62:
      *a1 = 99;
      break;
    case 0x63:
      *a1 = 100;
      break;
    case 0x64:
      *a1 = 101;
      break;
    case 0x65:
      *a1 = 102;
      break;
    case 0x66:
      *a1 = 103;
      break;
    case 0x67:
      *a1 = 104;
      break;
    case 0x68:
      *a1 = 105;
      break;
    case 0x69:
      *a1 = 106;
      break;
    case 0x6A:
      *a1 = 107;
      break;
    case 0x6B:
      *a1 = 108;
      break;
    case 0x6C:
      *a1 = 109;
      break;
    case 0x6D:
      *a1 = 110;
      break;
    case 0x6E:
      *a1 = 111;
      break;
    case 0x6F:
      *a1 = 112;
      break;
    case 0x70:
      *a1 = 113;
      break;
    case 0x71:
      *a1 = 114;
      break;
    case 0x72:
      *a1 = 115;
      break;
    case 0x73:
      *a1 = 116;
      break;
    case 0x74:
      *a1 = 117;
      break;
    case 0x75:
      *a1 = 118;
      break;
    case 0x76:
      *a1 = 119;
      break;
    case 0x77:
      *a1 = 120;
      break;
    case 0x78:
      *a1 = 121;
      break;
    case 0x79:
      *a1 = 122;
      break;
    case 0x7A:
      *a1 = 123;
      break;
    case 0x7B:
      *a1 = 124;
      break;
    case 0x7C:
      *a1 = 125;
      break;
    case 0x7D:
      *a1 = 126;
      break;
    case 0x7E:
      *a1 = 127;
      break;
    case 0x7F:
      *a1 = 128;
      break;
    case 0x80:
      *a1 = 129;
      break;
    case 0x81:
      *a1 = 130;
      break;
    case 0x82:
      *a1 = 131;
      break;
    case 0x83:
      *a1 = 132;
      break;
    case 0x84:
      *a1 = 133;
      break;
    case 0x85:
      *a1 = 134;
      break;
    case 0x86:
      *a1 = 135;
      break;
    case 0x87:
      *a1 = 136;
      break;
    case 0x88:
      *a1 = 137;
      break;
    case 0x89:
      *a1 = 138;
      break;
    case 0x8A:
      *a1 = 139;
      break;
    case 0x8B:
      *a1 = 140;
      break;
    case 0x8C:
      *a1 = 141;
      break;
    case 0x8D:
      *a1 = 142;
      break;
    case 0x8E:
      *a1 = 143;
      break;
    case 0x8F:
      *a1 = 144;
      break;
    case 0x90:
      *a1 = 145;
      break;
    case 0x91:
      *a1 = 146;
      break;
    case 0x92:
      *a1 = 147;
      break;
    case 0x93:
      *a1 = 148;
      break;
    case 0x94:
      *a1 = 149;
      break;
    case 0x95:
      *a1 = 150;
      break;
    case 0x96:
      *a1 = 151;
      break;
    case 0x97:
      *a1 = 152;
      break;
    case 0x98:
      *a1 = 153;
      break;
    case 0x99:
      *a1 = 154;
      break;
    case 0x9A:
      *a1 = 155;
      break;
    case 0x9B:
      *a1 = 156;
      break;
    case 0x9C:
      *a1 = 157;
      break;
    case 0x9D:
      *a1 = 158;
      break;
    case 0x9E:
      *a1 = 159;
      break;
    case 0x9F:
      *a1 = 160;
      break;
    case 0xA0:
      *a1 = 161;
      break;
    case 0xA1:
      *a1 = 162;
      break;
    case 0xA2:
      *a1 = 163;
      break;
    case 0xA3:
      *a1 = 164;
      break;
    case 0xA4:
      *a1 = 176;
      break;
    case 0xA5:
      *a1 = 177;
      break;
    case 0xA6:
      *a1 = 178;
      break;
    case 0xA7:
      *a1 = 179;
      break;
    case 0xA8:
      *a1 = 180;
      break;
    case 0xA9:
      *a1 = 181;
      break;
    case 0xAA:
      *a1 = 182;
      break;
    case 0xAB:
      *a1 = 183;
      break;
    case 0xAC:
      *a1 = 184;
      break;
    case 0xAD:
      *a1 = 185;
      break;
    case 0xAE:
      *a1 = 186;
      break;
    case 0xAF:
      *a1 = 187;
      break;
    case 0xB0:
      *a1 = 188;
      break;
    case 0xB1:
      *a1 = 189;
      break;
    case 0xB2:
      *a1 = 190;
      break;
    case 0xB3:
      *a1 = 191;
      break;
    case 0xB4:
      *a1 = 192;
      break;
    case 0xB5:
      *a1 = 193;
      break;
    case 0xB6:
      *a1 = 194;
      break;
    case 0xB7:
      *a1 = 195;
      break;
    case 0xB8:
      *a1 = 196;
      break;
    case 0xB9:
      *a1 = 197;
      break;
    case 0xBA:
      *a1 = 198;
      break;
    case 0xBB:
      *a1 = 199;
      break;
    case 0xBC:
      *a1 = 200;
      break;
    case 0xBD:
      *a1 = 201;
      break;
    case 0xBE:
      *a1 = 202;
      break;
    case 0xBF:
      *a1 = 203;
      break;
    case 0xC0:
      *a1 = 204;
      break;
    case 0xC1:
      *a1 = 205;
      break;
    case 0xC2:
      *a1 = 206;
      break;
    case 0xC3:
      *a1 = 207;
      break;
    case 0xC4:
      *a1 = 208;
      break;
    case 0xC5:
      *a1 = 209;
      break;
    case 0xC6:
      *a1 = 210;
      break;
    case 0xC7:
      *a1 = 211;
      break;
    case 0xC8:
      *a1 = 212;
      break;
    case 0xC9:
      *a1 = 213;
      break;
    case 0xCA:
      *a1 = 214;
      break;
    case 0xCB:
      *a1 = 215;
      break;
    case 0xCC:
      *a1 = 216;
      break;
    case 0xCD:
      *a1 = 217;
      break;
    case 0xCE:
      *a1 = 218;
      break;
    case 0xCF:
      *a1 = 219;
      break;
    case 0xD0:
      *a1 = 220;
      break;
    case 0xD1:
      *a1 = 221;
      break;
    case 0xD2:
      *a1 = 224;
      break;
    case 0xD3:
      *a1 = 225;
      break;
    case 0xD4:
      *a1 = 226;
      break;
    case 0xD5:
      *a1 = 227;
      break;
    case 0xD6:
      *a1 = 228;
      break;
    case 0xD7:
      *a1 = 229;
      break;
    case 0xD8:
      *a1 = 230;
      break;
    case 0xD9:
      __int16 v2 = 231;
      goto LABEL_219;
    default:
LABEL_219:
      *a1 = v2;
      break;
  }
}

uint64_t static HIDUsage.LEDUsage.page.getter()
{
  return 8;
}

BOOL sub_24B511AA0(char *a1, char *a2)
{
  return word_24B53A562[*a1] == word_24B53A562[*a2];
}

uint64_t sub_24B511AC4()
{
  return sub_24B534EB0();
}

uint64_t sub_24B511B14()
{
  return sub_24B534E90();
}

uint64_t sub_24B511B4C()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::LEDUsage_optional sub_24B511B98(Swift::UInt16 *a1)
{
  return HIDUsage.LEDUsage.init(rawValue:)(*a1);
}

void sub_24B511BA0(_WORD *a1@<X8>)
{
  *a1 = word_24B53A562[*v1];
}

uint64_t static HIDUsage.ButtonUsage.page.getter()
{
  return 9;
}

uint64_t static HIDUsage.OrdinalUsage.page.getter()
{
  return 10;
}

uint64_t static HIDUsage.TelephonyDeviceUsage.page.getter()
{
  return 11;
}

BOOL sub_24B511BD0(char *a1, char *a2)
{
  return word_24B53A622[*a1] == word_24B53A622[*a2];
}

uint64_t sub_24B511BF4()
{
  return sub_24B534EB0();
}

uint64_t sub_24B511C44()
{
  return sub_24B534E90();
}

uint64_t sub_24B511C7C()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::TelephonyDeviceUsage_optional sub_24B511CC8(Swift::UInt16 *a1)
{
  return HIDUsage.TelephonyDeviceUsage.init(rawValue:)(*a1);
}

void sub_24B511CD0(_WORD *a1@<X8>)
{
  *a1 = word_24B53A622[*v1];
}

uint64_t static HIDUsage.ConsumerUsage.page.getter()
{
  return 12;
}

BOOL sub_24B511CF0(__int16 *a1, __int16 *a2)
{
  return word_24B53A6E8[*a1] == word_24B53A6E8[*a2];
}

uint64_t sub_24B511D14()
{
  return sub_24B534EB0();
}

uint64_t sub_24B511D64()
{
  return sub_24B534E90();
}

uint64_t sub_24B511D9C()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::ConsumerUsage_optional sub_24B511DE8(Swift::UInt16 *a1)
{
  return HIDUsage.ConsumerUsage.init(rawValue:)(*a1);
}

void sub_24B511DF0(_WORD *a1@<X8>)
{
  *a1 = word_24B53A6E8[*v1];
}

uint64_t static HIDUsage.DigitizersUsage.page.getter()
{
  return 13;
}

BOOL sub_24B511E10(char *a1, char *a2)
{
  return word_24B53AA6C[*a1] == word_24B53AA6C[*a2];
}

uint64_t sub_24B511E34()
{
  return sub_24B534EB0();
}

uint64_t sub_24B511E84()
{
  return sub_24B534E90();
}

uint64_t sub_24B511EBC()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::DigitizersUsage_optional sub_24B511F08(Swift::UInt16 *a1)
{
  return HIDUsage.DigitizersUsage.init(rawValue:)(*a1);
}

void sub_24B511F10(_WORD *a1@<X8>)
{
  *a1 = word_24B53AA6C[*v1];
}

uint64_t static HIDUsage.HapticsUsage.page.getter()
{
  return 14;
}

BOOL sub_24B511F30(char *a1, char *a2)
{
  return word_24B53AB44[*a1] == word_24B53AB44[*a2];
}

uint64_t sub_24B511F54()
{
  return sub_24B534EB0();
}

uint64_t sub_24B511FA4()
{
  return sub_24B534E90();
}

uint64_t sub_24B511FDC()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::HapticsUsage_optional sub_24B512028(Swift::UInt16 *a1)
{
  return HIDUsage.HapticsUsage.init(rawValue:)(*a1);
}

void sub_24B512030(_WORD *a1@<X8>)
{
  *a1 = word_24B53AB44[*v1];
}

uint64_t static HIDUsage.PhysicalInputDeviceUsage.page.getter()
{
  return 15;
}

BOOL sub_24B512050(char *a1, char *a2)
{
  return word_24B53AB7E[*a1] == word_24B53AB7E[*a2];
}

uint64_t sub_24B512074()
{
  return sub_24B534EB0();
}

uint64_t sub_24B5120C4()
{
  return sub_24B534E90();
}

uint64_t sub_24B5120FC()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::PhysicalInputDeviceUsage_optional sub_24B512148(Swift::UInt16 *a1)
{
  return HIDUsage.PhysicalInputDeviceUsage.init(rawValue:)(*a1);
}

void sub_24B512150(_WORD *a1@<X8>)
{
  *a1 = word_24B53AB7E[*v1];
}

uint64_t static HIDUsage.SOCUsage.page.getter()
{
  return 17;
}

CoreHID::HIDUsage::SOCUsage_optional sub_24B512178(Swift::UInt16 *a1)
{
  return HIDUsage.SOCUsage.init(rawValue:)(*a1);
}

uint64_t static HIDUsage.EyeAndHeadTrackersUsage.page.getter()
{
  return 18;
}

BOOL sub_24B512188(char *a1, char *a2)
{
  return word_24B53AC50[*a1] == word_24B53AC50[*a2];
}

uint64_t sub_24B5121AC()
{
  return sub_24B534EB0();
}

uint64_t sub_24B5121FC()
{
  return sub_24B534E90();
}

uint64_t sub_24B512234()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::EyeAndHeadTrackersUsage_optional sub_24B512280(Swift::UInt16 *a1)
{
  return HIDUsage.EyeAndHeadTrackersUsage.init(rawValue:)(*a1);
}

void sub_24B512288(_WORD *a1@<X8>)
{
  *a1 = word_24B53AC50[*v1];
}

uint64_t static HIDUsage.AuxiliaryDisplayUsage.page.getter()
{
  return 20;
}

BOOL sub_24B5122A8(char *a1, char *a2)
{
  return word_24B53AC94[*a1] == word_24B53AC94[*a2];
}

uint64_t sub_24B5122CC()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51231C()
{
  return sub_24B534E90();
}

uint64_t sub_24B512354()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::AuxiliaryDisplayUsage_optional sub_24B5123A0(Swift::UInt16 *a1)
{
  return HIDUsage.AuxiliaryDisplayUsage.init(rawValue:)(*a1);
}

void sub_24B5123A8(_WORD *a1@<X8>)
{
  *a1 = word_24B53AC94[*v1];
}

uint64_t static HIDUsage.SensorsUsage.page.getter()
{
  return 32;
}

BOOL sub_24B5123C8(__int16 *a1, __int16 *a2)
{
  return word_24B53AD2A[*a1] == word_24B53AD2A[*a2];
}

uint64_t sub_24B5123EC()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51243C()
{
  return sub_24B534E90();
}

uint64_t sub_24B512474()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::SensorsUsage_optional sub_24B5124C0(Swift::UInt16 *a1)
{
  return HIDUsage.SensorsUsage.init(rawValue:)(*a1);
}

void sub_24B5124C8(_WORD *a1@<X8>)
{
  *a1 = word_24B53AD2A[*v1];
}

uint64_t static HIDUsage.MedicalInstrumentUsage.page.getter()
{
  return 64;
}

BOOL sub_24B5124E8(char *a1, char *a2)
{
  return word_24B53B25C[*a1] == word_24B53B25C[*a2];
}

uint64_t sub_24B51250C()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51255C()
{
  return sub_24B534E90();
}

uint64_t sub_24B512594()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::MedicalInstrumentUsage_optional sub_24B5125E0(Swift::UInt16 *a1)
{
  return HIDUsage.MedicalInstrumentUsage.init(rawValue:)(*a1);
}

void sub_24B5125E8(_WORD *a1@<X8>)
{
  *a1 = word_24B53B25C[*v1];
}

uint64_t static HIDUsage.BrailleDisplayUsage.page.getter()
{
  return 65;
}

BOOL sub_24B512608(char *a1, char *a2)
{
  return word_24B53B296[*a1] == word_24B53B296[*a2];
}

uint64_t sub_24B51262C()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51267C()
{
  return sub_24B534E90();
}

uint64_t sub_24B5126B4()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::BrailleDisplayUsage_optional sub_24B512700(Swift::UInt16 *a1)
{
  return HIDUsage.BrailleDisplayUsage.init(rawValue:)(*a1);
}

void sub_24B512708(_WORD *a1@<X8>)
{
  *a1 = word_24B53B296[*v1];
}

uint64_t static HIDUsage.LightingAndIlluminationUsage.page.getter()
{
  return 89;
}

BOOL sub_24B512728(char *a1, char *a2)
{
  return word_24B53B2EC[*a1] == word_24B53B2EC[*a2];
}

uint64_t sub_24B51274C()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51279C()
{
  return sub_24B534E90();
}

uint64_t sub_24B5127D4()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::LightingAndIlluminationUsage_optional sub_24B512820(Swift::UInt16 *a1)
{
  return HIDUsage.LightingAndIlluminationUsage.init(rawValue:)(*a1);
}

void sub_24B512828(_WORD *a1@<X8>)
{
  *a1 = word_24B53B2EC[*v1];
}

uint64_t static HIDUsage.MonitorUsage.page.getter()
{
  return 128;
}

uint64_t sub_24B512848()
{
  return sub_24B534EB0();
}

uint64_t sub_24B512890()
{
  return sub_24B534E90();
}

uint64_t sub_24B5128C0()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::MonitorUsage_optional sub_24B512904(Swift::UInt16 *a1)
{
  return HIDUsage.MonitorUsage.init(rawValue:)(*a1);
}

void sub_24B51290C(_WORD *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t static HIDUsage.MonitorEnumeratedUsage.page.getter()
{
  return 129;
}

uint64_t static HIDUsage.VESAVirtualControlsUsage.page.getter()
{
  return 130;
}

BOOL sub_24B51292C(char *a1, char *a2)
{
  return word_24B53B32E[*a1] == word_24B53B32E[*a2];
}

uint64_t sub_24B512950()
{
  return sub_24B534EB0();
}

uint64_t sub_24B5129A0()
{
  return sub_24B534E90();
}

uint64_t sub_24B5129D8()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::VESAVirtualControlsUsage_optional sub_24B512A24(Swift::UInt16 *a1)
{
  return HIDUsage.VESAVirtualControlsUsage.init(rawValue:)(*a1);
}

void sub_24B512A2C(_WORD *a1@<X8>)
{
  *a1 = word_24B53B32E[*v1];
}

uint64_t static HIDUsage.PowerUsage.page.getter()
{
  return 132;
}

BOOL sub_24B512A4C(char *a1, char *a2)
{
  return word_24B53B388[*a1] == word_24B53B388[*a2];
}

uint64_t sub_24B512A70()
{
  return sub_24B534EB0();
}

uint64_t sub_24B512AC0()
{
  return sub_24B534E90();
}

uint64_t sub_24B512AF8()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::PowerUsage_optional sub_24B512B44(Swift::UInt16 *a1)
{
  return HIDUsage.PowerUsage.init(rawValue:)(*a1);
}

void sub_24B512B4C(_WORD *a1@<X8>)
{
  *a1 = word_24B53B388[*v1];
}

uint64_t static HIDUsage.BatterySystemUsage.page.getter()
{
  return 133;
}

BOOL sub_24B512B6C(char *a1, char *a2)
{
  return word_24B53B422[*a1] == word_24B53B422[*a2];
}

uint64_t sub_24B512B90()
{
  return sub_24B534EB0();
}

uint64_t sub_24B512BE0()
{
  return sub_24B534E90();
}

uint64_t sub_24B512C18()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::BatterySystemUsage_optional sub_24B512C64(Swift::UInt16 *a1)
{
  return HIDUsage.BatterySystemUsage.init(rawValue:)(*a1);
}

void sub_24B512C6C(_WORD *a1@<X8>)
{
  *a1 = word_24B53B422[*v1];
}

uint64_t static HIDUsage.BarcodeScannerUsage.page.getter()
{
  return 140;
}

BOOL sub_24B512C8C(unsigned char *a1, unsigned char *a2)
{
  int v2 = 1;
  switch(*a1)
  {
    case 1:
      int v2 = 2;
      break;
    case 2:
      int v2 = 3;
      break;
    case 3:
      int v2 = 4;
      break;
    case 4:
      int v2 = 5;
      break;
    case 5:
      int v2 = 16;
      break;
    case 6:
      int v2 = 17;
      break;
    case 7:
      int v2 = 18;
      break;
    case 8:
      int v2 = 19;
      break;
    case 9:
      int v2 = 20;
      break;
    case 0xA:
      int v2 = 21;
      break;
    case 0xB:
      int v2 = 22;
      break;
    case 0xC:
      int v2 = 23;
      break;
    case 0xD:
      int v2 = 24;
      break;
    case 0xE:
      int v2 = 25;
      break;
    case 0xF:
      int v2 = 26;
      break;
    case 0x10:
      int v2 = 27;
      break;
    case 0x11:
      int v2 = 28;
      break;
    case 0x12:
      int v2 = 29;
      break;
    case 0x13:
      int v2 = 30;
      break;
    case 0x14:
      int v2 = 31;
      break;
    case 0x15:
      int v2 = 48;
      break;
    case 0x16:
      int v2 = 49;
      break;
    case 0x17:
      int v2 = 50;
      break;
    case 0x18:
      int v2 = 51;
      break;
    case 0x19:
      int v2 = 52;
      break;
    case 0x1A:
      int v2 = 53;
      break;
    case 0x1B:
      int v2 = 54;
      break;
    case 0x1C:
      int v2 = 55;
      break;
    case 0x1D:
      int v2 = 56;
      break;
    case 0x1E:
      int v2 = 57;
      break;
    case 0x1F:
      int v2 = 58;
      break;
    case 0x20:
      int v2 = 59;
      break;
    case 0x21:
      int v2 = 60;
      break;
    case 0x22:
      int v2 = 61;
      break;
    case 0x23:
      int v2 = 62;
      break;
    case 0x24:
      int v2 = 63;
      break;
    case 0x25:
      int v2 = 64;
      break;
    case 0x26:
      int v2 = 65;
      break;
    case 0x27:
      int v2 = 66;
      break;
    case 0x28:
      int v2 = 67;
      break;
    case 0x29:
      int v2 = 68;
      break;
    case 0x2A:
      int v2 = 69;
      break;
    case 0x2B:
      int v2 = 70;
      break;
    case 0x2C:
      int v2 = 77;
      break;
    case 0x2D:
      int v2 = 78;
      break;
    case 0x2E:
      int v2 = 79;
      break;
    case 0x2F:
      int v2 = 80;
      break;
    case 0x30:
      int v2 = 81;
      break;
    case 0x31:
      int v2 = 82;
      break;
    case 0x32:
      int v2 = 85;
      break;
    case 0x33:
      int v2 = 86;
      break;
    case 0x34:
      int v2 = 87;
      break;
    case 0x35:
      int v2 = 88;
      break;
    case 0x36:
      int v2 = 89;
      break;
    case 0x37:
      int v2 = 90;
      break;
    case 0x38:
      int v2 = 91;
      break;
    case 0x39:
      int v2 = 92;
      break;
    case 0x3A:
      int v2 = 93;
      break;
    case 0x3B:
      int v2 = 94;
      break;
    case 0x3C:
      int v2 = 95;
      break;
    case 0x3D:
      int v2 = 96;
      break;
    case 0x3E:
      int v2 = 97;
      break;
    case 0x3F:
      int v2 = 98;
      break;
    case 0x40:
      int v2 = 99;
      break;
    case 0x41:
      int v2 = 100;
      break;
    case 0x42:
      int v2 = 101;
      break;
    case 0x43:
      int v2 = 102;
      break;
    case 0x44:
      int v2 = 109;
      break;
    case 0x45:
      int v2 = 110;
      break;
    case 0x46:
      int v2 = 111;
      break;
    case 0x47:
      int v2 = 112;
      break;
    case 0x48:
      int v2 = 117;
      break;
    case 0x49:
      int v2 = 118;
      break;
    case 0x4A:
      int v2 = 122;
      break;
    case 0x4B:
      int v2 = 123;
      break;
    case 0x4C:
      int v2 = 124;
      break;
    case 0x4D:
      int v2 = 125;
      break;
    case 0x4E:
      int v2 = 126;
      break;
    case 0x4F:
      int v2 = 127;
      break;
    case 0x50:
      int v2 = 128;
      break;
    case 0x51:
      int v2 = 130;
      break;
    case 0x52:
      int v2 = 131;
      break;
    case 0x53:
      int v2 = 132;
      break;
    case 0x54:
      int v2 = 133;
      break;
    case 0x55:
      int v2 = 134;
      break;
    case 0x56:
      int v2 = 135;
      break;
    case 0x57:
      int v2 = 136;
      break;
    case 0x58:
      int v2 = 137;
      break;
    case 0x59:
      int v2 = 138;
      break;
    case 0x5A:
      int v2 = 139;
      break;
    case 0x5B:
      int v2 = 145;
      break;
    case 0x5C:
      int v2 = 146;
      break;
    case 0x5D:
      int v2 = 147;
      break;
    case 0x5E:
      int v2 = 148;
      break;
    case 0x5F:
      int v2 = 149;
      break;
    case 0x60:
      int v2 = 150;
      break;
    case 0x61:
      int v2 = 151;
      break;
    case 0x62:
      int v2 = 152;
      break;
    case 0x63:
      int v2 = 153;
      break;
    case 0x64:
      int v2 = 154;
      break;
    case 0x65:
      int v2 = 155;
      break;
    case 0x66:
      int v2 = 156;
      break;
    case 0x67:
      int v2 = 157;
      break;
    case 0x68:
      int v2 = 158;
      break;
    case 0x69:
      int v2 = 159;
      break;
    case 0x6A:
      int v2 = 160;
      break;
    case 0x6B:
      int v2 = 161;
      break;
    case 0x6C:
      int v2 = 162;
      break;
    case 0x6D:
      int v2 = 169;
      break;
    case 0x6E:
      int v2 = 170;
      break;
    case 0x6F:
      int v2 = 171;
      break;
    case 0x70:
      int v2 = 172;
      break;
    case 0x71:
      int v2 = 173;
      break;
    case 0x72:
      int v2 = 174;
      break;
    case 0x73:
      int v2 = 175;
      break;
    case 0x74:
      int v2 = 176;
      break;
    case 0x75:
      int v2 = 177;
      break;
    case 0x76:
      int v2 = 178;
      break;
    case 0x77:
      int v2 = 179;
      break;
    case 0x78:
      int v2 = 180;
      break;
    case 0x79:
      int v2 = 181;
      break;
    case 0x7A:
      int v2 = 183;
      break;
    case 0x7B:
      int v2 = 184;
      break;
    case 0x7C:
      int v2 = 185;
      break;
    case 0x7D:
      int v2 = 186;
      break;
    case 0x7E:
      int v2 = 187;
      break;
    case 0x7F:
      int v2 = 188;
      break;
    case 0x80:
      int v2 = 189;
      break;
    case 0x81:
      int v2 = 190;
      break;
    case 0x82:
      int v2 = 191;
      break;
    case 0x83:
      int v2 = 192;
      break;
    case 0x84:
      int v2 = 195;
      break;
    case 0x85:
      int v2 = 196;
      break;
    case 0x86:
      int v2 = 199;
      break;
    case 0x87:
      int v2 = 200;
      break;
    case 0x88:
      int v2 = 201;
      break;
    case 0x89:
      int v2 = 202;
      break;
    case 0x8A:
      int v2 = 203;
      break;
    case 0x8B:
      int v2 = 204;
      break;
    case 0x8C:
      int v2 = 205;
      break;
    case 0x8D:
      int v2 = 206;
      break;
    case 0x8E:
      int v2 = 211;
      break;
    case 0x8F:
      int v2 = 212;
      break;
    case 0x90:
      int v2 = 213;
      break;
    case 0x91:
      int v2 = 214;
      break;
    case 0x92:
      int v2 = 215;
      break;
    case 0x93:
      int v2 = 216;
      break;
    case 0x94:
      int v2 = 217;
      break;
    case 0x95:
      int v2 = 218;
      break;
    case 0x96:
      int v2 = 219;
      break;
    case 0x97:
      int v2 = 220;
      break;
    case 0x98:
      int v2 = 221;
      break;
    case 0x99:
      int v2 = 222;
      break;
    case 0x9A:
      int v2 = 223;
      break;
    case 0x9B:
      int v2 = 240;
      break;
    case 0x9C:
      int v2 = 241;
      break;
    case 0x9D:
      int v2 = 242;
      break;
    case 0x9E:
      int v2 = 251;
      break;
    case 0x9F:
      int v2 = 252;
      break;
    case 0xA0:
      int v2 = 253;
      break;
    case 0xA1:
      int v2 = 254;
      break;
    case 0xA2:
      int v2 = 255;
      break;
    case 0xA3:
      int v2 = 256;
      break;
    case 0xA4:
      int v2 = 257;
      break;
    case 0xA5:
      int v2 = 258;
      break;
    case 0xA6:
      int v2 = 259;
      break;
    case 0xA7:
      int v2 = 260;
      break;
    case 0xA8:
      int v2 = 262;
      break;
    case 0xA9:
      int v2 = 263;
      break;
    case 0xAA:
      int v2 = 264;
      break;
    case 0xAB:
      int v2 = 265;
      break;
    case 0xAC:
      int v2 = 266;
      break;
    case 0xAD:
      int v2 = 267;
      break;
    case 0xAE:
      int v2 = 268;
      break;
    case 0xAF:
      int v2 = 269;
      break;
    case 0xB0:
      int v2 = 272;
      break;
    case 0xB1:
      int v2 = 273;
      break;
    case 0xB2:
      int v2 = 274;
      break;
    case 0xB3:
      int v2 = 275;
      break;
    case 0xB4:
      int v2 = 276;
      break;
    case 0xB5:
      int v2 = 277;
      break;
    case 0xB6:
      int v2 = 278;
      break;
    case 0xB7:
      int v2 = 279;
      break;
    case 0xB8:
      int v2 = 280;
      break;
    case 0xB9:
      int v2 = 281;
      break;
    case 0xBA:
      int v2 = 282;
      break;
    case 0xBB:
      int v2 = 283;
      break;
    case 0xBC:
      int v2 = 284;
      break;
    case 0xBD:
      int v2 = 285;
      break;
    case 0xBE:
      int v2 = 286;
      break;
    case 0xBF:
      int v2 = 287;
      break;
    case 0xC0:
      int v2 = 288;
      break;
    case 0xC1:
      int v2 = 289;
      break;
    default:
      break;
  }
  int v3 = 1;
  switch(*a2)
  {
    case 1:
      int v3 = 2;
      break;
    case 2:
      int v3 = 3;
      break;
    case 3:
      int v3 = 4;
      break;
    case 4:
      int v3 = 5;
      break;
    case 5:
      int v3 = 16;
      break;
    case 6:
      int v3 = 17;
      break;
    case 7:
      int v3 = 18;
      break;
    case 8:
      int v3 = 19;
      break;
    case 9:
      int v3 = 20;
      break;
    case 0xA:
      int v3 = 21;
      break;
    case 0xB:
      int v3 = 22;
      break;
    case 0xC:
      int v3 = 23;
      break;
    case 0xD:
      int v3 = 24;
      break;
    case 0xE:
      int v3 = 25;
      break;
    case 0xF:
      int v3 = 26;
      break;
    case 0x10:
      int v3 = 27;
      break;
    case 0x11:
      int v3 = 28;
      break;
    case 0x12:
      int v3 = 29;
      break;
    case 0x13:
      int v3 = 30;
      break;
    case 0x14:
      int v3 = 31;
      break;
    case 0x15:
      int v3 = 48;
      break;
    case 0x16:
      int v3 = 49;
      break;
    case 0x17:
      int v3 = 50;
      break;
    case 0x18:
      int v3 = 51;
      break;
    case 0x19:
      int v3 = 52;
      break;
    case 0x1A:
      int v3 = 53;
      break;
    case 0x1B:
      int v3 = 54;
      break;
    case 0x1C:
      int v3 = 55;
      break;
    case 0x1D:
      int v3 = 56;
      break;
    case 0x1E:
      int v3 = 57;
      break;
    case 0x1F:
      int v3 = 58;
      break;
    case 0x20:
      int v3 = 59;
      break;
    case 0x21:
      int v3 = 60;
      break;
    case 0x22:
      int v3 = 61;
      break;
    case 0x23:
      int v3 = 62;
      break;
    case 0x24:
      int v3 = 63;
      break;
    case 0x25:
      int v3 = 64;
      break;
    case 0x26:
      int v3 = 65;
      break;
    case 0x27:
      int v3 = 66;
      break;
    case 0x28:
      int v3 = 67;
      break;
    case 0x29:
      int v3 = 68;
      break;
    case 0x2A:
      int v3 = 69;
      break;
    case 0x2B:
      int v3 = 70;
      break;
    case 0x2C:
      int v3 = 77;
      break;
    case 0x2D:
      int v3 = 78;
      break;
    case 0x2E:
      int v3 = 79;
      break;
    case 0x2F:
      int v3 = 80;
      break;
    case 0x30:
      int v3 = 81;
      break;
    case 0x31:
      int v3 = 82;
      break;
    case 0x32:
      int v3 = 85;
      break;
    case 0x33:
      int v3 = 86;
      break;
    case 0x34:
      int v3 = 87;
      break;
    case 0x35:
      int v3 = 88;
      break;
    case 0x36:
      int v3 = 89;
      break;
    case 0x37:
      int v3 = 90;
      break;
    case 0x38:
      int v3 = 91;
      break;
    case 0x39:
      int v3 = 92;
      break;
    case 0x3A:
      int v3 = 93;
      break;
    case 0x3B:
      int v3 = 94;
      break;
    case 0x3C:
      int v3 = 95;
      break;
    case 0x3D:
      int v3 = 96;
      break;
    case 0x3E:
      int v3 = 97;
      break;
    case 0x3F:
      int v3 = 98;
      break;
    case 0x40:
      int v3 = 99;
      break;
    case 0x41:
      int v3 = 100;
      break;
    case 0x42:
      int v3 = 101;
      break;
    case 0x43:
      int v3 = 102;
      break;
    case 0x44:
      int v3 = 109;
      break;
    case 0x45:
      int v3 = 110;
      break;
    case 0x46:
      int v3 = 111;
      break;
    case 0x47:
      int v3 = 112;
      break;
    case 0x48:
      int v3 = 117;
      break;
    case 0x49:
      int v3 = 118;
      break;
    case 0x4A:
      int v3 = 122;
      break;
    case 0x4B:
      int v3 = 123;
      break;
    case 0x4C:
      int v3 = 124;
      break;
    case 0x4D:
      int v3 = 125;
      break;
    case 0x4E:
      int v3 = 126;
      break;
    case 0x4F:
      int v3 = 127;
      break;
    case 0x50:
      int v3 = 128;
      break;
    case 0x51:
      int v3 = 130;
      break;
    case 0x52:
      int v3 = 131;
      break;
    case 0x53:
      int v3 = 132;
      break;
    case 0x54:
      int v3 = 133;
      break;
    case 0x55:
      int v3 = 134;
      break;
    case 0x56:
      int v3 = 135;
      break;
    case 0x57:
      int v3 = 136;
      break;
    case 0x58:
      int v3 = 137;
      break;
    case 0x59:
      int v3 = 138;
      break;
    case 0x5A:
      int v3 = 139;
      break;
    case 0x5B:
      int v3 = 145;
      break;
    case 0x5C:
      int v3 = 146;
      break;
    case 0x5D:
      int v3 = 147;
      break;
    case 0x5E:
      int v3 = 148;
      break;
    case 0x5F:
      int v3 = 149;
      break;
    case 0x60:
      int v3 = 150;
      break;
    case 0x61:
      int v3 = 151;
      break;
    case 0x62:
      int v3 = 152;
      break;
    case 0x63:
      int v3 = 153;
      break;
    case 0x64:
      int v3 = 154;
      break;
    case 0x65:
      int v3 = 155;
      break;
    case 0x66:
      int v3 = 156;
      break;
    case 0x67:
      int v3 = 157;
      break;
    case 0x68:
      int v3 = 158;
      break;
    case 0x69:
      int v3 = 159;
      break;
    case 0x6A:
      int v3 = 160;
      break;
    case 0x6B:
      int v3 = 161;
      break;
    case 0x6C:
      int v3 = 162;
      break;
    case 0x6D:
      int v3 = 169;
      break;
    case 0x6E:
      int v3 = 170;
      break;
    case 0x6F:
      int v3 = 171;
      break;
    case 0x70:
      int v3 = 172;
      break;
    case 0x71:
      int v3 = 173;
      break;
    case 0x72:
      int v3 = 174;
      break;
    case 0x73:
      int v3 = 175;
      break;
    case 0x74:
      int v3 = 176;
      break;
    case 0x75:
      int v3 = 177;
      break;
    case 0x76:
      int v3 = 178;
      break;
    case 0x77:
      int v3 = 179;
      break;
    case 0x78:
      int v3 = 180;
      break;
    case 0x79:
      int v3 = 181;
      break;
    case 0x7A:
      int v3 = 183;
      break;
    case 0x7B:
      int v3 = 184;
      break;
    case 0x7C:
      int v3 = 185;
      break;
    case 0x7D:
      int v3 = 186;
      break;
    case 0x7E:
      int v3 = 187;
      break;
    case 0x7F:
      int v3 = 188;
      break;
    case 0x80:
      int v3 = 189;
      break;
    case 0x81:
      int v3 = 190;
      break;
    case 0x82:
      int v3 = 191;
      break;
    case 0x83:
      int v3 = 192;
      break;
    case 0x84:
      int v3 = 195;
      break;
    case 0x85:
      int v3 = 196;
      break;
    case 0x86:
      int v3 = 199;
      break;
    case 0x87:
      int v3 = 200;
      break;
    case 0x88:
      int v3 = 201;
      break;
    case 0x89:
      int v3 = 202;
      break;
    case 0x8A:
      int v3 = 203;
      break;
    case 0x8B:
      int v3 = 204;
      break;
    case 0x8C:
      int v3 = 205;
      break;
    case 0x8D:
      int v3 = 206;
      break;
    case 0x8E:
      int v3 = 211;
      break;
    case 0x8F:
      int v3 = 212;
      break;
    case 0x90:
      int v3 = 213;
      break;
    case 0x91:
      int v3 = 214;
      break;
    case 0x92:
      int v3 = 215;
      break;
    case 0x93:
      int v3 = 216;
      break;
    case 0x94:
      int v3 = 217;
      break;
    case 0x95:
      int v3 = 218;
      break;
    case 0x96:
      int v3 = 219;
      break;
    case 0x97:
      int v3 = 220;
      break;
    case 0x98:
      int v3 = 221;
      break;
    case 0x99:
      int v3 = 222;
      break;
    case 0x9A:
      int v3 = 223;
      break;
    case 0x9B:
      int v3 = 240;
      break;
    case 0x9C:
      int v3 = 241;
      break;
    case 0x9D:
      int v3 = 242;
      break;
    case 0x9E:
      int v3 = 251;
      break;
    case 0x9F:
      int v3 = 252;
      break;
    case 0xA0:
      int v3 = 253;
      break;
    case 0xA1:
      int v3 = 254;
      break;
    case 0xA2:
      int v3 = 255;
      break;
    case 0xA3:
      int v3 = 256;
      break;
    case 0xA4:
      int v3 = 257;
      break;
    case 0xA5:
      int v3 = 258;
      break;
    case 0xA6:
      int v3 = 259;
      break;
    case 0xA7:
      int v3 = 260;
      break;
    case 0xA8:
      int v3 = 262;
      break;
    case 0xA9:
      int v3 = 263;
      break;
    case 0xAA:
      int v3 = 264;
      break;
    case 0xAB:
      int v3 = 265;
      break;
    case 0xAC:
      int v3 = 266;
      break;
    case 0xAD:
      int v3 = 267;
      break;
    case 0xAE:
      int v3 = 268;
      break;
    case 0xAF:
      int v3 = 269;
      break;
    case 0xB0:
      int v3 = 272;
      break;
    case 0xB1:
      int v3 = 273;
      break;
    case 0xB2:
      int v3 = 274;
      break;
    case 0xB3:
      int v3 = 275;
      break;
    case 0xB4:
      int v3 = 276;
      break;
    case 0xB5:
      int v3 = 277;
      break;
    case 0xB6:
      int v3 = 278;
      break;
    case 0xB7:
      int v3 = 279;
      break;
    case 0xB8:
      int v3 = 280;
      break;
    case 0xB9:
      int v3 = 281;
      break;
    case 0xBA:
      int v3 = 282;
      break;
    case 0xBB:
      int v3 = 283;
      break;
    case 0xBC:
      int v3 = 284;
      break;
    case 0xBD:
      int v3 = 285;
      break;
    case 0xBE:
      int v3 = 286;
      break;
    case 0xBF:
      int v3 = 287;
      break;
    case 0xC0:
      int v3 = 288;
      break;
    case 0xC1:
      int v3 = 289;
      break;
    default:
      return v2 == v3;
  }
  return v2 == v3;
}

uint64_t sub_24B513F04()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51487C()
{
  return sub_24B534E90();
}

uint64_t sub_24B5151D8()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::BarcodeScannerUsage_optional sub_24B515B4C(Swift::UInt16 *a1)
{
  return HIDUsage.BarcodeScannerUsage.init(rawValue:)(*a1);
}

void sub_24B515B54(__int16 *a1@<X8>)
{
  __int16 v2 = 1;
  switch(*v1)
  {
    case 1:
      *a1 = 2;
      break;
    case 2:
      *a1 = 3;
      break;
    case 3:
      *a1 = 4;
      break;
    case 4:
      *a1 = 5;
      break;
    case 5:
      *a1 = 16;
      break;
    case 6:
      *a1 = 17;
      break;
    case 7:
      *a1 = 18;
      break;
    case 8:
      *a1 = 19;
      break;
    case 9:
      *a1 = 20;
      break;
    case 0xA:
      *a1 = 21;
      break;
    case 0xB:
      *a1 = 22;
      break;
    case 0xC:
      *a1 = 23;
      break;
    case 0xD:
      *a1 = 24;
      break;
    case 0xE:
      *a1 = 25;
      break;
    case 0xF:
      *a1 = 26;
      break;
    case 0x10:
      *a1 = 27;
      break;
    case 0x11:
      *a1 = 28;
      break;
    case 0x12:
      *a1 = 29;
      break;
    case 0x13:
      *a1 = 30;
      break;
    case 0x14:
      *a1 = 31;
      break;
    case 0x15:
      *a1 = 48;
      break;
    case 0x16:
      *a1 = 49;
      break;
    case 0x17:
      *a1 = 50;
      break;
    case 0x18:
      *a1 = 51;
      break;
    case 0x19:
      *a1 = 52;
      break;
    case 0x1A:
      *a1 = 53;
      break;
    case 0x1B:
      *a1 = 54;
      break;
    case 0x1C:
      *a1 = 55;
      break;
    case 0x1D:
      *a1 = 56;
      break;
    case 0x1E:
      *a1 = 57;
      break;
    case 0x1F:
      *a1 = 58;
      break;
    case 0x20:
      *a1 = 59;
      break;
    case 0x21:
      *a1 = 60;
      break;
    case 0x22:
      *a1 = 61;
      break;
    case 0x23:
      *a1 = 62;
      break;
    case 0x24:
      *a1 = 63;
      break;
    case 0x25:
      *a1 = 64;
      break;
    case 0x26:
      *a1 = 65;
      break;
    case 0x27:
      *a1 = 66;
      break;
    case 0x28:
      *a1 = 67;
      break;
    case 0x29:
      *a1 = 68;
      break;
    case 0x2A:
      *a1 = 69;
      break;
    case 0x2B:
      *a1 = 70;
      break;
    case 0x2C:
      *a1 = 77;
      break;
    case 0x2D:
      *a1 = 78;
      break;
    case 0x2E:
      *a1 = 79;
      break;
    case 0x2F:
      *a1 = 80;
      break;
    case 0x30:
      *a1 = 81;
      break;
    case 0x31:
      *a1 = 82;
      break;
    case 0x32:
      *a1 = 85;
      break;
    case 0x33:
      *a1 = 86;
      break;
    case 0x34:
      *a1 = 87;
      break;
    case 0x35:
      *a1 = 88;
      break;
    case 0x36:
      *a1 = 89;
      break;
    case 0x37:
      *a1 = 90;
      break;
    case 0x38:
      *a1 = 91;
      break;
    case 0x39:
      *a1 = 92;
      break;
    case 0x3A:
      *a1 = 93;
      break;
    case 0x3B:
      *a1 = 94;
      break;
    case 0x3C:
      *a1 = 95;
      break;
    case 0x3D:
      *a1 = 96;
      break;
    case 0x3E:
      *a1 = 97;
      break;
    case 0x3F:
      *a1 = 98;
      break;
    case 0x40:
      *a1 = 99;
      break;
    case 0x41:
      *a1 = 100;
      break;
    case 0x42:
      *a1 = 101;
      break;
    case 0x43:
      *a1 = 102;
      break;
    case 0x44:
      *a1 = 109;
      break;
    case 0x45:
      *a1 = 110;
      break;
    case 0x46:
      *a1 = 111;
      break;
    case 0x47:
      *a1 = 112;
      break;
    case 0x48:
      *a1 = 117;
      break;
    case 0x49:
      *a1 = 118;
      break;
    case 0x4A:
      *a1 = 122;
      break;
    case 0x4B:
      *a1 = 123;
      break;
    case 0x4C:
      *a1 = 124;
      break;
    case 0x4D:
      *a1 = 125;
      break;
    case 0x4E:
      *a1 = 126;
      break;
    case 0x4F:
      *a1 = 127;
      break;
    case 0x50:
      *a1 = 128;
      break;
    case 0x51:
      *a1 = 130;
      break;
    case 0x52:
      *a1 = 131;
      break;
    case 0x53:
      *a1 = 132;
      break;
    case 0x54:
      *a1 = 133;
      break;
    case 0x55:
      *a1 = 134;
      break;
    case 0x56:
      *a1 = 135;
      break;
    case 0x57:
      *a1 = 136;
      break;
    case 0x58:
      *a1 = 137;
      break;
    case 0x59:
      *a1 = 138;
      break;
    case 0x5A:
      *a1 = 139;
      break;
    case 0x5B:
      *a1 = 145;
      break;
    case 0x5C:
      *a1 = 146;
      break;
    case 0x5D:
      *a1 = 147;
      break;
    case 0x5E:
      *a1 = 148;
      break;
    case 0x5F:
      *a1 = 149;
      break;
    case 0x60:
      *a1 = 150;
      break;
    case 0x61:
      *a1 = 151;
      break;
    case 0x62:
      *a1 = 152;
      break;
    case 0x63:
      *a1 = 153;
      break;
    case 0x64:
      *a1 = 154;
      break;
    case 0x65:
      *a1 = 155;
      break;
    case 0x66:
      *a1 = 156;
      break;
    case 0x67:
      *a1 = 157;
      break;
    case 0x68:
      *a1 = 158;
      break;
    case 0x69:
      *a1 = 159;
      break;
    case 0x6A:
      *a1 = 160;
      break;
    case 0x6B:
      *a1 = 161;
      break;
    case 0x6C:
      *a1 = 162;
      break;
    case 0x6D:
      *a1 = 169;
      break;
    case 0x6E:
      *a1 = 170;
      break;
    case 0x6F:
      *a1 = 171;
      break;
    case 0x70:
      *a1 = 172;
      break;
    case 0x71:
      *a1 = 173;
      break;
    case 0x72:
      *a1 = 174;
      break;
    case 0x73:
      *a1 = 175;
      break;
    case 0x74:
      *a1 = 176;
      break;
    case 0x75:
      *a1 = 177;
      break;
    case 0x76:
      *a1 = 178;
      break;
    case 0x77:
      *a1 = 179;
      break;
    case 0x78:
      *a1 = 180;
      break;
    case 0x79:
      *a1 = 181;
      break;
    case 0x7A:
      *a1 = 183;
      break;
    case 0x7B:
      *a1 = 184;
      break;
    case 0x7C:
      *a1 = 185;
      break;
    case 0x7D:
      *a1 = 186;
      break;
    case 0x7E:
      *a1 = 187;
      break;
    case 0x7F:
      *a1 = 188;
      break;
    case 0x80:
      *a1 = 189;
      break;
    case 0x81:
      *a1 = 190;
      break;
    case 0x82:
      *a1 = 191;
      break;
    case 0x83:
      *a1 = 192;
      break;
    case 0x84:
      *a1 = 195;
      break;
    case 0x85:
      *a1 = 196;
      break;
    case 0x86:
      *a1 = 199;
      break;
    case 0x87:
      *a1 = 200;
      break;
    case 0x88:
      *a1 = 201;
      break;
    case 0x89:
      *a1 = 202;
      break;
    case 0x8A:
      *a1 = 203;
      break;
    case 0x8B:
      *a1 = 204;
      break;
    case 0x8C:
      *a1 = 205;
      break;
    case 0x8D:
      *a1 = 206;
      break;
    case 0x8E:
      *a1 = 211;
      break;
    case 0x8F:
      *a1 = 212;
      break;
    case 0x90:
      *a1 = 213;
      break;
    case 0x91:
      *a1 = 214;
      break;
    case 0x92:
      *a1 = 215;
      break;
    case 0x93:
      *a1 = 216;
      break;
    case 0x94:
      *a1 = 217;
      break;
    case 0x95:
      *a1 = 218;
      break;
    case 0x96:
      *a1 = 219;
      break;
    case 0x97:
      *a1 = 220;
      break;
    case 0x98:
      *a1 = 221;
      break;
    case 0x99:
      *a1 = 222;
      break;
    case 0x9A:
      *a1 = 223;
      break;
    case 0x9B:
      *a1 = 240;
      break;
    case 0x9C:
      *a1 = 241;
      break;
    case 0x9D:
      *a1 = 242;
      break;
    case 0x9E:
      *a1 = 251;
      break;
    case 0x9F:
      *a1 = 252;
      break;
    case 0xA0:
      *a1 = 253;
      break;
    case 0xA1:
      *a1 = 254;
      break;
    case 0xA2:
      *a1 = 255;
      break;
    case 0xA3:
      *a1 = 256;
      break;
    case 0xA4:
      *a1 = 257;
      break;
    case 0xA5:
      *a1 = 258;
      break;
    case 0xA6:
      *a1 = 259;
      break;
    case 0xA7:
      *a1 = 260;
      break;
    case 0xA8:
      *a1 = 262;
      break;
    case 0xA9:
      *a1 = 263;
      break;
    case 0xAA:
      *a1 = 264;
      break;
    case 0xAB:
      *a1 = 265;
      break;
    case 0xAC:
      *a1 = 266;
      break;
    case 0xAD:
      *a1 = 267;
      break;
    case 0xAE:
      *a1 = 268;
      break;
    case 0xAF:
      *a1 = 269;
      break;
    case 0xB0:
      *a1 = 272;
      break;
    case 0xB1:
      *a1 = 273;
      break;
    case 0xB2:
      *a1 = 274;
      break;
    case 0xB3:
      *a1 = 275;
      break;
    case 0xB4:
      *a1 = 276;
      break;
    case 0xB5:
      *a1 = 277;
      break;
    case 0xB6:
      *a1 = 278;
      break;
    case 0xB7:
      *a1 = 279;
      break;
    case 0xB8:
      *a1 = 280;
      break;
    case 0xB9:
      *a1 = 281;
      break;
    case 0xBA:
      *a1 = 282;
      break;
    case 0xBB:
      *a1 = 283;
      break;
    case 0xBC:
      *a1 = 284;
      break;
    case 0xBD:
      *a1 = 285;
      break;
    case 0xBE:
      *a1 = 286;
      break;
    case 0xBF:
      *a1 = 287;
      break;
    case 0xC0:
      *a1 = 288;
      break;
    case 0xC1:
      __int16 v2 = 289;
      goto LABEL_195;
    default:
LABEL_195:
      *a1 = v2;
      break;
  }
}

uint64_t static HIDUsage.ScalesUsage.page.getter()
{
  return 141;
}

BOOL sub_24B516798(char *a1, char *a2)
{
  return word_24B53B4D8[*a1] == word_24B53B4D8[*a2];
}

uint64_t sub_24B5167BC()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51680C()
{
  return sub_24B534E90();
}

uint64_t sub_24B516844()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::ScalesUsage_optional sub_24B516890(Swift::UInt16 *a1)
{
  return HIDUsage.ScalesUsage.init(rawValue:)(*a1);
}

void sub_24B516898(_WORD *a1@<X8>)
{
  *a1 = word_24B53B4D8[*v1];
}

uint64_t static HIDUsage.MagneticStripeReaderUsage.page.getter()
{
  return 142;
}

BOOL sub_24B5168B8(char *a1, char *a2)
{
  return word_24B53B534[*a1] == word_24B53B534[*a2];
}

uint64_t sub_24B5168DC()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51692C()
{
  return sub_24B534E90();
}

uint64_t sub_24B516964()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::MagneticStripeReaderUsage_optional sub_24B5169B0(Swift::UInt16 *a1)
{
  return HIDUsage.MagneticStripeReaderUsage.init(rawValue:)(*a1);
}

void sub_24B5169B8(_WORD *a1@<X8>)
{
  *a1 = word_24B53B534[*v1];
}

uint64_t static HIDUsage.CameraControlUsage.page.getter()
{
  return 144;
}

BOOL sub_24B5169D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_24B5169F0()
{
  return sub_24B534EB0();
}

uint64_t sub_24B516A40()
{
  return sub_24B534E90();
}

uint64_t sub_24B516A78()
{
  return sub_24B534EB0();
}

unsigned __int16 *sub_24B516AC4@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 33) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  if (v2 == 32) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  *a2 = v4;
  return result;
}

void sub_24B516AE4(__int16 *a1@<X8>)
{
  if (*v1) {
    __int16 v2 = 33;
  }
  else {
    __int16 v2 = 32;
  }
  *a1 = v2;
}

uint64_t static HIDUsage.ArcadeUsage.page.getter()
{
  return 145;
}

BOOL sub_24B516B04(char *a1, char *a2)
{
  return word_24B53B548[*a1] == word_24B53B548[*a2];
}

uint64_t sub_24B516B28()
{
  return sub_24B534EB0();
}

uint64_t sub_24B516B78()
{
  return sub_24B534E90();
}

uint64_t sub_24B516BB0()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::ArcadeUsage_optional sub_24B516BFC(Swift::UInt16 *a1)
{
  return HIDUsage.ArcadeUsage.init(rawValue:)(*a1);
}

void sub_24B516C04(_WORD *a1@<X8>)
{
  *a1 = word_24B53B548[*v1];
}

uint64_t static HIDUsage.FIDOAllianceUsage.page.getter()
{
  return 61904;
}

BOOL sub_24B516C24(unsigned char *a1, unsigned char *a2)
{
  return (unsigned __int16)(0x2100200001uLL >> (16 * *a1)) == (unsigned __int16)(0x2100200001uLL >> (16 * *a2));
}

uint64_t sub_24B516C5C()
{
  return sub_24B534EB0();
}

uint64_t sub_24B516CB4()
{
  return sub_24B534E90();
}

uint64_t sub_24B516CF4()
{
  return sub_24B534EB0();
}

CoreHID::HIDUsage::FIDOAllianceUsage_optional sub_24B516D48(Swift::UInt16 *a1)
{
  return HIDUsage.FIDOAllianceUsage.init(rawValue:)(*a1);
}

void sub_24B516D50(_WORD *a1@<X8>)
{
  *a1 = 0x2100200001uLL >> (16 * *v1);
}

BOOL _s7CoreHID8HIDUsageO2eeoiySbAC_ACtFZ_0(uint64_t a1, unsigned int *a2)
{
  int v2 = 1;
  switch(*(unsigned __int8 *)(a1 + 4) >> 2)
  {
    case 1:
      int v2 = 2;
      break;
    case 2:
      int v2 = 3;
      break;
    case 3:
      int v2 = 4;
      break;
    case 4:
      int v2 = 5;
      break;
    case 5:
      int v2 = 6;
      break;
    case 6:
      int v2 = 7;
      break;
    case 7:
      int v2 = 8;
      break;
    case 8:
      int v2 = 9;
      break;
    case 9:
      int v2 = 10;
      break;
    case 0xA:
      int v2 = 11;
      break;
    case 0xB:
      int v2 = 12;
      break;
    case 0xC:
      int v2 = 13;
      break;
    case 0xD:
      int v2 = 14;
      break;
    case 0xE:
      int v2 = 15;
      break;
    case 0xF:
      int v2 = 17;
      break;
    case 0x10:
      int v2 = 18;
      break;
    case 0x11:
      int v2 = 20;
      break;
    case 0x12:
      int v2 = 32;
      break;
    case 0x13:
      int v2 = 64;
      break;
    case 0x14:
      int v2 = 65;
      break;
    case 0x15:
      int v2 = 89;
      break;
    case 0x16:
      int v2 = 128;
      break;
    case 0x17:
      int v2 = 129;
      break;
    case 0x18:
      int v2 = 130;
      break;
    case 0x19:
      int v2 = 132;
      break;
    case 0x1A:
      int v2 = 133;
      break;
    case 0x1B:
      int v2 = 140;
      break;
    case 0x1C:
      int v2 = 141;
      break;
    case 0x1D:
      int v2 = 142;
      break;
    case 0x1E:
      int v2 = 144;
      break;
    case 0x1F:
      int v2 = 145;
      break;
    case 0x20:
      int v2 = 61904;
      break;
    case 0x21:
      int v2 = (unsigned __int16)*(_DWORD *)a1;
      break;
    default:
      break;
  }
  int v3 = 1;
  switch(((*a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32)) >> 34) & 0x3F)
  {
    case 1uLL:
      if (v2 == 2) {
        goto LABEL_42;
      }
      return 0;
    case 2uLL:
      if (v2 != 3) {
        return 0;
      }
      goto LABEL_42;
    case 3uLL:
      int v3 = 4;
      goto LABEL_41;
    case 4uLL:
      if (v2 != 5) {
        return 0;
      }
      goto LABEL_42;
    case 5uLL:
      if (v2 != 6) {
        return 0;
      }
      goto LABEL_42;
    case 6uLL:
      if (v2 != 7) {
        return 0;
      }
      goto LABEL_42;
    case 7uLL:
      if (v2 != 8) {
        return 0;
      }
      goto LABEL_42;
    case 8uLL:
      if (v2 != 9) {
        return 0;
      }
      goto LABEL_42;
    case 9uLL:
      if (v2 != 10) {
        return 0;
      }
      goto LABEL_42;
    case 0xAuLL:
      if (v2 != 11) {
        return 0;
      }
      goto LABEL_42;
    case 0xBuLL:
      if (v2 != 12) {
        return 0;
      }
      goto LABEL_42;
    case 0xCuLL:
      if (v2 != 13) {
        return 0;
      }
      goto LABEL_42;
    case 0xDuLL:
      if (v2 != 14) {
        return 0;
      }
      goto LABEL_42;
    case 0xEuLL:
      if (v2 != 15) {
        return 0;
      }
      goto LABEL_42;
    case 0xFuLL:
      if (v2 != 17) {
        return 0;
      }
      goto LABEL_42;
    case 0x10uLL:
      if (v2 != 18) {
        return 0;
      }
      goto LABEL_42;
    case 0x11uLL:
      if (v2 != 20) {
        return 0;
      }
      goto LABEL_42;
    case 0x12uLL:
      if (v2 != 32) {
        return 0;
      }
      goto LABEL_42;
    case 0x13uLL:
      if (v2 != 64) {
        return 0;
      }
      goto LABEL_42;
    case 0x14uLL:
      if (v2 != 65) {
        return 0;
      }
      goto LABEL_42;
    case 0x15uLL:
      if (v2 != 89) {
        return 0;
      }
      goto LABEL_42;
    case 0x16uLL:
      if (v2 != 128) {
        return 0;
      }
      goto LABEL_42;
    case 0x17uLL:
      if (v2 != 129) {
        return 0;
      }
      goto LABEL_42;
    case 0x18uLL:
      if (v2 != 130) {
        return 0;
      }
      goto LABEL_42;
    case 0x19uLL:
      if (v2 != 132) {
        return 0;
      }
      goto LABEL_42;
    case 0x1AuLL:
      if (v2 != 133) {
        return 0;
      }
      goto LABEL_42;
    case 0x1BuLL:
      if (v2 != 140) {
        return 0;
      }
      goto LABEL_42;
    case 0x1CuLL:
      if (v2 != 141) {
        return 0;
      }
      goto LABEL_42;
    case 0x1DuLL:
      if (v2 != 142) {
        return 0;
      }
      goto LABEL_42;
    case 0x1EuLL:
      if (v2 != 144) {
        return 0;
      }
      goto LABEL_42;
    case 0x1FuLL:
      if (v2 != 145) {
        return 0;
      }
      goto LABEL_42;
    case 0x20uLL:
      if (v2 != 61904) {
        return 0;
      }
      goto LABEL_42;
    case 0x21uLL:
      if (v2 != (unsigned __int16)*a2) {
        return 0;
      }
      goto LABEL_42;
    default:
LABEL_41:
      if (v2 != v3) {
        return 0;
      }
LABEL_42:
      int v4 = HIDUsage.usage.getter();
      unsigned int v5 = HIDUsage.usage.getter();
      BOOL v7 = (v5 & 0x10000) == 0 && (unsigned __int16)v4 == (unsigned __int16)v5;
      if ((v4 & 0x10000) != 0) {
        return HIWORD(v5) & 1;
      }
      else {
        return v7;
      }
  }
}

unint64_t sub_24B517208()
{
  unint64_t result = qword_2697C6970;
  if (!qword_2697C6970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6970);
  }
  return result;
}

unint64_t sub_24B517260()
{
  unint64_t result = qword_2697C6978;
  if (!qword_2697C6978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6978);
  }
  return result;
}

unint64_t sub_24B5172B8()
{
  unint64_t result = qword_2697C6980;
  if (!qword_2697C6980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6980);
  }
  return result;
}

unint64_t sub_24B517310()
{
  unint64_t result = qword_2697C6988;
  if (!qword_2697C6988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6988);
  }
  return result;
}

unint64_t sub_24B517368()
{
  unint64_t result = qword_2697C6990;
  if (!qword_2697C6990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6990);
  }
  return result;
}

unint64_t sub_24B5173C0()
{
  unint64_t result = qword_2697C6998;
  if (!qword_2697C6998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6998);
  }
  return result;
}

unint64_t sub_24B517418()
{
  unint64_t result = qword_2697C69A0;
  if (!qword_2697C69A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69A0);
  }
  return result;
}

unint64_t sub_24B517470()
{
  unint64_t result = qword_2697C69A8;
  if (!qword_2697C69A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69A8);
  }
  return result;
}

unint64_t sub_24B5174C8()
{
  unint64_t result = qword_2697C69B0;
  if (!qword_2697C69B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69B0);
  }
  return result;
}

unint64_t sub_24B517520()
{
  unint64_t result = qword_2697C69B8;
  if (!qword_2697C69B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69B8);
  }
  return result;
}

unint64_t sub_24B517578()
{
  unint64_t result = qword_2697C69C0;
  if (!qword_2697C69C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69C0);
  }
  return result;
}

unint64_t sub_24B5175D0()
{
  unint64_t result = qword_2697C69C8;
  if (!qword_2697C69C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69C8);
  }
  return result;
}

unint64_t sub_24B517628()
{
  unint64_t result = qword_2697C69D0;
  if (!qword_2697C69D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69D0);
  }
  return result;
}

unint64_t sub_24B517680()
{
  unint64_t result = qword_2697C69D8;
  if (!qword_2697C69D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69D8);
  }
  return result;
}

unint64_t sub_24B5176D8()
{
  unint64_t result = qword_2697C69E0;
  if (!qword_2697C69E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69E0);
  }
  return result;
}

unint64_t sub_24B517730()
{
  unint64_t result = qword_2697C69E8;
  if (!qword_2697C69E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69E8);
  }
  return result;
}

unint64_t sub_24B517788()
{
  unint64_t result = qword_2697C69F0;
  if (!qword_2697C69F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69F0);
  }
  return result;
}

unint64_t sub_24B5177E0()
{
  unint64_t result = qword_2697C69F8;
  if (!qword_2697C69F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C69F8);
  }
  return result;
}

unint64_t sub_24B517838()
{
  unint64_t result = qword_2697C6A00;
  if (!qword_2697C6A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A00);
  }
  return result;
}

unint64_t sub_24B517890()
{
  unint64_t result = qword_2697C6A08;
  if (!qword_2697C6A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A08);
  }
  return result;
}

unint64_t sub_24B5178E8()
{
  unint64_t result = qword_2697C6A10;
  if (!qword_2697C6A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A10);
  }
  return result;
}

unint64_t sub_24B517940()
{
  unint64_t result = qword_2697C6A18;
  if (!qword_2697C6A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A18);
  }
  return result;
}

unint64_t sub_24B517998()
{
  unint64_t result = qword_2697C6A20;
  if (!qword_2697C6A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A20);
  }
  return result;
}

unint64_t sub_24B5179F0()
{
  unint64_t result = qword_2697C6A28;
  if (!qword_2697C6A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A28);
  }
  return result;
}

unint64_t sub_24B517A48()
{
  unint64_t result = qword_2697C6A30;
  if (!qword_2697C6A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A30);
  }
  return result;
}

unint64_t sub_24B517AA0()
{
  unint64_t result = qword_2697C6A38;
  if (!qword_2697C6A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A38);
  }
  return result;
}

unint64_t sub_24B517AF8()
{
  unint64_t result = qword_2697C6A40;
  if (!qword_2697C6A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A40);
  }
  return result;
}

unint64_t sub_24B517B50()
{
  unint64_t result = qword_2697C6A48;
  if (!qword_2697C6A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A48);
  }
  return result;
}

unint64_t sub_24B517BA8()
{
  unint64_t result = qword_2697C6A50;
  if (!qword_2697C6A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A50);
  }
  return result;
}

unint64_t sub_24B517C00()
{
  unint64_t result = qword_2697C6A58;
  if (!qword_2697C6A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A58);
  }
  return result;
}

unint64_t sub_24B517C58()
{
  unint64_t result = qword_2697C6A60;
  if (!qword_2697C6A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A60);
  }
  return result;
}

uint64_t __swift_memcpy5_2(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HIDUsage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x5F && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 95);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 4) >> 2) & 0xFFFFFFBF | (((*(unsigned __int8 *)(a1 + 4) >> 1) & 1) << 6)) ^ 0x7F;
  if (v3 >= 0x5E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for HIDUsage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x5E)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 95;
    if (a3 >= 0x5F) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0x5F) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2)
    {
      *(_DWORD *)unint64_t result = 0;
      *(unsigned char *)(result + 4) = 2 * (((-a2 & 0x40) != 0) - 2 * a2);
    }
  }
  return result;
}

uint64_t sub_24B517D68(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4) >> 2;
}

uint64_t sub_24B517D74(uint64_t result)
{
  *(unsigned char *)(result + 4) &= 3u;
  return result;
}

unsigned int *sub_24B517D8C(unsigned int *result, uint64_t a2)
{
  *((unsigned char *)result + 4) = ((*result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32)) & 0x1FFFFFFFFLL | (a2 << 34)) >> 32;
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage()
{
  return &type metadata for HIDUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.GenericDesktopUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x8F) {
    goto LABEL_17;
  }
  if (a2 + 113 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 113) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 113;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 113;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 113;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x72;
  int v8 = v6 - 114;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.GenericDesktopUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 113 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 113) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x8F) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x8E)
  {
    unsigned int v6 = ((a2 - 143) >> 8) + 1;
    *unint64_t result = a2 + 113;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B517F18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 113;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.GenericDesktopUsage()
{
  return &type metadata for HIDUsage.GenericDesktopUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.SimulationControlsUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xCE) {
    goto LABEL_17;
  }
  if (a2 + 50 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 50) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 50;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 50;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 50;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x33;
  int v8 = v6 - 51;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.SimulationControlsUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 50 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 50) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xCE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xCD)
  {
    unsigned int v6 = ((a2 - 206) >> 8) + 1;
    *unint64_t result = a2 + 50;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B5180ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 50;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.SimulationControlsUsage()
{
  return &type metadata for HIDUsage.SimulationControlsUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.VRControlsUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.VRControlsUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B518240);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.VRControlsUsage()
{
  return &type metadata for HIDUsage.VRControlsUsage;
}

ValueMetadata *type metadata accessor for HIDUsage.SportControlsUsage()
{
  return &type metadata for HIDUsage.SportControlsUsage;
}

ValueMetadata *type metadata accessor for HIDUsage.GameControlsUsage()
{
  return &type metadata for HIDUsage.GameControlsUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.GenericDeviceControlsUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE9) {
    goto LABEL_17;
  }
  if (a2 + 23 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 23) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 23;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 23;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 23;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v8 = v6 - 24;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.GenericDeviceControlsUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE8)
  {
    unsigned int v6 = ((a2 - 233) >> 8) + 1;
    *unint64_t result = a2 + 23;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B518404);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 23;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.GenericDeviceControlsUsage()
{
  return &type metadata for HIDUsage.GenericDeviceControlsUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.KeyboardOrKeypadUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x27) {
    goto LABEL_17;
  }
  if (a2 + 217 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 217) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 217;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 217;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 217;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xDA;
  int v8 = v6 - 218;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.KeyboardOrKeypadUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 217 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 217) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x27) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x26)
  {
    unsigned int v6 = ((a2 - 39) >> 8) + 1;
    *unint64_t result = a2 - 39;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B518598);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 - 39;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.KeyboardOrKeypadUsage()
{
  return &type metadata for HIDUsage.KeyboardOrKeypadUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.LEDUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xA1) {
    goto LABEL_17;
  }
  if (a2 + 95 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 95) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 95;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 95;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 95;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x60;
  int v8 = v6 - 96;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.LEDUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 95 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 95) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xA1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xA0)
  {
    unsigned int v6 = ((a2 - 161) >> 8) + 1;
    *unint64_t result = a2 + 95;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51872CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 95;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.LEDUsage()
{
  return &type metadata for HIDUsage.LEDUsage;
}

ValueMetadata *type metadata accessor for HIDUsage.ButtonUsage()
{
  return &type metadata for HIDUsage.ButtonUsage;
}

ValueMetadata *type metadata accessor for HIDUsage.OrdinalUsage()
{
  return &type metadata for HIDUsage.OrdinalUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.TelephonyDeviceUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x9E) {
    goto LABEL_17;
  }
  if (a2 + 98 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 98) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 98;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 98;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 98;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x63;
  int v8 = v6 - 99;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.TelephonyDeviceUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 98 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 98) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x9E) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x9D)
  {
    unsigned int v6 = ((a2 - 158) >> 8) + 1;
    *unint64_t result = a2 + 98;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B5188E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 98;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.TelephonyDeviceUsage()
{
  return &type metadata for HIDUsage.TelephonyDeviceUsage;
}

_WORD *__swift_memcpy2_2(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HIDUsage.ConsumerUsage(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE3F) {
    goto LABEL_17;
  }
  if (a2 + 449 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 449 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 449;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 449;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 449;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1C2;
  int v8 = v6 - 450;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDUsage.ConsumerUsage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 449 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 449 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE3F) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE3E)
  {
    unsigned int v6 = ((a2 - 65087) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 + 449;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B518A88);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(_WORD *)unint64_t result = a2 + 449;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.ConsumerUsage()
{
  return &type metadata for HIDUsage.ConsumerUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.DigitizersUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x95) {
    goto LABEL_17;
  }
  if (a2 + 107 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 107) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 107;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 107;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 107;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x6C;
  int v8 = v6 - 108;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.DigitizersUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 107 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 107) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x95) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x94)
  {
    unsigned int v6 = ((a2 - 149) >> 8) + 1;
    *unint64_t result = a2 + 107;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B518C1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 107;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.DigitizersUsage()
{
  return &type metadata for HIDUsage.DigitizersUsage;
}

ValueMetadata *type metadata accessor for HIDUsage.HapticsUsage()
{
  return &type metadata for HIDUsage.HapticsUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.PhysicalInputDeviceUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x98) {
    goto LABEL_17;
  }
  if (a2 + 104 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 104) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 104;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 104;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 104;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x69;
  int v8 = v6 - 105;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.PhysicalInputDeviceUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 104 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 104) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x98) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x97)
  {
    unsigned int v6 = ((a2 - 152) >> 8) + 1;
    *unint64_t result = a2 + 104;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B518DC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 104;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.PhysicalInputDeviceUsage()
{
  return &type metadata for HIDUsage.PhysicalInputDeviceUsage;
}

ValueMetadata *type metadata accessor for HIDUsage.SOCUsage()
{
  return &type metadata for HIDUsage.SOCUsage;
}

uint64_t _s7CoreHID8HIDUsageO18SportControlsUsageOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDF) {
    goto LABEL_17;
  }
  if (a2 + 33 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 33) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 33;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x22;
  int v8 = v6 - 34;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7CoreHID8HIDUsageO18SportControlsUsageOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 33 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 33) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDE)
  {
    unsigned int v6 = ((a2 - 223) >> 8) + 1;
    *unint64_t result = a2 + 33;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B518F6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 33;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.EyeAndHeadTrackersUsage()
{
  return &type metadata for HIDUsage.EyeAndHeadTrackersUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.AuxiliaryDisplayUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xB6) {
    goto LABEL_17;
  }
  if (a2 + 74 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 74) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 74;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 74;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 74;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x4B;
  int v8 = v6 - 75;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.AuxiliaryDisplayUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 74 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 74) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xB6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xB5)
  {
    unsigned int v6 = ((a2 - 182) >> 8) + 1;
    *unint64_t result = a2 + 74;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B519100);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 74;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.AuxiliaryDisplayUsage()
{
  return &type metadata for HIDUsage.AuxiliaryDisplayUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.SensorsUsage(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD68) {
    goto LABEL_17;
  }
  if (a2 + 664 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 664 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 664;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 664;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 664;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x299;
  int v8 = v6 - 665;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDUsage.SensorsUsage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 664 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 664 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD68) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD67)
  {
    unsigned int v6 = ((a2 - 64872) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 + 664;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51929CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(_WORD *)unint64_t result = a2 + 664;
        break;
    }
  }
  return result;
}

uint64_t sub_24B5192C4(unsigned __int16 *a1)
{
  return *a1;
}

_WORD *sub_24B5192CC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.SensorsUsage()
{
  return &type metadata for HIDUsage.SensorsUsage;
}

uint64_t _s7CoreHID8HIDUsageO17GameControlsUsageOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1D;
  int v8 = v6 - 29;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7CoreHID8HIDUsageO17GameControlsUsageOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE3)
  {
    unsigned int v6 = ((a2 - 228) >> 8) + 1;
    *unint64_t result = a2 + 28;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B519440);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 28;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.MedicalInstrumentUsage()
{
  return &type metadata for HIDUsage.MedicalInstrumentUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.BrailleDisplayUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD6) {
    goto LABEL_17;
  }
  if (a2 + 42 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 42) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 42;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2B;
  int v8 = v6 - 43;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.BrailleDisplayUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 42 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 42) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD5)
  {
    unsigned int v6 = ((a2 - 214) >> 8) + 1;
    *unint64_t result = a2 + 42;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B5195D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 42;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.BrailleDisplayUsage()
{
  return &type metadata for HIDUsage.BrailleDisplayUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.LightingAndIlluminationUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE0) {
    goto LABEL_17;
  }
  if (a2 + 32 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 32) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 32;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 32;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 32;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x21;
  int v8 = v6 - 33;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.LightingAndIlluminationUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 32 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 32) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDF)
  {
    unsigned int v6 = ((a2 - 224) >> 8) + 1;
    *unint64_t result = a2 + 32;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B519768);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 32;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.LightingAndIlluminationUsage()
{
  return &type metadata for HIDUsage.LightingAndIlluminationUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.MonitorUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.MonitorUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B5198FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.MonitorUsage()
{
  return &type metadata for HIDUsage.MonitorUsage;
}

ValueMetadata *type metadata accessor for HIDUsage.MonitorEnumeratedUsage()
{
  return &type metadata for HIDUsage.MonitorEnumeratedUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.VESAVirtualControlsUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD4) {
    goto LABEL_17;
  }
  if (a2 + 44 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 44) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 44;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 44;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 44;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2D;
  int v8 = v6 - 45;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.VESAVirtualControlsUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 44 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 44) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD3)
  {
    unsigned int v6 = ((a2 - 212) >> 8) + 1;
    *unint64_t result = a2 + 44;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B519AA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 44;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.VESAVirtualControlsUsage()
{
  return &type metadata for HIDUsage.VESAVirtualControlsUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.PowerUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xB4) {
    goto LABEL_17;
  }
  if (a2 + 76 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 76) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 76;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 76;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 76;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x4D;
  int v8 = v6 - 77;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.PowerUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 76 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 76) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xB4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xB3)
  {
    unsigned int v6 = ((a2 - 180) >> 8) + 1;
    *unint64_t result = a2 + 76;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B519C34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 76;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.PowerUsage()
{
  return &type metadata for HIDUsage.PowerUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.BatterySystemUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xA6) {
    goto LABEL_17;
  }
  if (a2 + 90 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 90) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 90;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 90;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 90;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x5B;
  int v8 = v6 - 91;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.BatterySystemUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 90 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 90) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xA6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xA5)
  {
    unsigned int v6 = ((a2 - 166) >> 8) + 1;
    *unint64_t result = a2 + 90;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B519DC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 90;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.BatterySystemUsage()
{
  return &type metadata for HIDUsage.BatterySystemUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.BarcodeScannerUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x3F) {
    goto LABEL_17;
  }
  if (a2 + 193 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 193) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 193;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 193;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 193;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC2;
  int v8 = v6 - 194;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.BarcodeScannerUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 193 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 193) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x3F) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x3E)
  {
    unsigned int v6 = ((a2 - 63) >> 8) + 1;
    *unint64_t result = a2 - 63;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B519F5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 - 63;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.BarcodeScannerUsage()
{
  return &type metadata for HIDUsage.BarcodeScannerUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.ScalesUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD3) {
    goto LABEL_17;
  }
  if (a2 + 45 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 45) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 45;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 45;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 45;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2E;
  int v8 = v6 - 46;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.ScalesUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 45 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 45) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD2)
  {
    unsigned int v6 = ((a2 - 211) >> 8) + 1;
    *unint64_t result = a2 + 45;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51A0F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 45;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.ScalesUsage()
{
  return &type metadata for HIDUsage.ScalesUsage;
}

uint64_t _s7CoreHID8HIDUsageO8SOCUsageOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7CoreHID8HIDUsageO8SOCUsageOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51A284);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.MagneticStripeReaderUsage()
{
  return &type metadata for HIDUsage.MagneticStripeReaderUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.CameraControlUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.CameraControlUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51A418);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_24B51A440(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.CameraControlUsage()
{
  return &type metadata for HIDUsage.CameraControlUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.ArcadeUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v8 = v6 - 27;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.ArcadeUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE5)
  {
    unsigned int v6 = ((a2 - 230) >> 8) + 1;
    *unint64_t result = a2 + 26;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51A5B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 26;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.ArcadeUsage()
{
  return &type metadata for HIDUsage.ArcadeUsage;
}

uint64_t getEnumTagSinglePayload for HIDUsage.FIDOAllianceUsage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDUsage.FIDOAllianceUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51A74CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage.FIDOAllianceUsage()
{
  return &type metadata for HIDUsage.FIDOAllianceUsage;
}

uint64_t HIDReportID.rawValue.getter()
{
  return *v0;
}

uint64_t HIDReportID.rawValue.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*HIDReportID.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t HIDReportID.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  a2[1] = result == 0;
  return result;
}

BOOL static HIDReportID.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void *sub_24B51A7FC()
{
  return &unk_24B53B640;
}

void static HIDReportID.allReports.getter(_WORD *a1@<X8>)
{
  *a1 = -255;
}

unsigned char *sub_24B51A814@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  BOOL v2 = *result == 0;
  *a2 = *result;
  a2[1] = v2;
  return result;
}

void sub_24B51A82C(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_24B51A838(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_24B51A84C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_24B51A860(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_24B51A874(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_24B51A888()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51A8D0()
{
  return sub_24B534E80();
}

uint64_t sub_24B51A8FC()
{
  return sub_24B534EB0();
}

unint64_t HIDReportID.description.getter()
{
  return 0xD000000000000014;
}

uint64_t sub_24B51A9E4()
{
  return 0;
}

BOOL static HIDReportType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HIDReportType.hash(into:)()
{
  return sub_24B534E70();
}

uint64_t sub_24B51AAD8@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = result == 1;
  if (result == 2) {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_24B51AAF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    long long v6 = xmmword_24B535FA0;
LABEL_11:
    *(_OWORD *)a3 = v6;
    return result;
  }
  uint64_t v5 = result;
  if (result == 4346709 && a2 == 0xE300000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    return result;
  }
  if (v5 == 0x746F6F7465756C42 && a2 == 0xE900000000000068 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B630;
    goto LABEL_11;
  }
  if (v5 == 0xD000000000000012 && a2 == 0x800000024B53D080 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B620;
    goto LABEL_11;
  }
  if (v5 == 0x504341412D5442 && a2 == 0xE700000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B610;
    goto LABEL_11;
  }
  if (v5 == 4475201 && a2 == 0xE300000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B600;
    goto LABEL_11;
  }
  if (v5 == 4403785 && a2 == 0xE300000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B5F0;
    goto LABEL_11;
  }
  if (v5 == 4804691 && a2 == 0xE300000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B5E0;
    goto LABEL_11;
  }
  if (v5 == 0x6C6169726553 && a2 == 0xE600000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B5D0;
    goto LABEL_11;
  }
  if (v5 == 5259625 && a2 == 0xE300000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B5C0;
    goto LABEL_11;
  }
  if (v5 == 0x79616C50726941 && a2 == 0xE700000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B5B0;
    goto LABEL_11;
  }
  if (v5 == 5591123 && a2 == 0xE300000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B5A0;
    goto LABEL_11;
  }
  if (v5 == 1330006342 && a2 == 0xE400000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B590;
    goto LABEL_11;
  }
  if (v5 == 0x6C617574726956 && a2 == 0xE700000000000000 || (unint64_t result = sub_24B534DD0(), (result & 1) != 0))
  {
    long long v6 = xmmword_24B53B580;
    goto LABEL_11;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = a2;

  return swift_bridgeObjectRetain();
}

unint64_t sub_24B51AF64(uint64_t *a1)
{
  unint64_t v1 = 0;
  switch(a1[1])
  {
    case 0:
      unint64_t v1 = 4346709;
      break;
    case 1:
      unint64_t v1 = 0x746F6F7465756C42;
      break;
    case 2:
      unint64_t v1 = 0xD000000000000012;
      break;
    case 3:
      unint64_t v1 = 0x504341412D5442;
      break;
    case 4:
      unint64_t v1 = 4475201;
      break;
    case 5:
      unint64_t v1 = 4403785;
      break;
    case 6:
      unint64_t v1 = 4804691;
      break;
    case 7:
      unint64_t v1 = 0x6C6169726553;
      break;
    case 8:
      unint64_t v1 = 5259625;
      break;
    case 9:
      unint64_t v1 = 0x79616C50726941;
      break;
    case 10:
      unint64_t v1 = 5591123;
      break;
    case 11:
      unint64_t v1 = 1330006342;
      break;
    case 12:
      unint64_t v1 = 0x6C617574726956;
      break;
    case 13:
      return v1;
    default:
      unint64_t v1 = *a1;
      sub_24B4E74B8(*a1, 0);
      break;
  }
  return v1;
}

uint64_t sub_24B51B110@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  if ((unint64_t)(result - 1) <= 0x22) {
    char v3 = result;
  }
  else {
    char v3 = 0;
  }
  if (a2) {
    char v3 = 0;
  }
  *a3 = v3;
  return result;
}

uint64_t sub_24B51B12C(unsigned __int8 *a1)
{
  if (*a1 == 36) {
    return 0;
  }
  else {
    return *a1;
  }
}

unint64_t HIDDeviceError.errorDescription.getter()
{
  unint64_t result = 0xD000000000000047;
  if (*(unsigned char *)(v0 + 4) != 1) {
    return 0xD000000000000059;
  }
  switch(*(_DWORD *)v0)
  {
    case 1:
      unint64_t result = 0xD000000000000046;
      break;
    case 2:
      unint64_t result = 0xD000000000000030;
      break;
    case 3:
      unint64_t result = 0xD000000000000038;
      break;
    case 4:
      unint64_t result = 0xD000000000000039;
      break;
    case 5:
      unint64_t result = 0xD000000000000035;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0xD000000000000016;
      break;
    case 8:
      unint64_t result = 0xD000000000000029;
      break;
    case 0xA:
      unint64_t result = 0xD00000000000004DLL;
      break;
    case 0xB:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 0xC:
      unint64_t result = 0xD000000000000048;
      break;
    case 0xD:
      unint64_t result = 0xD000000000000018;
      break;
    case 0xE:
      unint64_t result = 0xD00000000000001DLL;
      break;
    default:
      return result;
  }
  return result;
}

void *sub_24B51B2E0()
{
  return &unk_24B53B644;
}

void *sub_24B51B2EC()
{
  return &unk_24B53B648;
}

void *sub_24B51B2F8()
{
  return &unk_24B53B64C;
}

void *sub_24B51B304()
{
  return &unk_24B53B650;
}

void *sub_24B51B310()
{
  return &unk_24B53B654;
}

void *sub_24B51B31C()
{
  return &unk_24B53B658;
}

void *sub_24B51B328()
{
  return &unk_24B53B65C;
}

void *sub_24B51B334()
{
  return &unk_24B53B660;
}

void *sub_24B51B340()
{
  return &unk_24B53B664;
}

void *sub_24B51B34C()
{
  return &unk_24B53B668;
}

void *sub_24B51B358()
{
  return &unk_24B53B66C;
}

void *sub_24B51B364()
{
  return &unk_24B53B670;
}

void *sub_24B51B370()
{
  return &unk_24B53B674;
}

void *sub_24B51B37C()
{
  return &unk_24B53B678;
}

void *sub_24B51B388()
{
  return &unk_24B53B67C;
}

void *sub_24B51B394()
{
  return &unk_24B53B680;
}

void *sub_24B51B3A0()
{
  return &unk_24B53B684;
}

uint64_t sub_24B51B3AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch(result)
  {
    case 0xE00002BE:
      char v2 = 0;
      uint64_t v3 = 0x100000000;
      break;
    case 0xE00002BF:
    case 0xE00002C0:
    case 0xE00002C3:
    case 0xE00002C4:
    case 0xE00002C6:
    case 0xE00002C8:
    case 0xE00002C9:
    case 0xE00002CB:
    case 0xE00002CC:
    case 0xE00002CD:
    case 0xE00002CE:
    case 0xE00002CF:
    case 0xE00002D0:
    case 0xE00002D1:
    case 0xE00002D2:
    case 0xE00002D3:
    case 0xE00002D4:
    case 0xE00002D7:
    case 0xE00002D9:
    case 0xE00002DA:
    case 0xE00002DB:
    case 0xE00002DC:
    case 0xE00002DD:
    case 0xE00002DE:
    case 0xE00002DF:
    case 0xE00002E0:
    case 0xE00002E4:
    case 0xE00002E5:
    case 0xE00002E6:
    case 0xE00002E7:
    case 0xE00002E8:
    case 0xE00002EA:
    case 0xE00002EC:
      goto LABEL_5;
    case 0xE00002C1:
      char v2 = 0;
      uint64_t v3 = 0x100000001;
      break;
    case 0xE00002C2:
      char v2 = 0;
      uint64_t v3 = 0x100000002;
      break;
    case 0xE00002C5:
      char v2 = 0;
      uint64_t v3 = 0x100000003;
      break;
    case 0xE00002C7:
      char v2 = 0;
      uint64_t v3 = 0x100000004;
      break;
    case 0xE00002CA:
      char v2 = 0;
      uint64_t v3 = 0x100000005;
      break;
    case 0xE00002D5:
      char v2 = 0;
      uint64_t v3 = 0x100000006;
      break;
    case 0xE00002D6:
      char v2 = 0;
      uint64_t v4 = 5;
      goto LABEL_17;
    case 0xE00002D8:
      char v2 = 0;
      uint64_t v3 = 0x100000008;
      break;
    case 0xE00002E1:
      char v2 = 0;
      uint64_t v3 = 0x100000009;
      break;
    case 0xE00002E2:
      char v2 = 0;
      uint64_t v3 = 0x10000000ALL;
      break;
    case 0xE00002E3:
      char v2 = 0;
      uint64_t v4 = 9;
LABEL_17:
      uint64_t v3 = v4 | 0x100000002;
      break;
    case 0xE00002E9:
      char v2 = 0;
      uint64_t v3 = 0x10000000CLL;
      break;
    case 0xE00002EB:
      char v2 = 0;
      uint64_t v3 = 0x10000000DLL;
      break;
    case 0xE00002ED:
      char v2 = 0;
      uint64_t v3 = 0x10000000ELL;
      break;
    default:
      if (result)
      {
LABEL_5:
        char v2 = 0;
        uint64_t v3 = result;
      }
      else
      {
        uint64_t v3 = 0;
        char v2 = 1;
      }
      break;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = BYTE4(v3);
  *(unsigned char *)(a2 + 5) = v2;
  return result;
}

uint64_t sub_24B51B5E0(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6948);
  if (!swift_dynamicCast()) {
    return 3758096385;
  }
  uint64_t result = v3;
  if (v4) {
    return dword_24B53BAFC[v3];
  }
  return result;
}

uint64_t sub_24B51B654()
{
  uint64_t result = swift_slowAlloc();
  qword_2697CB7E0 = result;
  return result;
}

uint64_t *sub_24B51B67C()
{
  if (qword_2697CA710 != -1) {
    swift_once();
  }
  return &qword_2697CB7E0;
}

uint64_t sub_24B51B6C8()
{
  if (qword_2697CA710 != -1) {
    swift_once();
  }
  return qword_2697CB7E0;
}

unint64_t sub_24B51B714()
{
  if (qword_2697CA710 != -1) {
    swift_once();
  }
  uint64_t v0 = (unsigned int *)qword_2697CB7E0;
  mach_timebase_info((mach_timebase_info_t)qword_2697CB7E0);
  unint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t result = sub_24B534EE0();
  if (!is_mul_ok(result, 0x3B9ACA00uLL))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (((result | v4) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v5 = 1000000000 * result + v4 / 0x3B9ACA00;
  if (__CFADD__(1000000000 * result, v4 / 0x3B9ACA00))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!is_mul_ok(v5, v1))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2) {
    return v5 * v1 / v2;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_24B51B7DC@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  sub_24B534C50();
  sub_24B534C70();
  if (qword_2697CA710 != -1) {
    swift_once();
  }
  unint64_t v4 = (unsigned int *)qword_2697CB7E0;
  unint64_t result = mach_timebase_info((mach_timebase_info_t)qword_2697CB7E0);
  if (!is_mul_ok(a1, *v4))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v6 = v4[1];
  if (!v6)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v7 = a1 * *v4 / v6;
  unint64_t result = v7 / 0x3B9ACA00;
  BOOL v8 = v7 >= 1000000000 * (v7 / 0x3B9ACA00);
  unint64_t v9 = v7 % 0x3B9ACA00;
  if (!v8) {
    goto LABEL_12;
  }
  if (!is_mul_ok(v9, 0x3B9ACA00uLL))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (((1000000000 * v9) & 0x8000000000000000) == 0)
  {
    unint64_t result = sub_24B534EF0();
    *a2 = result;
    a2[1] = v10;
    return result;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_24B51B8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t sub_24B51B908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

unint64_t sub_24B51B940(unint64_t result)
{
  if (HIDWORD(result)) {
    __break(1u);
  }
  return result;
}

uint64_t _s7CoreHID18HIDDeviceTransportO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  switch(v3)
  {
    case 0uLL:
      if (v5) {
        goto LABEL_34;
      }
      unint64_t v3 = 0;
      char v6 = 1;
      break;
    case 1uLL:
      if (v5 != 1) {
        goto LABEL_34;
      }
      unint64_t v3 = 1;
      char v6 = 1;
      break;
    case 2uLL:
      if (v5 != 2) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 2;
      break;
    case 3uLL:
      if (v5 != 3) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 3;
      break;
    case 4uLL:
      if (v5 != 4) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 4;
      break;
    case 5uLL:
      if (v5 != 5) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 5;
      break;
    case 6uLL:
      if (v5 != 6) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 6;
      break;
    case 7uLL:
      if (v5 != 7) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 7;
      break;
    case 8uLL:
      if (v5 != 8) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 8;
      break;
    case 9uLL:
      if (v5 != 9) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 9;
      break;
    case 0xAuLL:
      if (v5 != 10) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 10;
      break;
    case 0xBuLL:
      if (v5 != 11) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 11;
      break;
    case 0xCuLL:
      if (v5 != 12) {
        goto LABEL_34;
      }
      char v6 = 1;
      unint64_t v3 = 12;
      break;
    default:
      if (v5 < 0xD)
      {
LABEL_34:
        char v6 = 0;
      }
      else if (v2 == v4 && v3 == v5)
      {
        char v6 = 1;
      }
      else
      {
        char v6 = sub_24B534DD0();
      }
      sub_24B4E74B8(v4, v5);
      sub_24B4E74B8(v2, v3);
      break;
  }
  sub_24B4E7960(v2, v3);
  sub_24B4E7960(v4, v5);
  return v6 & 1;
}

BOOL _s7CoreHID14HIDDeviceErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)a2;
  char v3 = *(unsigned char *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4) == 1)
  {
    switch(*(_DWORD *)a1)
    {
      case 1:
        if (v2 != 1) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if (v2 != 2) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if (v2 != 3) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if (v2 != 4) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 5:
        if (v2 != 5) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 6:
        if (v2 != 6) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 7:
        if (v2 != 7) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 8:
        if (v2 != 8) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 9:
        if (v2 != 9) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0xA:
        if (v2 != 10) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0xB:
        if (v2 != 11) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0xC:
        if (v2 != 12) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0xD:
        if (v2 != 13) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0xE:
        if (v2 <= 0xD) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if (v2) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (*(unsigned char *)(a2 + 4) & 1) == 0 && *(_DWORD *)a1 == v2;
  }
  return result;
}

unint64_t sub_24B51BD14()
{
  unint64_t result = qword_2697C6A68;
  if (!qword_2697C6A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A68);
  }
  return result;
}

unint64_t sub_24B51BD6C()
{
  unint64_t result = qword_2697C6A70;
  if (!qword_2697C6A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A70);
  }
  return result;
}

unint64_t sub_24B51BDC4()
{
  unint64_t result = qword_2697C6A78;
  if (!qword_2697C6A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6A78);
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDReportID()
{
  return &type metadata for HIDReportID;
}

unsigned char *storeEnumTagSinglePayload for HIDReportType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51BEF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDReportType()
{
  return &type metadata for HIDReportType;
}

unint64_t destroy for HIDDeviceTransport(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7CoreHID18HIDDeviceTransportOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for HIDDeviceTransport(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for HIDDeviceTransport(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDDeviceTransport(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483635);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 12;
  if (v4 >= 0xE) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HIDDeviceTransport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF3)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483635;
    if (a3 >= 0x7FFFFFF3) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF3) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 12;
    }
  }
  return result;
}

uint64_t sub_24B51C154(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_24B51C16C(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDDeviceTransport()
{
  return &type metadata for HIDDeviceTransport;
}

uint64_t getEnumTagSinglePayload for HIDDeviceLocalizationCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDD) {
    goto LABEL_17;
  }
  if (a2 + 35 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 35) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 35;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 35;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 35;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x24;
  int v8 = v6 - 36;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDDeviceLocalizationCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 35 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 35) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDC)
  {
    unsigned int v6 = ((a2 - 221) >> 8) + 1;
    *__n128 result = a2 + 35;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24B51C2F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 35;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDDeviceLocalizationCode()
{
  return &type metadata for HIDDeviceLocalizationCode;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HIDDeviceError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HIDDeviceError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_24B51C390(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24B51C3AC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDDeviceError()
{
  return &type metadata for HIDDeviceError;
}

uint64_t sub_24B51C3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t sub_24B51C3E4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24B51C474(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_24B51C52C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_24B51C558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_24B51C5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_24B51C5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_24B51C648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_24B51C698(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_24B51C7F4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x24B51CA0CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for IOHIDObjectWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t HIDDeviceClient.DeviceReference.deviceID.getter()
{
  return *(void *)v0;
}

uint64_t sub_24B51CA90@<X0>(io_registry_entry_t a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = *MEMORY[0x263EF8340];
  v5[0] = 0;
  uint64_t result = IORegistryEntryGetRegistryEntryID(a1, v5);
  if (result) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v5[0];
  }
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = result != 0;
  return result;
}

uint64_t HIDDeviceClient.DeviceReference.hash(into:)()
{
  return sub_24B534EA0();
}

BOOL static HIDDeviceClient.DeviceReference.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t HIDDeviceClient.DeviceReference.hashValue.getter()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51CB98()
{
  return sub_24B534EB0();
}

uint64_t sub_24B51CBE0()
{
  return sub_24B534EA0();
}

uint64_t sub_24B51CC0C()
{
  return sub_24B534EB0();
}

BOOL sub_24B51CC50(void *a1, void *a2)
{
  return *a1 == *a2;
}

void HIDDeviceClient.deviceReference.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 112);
}

uint64_t sub_24B51CC70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24B51CCC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 120);
  unint64_t v6 = *(void *)(*a2 + 128);
  *(void *)(v4 + 120) = *a1;
  *(void *)(v4 + 128) = v3;
  sub_24B4E5538(v2, v3);

  return sub_24B51CE1C(v5, v6);
}

void *sub_24B51CD14()
{
  uint64_t v1 = v0[15];
  unint64_t v2 = v0[16];
  uint64_t v3 = v1;
  if (v2 >> 60 != 15) {
    goto LABEL_4;
  }
  uint64_t result = (*(void *(**)(void *__return_ptr, unint64_t, unint64_t))(*v0 + 848))(v9, 0xD000000000000010, 0x800000024B53CBD0);
  if (v9[0])
  {
    v9[1] = v9[0];
    swift_dynamicCast();
    uint64_t v3 = v7;
    uint64_t v5 = v0[15];
    unint64_t v6 = v0[16];
    v0[15] = v7;
    v0[16] = v8;
    sub_24B4E5538(v7, v8);
    sub_24B51CE1C(v5, v6);
LABEL_4:
    sub_24B51CE30(v1, v2);
    return (void *)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B51CE1C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_24B4E5590(a1, a2);
  }
  return a1;
}

uint64_t sub_24B51CE30(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_24B4E5538(a1, a2);
  }
  return a1;
}

uint64_t sub_24B51CE44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 120);
  unint64_t v4 = *(void *)(v2 + 128);
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return sub_24B51CE1C(v3, v4);
}

uint64_t sub_24B51CE58()
{
  return 0;
}

void HIDDeviceClient.primaryUsage.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 136);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(v1 + 140);
  *(_DWORD *)a1 = v2;
}

uint64_t sub_24B51CE78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 344))();
  *a2 = result;
  return result;
}

uint64_t sub_24B51CECC(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 144) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

unint64_t sub_24B51CF10()
{
  if (v0[18])
  {
    unint64_t v1 = v0[18];
LABEL_20:
    swift_bridgeObjectRetain();
    return v1;
  }
  int v2 = v0;
  unint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr, unint64_t, unint64_t))(*v0 + 848))(&v19, 0xD000000000000010, 0x800000024B53CEC0);
  if (v19)
  {
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6C48);
    unint64_t result = swift_dynamicCast();
    uint64_t v4 = *(void *)(v18 + 16);
    if (!v4)
    {
      unint64_t v1 = MEMORY[0x263F8EE78];
LABEL_19:
      swift_bridgeObjectRelease();
      v2[18] = v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    uint64_t v5 = (uint64_t *)(v18 + 32);
    unint64_t v1 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v6 = *v5;
      if (!*(void *)(*v5 + 16)) {
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t result = sub_24B4EB80C(0x7355656369766544, 0xEF65676150656761);
      if ((v7 & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v8 = *(unsigned __int16 *)(*(void *)(v6 + 56) + 2 * result);
      if (*(void *)(v6 + 16) && (unint64_t v9 = sub_24B4EB80C(0x7355656369766544, 0xEB00000000656761), (v10 & 1) != 0))
      {
        int v11 = 0;
        int v12 = *(unsigned __int16 *)(*(void *)(v6 + 56) + 2 * v9);
      }
      else
      {
        int v12 = 0;
        int v11 = 1;
      }
      swift_bridgeObjectRelease();
      HIDUsage.init(page:usage:)(v12 | (v11 << 16), v8, (uint64_t)&v20);
      uint64_t v13 = BYTE4(v20);
      uint64_t v14 = v20;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = (unint64_t)sub_24B52DBA4(0, *(void *)(v1 + 16) + 1, 1, (char *)v1);
        unint64_t v1 = result;
      }
      unint64_t v16 = *(void *)(v1 + 16);
      unint64_t v15 = *(void *)(v1 + 24);
      if (v16 >= v15 >> 1)
      {
        unint64_t result = (unint64_t)sub_24B52DBA4((char *)(v15 > 1), v16 + 1, 1, (char *)v1);
        unint64_t v1 = result;
      }
      *(void *)(v1 + 16) = v16 + 1;
      unint64_t v17 = v1 + 6 * v16;
      *(unsigned char *)(v17 + 36) = (v14 | (unint64_t)(v13 << 32)) >> 32;
      *(_DWORD *)(v17 + 32) = v14;
      ++v5;
      if (!--v4) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24B51D170(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t HIDDeviceClient.vendorID.getter()
{
  return *(unsigned int *)(v0 + 152);
}

uint64_t HIDDeviceClient.productID.getter()
{
  return *(unsigned int *)(v0 + 156);
}

double sub_24B51D190@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a1 + 368))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_24B51D1F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 160);
  unint64_t v6 = *(void *)(*a2 + 168);
  *(void *)(v4 + 160) = *a1;
  *(void *)(v4 + 168) = v3;
  sub_24B4E74A8(v2, v3);

  return sub_24B51D374(v5, v6);
}

uint64_t sub_24B51D244@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[20];
  unint64_t v4 = v1[21];
  uint64_t v5 = v3;
  unint64_t v6 = v4;
  if (v4 == 14)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*v1 + 848))(&v14, 0x726F70736E617254, 0xE900000000000074);
    if (v14)
    {
      uint64_t v16 = v14;
      int v7 = swift_dynamicCast();
      BOOL v8 = v7 == 0;
      if (v7) {
        uint64_t v9 = v14;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v8) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v15;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    sub_24B51AAF8(v9, v10, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    uint64_t v5 = v14;
    unint64_t v6 = v15;
    uint64_t v11 = v1[20];
    unint64_t v12 = v1[21];
    v1[20] = v14;
    v1[21] = v6;
    sub_24B4E74A8(v5, v6);
    sub_24B51D374(v11, v12);
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_24B51D384(v3, v4);
}

uint64_t sub_24B51D374(uint64_t a1, unint64_t a2)
{
  if (a2 != 14) {
    return sub_24B4E7950(a1, a2);
  }
  return a1;
}

uint64_t sub_24B51D384(uint64_t a1, unint64_t a2)
{
  if (a2 != 14) {
    return sub_24B4E74A8(a1, a2);
  }
  return a1;
}

uint64_t sub_24B51D394(_OWORD *a1)
{
  uint64_t v3 = *(void *)(v1 + 160);
  unint64_t v2 = *(void *)(v1 + 168);
  *(_OWORD *)(v1 + 160) = *a1;
  return sub_24B51D374(v3, v2);
}

double sub_24B51D3A8@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_24B53BB40;
  return result;
}

uint64_t sub_24B51D3B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 392))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24B51D40C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 176);
  uint64_t v6 = *(void *)(*a2 + 184);
  *(void *)(v4 + 176) = v3;
  *(void *)(v4 + 184) = v2;
  swift_bridgeObjectRetain();

  return sub_24B51D564(v5, v6);
}

uint64_t sub_24B51D454()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    (*(void (**)(void *__return_ptr, uint64_t, unint64_t))(*v0 + 848))(v9, 0x746375646F7250, 0xE700000000000000);
    if (v9[0])
    {
      void v9[2] = v9[0];
      int v4 = swift_dynamicCast();
      if (v4) {
        uint64_t v3 = v9[0];
      }
      else {
        uint64_t v3 = 0;
      }
      if (v4) {
        uint64_t v5 = v9[1];
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = v0[22];
    uint64_t v7 = v0[23];
    v0[22] = v3;
    v0[23] = v5;
    swift_bridgeObjectRetain();
    sub_24B51D564(v6, v7);
  }
  sub_24B51D578(v1, v2);
  return v3;
}

uint64_t sub_24B51D564(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24B51D578(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24B51D58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 176);
  uint64_t v4 = *(void *)(v2 + 184);
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return sub_24B51D564(v3, v4);
}

uint64_t sub_24B51D5A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 416))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24B51D5F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 192);
  uint64_t v6 = *(void *)(*a2 + 200);
  *(void *)(v4 + 192) = v3;
  *(void *)(v4 + 200) = v2;
  swift_bridgeObjectRetain();

  return sub_24B51D564(v5, v6);
}

uint64_t sub_24B51D63C()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    (*(void (**)(void *__return_ptr, uint64_t, unint64_t))(*v0 + 848))(v9, 0x74636166756E614DLL, 0xEC00000072657275);
    if (v9[0])
    {
      void v9[2] = v9[0];
      int v4 = swift_dynamicCast();
      if (v4) {
        uint64_t v3 = v9[0];
      }
      else {
        uint64_t v3 = 0;
      }
      if (v4) {
        uint64_t v5 = v9[1];
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = v0[24];
    uint64_t v7 = v0[25];
    v0[24] = v3;
    v0[25] = v5;
    swift_bridgeObjectRetain();
    sub_24B51D564(v6, v7);
  }
  sub_24B51D578(v1, v2);
  return v3;
}

uint64_t sub_24B51D754(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 192);
  uint64_t v4 = *(void *)(v2 + 200);
  *(void *)(v2 + 192) = a1;
  *(void *)(v2 + 200) = a2;
  return sub_24B51D564(v3, v4);
}

uint64_t sub_24B51D768@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 440))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24B51D7BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 208);
  uint64_t v6 = *(void *)(*a2 + 216);
  *(void *)(v4 + 208) = v3;
  *(void *)(v4 + 216) = v2;
  swift_bridgeObjectRetain();

  return sub_24B51D564(v5, v6);
}

uint64_t sub_24B51D804()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    (*(void (**)(void *__return_ptr, uint64_t, unint64_t))(*v0 + 848))(v9, 0x6D754E6C65646F4DLL, 0xEB00000000726562);
    if (v9[0])
    {
      void v9[2] = v9[0];
      int v4 = swift_dynamicCast();
      if (v4) {
        uint64_t v3 = v9[0];
      }
      else {
        uint64_t v3 = 0;
      }
      if (v4) {
        uint64_t v5 = v9[1];
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = v0[26];
    uint64_t v7 = v0[27];
    v0[26] = v3;
    v0[27] = v5;
    swift_bridgeObjectRetain();
    sub_24B51D564(v6, v7);
  }
  sub_24B51D578(v1, v2);
  return v3;
}

uint64_t sub_24B51D91C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 208);
  uint64_t v4 = *(void *)(v2 + 216);
  *(void *)(v2 + 208) = a1;
  *(void *)(v2 + 216) = a2;
  return sub_24B51D564(v3, v4);
}

uint64_t sub_24B51D930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 464))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_24B51D98C(uint64_t result, uint64_t *a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + 224) = *(void *)result;
  *(_WORD *)(v3 + 232) = v2;
  return result;
}

uint64_t sub_24B51D9A8()
{
  if ((*(unsigned char *)(v0 + 233) & 1) == 0) {
    return *(void *)(v0 + 224);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v0 + 848))(&v5, 0x4E6E6F6973726556, 0xED00007265626D75);
  if (v5)
  {
    int v1 = swift_dynamicCast();
    if (v1) {
      uint64_t result = v4;
    }
    else {
      uint64_t result = 0;
    }
    char v3 = v1 ^ 1;
  }
  else
  {
    uint64_t result = 0;
    char v3 = 1;
  }
  *(void *)(v0 + 224) = result;
  *(unsigned char *)(v0 + 232) = v3;
  *(unsigned char *)(v0 + 233) = 0;
  return result;
}

uint64_t sub_24B51DA88(uint64_t result, char a2)
{
  *(void *)(v2 + 224) = result;
  *(unsigned char *)(v2 + 232) = a2 & 1;
  *(unsigned char *)(v2 + 233) = 0;
  return result;
}

uint64_t sub_24B51DA9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 488))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24B51DAF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 240);
  uint64_t v6 = *(void *)(*a2 + 248);
  *(void *)(v4 + 240) = v3;
  *(void *)(v4 + 248) = v2;
  swift_bridgeObjectRetain();

  return sub_24B51D564(v5, v6);
}

uint64_t sub_24B51DB38()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    (*(void (**)(void *__return_ptr, uint64_t, unint64_t))(*v0 + 848))(v9, 0x754E6C6169726553, 0xEC0000007265626DLL);
    if (v9[0])
    {
      void v9[2] = v9[0];
      int v4 = swift_dynamicCast();
      if (v4) {
        uint64_t v3 = v9[0];
      }
      else {
        uint64_t v3 = 0;
      }
      if (v4) {
        uint64_t v5 = v9[1];
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = v0[30];
    uint64_t v7 = v0[31];
    v0[30] = v3;
    v0[31] = v5;
    swift_bridgeObjectRetain();
    sub_24B51D564(v6, v7);
  }
  sub_24B51D578(v1, v2);
  return v3;
}

uint64_t sub_24B51DC50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 248);
  *(void *)(v2 + 240) = a1;
  *(void *)(v2 + 248) = a2;
  return sub_24B51D564(v3, v4);
}

uint64_t sub_24B51DC64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 512))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24B51DCB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 256);
  uint64_t v6 = *(void *)(*a2 + 264);
  *(void *)(v4 + 256) = v3;
  *(void *)(v4 + 264) = v2;
  swift_bridgeObjectRetain();

  return sub_24B51D564(v5, v6);
}

uint64_t sub_24B51DD00()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    (*(void (**)(void *__return_ptr, unint64_t, unint64_t))(*v0 + 848))(v9, 0xD000000000000016, 0x800000024B53CBF0);
    if (v9[0])
    {
      void v9[2] = v9[0];
      int v4 = swift_dynamicCast();
      if (v4) {
        uint64_t v3 = v9[0];
      }
      else {
        uint64_t v3 = 0;
      }
      if (v4) {
        uint64_t v5 = v9[1];
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = v0[32];
    uint64_t v7 = v0[33];
    v0[32] = v3;
    v0[33] = v5;
    swift_bridgeObjectRetain();
    sub_24B51D564(v6, v7);
  }
  sub_24B51D578(v1, v2);
  return v3;
}

uint64_t sub_24B51DE14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 256);
  uint64_t v4 = *(void *)(v2 + 264);
  *(void *)(v2 + 256) = a1;
  *(void *)(v2 + 264) = a2;
  return sub_24B51D564(v3, v4);
}

uint64_t sub_24B51DE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 536))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_24B51DE84(uint64_t result, uint64_t *a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + 272) = *(void *)result;
  *(_WORD *)(v3 + 280) = v2;
  return result;
}

uint64_t sub_24B51DEA0()
{
  if ((*(unsigned char *)(v0 + 281) & 1) == 0) {
    return *(void *)(v0 + 272);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v0 + 848))(&v5, 0x6E6F697461636F4CLL, 0xEA00000000004449);
  if (v5)
  {
    int v1 = swift_dynamicCast();
    if (v1) {
      uint64_t result = v4;
    }
    else {
      uint64_t result = 0;
    }
    char v3 = v1 ^ 1;
  }
  else
  {
    uint64_t result = 0;
    char v3 = 1;
  }
  *(void *)(v0 + 272) = result;
  *(unsigned char *)(v0 + 280) = v3;
  *(unsigned char *)(v0 + 281) = 0;
  return result;
}

uint64_t sub_24B51DF84(uint64_t result, char a2)
{
  *(void *)(v2 + 272) = result;
  *(unsigned char *)(v2 + 280) = a2 & 1;
  *(unsigned char *)(v2 + 281) = 0;
  return result;
}

uint64_t sub_24B51DF98()
{
  return 0;
}

void *sub_24B51DFAC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 560))(&v4);
  *a2 = v4;
  return result;
}

unsigned char *sub_24B51E010(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 282) = *result;
  return result;
}

void sub_24B51E020(unsigned char *a1@<X8>)
{
  int v3 = v1[282];
  if (v3 == 36)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v1 + 848))(&v8, 0x437972746E756F43, 0xEB0000000065646FLL);
    if (v8)
    {
      int v4 = swift_dynamicCast();
      if (v4) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = 0;
      }
      char v6 = v4 ^ 1;
    }
    else
    {
      uint64_t v5 = 0;
      char v6 = 1;
    }
    sub_24B51B110(v5, v6, &v8);
    LOBYTE(v3) = v8;
    v1[282] = v8;
  }
  *a1 = v3;
}

unsigned char *sub_24B51E104(unsigned char *result)
{
  *(unsigned char *)(v1 + 282) = *result;
  return result;
}

uint64_t sub_24B51E110@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 584))();
  *a2 = result & 1;
  return result;
}

unsigned char *sub_24B51E168(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 283) = *result;
  return result;
}

uint64_t sub_24B51E178()
{
  int v1 = v0[283];
  if (v1 != 2) {
    return v1 & 1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v0 + 848))(&v4, 0x6E492D746C697542, 0xE800000000000000);
  if (v4 && (swift_dynamicCast() & 1) != 0) {
    uint64_t result = v3;
  }
  else {
    uint64_t result = 0;
  }
  v0[283] = result;
  return result;
}

uint64_t sub_24B51E230(uint64_t result)
{
  *(unsigned char *)(v1 + 283) = result;
  return result;
}

uint64_t sub_24B51E238@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 608))();
  *a2 = result;
  return result;
}

uint64_t sub_24B51E28C(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 288) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

CFIndex sub_24B51E2D0()
{
  if (*(void *)(v0 + 288))
  {
    uint64_t v1 = *(char **)(v0 + 288);
LABEL_24:
    swift_bridgeObjectRetain();
    return (CFIndex)v1;
  }
  CFArrayRef v2 = IOHIDDeviceCopyMatchingElements(*(IOHIDDeviceRef *)(v0 + 296), 0, 0);
  if (!v2) {
    goto LABEL_22;
  }
  CFArrayRef v3 = v2;
  CFIndex result = CFArrayGetCount(v2);
  if ((result & 0x8000000000000000) == 0)
  {
    CFIndex v5 = result;
    if (result)
    {
      CFIndex result = (CFIndex)CFArrayGetValueAtIndex(v3, 0);
      if (result)
      {
        uint64_t v1 = (char *)MEMORY[0x263F8EE78];
        CFIndex v6 = 1;
        while (1)
        {
          id v7 = (id)result;
          swift_retain();
          sub_24B4DF128(v7, v0, (uint64_t)v17);
          sub_24B533E3C((uint64_t)v17, (uint64_t)v18);
          sub_24B533E3C((uint64_t)v18, (uint64_t)v19);
          if (sub_24B4E48FC((uint64_t)v19) == 1)
          {

            if (v5 == v6) {
              goto LABEL_20;
            }
          }
          else
          {
            if ((v20[8] & 1) == 0)
            {
              sub_24B533E3C((uint64_t)v18, (uint64_t)v17);
              sub_24B4E4914((uint64_t)v17);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v1 = sub_24B4E4948(0, *((void *)v1 + 2) + 1, 1, v1);
              }
              unint64_t v9 = *((void *)v1 + 2);
              unint64_t v8 = *((void *)v1 + 3);
              if (v9 >= v8 >> 1) {
                uint64_t v1 = sub_24B4E4948((char *)(v8 > 1), v9 + 1, 1, v1);
              }
              *((void *)v1 + 2) = v9 + 1;
              uint64_t v10 = &v1[128 * v9];
              long long v11 = v19[0];
              long long v12 = v19[1];
              long long v13 = v19[3];
              *((_OWORD *)v10 + 4) = v19[2];
              *((_OWORD *)v10 + 5) = v13;
              *((_OWORD *)v10 + 2) = v11;
              *((_OWORD *)v10 + 3) = v12;
              long long v14 = v19[4];
              long long v15 = v19[5];
              long long v16 = *(_OWORD *)v20;
              *(_OWORD *)(v10 + 137) = *(_OWORD *)&v20[9];
              *((_OWORD *)v10 + 7) = v15;
              *((_OWORD *)v10 + 8) = v16;
              *((_OWORD *)v10 + 6) = v14;
            }

            sub_24B4E4A4C((uint64_t)v18);
            if (v5 == v6)
            {
LABEL_20:

              goto LABEL_23;
            }
          }
          CFIndex result = (CFIndex)CFArrayGetValueAtIndex(v3, v6++);
          if (!result) {
            goto LABEL_26;
          }
        }
      }
      goto LABEL_26;
    }

LABEL_22:
    uint64_t v1 = (char *)MEMORY[0x263F8EE78];
LABEL_23:
    *(void *)(v0 + 288) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_24B51E4E0(uint64_t a1)
{
  *(void *)(v1 + 288) = a1;
  return swift_bridgeObjectRelease();
}

id sub_24B51E4F0()
{
  return *(id *)(v0 + 296);
}

id sub_24B51E4F8()
{
  return *(id *)(v0 + 304);
}

uint64_t sub_24B51E500()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_24B51E508()
{
  return *(void *)(v0 + 336);
}

uint64_t sub_24B51E510()
{
  swift_beginAccess();
  return *(void *)(v0 + 344);
}

uint64_t sub_24B51E544(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 344) = a1;
  return result;
}

uint64_t (*sub_24B51E584())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24B51E5D8()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 352);
}

uint64_t sub_24B51E60C(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 352) = a1;
  return result;
}

uint64_t (*sub_24B51E64C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24B51E6A0()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 353);
}

uint64_t sub_24B51E6D4(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 353) = a1;
  return result;
}

uint64_t (*sub_24B51E714())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24B51E768()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 354);
}

uint64_t sub_24B51E79C(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 354) = a1;
  return result;
}

uint64_t (*sub_24B51E7DC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24B51E830()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 355);
}

uint64_t sub_24B51E864(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 355) = a1;
  return result;
}

uint64_t (*sub_24B51E8A4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24B51E8F8()
{
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24B51E904()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B51E93C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 360) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24B51E984())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24B51E9D8()
{
  return *(void *)(v0 + 368);
}

void HIDDeviceClient.__allocating_init(deviceReference:)(uint64_t *a1)
{
}

void HIDDeviceClient.init(deviceReference:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_24B534AB0();
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  MEMORY[0x270FA5388](v4);
  char v55 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_24B534AE0();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24B534880();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = *a1;
  swift_defaultActor_initialize();
  *(_OWORD *)(v1 + 120) = xmmword_24B53BB50;
  *(void *)(v1 + 144) = 0;
  *(_OWORD *)(v1 + 160) = xmmword_24B53BB40;
  *(_OWORD *)(v1 + 176) = xmmword_24B53B630;
  *(_OWORD *)(v1 + 192) = xmmword_24B53B630;
  *(_OWORD *)(v1 + 208) = xmmword_24B53B630;
  *(void *)(v1 + 224) = 0;
  *(_WORD *)(v1 + 232) = 256;
  *(_OWORD *)(v1 + 240) = xmmword_24B53B630;
  *(_OWORD *)(v1 + 256) = xmmword_24B53B630;
  *(void *)(v1 + 272) = 0;
  *(_DWORD *)(v1 + 280) = 35913984;
  *(void *)(v1 + 288) = 0;
  *(void *)(v1 + 344) = 0;
  *(_DWORD *)(v1 + 352) = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 360) = MEMORY[0x263F8EE78];
  mach_port_t v10 = *MEMORY[0x263F0EC88];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6A80);
  uint64_t inited = swift_initStackObject();
  long long v58 = xmmword_24B5359C0;
  *(_OWORD *)(inited + 16) = xmmword_24B5359C0;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x800000024B53D460;
  *(void *)(inited + 48) = v8;
  sub_24B51F2F4(inited);
  CFDictionaryRef v12 = (const __CFDictionary *)sub_24B5348C0();
  swift_bridgeObjectRelease();
  io_service_t MatchingService = IOServiceGetMatchingService(v10, v12);
  if (!MatchingService || (IOHIDDeviceRef v14 = IOHIDDeviceCreate(0, MatchingService)) == 0)
  {
    sub_24B51CE1C(*(void *)(v1 + 120), *(void *)(v1 + 128));
    swift_bridgeObjectRelease();
    sub_24B51D374(*(void *)(v1 + 160), *(void *)(v1 + 168));
    sub_24B51D564(*(void *)(v1 + 176), *(void *)(v1 + 184));
    sub_24B51D564(*(void *)(v1 + 192), *(void *)(v1 + 200));
    sub_24B51D564(*(void *)(v1 + 208), *(void *)(v1 + 216));
    sub_24B51D564(*(void *)(v1 + 240), *(void *)(v1 + 248));
    sub_24B51D564(*(void *)(v1 + 256), *(void *)(v1 + 264));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for HIDDeviceClient();
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
    return;
  }
  IOHIDDeviceRef v15 = v14;
  IOHIDDeviceRef v62 = v14;
  type metadata accessor for IOHIDDevice(0);
  uint64_t v17 = v16;
  CFTypeRef v54 = v15;
  sub_24B51B908((uint64_t)&v62, v17, (uint64_t)v60);
  uint64_t v18 = (void *)v60[0];
  *(void *)(v1 + 296) = v60[0];
  *(void *)(v1 + 112) = v8;
  IONotificationPortRef v19 = IONotificationPortCreate(v10);
  if (!v19)
  {
    __break(1u);
    goto LABEL_19;
  }
  *(void *)(v1 + 368) = v19;
  uint64_t v20 = v18;
  uint64_t v21 = (__CFString *)sub_24B534950();
  CFTypeRef v22 = (id)IOHIDDeviceGetProperty(v20, v21);

  if (!v22)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v60[0] = v22;
  swift_dynamicCast();
  uint64_t v23 = v61;
  unint64_t v24 = (__IOHIDDevice *)*(id *)(v1 + 296);
  int64_t v25 = (__CFString *)sub_24B534950();
  unint64_t v26 = (id)IOHIDDeviceGetProperty(v24, v25);

  if (v26)
  {
    IOHIDDeviceRef v62 = v26;
    int v27 = swift_dynamicCast();
    int v28 = v59;
    int v29 = v27 ^ 1;
    if (!v27) {
      int v28 = 0;
    }
  }
  else
  {
    int v28 = 0;
    int v29 = 1;
  }
  HIDUsage.init(page:usage:)(v28 | (v29 << 16), v23, (uint64_t)&v62);
  int v30 = (int)v62;
  *(unsigned char *)(v1 + 140) = BYTE4(v62);
  *(_DWORD *)(v1 + 136) = v30;
  uint64_t v31 = (__IOHIDDevice *)*(id *)(v1 + 296);
  uint64_t v32 = (__CFString *)sub_24B534950();
  CFTypeRef v33 = (id)IOHIDDeviceGetProperty(v31, v32);

  if (!v33) {
    goto LABEL_20;
  }
  v60[0] = v33;
  swift_dynamicCast();
  *(_DWORD *)(v1 + 152) = v62;
  sub_24B4EBFB0();
  v53[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C67D0);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v58;
  uint64_t v35 = *(void *)(v1 + 112);
  uint64_t v36 = MEMORY[0x263F8E9C0];
  *(void *)(v34 + 56) = MEMORY[0x263F8E970];
  *(void *)(v34 + 64) = v36;
  *(void *)(v34 + 32) = v35;
  sub_24B534960();
  sub_24B534870();
  v60[0] = v9;
  sub_24B531494(&qword_2697C6838, 255, MEMORY[0x263F8F198]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6840);
  sub_24B4EBFF0();
  sub_24B534BA0();
  (*(void (**)(char *, void, uint64_t))(v56 + 104))(v55, *MEMORY[0x263F8F138], v57);
  *(void *)(v1 + 304) = sub_24B534AF0();
  char v37 = (__IOHIDDevice *)*(id *)(v1 + 296);
  long long v38 = (__CFString *)sub_24B534950();
  CFTypeRef v39 = (id)IOHIDDeviceGetProperty(v37, v38);

  if (!v39)
  {
LABEL_21:
    __break(1u);
    return;
  }
  v60[0] = v39;
  swift_dynamicCast();
  *(void *)(v2 + 328) = v62;
  *(void *)(v2 + 336) = swift_slowAlloc();
  long long v40 = (__IOHIDDevice *)*(id *)(v2 + 296);
  long long v41 = (__CFString *)sub_24B534950();
  CFTypeRef v42 = (id)IOHIDDeviceGetProperty(v40, v41);

  if (v42)
  {
    v60[0] = v42;
    char v43 = swift_dynamicCast();
    long long v44 = v54;
    uint64_t v45 = MEMORY[0x263F8E9C0];
    if (v43) {
      int v46 = (int)v62;
    }
    else {
      int v46 = 0;
    }
  }
  else
  {
    int v46 = 0;
    long long v44 = v54;
    uint64_t v45 = MEMORY[0x263F8E9C0];
  }
  *(_DWORD *)(v2 + 156) = v46;
  v60[0] = 0;
  v60[1] = 0xE000000000000000;
  sub_24B534BD0();
  sub_24B534990();
  int v47 = *(_DWORD *)(v2 + 136);
  BYTE4(v62) = *(unsigned char *)(v2 + 140);
  LODWORD(v62) = v47;
  sub_24B4E5464();
  sub_24B534DB0();
  sub_24B534990();
  swift_bridgeObjectRelease();
  sub_24B534990();
  LODWORD(v62) = *(_DWORD *)(v2 + 152);
  sub_24B534DB0();
  sub_24B534990();
  swift_bridgeObjectRelease();
  sub_24B534990();
  LODWORD(v62) = *(_DWORD *)(v2 + 156);
  sub_24B534DB0();
  sub_24B534990();
  swift_bridgeObjectRelease();
  sub_24B534990();
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = v58;
  uint64_t v49 = *(void *)(v2 + 112);
  *(void *)(v48 + 56) = MEMORY[0x263F8E970];
  *(void *)(v48 + 64) = v45;
  *(void *)(v48 + 32) = v49;
  uint64_t v50 = sub_24B534960();
  uint64_t v52 = v51;

  swift_bridgeObjectRelease();
  *(void *)(v2 + 312) = v50;
  *(void *)(v2 + 320) = v52;
}

unint64_t sub_24B51F2F4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6C40);
  uint64_t v2 = (void *)sub_24B534DA0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_24B4EB80C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    mach_port_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HIDDeviceClient()
{
  return self;
}

void type metadata accessor for IOHIDDevice(uint64_t a1)
{
}

unint64_t sub_24B51F440(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68E8);
  uint64_t v2 = (void *)sub_24B534DA0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_24B4EB80C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    mach_port_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24B51F55C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BE0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BD0);
  uint64_t v6 = sub_24B534DA0();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_9;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_24B534090(v12, (uint64_t)v5, &qword_2697C6BE0);
    unint64_t result = sub_24B52D840((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
    unint64_t result = sub_24B531720((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
    uint64_t v19 = v7[7] + 16 * v16;
    char v20 = v9[8];
    *(void *)uint64_t v19 = *(void *)v9;
    *(unsigned char *)(v19 + 8) = v20;
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_12;
    }
    void v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (unint64_t)v7;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_24B51F760(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BD8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BB0);
  uint64_t v6 = sub_24B534DA0();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_9;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_24B534090(v12, (uint64_t)v5, &qword_2697C6BD8);
    unint64_t result = (unint64_t)sub_24B52D9F4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
    unint64_t result = sub_24B531720((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    uint64_t v19 = v7[7] + 16 * v16;
    char v20 = v9[8];
    *(void *)uint64_t v19 = *(void *)v9;
    *(unsigned char *)(v19 + 8) = v20;
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_12;
    }
    void v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (unint64_t)v7;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t HIDDeviceClient.deinit()
{
  swift_beginAccess();
  *(unsigned char *)(v0 + 353) = 1;
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 352) != 1) {
    goto LABEL_3;
  }
  IONotificationPortDestroy(*(IONotificationPortRef *)(v0 + 368));
  IOHIDDeviceCancel(*(IOHIDDeviceRef *)(v0 + 296));
  uint64_t v1 = *(NSObject **)(v0 + 304);
  v4[4] = nullsub_1;
  v4[5] = 0;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 1107296256;
  v4[2] = sub_24B4E8E84;
  v4[3] = &block_descriptor_0;
  uint64_t v2 = _Block_copy(v4);
  swift_release();
  dispatch_sync(v1, v2);
  _Block_release(v2);
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if (result)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    MEMORY[0x24C5D3C50](*(void *)(v0 + 336), -1, -1);
    sub_24B51CE1C(*(void *)(v0 + 120), *(void *)(v0 + 128));
    swift_bridgeObjectRelease();
    sub_24B51D374(*(void *)(v0 + 160), *(void *)(v0 + 168));
    sub_24B51D564(*(void *)(v0 + 176), *(void *)(v0 + 184));
    sub_24B51D564(*(void *)(v0 + 192), *(void *)(v0 + 200));
    sub_24B51D564(*(void *)(v0 + 208), *(void *)(v0 + 216));
    sub_24B51D564(*(void *)(v0 + 240), *(void *)(v0 + 248));
    sub_24B51D564(*(void *)(v0 + 256), *(void *)(v0 + 264));
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_defaultActor_destroy();
    return v0;
  }
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t HIDDeviceClient.__deallocating_deinit()
{
  HIDDeviceClient.deinit();

  return MEMORY[0x270FA2418](v0);
}

uint64_t sub_24B51FB50()
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(void))(*v0 + 656))();
  if ((result & 1) == 0)
  {
    (*(void (**)(void *))(*v0 + 640))(v0);
    uint64_t v2 = (IONotificationPort *)v0[46];
    uint64_t v3 = v0[38];
    IONotificationPortSetDispatchQueue(v2, v3);
    io_object_t notification = 0;
    mach_port_t v4 = *MEMORY[0x263F0EC88];
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6A80);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_24B5359C0;
    *(void *)(inited + 32) = 0xD000000000000011;
    *(void *)(inited + 40) = 0x800000024B53D460;
    *(void *)(inited + 48) = v0[14];
    sub_24B51F2F4(inited);
    CFDictionaryRef v6 = (const __CFDictionary *)sub_24B5348C0();
    swift_bridgeObjectRelease();
    io_service_t MatchingService = IOServiceGetMatchingService(v4, v6);
    uint64_t v8 = *(uint64_t (**)(void))(*v0 + 632);
    uint64_t result = v8();
    if (result)
    {
      uint64_t v9 = IOServiceAddInterestNotification(v2, MatchingService, "IOGeneralInterest", (IOServiceInterestCallback)sub_24B5200F8, (void *)result, &notification);
      uint64_t v10 = (__IOHIDDevice *)v0[37];
      uint64_t result = ((uint64_t (*)(uint64_t))v8)(v9);
      if (result)
      {
        IOHIDDeviceRegisterRemovalCallback(v10, (IOHIDCallback)sub_24B52024C, (void *)result);
        CFIndex v12 = v0[41];
        unint64_t v11 = (uint8_t *)v0[42];
        uint64_t result = v8();
        if (result)
        {
          IOHIDDeviceRegisterInputReportWithTimeStampCallback(v10, v11, v12, (IOHIDReportWithTimeStampCallback)sub_24B520658, (void *)result);
          uint64_t result = v8();
          if (result)
          {
            IOHIDDeviceRegisterInputValueCallback(v10, (IOHIDValueCallback)sub_24B520B28, (void *)result);
            aBlock[4] = nullsub_1;
            aBlock[5] = 0;
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 1107296256;
            aBlock[2] = sub_24B4EA2E8;
            aBlock[3] = &block_descriptor_6;
            uint64_t v13 = _Block_copy(aBlock);
            IOHIDDeviceSetCancelHandler(v10, v13);
            _Block_release(v13);
            IOHIDDeviceSetDispatchQueue(v10, v3);
            IOHIDDeviceActivate(v10);
            return (*(uint64_t (**)(uint64_t))(*v0 + 664))(1);
          }
LABEL_11:
          __break(1u);
          return result;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_24B51FE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  *(_DWORD *)(v7 + 72) = a5;
  *(_DWORD *)(v7 + 76) = a6;
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a7;
  *(void *)(v7 + 32) = type metadata accessor for HIDDeviceClient.Notification(0);
  *(void *)(v7 + 40) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24B51FF2C, 0, 0);
}

uint64_t sub_24B51FF2C()
{
  uint64_t v1 = *(void **)(v0[2] + 16);
  v0[6] = v1;
  swift_retain();
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = *v1 + 824;
  v0[7] = *(void *)v2;
  v0[8] = v2 & 0xFFFFFFFFFFFFLL | 0xF967000000000000;
  return MEMORY[0x270FA2498](sub_24B51FFF0, v1, 0);
}

uint64_t sub_24B51FFF0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 56))(v1);
  sub_24B52E080(v1, type metadata accessor for HIDDeviceClient.Notification);
  return MEMORY[0x270FA2498](sub_24B52007C, 0, 0);
}

uint64_t sub_24B52007C()
{
  sub_24B534AD0();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24B5200F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_24B530E34(a1, a3, a4);
}

uint64_t sub_24B520104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  v5[4] = type metadata accessor for HIDDeviceClient.Notification(0);
  v5[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24B520198, 0, 0);
}

uint64_t sub_24B520198()
{
  uint64_t v1 = *(void **)(v0[2] + 16);
  v0[6] = v1;
  swift_retain();
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = *v1 + 824;
  v0[7] = *(void *)v2;
  v0[8] = v2 & 0xFFFFFFFFFFFFLL | 0xF967000000000000;
  return MEMORY[0x270FA2498](sub_24B51FFF0, v1, 0);
}

uint64_t sub_24B52024C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68B0);
  uint64_t result = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    type metadata accessor for HIDDeviceClient.Context();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    dispatch_semaphore_t v7 = dispatch_semaphore_create(0);
    uint64_t v8 = sub_24B534A40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = 0;
    void v9[3] = 0;
    v9[4] = v6;
    v9[5] = v7;
    swift_retain();
    uint64_t v10 = v7;
    sub_24B4E98B8((uint64_t)v5, (uint64_t)&unk_2697C6C28, (uint64_t)v9);
    swift_release();
    sub_24B534AC0();

    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24B520390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 48) = v11;
  *(void *)(v8 + 24) = a6;
  *(void *)(v8 + 32) = a7;
  *(_DWORD *)(v8 + 96) = a5;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 56) = type metadata accessor for HIDDeviceClient.Notification(0);
  *(void *)(v8 + 64) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24B520438, 0, 0);
}

uint64_t sub_24B520438()
{
  uint64_t v1 = *(unsigned int *)(v0 + 96);
  uint64_t v2 = *(void **)(*(void *)(v0 + 16) + 16);
  *(void *)(v0 + 72) = v2;
  uint64_t v3 = swift_retain();
  if (v1 > 0xFF)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 64);
    unint64_t v8 = *(void *)(v0 + 32);
    unint64_t v7 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 24);
    uint64_t v10 = (unint64_t *)(v6 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB8) + 64));
    HIDReportID.init(rawValue:)(v1, (unsigned char *)v6);
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 16) = v8;
    sub_24B4E5538(v9, v8);
    sub_24B51B7DC(v7, v10);
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = *v2 + 824;
    *(void *)(v0 + 80) = *(void *)v11;
    *(void *)(v0 + 88) = v11 & 0xFFFFFFFFFFFFLL | 0xF967000000000000;
    uint64_t v3 = (uint64_t)sub_24B520550;
    uint64_t v4 = v2;
    uint64_t v5 = 0;
  }
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24B520550()
{
  uint64_t v1 = *(void *)(v0 + 64);
  (*(void (**)(uint64_t))(v0 + 80))(v1);
  sub_24B52E080(v1, type metadata accessor for HIDDeviceClient.Notification);
  return MEMORY[0x270FA2498](sub_24B5205DC, 0, 0);
}

uint64_t sub_24B5205DC()
{
  sub_24B534AD0();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24B520658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned char *a6, uint64_t a7, uint64_t a8)
{
  return sub_24B53106C(a1, a5, a6, a7, a8);
}

uint64_t sub_24B52066C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[68] = a6;
  v6[67] = a5;
  v6[66] = a4;
  sub_24B534C70();
  v6[69] = swift_task_alloc();
  v6[70] = type metadata accessor for HIDDeviceClient.Notification(0);
  v6[71] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24B520734, 0, 0);
}

uint64_t sub_24B520734()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(__IOHIDValue **)(v0 + 536);
  uint64_t v2 = *(void **)(*(void *)(v0 + 528) + 16);
  *(void *)(v0 + 576) = v2;
  swift_retain();
  uint64_t v3 = IOHIDValueGetElement(v1);
  swift_retain();
  sub_24B4DF128(v3, (uint64_t)v2, v0 + 272);
  sub_24B533E3C(v0 + 272, v0 + 144);
  sub_24B533E3C(v0 + 144, v0 + 16);
  if (sub_24B4E48FC(v0 + 16) == 1)
  {
    sub_24B534AD0();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(void *)(v0 + 8);
    __asm { BRAA            X1, X16 }
  }
  uint64_t v5 = *(uint64_t **)(v0 + 568);
  uint64_t v6 = *(unint64_t **)(v0 + 552);
  unint64_t v7 = *(__IOHIDValue **)(v0 + 536);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BC8);
  uint64_t v8 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_24B5359C0;
  long long v11 = *(_OWORD *)(v0 + 96);
  v22[4] = *(_OWORD *)(v0 + 80);
  v22[5] = v11;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)&v23[9] = *(_OWORD *)(v0 + 121);
  long long v12 = *(_OWORD *)(v0 + 32);
  v22[0] = *(_OWORD *)(v0 + 16);
  v22[1] = v12;
  long long v13 = *(_OWORD *)(v0 + 64);
  v22[2] = *(_OWORD *)(v0 + 48);
  v22[3] = v13;
  sub_24B533E3C(v0 + 144, v0 + 400);
  sub_24B4E4914(v0 + 400);
  BytePtr = (uint8_t *)IOHIDValueGetBytePtr(v7);
  CFIndex Length = IOHIDValueGetLength(v7);
  uint64_t v16 = sub_24B530FB8(BytePtr, Length);
  uint64_t v18 = v17;
  uint64_t TimeStamp = IOHIDValueGetTimeStamp(v7);
  sub_24B51B7DC(TimeStamp, v6);
  HIDElement.Value.init(element:fromBytes:timestamp:)(v22, v16, v18, (uint64_t)v6, (_OWORD *)(v10 + v9));
  uint64_t *v5 = v10;
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = *v2 + 824;
  *(void *)(v0 + 584) = *(void *)v20;
  *(void *)(v0 + 592) = v20 & 0xFFFFFFFFFFFFLL | 0xF967000000000000;
  return MEMORY[0x270FA2498](sub_24B520A00, v2, 0);
}

uint64_t sub_24B520A00()
{
  uint64_t v1 = *(void *)(v0 + 568);
  (*(void (**)(uint64_t))(v0 + 584))(v1);
  sub_24B52E080(v1, type metadata accessor for HIDDeviceClient.Notification);
  return MEMORY[0x270FA2498](sub_24B520A94, 0, 0);
}

uint64_t sub_24B520A94()
{
  sub_24B4E4A4C(v0 + 144);
  sub_24B534AD0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_24B520B28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  sub_24B531208(a1, v5);
}

void sub_24B520B78()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6A88);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_24B5359C0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6A90);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24B5359C0;
  *(void *)(inited + 32) = 1701869908;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 48) = sub_24B534AA0();
  *(void *)(v1 + 32) = sub_24B51F440(inited);
  uint64_t v55 = v0;
  unint64_t v4 = (*(uint64_t (**)(void))(*(void *)v0 + 752))();
  uint64_t v5 = v4;
  if (v4 >> 62) {
    goto LABEL_33;
  }
  for (uint64_t i = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = sub_24B534D60())
  {
    unint64_t v7 = 0;
    unint64_t v59 = v5 & 0xC000000000000001;
    uint64_t v56 = v5 & 0xFFFFFFFFFFFFFF8;
    uint64_t v57 = i;
    uint64_t v58 = v5;
    while (1)
    {
      if (v59)
      {
        uint64_t v8 = MEMORY[0x24C5D2FC0](v7, v5);
        BOOL v9 = __OFADD__(v7, 1);
        unint64_t v10 = v7 + 1;
        if (v9) {
          goto LABEL_31;
        }
      }
      else
      {
        if (v7 >= *(void *)(v56 + 16)) {
          goto LABEL_32;
        }
        uint64_t v8 = swift_retain();
        BOOL v9 = __OFADD__(v7, 1);
        unint64_t v10 = v7 + 1;
        if (v9) {
          goto LABEL_31;
        }
      }
      unint64_t v60 = v10;
      uint64_t v11 = *(void *)(v8 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_elementsToMonitor);
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12) {
        break;
      }
      swift_release();
LABEL_5:
      unint64_t v7 = v60;
      if (v60 == i) {
        goto LABEL_34;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v62 = v12 - 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68E8);
    for (uint64_t j = 32; ; uint64_t j = v61 + 128)
    {
      uint64_t v14 = v11;
      uint64_t v61 = j;
      char v15 = (long long *)(v11 + j);
      long long v16 = v15[4];
      long long v17 = v15[5];
      long long v18 = *(long long *)((char *)v15 + 105);
      v64[0] = v15[6];
      long long v19 = *v15;
      long long v20 = v15[1];
      long long v21 = v15[3];
      v63[2] = v15[2];
      v63[3] = v21;
      v63[0] = v19;
      v63[1] = v20;
      *(_OWORD *)((char *)v64 + 9) = v18;
      v63[4] = v16;
      v63[5] = v17;
      BOOL v22 = *(__IOHIDElement **)&v64[0];
      uint64_t v23 = v2;
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_24B53BB60;
      *(void *)(v24 + 32) = 1701869908;
      *(void *)(v24 + 40) = 0xE400000000000000;
      sub_24B4E4914((uint64_t)v63);
      *(void *)(v24 + 48) = sub_24B534ED0();
      *(void *)(v24 + 56) = 0x444974726F706552;
      *(void *)(v24 + 64) = 0xE800000000000000;
      IOHIDElementGetReportID(v22);
      *(void *)(v24 + 72) = sub_24B534ED0();
      uint64_t v5 = sub_24B534DA0();
      uint64_t v2 = *(void *)(v24 + 32);
      uint64_t v25 = *(void *)(v24 + 40);
      uint64_t v26 = *(void *)(v24 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      unint64_t v27 = sub_24B4EB80C(v2, v25);
      if (v28) {
        break;
      }
      *(void *)(v5 + 64 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      int v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v27);
      *int v29 = v2;
      v29[1] = v25;
      *(void *)(*(void *)(v5 + 56) + 8 * v27) = v26;
      uint64_t v30 = *(void *)(v5 + 16);
      BOOL v9 = __OFADD__(v30, 1);
      uint64_t v31 = v30 + 1;
      if (v9) {
        goto LABEL_28;
      }
      *(void *)(v5 + 16) = v31;
      uint64_t v32 = *(void *)(v24 + 56);
      uint64_t v2 = *(void *)(v24 + 64);
      uint64_t v33 = *(void *)(v24 + 72);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      unint64_t v34 = sub_24B4EB80C(v32, v2);
      if (v35) {
        break;
      }
      *(void *)(v5 + 64 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      uint64_t v36 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v34);
      *uint64_t v36 = v32;
      v36[1] = v2;
      *(void *)(*(void *)(v5 + 56) + 8 * v34) = v33;
      uint64_t v37 = *(void *)(v5 + 16);
      BOOL v9 = __OFADD__(v37, 1);
      uint64_t v38 = v37 + 1;
      if (v9) {
        goto LABEL_28;
      }
      *(void *)(v5 + 16) = v38;
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v40 = *(void *)(v1 + 16);
      unint64_t v39 = *(void *)(v1 + 24);
      if (v40 >= v39 >> 1) {
        uint64_t v1 = (uint64_t)sub_24B52DE80((void *)(v39 > 1), v40 + 1, 1, (void *)v1);
      }
      uint64_t v2 = v23;
      *(void *)(v1 + 16) = v40 + 1;
      *(void *)(v1 + 8 * v40 + 32) = v5;
      uint64_t v41 = swift_initStackObject();
      *(_OWORD *)(v41 + 16) = xmmword_24B5359C0;
      strcpy((char *)(v41 + 32), "ElementCookie");
      *(_WORD *)(v41 + 46) = -4864;
      uint64_t Cookie = IOHIDElementGetCookie(v22);
      nullsub_1(Cookie);
      *(void *)(v41 + 48) = sub_24B534ED0();
      uint64_t v5 = sub_24B534DA0();
      swift_retain();
      uint64_t v43 = *(void *)(v41 + 32);
      uint64_t v44 = *(void *)(v41 + 40);
      uint64_t v45 = *(void *)(v41 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      unint64_t v46 = sub_24B4EB80C(v43, v44);
      if (v47) {
        goto LABEL_29;
      }
      *(void *)(v5 + 8 * (v46 >> 6) + 64) |= 1 << v46;
      uint64_t v48 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v46);
      *uint64_t v48 = v43;
      v48[1] = v44;
      *(void *)(*(void *)(v5 + 56) + 8 * v46) = v45;
      uint64_t v49 = *(void *)(v5 + 16);
      BOOL v9 = __OFADD__(v49, 1);
      uint64_t v50 = v49 + 1;
      if (v9) {
        goto LABEL_30;
      }
      *(void *)(v5 + 16) = v50;
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v52 = *(void *)(v1 + 16);
      unint64_t v51 = *(void *)(v1 + 24);
      if (v52 >= v51 >> 1) {
        uint64_t v1 = (uint64_t)sub_24B52DE80((void *)(v51 > 1), v52 + 1, 1, (void *)v1);
      }
      uint64_t v11 = v14;
      *(void *)(v1 + 16) = v52 + 1;
      *(void *)(v1 + 8 * v52 + 32) = v5;
      sub_24B4E54B8((uint64_t)v63);
      if (!v62)
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t i = v57;
        uint64_t v5 = v58;
        goto LABEL_5;
      }
      --v62;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    ;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  unsigned __int16 v53 = *(__IOHIDDevice **)(v55 + 296);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6A98);
  CFArrayRef v54 = (const __CFArray *)sub_24B5349B0();
  swift_bridgeObjectRelease();
  IOHIDDeviceSetInputValueMatchingMultiple(v53, v54);
}

uint64_t sub_24B5210F8(uint64_t a1, char a2)
{
  char v3 = a1;
  if (a2) {
    a1 = (*((uint64_t (**)(void))*v2 + 99))();
  }
  uint64_t result = (*((uint64_t (**)(uint64_t))*v2 + 88))(a1);
  if ((result & 1) == 0)
  {
    (*((void (**)(void))*v2 + 98))();
    uint64_t v5 = v3 & 1;
    uint64_t v6 = IOHIDDeviceOpen(v2[37], v5);
    sub_24B51B3AC(v6, (uint64_t)&v9);
    if (v11)
    {
      (*((void (**)(uint64_t))*v2 + 89))(1);
      return (*((uint64_t (**)(uint64_t))*v2 + 92))(v5);
    }
    else
    {
      unint64_t v7 = v9 | ((unint64_t)v10 << 32);
      char v11 = 0;
      sub_24B52DFA4();
      if (sub_24B534940()) {
        (*((void (**)(uint64_t))*v2 + 89))(1);
      }
      sub_24B4ED390();
      swift_allocError();
      *(_DWORD *)uint64_t v8 = v7;
      *(unsigned char *)(v8 + 4) = BYTE4(v7) & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_24B521300()
{
  uint64_t result = (*((uint64_t (**)(void))*v0 + 88))();
  if (result)
  {
    uint64_t result = (*((uint64_t (**)(void))*v0 + 91))();
    if ((result & 1) == 0)
    {
      unint64_t v2 = (*((uint64_t (**)(void))*v0 + 94))();
      if (v2 >> 62)
      {
        uint64_t v4 = sub_24B534D60();
        uint64_t result = swift_bridgeObjectRelease();
        if (v4) {
          return result;
        }
      }
      else
      {
        uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRelease();
        if (v3) {
          return result;
        }
      }
      IOHIDDeviceClose(v0[37], 0);
      (*((void (**)(void))*v0 + 89))(0);
      uint64_t v5 = (uint64_t (*)(void))*((void *)*v0 + 92);
      return v5(0);
    }
  }
  return result;
}

void sub_24B521484()
{
  if ((*(uint64_t (**)(void))(*(void *)v0 + 704))())
  {
    sub_24B4ED390();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = 6;
    *(unsigned char *)(v2 + 4) = 1;
    swift_willThrow();
  }
  else
  {
    if (((*(uint64_t (**)(void))(*(void *)v0 + 656))() & 1) == 0) {
      (*(void (**)(void))(*(void *)v0 + 784))();
    }
    (*(void (**)(uint64_t, void))(*(void *)v0 + 800))(1, 0);
    if (v1)
    {
      id v3 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6948);
      if (swift_dynamicCast() && v6 == 1 && v5 == 3)
      {

        (*(void (**)(void))(*(void *)v0 + 808))();
        sub_24B4ED390();
        swift_allocError();
        *(_DWORD *)uint64_t v4 = 3;
        *(unsigned char *)(v4 + 4) = 1;
        swift_willThrow();
      }
    }
  }
}

uint64_t sub_24B52167C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_continuation;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_24B5216F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B521704()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B521714()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B521760(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_batchedValues);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24B5217B4())()
{
  return j__swift_endAccess;
}

uint64_t sub_24B521810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_batchedValues) = MEMORY[0x263F8EE78];
  uint64_t v7 = v6 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_continuation;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  *(void *)(v6 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_reportIDsToMonitor) = a2;
  *(void *)(v6 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_elementsToMonitor) = a3;
  return v6;
}

uint64_t sub_24B5218D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_batchedValues) = MEMORY[0x263F8EE78];
  uint64_t v7 = v3 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_continuation;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  *(void *)(v3 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_reportIDsToMonitor) = a2;
  *(void *)(v3 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_elementsToMonitor) = a3;
  return v3;
}

uint64_t sub_24B52198C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_continuation;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24B521A24()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_continuation;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t sub_24B521AF8(uint64_t a1)
{
  uint64_t v96 = a1;
  uint64_t v2 = type metadata accessor for HIDElement.Value();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v90 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v79 - v6;
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB0);
  uint64_t v8 = *(ValueMetadata **)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  v103 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for HIDDeviceClient.Notification(0);
  uint64_t v10 = MEMORY[0x270FA5388](v99);
  v102 = (uint64_t *)((char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  long long v95 = (unsigned __int8 *)&v79 - v13;
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 752);
  uint64_t v80 = v1;
  unint64_t v15 = v14(v12);
  unint64_t v16 = v15;
  unint64_t v86 = v15;
  if (v15 >> 62) {
    goto LABEL_55;
  }
  uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v17)
  {
    unint64_t v18 = 0;
    uint64_t v84 = v17;
    unint64_t v85 = v16 & 0xC000000000000001;
    unint64_t v81 = v16 + 32;
    uint64_t v82 = v16 & 0xFFFFFFFFFFFFFF8;
    p_Description = &v8->Description;
    uint64_t v88 = (char *)v144 + 1;
    uint64_t v89 = v3;
    uint64_t v91 = v7;
    while (1)
    {
      if (!v85)
      {
        if (v18 >= *(void *)(v82 + 16)) {
          goto LABEL_54;
        }
        uint64_t v8 = *(ValueMetadata **)(v81 + 8 * v18);
        swift_retain();
        BOOL v20 = __OFADD__(v18++, 1);
        if (v20) {
          break;
        }
        goto LABEL_12;
      }
      uint64_t v8 = (ValueMetadata *)MEMORY[0x24C5D2FC0](v18, v16);
      BOOL v20 = __OFADD__(v18++, 1);
      if (v20) {
        break;
      }
LABEL_12:
      sub_24B52E018(v96, (uint64_t)v95, type metadata accessor for HIDDeviceClient.Notification);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        if ((*(uint64_t (**)(void))(*(void *)v80 + 728))())
        {
          swift_release();
        }
        else
        {
          sub_24B52E018(v96, (uint64_t)v102, type metadata accessor for HIDDeviceClient.Notification);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
          uint64_t v74 = v103;
          sub_24B534A60();
          swift_release();
          ((void (*)(char *, uint64_t))*p_Description)(v74, v104);
        }
LABEL_5:
        unint64_t v16 = v86;
        if (v18 == v84) {
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        unint64_t v87 = v18;
        long long v98 = v8;
        if (EnumCaseMultiPayload != 1)
        {
          if (EnumCaseMultiPayload)
          {
            sub_24B52E018(v96, (uint64_t)v102, type metadata accessor for HIDDeviceClient.Notification);
            __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
            long long v19 = v103;
            sub_24B534A60();
            swift_release();
            ((void (*)(char *, uint64_t))*p_Description)(v19, v104);
            sub_24B52E080((uint64_t)v95, type metadata accessor for HIDDeviceClient.Notification);
          }
          else
          {
            unsigned __int8 v22 = *v95;
            unsigned __int8 v23 = v95[1];
            sub_24B4E5590(*((void *)v95 + 1), *((void *)v95 + 2));
            if (v23)
            {
              sub_24B52E018(v96, (uint64_t)v102, type metadata accessor for HIDDeviceClient.Notification);
              __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
              uint64_t v24 = v103;
              sub_24B534A60();
              swift_release();
              ((void (*)(char *, uint64_t))*p_Description)(v24, v104);
            }
            else
            {
              uint64_t v67 = *(uint64_t *)((char *)&v8->Kind
                               + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_reportIDsToMonitor);
              uint64_t v68 = *(void *)(v67 + 16);
              if (v68)
              {
                v120 = (char *)v8 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_continuation;
                sub_24B52E0E0();
                swift_bridgeObjectRetain();
                uint64_t v119 = v67;
                char v69 = (char *)(v67 + 33);
                uint64_t v8 = &type metadata for HIDReportID;
                do
                {
                  char v70 = *(v69 - 1);
                  char v71 = *v69;
                  LOBYTE(v121) = v22;
                  LOBYTE(v146) = v70;
                  BYTE1(v146) = v71;
                  char v72 = sub_24B534920();
                  unsigned __int8 v160 = v22;
                  LOBYTE(v144[0]) = v70;
                  BYTE1(v144[0]) = v71;
                  if (v72 & 1) != 0 && (sub_24B534930())
                  {
                    sub_24B52E018(v96, (uint64_t)v102, type metadata accessor for HIDDeviceClient.Notification);
                    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
                    uint64_t v73 = v103;
                    sub_24B534A60();
                    ((void (*)(char *, uint64_t))*p_Description)(v73, v104);
                    uint64_t v8 = &type metadata for HIDReportID;
                  }
                  v69 += 2;
                  --v68;
                }
                while (v68);
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v7 = v91;
                unint64_t v18 = v87;
              }
              else
              {
                swift_release();
              }
            }
            uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB8);
            uint64_t v76 = &v95[*(int *)(v75 + 64)];
            uint64_t v77 = sub_24B534C70();
            (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v77 - 8) + 8))(v76, v77);
          }
          goto LABEL_5;
        }
        uint64_t v25 = *(void *)v95;
        uint64_t v26 = *(void *)(*(void *)v95 + 16);
        if (v26)
        {
          unint64_t v27 = 0;
          uint64_t v100 = OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_elementsToMonitor;
          uint64_t v93 = v25;
          long long v94 = (char *)v8 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_continuation;
          unint64_t v83 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
          uint64_t v106 = v25 + v83;
          uint64_t v92 = v26;
          do
          {
            if (v27 >= *(void *)(v25 + 16))
            {
              __break(1u);
              goto LABEL_53;
            }
            uint64_t v28 = *(void *)(v3 + 72);
            uint64_t v29 = sub_24B52E018(v106 + v28 * v27, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
            if (v7[104] == 1)
            {
              uint64_t v30 = *(uint64_t (**)(uint64_t))(v8->Kind + 112);
              uint64_t v31 = *(void *)(v30(v29) + 16);
              uint64_t v32 = swift_bridgeObjectRelease();
              if (v31)
              {
                uint64_t v33 = v30(v32);
                uint64_t *v102 = v33;
                swift_storeEnumTagMultiPayload();
                __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
                unint64_t v34 = v103;
                sub_24B534A60();
                ((void (*)(char *, uint64_t))*p_Description)(v34, v104);
                char v35 = (void (*)(long long *, void))(*(uint64_t (**)(long long *))(v8->Kind + 128))(&v146);
                *uint64_t v36 = MEMORY[0x263F8EE78];
                swift_bridgeObjectRelease();
                v35(&v146, 0);
              }
            }
            else
            {
              uint64_t v37 = *(uint64_t *)((char *)&v8->Kind + v100);
              uint64_t v38 = *(void *)(v37 + 16);
              if (v38)
              {
                uint64_t v97 = v28;
                unint64_t v105 = v27;
                v120 = *(char **)v7;
                LODWORD(v119) = v7[8];
                unint64_t v39 = *(unsigned int *)(v7 + 10) | ((unint64_t)v7[14] << 32);
                int v118 = v7[15];
                char v40 = v7[16];
                uint64_t v41 = *(void *)(v7 + 20);
                char v42 = v7[28];
                int v117 = v7[29];
                char v43 = v7[30];
                uint64_t v116 = *((void *)v7 + 4);
                char v44 = v7[40];
                uint64_t v45 = *((void *)v7 + 6);
                char v46 = v7[56];
                uint64_t v114 = *((void *)v7 + 8);
                uint64_t v115 = v45;
                char v47 = v7[72];
                uint64_t v113 = *((void *)v7 + 10);
                LOBYTE(v45) = v7[88];
                uint64_t v112 = *((void *)v7 + 12);
                int v111 = v7[105];
                uint64_t v110 = *((void *)v7 + 14);
                char v48 = v7[120];
                unsigned __int8 v160 = v40;
                unsigned __int8 v159 = v42;
                unsigned __int8 v158 = v43;
                char v157 = v44;
                char v156 = v46;
                char v155 = v47;
                char v154 = v45;
                char v153 = v48;
                swift_bridgeObjectRetain();
                long long v49 = *(_OWORD *)(v37 + 112);
                long long v150 = *(_OWORD *)(v37 + 96);
                long long v151 = v49;
                v152[0] = *(_OWORD *)(v37 + 128);
                *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)(v37 + 137);
                long long v50 = *(_OWORD *)(v37 + 48);
                long long v146 = *(_OWORD *)(v37 + 32);
                long long v147 = v50;
                long long v51 = *(_OWORD *)(v37 + 80);
                long long v148 = *(_OWORD *)(v37 + 64);
                long long v149 = v51;
                int v108 = v159;
                int v109 = v160;
                int v107 = v158;
                char v52 = v157;
                char v53 = v156;
                char v54 = v155;
                char v55 = v154;
                uint64_t v56 = v38 - 1;
                uint64_t v57 = 160;
                char v58 = v153;
                while (1)
                {
                  v144[4] = v150;
                  v144[5] = v151;
                  v145[0] = v152[0];
                  *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)((char *)v152 + 9);
                  v144[0] = v146;
                  v144[1] = v147;
                  v144[2] = v148;
                  v144[3] = v149;
                  v121 = v120;
                  char v122 = v119;
                  char v124 = BYTE4(v39);
                  int v123 = v39;
                  char v125 = v118;
                  char v126 = v109;
                  uint64_t v127 = v41;
                  char v128 = v108;
                  char v129 = v117;
                  char v130 = v107;
                  uint64_t v131 = v116;
                  char v132 = v52;
                  uint64_t v133 = v115;
                  char v134 = v53;
                  uint64_t v135 = v114;
                  char v136 = v54;
                  uint64_t v137 = v113;
                  char v138 = v55;
                  uint64_t v139 = v112;
                  char v140 = 0;
                  char v141 = v111;
                  uint64_t v142 = v110;
                  char v143 = v58;
                  if (static HIDElement.== infix(_:_:)((uint64_t)v144, (uint64_t)&v121)) {
                    break;
                  }
                  if (!v56)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v3 = v89;
                    uint64_t v7 = v91;
                    uint64_t v26 = v92;
                    uint64_t v8 = v98;
                    uint64_t v25 = v93;
                    unint64_t v27 = v105;
                    goto LABEL_22;
                  }
                  long long v150 = *(_OWORD *)(v37 + v57 + 64);
                  long long v151 = *(_OWORD *)(v37 + v57 + 80);
                  v152[0] = *(_OWORD *)(v37 + v57 + 96);
                  *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)(v37 + v57 + 105);
                  long long v146 = *(_OWORD *)(v37 + v57);
                  long long v147 = *(_OWORD *)(v37 + v57 + 16);
                  long long v148 = *(_OWORD *)(v37 + v57 + 32);
                  long long v149 = *(_OWORD *)(v37 + v57 + 48);
                  v57 += 128;
                  --v56;
                }
                swift_bridgeObjectRelease();
                uint64_t v7 = v91;
                sub_24B52E018((uint64_t)v91, v90, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
                uint64_t v8 = v98;
                unint64_t v59 = (void (*)(_OWORD *, void))(*(uint64_t (**)(_OWORD *))(v98->Kind + 128))(v144);
                uint64_t v61 = v60;
                uint64_t v62 = *v60;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *uint64_t v61 = v62;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  uint64_t v62 = (void *)sub_24B52DCAC(0, v62[2] + 1, 1, v62);
                  *uint64_t v61 = v62;
                }
                unint64_t v27 = v105;
                uint64_t v64 = v97;
                unint64_t v66 = v62[2];
                unint64_t v65 = v62[3];
                if (v66 >= v65 >> 1)
                {
                  uint64_t v62 = (void *)sub_24B52DCAC(v65 > 1, v66 + 1, 1, v62);
                  *uint64_t v61 = v62;
                }
                uint64_t v25 = v93;
                v62[2] = v66 + 1;
                sub_24B531720(v90, (uint64_t)v62 + v83 + v66 * v64, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
                v59(v144, 0);
                sub_24B52E080((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
                uint64_t v3 = v89;
                uint64_t v26 = v92;
                goto LABEL_23;
              }
            }
LABEL_22:
            sub_24B52E080((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
LABEL_23:
            ++v27;
          }
          while (v27 != v26);
        }
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t v16 = v86;
        unint64_t v18 = v87;
        if (v87 == v84) {
          return swift_bridgeObjectRelease();
        }
      }
    }
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    uint64_t v17 = sub_24B534D60();
    unint64_t v16 = v86;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_24B522770(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = (*(uint64_t (**)(void))(*(void *)v1 + 752))();
  swift_retain();
  unint64_t v5 = sub_24B531398(v4, a1);
  char v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v2 + 768))(v11);
    sub_24B5228B0(v5);
    swift_release();
    uint64_t v10 = v9(v11, 0);
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 808))(v10);
  }
  return result;
}

void sub_24B5228B0(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    sub_24B52E878(v3);
    unint64_t v3 = v5;
    unint64_t *v1 = v5;
  }
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    memmove((void *)((v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 32), (const void *)((v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 40), 8 * (v6 - 1 - a1));
    *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    sub_24B5349C0();
  }
}

uint64_t sub_24B522948(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AC8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t v13 = v2;
  type metadata accessor for HIDDeviceClient.Notification(0);
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F680], v5);
  return sub_24B534A90();
}

uint64_t sub_24B522A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = type metadata accessor for HIDDeviceClient.Notification(0);
  MEMORY[0x270FA5388](v22);
  v21[0] = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB0);
  v21[1] = *(void *)(v9 - 8);
  v21[2] = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AA8);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  type metadata accessor for HIDDeviceClient.StreamWrapper(0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_batchedValues) = MEMORY[0x263F8EE78];
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_continuation, v13, v10);
  *(void *)(v14 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_reportIDsToMonitor) = a2;
  *(void *)(v14 + OBJC_IVAR____TtCC7CoreHID15HIDDeviceClient13StreamWrapper_elementsToMonitor) = a3;
  unint64_t v15 = *(uint64_t (**)(void *))(*(void *)a4 + 768);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v16 = (void (*)(void *, void))v15(v23);
  unint64_t v18 = v17;
  MEMORY[0x24C5D2D80]();
  if (*(void *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_24B5349D0();
  }
  sub_24B5349E0();
  sub_24B5349C0();
  v16(v23, 0);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a4;
  *(void *)(v19 + 24) = v14;
  swift_retain();
  swift_retain();
  sub_24B534A50();
  (*(void (**)(void, uint64_t))(*(void *)a4 + 800))(0, 1);
  return swift_release();
}

uint64_t sub_24B522ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68B0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_24B534A40();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  swift_retain();
  swift_retain();
  sub_24B4E98B8((uint64_t)v6, (uint64_t)&unk_2697C6BF0, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_24B522FDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = *a4 + 832;
  v5[4] = *(void *)v6;
  v5[5] = v6 & 0xFFFFFFFFFFFFLL | 0xB1FC000000000000;
  return MEMORY[0x270FA2498](sub_24B523020, a4, 0);
}

uint64_t sub_24B523020()
{
  (*(void (**)(void))(v0 + 32))(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t HIDDeviceClient.UnsafeProperty.unsafeObject.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_24B52308C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_24B523094@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void, void))(**(void **)a1 + 848))(&v5, *a2, a2[1]);
  *a3 = v5;
  return result;
}

uint64_t sub_24B5230FC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = *a2;
  uint64_t v8 = *a1;
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 856);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return v6(&v8, v3, v4);
}

void sub_24B523184(void *a1@<X8>)
{
  uint64_t v3 = *(__IOHIDDevice **)(v1 + 296);
  uint64_t v4 = (__CFString *)sub_24B534950();
  CFTypeRef v5 = (id)IOHIDDeviceGetProperty(v3, v4);

  *a1 = v5;
}

uint64_t sub_24B5231D8()
{
  uint64_t v1 = *(__IOHIDDevice **)(v0 + 296);
  uint64_t v2 = (__CFString *)sub_24B534950();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6AD0);
  uint64_t v3 = (const void *)sub_24B534B20();
  swift_unknownObjectRelease();
  IOHIDDeviceSetProperty(v1, v2, v3);

  return swift_unknownObjectRelease();
}

void (*sub_24B523270(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[2] = a2;
  v7[3] = a3;
  uint64_t v8 = *(__IOHIDDevice **)(v3 + 296);
  v7[4] = v8;
  uint64_t v9 = (__CFString *)sub_24B534950();
  CFTypeRef v10 = (id)IOHIDDeviceGetProperty(v8, v9);

  *uint64_t v7 = v10;
  return sub_24B523310;
}

void sub_24B523310(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 1;
  uint64_t v4 = **a1;
  CFTypeRef v5 = (__IOHIDDevice *)(*a1)[4];
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = (__CFString *)sub_24B534950();
    swift_bridgeObjectRelease();
    v2[1] = v4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6AD0);
    uint64_t v7 = (const void *)sub_24B534B20();
    swift_unknownObjectRelease();
    IOHIDDeviceSetProperty(v5, v6, v7);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (__CFString *)sub_24B534950();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6AD0);
    uint64_t v9 = (const void *)sub_24B534B20();
    swift_unknownObjectRelease();
    IOHIDDeviceSetProperty(v5, v8, v9);
    swift_unknownObjectRelease();
  }

  free(v2);
}

uint64_t sub_24B523434(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = v7;
  *(unsigned char *)(v8 + 101) = a7;
  *(void *)(v8 + 32) = a4;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 24) = a3;
  *(unsigned char *)(v8 + 102) = *a1;
  *(unsigned char *)(v8 + 103) = *a2;
  *(unsigned char *)(v8 + 104) = a2[1];
  return MEMORY[0x270FA2498](sub_24B523478, v7, 0);
}

uint64_t sub_24B523478()
{
  (*(void (**)(void, void))(**(void **)(v0 + 56) + 800))(0, 0);
  __int16 v12 = *(_WORD *)(v0 + 102);
  char v13 = *(unsigned char *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  char v3 = *(unsigned char *)(v0 + 101);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
  uint64_t v7 = swift_slowAlloc();
  *(void *)(v0 + 64) = v7;
  sub_24B531494((unint64_t *)&unk_2697C6AE0, v8, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 72) = v9;
  *(void *)(v9 + 16) = v7;
  *(void *)(v9 + 24) = v5;
  *(void *)(v9 + 32) = v2;
  *(unsigned char *)(v9 + 40) = v3 & 1;
  *(void *)(v9 + 48) = v6;
  *(void *)(v9 + 56) = v4;
  *(void *)(v9 + 64) = v1;
  *(_WORD *)(v9 + 72) = v12;
  *(unsigned char *)(v9 + 74) = v13;
  CFTypeRef v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v10;
  void *v10 = v0;
  v10[1] = sub_24B5237B8;
  return MEMORY[0x270FA2360]();
}

uint64_t sub_24B5237B8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = sub_24B52397C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 56);
    swift_task_dealloc();
    uint64_t v4 = sub_24B5238E0;
    uint64_t v3 = v5;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_24B5238E0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  (*(void (**)(void))(**(void **)(v0 + 56) + 808))();
  MEMORY[0x24C5D3C50](v1, -1, -1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_24B52397C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc();
  MEMORY[0x24C5D3C50](v1, -1, -1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_24B5239F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned __int8 a9, __int16 a10)
{
  v23[3] = *MEMORY[0x263EF8340];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
  uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(a2, a1, v16);
  if ((a5 & 1) == 0)
  {
    sub_24B534EE0();
    uint64_t v17 = sub_24B534EE0();
  }
  double v18 = MEMORY[0x270FA5388](v17);
  switch(a7 >> 62)
  {
    case 1uLL:
      if (a6 >> 32 < (int)a6) {
        __break(1u);
      }
      swift_retain();
      sub_24B4EBC60((int)a6, a6 >> 32, (uint64_t (*)(uint64_t, uint64_t))sub_24B5340F4);
      uint64_t result = sub_24B4E5590(a6, a7);
      break;
    case 2uLL:
      uint64_t v21 = *(void *)(a6 + 16);
      uint64_t v22 = *(void *)(a6 + 24);
      swift_retain();
      swift_retain();
      sub_24B4EBC60(v21, v22, (uint64_t (*)(uint64_t, uint64_t))sub_24B5340F4);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v23, 0, 14);
      __int16 v19 = a10 & 0x1FF;
      goto LABEL_9;
    default:
      v23[0] = a6;
      LOWORD(v23[1]) = a7;
      BYTE2(v23[1]) = BYTE2(a7);
      BYTE3(v23[1]) = BYTE3(a7);
      BYTE4(v23[1]) = BYTE4(a7);
      __int16 v19 = a10 & 0x1FF;
      BYTE5(v23[1]) = BYTE5(a7);
LABEL_9:
      uint64_t result = sub_24B523CDC((const uint8_t *)v23, a8, a9, v19, a6, a7, a2, v18);
      break;
  }
  return result;
}

uint64_t sub_24B523CDC(const uint8_t *a1, uint64_t a2, unsigned __int8 a3, __int16 a4, uint64_t a5, unint64_t a6, void *a7, CFTimeInterval a8)
{
  uint64_t v14 = *(__IOHIDDevice **)(a2 + 296);
  unsigned __int8 v27 = a3;
  IOHIDReportType v15 = sub_24B4E6524(&v27);
  if (!a1) {
    goto LABEL_15;
  }
  CFIndex v16 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5))
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x24B523E44);
      }
      CFIndex v16 = HIDWORD(a5) - (int)a5;
LABEL_7:
      if ((a4 & 0x100) != 0) {
        CFIndex v19 = 0;
      }
      else {
        CFIndex v19 = a4;
      }
      uint64_t v20 = IOHIDDeviceSetReportWithCallback(v14, v15, v19, a1, v16, a8, (IOHIDReportCallback)sub_24B523E54, a7);
      uint64_t result = sub_24B51B3AC(v20, (uint64_t)&v24);
      if ((v26 & 1) == 0)
      {
        unint64_t v22 = v24 | ((unint64_t)v25 << 32);
        sub_24B4ED390();
        swift_allocError();
        *(_DWORD *)uint64_t v23 = v22;
        *(unsigned char *)(v23 + 4) = BYTE4(v22) & 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
        return sub_24B534A10();
      }
      return result;
    case 2uLL:
      uint64_t v18 = *(void *)(a5 + 16);
      uint64_t v17 = *(void *)(a5 + 24);
      CFIndex v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_7;
      }
      goto LABEL_14;
    case 3uLL:
      goto LABEL_7;
    default:
      CFIndex v16 = BYTE6(a6);
      goto LABEL_7;
  }
}

uint64_t sub_24B523E54(uint64_t a1, uint64_t a2)
{
  return sub_24B533C74(a1, a2);
}

uint64_t sub_24B523E6C(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 48) = a4;
  *(void *)(v6 + 56) = v5;
  *(unsigned char *)(v6 + 117) = a5;
  *(void *)(v6 + 40) = a3;
  *(unsigned char *)(v6 + 118) = *a1;
  *(unsigned char *)(v6 + 119) = *a2;
  *(unsigned char *)(v6 + 120) = a2[1];
  return MEMORY[0x270FA2498](sub_24B523EAC, v5, 0);
}

uint64_t sub_24B523EAC()
{
  (*(void (**)(void, void))(**(void **)(v0 + 56) + 800))(0, 0);
  __int16 v14 = *(_WORD *)(v0 + 118);
  char v15 = *(unsigned char *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  char v3 = *(unsigned char *)(v0 + 117);
  uint64_t v4 = *(void *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AF0);
  uint64_t v5 = swift_slowAlloc();
  *(void *)(v0 + 64) = v5;
  uint64_t v6 = swift_slowAlloc();
  *(void *)(v0 + 72) = v6;
  uint64_t v7 = swift_slowAlloc();
  *(void *)(v0 + 80) = v7;
  uint64_t v9 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v8, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 88) = v10;
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v6;
  *(void *)(v10 + 32) = v1;
  *(void *)(v10 + 40) = v4;
  *(void *)(v10 + 48) = v2;
  *(unsigned char *)(v10 + 56) = v3 & 1;
  *(_WORD *)(v10 + 57) = v14;
  *(unsigned char *)(v10 + 59) = v15;
  *(void *)(v10 + 64) = v7;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_24B52421C;
  uint64_t v12 = MEMORY[0x263F06F78];
  return MEMORY[0x270FA2360](v0 + 16, v1, v9, 0xD00000000000002ALL, 0x800000024B53D530, sub_24B531528, v10, v12);
}

uint64_t sub_24B52421C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = sub_24B524420;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 56);
    swift_task_dealloc();
    uint64_t v4 = sub_24B524344;
    uint64_t v3 = v5;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_24B524344()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  (*(void (**)(void))(**(void **)(v0 + 56) + 808))();
  MEMORY[0x24C5D3C50](v3, -1, -1);
  MEMORY[0x24C5D3C50](v2, -1, -1);
  MEMORY[0x24C5D3C50](v1, -1, -1);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v6(v4, v5);
}

uint64_t sub_24B524420()
{
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  swift_task_dealloc();
  MEMORY[0x24C5D3C50](v3, -1, -1);
  MEMORY[0x24C5D3C50](v2, -1, -1);
  MEMORY[0x24C5D3C50](v1, -1, -1);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_24B5244C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, uint64_t a7)
{
}

uint64_t HIDDeviceClient.ProvideElementUpdate.values.getter()
{
  return sub_24B524E48((void (*)(void))type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
}

uint64_t HIDDeviceClient.ProvideElementUpdate.values.setter(uint64_t a1)
{
  return sub_24B524E9C(a1, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
}

uint64_t (*HIDDeviceClient.ProvideElementUpdate.values.modify())(void)
{
  return nullsub_1;
}

uint64_t HIDDeviceClient.ProvideElementUpdate.init(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24B534C50();
  uint64_t result = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
  *(void *)(a2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t HIDDeviceClient.ProvideElementUpdate.hash(into:)()
{
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0) + 20));
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t result = sub_24B534E70();
  if (v2)
  {
    uint64_t v4 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    sub_24B531494(&qword_2697C6AF8, 255, (void (*)(uint64_t))type metadata accessor for HIDElement.Value);
    swift_bridgeObjectRetain();
    do
    {
      sub_24B5348F0();
      v5 += v6;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static HIDDeviceClient.ProvideElementUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((sub_24B534C60() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0) + 20);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a2 + v4);

  return sub_24B52487C(v5, v6);
}

uint64_t sub_24B524780(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v7 = 1;
    }
    else
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = a2 + 32;
      sub_24B4E60E4();
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v6 = v5;
        char v7 = sub_24B534940();
        if ((v7 & 1) == 0) {
          break;
        }
        uint64_t v5 = v6 - 1;
        v3 += 128;
        v4 += 128;
      }
      while (v6);
    }
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_24B52487C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HIDElement.Value();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_24B52E018(a1 + v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
        sub_24B52E018(a2 + v12, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
        sub_24B531494(&qword_2697C67B0, 255, (void (*)(uint64_t))type metadata accessor for HIDElement.Value);
        char v15 = sub_24B534940();
        sub_24B52E080((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
        sub_24B52E080((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t HIDDeviceClient.ProvideElementUpdate.hashValue.getter()
{
  sub_24B534E60();
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0) + 20));
  uint64_t v2 = *(void *)(v1 + 16);
  sub_24B534E70();
  if (v2)
  {
    uint64_t v3 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    sub_24B531494(&qword_2697C6AF8, 255, (void (*)(uint64_t))type metadata accessor for HIDElement.Value);
    swift_bridgeObjectRetain();
    do
    {
      sub_24B5348F0();
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return sub_24B534EB0();
}

uint64_t sub_24B524BE0(uint64_t a1, uint64_t a2)
{
  sub_24B534E60();
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v4 = *(void *)(v2 + *(int *)(a2 + 20));
  uint64_t v5 = *(void *)(v4 + 16);
  sub_24B534E70();
  if (v5)
  {
    uint64_t v6 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
    uint64_t v7 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    sub_24B531494(&qword_2697C6AF8, 255, (void (*)(uint64_t))type metadata accessor for HIDElement.Value);
    swift_bridgeObjectRetain();
    do
    {
      sub_24B5348F0();
      v7 += v8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  return sub_24B534EB0();
}

uint64_t sub_24B524D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_24B534C60() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a2 + v6);

  return sub_24B52487C(v7, v8);
}

uint64_t sub_24B524DC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_24B534C70();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t HIDDeviceClient.RequestElementUpdate.elements.getter()
{
  return sub_24B524E48((void (*)(void))type metadata accessor for HIDDeviceClient.RequestElementUpdate);
}

uint64_t sub_24B524E48(void (*a1)(void))
{
  a1(0);

  return swift_bridgeObjectRetain();
}

uint64_t HIDDeviceClient.RequestElementUpdate.elements.setter(uint64_t a1)
{
  return sub_24B524E9C(a1, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
}

uint64_t sub_24B524E9C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(int *)(a2(0) + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*HIDDeviceClient.RequestElementUpdate.elements.modify())(void)
{
  return nullsub_1;
}

uint64_t HIDDeviceClient.RequestElementUpdate.pollDevice.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HIDDeviceClient.RequestElementUpdate(0) + 24));
}

uint64_t HIDDeviceClient.RequestElementUpdate.pollDevice.setter(char a1)
{
  uint64_t result = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*HIDDeviceClient.RequestElementUpdate.pollDevice.modify())(void)
{
  return nullsub_1;
}

uint64_t sub_24B524FC4()
{
  return 1;
}

uint64_t HIDDeviceClient.RequestElementUpdate.init(elements:pollDevice:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  sub_24B534C50();
  uint64_t result = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
  *(void *)(a3 + *(int *)(result + 20)) = a1;
  *(unsigned char *)(a3 + *(int *)(result + 24)) = a2;
  return result;
}

uint64_t HIDDeviceClient.RequestElementUpdate.hash(into:)(uint64_t a1)
{
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for HIDDeviceClient.RequestElementUpdate(0) + 20));
  swift_bridgeObjectRetain();
  sub_24B530938(a1, v3);
  swift_bridgeObjectRelease();
  return sub_24B534E80();
}

uint64_t static HIDDeviceClient.RequestElementUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((sub_24B534C60() & 1) != 0
    && (uint64_t v4 = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0),
        (sub_24B524780(*(void *)(a1 + *(int *)(v4 + 20)), *(void *)(a2 + *(int *)(v4 + 20))) & 1) != 0))
  {
    char v5 = *(unsigned char *)(a1 + *(int *)(v4 + 24)) ^ *(unsigned char *)(a2 + *(int *)(v4 + 24)) ^ 1;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t HIDDeviceClient.RequestElementUpdate.hashValue.getter()
{
  sub_24B534E60();
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HIDDeviceClient.RequestElementUpdate(0) + 20));
  swift_bridgeObjectRetain();
  sub_24B530938((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  sub_24B534E80();
  return sub_24B534EB0();
}

uint64_t sub_24B525224(uint64_t a1)
{
  sub_24B534E60();
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v3 = *(void *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  sub_24B530938((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  sub_24B534E80();
  return sub_24B534EB0();
}

uint64_t sub_24B5252F0(uint64_t a1, uint64_t a2)
{
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v5 = *(void *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  sub_24B530938(a1, v5);
  swift_bridgeObjectRelease();
  return sub_24B534E80();
}

uint64_t sub_24B5253A4(uint64_t a1, uint64_t a2)
{
  sub_24B534E60();
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v4 = *(void *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  sub_24B530938((uint64_t)v6, v4);
  swift_bridgeObjectRelease();
  sub_24B534E80();
  return sub_24B534EB0();
}

uint64_t sub_24B52546C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_24B534C60() & 1) != 0
    && (sub_24B524780(*(void *)(a1 + *(int *)(a3 + 20)), *(void *)(a2 + *(int *)(a3 + 20))) & 1) != 0)
  {
    char v6 = *(unsigned char *)(a1 + *(int *)(a3 + 24)) ^ *(unsigned char *)(a2 + *(int *)(a3 + 24)) ^ 1;
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

unint64_t sub_24B5254E0()
{
  return sub_24B51F55C(MEMORY[0x263F8EE78]);
}

uint64_t sub_24B5254EC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B5254F4(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*sub_24B525520())()
{
  return nullsub_1;
}

unint64_t sub_24B525540()
{
  return sub_24B51F760(MEMORY[0x263F8EE78]);
}

uint64_t sub_24B52554C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B525554(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_24B525580())()
{
  return nullsub_1;
}

uint64_t sub_24B5255A0(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v41 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B00);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
  uint64_t v40 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v38 = (uint64_t)&v37 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B08);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v37 - v20;
  sub_24B4EC0AC(a1, (uint64_t)v42);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6B10);
  int v22 = swift_dynamicCast();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v22)
  {
    v23(v14, 0, 1, v15);
    sub_24B531720((uint64_t)v14, (uint64_t)v21, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
    unsigned int v24 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate;
    sub_24B52E018((uint64_t)v21, (uint64_t)v18, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
    uint64_t v25 = (uint64_t)v41;
    id v26 = v41;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v42[0] = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_24B52FDD0(v25, 1, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v42[0];
    swift_bridgeObjectRelease();
    sub_24B52E080((uint64_t)v18, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
    uint64_t v28 = (uint64_t)v21;
    return sub_24B52E080(v28, v24);
  }
  id v29 = v41;
  v23(v14, 1, 1, v15);
  sub_24B4E73E4((uint64_t)v14, &qword_2697C6B08);
  sub_24B4EC0AC(a1, (uint64_t)v42);
  char v30 = swift_dynamicCast();
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
  if (v30)
  {
    v31(v7, 0, 1, v8);
    uint64_t v32 = v38;
    sub_24B531720((uint64_t)v7, v38, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    unsigned int v24 = type metadata accessor for HIDDeviceClient.RequestElementUpdate;
    uint64_t v33 = v39;
    sub_24B52E018(v32, v39, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    id v34 = v29;
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    v42[0] = v3[1];
    v3[1] = 0x8000000000000000;
    sub_24B52FC10((uint64_t)v29, 1, v33, v35);
    v3[1] = v42[0];
    swift_bridgeObjectRelease();
    sub_24B52E080(v33, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    uint64_t v28 = v32;
    return sub_24B52E080(v28, v24);
  }
  v31(v7, 1, 1, v8);
  return sub_24B4E73E4((uint64_t)v7, &qword_2697C6B00);
}

id HIDDeviceClient.HIDElementUpdateResult.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (!*(void *)(v2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_24B52D840(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(v2 + 56) + 16 * v3;
  id v6 = *(id *)v5;
  sub_24B531788(*(id *)v5, *(unsigned char *)(v5 + 8));
  return v6;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  id v6;

  uint64_t v2 = *(void *)(v1 + 8);
  if (!*(void *)(v2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_24B52D9F4(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(v2 + 56) + 16 * (void)v3;
  id v6 = *(id *)v5;
  sub_24B531794(*(id *)v5, *(unsigned char *)(v5 + 8));
  return v6;
}

unint64_t sub_24B525AD0@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t v3 = sub_24B51F55C(MEMORY[0x263F8EE78]);
  unint64_t result = sub_24B51F760(v2);
  *a1 = v3;
  a1[1] = result;
  return result;
}

uint64_t sub_24B525B18@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_24B525B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 280) = a4;
  *(void *)(v6 + 288) = v5;
  *(unsigned char *)(v6 + 532) = a5;
  *(void *)(v6 + 264) = a2;
  *(void *)(v6 + 272) = a3;
  *(void *)(v6 + 256) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B00);
  *(void *)(v6 + 296) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
  *(void *)(v6 + 304) = v7;
  *(void *)(v6 + 312) = *(void *)(v7 - 8);
  *(void *)(v6 + 320) = swift_task_alloc();
  *(void *)(v6 + 328) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for HIDElement.Value();
  *(void *)(v6 + 336) = v8;
  *(void *)(v6 + 344) = *(void *)(v8 - 8);
  *(void *)(v6 + 352) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B08);
  *(void *)(v6 + 360) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
  *(void *)(v6 + 368) = v9;
  *(void *)(v6 + 376) = *(void *)(v9 - 8);
  *(void *)(v6 + 384) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24B525D48, v5, 0);
}

uint64_t sub_24B525D48()
{
  char v1 = *(unsigned char *)(v0 + 532);
  uint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t v3 = sub_24B51F55C(MEMORY[0x263F8EE78]);
  unint64_t v4 = sub_24B51F760(v2);
  *(void *)(v0 + 136) = v3;
  *(void *)(v0 + 144) = v4;
  double v5 = 0.0;
  if ((v1 & 1) == 0)
  {
    double v6 = (double)sub_24B534EE0() * 1000.0;
    sub_24B534EE0();
    double v5 = v6 + (double)v7 / 1000000.0;
  }
  *(double *)(v0 + 392) = v5;
  uint64_t v8 = *(void *)(v0 + 288);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
  *(void *)(v0 + 400) = swift_slowAlloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B20);
  *(void *)(v0 + 408) = swift_slowAlloc();
  *(void *)(v0 + 416) = swift_slowAlloc();
  uint64_t v9 = 0;
  (*(void (**)(void, void))(*(void *)v8 + 800))(0, 0);
  *(void *)(v0 + 424) = 0;
  uint64_t v10 = *(void *)(*(void *)(v0 + 264) + 16);
  *(void *)(v0 + 432) = v10;
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = v0 + 16;
  v222 = (const uint8_t *)(v0 + 504);
  v220 = (uint64_t *)(v0 + 192);
  v221 = (uint64_t *)(v0 + 176);
  v223 = (uint64_t *)(v0 + 200);
  v224 = (uint64_t *)(v0 + 184);
  v226 = (uint64_t *)(v0 + 224);
  v227 = (uint64_t *)(v0 + 168);
  uint64_t v12 = (uint64_t *)(v0 + 232);
  v225 = (uint64_t *)(v0 + 248);
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  while (1)
  {
    *(void *)(v0 + 440) = v13;
    uint64_t v16 = *(void *)(v0 + 424);
    sub_24B4EC0AC(*(void *)(v0 + 264) + 40 * v13 + 32, v11);
    if (!v16) {
      break;
    }
    id v14 = *(id *)(v0 + 424);
    swift_willThrow();
    uint64_t v15 = *(void **)(v0 + 424);
    sub_24B5255A0(v11, v15);

    __swift_destroy_boxed_opaque_existential_1(v11);
LABEL_6:
    uint64_t v13 = *(void *)(v0 + 440) + 1;
    if (v13 == *(void *)(v0 + 432))
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void **)(v0 + 424);
LABEL_12:
      uint64_t v25 = *(void *)(v0 + 408);
      uint64_t v26 = *(void *)(v0 + 416);
      uint64_t v27 = *(void *)(v0 + 400);
      uint64_t v28 = *(void **)(v0 + 256);
      (*(void (**)(void))(**(void **)(v0 + 288) + 808))();
      uint64_t v29 = *(void *)(v0 + 144);
      *uint64_t v28 = *(void *)(v0 + 136);
      v28[1] = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MEMORY[0x24C5D3C50](v27, -1, -1);
      MEMORY[0x24C5D3C50](v25, -1, -1);
      MEMORY[0x24C5D3C50](v26, -1, -1);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v30 = *(uint64_t (**)(void))(v0 + 8);
      return v30();
    }
  }
  uint64_t v17 = *(void *)(v0 + 376);
  sub_24B4EC0AC(v11, v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6B10);
  int v18 = swift_dynamicCast();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (!v18)
  {
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 312);
    v19(v20, 1, 1, *(void *)(v0 + 368));
    sub_24B4E73E4(v20, &qword_2697C6B08);
    sub_24B4EC0AC(v11, v0 + 96);
    int v22 = swift_dynamicCast();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    if (v22)
    {
      uint64_t v41 = *(void *)(v0 + 328);
      uint64_t v43 = *(void *)(v0 + 296);
      uint64_t v42 = *(void *)(v0 + 304);
      v23(v43, 0, 1, v42);
      sub_24B531720(v43, v41, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
      uint64_t v45 = *(void *)(v41 + *(int *)(v42 + 20));
      uint64_t v46 = *(void *)(v45 + 16);
      uint64_t v47 = MEMORY[0x263F8EE78];
      if (v46)
      {
        *uint64_t v12 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_24B534C20();
        uint64_t v48 = 128;
        do
        {
          id v49 = *(id *)(v45 + v48);
          sub_24B534C00();
          sub_24B534C30();
          sub_24B534C40();
          sub_24B534C10();
          v48 += 128;
          --v46;
        }
        while (v46);
        uint64_t v47 = *v12;
        swift_bridgeObjectRelease();
      }
      *(void *)(v0 + 472) = v47;
      uint64_t v51 = *(void *)(v0 + 408);
      uint64_t v50 = *(void *)(v0 + 416);
      uint64_t v52 = *(void *)(v0 + 392);
      uint64_t v53 = *(void *)(v0 + 288);
      uint64_t v54 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v44, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
      char v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 480) = v55;
      v55[2] = v51;
      v55[3] = v53;
      v55[4] = v47;
      v55[5] = v50;
      v55[6] = v52;
      uint64_t v56 = (void *)swift_task_alloc();
      *(void *)(v0 + 488) = v56;
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B28);
      void *v56 = v0;
      v56[1] = sub_24B528A40;
      uint64_t v58 = v57;
      unint64_t v59 = (void *)(v0 + 208);
      unint64_t v60 = sub_24B5317A0;
      goto LABEL_157;
    }
    uint64_t v24 = *(void *)(v0 + 296);
    v23(v24, 1, 1, *(void *)(v0 + 304));
    __swift_destroy_boxed_opaque_existential_1(v11);
    sub_24B4E73E4(v24, &qword_2697C6B00);
    goto LABEL_6;
  }
  uint64_t v32 = *(void *)(v0 + 384);
  uint64_t v34 = *(void *)(v0 + 360);
  uint64_t v33 = *(void *)(v0 + 368);
  v19(v34, 0, 1, v33);
  sub_24B531720(v34, v32, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  *(void *)(v0 + 168) = MEMORY[0x263F8EE80];
  uint64_t v36 = *(void *)(v32 + *(int *)(v33 + 20));
  uint64_t v37 = *(void *)(v36 + 16);
  if (!v37)
  {
LABEL_156:
    uint64_t v217 = *(void *)(v0 + 400);
    uint64_t v218 = *(void *)(v0 + 392);
    uint64_t v219 = *(void *)(v0 + 384);
    uint64_t v53 = *(void *)(v0 + 288);
    uint64_t v54 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v35, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
    char v55 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v55;
    v55[2] = v217;
    v55[3] = v53;
    v55[4] = v227;
    v55[5] = v218;
    v55[6] = v0 + 136;
    v55[7] = v219;
    unint64_t v59 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v59;
    *unint64_t v59 = v0;
    v59[1] = sub_24B527410;
    uint64_t v58 = MEMORY[0x263F8EE60] + 8;
    unint64_t v60 = sub_24B531D7C;
LABEL_157:
    return MEMORY[0x270FA2360](v59, v53, v54, 0xD00000000000001ALL, 0x800000024B53D560, v60, v55, v58);
  }
  uint64_t v38 = *(void *)(v0 + 344);
  uint64_t v39 = v36 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
  uint64_t v230 = *(void *)(v38 + 72);
  swift_bridgeObjectRetain();
  uint64_t v40 = (uint64_t *)(v0 + 168);
  while (2)
  {
    uint64_t v61 = *(void *)(v0 + 352);
    uint64_t v62 = *(void *)(v0 + 336);
    sub_24B52E018(v39, v61, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
    uint64_t v63 = v61 + *(int *)(v62 + 24);
    uint64_t v64 = *(void *)v63;
    unint64_t v65 = *(void *)(v63 + 8);
    switch(v65 >> 62)
    {
      case 1uLL:
        if ((int)v64 > v64 >> 32)
        {
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
        }
        sub_24B4E5538(*(void *)v63, *(void *)(v63 + 8));
        uint64_t v84 = (const uint8_t *)sub_24B534710();
        if (v84)
        {
          uint64_t v85 = sub_24B534740();
          if (__OFSUB__((int)v64, v85)) {
            goto LABEL_168;
          }
          v84 += (int)v64 - v85;
        }
        uint64_t v86 = *(void *)(v0 + 352);
        sub_24B534730();
        unint64_t v87 = (__IOHIDElement *)*(id *)(v86 + 96);
        uint64_t v88 = sub_24B51B714();
        if (!v84)
        {
          __break(1u);
LABEL_185:
          __break(1u);
          JUMPOUT(0x24B527400);
        }
        if (__OFSUB__(HIDWORD(v64), v64)) {
          goto LABEL_165;
        }
        IOHIDValueRef v89 = IOHIDValueCreateWithBytes(0, v87, v88, v84, HIDWORD(v64) - (int)v64);
        uint64_t v90 = *v227;
        unint64_t v91 = *v227 & 0xC000000000000001;
        if (v89)
        {
          IOHIDValueRef v92 = v89;
          if (v91)
          {
            if (v90 >= 0) {
              v90 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v93 = sub_24B534D00();
            if (__OFADD__(v93, 1)) {
              goto LABEL_175;
            }
            uint64_t *v227 = sub_24B52E8F4(v90, v93 + 1);
          }
          uint64_t v228 = v39;
          uint64_t v94 = v37;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v96 = *v227;
          uint64_t *v223 = *v227;
          uint64_t *v227 = 0x8000000000000000;
          unint64_t v98 = sub_24B52DAEC((uint64_t)v87);
          uint64_t v99 = *(void *)(v96 + 16);
          BOOL v100 = (v97 & 1) == 0;
          uint64_t v101 = v99 + v100;
          if (__OFADD__(v99, v100)) {
            goto LABEL_171;
          }
          char v102 = v97;
          if (*(void *)(v96 + 24) >= v101)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v101, isUniquelyReferenced_nonNull_native);
            unint64_t v103 = sub_24B52DAEC((uint64_t)v87);
            if ((v102 & 1) != (v104 & 1)) {
              goto LABEL_160;
            }
            unint64_t v98 = v103;
          }
          v183 = (void *)*v223;
          if (v102)
          {
            uint64_t v184 = v183[7];

            *(void *)(v184 + 8 * v98) = v92;
          }
          else
          {
            v183[(v98 >> 6) + 8] |= 1 << v98;
            uint64_t v190 = 8 * v98;
            *(void *)(v183[6] + v190) = v87;
            *(void *)(v183[7] + v190) = v92;
            uint64_t v191 = v183[2];
            BOOL v178 = __OFADD__(v191, 1);
            uint64_t v192 = v191 + 1;
            if (v178) {
              goto LABEL_179;
            }
            v183[2] = v192;
            v193 = v87;
          }
          uint64_t v40 = (uint64_t *)(v0 + 168);
          uint64_t *v227 = (uint64_t)v183;

          swift_bridgeObjectRelease();
          sub_24B4E5590(v64, v65);
          uint64_t v37 = v94;
          uint64_t v39 = v228;
        }
        else if (v91)
        {
          if (v90 < 0) {
            uint64_t v166 = *v227;
          }
          else {
            uint64_t v166 = v90 & 0xFFFFFFFFFFFFFF8;
          }
          v167 = v87;
          swift_bridgeObjectRetain();
          uint64_t v168 = sub_24B534D30();

          if (!v168)
          {

            swift_bridgeObjectRelease();
LABEL_152:
            sub_24B4E5590(v64, v65);
            goto LABEL_24;
          }
          swift_unknownObjectRelease();
          uint64_t v169 = sub_24B534D00();
          uint64_t v170 = sub_24B52E8F4(v166, v169);
          swift_retain();
          unint64_t v171 = sub_24B52DAEC((uint64_t)v167);
          char v173 = v172;
          swift_release();
          if ((v173 & 1) == 0) {
            goto LABEL_183;
          }

          v174 = *(void **)(*(void *)(v170 + 56) + 8 * v171);
          sub_24B52F9E8(v171, v170);
          uint64_t *v227 = v170;

          uint64_t v40 = (uint64_t *)(v0 + 168);
          swift_bridgeObjectRelease();
          sub_24B4E5590(v64, v65);
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v211 = sub_24B52DAEC((uint64_t)v87);
          char v213 = v212;
          swift_bridgeObjectRelease();
          if ((v213 & 1) == 0)
          {

            goto LABEL_152;
          }
          char v214 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v215 = *v227;
          uint64_t *v220 = *v227;
          uint64_t *v227 = 0x8000000000000000;
          if ((v214 & 1) == 0)
          {
            sub_24B53059C();
            uint64_t v215 = *v220;
          }

          v216 = *(void **)(*(void *)(v215 + 56) + 8 * v211);
          sub_24B52F9E8(v211, v215);
          uint64_t *v227 = v215;

          swift_bridgeObjectRelease();
          sub_24B4E5590(v64, v65);
          uint64_t v40 = (uint64_t *)(v0 + 168);
        }
        goto LABEL_25;
      case 2uLL:
        uint64_t v105 = *(void *)(v64 + 16);
        swift_retain();
        swift_retain();
        uint64_t v106 = (const uint8_t *)sub_24B534710();
        if (!v106) {
          goto LABEL_56;
        }
        uint64_t v107 = sub_24B534740();
        if (__OFSUB__(v105, v107)) {
          goto LABEL_166;
        }
        v106 += v105 - v107;
LABEL_56:
        uint64_t v108 = *(void *)(v0 + 352);
        sub_24B534730();
        int v109 = (__IOHIDElement *)*(id *)(v108 + 96);
        uint64_t v110 = sub_24B51B714();
        if (!v106) {
          goto LABEL_185;
        }
        uint64_t v112 = *(void *)(v64 + 16);
        uint64_t v111 = *(void *)(v64 + 24);
        if (__OFSUB__(v111, v112)) {
          goto LABEL_164;
        }
        IOHIDValueRef v113 = IOHIDValueCreateWithBytes(0, v109, v110, v106, v111 - v112);
        uint64_t v114 = *v227;
        unint64_t v115 = *v227 & 0xC000000000000001;
        if (v113)
        {
          IOHIDValueRef v116 = v113;
          if (v115)
          {
            if (v114 >= 0) {
              v114 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v117 = sub_24B534D00();
            if (__OFADD__(v117, 1)) {
              goto LABEL_174;
            }
            uint64_t *v227 = sub_24B52E8F4(v114, v117 + 1);
          }
          uint64_t v229 = v37;
          char v118 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v119 = *v227;
          uint64_t *v224 = *v227;
          uint64_t *v227 = 0x8000000000000000;
          unint64_t v121 = sub_24B52DAEC((uint64_t)v109);
          uint64_t v122 = *(void *)(v119 + 16);
          BOOL v123 = (v120 & 1) == 0;
          uint64_t v124 = v122 + v123;
          if (__OFADD__(v122, v123)) {
            goto LABEL_170;
          }
          char v125 = v120;
          if (*(void *)(v119 + 24) >= v124)
          {
            if ((v118 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v124, v118);
            unint64_t v126 = sub_24B52DAEC((uint64_t)v109);
            if ((v125 & 1) != (v127 & 1)) {
              goto LABEL_160;
            }
            unint64_t v121 = v126;
          }
          v181 = (void *)*v224;
          if (v125)
          {
            uint64_t v182 = v181[7];

            *(void *)(v182 + 8 * v121) = v116;
          }
          else
          {
            v181[(v121 >> 6) + 8] |= 1 << v121;
            *(void *)(v181[6] + 8 * v121) = v109;
            *(void *)(v181[7] + 8 * v121) = v116;
            uint64_t v187 = v181[2];
            BOOL v178 = __OFADD__(v187, 1);
            uint64_t v188 = v187 + 1;
            if (v178) {
              goto LABEL_178;
            }
            v181[2] = v188;
            v189 = v109;
          }
          uint64_t v40 = (uint64_t *)(v0 + 168);
          uint64_t *v227 = (uint64_t)v181;
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          uint64_t v37 = v229;
        }
        else if (v115)
        {
          if (v114 < 0) {
            uint64_t v158 = *v227;
          }
          else {
            uint64_t v158 = v114 & 0xFFFFFFFFFFFFFF8;
          }
          v145 = v109;
          swift_bridgeObjectRetain();
          uint64_t v159 = sub_24B534D30();

          if (!v159)
          {
            swift_release();
            swift_release();
            goto LABEL_23;
          }
          swift_unknownObjectRelease();
          uint64_t v160 = sub_24B534D00();
          uint64_t v161 = sub_24B52E8F4(v158, v160);
          swift_retain();
          unint64_t v162 = sub_24B52DAEC((uint64_t)v145);
          char v164 = v163;
          swift_release();
          if ((v164 & 1) == 0) {
            goto LABEL_182;
          }

          v165 = *(void **)(*(void *)(v161 + 56) + 8 * v162);
          sub_24B52F9E8(v162, v161);
          uint64_t *v227 = v161;
          swift_release();
          swift_release();

          uint64_t v40 = (uint64_t *)(v0 + 168);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v205 = sub_24B52DAEC((uint64_t)v109);
          char v207 = v206;
          swift_bridgeObjectRelease();
          if ((v207 & 1) == 0)
          {
            swift_release();
            swift_release();

            goto LABEL_24;
          }
          char v208 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v209 = *v227;
          uint64_t *v221 = *v227;
          uint64_t *v227 = 0x8000000000000000;
          if ((v208 & 1) == 0)
          {
            sub_24B53059C();
            uint64_t v209 = *v221;
          }

          v210 = *(void **)(*(void *)(v209 + 56) + 8 * v205);
          sub_24B52F9E8(v205, v209);
          uint64_t *v227 = v209;
          swift_release();

          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v40 = (uint64_t *)(v0 + 168);
        }
        goto LABEL_25;
      case 3uLL:
        uint64_t v128 = *(void *)(v0 + 352);
        *(void *)v222 = 0;
        *(void *)(v0 + 510) = 0;
        uint64_t v67 = (__IOHIDElement *)*(id *)(v128 + 96);
        uint64_t v129 = sub_24B51B714();
        IOHIDValueRef v130 = IOHIDValueCreateWithBytes(0, v67, v129, v222, 0);
        uint64_t v131 = *(void *)(v0 + 168);
        unint64_t v132 = v131 & 0xC000000000000001;
        if (!v130)
        {
          if (v132)
          {
            if (v131 < 0) {
              uint64_t v152 = *(void *)(v0 + 168);
            }
            else {
              uint64_t v152 = v131 & 0xFFFFFFFFFFFFFF8;
            }
            v145 = v67;
            swift_bridgeObjectRetain();
            uint64_t v153 = sub_24B534D30();

            if (v153)
            {
              swift_unknownObjectRelease();
              uint64_t v154 = sub_24B534D00();
              uint64_t v148 = sub_24B52E8F4(v152, v154);
              swift_retain();
              unint64_t v149 = sub_24B52DAEC((uint64_t)v145);
              char v156 = v155;
              swift_release();
              if ((v156 & 1) == 0) {
                goto LABEL_181;
              }
LABEL_91:

              char v157 = *(void **)(*(void *)(v148 + 56) + 8 * v149);
              sub_24B52F9E8(v149, v148);
              uint64_t *v227 = v148;

              uint64_t v40 = (uint64_t *)(v0 + 168);
              goto LABEL_127;
            }
LABEL_23:

            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
            unint64_t v194 = sub_24B52DAEC((uint64_t)v67);
            char v202 = v201;
            swift_bridgeObjectRelease();
            if (v202)
            {
              v197 = (uint64_t *)(v0 + 168);
              char v203 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v199 = *v227;
              *(void *)(v0 + 240) = *v227;
              uint64_t *v227 = 0x8000000000000000;
              if ((v203 & 1) == 0)
              {
                v200 = (uint64_t *)(v0 + 240);
LABEL_154:
                sub_24B53059C();
                uint64_t v199 = *v200;
              }
LABEL_139:

              v204 = *(void **)(*(void *)(v199 + 56) + 8 * v194);
              sub_24B52F9E8(v194, v199);
              uint64_t *v197 = v199;

              swift_bridgeObjectRelease();
              uint64_t v40 = v197;
              goto LABEL_25;
            }
LABEL_140:
          }
LABEL_24:
          uint64_t v40 = (uint64_t *)(v0 + 168);
LABEL_25:
          sub_24B52E080(*(void *)(v0 + 352), (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
          v39 += v230;
          if (!--v37)
          {
            swift_bridgeObjectRelease();
            goto LABEL_156;
          }
          continue;
        }
        IOHIDValueRef v72 = v130;
        if (v132)
        {
          if (v131 >= 0) {
            v131 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          uint64_t v133 = sub_24B534D00();
          if (__OFADD__(v133, 1)) {
            goto LABEL_173;
          }
          *uint64_t v40 = sub_24B52E8F4(v131, v133 + 1);
        }
        char v134 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v135 = *v40;
        uint64_t *v225 = *v40;
        *uint64_t v40 = 0x8000000000000000;
        unint64_t v137 = sub_24B52DAEC((uint64_t)v67);
        uint64_t v138 = *(void *)(v135 + 16);
        BOOL v139 = (v136 & 1) == 0;
        uint64_t v140 = v138 + v139;
        if (__OFADD__(v138, v139)) {
          goto LABEL_169;
        }
        char v141 = v136;
        if (*(void *)(v135 + 24) >= v140)
        {
          if ((v134 & 1) == 0) {
            sub_24B53059C();
          }
          goto LABEL_114;
        }
        sub_24B52F6A4(v140, v134);
        unint64_t v142 = sub_24B52DAEC((uint64_t)v67);
        if ((v141 & 1) == (v143 & 1))
        {
          unint64_t v137 = v142;
LABEL_114:
          v175 = (void *)*v225;
          uint64_t v176 = 8 * v137;
          if (v141)
          {
LABEL_115:
            uint64_t v180 = v175[7];

            *(void *)(v180 + v176) = v72;
          }
          else
          {
            v175[(v137 >> 6) + 8] |= 1 << v137;
            *(void *)(v175[6] + 8 * v137) = v67;
            *(void *)(v175[7] + 8 * v137) = v72;
            uint64_t v185 = v175[2];
            BOOL v178 = __OFADD__(v185, 1);
            uint64_t v179 = v185 + 1;
            if (v178) {
              goto LABEL_177;
            }
LABEL_125:
            v175[2] = v179;
            v186 = v67;
          }
          uint64_t v40 = (uint64_t *)(v0 + 168);
          uint64_t *v227 = (uint64_t)v175;

LABEL_127:
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
LABEL_160:
        type metadata accessor for IOHIDElement();
        return sub_24B534E00();
      default:
        uint64_t v66 = *(void *)(v0 + 352);
        *(void *)(v0 + 518) = v64;
        *(_WORD *)(v0 + 526) = v65;
        *(unsigned char *)(v0 + 528) = BYTE2(v65);
        *(unsigned char *)(v0 + 529) = BYTE3(v65);
        *(unsigned char *)(v0 + 530) = BYTE4(v65);
        *(unsigned char *)(v0 + 531) = BYTE5(v65);
        uint64_t v67 = (__IOHIDElement *)*(id *)(v66 + 96);
        uint64_t v68 = sub_24B51B714();
        IOHIDValueRef v69 = IOHIDValueCreateWithBytes(0, v67, v68, (const uint8_t *)(v0 + 518), BYTE6(v65));
        uint64_t v70 = *(void *)(v0 + 168);
        unint64_t v71 = v70 & 0xC000000000000001;
        if (v69)
        {
          IOHIDValueRef v72 = v69;
          if (v71)
          {
            if (v70 >= 0) {
              v70 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v73 = sub_24B534D00();
            if (__OFADD__(v73, 1)) {
              goto LABEL_172;
            }
            *uint64_t v40 = sub_24B52E8F4(v70, v73 + 1);
          }
          char v74 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v75 = *v40;
          uint64_t *v226 = *v40;
          *uint64_t v40 = 0x8000000000000000;
          unint64_t v77 = sub_24B52DAEC((uint64_t)v67);
          uint64_t v78 = *(void *)(v75 + 16);
          BOOL v79 = (v76 & 1) == 0;
          uint64_t v80 = v78 + v79;
          if (__OFADD__(v78, v79)) {
            goto LABEL_167;
          }
          char v81 = v76;
          if (*(void *)(v75 + 24) >= v80)
          {
            if ((v74 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v80, v74);
            unint64_t v82 = sub_24B52DAEC((uint64_t)v67);
            if ((v81 & 1) != (v83 & 1)) {
              goto LABEL_160;
            }
            unint64_t v77 = v82;
          }
          v175 = (void *)*v226;
          uint64_t v176 = 8 * v77;
          if ((v81 & 1) == 0)
          {
            v175[(v77 >> 6) + 8] |= 1 << v77;
            *(void *)(v175[6] + 8 * v77) = v67;
            *(void *)(v175[7] + 8 * v77) = v72;
            uint64_t v177 = v175[2];
            BOOL v178 = __OFADD__(v177, 1);
            uint64_t v179 = v177 + 1;
            if (v178) {
              goto LABEL_176;
            }
            goto LABEL_125;
          }
          goto LABEL_115;
        }
        if (!v71)
        {
          swift_bridgeObjectRetain();
          unint64_t v194 = sub_24B52DAEC((uint64_t)v67);
          char v196 = v195;
          swift_bridgeObjectRelease();
          if ((v196 & 1) == 0) {
            goto LABEL_140;
          }
          v197 = (uint64_t *)(v0 + 168);
          char v198 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v199 = *v227;
          *(void *)(v0 + 216) = *v227;
          uint64_t *v227 = 0x8000000000000000;
          if ((v198 & 1) == 0)
          {
            v200 = (uint64_t *)(v0 + 216);
            goto LABEL_154;
          }
          goto LABEL_139;
        }
        if (v70 < 0) {
          uint64_t v144 = *(void *)(v0 + 168);
        }
        else {
          uint64_t v144 = v70 & 0xFFFFFFFFFFFFFF8;
        }
        v145 = v67;
        swift_bridgeObjectRetain();
        uint64_t v146 = sub_24B534D30();

        if (!v146) {
          goto LABEL_23;
        }
        swift_unknownObjectRelease();
        uint64_t v147 = sub_24B534D00();
        uint64_t v148 = sub_24B52E8F4(v144, v147);
        swift_retain();
        unint64_t v149 = sub_24B52DAEC((uint64_t)v145);
        char v151 = v150;
        swift_release();
        if ((v151 & 1) == 0) {
          goto LABEL_180;
        }
        goto LABEL_91;
    }
  }
}

uint64_t sub_24B527410()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 288);
  swift_task_dealloc();
  if (v0) {
    unint64_t v4 = sub_24B52A254;
  }
  else {
    unint64_t v4 = sub_24B527584;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_24B527584()
{
  uint64_t v1 = *(void *)(v0 + 384);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_24B52E080(v1, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  uint64_t v2 = (uint64_t *)(v0 + 168);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 440) + 1;
  if (v3 == *(void *)(v0 + 432))
  {
LABEL_2:
    uint64_t v4 = swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 416);
    double v5 = *(void **)(v0 + 424);
    uint64_t v8 = *(void *)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 408);
    uint64_t v9 = *(void **)(v0 + 256);
    (*(void (**)(uint64_t))(**(void **)(v0 + 288) + 808))(v4);
    uint64_t v10 = *(void *)(v0 + 144);
    void *v9 = *(void *)(v0 + 136);
    v9[1] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x24C5D3C50](v8, -1, -1);
    MEMORY[0x24C5D3C50](v7, -1, -1);
    MEMORY[0x24C5D3C50](v6, -1, -1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  v216 = (const uint8_t *)(v0 + 504);
  char v214 = (uint64_t *)(v0 + 192);
  uint64_t v215 = (uint64_t *)(v0 + 176);
  uint64_t v217 = (uint64_t *)(v0 + 200);
  uint64_t v218 = (uint64_t *)(v0 + 184);
  uint64_t v13 = (uint64_t *)(v0 + 232);
  uint64_t v219 = (uint64_t *)(v0 + 248);
  v220 = (uint64_t *)(v0 + 224);
  v223 = (void *)(v0 + 168);
  while (1)
  {
    *(void *)(v0 + 440) = v3;
    uint64_t v16 = *(void *)(v0 + 424);
    sub_24B4EC0AC(*(void *)(v0 + 264) + 40 * v3 + 32, v0 + 16);
    if (v16)
    {
      id v14 = *(id *)(v0 + 424);
      swift_willThrow();
      uint64_t v15 = *(void **)(v0 + 424);
      sub_24B5255A0(v0 + 16, v15);

      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      goto LABEL_7;
    }
    uint64_t v17 = *(void *)(v0 + 376);
    sub_24B4EC0AC(v0 + 16, v0 + 56);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6B10);
    int v18 = swift_dynamicCast();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    if (v18) {
      break;
    }
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 312);
    v19(v20, 1, 1, *(void *)(v0 + 368));
    sub_24B4E73E4(v20, &qword_2697C6B08);
    sub_24B4EC0AC(v0 + 16, v0 + 96);
    int v22 = swift_dynamicCast();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    if (v22)
    {
      uint64_t v191 = *(void *)(v0 + 328);
      uint64_t v193 = *(void *)(v0 + 296);
      uint64_t v192 = *(void *)(v0 + 304);
      v23(v193, 0, 1, v192);
      sub_24B531720(v193, v191, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
      uint64_t v195 = *(void *)(v191 + *(int *)(v192 + 20));
      uint64_t v196 = *(void *)(v195 + 16);
      uint64_t v197 = MEMORY[0x263F8EE78];
      if (v196)
      {
        *uint64_t v13 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_24B534C20();
        uint64_t v198 = 128;
        do
        {
          id v199 = *(id *)(v195 + v198);
          sub_24B534C00();
          sub_24B534C30();
          sub_24B534C40();
          sub_24B534C10();
          v198 += 128;
          --v196;
        }
        while (v196);
        uint64_t v197 = *v13;
        swift_bridgeObjectRelease();
      }
      *(void *)(v0 + 472) = v197;
      uint64_t v201 = *(void *)(v0 + 408);
      uint64_t v200 = *(void *)(v0 + 416);
      uint64_t v202 = *(void *)(v0 + 392);
      uint64_t v203 = *(void *)(v0 + 288);
      uint64_t v204 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v194, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
      unint64_t v205 = (void *)swift_task_alloc();
      *(void *)(v0 + 480) = v205;
      v205[2] = v201;
      v205[3] = v203;
      v205[4] = v197;
      v205[5] = v200;
      v205[6] = v202;
      char v206 = (void *)swift_task_alloc();
      *(void *)(v0 + 488) = v206;
      uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B28);
      *char v206 = v0;
      v206[1] = sub_24B528A40;
      uint64_t v208 = v207;
      uint64_t v209 = (void *)(v0 + 208);
      v210 = sub_24B5317A0;
      goto LABEL_157;
    }
    uint64_t v24 = *(void *)(v0 + 296);
    v23(v24, 1, 1, *(void *)(v0 + 304));
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    sub_24B4E73E4(v24, &qword_2697C6B00);
    uint64_t v2 = (uint64_t *)(v0 + 168);
LABEL_7:
    uint64_t v3 = *(void *)(v0 + 440) + 1;
    if (v3 == *(void *)(v0 + 432)) {
      goto LABEL_2;
    }
  }
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v27 = *(void *)(v0 + 360);
  uint64_t v26 = *(void *)(v0 + 368);
  v19(v27, 0, 1, v26);
  sub_24B531720(v27, v25, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  *(void *)(v0 + 168) = MEMORY[0x263F8EE80];
  uint64_t v29 = *(void *)(v25 + *(int *)(v26 + 20));
  uint64_t v30 = *(void *)(v29 + 16);
  if (!v30)
  {
LABEL_156:
    uint64_t v211 = *(void *)(v0 + 400);
    uint64_t v212 = *(void *)(v0 + 392);
    uint64_t v213 = *(void *)(v0 + 384);
    uint64_t v203 = *(void *)(v0 + 288);
    uint64_t v204 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v28, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
    unint64_t v205 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v205;
    v205[2] = v211;
    v205[3] = v203;
    v205[4] = v2;
    v205[5] = v212;
    v205[6] = v0 + 136;
    v205[7] = v213;
    uint64_t v209 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v209;
    *uint64_t v209 = v0;
    v209[1] = sub_24B527410;
    uint64_t v208 = MEMORY[0x263F8EE60] + 8;
    v210 = sub_24B531D7C;
LABEL_157:
    return MEMORY[0x270FA2360](v209, v203, v204, 0xD00000000000001ALL, 0x800000024B53D560, v210, v205, v208);
  }
  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v32 = v29 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  uint64_t v222 = *(void *)(v31 + 72);
  swift_bridgeObjectRetain();
  while (2)
  {
    uint64_t v34 = *(void *)(v0 + 352);
    uint64_t v35 = *(void *)(v0 + 336);
    sub_24B52E018(v32, v34, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
    uint64_t v36 = v34 + *(int *)(v35 + 24);
    uint64_t v37 = *(void *)v36;
    unint64_t v38 = *(void *)(v36 + 8);
    switch(v38 >> 62)
    {
      case 1uLL:
        if ((int)v37 > v37 >> 32)
        {
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
        }
        sub_24B4E5538(*(void *)v36, *(void *)(v36 + 8));
        uint64_t v57 = (const uint8_t *)sub_24B534710();
        uint64_t v221 = v30;
        if (v57)
        {
          uint64_t v58 = sub_24B534740();
          if (__OFSUB__((int)v37, v58)) {
            goto LABEL_168;
          }
          v57 += (int)v37 - v58;
        }
        uint64_t v59 = *(void *)(v0 + 352);
        sub_24B534730();
        unint64_t v60 = (__IOHIDElement *)*(id *)(v59 + 96);
        uint64_t v61 = sub_24B51B714();
        if (!v57)
        {
          __break(1u);
LABEL_185:
          __break(1u);
          JUMPOUT(0x24B528A30);
        }
        if (__OFSUB__(HIDWORD(v37), v37)) {
          goto LABEL_165;
        }
        IOHIDValueRef v62 = IOHIDValueCreateWithBytes(0, v60, v61, v57, HIDWORD(v37) - (int)v37);
        uint64_t v63 = *v2;
        unint64_t v64 = *v2 & 0xC000000000000001;
        if (v62)
        {
          IOHIDValueRef v65 = v62;
          if (v64)
          {
            if (v63 >= 0) {
              v63 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v66 = sub_24B534D00();
            if (__OFADD__(v66, 1)) {
              goto LABEL_175;
            }
            *uint64_t v2 = sub_24B52E8F4(v63, v66 + 1);
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v68 = v2;
          char v69 = isUniquelyReferenced_nonNull_native;
          uint64_t v70 = *v68;
          *uint64_t v217 = *v68;
          *uint64_t v68 = 0x8000000000000000;
          unint64_t v72 = sub_24B52DAEC((uint64_t)v60);
          uint64_t v73 = *(void *)(v70 + 16);
          BOOL v74 = (v71 & 1) == 0;
          uint64_t v75 = v73 + v74;
          if (__OFADD__(v73, v74)) {
            goto LABEL_171;
          }
          char v76 = v71;
          if (*(void *)(v70 + 24) >= v75)
          {
            if ((v69 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v75, v69);
            unint64_t v77 = sub_24B52DAEC((uint64_t)v60);
            if ((v76 & 1) != (v78 & 1)) {
              goto LABEL_160;
            }
            unint64_t v72 = v77;
          }
          uint64_t v161 = (void *)*v217;
          if (v76)
          {
            uint64_t v162 = v161[7];

            *(void *)(v162 + 8 * v72) = v65;
          }
          else
          {
            v161[(v72 >> 6) + 8] |= 1 << v72;
            uint64_t v165 = 8 * v72;
            *(void *)(v161[6] + v165) = v60;
            *(void *)(v161[7] + v165) = v65;
            uint64_t v166 = v161[2];
            BOOL v154 = __OFADD__(v166, 1);
            uint64_t v167 = v166 + 1;
            if (v154) {
              goto LABEL_179;
            }
            v161[2] = v167;
            uint64_t v168 = v60;
          }
          void *v223 = v161;
          uint64_t v2 = (uint64_t *)(v0 + 168);

LABEL_126:
          swift_bridgeObjectRelease();
          goto LABEL_127;
        }
        if (!v64)
        {
          swift_bridgeObjectRetain();
          unint64_t v185 = sub_24B52DAEC((uint64_t)v60);
          char v187 = v186;
          swift_bridgeObjectRelease();
          if (v187)
          {
            char v188 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v189 = *v2;
            *char v214 = *v2;
            *uint64_t v2 = 0x8000000000000000;
            if ((v188 & 1) == 0)
            {
              sub_24B53059C();
              uint64_t v189 = *v214;
            }

            uint64_t v190 = *(void **)(*(void *)(v189 + 56) + 8 * v185);
            sub_24B52F9E8(v185, v189);
            *uint64_t v2 = v189;

            goto LABEL_126;
          }

LABEL_127:
          sub_24B4E5590(v37, v38);
          goto LABEL_17;
        }
        if (v63 < 0) {
          uint64_t v142 = *v2;
        }
        else {
          uint64_t v142 = v63 & 0xFFFFFFFFFFFFFF8;
        }
        char v143 = v60;
        swift_bridgeObjectRetain();
        uint64_t v144 = sub_24B534D30();

        if (!v144)
        {

          goto LABEL_126;
        }
        swift_unknownObjectRelease();
        uint64_t v145 = sub_24B534D00();
        uint64_t v146 = sub_24B52E8F4(v142, v145);
        swift_retain();
        unint64_t v147 = sub_24B52DAEC((uint64_t)v143);
        char v149 = v148;
        swift_release();
        uint64_t v30 = v221;
        if ((v149 & 1) == 0) {
          goto LABEL_183;
        }

        char v150 = *(void **)(*(void *)(v146 + 56) + 8 * v147);
        sub_24B52F9E8(v147, v146);
        *uint64_t v2 = v146;

        swift_bridgeObjectRelease();
        sub_24B4E5590(v37, v38);
        goto LABEL_18;
      case 2uLL:
        uint64_t v79 = *(void *)(v37 + 16);
        swift_retain();
        swift_retain();
        uint64_t v80 = (const uint8_t *)sub_24B534710();
        uint64_t v221 = v30;
        if (!v80) {
          goto LABEL_49;
        }
        uint64_t v81 = sub_24B534740();
        if (__OFSUB__(v79, v81)) {
          goto LABEL_166;
        }
        v80 += v79 - v81;
LABEL_49:
        uint64_t v82 = *(void *)(v0 + 352);
        sub_24B534730();
        char v83 = (__IOHIDElement *)*(id *)(v82 + 96);
        uint64_t v84 = sub_24B51B714();
        if (!v80) {
          goto LABEL_185;
        }
        uint64_t v86 = *(void *)(v37 + 16);
        uint64_t v85 = *(void *)(v37 + 24);
        if (__OFSUB__(v85, v86)) {
          goto LABEL_164;
        }
        IOHIDValueRef v87 = IOHIDValueCreateWithBytes(0, v83, v84, v80, v85 - v86);
        uint64_t v88 = *v2;
        unint64_t v89 = *v2 & 0xC000000000000001;
        if (v87)
        {
          IOHIDValueRef v90 = v87;
          if (v89)
          {
            if (v88 >= 0) {
              v88 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v91 = sub_24B534D00();
            if (__OFADD__(v91, 1)) {
              goto LABEL_174;
            }
            *uint64_t v2 = sub_24B52E8F4(v88, v91 + 1);
          }
          char v92 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v93 = v2;
          char v94 = v92;
          uint64_t v95 = *v93;
          *uint64_t v218 = *v93;
          *uint64_t v93 = 0x8000000000000000;
          unint64_t v97 = sub_24B52DAEC((uint64_t)v83);
          uint64_t v98 = *(void *)(v95 + 16);
          BOOL v99 = (v96 & 1) == 0;
          uint64_t v100 = v98 + v99;
          if (__OFADD__(v98, v99)) {
            goto LABEL_170;
          }
          char v101 = v96;
          if (*(void *)(v95 + 24) >= v100)
          {
            if ((v94 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v100, v94);
            unint64_t v102 = sub_24B52DAEC((uint64_t)v83);
            if ((v101 & 1) != (v103 & 1)) {
              goto LABEL_160;
            }
            unint64_t v97 = v102;
          }
          char v157 = (void *)*v218;
          if (v101)
          {
            uint64_t v33 = v157[7];

            *(void *)(v33 + 8 * v97) = v90;
          }
          else
          {
            v157[(v97 >> 6) + 8] |= 1 << v97;
            *(void *)(v157[6] + 8 * v97) = v83;
            *(void *)(v157[7] + 8 * v97) = v90;
            uint64_t v158 = v157[2];
            BOOL v154 = __OFADD__(v158, 1);
            uint64_t v159 = v158 + 1;
            if (v154) {
              goto LABEL_178;
            }
            v157[2] = v159;
            uint64_t v160 = v83;
          }
          void *v223 = v157;
          uint64_t v2 = (uint64_t *)(v0 + 168);
          swift_release();
          swift_release();

          goto LABEL_16;
        }
        if (!v89)
        {
          swift_bridgeObjectRetain();
          unint64_t v179 = sub_24B52DAEC((uint64_t)v83);
          char v181 = v180;
          swift_bridgeObjectRelease();
          if (v181)
          {
            char v182 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v183 = *v2;
            *uint64_t v215 = *v2;
            *uint64_t v2 = 0x8000000000000000;
            if ((v182 & 1) == 0)
            {
              sub_24B53059C();
              uint64_t v183 = *v215;
            }

            uint64_t v184 = *(void **)(*(void *)(v183 + 56) + 8 * v179);
            sub_24B52F9E8(v179, v183);
            *uint64_t v2 = v183;
            swift_release();

            swift_bridgeObjectRelease();
            swift_release();
          }
          else
          {
            swift_release();
            swift_release();
          }
LABEL_17:
          uint64_t v30 = v221;
          goto LABEL_18;
        }
        if (v88 < 0) {
          uint64_t v134 = *v2;
        }
        else {
          uint64_t v134 = v88 & 0xFFFFFFFFFFFFFF8;
        }
        unint64_t v121 = v83;
        swift_bridgeObjectRetain();
        uint64_t v135 = sub_24B534D30();

        if (!v135)
        {
          swift_release();
          swift_release();

LABEL_16:
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        swift_unknownObjectRelease();
        uint64_t v136 = sub_24B534D00();
        uint64_t v137 = sub_24B52E8F4(v134, v136);
        swift_retain();
        unint64_t v138 = sub_24B52DAEC((uint64_t)v121);
        char v140 = v139;
        swift_release();
        uint64_t v30 = v221;
        if ((v140 & 1) == 0) {
          goto LABEL_182;
        }

        char v141 = *(void **)(*(void *)(v137 + 56) + 8 * v138);
        sub_24B52F9E8(v138, v137);
        *uint64_t v2 = v137;
        swift_release();
        swift_release();

        goto LABEL_92;
      case 3uLL:
        uint64_t v104 = *(void *)(v0 + 352);
        *(void *)v216 = 0;
        *(void *)(v0 + 510) = 0;
        uint64_t v40 = (__IOHIDElement *)*(id *)(v104 + 96);
        uint64_t v105 = sub_24B51B714();
        IOHIDValueRef v106 = IOHIDValueCreateWithBytes(0, v40, v105, v216, 0);
        uint64_t v107 = *(void *)(v0 + 168);
        unint64_t v108 = v107 & 0xC000000000000001;
        if (!v106)
        {
          if (!v108)
          {
            swift_bridgeObjectRetain();
            unint64_t v169 = sub_24B52DAEC((uint64_t)v40);
            char v176 = v175;
            swift_bridgeObjectRelease();
            if (v176)
            {
              char v177 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v173 = *v2;
              *(void *)(v0 + 240) = *v2;
              *uint64_t v2 = 0x8000000000000000;
              if ((v177 & 1) == 0)
              {
                v174 = (uint64_t *)(v0 + 240);
LABEL_149:
                sub_24B53059C();
                uint64_t v173 = *v174;
              }
LABEL_134:

              BOOL v178 = *(void **)(*(void *)(v173 + 56) + 8 * v169);
              sub_24B52F9E8(v169, v173);
              *uint64_t v2 = v173;

              swift_bridgeObjectRelease();
            }
            else
            {
LABEL_135:
            }
            goto LABEL_18;
          }
          if (v107 < 0) {
            uint64_t v128 = *(void *)(v0 + 168);
          }
          else {
            uint64_t v128 = v107 & 0xFFFFFFFFFFFFFF8;
          }
          unint64_t v121 = v40;
          swift_bridgeObjectRetain();
          uint64_t v129 = sub_24B534D30();

          if (v129)
          {
            swift_unknownObjectRelease();
            uint64_t v130 = sub_24B534D00();
            uint64_t v124 = sub_24B52E8F4(v128, v130);
            swift_retain();
            unint64_t v125 = sub_24B52DAEC((uint64_t)v121);
            char v132 = v131;
            swift_release();
            if ((v132 & 1) == 0) {
              goto LABEL_181;
            }
LABEL_84:

            uint64_t v133 = *(void **)(*(void *)(v124 + 56) + 8 * v125);
            sub_24B52F9E8(v125, v124);
            *uint64_t v2 = v124;

LABEL_92:
            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
LABEL_128:

LABEL_122:
          swift_bridgeObjectRelease();
LABEL_18:
          sub_24B52E080(*(void *)(v0 + 352), (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
          v32 += v222;
          if (!--v30)
          {
            swift_bridgeObjectRelease();
            goto LABEL_156;
          }
          continue;
        }
        IOHIDValueRef v45 = v106;
        if (v108)
        {
          if (v107 >= 0) {
            v107 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          uint64_t v109 = sub_24B534D00();
          if (__OFADD__(v109, 1)) {
            goto LABEL_173;
          }
          *uint64_t v2 = sub_24B52E8F4(v107, v109 + 1);
        }
        char v110 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v111 = *v2;
        *uint64_t v219 = *v2;
        *uint64_t v2 = 0x8000000000000000;
        unint64_t v113 = sub_24B52DAEC((uint64_t)v40);
        uint64_t v114 = *(void *)(v111 + 16);
        BOOL v115 = (v112 & 1) == 0;
        uint64_t v116 = v114 + v115;
        if (__OFADD__(v114, v115)) {
          goto LABEL_169;
        }
        char v117 = v112;
        if (*(void *)(v111 + 24) >= v116)
        {
          if ((v110 & 1) == 0) {
            sub_24B53059C();
          }
          goto LABEL_108;
        }
        sub_24B52F6A4(v116, v110);
        unint64_t v118 = sub_24B52DAEC((uint64_t)v40);
        if ((v117 & 1) == (v119 & 1))
        {
          unint64_t v113 = v118;
LABEL_108:
          char v151 = (void *)*v219;
          uint64_t v152 = 8 * v113;
          if (v117)
          {
LABEL_109:
            uint64_t v156 = v151[7];

            *(void *)(v156 + v152) = v45;
          }
          else
          {
            v151[(v113 >> 6) + 8] |= 1 << v113;
            *(void *)(v151[6] + 8 * v113) = v40;
            *(void *)(v151[7] + 8 * v113) = v45;
            uint64_t v163 = v151[2];
            BOOL v154 = __OFADD__(v163, 1);
            uint64_t v155 = v163 + 1;
            if (v154) {
              goto LABEL_177;
            }
LABEL_120:
            v151[2] = v155;
            char v164 = v40;
          }
          *uint64_t v2 = (uint64_t)v151;

          goto LABEL_122;
        }
LABEL_160:
        type metadata accessor for IOHIDElement();
        return sub_24B534E00();
      default:
        uint64_t v39 = *(void *)(v0 + 352);
        *(void *)(v0 + 518) = v37;
        *(_WORD *)(v0 + 526) = v38;
        *(unsigned char *)(v0 + 528) = BYTE2(v38);
        *(unsigned char *)(v0 + 529) = BYTE3(v38);
        *(unsigned char *)(v0 + 530) = BYTE4(v38);
        *(unsigned char *)(v0 + 531) = BYTE5(v38);
        uint64_t v40 = (__IOHIDElement *)*(id *)(v39 + 96);
        uint64_t v41 = sub_24B51B714();
        IOHIDValueRef v42 = IOHIDValueCreateWithBytes(0, v40, v41, (const uint8_t *)(v0 + 518), BYTE6(v38));
        uint64_t v43 = *(void *)(v0 + 168);
        unint64_t v44 = v43 & 0xC000000000000001;
        if (v42)
        {
          IOHIDValueRef v45 = v42;
          if (v44)
          {
            if (v43 >= 0) {
              v43 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v46 = sub_24B534D00();
            if (__OFADD__(v46, 1)) {
              goto LABEL_172;
            }
            *uint64_t v2 = sub_24B52E8F4(v43, v46 + 1);
          }
          char v47 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v48 = *v2;
          uint64_t *v220 = *v2;
          *uint64_t v2 = 0x8000000000000000;
          unint64_t v50 = sub_24B52DAEC((uint64_t)v40);
          uint64_t v51 = *(void *)(v48 + 16);
          BOOL v52 = (v49 & 1) == 0;
          uint64_t v53 = v51 + v52;
          if (__OFADD__(v51, v52)) {
            goto LABEL_167;
          }
          char v54 = v49;
          if (*(void *)(v48 + 24) >= v53)
          {
            if ((v47 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v53, v47);
            unint64_t v55 = sub_24B52DAEC((uint64_t)v40);
            if ((v54 & 1) != (v56 & 1)) {
              goto LABEL_160;
            }
            unint64_t v50 = v55;
          }
          char v151 = (void *)*v220;
          uint64_t v152 = 8 * v50;
          if ((v54 & 1) == 0)
          {
            v151[(v50 >> 6) + 8] |= 1 << v50;
            *(void *)(v151[6] + 8 * v50) = v40;
            *(void *)(v151[7] + 8 * v50) = v45;
            uint64_t v153 = v151[2];
            BOOL v154 = __OFADD__(v153, 1);
            uint64_t v155 = v153 + 1;
            if (v154) {
              goto LABEL_176;
            }
            goto LABEL_120;
          }
          goto LABEL_109;
        }
        if (!v44)
        {
          swift_bridgeObjectRetain();
          unint64_t v169 = sub_24B52DAEC((uint64_t)v40);
          char v171 = v170;
          swift_bridgeObjectRelease();
          if ((v171 & 1) == 0) {
            goto LABEL_135;
          }
          char v172 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v173 = *v2;
          *(void *)(v0 + 216) = *v2;
          *uint64_t v2 = 0x8000000000000000;
          if ((v172 & 1) == 0)
          {
            v174 = (uint64_t *)(v0 + 216);
            goto LABEL_149;
          }
          goto LABEL_134;
        }
        if (v43 < 0) {
          uint64_t v120 = *(void *)(v0 + 168);
        }
        else {
          uint64_t v120 = v43 & 0xFFFFFFFFFFFFFF8;
        }
        unint64_t v121 = v40;
        swift_bridgeObjectRetain();
        uint64_t v122 = sub_24B534D30();

        if (!v122) {
          goto LABEL_128;
        }
        swift_unknownObjectRelease();
        uint64_t v123 = sub_24B534D00();
        uint64_t v124 = sub_24B52E8F4(v120, v123);
        swift_retain();
        unint64_t v125 = sub_24B52DAEC((uint64_t)v121);
        char v127 = v126;
        swift_release();
        if ((v127 & 1) == 0) {
          goto LABEL_180;
        }
        goto LABEL_84;
    }
  }
}

uint64_t sub_24B528A40()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 288);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    uint64_t v4 = sub_24B52B734;
  }
  else {
    uint64_t v4 = sub_24B528BD8;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_24B528BD8()
{
  uint64_t v1 = v0;
  uint64_t v3 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v4 = v0 + 26;
  uint64_t v5 = sub_24B531A68(v0[26], (void (*)(void))sub_24B5318E0, v0[36]);
  swift_bridgeObjectRelease();
  sub_24B52E018(v2, v3, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = v0[18];
  v0[20] = v7;
  uint64_t v8 = v0 + 20;
  v1[18] = 0x8000000000000000;
  unint64_t v10 = (unint64_t)sub_24B52D9F4(v3);
  uint64_t v11 = *(void *)(v7 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_174;
  }
  char v14 = v9;
  if (*(void *)(v7 + 24) >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_24B530054();
    }
  }
  else
  {
    uint64_t v15 = v1[40];
    sub_24B52EB7C(v13, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = sub_24B52D9F4(v15);
    if ((v14 & 1) != (v17 & 1)) {
      goto LABEL_4;
    }
    unint64_t v10 = (unint64_t)v16;
  }
  uint64_t v19 = (void *)*v8;
  v237 = v4;
  if (v14)
  {
    uint64_t v20 = v19[7] + 16 * v10;
    sub_24B531D70(*(id *)v20, *(unsigned char *)(v20 + 8));
    *(void *)uint64_t v20 = v5;
    *(unsigned char *)(v20 + 8) = 0;
    goto LABEL_14;
  }
  uint64_t v22 = v1[39];
  uint64_t v21 = v1[40];
  v19[(v10 >> 6) + 8] |= 1 << v10;
  sub_24B52E018(v21, v19[6] + *(void *)(v22 + 72) * v10, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
  uint64_t v23 = v19[7] + 16 * v10;
  *(void *)uint64_t v23 = v5;
  *(unsigned char *)(v23 + 8) = 0;
  uint64_t v24 = v19[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
  }
  v19[2] = v26;
LABEL_14:
  uint64_t v27 = (uint64_t)(v1 + 2);
  uint64_t v28 = v1[40];
  uint64_t v29 = v1[41];
  v1[18] = v19;
  swift_bridgeObjectRelease();
  sub_24B52E080(v28, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
  sub_24B52E080(v29, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v8 - 18));
  uint64_t v30 = v1[55] + 1;
  if (v30 == v1[54])
  {
LABEL_15:
    uint64_t v31 = swift_bridgeObjectRelease();
    uint64_t v33 = v1[52];
    uint64_t v32 = (void *)v1[53];
    uint64_t v34 = v1[50];
    uint64_t v35 = v1[51];
    uint64_t v36 = (void *)v1[32];
    (*(void (**)(uint64_t))(*(void *)v1[36] + 808))(v31);
    uint64_t v37 = v1[18];
    *uint64_t v36 = v1[17];
    v36[1] = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x24C5D3C50](v34, -1, -1);
    MEMORY[0x24C5D3C50](v35, -1, -1);
    MEMORY[0x24C5D3C50](v33, -1, -1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v38 = (uint64_t (*)(void))v1[1];
    return v38();
  }
  v236 = (const uint8_t *)(v1 + 63);
  v239 = v1 + 23;
  v234 = v1 + 24;
  v235 = v1 + 22;
  v238 = v1 + 25;
  v241 = v1 + 28;
  v242 = v1 + 21;
  uint64_t v39 = v1 + 29;
  v240 = v1 + 31;
  while (1)
  {
    v1[55] = v30;
    uint64_t v42 = v1[53];
    sub_24B4EC0AC(v1[33] + 40 * v30 + 32, v27);
    if (v42)
    {
      id v40 = (id)v1[53];
      swift_willThrow();
      uint64_t v41 = (void *)v1[53];
      sub_24B5255A0(v27, v41);

      __swift_destroy_boxed_opaque_existential_1(v27);
      goto LABEL_20;
    }
    uint64_t v43 = v1[47];
    sub_24B4EC0AC(v27, (uint64_t)(v1 + 7));
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6B10);
    int v44 = swift_dynamicCast();
    IOHIDValueRef v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
    if (v44) {
      break;
    }
    uint64_t v46 = v1[45];
    uint64_t v47 = v1[39];
    v45(v46, 1, 1, v1[46]);
    sub_24B4E73E4(v46, &qword_2697C6B08);
    sub_24B4EC0AC(v27, (uint64_t)(v1 + 12));
    int v48 = swift_dynamicCast();
    char v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
    if (v48)
    {
      uint64_t v210 = v1[41];
      uint64_t v211 = v1[37];
      uint64_t v212 = v1[38];
      v49(v211, 0, 1, v212);
      sub_24B531720(v211, v210, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
      uint64_t v214 = *(void *)(v210 + *(int *)(v212 + 20));
      uint64_t v215 = *(void *)(v214 + 16);
      uint64_t v216 = MEMORY[0x263F8EE78];
      if (v215)
      {
        *uint64_t v39 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_24B534C20();
        uint64_t v217 = 128;
        uint64_t v218 = v237;
        do
        {
          id v219 = *(id *)(v214 + v217);
          sub_24B534C00();
          sub_24B534C30();
          sub_24B534C40();
          sub_24B534C10();
          v217 += 128;
          --v215;
        }
        while (v215);
        uint64_t v216 = *v39;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v218 = v237;
      }
      v1[59] = v216;
      uint64_t v230 = v1[51];
      uint64_t v229 = v1[52];
      uint64_t v231 = v1[49];
      uint64_t v223 = v1[36];
      uint64_t v224 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v213, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
      v225 = (void *)swift_task_alloc();
      v1[60] = v225;
      v225[2] = v230;
      v225[3] = v223;
      v225[4] = v216;
      v225[5] = v229;
      v225[6] = v231;
      v232 = (void *)swift_task_alloc();
      v1[61] = v232;
      uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B28);
      void *v232 = v1;
      v232[1] = sub_24B528A40;
      uint64_t v227 = v233;
      uint64_t v228 = sub_24B5317A0;
      v226 = v218;
      goto LABEL_169;
    }
    uint64_t v50 = v1[37];
    v49(v50, 1, 1, v1[38]);
    __swift_destroy_boxed_opaque_existential_1(v27);
    sub_24B4E73E4(v50, &qword_2697C6B00);
LABEL_20:
    uint64_t v30 = v1[55] + 1;
    if (v30 == v1[54]) {
      goto LABEL_15;
    }
  }
  uint64_t v51 = v1[48];
  uint64_t v52 = v1[45];
  uint64_t v53 = v1[46];
  v45(v52, 0, 1, v53);
  sub_24B531720(v52, v51, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  v1[21] = MEMORY[0x263F8EE80];
  uint64_t v55 = *(void *)(v51 + *(int *)(v53 + 20));
  uint64_t v56 = *(void *)(v55 + 16);
  uint64_t v57 = v1 + 21;
  if (!v56)
  {
LABEL_166:
    uint64_t v220 = v1[50];
    uint64_t v221 = v1[49];
    uint64_t v222 = v1[48];
    uint64_t v223 = v1[36];
    uint64_t v224 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v54, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
    v225 = (void *)swift_task_alloc();
    v1[56] = v225;
    v225[2] = v220;
    v225[3] = v223;
    v225[4] = v57;
    v225[5] = v221;
    v225[6] = v1 + 17;
    v225[7] = v222;
    v226 = (void *)swift_task_alloc();
    v1[57] = v226;
    void *v226 = v1;
    v226[1] = sub_24B527410;
    uint64_t v227 = MEMORY[0x263F8EE60] + 8;
    uint64_t v228 = sub_24B531D7C;
LABEL_169:
    return MEMORY[0x270FA2360](v226, v223, v224, 0xD00000000000001ALL, 0x800000024B53D560, v228, v225, v227);
  }
  uint64_t v58 = v1[43];
  uint64_t v59 = v55 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
  uint64_t v244 = *(void *)(v58 + 72);
  swift_bridgeObjectRetain();
  while (2)
  {
    uint64_t v61 = v1[44];
    uint64_t v62 = v1[42];
    sub_24B52E018(v59, v61, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
    uint64_t v63 = v61 + *(int *)(v62 + 24);
    uint64_t v64 = *(void *)v63;
    unint64_t v65 = *(void *)(v63 + 8);
    switch(v65 >> 62)
    {
      case 1uLL:
        if ((int)v64 > v64 >> 32) {
          goto LABEL_175;
        }
        sub_24B4E5538(*(void *)v63, *(void *)(v63 + 8));
        uint64_t v84 = (const uint8_t *)sub_24B534710();
        uint64_t v243 = v56;
        if (!v84) {
          goto LABEL_46;
        }
        uint64_t v85 = sub_24B534740();
        if (__OFSUB__((int)v64, v85)) {
          goto LABEL_180;
        }
        v84 += (int)v64 - v85;
LABEL_46:
        uint64_t v86 = v1[44];
        sub_24B534730();
        IOHIDValueRef v87 = (__IOHIDElement *)*(id *)(v86 + 96);
        uint64_t v88 = sub_24B51B714();
        if (!v84) {
          goto LABEL_197;
        }
        if (__OFSUB__(HIDWORD(v64), v64)) {
          goto LABEL_177;
        }
        IOHIDValueRef v89 = IOHIDValueCreateWithBytes(0, v87, v88, v84, HIDWORD(v64) - (int)v64);
        uint64_t v90 = *v242;
        unint64_t v91 = *v242 & 0xC000000000000001;
        if (v89)
        {
          IOHIDValueRef v92 = v89;
          if (v91)
          {
            if (v90 >= 0) {
              v90 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v93 = sub_24B534D00();
            if (__OFADD__(v93, 1)) {
              goto LABEL_187;
            }
            uint64_t *v242 = sub_24B52E8F4(v90, v93 + 1);
          }
          char v94 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v95 = *v242;
          uint64_t *v238 = *v242;
          uint64_t *v242 = 0x8000000000000000;
          unint64_t v97 = sub_24B52DAEC((uint64_t)v87);
          uint64_t v98 = *(void *)(v95 + 16);
          BOOL v99 = (v96 & 1) == 0;
          uint64_t v100 = v98 + v99;
          if (__OFADD__(v98, v99)) {
            goto LABEL_183;
          }
          char v101 = v96;
          if (*(void *)(v95 + 24) >= v100)
          {
            if ((v94 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v100, v94);
            unint64_t v102 = sub_24B52DAEC((uint64_t)v87);
            if ((v101 & 1) != (v103 & 1)) {
              goto LABEL_172;
            }
            unint64_t v97 = v102;
          }
          char v182 = (void *)*v238;
          if (v101)
          {
            uint64_t v183 = v182[7];

            *(void *)(v183 + 8 * v97) = v92;
          }
          else
          {
            v182[(v97 >> 6) + 8] |= 1 << v97;
            uint64_t v186 = 8 * v97;
            *(void *)(v182[6] + v186) = v87;
            *(void *)(v182[7] + v186) = v92;
            uint64_t v187 = v182[2];
            BOOL v25 = __OFADD__(v187, 1);
            uint64_t v188 = v187 + 1;
            if (v25) {
              goto LABEL_191;
            }
            v182[2] = v188;
            uint64_t v189 = v87;
          }
          uint64_t *v242 = (uint64_t)v182;

          uint64_t v57 = v1 + 21;
          goto LABEL_137;
        }
        if (v91)
        {
          if (v90 < 0) {
            uint64_t v164 = *v242;
          }
          else {
            uint64_t v164 = v90 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v165 = v87;
          swift_bridgeObjectRetain();
          uint64_t v166 = sub_24B534D30();

          if (v166)
          {
            swift_unknownObjectRelease();
            uint64_t v167 = sub_24B534D00();
            uint64_t v168 = sub_24B52E8F4(v164, v167);
            swift_retain();
            unint64_t v169 = sub_24B52DAEC((uint64_t)v165);
            char v171 = v170;
            swift_release();
            uint64_t v57 = v1 + 21;
            uint64_t v56 = v243;
            if ((v171 & 1) == 0) {
              goto LABEL_195;
            }

            char v172 = *(void **)(*(void *)(v168 + 56) + 8 * v169);
            sub_24B52F9E8(v169, v168);
            uint64_t *v242 = v168;

            swift_bridgeObjectRelease();
            sub_24B4E5590(v64, v65);
            goto LABEL_30;
          }

          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v204 = sub_24B52DAEC((uint64_t)v87);
          char v206 = v205;
          swift_bridgeObjectRelease();
          if (v206)
          {
            uint64_t v57 = v1 + 21;
            char v207 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v208 = *v242;
            uint64_t *v234 = *v242;
            uint64_t *v242 = 0x8000000000000000;
            if ((v207 & 1) == 0)
            {
              sub_24B53059C();
              uint64_t v208 = *v234;
            }

            uint64_t v209 = *(void **)(*(void *)(v208 + 56) + 8 * v204);
            sub_24B52F9E8(v204, v208);
            uint64_t *v242 = v208;

LABEL_137:
            swift_bridgeObjectRelease();
            sub_24B4E5590(v64, v65);
            goto LABEL_29;
          }
        }
        sub_24B4E5590(v64, v65);
LABEL_158:
        uint64_t v57 = v1 + 21;
LABEL_29:
        uint64_t v56 = v243;
        goto LABEL_30;
      case 2uLL:
        uint64_t v104 = *(void *)(v64 + 16);
        swift_retain();
        swift_retain();
        uint64_t v105 = (const uint8_t *)sub_24B534710();
        uint64_t v243 = v56;
        if (!v105) {
          goto LABEL_61;
        }
        uint64_t v106 = sub_24B534740();
        if (__OFSUB__(v104, v106)) {
          goto LABEL_178;
        }
        v105 += v104 - v106;
LABEL_61:
        uint64_t v107 = v1[44];
        sub_24B534730();
        unint64_t v108 = (__IOHIDElement *)*(id *)(v107 + 96);
        uint64_t v109 = sub_24B51B714();
        if (!v105)
        {
          __break(1u);
LABEL_197:
          __break(1u);
          JUMPOUT(0x24B52A244);
        }
        uint64_t v111 = *(void *)(v64 + 16);
        uint64_t v110 = *(void *)(v64 + 24);
        if (__OFSUB__(v110, v111)) {
          goto LABEL_176;
        }
        IOHIDValueRef v112 = IOHIDValueCreateWithBytes(0, v108, v109, v105, v110 - v111);
        uint64_t v113 = *v242;
        unint64_t v114 = *v242 & 0xC000000000000001;
        if (v112)
        {
          IOHIDValueRef v115 = v112;
          if (v114)
          {
            if (v113 >= 0) {
              v113 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v116 = sub_24B534D00();
            if (__OFADD__(v116, 1)) {
              goto LABEL_186;
            }
            uint64_t *v242 = sub_24B52E8F4(v113, v116 + 1);
          }
          char v117 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v118 = *v242;
          uint64_t *v239 = *v242;
          uint64_t *v242 = 0x8000000000000000;
          unint64_t v120 = sub_24B52DAEC((uint64_t)v108);
          uint64_t v121 = *(void *)(v118 + 16);
          BOOL v122 = (v119 & 1) == 0;
          uint64_t v123 = v121 + v122;
          if (__OFADD__(v121, v122)) {
            goto LABEL_182;
          }
          char v124 = v119;
          if (*(void *)(v118 + 24) >= v123)
          {
            if ((v117 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v123, v117);
            unint64_t v125 = sub_24B52DAEC((uint64_t)v108);
            if ((v124 & 1) != (v126 & 1)) {
              goto LABEL_172;
            }
            unint64_t v120 = v125;
          }
          BOOL v178 = (void *)*v239;
          if (v124)
          {
            uint64_t v60 = v178[7];

            *(void *)(v60 + 8 * v120) = v115;
          }
          else
          {
            v178[(v120 >> 6) + 8] |= 1 << v120;
            *(void *)(v178[6] + 8 * v120) = v108;
            *(void *)(v178[7] + 8 * v120) = v115;
            uint64_t v179 = v178[2];
            BOOL v25 = __OFADD__(v179, 1);
            uint64_t v180 = v179 + 1;
            if (v25) {
              goto LABEL_190;
            }
            v178[2] = v180;
            char v181 = v108;
          }
          uint64_t *v242 = (uint64_t)v178;
          swift_release();
          swift_release();

          uint64_t v57 = v1 + 21;
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
        if (v114)
        {
          if (v113 < 0) {
            uint64_t v155 = *v242;
          }
          else {
            uint64_t v155 = v113 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v156 = v108;
          swift_bridgeObjectRetain();
          uint64_t v157 = sub_24B534D30();

          if (!v157)
          {
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            goto LABEL_158;
          }
          swift_unknownObjectRelease();
          uint64_t v158 = sub_24B534D00();
          uint64_t v159 = sub_24B52E8F4(v155, v158);
          swift_retain();
          unint64_t v160 = sub_24B52DAEC((uint64_t)v156);
          char v162 = v161;
          swift_release();
          uint64_t v57 = v1 + 21;
          uint64_t v56 = v243;
          if ((v162 & 1) == 0) {
            goto LABEL_194;
          }

          uint64_t v163 = *(void **)(*(void *)(v159 + 56) + 8 * v160);
          sub_24B52F9E8(v160, v159);
          uint64_t *v242 = v159;
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        swift_bridgeObjectRetain();
        unint64_t v198 = sub_24B52DAEC((uint64_t)v108);
        char v200 = v199;
        swift_bridgeObjectRelease();
        if ((v200 & 1) == 0)
        {
          swift_release();
          swift_release();

          goto LABEL_158;
        }
        uint64_t v57 = v1 + 21;
        char v201 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v202 = *v242;
        uint64_t *v235 = *v242;
        uint64_t *v242 = 0x8000000000000000;
        if ((v201 & 1) == 0)
        {
          sub_24B53059C();
          uint64_t v202 = *v235;
        }

        uint64_t v203 = *(void **)(*(void *)(v202 + 56) + 8 * v198);
        sub_24B52F9E8(v198, v202);
        uint64_t *v242 = v202;
        swift_release();

        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_29;
      case 3uLL:
        uint64_t v127 = v1[44];
        *(void *)v236 = 0;
        *(void *)((char *)v1 + 510) = 0;
        uint64_t v67 = (__IOHIDElement *)*(id *)(v127 + 96);
        uint64_t v128 = sub_24B51B714();
        IOHIDValueRef v129 = IOHIDValueCreateWithBytes(0, v67, v128, v236, 0);
        uint64_t v130 = v1[21];
        unint64_t v131 = v130 & 0xC000000000000001;
        if (!v129)
        {
          if (!v131)
          {
            swift_bridgeObjectRetain();
            unint64_t v147 = sub_24B52DAEC((uint64_t)v67);
            char v195 = v194;
            swift_bridgeObjectRelease();
            if ((v195 & 1) == 0)
            {
LABEL_144:

              goto LABEL_30;
            }
            char v196 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v146 = *v57;
            v1[30] = *v57;
            uint64_t *v57 = 0x8000000000000000;
            if ((v196 & 1) == 0)
            {
              uint64_t v193 = v1 + 30;
LABEL_160:
              sub_24B53059C();
              uint64_t v146 = *v193;
            }
            goto LABEL_143;
          }
          if (v130 < 0) {
            uint64_t v150 = v1[21];
          }
          else {
            uint64_t v150 = v130 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v67 = v67;
          swift_bridgeObjectRetain();
          uint64_t v151 = sub_24B534D30();

          if (v151)
          {
            swift_unknownObjectRelease();
            uint64_t v152 = sub_24B534D00();
            uint64_t v146 = sub_24B52E8F4(v150, v152);
            swift_retain();
            unint64_t v147 = sub_24B52DAEC((uint64_t)v67);
            char v154 = v153;
            swift_release();
            if ((v154 & 1) == 0) {
              goto LABEL_193;
            }
LABEL_143:

            uint64_t v197 = *(void **)(*(void *)(v146 + 56) + 8 * v147);
            sub_24B52F9E8(v147, v146);
            uint64_t *v57 = v146;

            swift_bridgeObjectRelease();
            goto LABEL_30;
          }
LABEL_133:

          swift_bridgeObjectRelease();
LABEL_30:
          sub_24B52E080(v1[44], (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
          v59 += v244;
          if (!--v56)
          {
            swift_bridgeObjectRelease();
            goto LABEL_166;
          }
          continue;
        }
        IOHIDValueRef v72 = v129;
        if (v131)
        {
          if (v130 >= 0) {
            v130 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          uint64_t v132 = sub_24B534D00();
          if (__OFADD__(v132, 1)) {
            goto LABEL_185;
          }
          uint64_t *v57 = sub_24B52E8F4(v130, v132 + 1);
        }
        char v133 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v134 = *v57;
        uint64_t *v240 = *v57;
        uint64_t *v57 = 0x8000000000000000;
        unint64_t v136 = sub_24B52DAEC((uint64_t)v67);
        uint64_t v137 = *(void *)(v134 + 16);
        BOOL v138 = (v135 & 1) == 0;
        uint64_t v139 = v137 + v138;
        if (__OFADD__(v137, v138)) {
          goto LABEL_181;
        }
        char v140 = v135;
        if (*(void *)(v134 + 24) >= v139)
        {
          if ((v133 & 1) == 0) {
            sub_24B53059C();
          }
          goto LABEL_119;
        }
        sub_24B52F6A4(v139, v133);
        unint64_t v141 = sub_24B52DAEC((uint64_t)v67);
        if ((v140 & 1) == (v142 & 1))
        {
          unint64_t v136 = v141;
          uint64_t v57 = v1 + 21;
LABEL_119:
          uint64_t v173 = (void *)*v240;
          uint64_t v174 = 8 * v136;
          if (v140)
          {
LABEL_120:
            uint64_t v177 = v173[7];

            *(void *)(v177 + v174) = v72;
          }
          else
          {
            v173[(v136 >> 6) + 8] |= 1 << v136;
            *(void *)(v173[6] + 8 * v136) = v67;
            *(void *)(v173[7] + 8 * v136) = v72;
            uint64_t v184 = v173[2];
            BOOL v25 = __OFADD__(v184, 1);
            uint64_t v176 = v184 + 1;
            if (v25) {
              goto LABEL_189;
            }
LABEL_131:
            v173[2] = v176;
            unint64_t v185 = v67;
          }
          uint64_t *v57 = (uint64_t)v173;
          goto LABEL_133;
        }
LABEL_172:
        type metadata accessor for IOHIDElement();
LABEL_4:
        return sub_24B534E00();
      default:
        uint64_t v66 = v1[44];
        *(void *)((char *)v1 + 518) = v64;
        *((_WORD *)v1 + 263) = v65;
        *((unsigned char *)v1 + 528) = BYTE2(v65);
        *((unsigned char *)v1 + 529) = BYTE3(v65);
        *((unsigned char *)v1 + 530) = BYTE4(v65);
        *((unsigned char *)v1 + 531) = BYTE5(v65);
        uint64_t v67 = (__IOHIDElement *)*(id *)(v66 + 96);
        uint64_t v68 = sub_24B51B714();
        IOHIDValueRef v69 = IOHIDValueCreateWithBytes(0, v67, v68, (const uint8_t *)v1 + 518, BYTE6(v65));
        uint64_t v70 = v1[21];
        unint64_t v71 = v70 & 0xC000000000000001;
        if (!v69)
        {
          if (v71)
          {
            if (v70 < 0) {
              uint64_t v143 = v1[21];
            }
            else {
              uint64_t v143 = v70 & 0xFFFFFFFFFFFFFF8;
            }
            uint64_t v67 = v67;
            swift_bridgeObjectRetain();
            uint64_t v144 = sub_24B534D30();

            if (!v144) {
              goto LABEL_133;
            }
            swift_unknownObjectRelease();
            uint64_t v145 = sub_24B534D00();
            uint64_t v146 = sub_24B52E8F4(v143, v145);
            swift_retain();
            unint64_t v147 = sub_24B52DAEC((uint64_t)v67);
            char v149 = v148;
            swift_release();
            if ((v149 & 1) == 0) {
              goto LABEL_192;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            unint64_t v147 = sub_24B52DAEC((uint64_t)v67);
            char v191 = v190;
            swift_bridgeObjectRelease();
            if ((v191 & 1) == 0) {
              goto LABEL_144;
            }
            char v192 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v146 = *v57;
            v1[27] = *v57;
            uint64_t *v57 = 0x8000000000000000;
            if ((v192 & 1) == 0)
            {
              uint64_t v193 = v1 + 27;
              goto LABEL_160;
            }
          }
          goto LABEL_143;
        }
        IOHIDValueRef v72 = v69;
        if (v71)
        {
          if (v70 >= 0) {
            v70 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          uint64_t v73 = sub_24B534D00();
          if (__OFADD__(v73, 1)) {
            goto LABEL_184;
          }
          uint64_t *v57 = sub_24B52E8F4(v70, v73 + 1);
        }
        char v74 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v75 = *v57;
        uint64_t *v241 = *v57;
        uint64_t *v57 = 0x8000000000000000;
        unint64_t v77 = sub_24B52DAEC((uint64_t)v67);
        uint64_t v78 = *(void *)(v75 + 16);
        BOOL v79 = (v76 & 1) == 0;
        uint64_t v80 = v78 + v79;
        if (__OFADD__(v78, v79)) {
          goto LABEL_179;
        }
        char v81 = v76;
        if (*(void *)(v75 + 24) >= v80)
        {
          if ((v74 & 1) == 0) {
            sub_24B53059C();
          }
        }
        else
        {
          sub_24B52F6A4(v80, v74);
          unint64_t v82 = sub_24B52DAEC((uint64_t)v67);
          if ((v81 & 1) != (v83 & 1)) {
            goto LABEL_172;
          }
          unint64_t v77 = v82;
          uint64_t v57 = v1 + 21;
        }
        uint64_t v173 = (void *)*v241;
        uint64_t v174 = 8 * v77;
        if ((v81 & 1) == 0)
        {
          v173[(v77 >> 6) + 8] |= 1 << v77;
          *(void *)(v173[6] + 8 * v77) = v67;
          *(void *)(v173[7] + 8 * v77) = v72;
          uint64_t v175 = v173[2];
          BOOL v25 = __OFADD__(v175, 1);
          uint64_t v176 = v175 + 1;
          if (v25) {
            goto LABEL_188;
          }
          goto LABEL_131;
        }
        goto LABEL_120;
    }
  }
}

uint64_t sub_24B52A254()
{
  sub_24B52E080(*(void *)(v0 + 384), type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  uint64_t v1 = (uint64_t *)(v0 + 168);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(v0 + 464);
  sub_24B5255A0(v0 + 16, v2);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 440) + 1;
  if (v3 == *(void *)(v0 + 432))
  {
LABEL_2:
    uint64_t v4 = swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 416);
    uint64_t v5 = *(void **)(v0 + 424);
    uint64_t v8 = *(void *)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 408);
    char v9 = *(void **)(v0 + 256);
    (*(void (**)(uint64_t))(**(void **)(v0 + 288) + 808))(v4);
    uint64_t v10 = *(void *)(v0 + 144);
    void *v9 = *(void *)(v0 + 136);
    v9[1] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x24C5D3C50](v8, -1, -1);
    MEMORY[0x24C5D3C50](v7, -1, -1);
    MEMORY[0x24C5D3C50](v6, -1, -1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  uint64_t v216 = (const uint8_t *)(v0 + 504);
  uint64_t v214 = (uint64_t *)(v0 + 192);
  uint64_t v215 = (uint64_t *)(v0 + 176);
  uint64_t v217 = (uint64_t *)(v0 + 200);
  uint64_t v218 = (uint64_t *)(v0 + 184);
  uint64_t v13 = (uint64_t *)(v0 + 232);
  id v219 = (uint64_t *)(v0 + 248);
  uint64_t v220 = (uint64_t *)(v0 + 224);
  uint64_t v223 = (void *)(v0 + 168);
  while (1)
  {
    while (1)
    {
      *(void *)(v0 + 440) = v3;
      uint64_t v16 = *(void *)(v0 + 424);
      sub_24B4EC0AC(*(void *)(v0 + 264) + 40 * v3 + 32, v0 + 16);
      if (!v16) {
        break;
      }
      id v14 = *(id *)(v0 + 424);
      swift_willThrow();
      uint64_t v15 = *(void **)(v0 + 424);
      sub_24B5255A0(v0 + 16, v15);

      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      uint64_t v3 = *(void *)(v0 + 440) + 1;
      if (v3 == *(void *)(v0 + 432)) {
        goto LABEL_2;
      }
    }
    uint64_t v17 = *(void *)(v0 + 376);
    sub_24B4EC0AC(v0 + 16, v0 + 56);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6B10);
    int v18 = swift_dynamicCast();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    if (v18) {
      break;
    }
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 312);
    v19(v20, 1, 1, *(void *)(v0 + 368));
    sub_24B4E73E4(v20, &qword_2697C6B08);
    sub_24B4EC0AC(v0 + 16, v0 + 96);
    int v22 = swift_dynamicCast();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    if (v22)
    {
      uint64_t v191 = *(void *)(v0 + 328);
      uint64_t v193 = *(void *)(v0 + 296);
      uint64_t v192 = *(void *)(v0 + 304);
      v23(v193, 0, 1, v192);
      sub_24B531720(v193, v191, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
      uint64_t v195 = *(void *)(v191 + *(int *)(v192 + 20));
      uint64_t v196 = *(void *)(v195 + 16);
      uint64_t v197 = MEMORY[0x263F8EE78];
      if (v196)
      {
        *uint64_t v13 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_24B534C20();
        uint64_t v198 = 128;
        do
        {
          id v199 = *(id *)(v195 + v198);
          sub_24B534C00();
          sub_24B534C30();
          sub_24B534C40();
          sub_24B534C10();
          v198 += 128;
          --v196;
        }
        while (v196);
        uint64_t v197 = *v13;
        swift_bridgeObjectRelease();
      }
      *(void *)(v0 + 472) = v197;
      uint64_t v201 = *(void *)(v0 + 408);
      uint64_t v200 = *(void *)(v0 + 416);
      uint64_t v202 = *(void *)(v0 + 392);
      uint64_t v203 = *(void *)(v0 + 288);
      uint64_t v204 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v194, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
      char v205 = (void *)swift_task_alloc();
      *(void *)(v0 + 480) = v205;
      v205[2] = v201;
      v205[3] = v203;
      v205[4] = v197;
      v205[5] = v200;
      v205[6] = v202;
      char v206 = (void *)swift_task_alloc();
      *(void *)(v0 + 488) = v206;
      uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B28);
      *char v206 = v0;
      v206[1] = sub_24B528A40;
      uint64_t v208 = v207;
      uint64_t v209 = (void *)(v0 + 208);
      uint64_t v210 = sub_24B5317A0;
      goto LABEL_157;
    }
    uint64_t v24 = *(void *)(v0 + 296);
    v23(v24, 1, 1, *(void *)(v0 + 304));
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    sub_24B4E73E4(v24, &qword_2697C6B00);
    uint64_t v3 = *(void *)(v0 + 440) + 1;
    uint64_t v1 = (uint64_t *)(v0 + 168);
    if (v3 == *(void *)(v0 + 432)) {
      goto LABEL_2;
    }
  }
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v27 = *(void *)(v0 + 360);
  uint64_t v26 = *(void *)(v0 + 368);
  v19(v27, 0, 1, v26);
  sub_24B531720(v27, v25, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  *(void *)(v0 + 168) = MEMORY[0x263F8EE80];
  uint64_t v29 = *(void *)(v25 + *(int *)(v26 + 20));
  uint64_t v30 = *(void *)(v29 + 16);
  if (!v30)
  {
LABEL_156:
    uint64_t v211 = *(void *)(v0 + 400);
    uint64_t v212 = *(void *)(v0 + 392);
    uint64_t v213 = *(void *)(v0 + 384);
    uint64_t v203 = *(void *)(v0 + 288);
    uint64_t v204 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v28, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
    char v205 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v205;
    v205[2] = v211;
    v205[3] = v203;
    v205[4] = v1;
    v205[5] = v212;
    v205[6] = v0 + 136;
    v205[7] = v213;
    uint64_t v209 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v209;
    *uint64_t v209 = v0;
    v209[1] = sub_24B527410;
    uint64_t v208 = MEMORY[0x263F8EE60] + 8;
    uint64_t v210 = sub_24B531D7C;
LABEL_157:
    return MEMORY[0x270FA2360](v209, v203, v204, 0xD00000000000001ALL, 0x800000024B53D560, v210, v205, v208);
  }
  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v32 = v29 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  uint64_t v222 = *(void *)(v31 + 72);
  swift_bridgeObjectRetain();
  while (2)
  {
    uint64_t v34 = *(void *)(v0 + 352);
    uint64_t v35 = *(void *)(v0 + 336);
    sub_24B52E018(v32, v34, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
    uint64_t v36 = v34 + *(int *)(v35 + 24);
    uint64_t v37 = *(void *)v36;
    unint64_t v38 = *(void *)(v36 + 8);
    switch(v38 >> 62)
    {
      case 1uLL:
        if ((int)v37 > v37 >> 32)
        {
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
        }
        sub_24B4E5538(*(void *)v36, *(void *)(v36 + 8));
        uint64_t v57 = (const uint8_t *)sub_24B534710();
        uint64_t v221 = v30;
        if (v57)
        {
          uint64_t v58 = sub_24B534740();
          if (__OFSUB__((int)v37, v58)) {
            goto LABEL_168;
          }
          v57 += (int)v37 - v58;
        }
        uint64_t v59 = *(void *)(v0 + 352);
        sub_24B534730();
        uint64_t v60 = (__IOHIDElement *)*(id *)(v59 + 96);
        uint64_t v61 = sub_24B51B714();
        if (!v57)
        {
          __break(1u);
LABEL_185:
          __break(1u);
          JUMPOUT(0x24B52B724);
        }
        if (__OFSUB__(HIDWORD(v37), v37)) {
          goto LABEL_165;
        }
        IOHIDValueRef v62 = IOHIDValueCreateWithBytes(0, v60, v61, v57, HIDWORD(v37) - (int)v37);
        uint64_t v63 = *v1;
        unint64_t v64 = *v1 & 0xC000000000000001;
        if (v62)
        {
          IOHIDValueRef v65 = v62;
          if (v64)
          {
            if (v63 >= 0) {
              v63 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v66 = sub_24B534D00();
            if (__OFADD__(v66, 1)) {
              goto LABEL_175;
            }
            uint64_t *v1 = sub_24B52E8F4(v63, v66 + 1);
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v68 = v1;
          char v69 = isUniquelyReferenced_nonNull_native;
          uint64_t v70 = *v68;
          *uint64_t v217 = *v68;
          *uint64_t v68 = 0x8000000000000000;
          unint64_t v72 = sub_24B52DAEC((uint64_t)v60);
          uint64_t v73 = *(void *)(v70 + 16);
          BOOL v74 = (v71 & 1) == 0;
          uint64_t v75 = v73 + v74;
          if (__OFADD__(v73, v74)) {
            goto LABEL_171;
          }
          char v76 = v71;
          if (*(void *)(v70 + 24) >= v75)
          {
            if ((v69 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v75, v69);
            unint64_t v77 = sub_24B52DAEC((uint64_t)v60);
            if ((v76 & 1) != (v78 & 1)) {
              goto LABEL_160;
            }
            unint64_t v72 = v77;
          }
          char v161 = (void *)*v217;
          if (v76)
          {
            uint64_t v162 = v161[7];

            *(void *)(v162 + 8 * v72) = v65;
          }
          else
          {
            v161[(v72 >> 6) + 8] |= 1 << v72;
            uint64_t v165 = 8 * v72;
            *(void *)(v161[6] + v165) = v60;
            *(void *)(v161[7] + v165) = v65;
            uint64_t v166 = v161[2];
            BOOL v154 = __OFADD__(v166, 1);
            uint64_t v167 = v166 + 1;
            if (v154) {
              goto LABEL_179;
            }
            v161[2] = v167;
            uint64_t v168 = v60;
          }
          void *v223 = v161;
          uint64_t v1 = (uint64_t *)(v0 + 168);

LABEL_126:
          swift_bridgeObjectRelease();
          goto LABEL_127;
        }
        if (!v64)
        {
          swift_bridgeObjectRetain();
          unint64_t v185 = sub_24B52DAEC((uint64_t)v60);
          char v187 = v186;
          swift_bridgeObjectRelease();
          if (v187)
          {
            char v188 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v189 = *v1;
            *uint64_t v214 = *v1;
            uint64_t *v1 = 0x8000000000000000;
            if ((v188 & 1) == 0)
            {
              sub_24B53059C();
              uint64_t v189 = *v214;
            }

            char v190 = *(void **)(*(void *)(v189 + 56) + 8 * v185);
            sub_24B52F9E8(v185, v189);
            uint64_t *v1 = v189;

            goto LABEL_126;
          }

LABEL_127:
          sub_24B4E5590(v37, v38);
          goto LABEL_17;
        }
        if (v63 < 0) {
          uint64_t v142 = *v1;
        }
        else {
          uint64_t v142 = v63 & 0xFFFFFFFFFFFFFF8;
        }
        uint64_t v143 = v60;
        swift_bridgeObjectRetain();
        uint64_t v144 = sub_24B534D30();

        if (!v144)
        {

          goto LABEL_126;
        }
        swift_unknownObjectRelease();
        uint64_t v145 = sub_24B534D00();
        uint64_t v146 = sub_24B52E8F4(v142, v145);
        swift_retain();
        unint64_t v147 = sub_24B52DAEC((uint64_t)v143);
        char v149 = v148;
        swift_release();
        uint64_t v30 = v221;
        if ((v149 & 1) == 0) {
          goto LABEL_183;
        }

        uint64_t v150 = *(void **)(*(void *)(v146 + 56) + 8 * v147);
        sub_24B52F9E8(v147, v146);
        uint64_t *v1 = v146;

        swift_bridgeObjectRelease();
        sub_24B4E5590(v37, v38);
        goto LABEL_18;
      case 2uLL:
        uint64_t v79 = *(void *)(v37 + 16);
        swift_retain();
        swift_retain();
        uint64_t v80 = (const uint8_t *)sub_24B534710();
        uint64_t v221 = v30;
        if (!v80) {
          goto LABEL_49;
        }
        uint64_t v81 = sub_24B534740();
        if (__OFSUB__(v79, v81)) {
          goto LABEL_166;
        }
        v80 += v79 - v81;
LABEL_49:
        uint64_t v82 = *(void *)(v0 + 352);
        sub_24B534730();
        char v83 = (__IOHIDElement *)*(id *)(v82 + 96);
        uint64_t v84 = sub_24B51B714();
        if (!v80) {
          goto LABEL_185;
        }
        uint64_t v86 = *(void *)(v37 + 16);
        uint64_t v85 = *(void *)(v37 + 24);
        if (__OFSUB__(v85, v86)) {
          goto LABEL_164;
        }
        IOHIDValueRef v87 = IOHIDValueCreateWithBytes(0, v83, v84, v80, v85 - v86);
        uint64_t v88 = *v1;
        unint64_t v89 = *v1 & 0xC000000000000001;
        if (v87)
        {
          IOHIDValueRef v90 = v87;
          if (v89)
          {
            if (v88 >= 0) {
              v88 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v91 = sub_24B534D00();
            if (__OFADD__(v91, 1)) {
              goto LABEL_174;
            }
            uint64_t *v1 = sub_24B52E8F4(v88, v91 + 1);
          }
          char v92 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v93 = v1;
          char v94 = v92;
          uint64_t v95 = *v93;
          *uint64_t v218 = *v93;
          *uint64_t v93 = 0x8000000000000000;
          unint64_t v97 = sub_24B52DAEC((uint64_t)v83);
          uint64_t v98 = *(void *)(v95 + 16);
          BOOL v99 = (v96 & 1) == 0;
          uint64_t v100 = v98 + v99;
          if (__OFADD__(v98, v99)) {
            goto LABEL_170;
          }
          char v101 = v96;
          if (*(void *)(v95 + 24) >= v100)
          {
            if ((v94 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v100, v94);
            unint64_t v102 = sub_24B52DAEC((uint64_t)v83);
            if ((v101 & 1) != (v103 & 1)) {
              goto LABEL_160;
            }
            unint64_t v97 = v102;
          }
          uint64_t v157 = (void *)*v218;
          if (v101)
          {
            uint64_t v33 = v157[7];

            *(void *)(v33 + 8 * v97) = v90;
          }
          else
          {
            v157[(v97 >> 6) + 8] |= 1 << v97;
            *(void *)(v157[6] + 8 * v97) = v83;
            *(void *)(v157[7] + 8 * v97) = v90;
            uint64_t v158 = v157[2];
            BOOL v154 = __OFADD__(v158, 1);
            uint64_t v159 = v158 + 1;
            if (v154) {
              goto LABEL_178;
            }
            v157[2] = v159;
            unint64_t v160 = v83;
          }
          void *v223 = v157;
          uint64_t v1 = (uint64_t *)(v0 + 168);
          swift_release();
          swift_release();

          goto LABEL_16;
        }
        if (!v89)
        {
          swift_bridgeObjectRetain();
          unint64_t v179 = sub_24B52DAEC((uint64_t)v83);
          char v181 = v180;
          swift_bridgeObjectRelease();
          if (v181)
          {
            char v182 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v183 = *v1;
            *uint64_t v215 = *v1;
            uint64_t *v1 = 0x8000000000000000;
            if ((v182 & 1) == 0)
            {
              sub_24B53059C();
              uint64_t v183 = *v215;
            }

            uint64_t v184 = *(void **)(*(void *)(v183 + 56) + 8 * v179);
            sub_24B52F9E8(v179, v183);
            uint64_t *v1 = v183;
            swift_release();

            swift_bridgeObjectRelease();
            swift_release();
          }
          else
          {
            swift_release();
            swift_release();
          }
LABEL_17:
          uint64_t v30 = v221;
          goto LABEL_18;
        }
        if (v88 < 0) {
          uint64_t v134 = *v1;
        }
        else {
          uint64_t v134 = v88 & 0xFFFFFFFFFFFFFF8;
        }
        uint64_t v121 = v83;
        swift_bridgeObjectRetain();
        uint64_t v135 = sub_24B534D30();

        if (!v135)
        {
          swift_release();
          swift_release();

LABEL_16:
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        swift_unknownObjectRelease();
        uint64_t v136 = sub_24B534D00();
        uint64_t v137 = sub_24B52E8F4(v134, v136);
        swift_retain();
        unint64_t v138 = sub_24B52DAEC((uint64_t)v121);
        char v140 = v139;
        swift_release();
        uint64_t v30 = v221;
        if ((v140 & 1) == 0) {
          goto LABEL_182;
        }

        unint64_t v141 = *(void **)(*(void *)(v137 + 56) + 8 * v138);
        sub_24B52F9E8(v138, v137);
        uint64_t *v1 = v137;
        swift_release();
        swift_release();

        goto LABEL_92;
      case 3uLL:
        uint64_t v104 = *(void *)(v0 + 352);
        *(void *)uint64_t v216 = 0;
        *(void *)(v0 + 510) = 0;
        id v40 = (__IOHIDElement *)*(id *)(v104 + 96);
        uint64_t v105 = sub_24B51B714();
        IOHIDValueRef v106 = IOHIDValueCreateWithBytes(0, v40, v105, v216, 0);
        uint64_t v107 = *(void *)(v0 + 168);
        unint64_t v108 = v107 & 0xC000000000000001;
        if (!v106)
        {
          if (!v108)
          {
            swift_bridgeObjectRetain();
            unint64_t v169 = sub_24B52DAEC((uint64_t)v40);
            char v176 = v175;
            swift_bridgeObjectRelease();
            if (v176)
            {
              char v177 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v173 = *v1;
              *(void *)(v0 + 240) = *v1;
              uint64_t *v1 = 0x8000000000000000;
              if ((v177 & 1) == 0)
              {
                uint64_t v174 = (uint64_t *)(v0 + 240);
LABEL_149:
                sub_24B53059C();
                uint64_t v173 = *v174;
              }
LABEL_134:

              BOOL v178 = *(void **)(*(void *)(v173 + 56) + 8 * v169);
              sub_24B52F9E8(v169, v173);
              uint64_t *v1 = v173;

              swift_bridgeObjectRelease();
            }
            else
            {
LABEL_135:
            }
            goto LABEL_18;
          }
          if (v107 < 0) {
            uint64_t v128 = *(void *)(v0 + 168);
          }
          else {
            uint64_t v128 = v107 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v121 = v40;
          swift_bridgeObjectRetain();
          uint64_t v129 = sub_24B534D30();

          if (v129)
          {
            swift_unknownObjectRelease();
            uint64_t v130 = sub_24B534D00();
            uint64_t v124 = sub_24B52E8F4(v128, v130);
            swift_retain();
            unint64_t v125 = sub_24B52DAEC((uint64_t)v121);
            char v132 = v131;
            swift_release();
            if ((v132 & 1) == 0) {
              goto LABEL_181;
            }
LABEL_84:

            char v133 = *(void **)(*(void *)(v124 + 56) + 8 * v125);
            sub_24B52F9E8(v125, v124);
            uint64_t *v1 = v124;

LABEL_92:
            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
LABEL_128:

LABEL_122:
          swift_bridgeObjectRelease();
LABEL_18:
          sub_24B52E080(*(void *)(v0 + 352), (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
          v32 += v222;
          if (!--v30)
          {
            swift_bridgeObjectRelease();
            goto LABEL_156;
          }
          continue;
        }
        IOHIDValueRef v45 = v106;
        if (v108)
        {
          if (v107 >= 0) {
            v107 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          uint64_t v109 = sub_24B534D00();
          if (__OFADD__(v109, 1)) {
            goto LABEL_173;
          }
          uint64_t *v1 = sub_24B52E8F4(v107, v109 + 1);
        }
        char v110 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v111 = *v1;
        *id v219 = *v1;
        uint64_t *v1 = 0x8000000000000000;
        unint64_t v113 = sub_24B52DAEC((uint64_t)v40);
        uint64_t v114 = *(void *)(v111 + 16);
        BOOL v115 = (v112 & 1) == 0;
        uint64_t v116 = v114 + v115;
        if (__OFADD__(v114, v115)) {
          goto LABEL_169;
        }
        char v117 = v112;
        if (*(void *)(v111 + 24) >= v116)
        {
          if ((v110 & 1) == 0) {
            sub_24B53059C();
          }
          goto LABEL_108;
        }
        sub_24B52F6A4(v116, v110);
        unint64_t v118 = sub_24B52DAEC((uint64_t)v40);
        if ((v117 & 1) == (v119 & 1))
        {
          unint64_t v113 = v118;
LABEL_108:
          uint64_t v151 = (void *)*v219;
          uint64_t v152 = 8 * v113;
          if (v117)
          {
LABEL_109:
            uint64_t v156 = v151[7];

            *(void *)(v156 + v152) = v45;
          }
          else
          {
            v151[(v113 >> 6) + 8] |= 1 << v113;
            *(void *)(v151[6] + 8 * v113) = v40;
            *(void *)(v151[7] + 8 * v113) = v45;
            uint64_t v163 = v151[2];
            BOOL v154 = __OFADD__(v163, 1);
            uint64_t v155 = v163 + 1;
            if (v154) {
              goto LABEL_177;
            }
LABEL_120:
            v151[2] = v155;
            uint64_t v164 = v40;
          }
          uint64_t *v1 = (uint64_t)v151;

          goto LABEL_122;
        }
LABEL_160:
        type metadata accessor for IOHIDElement();
        return sub_24B534E00();
      default:
        uint64_t v39 = *(void *)(v0 + 352);
        *(void *)(v0 + 518) = v37;
        *(_WORD *)(v0 + 526) = v38;
        *(unsigned char *)(v0 + 528) = BYTE2(v38);
        *(unsigned char *)(v0 + 529) = BYTE3(v38);
        *(unsigned char *)(v0 + 530) = BYTE4(v38);
        *(unsigned char *)(v0 + 531) = BYTE5(v38);
        id v40 = (__IOHIDElement *)*(id *)(v39 + 96);
        uint64_t v41 = sub_24B51B714();
        IOHIDValueRef v42 = IOHIDValueCreateWithBytes(0, v40, v41, (const uint8_t *)(v0 + 518), BYTE6(v38));
        uint64_t v43 = *(void *)(v0 + 168);
        unint64_t v44 = v43 & 0xC000000000000001;
        if (v42)
        {
          IOHIDValueRef v45 = v42;
          if (v44)
          {
            if (v43 >= 0) {
              v43 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v46 = sub_24B534D00();
            if (__OFADD__(v46, 1)) {
              goto LABEL_172;
            }
            uint64_t *v1 = sub_24B52E8F4(v43, v46 + 1);
          }
          char v47 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v48 = *v1;
          uint64_t *v220 = *v1;
          uint64_t *v1 = 0x8000000000000000;
          unint64_t v50 = sub_24B52DAEC((uint64_t)v40);
          uint64_t v51 = *(void *)(v48 + 16);
          BOOL v52 = (v49 & 1) == 0;
          uint64_t v53 = v51 + v52;
          if (__OFADD__(v51, v52)) {
            goto LABEL_167;
          }
          char v54 = v49;
          if (*(void *)(v48 + 24) >= v53)
          {
            if ((v47 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v53, v47);
            unint64_t v55 = sub_24B52DAEC((uint64_t)v40);
            if ((v54 & 1) != (v56 & 1)) {
              goto LABEL_160;
            }
            unint64_t v50 = v55;
          }
          uint64_t v151 = (void *)*v220;
          uint64_t v152 = 8 * v50;
          if ((v54 & 1) == 0)
          {
            v151[(v50 >> 6) + 8] |= 1 << v50;
            *(void *)(v151[6] + 8 * v50) = v40;
            *(void *)(v151[7] + 8 * v50) = v45;
            uint64_t v153 = v151[2];
            BOOL v154 = __OFADD__(v153, 1);
            uint64_t v155 = v153 + 1;
            if (v154) {
              goto LABEL_176;
            }
            goto LABEL_120;
          }
          goto LABEL_109;
        }
        if (!v44)
        {
          swift_bridgeObjectRetain();
          unint64_t v169 = sub_24B52DAEC((uint64_t)v40);
          char v171 = v170;
          swift_bridgeObjectRelease();
          if ((v171 & 1) == 0) {
            goto LABEL_135;
          }
          char v172 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v173 = *v1;
          *(void *)(v0 + 216) = *v1;
          uint64_t *v1 = 0x8000000000000000;
          if ((v172 & 1) == 0)
          {
            uint64_t v174 = (uint64_t *)(v0 + 216);
            goto LABEL_149;
          }
          goto LABEL_134;
        }
        if (v43 < 0) {
          uint64_t v120 = *(void *)(v0 + 168);
        }
        else {
          uint64_t v120 = v43 & 0xFFFFFFFFFFFFFF8;
        }
        uint64_t v121 = v40;
        swift_bridgeObjectRetain();
        uint64_t v122 = sub_24B534D30();

        if (!v122) {
          goto LABEL_128;
        }
        swift_unknownObjectRelease();
        uint64_t v123 = sub_24B534D00();
        uint64_t v124 = sub_24B52E8F4(v120, v123);
        swift_retain();
        unint64_t v125 = sub_24B52DAEC((uint64_t)v121);
        char v127 = v126;
        swift_release();
        if ((v127 & 1) == 0) {
          goto LABEL_180;
        }
        goto LABEL_84;
    }
  }
}

uint64_t sub_24B52B734()
{
  sub_24B52E080(*(void *)(v0 + 328), type metadata accessor for HIDDeviceClient.RequestElementUpdate);
  uint64_t v1 = *(void **)(v0 + 496);
  sub_24B5255A0(v0 + 16, v1);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 440) + 1;
  if (v2 == *(void *)(v0 + 432))
  {
LABEL_2:
    uint64_t v3 = swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(v0 + 416);
    uint64_t v4 = *(void **)(v0 + 424);
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v6 = *(void *)(v0 + 408);
    uint64_t v8 = *(void **)(v0 + 256);
    (*(void (**)(uint64_t))(**(void **)(v0 + 288) + 808))(v3);
    uint64_t v9 = *(void *)(v0 + 144);
    *uint64_t v8 = *(void *)(v0 + 136);
    v8[1] = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x24C5D3C50](v7, -1, -1);
    MEMORY[0x24C5D3C50](v6, -1, -1);
    MEMORY[0x24C5D3C50](v5, -1, -1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  uint64_t v212 = (const uint8_t *)(v0 + 504);
  uint64_t v214 = (uint64_t *)(v0 + 184);
  uint64_t v210 = (uint64_t *)(v0 + 192);
  uint64_t v211 = (uint64_t *)(v0 + 176);
  uint64_t v213 = (uint64_t *)(v0 + 200);
  uint64_t v216 = (uint64_t *)(v0 + 224);
  uint64_t v217 = (uint64_t *)(v0 + 168);
  BOOL v12 = (uint64_t *)(v0 + 232);
  uint64_t v215 = (uint64_t *)(v0 + 248);
  while (1)
  {
    while (1)
    {
      *(void *)(v0 + 440) = v2;
      uint64_t v15 = *(void *)(v0 + 424);
      sub_24B4EC0AC(*(void *)(v0 + 264) + 40 * v2 + 32, v0 + 16);
      if (!v15) {
        break;
      }
      id v13 = *(id *)(v0 + 424);
      swift_willThrow();
      id v14 = *(void **)(v0 + 424);
      sub_24B5255A0(v0 + 16, v14);

      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      uint64_t v2 = *(void *)(v0 + 440) + 1;
      if (v2 == *(void *)(v0 + 432)) {
        goto LABEL_2;
      }
    }
    uint64_t v16 = *(void *)(v0 + 376);
    sub_24B4EC0AC(v0 + 16, v0 + 56);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6B10);
    int v17 = swift_dynamicCast();
    int v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    if (v17) {
      break;
    }
    uint64_t v19 = *(void *)(v0 + 360);
    uint64_t v20 = *(void *)(v0 + 312);
    v18(v19, 1, 1, *(void *)(v0 + 368));
    sub_24B4E73E4(v19, &qword_2697C6B08);
    sub_24B4EC0AC(v0 + 16, v0 + 96);
    int v21 = swift_dynamicCast();
    int v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    if (v21)
    {
      uint64_t v187 = *(void *)(v0 + 328);
      uint64_t v189 = *(void *)(v0 + 296);
      uint64_t v188 = *(void *)(v0 + 304);
      v22(v189, 0, 1, v188);
      sub_24B531720(v189, v187, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
      uint64_t v191 = *(void *)(v187 + *(int *)(v188 + 20));
      uint64_t v192 = *(void *)(v191 + 16);
      uint64_t v193 = MEMORY[0x263F8EE78];
      if (v192)
      {
        *BOOL v12 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_24B534C20();
        uint64_t v194 = 128;
        do
        {
          id v195 = *(id *)(v191 + v194);
          sub_24B534C00();
          sub_24B534C30();
          sub_24B534C40();
          sub_24B534C10();
          v194 += 128;
          --v192;
        }
        while (v192);
        uint64_t v193 = *v12;
        swift_bridgeObjectRelease();
      }
      *(void *)(v0 + 472) = v193;
      uint64_t v197 = *(void *)(v0 + 408);
      uint64_t v196 = *(void *)(v0 + 416);
      uint64_t v198 = *(void *)(v0 + 392);
      uint64_t v199 = *(void *)(v0 + 288);
      uint64_t v200 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v190, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
      uint64_t v201 = (void *)swift_task_alloc();
      *(void *)(v0 + 480) = v201;
      v201[2] = v197;
      v201[3] = v199;
      v201[4] = v193;
      v201[5] = v196;
      v201[6] = v198;
      uint64_t v202 = (void *)swift_task_alloc();
      *(void *)(v0 + 488) = v202;
      uint64_t v203 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B28);
      *uint64_t v202 = v0;
      v202[1] = sub_24B528A40;
      uint64_t v204 = v203;
      char v205 = sub_24B5317A0;
      char v206 = (void *)(v0 + 208);
      goto LABEL_157;
    }
    uint64_t v23 = *(void *)(v0 + 296);
    v22(v23, 1, 1, *(void *)(v0 + 304));
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    sub_24B4E73E4(v23, &qword_2697C6B00);
    uint64_t v2 = *(void *)(v0 + 440) + 1;
    if (v2 == *(void *)(v0 + 432)) {
      goto LABEL_2;
    }
  }
  uint64_t v24 = *(void *)(v0 + 384);
  uint64_t v26 = *(void *)(v0 + 360);
  uint64_t v25 = *(void *)(v0 + 368);
  v18(v26, 0, 1, v25);
  sub_24B531720(v26, v24, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  *(void *)(v0 + 168) = MEMORY[0x263F8EE80];
  uint64_t v28 = *(void *)(v24 + *(int *)(v25 + 20));
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v30 = (uint64_t *)(v0 + 168);
  if (!v29)
  {
LABEL_156:
    uint64_t v207 = *(void *)(v0 + 400);
    uint64_t v208 = *(void *)(v0 + 392);
    uint64_t v209 = *(void *)(v0 + 384);
    uint64_t v199 = *(void *)(v0 + 288);
    uint64_t v200 = sub_24B531494((unint64_t *)&unk_2697C6AE0, v27, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
    uint64_t v201 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v201;
    v201[2] = v207;
    v201[3] = v199;
    v201[4] = v30;
    v201[5] = v208;
    v201[6] = v0 + 136;
    v201[7] = v209;
    char v206 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v206;
    *char v206 = v0;
    v206[1] = sub_24B527410;
    uint64_t v204 = MEMORY[0x263F8EE60] + 8;
    char v205 = sub_24B531D7C;
LABEL_157:
    return MEMORY[0x270FA2360](v206, v199, v200, 0xD00000000000001ALL, 0x800000024B53D560, v205, v201, v204);
  }
  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v32 = v28 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  uint64_t v219 = *(void *)(v31 + 72);
  swift_bridgeObjectRetain();
  while (2)
  {
    uint64_t v34 = *(void *)(v0 + 352);
    uint64_t v35 = *(void *)(v0 + 336);
    sub_24B52E018(v32, v34, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
    uint64_t v36 = v34 + *(int *)(v35 + 24);
    uint64_t v37 = *(void *)v36;
    unint64_t v38 = *(void *)(v36 + 8);
    switch(v38 >> 62)
    {
      case 1uLL:
        if ((int)v37 > v37 >> 32)
        {
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
        }
        sub_24B4E5538(*(void *)v36, *(void *)(v36 + 8));
        uint64_t v57 = (const uint8_t *)sub_24B534710();
        uint64_t v218 = v29;
        if (v57)
        {
          uint64_t v58 = sub_24B534740();
          if (__OFSUB__((int)v37, v58)) {
            goto LABEL_168;
          }
          v57 += (int)v37 - v58;
        }
        uint64_t v59 = *(void *)(v0 + 352);
        sub_24B534730();
        uint64_t v60 = (__IOHIDElement *)*(id *)(v59 + 96);
        uint64_t v61 = sub_24B51B714();
        if (!v57)
        {
          __break(1u);
LABEL_185:
          __break(1u);
          JUMPOUT(0x24B52CC54);
        }
        if (__OFSUB__(HIDWORD(v37), v37)) {
          goto LABEL_165;
        }
        IOHIDValueRef v62 = IOHIDValueCreateWithBytes(0, v60, v61, v57, HIDWORD(v37) - (int)v37);
        uint64_t v63 = *v217;
        unint64_t v64 = *v217 & 0xC000000000000001;
        if (v62)
        {
          IOHIDValueRef v65 = v62;
          if (v64)
          {
            if (v63 >= 0) {
              v63 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v66 = sub_24B534D00();
            if (__OFADD__(v66, 1)) {
              goto LABEL_175;
            }
            *uint64_t v217 = sub_24B52E8F4(v63, v66 + 1);
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v68 = *v217;
          *uint64_t v213 = *v217;
          *uint64_t v217 = 0x8000000000000000;
          unint64_t v70 = sub_24B52DAEC((uint64_t)v60);
          uint64_t v71 = *(void *)(v68 + 16);
          BOOL v72 = (v69 & 1) == 0;
          uint64_t v73 = v71 + v72;
          if (__OFADD__(v71, v72)) {
            goto LABEL_171;
          }
          char v74 = v69;
          if (*(void *)(v68 + 24) >= v73)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v73, isUniquelyReferenced_nonNull_native);
            unint64_t v75 = sub_24B52DAEC((uint64_t)v60);
            if ((v74 & 1) != (v76 & 1)) {
              goto LABEL_160;
            }
            unint64_t v70 = v75;
          }
          uint64_t v157 = (void *)*v213;
          if (v74)
          {
            uint64_t v158 = v157[7];

            *(void *)(v158 + 8 * v70) = v65;
          }
          else
          {
            v157[(v70 >> 6) + 8] |= 1 << v70;
            uint64_t v161 = 8 * v70;
            *(void *)(v157[6] + v161) = v60;
            *(void *)(v157[7] + v161) = v65;
            uint64_t v162 = v157[2];
            BOOL v150 = __OFADD__(v162, 1);
            uint64_t v163 = v162 + 1;
            if (v150) {
              goto LABEL_179;
            }
            v157[2] = v163;
            uint64_t v164 = v60;
          }
          *uint64_t v217 = (uint64_t)v157;

          uint64_t v30 = (uint64_t *)(v0 + 168);
LABEL_125:
          swift_bridgeObjectRelease();
          sub_24B4E5590(v37, v38);
LABEL_16:
          uint64_t v29 = v218;
          goto LABEL_17;
        }
        if (!v64)
        {
          swift_bridgeObjectRetain();
          unint64_t v181 = sub_24B52DAEC((uint64_t)v60);
          char v183 = v182;
          swift_bridgeObjectRelease();
          if (v183)
          {
            uint64_t v30 = (uint64_t *)(v0 + 168);
            char v184 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v185 = *v217;
            uint64_t *v210 = *v217;
            *uint64_t v217 = 0x8000000000000000;
            if ((v184 & 1) == 0)
            {
              sub_24B53059C();
              uint64_t v185 = *v210;
            }

            char v186 = *(void **)(*(void *)(v185 + 56) + 8 * v181);
            sub_24B52F9E8(v181, v185);
            *uint64_t v217 = v185;

            goto LABEL_125;
          }

          goto LABEL_146;
        }
        if (v63 < 0) {
          uint64_t v138 = *v217;
        }
        else {
          uint64_t v138 = v63 & 0xFFFFFFFFFFFFFF8;
        }
        char v139 = v60;
        swift_bridgeObjectRetain();
        uint64_t v140 = sub_24B534D30();

        if (!v140)
        {

          swift_bridgeObjectRelease();
LABEL_146:
          sub_24B4E5590(v37, v38);
LABEL_147:
          uint64_t v30 = (uint64_t *)(v0 + 168);
          goto LABEL_16;
        }
        swift_unknownObjectRelease();
        uint64_t v141 = sub_24B534D00();
        uint64_t v142 = sub_24B52E8F4(v138, v141);
        swift_retain();
        unint64_t v143 = sub_24B52DAEC((uint64_t)v139);
        char v145 = v144;
        swift_release();
        uint64_t v30 = (uint64_t *)(v0 + 168);
        uint64_t v29 = v218;
        if ((v145 & 1) == 0) {
          goto LABEL_183;
        }

        uint64_t v146 = *(void **)(*(void *)(v142 + 56) + 8 * v143);
        sub_24B52F9E8(v143, v142);
        *uint64_t v217 = v142;

        swift_bridgeObjectRelease();
        sub_24B4E5590(v37, v38);
        goto LABEL_17;
      case 2uLL:
        uint64_t v77 = *(void *)(v37 + 16);
        swift_retain();
        swift_retain();
        char v78 = (const uint8_t *)sub_24B534710();
        uint64_t v218 = v29;
        if (!v78) {
          goto LABEL_48;
        }
        uint64_t v79 = sub_24B534740();
        if (__OFSUB__(v77, v79)) {
          goto LABEL_166;
        }
        v78 += v77 - v79;
LABEL_48:
        uint64_t v80 = *(void *)(v0 + 352);
        sub_24B534730();
        uint64_t v81 = (__IOHIDElement *)*(id *)(v80 + 96);
        uint64_t v82 = sub_24B51B714();
        if (!v78) {
          goto LABEL_185;
        }
        uint64_t v84 = *(void *)(v37 + 16);
        uint64_t v83 = *(void *)(v37 + 24);
        if (__OFSUB__(v83, v84)) {
          goto LABEL_164;
        }
        IOHIDValueRef v85 = IOHIDValueCreateWithBytes(0, v81, v82, v78, v83 - v84);
        uint64_t v86 = *v217;
        unint64_t v87 = *v217 & 0xC000000000000001;
        if (v85)
        {
          IOHIDValueRef v88 = v85;
          if (v87)
          {
            if (v86 >= 0) {
              v86 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v89 = sub_24B534D00();
            if (__OFADD__(v89, 1)) {
              goto LABEL_174;
            }
            *uint64_t v217 = sub_24B52E8F4(v86, v89 + 1);
          }
          char v90 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v91 = *v217;
          *uint64_t v214 = *v217;
          *uint64_t v217 = 0x8000000000000000;
          unint64_t v93 = sub_24B52DAEC((uint64_t)v81);
          uint64_t v94 = *(void *)(v91 + 16);
          BOOL v95 = (v92 & 1) == 0;
          uint64_t v96 = v94 + v95;
          if (__OFADD__(v94, v95)) {
            goto LABEL_170;
          }
          char v97 = v92;
          if (*(void *)(v91 + 24) >= v96)
          {
            if ((v90 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v96, v90);
            unint64_t v98 = sub_24B52DAEC((uint64_t)v81);
            if ((v97 & 1) != (v99 & 1)) {
              goto LABEL_160;
            }
            unint64_t v93 = v98;
          }
          uint64_t v153 = (void *)*v214;
          if (v97)
          {
            uint64_t v33 = v153[7];

            *(void *)(v33 + 8 * v93) = v88;
          }
          else
          {
            v153[(v93 >> 6) + 8] |= 1 << v93;
            *(void *)(v153[6] + 8 * v93) = v81;
            *(void *)(v153[7] + 8 * v93) = v88;
            uint64_t v154 = v153[2];
            BOOL v150 = __OFADD__(v154, 1);
            uint64_t v155 = v154 + 1;
            if (v150) {
              goto LABEL_178;
            }
            v153[2] = v155;
            uint64_t v156 = v81;
          }
          *uint64_t v217 = (uint64_t)v153;
          swift_release();
          swift_release();

          uint64_t v30 = (uint64_t *)(v0 + 168);
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        if (v87)
        {
          if (v86 < 0) {
            uint64_t v130 = *v217;
          }
          else {
            uint64_t v130 = v86 & 0xFFFFFFFFFFFFFF8;
          }
          char v117 = v81;
          swift_bridgeObjectRetain();
          uint64_t v131 = sub_24B534D30();

          if (!v131)
          {
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            goto LABEL_147;
          }
          swift_unknownObjectRelease();
          uint64_t v132 = sub_24B534D00();
          uint64_t v133 = sub_24B52E8F4(v130, v132);
          swift_retain();
          unint64_t v134 = sub_24B52DAEC((uint64_t)v117);
          char v136 = v135;
          swift_release();
          uint64_t v30 = (uint64_t *)(v0 + 168);
          uint64_t v29 = v218;
          if ((v136 & 1) == 0) {
            goto LABEL_182;
          }

          uint64_t v137 = *(void **)(*(void *)(v133 + 56) + 8 * v134);
          sub_24B52F9E8(v134, v133);
          *uint64_t v217 = v133;
          swift_release();
          swift_release();

          goto LABEL_91;
        }
        swift_bridgeObjectRetain();
        unint64_t v175 = sub_24B52DAEC((uint64_t)v81);
        char v177 = v176;
        swift_bridgeObjectRelease();
        if ((v177 & 1) == 0)
        {
          swift_release();
          swift_release();

          goto LABEL_147;
        }
        uint64_t v30 = (uint64_t *)(v0 + 168);
        char v178 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v179 = *v217;
        *uint64_t v211 = *v217;
        *uint64_t v217 = 0x8000000000000000;
        if ((v178 & 1) == 0)
        {
          sub_24B53059C();
          uint64_t v179 = *v211;
        }

        char v180 = *(void **)(*(void *)(v179 + 56) + 8 * v175);
        sub_24B52F9E8(v175, v179);
        *uint64_t v217 = v179;
        swift_release();

        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_16;
      case 3uLL:
        uint64_t v100 = *(void *)(v0 + 352);
        *(void *)uint64_t v212 = 0;
        *(void *)(v0 + 510) = 0;
        id v40 = (__IOHIDElement *)*(id *)(v100 + 96);
        uint64_t v101 = sub_24B51B714();
        IOHIDValueRef v102 = IOHIDValueCreateWithBytes(0, v40, v101, v212, 0);
        uint64_t v103 = *(void *)(v0 + 168);
        unint64_t v104 = v103 & 0xC000000000000001;
        if (!v102)
        {
          if (!v104)
          {
            swift_bridgeObjectRetain();
            unint64_t v165 = sub_24B52DAEC((uint64_t)v40);
            char v172 = v171;
            swift_bridgeObjectRelease();
            if (v172)
            {
              char v173 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v169 = *v30;
              *(void *)(v0 + 240) = *v30;
              *uint64_t v30 = 0x8000000000000000;
              if ((v173 & 1) == 0)
              {
                char v170 = (uint64_t *)(v0 + 240);
LABEL_149:
                sub_24B53059C();
                uint64_t v169 = *v170;
              }
LABEL_132:

              uint64_t v174 = *(void **)(*(void *)(v169 + 56) + 8 * v165);
              sub_24B52F9E8(v165, v169);
              *uint64_t v30 = v169;

              swift_bridgeObjectRelease();
            }
            else
            {
LABEL_133:
            }
            goto LABEL_17;
          }
          if (v103 < 0) {
            uint64_t v124 = *(void *)(v0 + 168);
          }
          else {
            uint64_t v124 = v103 & 0xFFFFFFFFFFFFFF8;
          }
          char v117 = v40;
          swift_bridgeObjectRetain();
          uint64_t v125 = sub_24B534D30();

          if (v125)
          {
            swift_unknownObjectRelease();
            uint64_t v126 = sub_24B534D00();
            uint64_t v120 = sub_24B52E8F4(v124, v126);
            swift_retain();
            unint64_t v121 = sub_24B52DAEC((uint64_t)v117);
            char v128 = v127;
            swift_release();
            if ((v128 & 1) == 0) {
              goto LABEL_181;
            }
LABEL_83:

            uint64_t v129 = *(void **)(*(void *)(v120 + 56) + 8 * v121);
            sub_24B52F9E8(v121, v120);
            *uint64_t v30 = v120;

LABEL_91:
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
LABEL_126:

LABEL_121:
          swift_bridgeObjectRelease();
LABEL_17:
          sub_24B52E080(*(void *)(v0 + 352), (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
          v32 += v219;
          if (!--v29)
          {
            swift_bridgeObjectRelease();
            goto LABEL_156;
          }
          continue;
        }
        IOHIDValueRef v45 = v102;
        if (v104)
        {
          if (v103 >= 0) {
            v103 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          uint64_t v105 = sub_24B534D00();
          if (__OFADD__(v105, 1)) {
            goto LABEL_173;
          }
          *uint64_t v30 = sub_24B52E8F4(v103, v105 + 1);
        }
        char v106 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v107 = *v30;
        *uint64_t v215 = *v30;
        *uint64_t v30 = 0x8000000000000000;
        unint64_t v109 = sub_24B52DAEC((uint64_t)v40);
        uint64_t v110 = *(void *)(v107 + 16);
        BOOL v111 = (v108 & 1) == 0;
        uint64_t v112 = v110 + v111;
        if (__OFADD__(v110, v111)) {
          goto LABEL_169;
        }
        char v113 = v108;
        if (*(void *)(v107 + 24) >= v112)
        {
          if ((v106 & 1) == 0) {
            sub_24B53059C();
          }
          goto LABEL_107;
        }
        sub_24B52F6A4(v112, v106);
        unint64_t v114 = sub_24B52DAEC((uint64_t)v40);
        if ((v113 & 1) == (v115 & 1))
        {
          unint64_t v109 = v114;
          uint64_t v30 = (uint64_t *)(v0 + 168);
LABEL_107:
          unint64_t v147 = (void *)*v215;
          uint64_t v148 = 8 * v109;
          if (v113)
          {
LABEL_108:
            uint64_t v152 = v147[7];

            *(void *)(v152 + v148) = v45;
          }
          else
          {
            v147[(v109 >> 6) + 8] |= 1 << v109;
            *(void *)(v147[6] + 8 * v109) = v40;
            *(void *)(v147[7] + 8 * v109) = v45;
            uint64_t v159 = v147[2];
            BOOL v150 = __OFADD__(v159, 1);
            uint64_t v151 = v159 + 1;
            if (v150) {
              goto LABEL_177;
            }
LABEL_119:
            v147[2] = v151;
            unint64_t v160 = v40;
          }
          *uint64_t v30 = (uint64_t)v147;

          goto LABEL_121;
        }
LABEL_160:
        type metadata accessor for IOHIDElement();
        return sub_24B534E00();
      default:
        uint64_t v39 = *(void *)(v0 + 352);
        *(void *)(v0 + 518) = v37;
        *(_WORD *)(v0 + 526) = v38;
        *(unsigned char *)(v0 + 528) = BYTE2(v38);
        *(unsigned char *)(v0 + 529) = BYTE3(v38);
        *(unsigned char *)(v0 + 530) = BYTE4(v38);
        *(unsigned char *)(v0 + 531) = BYTE5(v38);
        id v40 = (__IOHIDElement *)*(id *)(v39 + 96);
        uint64_t v41 = sub_24B51B714();
        IOHIDValueRef v42 = IOHIDValueCreateWithBytes(0, v40, v41, (const uint8_t *)(v0 + 518), BYTE6(v38));
        uint64_t v43 = *(void *)(v0 + 168);
        unint64_t v44 = v43 & 0xC000000000000001;
        if (v42)
        {
          IOHIDValueRef v45 = v42;
          if (v44)
          {
            if (v43 >= 0) {
              v43 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v46 = sub_24B534D00();
            if (__OFADD__(v46, 1)) {
              goto LABEL_172;
            }
            *uint64_t v30 = sub_24B52E8F4(v43, v46 + 1);
          }
          char v47 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v48 = *v30;
          uint64_t *v216 = *v30;
          *uint64_t v30 = 0x8000000000000000;
          unint64_t v50 = sub_24B52DAEC((uint64_t)v40);
          uint64_t v51 = *(void *)(v48 + 16);
          BOOL v52 = (v49 & 1) == 0;
          uint64_t v53 = v51 + v52;
          if (__OFADD__(v51, v52)) {
            goto LABEL_167;
          }
          char v54 = v49;
          if (*(void *)(v48 + 24) >= v53)
          {
            if ((v47 & 1) == 0) {
              sub_24B53059C();
            }
          }
          else
          {
            sub_24B52F6A4(v53, v47);
            unint64_t v55 = sub_24B52DAEC((uint64_t)v40);
            if ((v54 & 1) != (v56 & 1)) {
              goto LABEL_160;
            }
            unint64_t v50 = v55;
            uint64_t v30 = (uint64_t *)(v0 + 168);
          }
          unint64_t v147 = (void *)*v216;
          uint64_t v148 = 8 * v50;
          if ((v54 & 1) == 0)
          {
            v147[(v50 >> 6) + 8] |= 1 << v50;
            *(void *)(v147[6] + 8 * v50) = v40;
            *(void *)(v147[7] + 8 * v50) = v45;
            uint64_t v149 = v147[2];
            BOOL v150 = __OFADD__(v149, 1);
            uint64_t v151 = v149 + 1;
            if (v150) {
              goto LABEL_176;
            }
            goto LABEL_119;
          }
          goto LABEL_108;
        }
        if (!v44)
        {
          swift_bridgeObjectRetain();
          unint64_t v165 = sub_24B52DAEC((uint64_t)v40);
          char v167 = v166;
          swift_bridgeObjectRelease();
          if ((v167 & 1) == 0) {
            goto LABEL_133;
          }
          char v168 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v169 = *v30;
          *(void *)(v0 + 216) = *v30;
          *uint64_t v30 = 0x8000000000000000;
          if ((v168 & 1) == 0)
          {
            char v170 = (uint64_t *)(v0 + 216);
            goto LABEL_149;
          }
          goto LABEL_132;
        }
        if (v43 < 0) {
          uint64_t v116 = *(void *)(v0 + 168);
        }
        else {
          uint64_t v116 = v43 & 0xFFFFFFFFFFFFFF8;
        }
        char v117 = v40;
        swift_bridgeObjectRetain();
        uint64_t v118 = sub_24B534D30();

        if (!v118) {
          goto LABEL_126;
        }
        swift_unknownObjectRelease();
        uint64_t v119 = sub_24B534D00();
        uint64_t v120 = sub_24B52E8F4(v116, v119);
        swift_retain();
        unint64_t v121 = sub_24B52DAEC((uint64_t)v117);
        char v123 = v122;
        swift_release();
        if ((v123 & 1) == 0) {
          goto LABEL_180;
        }
        goto LABEL_83;
    }
  }
}

uint64_t sub_24B52CC64(uint64_t a1, void *a2, uint64_t a3, CFTimeInterval a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v24 = a7;
  uint64_t v12 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
  MEMORY[0x270FA5388](v12 - 8);
  id v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(a2, a1, v15);
  uint64_t v16 = *(__IOHIDDevice **)(a3 + 296);
  type metadata accessor for IOHIDElement();
  type metadata accessor for IOHIDValue(0);
  sub_24B531494(&qword_2697C67C8, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  swift_bridgeObjectRetain();
  CFDictionaryRef v17 = (const __CFDictionary *)sub_24B5348C0();
  swift_bridgeObjectRelease();
  uint64_t v18 = IOHIDDeviceSetValueMultipleWithCallback(v16, v17, a4, (IOHIDValueMultipleCallback)sub_24B52CECC, a2);

  sub_24B51B3AC(v18, (uint64_t)&v25);
  if ((v25 & 0x10000000000) != 0)
  {
    sub_24B52E018(v24, (uint64_t)v14, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *a6;
    *a6 = 0x8000000000000000;
    sub_24B52FDD0(0, 0, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    *a6 = v25;
    swift_bridgeObjectRelease();
    return sub_24B52E080((uint64_t)v14, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  }
  else
  {
    unint64_t v21 = v25 | ((unint64_t)BYTE4(v25) << 32);
    sub_24B4ED390();
    uint64_t v22 = swift_allocError();
    *(_DWORD *)uint64_t v23 = v21;
    *(unsigned char *)(v23 + 4) = BYTE4(v21) & 1;
    uint64_t v25 = v22;
    return sub_24B534A10();
  }
}

uint64_t sub_24B52CECC(uint64_t a1, uint64_t a2)
{
  return sub_24B533C74(a1, a2);
}

void sub_24B52CEE4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  sub_24B533EA4(a1, a2);
}

uint64_t sub_24B52CF3C@<X0>(void *a1@<X0>, __IOHIDValue *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = sub_24B534C70();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (unint64_t *)((char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = a1;
  swift_retain();
  sub_24B4DF128(v11, a3, (uint64_t)v21);
  sub_24B533E3C((uint64_t)v21, (uint64_t)v22);
  sub_24B533E3C((uint64_t)v22, (uint64_t)v23);
  uint64_t result = sub_24B4E48FC((uint64_t)v23);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    v19[4] = v23[4];
    v19[5] = v23[5];
    v20[0] = v24[0];
    *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v24 + 9);
    v19[0] = v23[0];
    v19[1] = v23[1];
    v19[2] = v23[2];
    v19[3] = v23[3];
    BytePtr = (uint8_t *)IOHIDValueGetBytePtr(a2);
    CFIndex Length = IOHIDValueGetLength(a2);
    uint64_t v15 = sub_24B530FB8(BytePtr, Length);
    uint64_t v17 = v16;
    uint64_t TimeStamp = IOHIDValueGetTimeStamp(a2);
    sub_24B51B7DC(TimeStamp, v10);
    return HIDElement.Value.init(element:fromBytes:timestamp:)(v19, v15, v17, (uint64_t)v10, a4);
  }
  return result;
}

uint64_t HIDDeviceClient.unownedExecutor.getter()
{
  return v0;
}

uint64_t static HIDDeviceClient.== infix(_:_:)()
{
  return sub_24B534840() & 1;
}

uint64_t sub_24B52D134()
{
  return sub_24B534840() & 1;
}

void HIDDeviceClient.hash(into:)()
{
  uint64_t v1 = *(void **)(v0 + 296);
  type metadata accessor for IOHIDDevice(0);
  sub_24B531494(&qword_2697C6B30, 255, type metadata accessor for IOHIDDevice);
  id v2 = v1;
  sub_24B534850();
}

uint64_t HIDDeviceClient.hashValue.getter()
{
  sub_24B534E60();
  uint64_t v1 = *(void **)(v0 + 296);
  type metadata accessor for IOHIDDevice(0);
  sub_24B531494(&qword_2697C6B30, 255, type metadata accessor for IOHIDDevice);
  id v2 = v1;
  sub_24B534850();

  return sub_24B534EB0();
}

uint64_t sub_24B52D320()
{
  uint64_t v1 = *v0;
  sub_24B534E60();
  id v2 = *(void **)(v1 + 296);
  type metadata accessor for IOHIDDevice(0);
  sub_24B531494(&qword_2697C6B30, 255, type metadata accessor for IOHIDDevice);
  id v3 = v2;
  sub_24B534850();

  return sub_24B534EB0();
}

void sub_24B52D3D0()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 296);
  type metadata accessor for IOHIDDevice(0);
  sub_24B531494(&qword_2697C6B30, 255, type metadata accessor for IOHIDDevice);
  id v2 = v1;
  sub_24B534850();
}

uint64_t sub_24B52D484()
{
  uint64_t v1 = *v0;
  sub_24B534E60();
  id v2 = *(void **)(v1 + 296);
  type metadata accessor for IOHIDDevice(0);
  sub_24B531494(&qword_2697C6B30, 255, type metadata accessor for IOHIDDevice);
  id v3 = v2;
  sub_24B534850();

  return sub_24B534EB0();
}

uint64_t HIDDeviceClient.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 312);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24B52D560()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 312);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HIDDeviceClient.DeviceReference.description.getter()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C67D0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_24B5359C0;
  uint64_t v3 = MEMORY[0x263F8E9C0];
  *(void *)(v2 + 56) = MEMORY[0x263F8E970];
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 32) = v1;

  return sub_24B534960();
}

uint64_t sub_24B52D61C()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C67D0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_24B5359C0;
  uint64_t v3 = MEMORY[0x263F8E9C0];
  *(void *)(v2 + 56) = MEMORY[0x263F8E970];
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 32) = v1;

  return sub_24B534960();
}

uint64_t sub_24B52D6A4()
{
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_24B52D6B4()
{
  return sub_24B534860();
}

uint64_t sub_24B52D700()
{
  return sub_24B534850();
}

uint64_t sub_24B52D758()
{
  return sub_24B52D770();
}

uint64_t sub_24B52D770()
{
  return sub_24B534EB0();
}

uint64_t sub_24B52D7D4()
{
  swift_getWitnessTable();

  return sub_24B534840();
}

unint64_t sub_24B52D840(uint64_t a1)
{
  sub_24B534E60();
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v2 = *(void *)(a1 + *(int *)(type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0) + 20));
  uint64_t v3 = *(void *)(v2 + 16);
  sub_24B534E70();
  if (v3)
  {
    uint64_t v4 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
    uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    sub_24B531494(&qword_2697C6AF8, 255, (void (*)(uint64_t))type metadata accessor for HIDElement.Value);
    swift_bridgeObjectRetain();
    do
    {
      sub_24B5348F0();
      v5 += v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = sub_24B534EB0();

  return sub_24B52E134(a1, v7);
}

void *sub_24B52D9F4(uint64_t a1)
{
  sub_24B534E60();
  sub_24B534C70();
  sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
  sub_24B5348F0();
  uint64_t v2 = *(void *)(a1 + *(int *)(type metadata accessor for HIDDeviceClient.RequestElementUpdate(0) + 20));
  swift_bridgeObjectRetain();
  sub_24B530938((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  sub_24B534E80();
  uint64_t v3 = sub_24B534EB0();

  return sub_24B52E4B0(a1, v3);
}

unint64_t sub_24B52DAEC(uint64_t a1)
{
  sub_24B534E60();
  type metadata accessor for IOHIDElement();
  sub_24B531494(&qword_2697C6730, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
  sub_24B534850();
  uint64_t v2 = sub_24B534EB0();

  return sub_24B52E718(a1, v2);
}

char *sub_24B52DBA4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2697C6C50);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 6 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_24B52DCAC(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BC8);
  uint64_t v10 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

void *sub_24B52DE80(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6A88);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    _OWORD v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6A98);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_24B52DFA4()
{
  unint64_t result = qword_2697C6AA0;
  if (!qword_2697C6AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6AA0);
  }
  return result;
}

uint64_t type metadata accessor for HIDDeviceClient.Notification(uint64_t a1)
{
  return sub_24B532E8C(a1, (uint64_t *)&unk_2697CB4A0);
}

uint64_t sub_24B52E018(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24B52E080(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_24B52E0E0()
{
  unint64_t result = qword_2697C6AC0;
  if (!qword_2697C6AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6AC0);
  }
  return result;
}

unint64_t sub_24B52E134(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v33 = type metadata accessor for HIDElement.Value();
  uint64_t v23 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v24 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
  MEMORY[0x270FA5388](v24);
  int64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v2;
  uint64_t v12 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v12;
  uint64_t v26 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v25 = ~v12;
    uint64_t v27 = *(void *)(v9 + 72);
    uint64_t v29 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    while (1)
    {
      uint64_t v14 = *(void *)(v28 + 48);
      unint64_t v31 = result;
      sub_24B52E018(v14 + result * v27, (uint64_t)v11, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
      if (sub_24B534C60())
      {
        uint64_t v15 = *(int *)(v24 + 20);
        uint64_t v16 = *(void *)&v29[v15];
        uint64_t v17 = *(void *)(v30 + v15);
        uint64_t v18 = *(void *)(v16 + 16);
        if (v18 == *(void *)(v17 + 16)) {
          break;
        }
      }
LABEL_3:
      int64_t v11 = v29;
      sub_24B52E080((uint64_t)v29, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
      unint64_t result = (v31 + 1) & v25;
      if (((*(void *)(v26 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
        return result;
      }
    }
    if (!v18 || v16 == v17)
    {
LABEL_12:
      sub_24B52E080((uint64_t)v29, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
      return v31;
    }
    else
    {
      unint64_t v19 = 0;
      unint64_t v20 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      uint64_t v32 = *(void *)(v23 + 72);
      while (1)
      {
        unint64_t result = sub_24B52E018(v16 + v20, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
        if (v19 >= *(void *)(v17 + 16)) {
          break;
        }
        sub_24B52E018(v17 + v20, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
        sub_24B531494(&qword_2697C67B0, 255, (void (*)(uint64_t))type metadata accessor for HIDElement.Value);
        char v21 = sub_24B534940();
        sub_24B52E080((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
        sub_24B52E080((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
        if ((v21 & 1) == 0) {
          goto LABEL_3;
        }
        ++v19;
        v20 += v32;
        if (v18 == v19) {
          goto LABEL_12;
        }
      }
      __break(1u);
    }
  }
  return result;
}

void *sub_24B52E4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v2 + 64;
  uint64_t v24 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  if (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    return (void *)v9;
  }
  uint64_t v10 = *(void *)(v5 + 72);
  uint64_t v21 = ~v8;
  uint64_t v22 = v10;
  while (1)
  {
    sub_24B52E018(*(void *)(v24 + 48) + v9 * v22, (uint64_t)v7, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    if ((sub_24B534C60() & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v11 = *(int *)(v20 + 20);
    uint64_t v12 = *(void *)&v7[v11];
    uint64_t v13 = *(void *)(a1 + v11);
    uint64_t v14 = *(void *)(v12 + 16);
    if (v14 != *(void *)(v13 + 16)) {
      goto LABEL_4;
    }
    if (v14 && v12 != v13) {
      break;
    }
LABEL_3:
    if (v7[*(int *)(v20 + 24)] == *(unsigned char *)(a1 + *(int *)(v20 + 24)))
    {
      sub_24B52E080((uint64_t)v7, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
      return (void *)v9;
    }
LABEL_4:
    sub_24B52E080((uint64_t)v7, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    unint64_t v9 = (v9 + 1) & v21;
    if (((*(void *)(v23 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      return (void *)v9;
    }
  }
  unint64_t v16 = 0;
  uint64_t v17 = (char *)(v12 + 32);
  uint64_t v18 = (char *)(v13 + 32);
  while (1)
  {
    unint64_t result = memmove(&v26, v17, 0x79uLL);
    if (v16 >= *(void *)(v13 + 16)) {
      break;
    }
    memmove(&v25, v18, 0x79uLL);
    sub_24B4E60E4();
    if ((sub_24B534940() & 1) == 0) {
      goto LABEL_4;
    }
    ++v16;
    v17 += 128;
    v18 += 128;
    if (v14 == v16) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24B52E718(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for IOHIDElement();
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_24B531494(&qword_2697C6730, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
    id v7 = v6;
    char v8 = sub_24B534840();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_24B534840();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

void sub_24B52E878(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24B534D60();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x24C5D2FD0);
}

uint64_t sub_24B52E8F4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BA8);
    uint64_t v2 = sub_24B534D90();
    uint64_t v17 = v2;
    sub_24B534CB0();
    if (sub_24B534D40())
    {
      type metadata accessor for IOHIDElement();
      do
      {
        swift_dynamicCast();
        type metadata accessor for IOHIDValue(0);
        swift_dynamicCast();
        uint64_t v2 = v17;
        unint64_t v10 = *(void *)(v17 + 16);
        if (*(void *)(v17 + 24) <= v10)
        {
          sub_24B52F6A4(v10 + 1, 1);
          uint64_t v2 = v17;
        }
        sub_24B534E60();
        sub_24B531494(&qword_2697C6730, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
        sub_24B534850();
        uint64_t result = sub_24B534EB0();
        uint64_t v4 = v2 + 64;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 64 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 64 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v11 = 0;
          unint64_t v12 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v12 && (v11 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v13 = v7 == v12;
            if (v7 == v12) {
              unint64_t v7 = 0;
            }
            v11 |= v13;
            uint64_t v14 = *(void *)(v4 + 8 * v7);
          }
          while (v14 == -1);
          unint64_t v8 = __clz(__rbit64(~v14)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        uint64_t v9 = 8 * v8;
        *(void *)(*(void *)(v2 + 48) + v9) = v16;
        *(void *)(*(void *)(v2 + 56) + v9) = v15;
        ++*(void *)(v2 + 16);
      }
      while (sub_24B534D40());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE80];
  }
  return v2;
}

uint64_t sub_24B52EB7C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
  uint64_t v55 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BB0);
  int v56 = a2;
  uint64_t v9 = sub_24B534D80();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    unint64_t v50 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    uint64_t v48 = v3;
    int64_t v49 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v52 = v5;
    uint64_t v53 = v10;
    uint64_t v51 = v8;
    char v54 = v7;
    while (1)
    {
      if (v14)
      {
        uint64_t v60 = (v14 - 1) & v14;
        unint64_t v21 = __clz(__rbit64(v14)) | (v17 << 6);
      }
      else
      {
        int64_t v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v22 >= v49) {
          goto LABEL_39;
        }
        unint64_t v23 = v50[v22];
        ++v17;
        if (!v23)
        {
          int64_t v17 = v22 + 1;
          if (v22 + 1 >= v49) {
            goto LABEL_39;
          }
          unint64_t v23 = v50[v17];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v49)
            {
LABEL_39:
              swift_release();
              uint64_t v3 = v48;
              if (v56)
              {
                uint64_t v46 = 1 << *(unsigned char *)(v8 + 32);
                if (v46 >= 64) {
                  bzero(v50, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v50 = -1 << v46;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v50[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v17 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_46;
                }
                if (v17 >= v49) {
                  goto LABEL_39;
                }
                unint64_t v23 = v50[v17];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v24;
          }
        }
LABEL_21:
        uint64_t v60 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      uint64_t v25 = *(void *)(v55 + 72);
      uint64_t v26 = *(void *)(v8 + 48) + v25 * v21;
      uint64_t v27 = 16 * v21;
      int64_t v61 = v17;
      uint64_t v59 = v25;
      if (v56)
      {
        sub_24B531720(v26, (uint64_t)v7, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
        uint64_t v28 = v8;
        uint64_t v29 = *(void *)(v8 + 56) + v27;
        id v58 = *(id *)v29;
        int v57 = *(unsigned __int8 *)(v29 + 8);
      }
      else
      {
        sub_24B52E018(v26, (uint64_t)v7, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
        uint64_t v28 = v8;
        uint64_t v30 = *(void *)(v8 + 56) + v27;
        int v31 = *(unsigned __int8 *)(v30 + 8);
        id v58 = *(id *)v30;
        int v57 = v31;
        sub_24B531794(v58, v31);
      }
      sub_24B534E60();
      sub_24B534C70();
      sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
      sub_24B5348F0();
      uint64_t v32 = *(void *)&v7[*(int *)(v5 + 20)];
      sub_24B534E70();
      uint64_t v33 = *(void *)(v32 + 16);
      uint64_t v8 = v28;
      if (v33)
      {
        sub_24B533DD0();
        swift_bridgeObjectRetain();
        uint64_t v34 = v33 - 1;
        for (uint64_t i = 32; ; i += 128)
        {
          *(_OWORD *)((char *)v75 + 9) = *(_OWORD *)(v32 + i + 105);
          long long v36 = *(_OWORD *)(v32 + i + 96);
          long long v74 = *(_OWORD *)(v32 + i + 80);
          v75[0] = v36;
          long long v37 = *(_OWORD *)(v32 + i + 64);
          long long v72 = *(_OWORD *)(v32 + i + 48);
          long long v73 = v37;
          long long v38 = *(_OWORD *)(v32 + i + 16);
          long long v69 = *(_OWORD *)(v32 + i);
          long long v70 = v38;
          long long v71 = *(_OWORD *)(v32 + i + 32);
          long long v66 = v37;
          long long v67 = v74;
          v68[0] = v75[0];
          *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)((char *)v75 + 9);
          long long v62 = v69;
          long long v63 = v38;
          long long v64 = v71;
          long long v65 = v72;
          sub_24B5348F0();
          if (!v34) {
            break;
          }
          --v34;
        }
        swift_bridgeObjectRelease();
        uint64_t v8 = v51;
        uint64_t v5 = v52;
        uint64_t v10 = v53;
      }
      unint64_t v7 = v54;
      sub_24B534E80();
      uint64_t result = sub_24B534EB0();
      uint64_t v39 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v40 = result & ~v39;
      unint64_t v41 = v40 >> 6;
      if (((-1 << v40) & ~*(void *)(v15 + 8 * (v40 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v40) & ~*(void *)(v15 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v42 = 0;
        unint64_t v43 = (unint64_t)(63 - v39) >> 6;
        do
        {
          if (++v41 == v43 && (v42 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          BOOL v44 = v41 == v43;
          if (v41 == v43) {
            unint64_t v41 = 0;
          }
          v42 |= v44;
          uint64_t v45 = *(void *)(v15 + 8 * v41);
        }
        while (v45 == -1);
        unint64_t v18 = __clz(__rbit64(~v45)) + (v41 << 6);
      }
      uint64_t v19 = v59;
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = sub_24B531720((uint64_t)v7, *(void *)(v10 + 48) + v18 * v19, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
      uint64_t v20 = *(void *)(v10 + 56) + 16 * v18;
      *(void *)uint64_t v20 = v58;
      *(unsigned char *)(v20 + 8) = v57;
      ++*(void *)(v10 + 16);
      unint64_t v14 = v60;
      int64_t v17 = v61;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_24B52F0CC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for HIDElement.Value();
  uint64_t v51 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BD0);
  int v56 = a2;
  uint64_t v12 = sub_24B534D80();
  uint64_t v13 = (void *)v12;
  if (*(void *)(v11 + 16))
  {
    uint64_t v47 = v3;
    uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v15 = *(void *)(v11 + 64);
    int64_t v49 = (void *)(v11 + 64);
    if (v14 < 64) {
      uint64_t v16 = ~(-1 << v14);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & v15;
    int64_t v48 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v18 = v12 + 64;
    uint64_t result = swift_retain();
    int64_t v20 = 0;
    uint64_t v50 = v11;
    uint64_t v52 = v10;
    uint64_t v53 = v13;
    while (1)
    {
      if (v17)
      {
        uint64_t v60 = (v17 - 1) & v17;
        unint64_t v24 = __clz(__rbit64(v17)) | (v20 << 6);
      }
      else
      {
        int64_t v25 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v25 >= v48) {
          goto LABEL_38;
        }
        unint64_t v26 = v49[v25];
        ++v20;
        if (!v26)
        {
          int64_t v20 = v25 + 1;
          if (v25 + 1 >= v48) {
            goto LABEL_38;
          }
          unint64_t v26 = v49[v20];
          if (!v26)
          {
            int64_t v27 = v25 + 2;
            if (v27 >= v48)
            {
LABEL_38:
              swift_release();
              uint64_t v3 = v47;
              if (v56)
              {
                uint64_t v46 = 1 << *(unsigned char *)(v11 + 32);
                if (v46 >= 64) {
                  bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v49 = -1 << v46;
                }
                *(void *)(v11 + 16) = 0;
              }
              break;
            }
            unint64_t v26 = v49[v27];
            if (!v26)
            {
              while (1)
              {
                int64_t v20 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_45;
                }
                if (v20 >= v48) {
                  goto LABEL_38;
                }
                unint64_t v26 = v49[v20];
                ++v27;
                if (v26) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v20 = v27;
          }
        }
LABEL_21:
        uint64_t v60 = (v26 - 1) & v26;
        unint64_t v24 = __clz(__rbit64(v26)) + (v20 << 6);
      }
      uint64_t v28 = *(void *)(v54 + 72);
      uint64_t v29 = *(void *)(v11 + 48) + v28 * v24;
      uint64_t v30 = 16 * v24;
      int64_t v61 = v20;
      uint64_t v59 = v28;
      if (v56)
      {
        sub_24B531720(v29, (uint64_t)v10, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
        uint64_t v31 = *(void *)(v11 + 56) + v30;
        id v58 = *(id *)v31;
        int v57 = *(unsigned __int8 *)(v31 + 8);
      }
      else
      {
        sub_24B52E018(v29, (uint64_t)v10, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
        uint64_t v32 = *(void *)(v11 + 56) + v30;
        int v33 = *(unsigned __int8 *)(v32 + 8);
        id v58 = *(id *)v32;
        int v57 = v33;
        sub_24B531788(v58, v33);
      }
      sub_24B534E60();
      sub_24B534C70();
      sub_24B531494(&qword_2697C6750, 255, MEMORY[0x263F8F728]);
      sub_24B5348F0();
      uint64_t v34 = *(void *)&v10[*(int *)(v55 + 20)];
      sub_24B534E70();
      uint64_t v35 = *(void *)(v34 + 16);
      if (v35)
      {
        uint64_t v36 = v51;
        uint64_t v37 = v34 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
        swift_bridgeObjectRetain();
        uint64_t v38 = *(void *)(v36 + 72);
        do
        {
          sub_24B52E018(v37, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
          sub_24B531494(&qword_2697C6AF8, 255, (void (*)(uint64_t))type metadata accessor for HIDElement.Value);
          sub_24B5348F0();
          sub_24B52E080((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
          v37 += v38;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease();
        uint64_t v11 = v50;
      }
      uint64_t result = sub_24B534EB0();
      uint64_t v13 = v53;
      uint64_t v39 = -1 << *((unsigned char *)v53 + 32);
      unint64_t v40 = result & ~v39;
      unint64_t v41 = v40 >> 6;
      if (((-1 << v40) & ~*(void *)(v18 + 8 * (v40 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v40) & ~*(void *)(v18 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v10 = v52;
      }
      else
      {
        char v42 = 0;
        unint64_t v43 = (unint64_t)(63 - v39) >> 6;
        uint64_t v10 = v52;
        do
        {
          if (++v41 == v43 && (v42 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          BOOL v44 = v41 == v43;
          if (v41 == v43) {
            unint64_t v41 = 0;
          }
          v42 |= v44;
          uint64_t v45 = *(void *)(v18 + 8 * v41);
        }
        while (v45 == -1);
        unint64_t v21 = __clz(__rbit64(~v45)) + (v41 << 6);
      }
      uint64_t v22 = v59;
      *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      uint64_t result = sub_24B531720((uint64_t)v10, v13[6] + v21 * v22, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
      uint64_t v23 = v13[7] + 16 * v21;
      *(void *)uint64_t v23 = v58;
      *(unsigned char *)(v23 + 8) = v57;
      ++v13[2];
      unint64_t v17 = v60;
      int64_t v20 = v61;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_24B52F6A4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BA8);
  uint64_t v6 = sub_24B534D80();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = 8 * v20;
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + v29);
    uint64_t v31 = *(void **)(*(void *)(v5 + 56) + v29);
    if ((a2 & 1) == 0)
    {
      id v32 = v30;
      id v33 = v31;
    }
    sub_24B534E60();
    type metadata accessor for IOHIDElement();
    sub_24B531494(&qword_2697C6730, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
    sub_24B534850();
    uint64_t result = sub_24B534EB0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 8 * v17;
    *(void *)(*(void *)(v7 + 48) + v18) = v30;
    *(void *)(*(void *)(v7 + 56) + v18) = v31;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_24B52F9E8(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = sub_24B534BB0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        sub_24B534E60();
        type metadata accessor for IOHIDElement();
        sub_24B531494(&qword_2697C6730, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
        id v11 = v10;
        sub_24B534850();
        uint64_t v12 = sub_24B534EB0();

        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          unint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << a1) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_24B52FC10(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (void *)*v4;
  unint64_t v15 = (unint64_t)sub_24B52D9F4(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0) {
    goto LABEL_9;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_24B530054();
    goto LABEL_9;
  }
  sub_24B52EB7C(v18, a4 & 1);
  uint64_t v21 = sub_24B52D9F4(a3);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    sub_24B534E00();
    __break(1u);
    return;
  }
  unint64_t v15 = (unint64_t)v21;
LABEL_9:
  int v23 = a2 & 1;
  BOOL v24 = *v5;
  if (v19)
  {
    uint64_t v25 = v24[7] + 16 * v15;
    sub_24B531D70(*(id *)v25, *(unsigned char *)(v25 + 8));
    *(void *)uint64_t v25 = a1;
    *(unsigned char *)(v25 + 8) = v23 != 0;
  }
  else
  {
    sub_24B52E018(a3, (uint64_t)v12, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    sub_24B52FF90(v15, (uint64_t)v12, a1, v23, v24, type metadata accessor for HIDDeviceClient.RequestElementUpdate, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
  }
}

void sub_24B52FDD0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_24B52D840(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0) {
    goto LABEL_9;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_24B5302F8();
    goto LABEL_9;
  }
  sub_24B52F0CC(v18, a4 & 1);
  unint64_t v21 = sub_24B52D840(a3);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    sub_24B534E00();
    __break(1u);
    return;
  }
  unint64_t v15 = v21;
LABEL_9:
  int v23 = a2 & 1;
  BOOL v24 = *v5;
  if (v19)
  {
    uint64_t v25 = v24[7] + 16 * v15;
    sub_24B534084(*(id *)v25, *(unsigned char *)(v25 + 8));
    *(void *)uint64_t v25 = a1;
    *(unsigned char *)(v25 + 8) = v23 != 0;
  }
  else
  {
    sub_24B52E018(a3, (uint64_t)v12, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
    sub_24B52FF90(v15, (uint64_t)v12, a1, v23, v24, type metadata accessor for HIDDeviceClient.ProvideElementUpdate, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  }
}

uint64_t sub_24B52FF90(unint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v13 = a5[6];
  uint64_t v14 = a6(0);
  uint64_t result = sub_24B531720(a2, v13 + *(void *)(*(void *)(v14 - 8) + 72) * a1, a7);
  uint64_t v16 = a5[7] + 16 * a1;
  *(void *)uint64_t v16 = a3;
  *(unsigned char *)(v16 + 8) = a4 & 1;
  uint64_t v17 = a5[2];
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    a5[2] = v19;
  }
  return result;
}

void *sub_24B530054()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for HIDDeviceClient.RequestElementUpdate(0);
  uint64_t v30 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BB0);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_24B534D70();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  uint64_t v28 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = *(void *)(v5 + 16);
  }
  uint64_t v29 = v5 + 64;
  int64_t v11 = 0;
  *(void *)(v7 + 16) = v8;
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v30 + 72) * v17;
    sub_24B52E018(*(void *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    uint64_t v19 = 16 * v17;
    uint64_t v20 = *(void *)(v5 + 56) + 16 * v17;
    unint64_t v21 = *(void **)v20;
    char v22 = *(unsigned char *)(v20 + 8);
    sub_24B531720((uint64_t)v4, *(void *)(v7 + 48) + v18, type metadata accessor for HIDDeviceClient.RequestElementUpdate);
    uint64_t v23 = *(void *)(v7 + 56) + v19;
    *(void *)uint64_t v23 = v21;
    *(unsigned char *)(v23 + 8) = v22;
    uint64_t result = sub_24B531794(v21, v22);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_24B5302F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for HIDDeviceClient.ProvideElementUpdate(0);
  uint64_t v30 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BD0);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_24B534D70();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  uint64_t v28 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = *(void *)(v5 + 16);
  }
  uint64_t v29 = v5 + 64;
  int64_t v11 = 0;
  *(void *)(v7 + 16) = v8;
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v30 + 72) * v17;
    sub_24B52E018(*(void *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
    uint64_t v19 = 16 * v17;
    uint64_t v20 = *(void *)(v5 + 56) + 16 * v17;
    unint64_t v21 = *(void **)v20;
    char v22 = *(unsigned char *)(v20 + 8);
    sub_24B531720((uint64_t)v4, *(void *)(v7 + 48) + v18, type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
    uint64_t v23 = *(void *)(v7 + 56) + v19;
    *(void *)uint64_t v23 = v21;
    *(unsigned char *)(v23 + 8) = v22;
    uint64_t result = sub_24B531788(v21, v22);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_24B53059C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BA8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_24B534D70();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

size_t sub_24B530744(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_24B530764(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_24B530764(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    int64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BC8);
  uint64_t v10 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  int64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for HIDElement.Value() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_24B530938(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_24B534E70();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    sub_24B533DD0();
    do
    {
      uint64_t result = sub_24B5348F0();
      v5 += 128;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_24B5309E4(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return sub_24B534CA0();
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v1 = 1 << v5;
  if (v6 < 7) {
    return v1;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  unint64_t v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v3 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v2 = v10;
    --v8;
    v3 += 64;
    if (v10) {
      return __clz(__rbit64(v2)) + v3;
    }
  }
  return v1;
}

void sub_24B530AA8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= a1)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 64 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a1))
    {
      if (*(_DWORD *)(a4 + 36) == a2)
      {
        sub_24B534BC0();
        return;
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (sub_24B534CE0() != *(_DWORD *)(a4 + 36))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_24B534CF0();
  sub_24B533E30(a1, a2, 1);
  type metadata accessor for IOHIDElement();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  sub_24B52DAEC((uint64_t)v8);
  char v7 = v6;

  if (v7)
  {
    sub_24B534CC0();
    sub_24B534D10();
    sub_24B533E24(a1, a2, 1);
    swift_unknownObjectRelease();
    return;
  }
LABEL_14:
  __break(1u);
}

void sub_24B530C38(void *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  unint64_t v6 = a2;
  if ((a5 & 0xC000000000000001) != 0)
  {
    if (a4)
    {
      sub_24B534D20();
      type metadata accessor for IOHIDElement();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      type metadata accessor for IOHIDValue(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v13;
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_18;
  }
  if (a4)
  {
LABEL_10:
    if (sub_24B534CE0() == *(_DWORD *)(a5 + 36))
    {
      sub_24B534CF0();
      type metadata accessor for IOHIDElement();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      unint64_t v6 = sub_24B52DAEC((uint64_t)v13);
      char v9 = v8;

      if (v9) {
        goto LABEL_12;
      }
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  unint64_t v10 = *(void **)(*(void *)(a5 + 48) + 8 * v6);
  uint64_t v11 = *(void **)(*(void *)(a5 + 56) + 8 * v6);
  *a1 = v11;
  v10;
  id v12 = v11;
}

uint64_t sub_24B530E34(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68B0);
  uint64_t result = MEMORY[0x270FA5388](v6 - 8);
  char v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 && (a2 | 0x10) == 0xE0000110 && (a3 & 1) != 0)
  {
    if (a1)
    {
      type metadata accessor for HIDDeviceClient.Context();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = a1;
      dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
      uint64_t v12 = sub_24B534A40();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = v10;
      *(_DWORD *)(v13 + 40) = a2;
      *(_DWORD *)(v13 + 44) = -536870656;
      *(void *)(v13 + 48) = v11;
      swift_retain();
      unint64_t v14 = v11;
      sub_24B4E98B8((uint64_t)v9, (uint64_t)&unk_2697C6C38, v13);
      swift_release();
      sub_24B534AC0();

      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_24B530FB8(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_24B4ED690(__src, &__src[a2]);
  }
  sub_24B534750();
  swift_allocObject();
  sub_24B534700();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  sub_24B5347D0();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_24B53106C(uint64_t a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68B0);
  uint64_t result = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    type metadata accessor for HIDDeviceClient.Context();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
    uint64_t v16 = sub_24B530FB8(a3, a4);
    unint64_t v18 = v17;
    uint64_t v19 = sub_24B534A40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = v14;
    *(_DWORD *)(v20 + 40) = a2;
    *(void *)(v20 + 48) = v16;
    *(void *)(v20 + 56) = v18;
    *(void *)(v20 + 64) = a5;
    *(void *)(v20 + 72) = v15;
    swift_retain();
    sub_24B4E5538(v16, v18);
    unint64_t v21 = v15;
    sub_24B4E98B8((uint64_t)v13, (uint64_t)&unk_2697C6C18, v20);
    swift_release();
    sub_24B534AC0();
    sub_24B4E5590(v16, v18);

    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24B531208(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C68B0);
  uint64_t result = MEMORY[0x270FA5388](v4 - 8);
  char v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    type metadata accessor for HIDDeviceClient.Context();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    dispatch_semaphore_t v9 = dispatch_semaphore_create(0);
    unint64_t v18 = a2;
    type metadata accessor for IOHIDValue(0);
    uint64_t v11 = v10;
    id v12 = a2;
    sub_24B51B908((uint64_t)&v18, v11, (uint64_t)&v19);
    uint64_t v13 = v19;
    uint64_t v14 = sub_24B534A40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
    dispatch_semaphore_t v15 = (void *)swift_allocObject();
    _OWORD v15[2] = 0;
    v15[3] = 0;
    v15[4] = v8;
    v15[5] = v13;
    v15[6] = v9;
    swift_retain();
    id v16 = v13;
    unint64_t v17 = v9;
    sub_24B4E98B8((uint64_t)v7, (uint64_t)&unk_2697C6C08, (uint64_t)v15);
    swift_release();
    sub_24B534AC0();

    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24B531398(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x24C5D2FC0](v5, a1);
        swift_unknownObjectRelease();
        if (v6 == a2) {
          return v5;
        }
      }
      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (++v5 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_24B534D60();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_24B531488(uint64_t a1)
{
  return sub_24B522A70(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24B531494(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B5314DC(uint64_t a1)
{
  return sub_24B5239F0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), *(unsigned __int8 *)(v1 + 73) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 74) << 8));
}

uint64_t sub_24B531528(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *(CFIndex **)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  char v6 = *(unsigned char *)(v1 + 56);
  char v7 = *(unsigned char *)(v1 + 57);
  int v20 = *(unsigned __int8 *)(v1 + 59);
  unsigned int v21 = *(unsigned __int8 *)(v1 + 58);
  report = *(uint8_t **)(v1 + 64);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AF0);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v3, a1, v8);
  CFIndex *v4 = *(void *)(v5 + 328);
  double v9 = 0.0;
  if ((v6 & 1) == 0)
  {
    double v10 = (double)sub_24B534EE0() * 1000.0;
    sub_24B534EE0();
    double v9 = v10 + (double)v11 / 1000000.0;
  }
  id v12 = *(__IOHIDDevice **)(v5 + 296);
  LOBYTE(v23) = v7;
  IOHIDReportType v13 = sub_24B4E6524((unsigned __int8 *)&v23);
  if (v20) {
    CFIndex v14 = 0;
  }
  else {
    CFIndex v14 = v21;
  }
  uint64_t ReportWithCallback = IOHIDDeviceGetReportWithCallback(v12, v13, v14, report, v4, v9, (IOHIDReportCallback)sub_24B5244C0, v3);
  uint64_t result = sub_24B51B3AC(ReportWithCallback, (uint64_t)&v23);
  if ((v23 & 0x10000000000) == 0)
  {
    unint64_t v17 = v23 | ((unint64_t)BYTE4(v23) << 32);
    sub_24B4ED390();
    uint64_t v18 = swift_allocError();
    *(_DWORD *)uint64_t v19 = v17;
    *(unsigned char *)(v19 + 4) = BYTE4(v17) & 1;
    uint64_t v23 = v18;
    return sub_24B534A10();
  }
  return result;
}

uint64_t type metadata accessor for HIDDeviceClient.ProvideElementUpdate(uint64_t a1)
{
  return sub_24B532E8C(a1, (uint64_t *)&unk_2697CB4C0);
}

uint64_t type metadata accessor for HIDDeviceClient.RequestElementUpdate(uint64_t a1)
{
  return sub_24B532E8C(a1, qword_2697CB4D0);
}

uint64_t sub_24B531720(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id sub_24B531788(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

id sub_24B531794(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t sub_24B5317A0(uint64_t a1)
{
  uint64_t v3 = (void *)*((void *)v1 + 2);
  uint64_t v4 = *((void *)v1 + 3);
  uint64_t v5 = (CFDictionaryRef *)*((void *)v1 + 5);
  CFTimeInterval v6 = v1[6];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B20);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v3, a1, v7);
  uint64_t v8 = *(__IOHIDDevice **)(v4 + 296);
  type metadata accessor for IOHIDElement();
  CFArrayRef v9 = (const __CFArray *)sub_24B5349B0();
  uint64_t v10 = IOHIDDeviceCopyValueMultipleWithCallback(v8, v9, v5, v6, (IOHIDValueMultipleCallback)sub_24B52CEE4, v3);

  uint64_t result = sub_24B51B3AC(v10, (uint64_t)&v14);
  if ((v16 & 1) == 0)
  {
    unint64_t v12 = v14 | ((unint64_t)v15 << 32);
    sub_24B4ED390();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(unsigned char *)(v13 + 4) = BYTE4(v12) & 1;
    return sub_24B534A10();
  }
  return result;
}

uint64_t sub_24B5318E0@<X0>(void *a1@<X0>, __IOHIDValue *a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_24B52CF3C(a1, a2, v3, a3);
}

void sub_24B5318E8(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AF0);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, v8, v10);
    sub_24B51B3AC(a2, (uint64_t)v17);
    if ((v17[0] & 0x10000000000) != 0)
    {
      v17[0] = sub_24B530FB8(a3, a4);
      v17[1] = v13;
      sub_24B534A20();
    }
    else
    {
      unint64_t v14 = LODWORD(v17[0]) | ((unint64_t)BYTE4(v17[0]) << 32);
      sub_24B4ED390();
      uint64_t v15 = swift_allocError();
      *(_DWORD *)uint64_t v16 = v14;
      *(unsigned char *)(v16 + 4) = BYTE4(v14) & 1;
      v17[0] = v15;
      sub_24B534A10();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24B531A68(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  id v32 = a2;
  uint64_t v33 = a3;
  uint64_t v4 = type metadata accessor for HIDElement.Value();
  uint64_t v31 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  CFTimeInterval v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v7 = sub_24B534D00();
  }
  else {
    uint64_t v7 = *(void *)(a1 + 16);
  }
  uint64_t result = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
    sub_24B530744(0, v7 & ~(v7 >> 63), 0);
    uint64_t result = sub_24B5309E4(a1);
    uint64_t v35 = result;
    uint64_t v36 = v9;
    char v37 = v10 & 1;
    if (v7 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
    }
    else
    {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v11 = a1;
      }
      v29[2] = v11;
      do
      {
        while (1)
        {
          uint64_t v19 = v35;
          uint64_t v18 = v36;
          char v20 = v37;
          uint64_t v21 = a1;
          sub_24B530C38(v34, v35, v36, v37, a1);
          uint64_t v23 = v22;
          int64_t v24 = (void *)v34[0];
          v32();

          uint64_t v25 = v38;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_24B530744(0, *(void *)(v25 + 16) + 1, 1);
            uint64_t v25 = v38;
          }
          unint64_t v27 = *(void *)(v25 + 16);
          unint64_t v26 = *(void *)(v25 + 24);
          if (v27 >= v26 >> 1)
          {
            sub_24B530744(v26 > 1, v27 + 1, 1);
            uint64_t v25 = v38;
          }
          *(void *)(v25 + 16) = v27 + 1;
          uint64_t result = sub_24B531720((uint64_t)v6, v25+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v27, (uint64_t (*)(void))type metadata accessor for HIDElement.Value);
          if (v30) {
            break;
          }
          a1 = v21;
          sub_24B530AA8(v19, v18, v20, v21);
          uint64_t v13 = v12;
          uint64_t v15 = v14;
          char v17 = v16;
          sub_24B533E24(v19, v18, v20);
          uint64_t v35 = v13;
          uint64_t v36 = v15;
          char v37 = v17 & 1;
          if (!--v7) {
            goto LABEL_19;
          }
        }
        if ((v20 & 1) == 0) {
          goto LABEL_22;
        }
        a1 = v21;
        if (sub_24B534CD0()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6BC0);
        uint64_t v28 = (void (*)(void *, void))sub_24B5348E0();
        sub_24B534D50();
        v28(v34, 0);
        --v7;
      }
      while (v7);
LABEL_19:
      sub_24B533E24(v35, v36, v37);
      return v38;
    }
  }
  return result;
}

void sub_24B531D70(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_24B531D7C(uint64_t a1)
{
  return sub_24B52CC64(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(CFTimeInterval *)(v1 + 40), *(void *)(v1 + 32), *(uint64_t **)(v1 + 48), *(void *)(v1 + 56));
}

unint64_t sub_24B531D94()
{
  unint64_t result = qword_2697C6B38;
  if (!qword_2697C6B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6B38);
  }
  return result;
}

uint64_t sub_24B531DE8(uint64_t a1)
{
  uint64_t result = sub_24B531494(&qword_2697C6B40, 255, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24B531E44()
{
  return sub_24B531494(&qword_2697C6B48, 255, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient.ProvideElementUpdate);
}

uint64_t sub_24B531E90(uint64_t a1)
{
  uint64_t result = sub_24B531494(&qword_2697C6B50, 255, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient.RequestElementUpdate);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24B531EEC()
{
  return sub_24B531494(&qword_2697C6B58, 255, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient.RequestElementUpdate);
}

uint64_t sub_24B531F38(uint64_t a1, uint64_t a2)
{
  return sub_24B531494(&qword_2697C6B60, a2, (void (*)(uint64_t))type metadata accessor for HIDDeviceClient);
}

uint64_t sub_24B531F80()
{
  return 0;
}

uint64_t method lookup function for HIDDeviceClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HIDDeviceClient);
}

uint64_t dispatch thunk of HIDDeviceClient.descriptor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of HIDDeviceClient.deviceUsages.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of HIDDeviceClient.transport.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of HIDDeviceClient.product.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of HIDDeviceClient.manufacturer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of HIDDeviceClient.modelNumber.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of HIDDeviceClient.versionNumber.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of HIDDeviceClient.serialNumber.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of HIDDeviceClient.uniqueID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of HIDDeviceClient.locationID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of HIDDeviceClient.localizationCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of HIDDeviceClient.isBuiltIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of HIDDeviceClient.elements.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of HIDDeviceClient.__allocating_init(deviceReference:)()
{
  return (*(uint64_t (**)(void))(v0 + 776))();
}

uint64_t dispatch thunk of HIDDeviceClient.seizeDevice()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of HIDDeviceClient.monitorNotifications(reportIDsToMonitor:elementsToMonitor:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of HIDDeviceClient.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of HIDDeviceClient.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of HIDDeviceClient.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of HIDDeviceClient.dispatchSetReportRequest(type:id:data:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v7 + 872)
                                                                                              + **(int **)(*(void *)v7 + 872));
  uint64_t v15 = a7 & 1;
  char v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  void *v16 = v8;
  v16[1] = sub_24B4EC5B0;
  return v18(a1, a2, a3, a4, a5, a6, v15);
}

uint64_t dispatch thunk of HIDDeviceClient.dispatchGetReportRequest(type:id:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v5 + 880)
                                                                            + **(int **)(*(void *)v5 + 880));
  uint64_t v11 = a5 & 1;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_24B4ED0B0;
  return v14(a1, a2, a3, a4, v11);
}

uint64_t dispatch thunk of HIDDeviceClient.updateElements(_:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v5 + 888)
                                                                            + **(int **)(*(void *)v5 + 888));
  uint64_t v11 = a5 & 1;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_24B4EC5B0;
  return v14(a1, a2, a3, a4, v11);
}

ValueMetadata *type metadata accessor for HIDDeviceClient.DeviceReference()
{
  return &type metadata for HIDDeviceClient.DeviceReference;
}

uint64_t *initializeBufferWithCopyOfBuffer for HIDDeviceClient.Notification(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      uint64_t v8 = a2[1];
      unint64_t v9 = a2[2];
      sub_24B4E5538(v8, v9);
      a1[1] = v8;
      a1[2] = v9;
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB8) + 64);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = sub_24B534C70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for HIDDeviceClient.Notification(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    sub_24B4E5590(*(void *)(a1 + 8), *(void *)(a1 + 16));
    uint64_t v3 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB8) + 64);
    uint64_t v4 = sub_24B534C70();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v3, v4);
  }
  return result;
}

void *initializeWithCopy for HIDDeviceClient.Notification(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_24B4E5538(v7, v8);
    a1[1] = v7;
    a1[2] = v8;
    uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB8) + 64);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_24B534C70();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for HIDDeviceClient.Notification(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24B52E080((uint64_t)a1, type metadata accessor for HIDDeviceClient.Notification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      uint64_t v7 = a2[1];
      unint64_t v8 = a2[2];
      sub_24B4E5538(v7, v8);
      a1[1] = v7;
      a1[2] = v8;
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB8) + 64);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_24B534C70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

_WORD *initializeWithTake for HIDDeviceClient.Notification(_WORD *a1, _WORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB8) + 64);
    uint64_t v7 = (char *)a1 + v6;
    unint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_24B534C70();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_WORD *assignWithTake for HIDDeviceClient.Notification(_WORD *a1, _WORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24B52E080((uint64_t)a1, type metadata accessor for HIDDeviceClient.Notification);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697C6AB8) + 64);
      uint64_t v7 = (char *)a1 + v6;
      unint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = sub_24B534C70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDDeviceClient.Notification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for HIDDeviceClient.Notification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_24B532DA4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24B532DB4()
{
  uint64_t result = sub_24B534C70();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[4] = v2;
    v2[5] = MEMORY[0x263F8CF50] + 64;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_24B532E64()
{
  return type metadata accessor for HIDDeviceClient.StreamWrapper(0);
}

uint64_t type metadata accessor for HIDDeviceClient.StreamWrapper(uint64_t a1)
{
  return sub_24B532E8C(a1, (uint64_t *)&unk_2697CB4B0);
}

uint64_t sub_24B532E8C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_24B532EC4()
{
  sub_24B532F64();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_24B532F64()
{
  if (!qword_2697C6B80)
  {
    type metadata accessor for HIDDeviceClient.Notification(255);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2697C6948);
    unint64_t v0 = sub_24B534A80();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2697C6B80);
    }
  }
}

ValueMetadata *type metadata accessor for HIDDeviceClient.UnsafeProperty()
{
  return &type metadata for HIDDeviceClient.UnsafeProperty;
}

uint64_t *initializeBufferWithCopyOfBuffer for HIDDeviceClient.ProvideElementUpdate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24B534C70();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for HIDDeviceClient.ProvideElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HIDDeviceClient.ProvideElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for HIDDeviceClient.ProvideElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for HIDDeviceClient.ProvideElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDDeviceClient.ProvideElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for HIDDeviceClient.ProvideElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t sub_24B5332F8()
{
  uint64_t result = sub_24B534C70();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for HIDDeviceClient.RequestElementUpdate(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24B534C70();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s7CoreHID15HIDDeviceClientC20ProvideElementUpdateVwxx_0(uint64_t a1)
{
  uint64_t v2 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HIDDeviceClient.RequestElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HIDDeviceClient.RequestElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for HIDDeviceClient.RequestElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for HIDDeviceClient.RequestElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDDeviceClient.RequestElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24B533724);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24B534C70();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for HIDDeviceClient.RequestElementUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24B5337FC);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_24B534C70();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_24B5338BC()
{
  uint64_t result = sub_24B534C70();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for HIDDeviceClient.HIDElementUpdateResult()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s7CoreHID15HIDDeviceClientC22HIDElementUpdateResultVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HIDDeviceClient.HIDElementUpdateResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for HIDDeviceClient.HIDElementUpdateResult(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDDeviceClient.HIDElementUpdateResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDDeviceClient.HIDElementUpdateResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDDeviceClient.HIDElementUpdateResult()
{
  return &type metadata for HIDDeviceClient.HIDElementUpdateResult;
}

uint64_t type metadata accessor for HIDDeviceClient.Context()
{
  return self;
}

void type metadata accessor for IOHIDValue(uint64_t a1)
{
}

uint64_t sub_24B533B44()
{
  return sub_24B531494(&qword_2697C6B98, 255, type metadata accessor for IOHIDDevice);
}

uint64_t sub_24B533B90()
{
  return sub_24B531494(&qword_2697C67C0, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
}

uint64_t sub_24B533BDC()
{
  return sub_24B531494(&qword_2697C67C8, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
}

uint64_t sub_24B533C28()
{
  return sub_24B531494(&qword_2697C6BA0, 255, type metadata accessor for IOHIDDevice);
}

uint64_t sub_24B533C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6858);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    sub_24B51B3AC(a2, (uint64_t)&v13);
    if (v15)
    {
      sub_24B534A20();
    }
    else
    {
      unint64_t v9 = v13 | ((unint64_t)v14 << 32);
      sub_24B4ED390();
      uint64_t v10 = swift_allocError();
      *(_DWORD *)uint64_t v11 = v9;
      *(unsigned char *)(v11 + 4) = BYTE4(v9) & 1;
      uint64_t v12 = v10;
      sub_24B534A10();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24B533DD0()
{
  unint64_t result = qword_2697C6BB8;
  if (!qword_2697C6BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697C6BB8);
  }
  return result;
}

uint64_t sub_24B533E24(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24B533E30(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24B533E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_24B533EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697C6B20);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
    sub_24B51B3AC(a2, (uint64_t)&v13);
    if ((v13 & 0x10000000000) == 0)
    {
      unint64_t v9 = v13 | ((unint64_t)BYTE4(v13) << 32);
      sub_24B4ED390();
      uint64_t v10 = swift_allocError();
      *(_DWORD *)uint64_t v11 = v9;
      *(unsigned char *)(v11 + 4) = BYTE4(v9) & 1;
      uint64_t v13 = v10;
      sub_24B534A10();
      goto LABEL_6;
    }
    uint64_t v13 = 0;
    type metadata accessor for IOHIDElement();
    type metadata accessor for IOHIDValue(0);
    sub_24B531494(&qword_2697C67C8, 255, (void (*)(uint64_t))type metadata accessor for IOHIDElement);
    sub_24B5348D0();
    if (v13)
    {
      sub_24B534A20();
LABEL_6:
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_24B534084(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_24B534090(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24B5340F4(const uint8_t *a1)
{
  return sub_24B523CDC(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(unsigned __int8 *)(v1 + 25) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 26) << 8), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 56), *(CFTimeInterval *)(v1 + 48));
}

uint64_t sub_24B53413C()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24B53417C()
{
  return sub_24B522ED0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_24B534184()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_24B5341CC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_24B4ED9E4;
  *(_OWORD *)(v2 + 16) = v3;
  uint64_t v4 = *(void *)v3;
  *(void *)(v2 + 32) = *(void *)(*(void *)v3 + 832);
  *(void *)(v2 + 40) = (v4 + 832) & 0xFFFFFFFFFFFFLL | 0xB1FC000000000000;
  return MEMORY[0x270FA2498](sub_24B523020);
}

uint64_t sub_24B5342AC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24B5342E4()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_24B534334()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_24B4ED9E4;
  return sub_24B52066C((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_24B5343DC()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_24B4E5590(*(void *)(v0 + 48), *(void *)(v0 + 56));

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_24B53442C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  int v3 = *(_DWORD *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_24B4ED9E4;
  return sub_24B520390((uint64_t)v7, v8, v9, v2, v3, v4, v5, v6);
}

uint64_t sub_24B5344F4()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_24B53453C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_24B4ED9E4;
  return sub_24B520104((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_24B5345D4()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_24B53461C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  int v3 = *(_DWORD *)(v0 + 40);
  int v4 = *(_DWORD *)(v0 + 44);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_24B4ED9E4;
  return sub_24B51FE94((uint64_t)v6, v7, v8, v2, v3, v4, v5);
}

void sub_24B5346CC()
{
}

uint64_t sub_24B5346F0()
{
  return MEMORY[0x270EEE618]();
}

uint64_t sub_24B534700()
{
  return MEMORY[0x270EEE628]();
}

uint64_t sub_24B534710()
{
  return MEMORY[0x270EEE638]();
}

uint64_t sub_24B534720()
{
  return MEMORY[0x270EEE648]();
}

uint64_t sub_24B534730()
{
  return MEMORY[0x270EEE658]();
}

uint64_t sub_24B534740()
{
  return MEMORY[0x270EEE670]();
}

uint64_t sub_24B534750()
{
  return MEMORY[0x270EEE688]();
}

uint64_t sub_24B534760()
{
  return MEMORY[0x270EEE920]();
}

uint64_t sub_24B534770()
{
  return MEMORY[0x270EEE930]();
}

uint64_t sub_24B534780()
{
  return MEMORY[0x270EEE950]();
}

uint64_t sub_24B534790()
{
  return MEMORY[0x270EEFFB0]();
}

uint64_t sub_24B5347A0()
{
  return MEMORY[0x270EEFFE0]();
}

uint64_t sub_24B5347B0()
{
  return MEMORY[0x270EEFFE8]();
}

uint64_t sub_24B5347C0()
{
  return MEMORY[0x270EF0000]();
}

uint64_t sub_24B5347D0()
{
  return MEMORY[0x270EF0070]();
}

uint64_t sub_24B5347E0()
{
  return MEMORY[0x270EF00E8]();
}

uint64_t sub_24B5347F0()
{
  return MEMORY[0x270EF0120]();
}

uint64_t sub_24B534800()
{
  return MEMORY[0x270EF0190]();
}

uint64_t sub_24B534810()
{
  return MEMORY[0x270EF0238]();
}

uint64_t sub_24B534820()
{
  return MEMORY[0x270EF0248]();
}

uint64_t sub_24B534830()
{
  return MEMORY[0x270EF0268]();
}

uint64_t sub_24B534840()
{
  return MEMORY[0x270FA06B8]();
}

uint64_t sub_24B534850()
{
  return MEMORY[0x270FA06C8]();
}

uint64_t sub_24B534860()
{
  return MEMORY[0x270FA06D8]();
}

uint64_t sub_24B534870()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t sub_24B534880()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t sub_24B534890()
{
  return MEMORY[0x270F9D010]();
}

uint64_t sub_24B5348A0()
{
  return MEMORY[0x270F9D030]();
}

uint64_t sub_24B5348B0()
{
  return MEMORY[0x270F9D040]();
}

uint64_t sub_24B5348C0()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_24B5348D0()
{
  return MEMORY[0x270EF1820]();
}

uint64_t sub_24B5348E0()
{
  return MEMORY[0x270F9D110]();
}

uint64_t sub_24B5348F0()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_24B534900()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_24B534910()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_24B534920()
{
  return MEMORY[0x270F9D490]();
}

uint64_t sub_24B534930()
{
  return MEMORY[0x270F9D498]();
}

uint64_t sub_24B534940()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_24B534950()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_24B534960()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t sub_24B534970()
{
  return MEMORY[0x270F9D600]();
}

uint64_t sub_24B534980()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_24B534990()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_24B5349A0()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_24B5349B0()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_24B5349C0()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_24B5349D0()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_24B5349E0()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_24B5349F0()
{
  return MEMORY[0x270EF1BD8]();
}

uint64_t sub_24B534A00()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t sub_24B534A10()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t sub_24B534A20()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t sub_24B534A30()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t sub_24B534A40()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t sub_24B534A50()
{
  return MEMORY[0x270FA20C0]();
}

uint64_t sub_24B534A60()
{
  return MEMORY[0x270FA20D8]();
}

uint64_t sub_24B534A70()
{
  return MEMORY[0x270FA20E0]();
}

uint64_t sub_24B534A80()
{
  return MEMORY[0x270FA20E8]();
}

uint64_t sub_24B534A90()
{
  return MEMORY[0x270FA2120]();
}

uint64_t sub_24B534AA0()
{
  return MEMORY[0x270EF1CE0]();
}

uint64_t sub_24B534AB0()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t sub_24B534AC0()
{
  return MEMORY[0x270FA0F10]();
}

uint64_t sub_24B534AD0()
{
  return MEMORY[0x270FA0F28]();
}

uint64_t sub_24B534AE0()
{
  return MEMORY[0x270FA0F30]();
}

uint64_t sub_24B534AF0()
{
  return MEMORY[0x270FA0F48]();
}

uint64_t sub_24B534B00()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_24B534B10()
{
  return MEMORY[0x270FA1190]();
}

uint64_t sub_24B534B20()
{
  return MEMORY[0x270F9E3B8]();
}

uint64_t sub_24B534B30()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_24B534B40()
{
  return MEMORY[0x270F9E518]();
}

uint64_t sub_24B534B50()
{
  return MEMORY[0x270F9E5B8]();
}

uint64_t sub_24B534B60()
{
  return MEMORY[0x270F9E5E0]();
}

uint64_t sub_24B534B70()
{
  return MEMORY[0x270F9E640]();
}

uint64_t sub_24B534B80()
{
  return MEMORY[0x270F9E648]();
}

uint64_t sub_24B534B90()
{
  return MEMORY[0x270F9E650]();
}

uint64_t sub_24B534BA0()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_24B534BB0()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_24B534BC0()
{
  return MEMORY[0x270F9E7F8]();
}

uint64_t sub_24B534BD0()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_24B534BE0()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_24B534BF0()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t sub_24B534C00()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_24B534C10()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_24B534C20()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_24B534C30()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_24B534C40()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_24B534C50()
{
  return MEMORY[0x270FA21C0]();
}

uint64_t sub_24B534C60()
{
  return MEMORY[0x270FA21D8]();
}

uint64_t sub_24B534C70()
{
  return MEMORY[0x270FA21F8]();
}

uint64_t sub_24B534C80()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_24B534C90()
{
  return MEMORY[0x270F9EE10]();
}

uint64_t sub_24B534CA0()
{
  return MEMORY[0x270F9EF48]();
}

uint64_t sub_24B534CB0()
{
  return MEMORY[0x270F9EF50]();
}

uint64_t sub_24B534CC0()
{
  return MEMORY[0x270F9EF60]();
}

uint64_t sub_24B534CD0()
{
  return MEMORY[0x270F9EF68]();
}

uint64_t sub_24B534CE0()
{
  return MEMORY[0x270F9EF78]();
}

uint64_t sub_24B534CF0()
{
  return MEMORY[0x270F9EF80]();
}

uint64_t sub_24B534D00()
{
  return MEMORY[0x270F9EF88]();
}

uint64_t sub_24B534D10()
{
  return MEMORY[0x270F9EF90]();
}

uint64_t sub_24B534D20()
{
  return MEMORY[0x270F9EFA8]();
}

uint64_t sub_24B534D30()
{
  return MEMORY[0x270F9EFB0]();
}

uint64_t sub_24B534D40()
{
  return MEMORY[0x270F9EFC0]();
}

uint64_t sub_24B534D50()
{
  return MEMORY[0x270F9EFE0]();
}

uint64_t sub_24B534D60()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_24B534D70()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_24B534D80()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_24B534D90()
{
  return MEMORY[0x270F9F0A8]();
}

uint64_t sub_24B534DA0()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_24B534DB0()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_24B534DC0()
{
  return MEMORY[0x270F9F7B0]();
}

uint64_t sub_24B534DD0()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_24B534DF0()
{
  return MEMORY[0x270F9FA80]();
}

uint64_t sub_24B534E00()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_24B534E10()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_24B534E20()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_24B534E30()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_24B534E40()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_24B534E50()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t sub_24B534E60()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_24B534E70()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_24B534E80()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_24B534E90()
{
  return MEMORY[0x270F9FC70]();
}

uint64_t sub_24B534EA0()
{
  return MEMORY[0x270F9FC80]();
}

uint64_t sub_24B534EB0()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_24B534EC0()
{
  return MEMORY[0x270EF2748]();
}

uint64_t sub_24B534ED0()
{
  return MEMORY[0x270EF2760]();
}

uint64_t sub_24B534EE0()
{
  return MEMORY[0x270F9FF68]();
}

uint64_t sub_24B534EF0()
{
  return MEMORY[0x270F9FF90]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void IOHIDDeviceActivate(IOHIDDeviceRef device)
{
}

void IOHIDDeviceCancel(IOHIDDeviceRef device)
{
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x270EF4050](device, *(void *)&options);
}

CFArrayRef IOHIDDeviceCopyMatchingElements(IOHIDDeviceRef device, CFDictionaryRef matching, IOOptionBits options)
{
  return (CFArrayRef)MEMORY[0x270EF4060](device, matching, *(void *)&options);
}

IOReturn IOHIDDeviceCopyValueMultipleWithCallback(IOHIDDeviceRef device, CFArrayRef elements, CFDictionaryRef *pMultiple, CFTimeInterval timeout, IOHIDValueMultipleCallback callback, void *context)
{
  return MEMORY[0x270EF4068](device, elements, pMultiple, callback, context, timeout);
}

IOHIDDeviceRef IOHIDDeviceCreate(CFAllocatorRef allocator, io_service_t service)
{
  return (IOHIDDeviceRef)MEMORY[0x270EF4070](allocator, *(void *)&service);
}

CFTypeRef IOHIDDeviceGetProperty(IOHIDDeviceRef device, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x270EF4078](device, key);
}

IOReturn IOHIDDeviceGetReportWithCallback(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, uint8_t *report, CFIndex *pReportLength, CFTimeInterval timeout, IOHIDReportCallback callback, void *context)
{
  return MEMORY[0x270EF4088](device, *(void *)&reportType, reportID, report, pReportLength, callback, context, timeout);
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x270EF40A0](device, *(void *)&options);
}

void IOHIDDeviceRegisterInputReportWithTimeStampCallback(IOHIDDeviceRef device, uint8_t *report, CFIndex reportLength, IOHIDReportWithTimeStampCallback callback, void *context)
{
}

void IOHIDDeviceRegisterInputValueCallback(IOHIDDeviceRef device, IOHIDValueCallback callback, void *context)
{
}

void IOHIDDeviceRegisterRemovalCallback(IOHIDDeviceRef device, IOHIDCallback callback, void *context)
{
}

void IOHIDDeviceSetCancelHandler(IOHIDDeviceRef device, dispatch_block_t handler)
{
}

void IOHIDDeviceSetDispatchQueue(IOHIDDeviceRef device, dispatch_queue_t queue)
{
}

void IOHIDDeviceSetInputValueMatchingMultiple(IOHIDDeviceRef device, CFArrayRef multiple)
{
}

Boolean IOHIDDeviceSetProperty(IOHIDDeviceRef device, CFStringRef key, CFTypeRef property)
{
  return MEMORY[0x270EF40E8](device, key, property);
}

IOReturn IOHIDDeviceSetReportWithCallback(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, const uint8_t *report, CFIndex reportLength, CFTimeInterval timeout, IOHIDReportCallback callback, void *context)
{
  return MEMORY[0x270EF40F8](device, *(void *)&reportType, reportID, report, reportLength, callback, context, timeout);
}

IOReturn IOHIDDeviceSetValueMultipleWithCallback(IOHIDDeviceRef device, CFDictionaryRef multiple, CFTimeInterval timeout, IOHIDValueMultipleCallback callback, void *context)
{
  return MEMORY[0x270EF4100](device, multiple, callback, context, timeout);
}

CFArrayRef IOHIDElementGetChildren(IOHIDElementRef element)
{
  return (CFArrayRef)MEMORY[0x270EF4110](element);
}

IOHIDElementCollectionType IOHIDElementGetCollectionType(IOHIDElementRef element)
{
  return MEMORY[0x270EF4118](element);
}

IOHIDElementCookie IOHIDElementGetCookie(IOHIDElementRef element)
{
  return MEMORY[0x270EF4120](element);
}

CFIndex IOHIDElementGetLogicalMax(IOHIDElementRef element)
{
  return MEMORY[0x270EF4130](element);
}

CFIndex IOHIDElementGetLogicalMin(IOHIDElementRef element)
{
  return MEMORY[0x270EF4138](element);
}

IOHIDElementRef IOHIDElementGetParent(IOHIDElementRef element)
{
  return (IOHIDElementRef)MEMORY[0x270EF4148](element);
}

CFIndex IOHIDElementGetPhysicalMax(IOHIDElementRef element)
{
  return MEMORY[0x270EF4150](element);
}

CFIndex IOHIDElementGetPhysicalMin(IOHIDElementRef element)
{
  return MEMORY[0x270EF4158](element);
}

uint32_t IOHIDElementGetReportCount(IOHIDElementRef element)
{
  return MEMORY[0x270EF4168](element);
}

uint32_t IOHIDElementGetReportID(IOHIDElementRef element)
{
  return MEMORY[0x270EF4170](element);
}

uint32_t IOHIDElementGetReportSize(IOHIDElementRef element)
{
  return MEMORY[0x270EF4178](element);
}

IOHIDElementType IOHIDElementGetType(IOHIDElementRef element)
{
  return MEMORY[0x270EF4180](element);
}

uint32_t IOHIDElementGetUnit(IOHIDElementRef element)
{
  return MEMORY[0x270EF4190](element);
}

uint32_t IOHIDElementGetUnitExponent(IOHIDElementRef element)
{
  return MEMORY[0x270EF4198](element);
}

uint32_t IOHIDElementGetUsage(IOHIDElementRef element)
{
  return MEMORY[0x270EF41A0](element);
}

uint32_t IOHIDElementGetUsagePage(IOHIDElementRef element)
{
  return MEMORY[0x270EF41A8](element);
}

Boolean IOHIDElementIsArray(IOHIDElementRef element)
{
  return MEMORY[0x270EF41C0](element);
}

void IOHIDUserDeviceActivate(IOHIDUserDeviceRef device)
{
}

void IOHIDUserDeviceCancel(IOHIDUserDeviceRef device)
{
}

CFTypeRef IOHIDUserDeviceCopyProperty(IOHIDUserDeviceRef device, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x270EF46C8](device, key);
}

uint64_t IOHIDUserDeviceCopyService()
{
  return MEMORY[0x270EF46D0]();
}

IOHIDUserDeviceRef IOHIDUserDeviceCreateWithProperties(CFAllocatorRef allocator, CFDictionaryRef properties, IOOptionBits options)
{
  return (IOHIDUserDeviceRef)MEMORY[0x270EF46E0](allocator, properties, *(void *)&options);
}

uint64_t IOHIDUserDeviceHandleReportAsyncWithTimeStamp()
{
  return MEMORY[0x270EF46F0]();
}

void IOHIDUserDeviceRegisterGetReportBlock(IOHIDUserDeviceRef device, IOHIDUserDeviceGetReportBlock block)
{
}

void IOHIDUserDeviceRegisterSetReportBlock(IOHIDUserDeviceRef device, IOHIDUserDeviceSetReportBlock block)
{
}

void IOHIDUserDeviceSetCancelHandler(IOHIDUserDeviceRef device, dispatch_block_t handler)
{
}

void IOHIDUserDeviceSetDispatchQueue(IOHIDUserDeviceRef device, dispatch_queue_t queue)
{
}

IOHIDValueRef IOHIDValueCreateWithBytes(CFAllocatorRef allocator, IOHIDElementRef element, uint64_t timeStamp, const uint8_t *bytes, CFIndex length)
{
  return (IOHIDValueRef)MEMORY[0x270EF4748](allocator, element, timeStamp, bytes, length);
}

const uint8_t *__cdecl IOHIDValueGetBytePtr(IOHIDValueRef value)
{
  return (const uint8_t *)MEMORY[0x270EF4758](value);
}

IOHIDElementRef IOHIDValueGetElement(IOHIDValueRef value)
{
  return (IOHIDElementRef)MEMORY[0x270EF4760](value);
}

CFIndex IOHIDValueGetLength(IOHIDValueRef value)
{
  return MEMORY[0x270EF4770](value);
}

uint64_t IOHIDValueGetTimeStamp(IOHIDValueRef value)
{
  return MEMORY[0x270EF4780](value);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x270EF4790](*(void *)&iterator);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x270EF47B8](*(void *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x270EF4A38](*(void *)&entry, entryID);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x270EF4A80](notifyPort, *(void *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x270EF4A88](notifyPort, notificationType, matching, callback, refCon, notification);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x270EF4AB0](*(void *)&mainPort, matching);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void bzero(void *a1, size_t a2)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void free(void *a1)
{
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x270FA0250]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x270FA0418]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x270FA0610]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x270FA0618]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x270FA0620]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}